
BNO086_H745_UROS_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d9f4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001198  0801dc98  0801dc98  0001ec98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee30  0801ee30  0002079c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ee30  0801ee30  0001fe30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ee38  0801ee38  0002079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ee38  0801ee38  0001fe38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ee44  0801ee44  0001fe44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006dc  24000000  0801ee48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240006dc  0801f524  000206dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400073c  0801f584  0002073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00013320  240007a0  0801f5e4  000207a0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24013ac0  0801f5e4  00020ac0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f394  00000000  00000000  000207ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000060d1  00000000  00000000  0004fb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021a0  00000000  00000000  00055c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019dc  00000000  00000000  00057dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043cab  00000000  00000000  000597ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030048  00000000  00000000  0009d457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a494e  00000000  00000000  000cd49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000076  00000000  00000000  00271ded  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009ae4  00000000  00000000  00271e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000007c  00000000  00000000  0027b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007a0 	.word	0x240007a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dc7c 	.word	0x0801dc7c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007a4 	.word	0x240007a4
 80002dc:	0801dc7c 	.word	0x0801dc7c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <READIMU_HSEM>:
		}
	}
}
#else

void READIMU_HSEM(BNO086_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 8000748:	2000      	movs	r0, #0
 800074a:	f005 fbeb 	bl	8005f24 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	f040 80af 	bne.w	80008b4 <READIMU_HSEM+0x174>
    	bno->quaternion.i = SRAM4->Data[0];
 8000756:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800075a:	ed93 7b02 	vldr	d7, [r3, #8]
 800075e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4->Data[1];
 8000768:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800076c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000770:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4->Data[2];
 800077a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800077e:	ed93 7b06 	vldr	d7, [r3, #24]
 8000782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4->Data[3];
 800078c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000790:	ed93 7b08 	vldr	d7, [r3, #32]
 8000794:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4->Data[4];
 800079e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007a2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80007a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4->Data[5];
 80007b0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007b4:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80007b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4->Data[6];
 80007c2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007c6:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80007ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4->Data[7];
 80007d4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007d8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80007dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4->Data[8];
 80007e6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007ea:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80007ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4->Data[9];
 80007f8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007fc:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000800:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4->Data[10];
 800080a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800080e:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8000812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4->Data[11];
 800081c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000820:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4->Data[12];
 800082e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000832:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8000836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4->Data[13];
 8000840:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000844:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4->Data[14];
 8000852:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000856:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4->Data[15];
 8000864:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000868:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800086c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4->Data[16];
 8000876:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800087a:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 800087e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4->Data[17];
 8000888:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800088c:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8000890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4->Data[18];
 800089a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800089e:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80008a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f005 fb52 	bl	8005f58 <HAL_HSEM_Release>
    }
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c0:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <SystemInit+0xfc>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a3c      	ldr	r2, [pc, #240]	@ (80009b8 <SystemInit+0xfc>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80008d0:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <SystemInit+0xfc>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a38      	ldr	r2, [pc, #224]	@ (80009b8 <SystemInit+0xfc>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008dc:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <SystemInit+0x100>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d807      	bhi.n	80008f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <SystemInit+0x100>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 030f 	bic.w	r3, r3, #15
 80008f0:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <SystemInit+0x100>)
 80008f2:	f043 0307 	orr.w	r3, r3, #7
 80008f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f8:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <SystemInit+0x104>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a30      	ldr	r2, [pc, #192]	@ (80009c0 <SystemInit+0x104>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <SystemInit+0x104>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <SystemInit+0x104>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	492c      	ldr	r1, [pc, #176]	@ (80009c0 <SystemInit+0x104>)
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <SystemInit+0x108>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000916:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <SystemInit+0x100>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000922:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <SystemInit+0x100>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	4a24      	ldr	r2, [pc, #144]	@ (80009bc <SystemInit+0x100>)
 800092c:	f043 0307 	orr.w	r3, r3, #7
 8000930:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <SystemInit+0x104>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <SystemInit+0x104>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <SystemInit+0x104>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <SystemInit+0x104>)
 8000946:	4a20      	ldr	r2, [pc, #128]	@ (80009c8 <SystemInit+0x10c>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <SystemInit+0x104>)
 800094c:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <SystemInit+0x110>)
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <SystemInit+0x104>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <SystemInit+0x114>)
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <SystemInit+0x104>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <SystemInit+0x104>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <SystemInit+0x114>)
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <SystemInit+0x104>)
 8000964:	2200      	movs	r2, #0
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <SystemInit+0x104>)
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <SystemInit+0x114>)
 800096c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <SystemInit+0x104>)
 8000970:	2200      	movs	r2, #0
 8000972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <SystemInit+0x104>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <SystemInit+0x104>)
 800097a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <SystemInit+0x104>)
 8000982:	2200      	movs	r2, #0
 8000984:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <SystemInit+0x118>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <SystemInit+0x118>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <SystemInit+0x11c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <SystemInit+0x120>)
 8000998:	4013      	ands	r3, r2
 800099a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800099e:	d202      	bcs.n	80009a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <SystemInit+0x124>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <SystemInit+0x128>)
 80009a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009ac:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	52002000 	.word	0x52002000
 80009c0:	58024400 	.word	0x58024400
 80009c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009c8:	02020200 	.word	0x02020200
 80009cc:	01ff0000 	.word	0x01ff0000
 80009d0:	01010280 	.word	0x01010280
 80009d4:	580000c0 	.word	0x580000c0
 80009d8:	5c001000 	.word	0x5c001000
 80009dc:	ffff0000 	.word	0xffff0000
 80009e0:	51008108 	.word	0x51008108
 80009e4:	52004000 	.word	0x52004000

080009e8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009f4:	f00c fff0 	bl	800d9d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b64 <pvPortMallocMicroROS+0x17c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000a00:	f000 f986 	bl	8000d10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a04:	4b58      	ldr	r3, [pc, #352]	@ (8000b68 <pvPortMallocMicroROS+0x180>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f040 8090 	bne.w	8000b32 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d01e      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a18:	2208      	movs	r2, #8
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d015      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f023 0307 	bic.w	r3, r3, #7
 8000a30:	3308      	adds	r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00b      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	e7fd      	b.n	8000a52 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d06a      	beq.n	8000b32 <pvPortMallocMicroROS+0x14a>
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d865      	bhi.n	8000b32 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a66:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <pvPortMallocMicroROS+0x188>)
 8000a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a6a:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <pvPortMallocMicroROS+0x188>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a70:	e004      	b.n	8000a7c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d903      	bls.n	8000a8e <pvPortMallocMicroROS+0xa6>
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1f1      	bne.n	8000a72 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <pvPortMallocMicroROS+0x17c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d04c      	beq.n	8000b32 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	4413      	add	r3, r2
 8000aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d920      	bls.n	8000afc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00b      	beq.n	8000ae4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ad0:	f383 8811 	msr	BASEPRI, r3
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	f3bf 8f4f 	dsb	sy
 8000adc:	613b      	str	r3, [r7, #16]
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000af6:	69b8      	ldr	r0, [r7, #24]
 8000af8:	f000 f96c 	bl	8000dd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <pvPortMallocMicroROS+0x18c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d203      	bcs.n	8000b1e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <pvPortMallocMicroROS+0x18c>)
 8000b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <pvPortMallocMicroROS+0x180>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b32:	f00c ff5f 	bl	800d9f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00b      	beq.n	8000b58 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60fb      	str	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b58:	69fb      	ldr	r3, [r7, #28]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	240043c4 	.word	0x240043c4
 8000b68:	240043d0 	.word	0x240043d0
 8000b6c:	240043c8 	.word	0x240043c8
 8000b70:	240043bc 	.word	0x240043bc
 8000b74:	240043cc 	.word	0x240043cc

08000b78 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d04a      	beq.n	8000c20 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10b      	bne.n	8000bbe <vPortFreeMicroROS+0x46>
	__asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	f3bf 8f6f 	isb	sy
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	60fb      	str	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bca:	f383 8811 	msr	BASEPRI, r3
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f3bf 8f4f 	dsb	sy
 8000bd6:	60bb      	str	r3, [r7, #8]
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	e7fd      	b.n	8000bda <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d019      	beq.n	8000c20 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d115      	bne.n	8000c20 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c04:	f00c fee8 	bl	800d9d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <vPortFreeMicroROS+0xb4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <vPortFreeMicroROS+0xb4>)
 8000c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c16:	6938      	ldr	r0, [r7, #16]
 8000c18:	f000 f8dc 	bl	8000dd4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c1c:	f00c feea 	bl	800d9f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240043d0 	.word	0x240043d0
 8000c2c:	240043c8 	.word	0x240043c8

08000c30 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	425b      	negs	r3, r3
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <getBlockSize+0x38>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

	return count;
 8000c58:	68fb      	ldr	r3, [r7, #12]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	240043d0 	.word	0x240043d0

08000c6c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c76:	f00c feaf 	bl	800d9d8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c7a:	6838      	ldr	r0, [r7, #0]
 8000c7c:	f7ff feb4 	bl	80009e8 <pvPortMallocMicroROS>
 8000c80:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d017      	beq.n	8000cb8 <pvPortReallocMicroROS+0x4c>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d014      	beq.n	8000cb8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffce 	bl	8000c30 <getBlockSize>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2208      	movs	r2, #8
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d201      	bcs.n	8000ca8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	68b8      	ldr	r0, [r7, #8]
 8000cae:	f01c f9a4 	bl	801cffa <memcpy>

		vPortFreeMicroROS(pv);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff60 	bl	8000b78 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cb8:	f00c fe9c 	bl	800d9f4 <xTaskResumeAll>

	return newmem;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000cd0:	f00c fe82 	bl	800d9d8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff fe82 	bl	80009e8 <pvPortMallocMicroROS>
 8000ce4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cea:	e004      	b.n	8000cf6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	613a      	str	r2, [r7, #16]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	617a      	str	r2, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f5      	bne.n	8000cec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d00:	f00c fe78 	bl	800d9f4 <xTaskResumeAll>
  	return mem;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <prvHeapInit+0xac>)
 8000d1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00c      	beq.n	8000d44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3307      	adds	r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 0307 	bic.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <prvHeapInit+0xac>)
 8000d40:	4413      	add	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d48:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <prvHeapInit+0xb0>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <prvHeapInit+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <prvHeapInit+0xb8>)
 8000d9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <prvHeapInit+0xbc>)
 8000da6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <prvHeapInit+0xc0>)
 8000daa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	240007bc 	.word	0x240007bc
 8000dc0:	240043bc 	.word	0x240043bc
 8000dc4:	240043c4 	.word	0x240043c4
 8000dc8:	240043cc 	.word	0x240043cc
 8000dcc:	240043c8 	.word	0x240043c8
 8000dd0:	240043d0 	.word	0x240043d0

08000dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <prvInsertBlockIntoFreeList+0xac>)
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e002      	b.n	8000de8 <prvInsertBlockIntoFreeList+0x14>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8f7      	bhi.n	8000de2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d108      	bne.n	8000e16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	441a      	add	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d118      	bne.n	8000e5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <prvInsertBlockIntoFreeList+0xb0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d00d      	beq.n	8000e52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	441a      	add	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e008      	b.n	8000e64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <prvInsertBlockIntoFreeList+0xb0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e003      	b.n	8000e64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d002      	beq.n	8000e72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	240043bc 	.word	0x240043bc
 8000e84:	240043c4 	.word	0x240043c4

08000e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	200b      	movs	r0, #11
 8000eb2:	f001 fbe3 	bl	800267c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f001 fbfa 	bl	80026b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	200c      	movs	r0, #12
 8000ec2:	f001 fbdb 	bl	800267c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f001 fbf2 	bl	80026b0 <HAL_NVIC_EnableIRQ>

}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ee6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ee8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eec:	4904      	ldr	r1, [pc, #16]	@ (8000f00 <cubemx_transport_open+0x28>)
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f008 fcd2 	bl	8009898 <HAL_UART_Receive_DMA>
    return true;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240043d4 	.word	0x240043d4

08000f04 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f12:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f008 fd0b 	bl	8009930 <HAL_UART_DMAStop>
    return true;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f38:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d11b      	bne.n	8000f7c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	6978      	ldr	r0, [r7, #20]
 8000f4e:	f008 fc23 	bl	8009798 <HAL_UART_Transmit_DMA>
 8000f52:	4603      	mov	r3, r0
 8000f54:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f56:	e002      	b.n	8000f5e <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f00b f8bd 	bl	800c0d8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <cubemx_transport_write+0x4a>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	2b20      	cmp	r3, #32
 8000f6c:	d1f4      	bne.n	8000f58 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f6e:	7cfb      	ldrb	r3, [r7, #19]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <cubemx_transport_write+0x54>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	e002      	b.n	8000f7e <cubemx_transport_write+0x5a>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e000      	b.n	8000f7e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f7c:	2300      	movs	r3, #0
    }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f9c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5a      	ldr	r2, [pc, #360]	@ (8001118 <cubemx_transport_read+0x190>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d068      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	@ (800111c <cubemx_transport_read+0x194>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d061      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a55      	ldr	r2, [pc, #340]	@ (8001120 <cubemx_transport_read+0x198>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05a      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a52      	ldr	r2, [pc, #328]	@ (8001124 <cubemx_transport_read+0x19c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d053      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <cubemx_transport_read+0x1a0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <cubemx_transport_read+0x1a4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d045      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a4b      	ldr	r2, [pc, #300]	@ (8001130 <cubemx_transport_read+0x1a8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d03e      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <cubemx_transport_read+0x1ac>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d037      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <cubemx_transport_read+0x1b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d030      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a43      	ldr	r2, [pc, #268]	@ (800113c <cubemx_transport_read+0x1b4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d029      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a41      	ldr	r2, [pc, #260]	@ (8001140 <cubemx_transport_read+0x1b8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d022      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3e      	ldr	r2, [pc, #248]	@ (8001144 <cubemx_transport_read+0x1bc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01b      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <cubemx_transport_read+0x1c0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d014      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a39      	ldr	r2, [pc, #228]	@ (800114c <cubemx_transport_read+0x1c4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a37      	ldr	r2, [pc, #220]	@ (8001150 <cubemx_transport_read+0x1c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d006      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <cubemx_transport_read+0x1cc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d107      	bne.n	8001096 <cubemx_transport_read+0x10e>
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001094:	e006      	b.n	80010a4 <cubemx_transport_read+0x11c>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010a8:	b662      	cpsie	i
}
 80010aa:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f00b f810 	bl	800c0d8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d104      	bne.n	80010ce <cubemx_transport_read+0x146>
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f6ff af6a 	blt.w	8000fa2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d2:	e011      	b.n	80010f8 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	440b      	add	r3, r1
 80010de:	4920      	ldr	r1, [pc, #128]	@ (8001160 <cubemx_transport_read+0x1d8>)
 80010e0:	5c8a      	ldrb	r2, [r1, r2]
 80010e2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ee:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010f0:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d003      	beq.n	800110c <cubemx_transport_read+0x184>
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3e3      	bcc.n	80010d4 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 800110c:	69bb      	ldr	r3, [r7, #24]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020010 	.word	0x40020010
 800111c:	40020028 	.word	0x40020028
 8001120:	40020040 	.word	0x40020040
 8001124:	40020058 	.word	0x40020058
 8001128:	40020070 	.word	0x40020070
 800112c:	40020088 	.word	0x40020088
 8001130:	400200a0 	.word	0x400200a0
 8001134:	400200b8 	.word	0x400200b8
 8001138:	40020410 	.word	0x40020410
 800113c:	40020428 	.word	0x40020428
 8001140:	40020440 	.word	0x40020440
 8001144:	40020458 	.word	0x40020458
 8001148:	40020470 	.word	0x40020470
 800114c:	40020488 	.word	0x40020488
 8001150:	400204a0 	.word	0x400204a0
 8001154:	400204b8 	.word	0x400204b8
 8001158:	24004bd8 	.word	0x24004bd8
 800115c:	24004bd4 	.word	0x24004bd4
 8001160:	240043d4 	.word	0x240043d4

08001164 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ETH_Init+0x80>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <MX_ETH_Init+0x84>)
 800116c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_ETH_Init+0x88>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_ETH_Init+0x88>)
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_ETH_Init+0x88>)
 800117c:	22e1      	movs	r2, #225	@ 0xe1
 800117e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_ETH_Init+0x88>)
 8001182:	2200      	movs	r2, #0
 8001184:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_ETH_Init+0x88>)
 8001188:	2200      	movs	r2, #0
 800118a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_ETH_Init+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ETH_Init+0x80>)
 8001194:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <MX_ETH_Init+0x88>)
 8001196:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_ETH_Init+0x80>)
 800119a:	2201      	movs	r2, #1
 800119c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_ETH_Init+0x8c>)
 80011a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <MX_ETH_Init+0x90>)
 80011a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011ac:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80011b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011b4:	f004 f8d2 	bl	800535c <HAL_ETH_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011be:	f000 fbf3 	bl	80019a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011c2:	2238      	movs	r2, #56	@ 0x38
 80011c4:	2100      	movs	r1, #0
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011c8:	f01b fe4e 	bl	801ce68 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011ce:	2221      	movs	r2, #33	@ 0x21
 80011d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24004c14 	.word	0x24004c14
 80011e8:	40028000 	.word	0x40028000
 80011ec:	24004cc4 	.word	0x24004cc4
 80011f0:	2400073c 	.word	0x2400073c
 80011f4:	240006dc 	.word	0x240006dc
 80011f8:	24004bdc 	.word	0x24004bdc

080011fc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	@ 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a59      	ldr	r2, [pc, #356]	@ (8001380 <HAL_ETH_MspInit+0x184>)
 800121a:	4293      	cmp	r3, r2
 800121c:	f040 80ab 	bne.w	8001376 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001220:	4b58      	ldr	r3, [pc, #352]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001226:	4a57      	ldr	r2, [pc, #348]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001230:	4b54      	ldr	r3, [pc, #336]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800123e:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001244:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800124e:	4b4d      	ldr	r3, [pc, #308]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800125c:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001262:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800126c:	4b45      	ldr	r3, [pc, #276]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	4a40      	ldr	r2, [pc, #256]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128a:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a39      	ldr	r2, [pc, #228]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a31      	ldr	r2, [pc, #196]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012f2:	2332      	movs	r3, #50	@ 0x32
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001302:	230b      	movs	r3, #11
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	@ (8001388 <HAL_ETH_MspInit+0x18c>)
 800130e:	f004 fc59 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001312:	2386      	movs	r3, #134	@ 0x86
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4817      	ldr	r0, [pc, #92]	@ (800138c <HAL_ETH_MspInit+0x190>)
 800132e:	f004 fc49 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <HAL_ETH_MspInit+0x194>)
 8001350:	f004 fc38 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001354:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <HAL_ETH_MspInit+0x198>)
 8001372:	f004 fc27 	bl	8005bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	@ 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40028000 	.word	0x40028000
 8001384:	58024400 	.word	0x58024400
 8001388:	58020800 	.word	0x58020800
 800138c:	58020000 	.word	0x58020000
 8001390:	58020400 	.word	0x58020400
 8001394:	58021800 	.word	0x58021800

08001398 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <MX_FREERTOS_Init+0x18>)
 800139e:	2100      	movs	r1, #0
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_FREERTOS_Init+0x1c>)
 80013a2:	f00a fe07 	bl	800bfb4 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a03      	ldr	r2, [pc, #12]	@ (80013b8 <MX_FREERTOS_Init+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	0801dd58 	.word	0x0801dd58
 80013b4:	080017a9 	.word	0x080017a9
 80013b8:	24004ccc 	.word	0x24004ccc

080013bc <MX_GPIO_Init>:
/** Configure pins
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
*/
void MX_GPIO_Init(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d2:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

}
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	58024400 	.word	0x58024400

08001468 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_IWDG1_Init+0x34>)
 800146e:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <MX_IWDG1_Init+0x38>)
 8001470:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_IWDG1_Init+0x34>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_IWDG1_Init+0x34>)
 800147a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800147e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_IWDG1_Init+0x34>)
 8001482:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001486:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_IWDG1_Init+0x34>)
 800148a:	f004 fdaf 	bl	8005fec <HAL_IWDG_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001494:	f000 fa88 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24009b4c 	.word	0x24009b4c
 80014a0:	58004800 	.word	0x58004800

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80014aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80014b0:	bf00      	nop
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <main+0xb8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <main+0x24>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dcf4      	bgt.n	80014b2 <main+0xe>
  if ( timeout < 0 )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da01      	bge.n	80014d2 <main+0x2e>
  {
  Error_Handler();
 80014ce:	f000 fa6b 	bl	80019a8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 ff7b 	bl	80023cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f843 	bl	8001560 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <main+0xb8>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <main+0xb8>)
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <main+0xb8>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 80014f8:	2001      	movs	r0, #1
 80014fa:	f004 fd41 	bl	8005f80 <HAL_HSEM_ActivateNotification>

/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f004 fd10 	bl	8005f24 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001504:	2100      	movs	r1, #0
 8001506:	2000      	movs	r0, #0
 8001508:	f004 fd26 	bl	8005f58 <HAL_HSEM_Release>

/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800150c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001510:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001512:	bf00      	nop
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <main+0xb8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d104      	bne.n	800152a <main+0x86>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dcf4      	bgt.n	8001514 <main+0x70>
if ( timeout < 0 )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da01      	bge.n	8001534 <main+0x90>
{
Error_Handler();
 8001530:	f000 fa3a 	bl	80019a8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001534:	f7ff ff42 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001538:	f7ff fca6 	bl	8000e88 <MX_DMA_Init>
  MX_ETH_Init();
 800153c:	f7ff fe12 	bl	8001164 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001540:	f000 fe5c 	bl	80021fc <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8001544:	f000 fd34 	bl	8001fb0 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8001548:	f7ff ff8e 	bl	8001468 <MX_IWDG1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800154c:	f00a fce8 	bl	800bf20 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001550:	f7ff ff22 	bl	8001398 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001554:	f00a fd08 	bl	800bf68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <main+0xb4>
 800155c:	58024400 	.word	0x58024400

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09c      	sub	sp, #112	@ 0x70
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	224c      	movs	r2, #76	@ 0x4c
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f01b fc7a 	bl	801ce68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2220      	movs	r2, #32
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f01b fc74 	bl	801ce68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001580:	2004      	movs	r0, #4
 8001582:	f004 fec3 	bl	800630c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <SystemClock_Config+0x104>)
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	4a35      	ldr	r2, [pc, #212]	@ (8001664 <SystemClock_Config+0x104>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001596:	4b33      	ldr	r3, [pc, #204]	@ (8001664 <SystemClock_Config+0x104>)
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <SystemClock_Config+0x108>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <SystemClock_Config+0x108>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <SystemClock_Config+0x108>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015bc:	bf00      	nop
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <SystemClock_Config+0x108>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ca:	d1f8      	bne.n	80015be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015cc:	2309      	movs	r3, #9
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	2302      	movs	r3, #2
 80015e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80015e6:	232a      	movs	r3, #42	@ 0x2a
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015f6:	230c      	movs	r3, #12
 80015f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fee9 	bl	80063e0 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001614:	f000 f9c8 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	233f      	movs	r3, #63	@ 0x3f
 800161a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2303      	movs	r3, #3
 800161e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800162c:	2350      	movs	r3, #80	@ 0x50
 800162e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001636:	2340      	movs	r3, #64	@ 0x40
 8001638:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2103      	movs	r1, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f005 fb28 	bl	8006c94 <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800164a:	f000 f9ad 	bl	80019a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800164e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001652:	2100      	movs	r1, #0
 8001654:	2001      	movs	r0, #1
 8001656:	f005 fcd3 	bl	8007000 <HAL_RCC_MCOConfig>
}
 800165a:	bf00      	nop
 800165c:	3770      	adds	r7, #112	@ 0x70
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58000400 	.word	0x58000400
 8001668:	58024800 	.word	0x58024800

0800166c <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <timer_callback+0x38>

			if(HSEM_FLAG == 1){
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <timer_callback+0x40>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <timer_callback+0x26>
				HSEM_FLAG = 0;
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <timer_callback+0x40>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
				READIMU_HSEM(&imu);
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <timer_callback+0x44>)
 800168e:	f7ff f857 	bl	8000740 <READIMU_HSEM>
			}
			SensorsPublished();
 8001692:	f000 f811 	bl	80016b8 <SensorsPublished>

			// Synchronize time with the agent
			rmw_uros_sync_session(1000);
 8001696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169a:	f00f fa27 	bl	8010aec <rmw_uros_sync_session>
			HAL_IWDG_Refresh(&hiwdg1);
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <timer_callback+0x48>)
 80016a0:	f004 fcf3 	bl	800608a <HAL_IWDG_Refresh>
		}

}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24009e4c 	.word	0x24009e4c
 80016b0:	24009e00 	.word	0x24009e00
 80016b4:	24009b4c 	.word	0x24009b4c

080016b8 <SensorsPublished>:

void SensorsPublished(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	imu_msg.orientation.x = imu.quaternion.i;
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <SensorsPublished+0xdc>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <SensorsPublished+0xe0>)
 80016c8:	ed83 7b06 	vstr	d7, [r3, #24]
	imu_msg.orientation.x = imu.quaternion.i;
 80016cc:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <SensorsPublished+0xdc>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d6:	4b30      	ldr	r3, [pc, #192]	@ (8001798 <SensorsPublished+0xe0>)
 80016d8:	ed83 7b06 	vstr	d7, [r3, #24]
	imu_msg.orientation.x = imu.quaternion.i;
 80016dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001794 <SensorsPublished+0xdc>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001798 <SensorsPublished+0xe0>)
 80016e8:	ed83 7b06 	vstr	d7, [r3, #24]

	/*imu.acceleration.x;
	 * imu.acceleration.y;
	 * imu.acceleration.x; For Acceleration data (g)*/

	imu_msg.linear_acceleration.x = imu.linear_acceleration.x;
 80016ec:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <SensorsPublished+0xdc>)
 80016ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <SensorsPublished+0xe0>)
 80016f8:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	imu_msg.linear_acceleration.y = imu.linear_acceleration.y;
 80016fc:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <SensorsPublished+0xdc>)
 80016fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <SensorsPublished+0xe0>)
 8001708:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	imu_msg.linear_acceleration.z = imu.linear_acceleration.z;
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <SensorsPublished+0xdc>)
 800170e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <SensorsPublished+0xe0>)
 8001718:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	imu_msg.angular_velocity.x = imu.angular_velocity.x;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <SensorsPublished+0xdc>)
 800171e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001722:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001726:	4b1c      	ldr	r3, [pc, #112]	@ (8001798 <SensorsPublished+0xe0>)
 8001728:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	imu_msg.angular_velocity.y = imu.angular_velocity.y;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <SensorsPublished+0xdc>)
 800172e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001736:	4b18      	ldr	r3, [pc, #96]	@ (8001798 <SensorsPublished+0xe0>)
 8001738:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	imu_msg.angular_velocity.z = imu.angular_velocity.z;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <SensorsPublished+0xdc>)
 800173e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001746:	4b14      	ldr	r3, [pc, #80]	@ (8001798 <SensorsPublished+0xe0>)
 8001748:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90

	magnetic_field_msg.magnetic_field.x = imu.magnetometer.x;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <SensorsPublished+0xdc>)
 800174e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <SensorsPublished+0xe4>)
 8001758:	ed83 7b06 	vstr	d7, [r3, #24]
	magnetic_field_msg.magnetic_field.y = imu.magnetometer.y;
 800175c:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <SensorsPublished+0xdc>)
 800175e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001766:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <SensorsPublished+0xe4>)
 8001768:	ed83 7b08 	vstr	d7, [r3, #32]
	magnetic_field_msg.magnetic_field.z = imu.magnetometer.z;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <SensorsPublished+0xdc>)
 800176e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <SensorsPublished+0xe4>)
 8001778:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

	/*imu.euler_angle.roll;
	 * imu.euler_angle.pitch;
	 * imu.euler_angle.yaw; For Euler Angle data (degree)*/

	RCCHECK(rcl_publish(&imu_pub, &imu_msg, NULL));
 800177c:	2200      	movs	r2, #0
 800177e:	4906      	ldr	r1, [pc, #24]	@ (8001798 <SensorsPublished+0xe0>)
 8001780:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <SensorsPublished+0xe8>)
 8001782:	f00d fb6d 	bl	800ee60 <rcl_publish>
	RCCHECK(rcl_publish(&magnetic_field_pub, &magnetic_field_msg, NULL));
 8001786:	2200      	movs	r2, #0
 8001788:	4904      	ldr	r1, [pc, #16]	@ (800179c <SensorsPublished+0xe4>)
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <SensorsPublished+0xec>)
 800178c:	f00d fb68 	bl	800ee60 <rcl_publish>



}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	24009e00 	.word	0x24009e00
 8001798:	24009c40 	.word	0x24009c40
 800179c:	24009d88 	.word	0x24009d88
 80017a0:	24009c3c 	.word	0x24009c3c
 80017a4:	24009d80 	.word	0x24009d80

080017a8 <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b0b2      	sub	sp, #200	@ 0xc8
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 80017b2:	4b58      	ldr	r3, [pc, #352]	@ (8001914 <StartDefaultTask+0x16c>)
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	4b58      	ldr	r3, [pc, #352]	@ (8001918 <StartDefaultTask+0x170>)
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4b58      	ldr	r3, [pc, #352]	@ (800191c <StartDefaultTask+0x174>)
 80017bc:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <StartDefaultTask+0x178>)
 80017be:	4959      	ldr	r1, [pc, #356]	@ (8001924 <StartDefaultTask+0x17c>)
 80017c0:	2001      	movs	r0, #1
 80017c2:	f00e fb85 	bl	800fed0 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00e faa2 	bl	800fd14 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <StartDefaultTask+0x180>)
 80017d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 80017d6:	4b55      	ldr	r3, [pc, #340]	@ (800192c <StartDefaultTask+0x184>)
 80017d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 80017dc:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <StartDefaultTask+0x188>)
 80017de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017e2:	4b54      	ldr	r3, [pc, #336]	@ (8001934 <StartDefaultTask+0x18c>)
 80017e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017e8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00e fa9f 	bl	800fd30 <rcutils_set_default_allocator>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f083 0301 	eor.w	r3, r3, #1
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d004      	beq.n	8001808 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 80017fe:	f240 1155 	movw	r1, #341	@ 0x155
 8001802:	484d      	ldr	r0, [pc, #308]	@ (8001938 <StartDefaultTask+0x190>)
 8001804:	f01b f9b0 	bl	801cb68 <iprintf>

  // micro-ROS app



  allocator = rcl_get_default_allocator();
 8001808:	4c4c      	ldr	r4, [pc, #304]	@ (800193c <StartDefaultTask+0x194>)
 800180a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800180e:	4618      	mov	r0, r3
 8001810:	f00e faac 	bl	800fd6c <rcutils_get_default_allocator>
 8001814:	4625      	mov	r5, r4
 8001816:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800181a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	602b      	str	r3, [r5, #0]

  //create init_options
    init_options = rcl_get_zero_initialized_init_options();
 8001822:	f00d f947 	bl	800eab4 <rcl_get_zero_initialized_init_options>
 8001826:	4603      	mov	r3, r0
 8001828:	4a45      	ldr	r2, [pc, #276]	@ (8001940 <StartDefaultTask+0x198>)
 800182a:	6013      	str	r3, [r2, #0]
    RCCHECK(rcl_init_options_init(&init_options, allocator));
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <StartDefaultTask+0x194>)
 800182e:	466c      	mov	r4, sp
 8001830:	f103 020c 	add.w	r2, r3, #12
 8001834:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001838:	e884 0003 	stmia.w	r4, {r0, r1}
 800183c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183e:	4840      	ldr	r0, [pc, #256]	@ (8001940 <StartDefaultTask+0x198>)
 8001840:	f00d f93a 	bl	800eab8 <rcl_init_options_init>
    RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8001844:	2158      	movs	r1, #88	@ 0x58
 8001846:	483e      	ldr	r0, [pc, #248]	@ (8001940 <StartDefaultTask+0x198>)
 8001848:	f00d fa34 	bl	800ecb4 <rcl_init_options_set_domain_id>

  //  rclc_support_init(&support, 0, NULL, &allocator);
   rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800184c:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <StartDefaultTask+0x194>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b3b      	ldr	r3, [pc, #236]	@ (8001940 <StartDefaultTask+0x198>)
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	483b      	ldr	r0, [pc, #236]	@ (8001944 <StartDefaultTask+0x19c>)
 8001858:	f00e f972 	bl	800fb40 <rclc_support_init_with_options>

   rclc_node_init_default(&node, "BNO086_node", "", &support);
 800185c:	4b39      	ldr	r3, [pc, #228]	@ (8001944 <StartDefaultTask+0x19c>)
 800185e:	4a3a      	ldr	r2, [pc, #232]	@ (8001948 <StartDefaultTask+0x1a0>)
 8001860:	493a      	ldr	r1, [pc, #232]	@ (800194c <StartDefaultTask+0x1a4>)
 8001862:	483b      	ldr	r0, [pc, #236]	@ (8001950 <StartDefaultTask+0x1a8>)
 8001864:	f00e f9a2 	bl	800fbac <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_best_effort(
 8001868:	f00f fcc8 	bl	80111fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800186c:	4602      	mov	r2, r0
 800186e:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <StartDefaultTask+0x1ac>)
 8001870:	4937      	ldr	r1, [pc, #220]	@ (8001950 <StartDefaultTask+0x1a8>)
 8001872:	4839      	ldr	r0, [pc, #228]	@ (8001958 <StartDefaultTask+0x1b0>)
 8001874:	f00e f9dc 	bl	800fc30 <rclc_publisher_init_best_effort>
    &imu_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
    "imu");

  rclc_publisher_init_best_effort(
 8001878:	f00f fcd8 	bl	801122c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>
 800187c:	4602      	mov	r2, r0
 800187e:	4b37      	ldr	r3, [pc, #220]	@ (800195c <StartDefaultTask+0x1b4>)
 8001880:	4933      	ldr	r1, [pc, #204]	@ (8001950 <StartDefaultTask+0x1a8>)
 8001882:	4837      	ldr	r0, [pc, #220]	@ (8001960 <StartDefaultTask+0x1b8>)
 8001884:	f00e f9d4 	bl	800fc30 <rclc_publisher_init_best_effort>
      &magnetic_field_pub,
      &node,
      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, MagneticField),
      "magnetic_field");

  imu_msg.header.frame_id = micro_ros_string_utilities_init("imu_frame");
 8001888:	4c36      	ldr	r4, [pc, #216]	@ (8001964 <StartDefaultTask+0x1bc>)
 800188a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800188e:	4936      	ldr	r1, [pc, #216]	@ (8001968 <StartDefaultTask+0x1c0>)
 8001890:	4618      	mov	r0, r3
 8001892:	f00d f8eb 	bl	800ea6c <micro_ros_string_utilities_init>
 8001896:	f104 0308 	add.w	r3, r4, #8
 800189a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800189e:	ca07      	ldmia	r2, {r0, r1, r2}
 80018a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  magnetic_field_msg.header.frame_id = micro_ros_string_utilities_init("magnetic_field_frame");
 80018a4:	4c31      	ldr	r4, [pc, #196]	@ (800196c <StartDefaultTask+0x1c4>)
 80018a6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80018aa:	4931      	ldr	r1, [pc, #196]	@ (8001970 <StartDefaultTask+0x1c8>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00d f8dd 	bl	800ea6c <micro_ros_string_utilities_init>
 80018b2:	f104 0308 	add.w	r3, r4, #8
 80018b6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80018ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80018bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // create timer
  rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(10), timer_callback);
 80018c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <StartDefaultTask+0x1cc>)
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001978 <StartDefaultTask+0x1d0>)
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	491e      	ldr	r1, [pc, #120]	@ (8001944 <StartDefaultTask+0x19c>)
 80018cc:	482b      	ldr	r0, [pc, #172]	@ (800197c <StartDefaultTask+0x1d4>)
 80018ce:	f00e f9e9 	bl	800fca4 <rclc_timer_init_default>

  rmw_uros_sync_session(1000);
 80018d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018d6:	f00f f909 	bl	8010aec <rmw_uros_sync_session>


  executor = rclc_executor_get_zero_initialized_executor();
 80018da:	4c29      	ldr	r4, [pc, #164]	@ (8001980 <StartDefaultTask+0x1d8>)
 80018dc:	463b      	mov	r3, r7
 80018de:	4618      	mov	r0, r3
 80018e0:	f00d fe4c 	bl	800f57c <rclc_executor_get_zero_initialized_executor>
 80018e4:	4620      	mov	r0, r4
 80018e6:	463b      	mov	r3, r7
 80018e8:	2288      	movs	r2, #136	@ 0x88
 80018ea:	4619      	mov	r1, r3
 80018ec:	f01b fb85 	bl	801cffa <memcpy>
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <StartDefaultTask+0x194>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <StartDefaultTask+0x19c>)
 80018f6:	4822      	ldr	r0, [pc, #136]	@ (8001980 <StartDefaultTask+0x1d8>)
 80018f8:	f00d fe4a 	bl	800f590 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer_); // add timer
 80018fc:	491f      	ldr	r1, [pc, #124]	@ (800197c <StartDefaultTask+0x1d4>)
 80018fe:	4820      	ldr	r0, [pc, #128]	@ (8001980 <StartDefaultTask+0x1d8>)
 8001900:	f00d fec2 	bl	800f688 <rclc_executor_add_timer>
  rclc_executor_spin(&executor);
 8001904:	481e      	ldr	r0, [pc, #120]	@ (8001980 <StartDefaultTask+0x1d8>)
 8001906:	f00e f8d9 	bl	800fabc <rclc_executor_spin>

  for(;;)
  {
    osDelay(10);
 800190a:	200a      	movs	r0, #10
 800190c:	f00a fbe4 	bl	800c0d8 <osDelay>
 8001910:	e7fb      	b.n	800190a <StartDefaultTask+0x162>
 8001912:	bf00      	nop
 8001914:	08000f89 	.word	0x08000f89
 8001918:	08000f25 	.word	0x08000f25
 800191c:	08000f05 	.word	0x08000f05
 8001920:	08000ed9 	.word	0x08000ed9
 8001924:	24009eac 	.word	0x24009eac
 8001928:	080019b5 	.word	0x080019b5
 800192c:	080019f9 	.word	0x080019f9
 8001930:	08001a31 	.word	0x08001a31
 8001934:	08001a9d 	.word	0x08001a9d
 8001938:	0801dca4 	.word	0x0801dca4
 800193c:	24009b90 	.word	0x24009b90
 8001940:	24009bac 	.word	0x24009bac
 8001944:	24009b5c 	.word	0x24009b5c
 8001948:	0801dccc 	.word	0x0801dccc
 800194c:	0801dcd0 	.word	0x0801dcd0
 8001950:	24009ba4 	.word	0x24009ba4
 8001954:	0801dcdc 	.word	0x0801dcdc
 8001958:	24009c3c 	.word	0x24009c3c
 800195c:	0801dce0 	.word	0x0801dce0
 8001960:	24009d80 	.word	0x24009d80
 8001964:	24009c40 	.word	0x24009c40
 8001968:	0801dcf0 	.word	0x0801dcf0
 800196c:	24009d88 	.word	0x24009d88
 8001970:	0801dcfc 	.word	0x0801dcfc
 8001974:	0800166d 	.word	0x0800166d
 8001978:	00989680 	.word	0x00989680
 800197c:	24009c38 	.word	0x24009c38
 8001980:	24009bb0 	.word	0x24009bb0

08001984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001996:	f000 fd55 	bl	8002444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <Error_Handler+0x8>

080019b4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80019be:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <microros_allocate+0x3c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <microros_allocate+0x3c>)
 80019cc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <microros_allocate+0x40>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <microros_allocate+0x40>)
 80019dc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff f802 	bl	80009e8 <pvPortMallocMicroROS>
 80019e4:	4603      	mov	r3, r0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24009e50 	.word	0x24009e50
 80019f4:	24009e54 	.word	0x24009e54

080019f8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00c      	beq.n	8001a22 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff f911 	bl	8000c30 <getBlockSize>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <microros_deallocate+0x34>)
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <microros_deallocate+0x34>)
 8001a1a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff f8ab 	bl	8000b78 <vPortFreeMicroROS>
  }
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24009e54 	.word	0x24009e54

08001a30 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <microros_reallocate+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4413      	add	r3, r2
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <microros_reallocate+0x64>)
 8001a4a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <microros_reallocate+0x68>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <microros_reallocate+0x68>)
 8001a5a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f7fe ffc0 	bl	80009e8 <pvPortMallocMicroROS>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	e00e      	b.n	8001a8a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff f8df 	bl	8000c30 <getBlockSize>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a08      	ldr	r2, [pc, #32]	@ (8001a98 <microros_reallocate+0x68>)
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <microros_reallocate+0x68>)
 8001a7e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff f8f2 	bl	8000c6c <pvPortReallocMicroROS>
 8001a88:	4603      	mov	r3, r0
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	24009e50 	.word	0x24009e50
 8001a98:	24009e54 	.word	0x24009e54

08001a9c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <microros_zero_allocate+0x48>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <microros_zero_allocate+0x48>)
 8001aba:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	4a08      	ldr	r2, [pc, #32]	@ (8001ae8 <microros_zero_allocate+0x4c>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
 8001ac8:	4413      	add	r3, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <microros_zero_allocate+0x4c>)
 8001ace:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff f8f7 	bl	8000cc6 <pvPortCallocMicroROS>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	24009e50 	.word	0x24009e50
 8001ae8:	24009e54 	.word	0x24009e54
 8001aec:	00000000 	.word	0x00000000

08001af0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b06:	a320      	add	r3, pc, #128	@ (adr r3, 8001b88 <UTILS_NanosecondsToTimespec+0x98>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fc50 	bl	80003b0 <__aeabi_ldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001b88 <UTILS_NanosecondsToTimespec+0x98>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fc44 	bl	80003b0 <__aeabi_ldivmod>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da20      	bge.n	8001b76 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a11      	ldr	r2, [pc, #68]	@ (8001b80 <UTILS_NanosecondsToTimespec+0x90>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1712      	asrs	r2, r2, #28
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	6979      	ldr	r1, [r7, #20]
 8001b50:	17c8      	asrs	r0, r1, #31
 8001b52:	460c      	mov	r4, r1
 8001b54:	4605      	mov	r5, r0
 8001b56:	ebb2 0804 	subs.w	r8, r2, r4
 8001b5a:	eb63 0905 	sbc.w	r9, r3, r5
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	4906      	ldr	r1, [pc, #24]	@ (8001b84 <UTILS_NanosecondsToTimespec+0x94>)
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	441a      	add	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	609a      	str	r2, [r3, #8]
    }
}
 8001b76:	bf00      	nop
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b80:	44b82fa1 	.word	0x44b82fa1
 8001b84:	3b9aca00 	.word	0x3b9aca00
 8001b88:	3b9aca00 	.word	0x3b9aca00
 8001b8c:	00000000 	.word	0x00000000

08001b90 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	b08e      	sub	sp, #56	@ 0x38
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b9a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001b9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001bb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00c f998 	bl	800deec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bbe:	17da      	asrs	r2, r3, #31
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	61fa      	str	r2, [r7, #28]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	69b9      	ldr	r1, [r7, #24]
 8001bce:	000b      	movs	r3, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	461c      	mov	r4, r3
 8001bdc:	4615      	mov	r5, r2
 8001bde:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001be2:	1911      	adds	r1, r2, r4
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	416b      	adcs	r3, r5
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bee:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001bf2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	f04f 0500 	mov.w	r5, #0
 8001c02:	015d      	lsls	r5, r3, #5
 8001c04:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c08:	0154      	lsls	r4, r2, #5
 8001c0a:	4622      	mov	r2, r4
 8001c0c:	462b      	mov	r3, r5
 8001c0e:	ebb2 0800 	subs.w	r8, r2, r0
 8001c12:	eb63 0901 	sbc.w	r9, r3, r1
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c22:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c26:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c2a:	4690      	mov	r8, r2
 8001c2c:	4699      	mov	r9, r3
 8001c2e:	eb18 0a00 	adds.w	sl, r8, r0
 8001c32:	eb49 0b01 	adc.w	fp, r9, r1
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c42:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c46:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c4a:	ebb2 040a 	subs.w	r4, r2, sl
 8001c4e:	603c      	str	r4, [r7, #0]
 8001c50:	eb63 030b 	sbc.w	r3, r3, fp
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	181b      	adds	r3, r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	462b      	mov	r3, r5
 8001c62:	eb41 0303 	adc.w	r3, r1, r3
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	6a3a      	ldr	r2, [r7, #32]
 8001c6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c6e:	f7ff ff3f 	bl	8001af0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	3738      	adds	r7, #56	@ 0x38
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <HAL_MspInit+0x48>)
 8001c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <HAL_MspInit+0x48>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c96:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <HAL_MspInit+0x48>)
 8001c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	210f      	movs	r1, #15
 8001ca8:	f06f 0001 	mvn.w	r0, #1
 8001cac:	f000 fce6 	bl	800267c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2105      	movs	r1, #5
 8001cb4:	207d      	movs	r0, #125	@ 0x7d
 8001cb6:	f000 fce1 	bl	800267c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001cba:	207d      	movs	r0, #125	@ 0x7d
 8001cbc:	f000 fcf8 	bl	80026b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58024400 	.word	0x58024400

08001ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	@ 0x38
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	d844      	bhi.n	8001d64 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	2019      	movs	r0, #25
 8001ce0:	f000 fccc 	bl	800267c <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ce4:	2019      	movs	r0, #25
 8001ce6:	f000 fce3 	bl	80026b0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001cea:	4a24      	ldr	r2, [pc, #144]	@ (8001d7c <HAL_InitTick+0xb0>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf0:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <HAL_InitTick+0xb4>)
 8001cf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cf6:	4a22      	ldr	r2, [pc, #136]	@ (8001d80 <HAL_InitTick+0xb4>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <HAL_InitTick+0xb4>)
 8001d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d0e:	f107 020c 	add.w	r2, r7, #12
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f005 fbb1 	bl	8007480 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d1e:	f005 fb99 	bl	8007454 <HAL_RCC_GetPCLK2Freq>
 8001d22:	4603      	mov	r3, r0
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2a:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_InitTick+0xb8>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	3b01      	subs	r3, #1
 8001d34:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <HAL_InitTick+0xc0>)
 8001d3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d42:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d44:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d48:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d56:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d58:	f007 fa00 	bl	800915c <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_InitTick+0xa6>
 8001d62:	e001      	b.n	8001d68 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e005      	b.n	8001d74 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d68:	4807      	ldr	r0, [pc, #28]	@ (8001d88 <HAL_InitTick+0xbc>)
 8001d6a:	f007 fa59 	bl	8009220 <HAL_TIM_Base_Start_IT>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3738      	adds	r7, #56	@ 0x38
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2400000c 	.word	0x2400000c
 8001d80:	58024400 	.word	0x58024400
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	24009e58 	.word	0x24009e58
 8001d8c:	40010000 	.word	0x40010000

08001d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <NMI_Handler+0x4>

08001d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <HardFault_Handler+0x4>

08001da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <MemManage_Handler+0x4>

08001da8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <BusFault_Handler+0x4>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <UsageFault_Handler+0x4>

08001db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <DMA1_Stream0_IRQHandler+0x10>)
 8001dce:	f001 ffa7 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	24009f40 	.word	0x24009f40

08001ddc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <DMA1_Stream1_IRQHandler+0x10>)
 8001de2:	f001 ff9d 	bl	8003d20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	24009fb8 	.word	0x24009fb8

08001df0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <TIM1_UP_IRQHandler+0x10>)
 8001df6:	f007 fa8b 	bl	8009310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24009e58 	.word	0x24009e58

08001e04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <USART3_IRQHandler+0x10>)
 8001e0a:	f007 fe27 	bl	8009a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24009eac 	.word	0x24009eac

08001e18 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e1c:	f004 f8c2 	bl	8005fa4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e3e:	f01b f8a7 	bl	801cf90 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e66:	bf00      	nop
 8001e68:	e7fd      	b.n	8001e66 <_exit+0x12>

08001e6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	e00a      	b.n	8001e92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e7c:	f3af 8000 	nop.w
 8001e80:	4601      	mov	r1, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	60ba      	str	r2, [r7, #8]
 8001e88:	b2ca      	uxtb	r2, r1
 8001e8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbf0      	blt.n	8001e7c <_read+0x12>
  }

  return len;
 8001e9a:	687b      	ldr	r3, [r7, #4]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e009      	b.n	8001eca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	60ba      	str	r2, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf1      	blt.n	8001eb6 <_write+0x12>
  }
  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_close>:

int _close(int file)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f04:	605a      	str	r2, [r3, #4]
  return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_isatty>:

int _isatty(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b085      	sub	sp, #20
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	@ (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	@ (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f01b f80c 	bl	801cf90 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	24080000 	.word	0x24080000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	24009ea8 	.word	0x24009ea8
 8001fac:	24013ac0 	.word	0x24013ac0

08001fb0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fb6:	4a23      	ldr	r2, [pc, #140]	@ (8002044 <MX_USART3_UART_Init+0x94>)
 8001fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001fba:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fbc:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <MX_USART3_UART_Init+0x98>)
 8001fbe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fd4:	220c      	movs	r2, #12
 8001fd6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fde:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe4:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ff6:	4812      	ldr	r0, [pc, #72]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 8001ff8:	f007 fb7e 	bl	80096f8 <HAL_UART_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002002:	f7ff fcd1 	bl	80019a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002006:	2100      	movs	r1, #0
 8002008:	480d      	ldr	r0, [pc, #52]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 800200a:	f009 fb73 	bl	800b6f4 <HAL_UARTEx_SetTxFifoThreshold>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002014:	f7ff fcc8 	bl	80019a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002018:	2100      	movs	r1, #0
 800201a:	4809      	ldr	r0, [pc, #36]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 800201c:	f009 fba8 	bl	800b770 <HAL_UARTEx_SetRxFifoThreshold>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002026:	f7ff fcbf 	bl	80019a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_USART3_UART_Init+0x90>)
 800202c:	f009 fb29 	bl	800b682 <HAL_UARTEx_DisableFifoMode>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002036:	f7ff fcb7 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	24009eac 	.word	0x24009eac
 8002044:	40004800 	.word	0x40004800
 8002048:	001e8480 	.word	0x001e8480

0800204c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0ba      	sub	sp, #232	@ 0xe8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	22c0      	movs	r2, #192	@ 0xc0
 800206a:	2100      	movs	r1, #0
 800206c:	4618      	mov	r0, r3
 800206e:	f01a fefb 	bl	801ce68 <memset>
  if(uartHandle->Instance==USART3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5a      	ldr	r2, [pc, #360]	@ (80021e0 <HAL_UART_MspInit+0x194>)
 8002078:	4293      	cmp	r3, r2
 800207a:	f040 80ad 	bne.w	80021d8 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800207e:	f04f 0202 	mov.w	r2, #2
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4618      	mov	r0, r3
 8002096:	f005 fa35 	bl	8007504 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80020a0:	f7ff fc82 	bl	80019a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020a4:	4b4f      	ldr	r3, [pc, #316]	@ (80021e4 <HAL_UART_MspInit+0x198>)
 80020a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020aa:	4a4e      	ldr	r2, [pc, #312]	@ (80021e4 <HAL_UART_MspInit+0x198>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020b4:	4b4b      	ldr	r3, [pc, #300]	@ (80021e4 <HAL_UART_MspInit+0x198>)
 80020b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c2:	4b48      	ldr	r3, [pc, #288]	@ (80021e4 <HAL_UART_MspInit+0x198>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c8:	4a46      	ldr	r2, [pc, #280]	@ (80021e4 <HAL_UART_MspInit+0x198>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d2:	4b44      	ldr	r3, [pc, #272]	@ (80021e4 <HAL_UART_MspInit+0x198>)
 80020d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020fa:	2307      	movs	r3, #7
 80020fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002100:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002104:	4619      	mov	r1, r3
 8002106:	4838      	ldr	r0, [pc, #224]	@ (80021e8 <HAL_UART_MspInit+0x19c>)
 8002108:	f003 fd5c 	bl	8005bc4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800210c:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 800210e:	4a38      	ldr	r2, [pc, #224]	@ (80021f0 <HAL_UART_MspInit+0x1a4>)
 8002110:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002112:	4b36      	ldr	r3, [pc, #216]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002114:	222d      	movs	r2, #45	@ 0x2d
 8002116:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002118:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211e:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002124:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800212a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 800212e:	2200      	movs	r2, #0
 8002130:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002132:	4b2e      	ldr	r3, [pc, #184]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 800213a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800213e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002140:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002142:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002146:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002148:	4b28      	ldr	r3, [pc, #160]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800214e:	4827      	ldr	r0, [pc, #156]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002150:	f000 fabc 	bl	80026cc <HAL_DMA_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800215a:	f7ff fc25 	bl	80019a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002162:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002166:	4a21      	ldr	r2, [pc, #132]	@ (80021ec <HAL_UART_MspInit+0x1a0>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800216c:	4b21      	ldr	r3, [pc, #132]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 800216e:	4a22      	ldr	r2, [pc, #136]	@ (80021f8 <HAL_UART_MspInit+0x1ac>)
 8002170:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002172:	4b20      	ldr	r3, [pc, #128]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002174:	222e      	movs	r2, #46	@ 0x2e
 8002176:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002178:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 800217a:	2240      	movs	r2, #64	@ 0x40
 800217c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800217e:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800218a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002198:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 80021a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021a4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021ac:	4811      	ldr	r0, [pc, #68]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 80021ae:	f000 fa8d 	bl	80026cc <HAL_DMA_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80021b8:	f7ff fbf6 	bl	80019a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 80021c0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021c2:	4a0c      	ldr	r2, [pc, #48]	@ (80021f4 <HAL_UART_MspInit+0x1a8>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2105      	movs	r1, #5
 80021cc:	2027      	movs	r0, #39	@ 0x27
 80021ce:	f000 fa55 	bl	800267c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021d2:	2027      	movs	r0, #39	@ 0x27
 80021d4:	f000 fa6c 	bl	80026b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021d8:	bf00      	nop
 80021da:	37e8      	adds	r7, #232	@ 0xe8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40004800 	.word	0x40004800
 80021e4:	58024400 	.word	0x58024400
 80021e8:	58020c00 	.word	0x58020c00
 80021ec:	24009f40 	.word	0x24009f40
 80021f0:	40020010 	.word	0x40020010
 80021f4:	24009fb8 	.word	0x24009fb8
 80021f8:	40020028 	.word	0x40020028

080021fc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002202:	4a16      	ldr	r2, [pc, #88]	@ (800225c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002204:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002208:	2209      	movs	r2, #9
 800220a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800220e:	2202      	movs	r2, #2
 8002210:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002214:	2200      	movs	r2, #0
 8002216:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800221a:	2202      	movs	r2, #2
 800221c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800221e:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002220:	2201      	movs	r2, #1
 8002222:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002226:	2200      	movs	r2, #0
 8002228:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800222c:	2200      	movs	r2, #0
 800222e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002232:	2201      	movs	r2, #1
 8002234:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002238:	2201      	movs	r2, #1
 800223a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800223e:	2200      	movs	r2, #0
 8002240:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	@ (8002258 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002244:	f003 ff31 	bl	80060aa <HAL_PCD_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800224e:	f7ff fbab 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2400a030 	.word	0x2400a030
 800225c:	40080000 	.word	0x40080000

08002260 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0ba      	sub	sp, #232	@ 0xe8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002278:	f107 0310 	add.w	r3, r7, #16
 800227c:	22c0      	movs	r2, #192	@ 0xc0
 800227e:	2100      	movs	r1, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f01a fdf1 	bl	801ce68 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a38      	ldr	r2, [pc, #224]	@ (800236c <HAL_PCD_MspInit+0x10c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d168      	bne.n	8002362 <HAL_PCD_MspInit+0x102>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002290:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 80022a0:	2313      	movs	r3, #19
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80022a8:	2303      	movs	r3, #3
 80022aa:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80022b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80022ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4618      	mov	r0, r3
 80022c8:	f005 f91c 	bl	8007504 <HAL_RCCEx_PeriphCLKConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 80022d2:	f7ff fb69 	bl	80019a8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80022d6:	f004 f873 	bl	80063c0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_PCD_MspInit+0x110>)
 80022dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e0:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <HAL_PCD_MspInit+0x110>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ea:	4b21      	ldr	r3, [pc, #132]	@ (8002370 <HAL_PCD_MspInit+0x110>)
 80022ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80022f8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80022fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002312:	230a      	movs	r3, #10
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800231c:	4619      	mov	r1, r3
 800231e:	4815      	ldr	r0, [pc, #84]	@ (8002374 <HAL_PCD_MspInit+0x114>)
 8002320:	f003 fc50 	bl	8005bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002328:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <HAL_PCD_MspInit+0x114>)
 8002340:	f003 fc40 	bl	8005bc4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002344:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_PCD_MspInit+0x110>)
 8002346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800234a:	4a09      	ldr	r2, [pc, #36]	@ (8002370 <HAL_PCD_MspInit+0x110>)
 800234c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002350:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_PCD_MspInit+0x110>)
 8002356:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800235a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002362:	bf00      	nop
 8002364:	37e8      	adds	r7, #232	@ 0xe8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40080000 	.word	0x40080000
 8002370:	58024400 	.word	0x58024400
 8002374:	58020000 	.word	0x58020000

08002378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002378:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800237c:	f7fe fa9e 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002380:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002382:	490d      	ldr	r1, [pc, #52]	@ (80023b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002398:	4c0a      	ldr	r4, [pc, #40]	@ (80023c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a6:	f01a fdf9 	bl	801cf9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023aa:	f7ff f87b 	bl	80014a4 <main>
  bx  lr
 80023ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023b8:	240006dc 	.word	0x240006dc
  ldr r2, =_sidata
 80023bc:	0801ee48 	.word	0x0801ee48
  ldr r2, =_sbss
 80023c0:	240007a0 	.word	0x240007a0
  ldr r4, =_ebss
 80023c4:	24013ac0 	.word	0x24013ac0

080023c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC3_IRQHandler>
	...

080023cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d2:	2003      	movs	r0, #3
 80023d4:	f000 f947 	bl	8002666 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023d8:	f004 fe7c 	bl	80070d4 <HAL_RCC_GetSysClockFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_Init+0x68>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	4913      	ldr	r1, [pc, #76]	@ (8002438 <HAL_Init+0x6c>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
 80023f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <HAL_Init+0x68>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002438 <HAL_Init+0x6c>)
 8002400:	5cd3      	ldrb	r3, [r2, r3]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_Init+0x70>)
 800240e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002410:	4a0b      	ldr	r2, [pc, #44]	@ (8002440 <HAL_Init+0x74>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002416:	200f      	movs	r0, #15
 8002418:	f7ff fc58 	bl	8001ccc <HAL_InitTick>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e002      	b.n	800242c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002426:	f7ff fc2b 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	58024400 	.word	0x58024400
 8002438:	0801dd48 	.word	0x0801dd48
 800243c:	24000004 	.word	0x24000004
 8002440:	24000000 	.word	0x24000000

08002444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002448:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x20>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_IncTick+0x24>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <HAL_IncTick+0x24>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	24000010 	.word	0x24000010
 8002468:	2400a514 	.word	0x2400a514

0800246c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return uwTick;
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <HAL_GetTick+0x14>)
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	2400a514 	.word	0x2400a514

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff ffee 	bl	800246c <HAL_GetTick>
 8002490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800249c:	d005      	beq.n	80024aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_Delay+0x44>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024aa:	bf00      	nop
 80024ac:	f7ff ffde 	bl	800246c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d8f7      	bhi.n	80024ac <HAL_Delay+0x28>
  {
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	24000010 	.word	0x24000010

080024cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <HAL_GetREVID+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0c1b      	lsrs	r3, r3, #16
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	5c001000 	.word	0x5c001000

080024e4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80024f4:	4904      	ldr	r1, [pc, #16]	@ (8002508 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	58000400 	.word	0x58000400

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <__NVIC_SetPriorityGrouping+0x40>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002534:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	@ (800254c <__NVIC_SetPriorityGrouping+0x40>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00
 8002550:	05fa0000 	.word	0x05fa0000

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	@ (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	@ (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	@ (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	@ 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff4c 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800268a:	f7ff ff63 	bl	8002554 <__NVIC_GetPriorityGrouping>
 800268e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	6978      	ldr	r0, [r7, #20]
 8002696:	f7ff ffb3 	bl	8002600 <NVIC_EncodePriority>
 800269a:	4602      	mov	r2, r0
 800269c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff82 	bl	80025ac <__NVIC_SetPriority>
}
 80026a8:	bf00      	nop
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff ff56 	bl	8002570 <__NVIC_EnableIRQ>
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff feca 	bl	800246c <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e316      	b.n	8002d12 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a66      	ldr	r2, [pc, #408]	@ (8002884 <HAL_DMA_Init+0x1b8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d04a      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a65      	ldr	r2, [pc, #404]	@ (8002888 <HAL_DMA_Init+0x1bc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d045      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a63      	ldr	r2, [pc, #396]	@ (800288c <HAL_DMA_Init+0x1c0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d040      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a62      	ldr	r2, [pc, #392]	@ (8002890 <HAL_DMA_Init+0x1c4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d03b      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a60      	ldr	r2, [pc, #384]	@ (8002894 <HAL_DMA_Init+0x1c8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d036      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5f      	ldr	r2, [pc, #380]	@ (8002898 <HAL_DMA_Init+0x1cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d031      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5d      	ldr	r2, [pc, #372]	@ (800289c <HAL_DMA_Init+0x1d0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02c      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a5c      	ldr	r2, [pc, #368]	@ (80028a0 <HAL_DMA_Init+0x1d4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d027      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a5a      	ldr	r2, [pc, #360]	@ (80028a4 <HAL_DMA_Init+0x1d8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d022      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a59      	ldr	r2, [pc, #356]	@ (80028a8 <HAL_DMA_Init+0x1dc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d01d      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a57      	ldr	r2, [pc, #348]	@ (80028ac <HAL_DMA_Init+0x1e0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d018      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a56      	ldr	r2, [pc, #344]	@ (80028b0 <HAL_DMA_Init+0x1e4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a54      	ldr	r2, [pc, #336]	@ (80028b4 <HAL_DMA_Init+0x1e8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00e      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a53      	ldr	r2, [pc, #332]	@ (80028b8 <HAL_DMA_Init+0x1ec>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a51      	ldr	r2, [pc, #324]	@ (80028bc <HAL_DMA_Init+0x1f0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_DMA_Init+0xb8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a50      	ldr	r2, [pc, #320]	@ (80028c0 <HAL_DMA_Init+0x1f4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0xbc>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_DMA_Init+0xbe>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 813b 	beq.w	8002a06 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a37      	ldr	r2, [pc, #220]	@ (8002884 <HAL_DMA_Init+0x1b8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a36      	ldr	r2, [pc, #216]	@ (8002888 <HAL_DMA_Init+0x1bc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_DMA_Init+0x1c0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <HAL_DMA_Init+0x1c4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a31      	ldr	r2, [pc, #196]	@ (8002894 <HAL_DMA_Init+0x1c8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a30      	ldr	r2, [pc, #192]	@ (8002898 <HAL_DMA_Init+0x1cc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2e      	ldr	r2, [pc, #184]	@ (800289c <HAL_DMA_Init+0x1d0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2d      	ldr	r2, [pc, #180]	@ (80028a0 <HAL_DMA_Init+0x1d4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2b      	ldr	r2, [pc, #172]	@ (80028a4 <HAL_DMA_Init+0x1d8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Init+0x174>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a2a      	ldr	r2, [pc, #168]	@ (80028a8 <HAL_DMA_Init+0x1dc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a28      	ldr	r2, [pc, #160]	@ (80028ac <HAL_DMA_Init+0x1e0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Init+0x174>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a27      	ldr	r2, [pc, #156]	@ (80028b0 <HAL_DMA_Init+0x1e4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a25      	ldr	r2, [pc, #148]	@ (80028b4 <HAL_DMA_Init+0x1e8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a24      	ldr	r2, [pc, #144]	@ (80028b8 <HAL_DMA_Init+0x1ec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Init+0x174>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a22      	ldr	r2, [pc, #136]	@ (80028bc <HAL_DMA_Init+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Init+0x174>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a21      	ldr	r2, [pc, #132]	@ (80028c0 <HAL_DMA_Init+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <HAL_DMA_Init+0x186>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e007      	b.n	8002862 <HAL_DMA_Init+0x196>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002862:	e02f      	b.n	80028c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002864:	f7ff fe02 	bl	800246c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b05      	cmp	r3, #5
 8002870:	d928      	bls.n	80028c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2220      	movs	r2, #32
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2203      	movs	r2, #3
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e246      	b.n	8002d12 <HAL_DMA_Init+0x646>
 8002884:	40020010 	.word	0x40020010
 8002888:	40020028 	.word	0x40020028
 800288c:	40020040 	.word	0x40020040
 8002890:	40020058 	.word	0x40020058
 8002894:	40020070 	.word	0x40020070
 8002898:	40020088 	.word	0x40020088
 800289c:	400200a0 	.word	0x400200a0
 80028a0:	400200b8 	.word	0x400200b8
 80028a4:	40020410 	.word	0x40020410
 80028a8:	40020428 	.word	0x40020428
 80028ac:	40020440 	.word	0x40020440
 80028b0:	40020458 	.word	0x40020458
 80028b4:	40020470 	.word	0x40020470
 80028b8:	40020488 	.word	0x40020488
 80028bc:	400204a0 	.word	0x400204a0
 80028c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1c8      	bne.n	8002864 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4b83      	ldr	r3, [pc, #524]	@ (8002aec <HAL_DMA_Init+0x420>)
 80028de:	4013      	ands	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80028ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	2b04      	cmp	r3, #4
 8002916:	d107      	bne.n	8002928 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4313      	orrs	r3, r2
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002928:	4b71      	ldr	r3, [pc, #452]	@ (8002af0 <HAL_DMA_Init+0x424>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b71      	ldr	r3, [pc, #452]	@ (8002af4 <HAL_DMA_Init+0x428>)
 800292e:	4013      	ands	r3, r2
 8002930:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002934:	d328      	bcc.n	8002988 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b28      	cmp	r3, #40	@ 0x28
 800293c:	d903      	bls.n	8002946 <HAL_DMA_Init+0x27a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b2e      	cmp	r3, #46	@ 0x2e
 8002944:	d917      	bls.n	8002976 <HAL_DMA_Init+0x2aa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b3e      	cmp	r3, #62	@ 0x3e
 800294c:	d903      	bls.n	8002956 <HAL_DMA_Init+0x28a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b42      	cmp	r3, #66	@ 0x42
 8002954:	d90f      	bls.n	8002976 <HAL_DMA_Init+0x2aa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b46      	cmp	r3, #70	@ 0x46
 800295c:	d903      	bls.n	8002966 <HAL_DMA_Init+0x29a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b48      	cmp	r3, #72	@ 0x48
 8002964:	d907      	bls.n	8002976 <HAL_DMA_Init+0x2aa>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b4e      	cmp	r3, #78	@ 0x4e
 800296c:	d905      	bls.n	800297a <HAL_DMA_Init+0x2ae>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b52      	cmp	r3, #82	@ 0x52
 8002974:	d801      	bhi.n	800297a <HAL_DMA_Init+0x2ae>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_DMA_Init+0x2b0>
 800297a:	2300      	movs	r3, #0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002986:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f023 0307 	bic.w	r3, r3, #7
 800299e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d117      	bne.n	80029e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f002 fb3f 	bl	8005048 <DMA_CheckFifoParam>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2240      	movs	r2, #64	@ 0x40
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e197      	b.n	8002d12 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f002 fa7a 	bl	8004ee4 <DMA_CalcBaseAndBitshift>
 80029f0:	4603      	mov	r3, r0
 80029f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	223f      	movs	r2, #63	@ 0x3f
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e0cd      	b.n	8002ba2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002af8 <HAL_DMA_Init+0x42c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a39      	ldr	r2, [pc, #228]	@ (8002afc <HAL_DMA_Init+0x430>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a38      	ldr	r2, [pc, #224]	@ (8002b00 <HAL_DMA_Init+0x434>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a36      	ldr	r2, [pc, #216]	@ (8002b04 <HAL_DMA_Init+0x438>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a35      	ldr	r2, [pc, #212]	@ (8002b08 <HAL_DMA_Init+0x43c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a33      	ldr	r2, [pc, #204]	@ (8002b0c <HAL_DMA_Init+0x440>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a32      	ldr	r2, [pc, #200]	@ (8002b10 <HAL_DMA_Init+0x444>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Init+0x38a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a30      	ldr	r2, [pc, #192]	@ (8002b14 <HAL_DMA_Init+0x448>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_DMA_Init+0x38e>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_DMA_Init+0x390>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 8097 	beq.w	8002b90 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a24      	ldr	r2, [pc, #144]	@ (8002af8 <HAL_DMA_Init+0x42c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d021      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <HAL_DMA_Init+0x430>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01c      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_DMA_Init+0x434>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d017      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_DMA_Init+0x438>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d012      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b08 <HAL_DMA_Init+0x43c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00d      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_DMA_Init+0x440>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d008      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <HAL_DMA_Init+0x444>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <HAL_DMA_Init+0x3e4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <HAL_DMA_Init+0x448>)
 8002aae:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4b13      	ldr	r3, [pc, #76]	@ (8002b18 <HAL_DMA_Init+0x44c>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b40      	cmp	r3, #64	@ 0x40
 8002ad6:	d021      	beq.n	8002b1c <HAL_DMA_Init+0x450>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b80      	cmp	r3, #128	@ 0x80
 8002ade:	d102      	bne.n	8002ae6 <HAL_DMA_Init+0x41a>
 8002ae0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ae4:	e01b      	b.n	8002b1e <HAL_DMA_Init+0x452>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e019      	b.n	8002b1e <HAL_DMA_Init+0x452>
 8002aea:	bf00      	nop
 8002aec:	fe10803f 	.word	0xfe10803f
 8002af0:	5c001000 	.word	0x5c001000
 8002af4:	ffff0000 	.word	0xffff0000
 8002af8:	58025408 	.word	0x58025408
 8002afc:	5802541c 	.word	0x5802541c
 8002b00:	58025430 	.word	0x58025430
 8002b04:	58025444 	.word	0x58025444
 8002b08:	58025458 	.word	0x58025458
 8002b0c:	5802546c 	.word	0x5802546c
 8002b10:	58025480 	.word	0x58025480
 8002b14:	58025494 	.word	0x58025494
 8002b18:	fffe000f 	.word	0xfffe000f
 8002b1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68d2      	ldr	r2, [r2, #12]
 8002b22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b6e      	ldr	r3, [pc, #440]	@ (8002d1c <HAL_DMA_Init+0x650>)
 8002b64:	4413      	add	r3, r2
 8002b66:	4a6e      	ldr	r2, [pc, #440]	@ (8002d20 <HAL_DMA_Init+0x654>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f002 f9b5 	bl	8004ee4 <DMA_CalcBaseAndBitshift>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	e008      	b.n	8002ba2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2240      	movs	r2, #64	@ 0x40
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0b7      	b.n	8002d12 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d24 <HAL_DMA_Init+0x658>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d072      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002d28 <HAL_DMA_Init+0x65c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d06d      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5c      	ldr	r2, [pc, #368]	@ (8002d2c <HAL_DMA_Init+0x660>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d068      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8002d30 <HAL_DMA_Init+0x664>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d063      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a59      	ldr	r2, [pc, #356]	@ (8002d34 <HAL_DMA_Init+0x668>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d05e      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <HAL_DMA_Init+0x66c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d059      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a56      	ldr	r2, [pc, #344]	@ (8002d3c <HAL_DMA_Init+0x670>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d054      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a54      	ldr	r2, [pc, #336]	@ (8002d40 <HAL_DMA_Init+0x674>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04f      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a53      	ldr	r2, [pc, #332]	@ (8002d44 <HAL_DMA_Init+0x678>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a51      	ldr	r2, [pc, #324]	@ (8002d48 <HAL_DMA_Init+0x67c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a50      	ldr	r2, [pc, #320]	@ (8002d4c <HAL_DMA_Init+0x680>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a4e      	ldr	r2, [pc, #312]	@ (8002d50 <HAL_DMA_Init+0x684>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002d54 <HAL_DMA_Init+0x688>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	@ (8002d58 <HAL_DMA_Init+0x68c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a4a      	ldr	r2, [pc, #296]	@ (8002d5c <HAL_DMA_Init+0x690>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a48      	ldr	r2, [pc, #288]	@ (8002d60 <HAL_DMA_Init+0x694>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a47      	ldr	r2, [pc, #284]	@ (8002d64 <HAL_DMA_Init+0x698>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a45      	ldr	r2, [pc, #276]	@ (8002d68 <HAL_DMA_Init+0x69c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a44      	ldr	r2, [pc, #272]	@ (8002d6c <HAL_DMA_Init+0x6a0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a42      	ldr	r2, [pc, #264]	@ (8002d70 <HAL_DMA_Init+0x6a4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a41      	ldr	r2, [pc, #260]	@ (8002d74 <HAL_DMA_Init+0x6a8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a3f      	ldr	r2, [pc, #252]	@ (8002d78 <HAL_DMA_Init+0x6ac>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a3e      	ldr	r2, [pc, #248]	@ (8002d7c <HAL_DMA_Init+0x6b0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Init+0x5c6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8002d80 <HAL_DMA_Init+0x6b4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_DMA_Init+0x5ca>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_DMA_Init+0x5cc>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d032      	beq.n	8002d02 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f002 fa4f 	bl	8005140 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b80      	cmp	r3, #128	@ 0x80
 8002ca8:	d102      	bne.n	8002cb0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cc4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d010      	beq.n	8002cf0 <HAL_DMA_Init+0x624>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d80c      	bhi.n	8002cf0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f002 facc 	bl	8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	e008      	b.n	8002d02 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	a7fdabf8 	.word	0xa7fdabf8
 8002d20:	cccccccd 	.word	0xcccccccd
 8002d24:	40020010 	.word	0x40020010
 8002d28:	40020028 	.word	0x40020028
 8002d2c:	40020040 	.word	0x40020040
 8002d30:	40020058 	.word	0x40020058
 8002d34:	40020070 	.word	0x40020070
 8002d38:	40020088 	.word	0x40020088
 8002d3c:	400200a0 	.word	0x400200a0
 8002d40:	400200b8 	.word	0x400200b8
 8002d44:	40020410 	.word	0x40020410
 8002d48:	40020428 	.word	0x40020428
 8002d4c:	40020440 	.word	0x40020440
 8002d50:	40020458 	.word	0x40020458
 8002d54:	40020470 	.word	0x40020470
 8002d58:	40020488 	.word	0x40020488
 8002d5c:	400204a0 	.word	0x400204a0
 8002d60:	400204b8 	.word	0x400204b8
 8002d64:	58025408 	.word	0x58025408
 8002d68:	5802541c 	.word	0x5802541c
 8002d6c:	58025430 	.word	0x58025430
 8002d70:	58025444 	.word	0x58025444
 8002d74:	58025458 	.word	0x58025458
 8002d78:	5802546c 	.word	0x5802546c
 8002d7c:	58025480 	.word	0x58025480
 8002d80:	58025494 	.word	0x58025494

08002d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e226      	b.n	80031ee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_DMA_Start_IT+0x2a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e21f      	b.n	80031ee <HAL_DMA_Start_IT+0x46a>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	f040 820a 	bne.w	80031d8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a68      	ldr	r2, [pc, #416]	@ (8002f78 <HAL_DMA_Start_IT+0x1f4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d04a      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a66      	ldr	r2, [pc, #408]	@ (8002f7c <HAL_DMA_Start_IT+0x1f8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d045      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a65      	ldr	r2, [pc, #404]	@ (8002f80 <HAL_DMA_Start_IT+0x1fc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d040      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a63      	ldr	r2, [pc, #396]	@ (8002f84 <HAL_DMA_Start_IT+0x200>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d03b      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a62      	ldr	r2, [pc, #392]	@ (8002f88 <HAL_DMA_Start_IT+0x204>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d036      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a60      	ldr	r2, [pc, #384]	@ (8002f8c <HAL_DMA_Start_IT+0x208>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d031      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5f      	ldr	r2, [pc, #380]	@ (8002f90 <HAL_DMA_Start_IT+0x20c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d02c      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f94 <HAL_DMA_Start_IT+0x210>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d027      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5c      	ldr	r2, [pc, #368]	@ (8002f98 <HAL_DMA_Start_IT+0x214>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a5a      	ldr	r2, [pc, #360]	@ (8002f9c <HAL_DMA_Start_IT+0x218>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01d      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a59      	ldr	r2, [pc, #356]	@ (8002fa0 <HAL_DMA_Start_IT+0x21c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d018      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a57      	ldr	r2, [pc, #348]	@ (8002fa4 <HAL_DMA_Start_IT+0x220>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a56      	ldr	r2, [pc, #344]	@ (8002fa8 <HAL_DMA_Start_IT+0x224>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d00e      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a54      	ldr	r2, [pc, #336]	@ (8002fac <HAL_DMA_Start_IT+0x228>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a53      	ldr	r2, [pc, #332]	@ (8002fb0 <HAL_DMA_Start_IT+0x22c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d004      	beq.n	8002e72 <HAL_DMA_Start_IT+0xee>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a51      	ldr	r2, [pc, #324]	@ (8002fb4 <HAL_DMA_Start_IT+0x230>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <HAL_DMA_Start_IT+0x100>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e007      	b.n	8002e94 <HAL_DMA_Start_IT+0x110>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f001 fe76 	bl	8004b8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a34      	ldr	r2, [pc, #208]	@ (8002f78 <HAL_DMA_Start_IT+0x1f4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d04a      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a33      	ldr	r2, [pc, #204]	@ (8002f7c <HAL_DMA_Start_IT+0x1f8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d045      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a31      	ldr	r2, [pc, #196]	@ (8002f80 <HAL_DMA_Start_IT+0x1fc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d040      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a30      	ldr	r2, [pc, #192]	@ (8002f84 <HAL_DMA_Start_IT+0x200>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d03b      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8002f88 <HAL_DMA_Start_IT+0x204>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d036      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f8c <HAL_DMA_Start_IT+0x208>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d031      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f90 <HAL_DMA_Start_IT+0x20c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02c      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2a      	ldr	r2, [pc, #168]	@ (8002f94 <HAL_DMA_Start_IT+0x210>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d027      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a28      	ldr	r2, [pc, #160]	@ (8002f98 <HAL_DMA_Start_IT+0x214>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d022      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <HAL_DMA_Start_IT+0x218>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d01d      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a25      	ldr	r2, [pc, #148]	@ (8002fa0 <HAL_DMA_Start_IT+0x21c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d018      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a24      	ldr	r2, [pc, #144]	@ (8002fa4 <HAL_DMA_Start_IT+0x220>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d013      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a22      	ldr	r2, [pc, #136]	@ (8002fa8 <HAL_DMA_Start_IT+0x224>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00e      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a21      	ldr	r2, [pc, #132]	@ (8002fac <HAL_DMA_Start_IT+0x228>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_DMA_Start_IT+0x22c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_DMA_Start_IT+0x1bc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <HAL_DMA_Start_IT+0x230>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_DMA_Start_IT+0x1c0>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <HAL_DMA_Start_IT+0x1c2>
 8002f44:	2300      	movs	r3, #0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d036      	beq.n	8002fb8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 021e 	bic.w	r2, r3, #30
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0216 	orr.w	r2, r2, #22
 8002f5c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d03e      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0208 	orr.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e035      	b.n	8002fe4 <HAL_DMA_Start_IT+0x260>
 8002f78:	40020010 	.word	0x40020010
 8002f7c:	40020028 	.word	0x40020028
 8002f80:	40020040 	.word	0x40020040
 8002f84:	40020058 	.word	0x40020058
 8002f88:	40020070 	.word	0x40020070
 8002f8c:	40020088 	.word	0x40020088
 8002f90:	400200a0 	.word	0x400200a0
 8002f94:	400200b8 	.word	0x400200b8
 8002f98:	40020410 	.word	0x40020410
 8002f9c:	40020428 	.word	0x40020428
 8002fa0:	40020440 	.word	0x40020440
 8002fa4:	40020458 	.word	0x40020458
 8002fa8:	40020470 	.word	0x40020470
 8002fac:	40020488 	.word	0x40020488
 8002fb0:	400204a0 	.word	0x400204a0
 8002fb4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 020e 	bic.w	r2, r3, #14
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 020a 	orr.w	r2, r2, #10
 8002fca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0204 	orr.w	r2, r2, #4
 8002fe2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a83      	ldr	r2, [pc, #524]	@ (80031f8 <HAL_DMA_Start_IT+0x474>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d072      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a82      	ldr	r2, [pc, #520]	@ (80031fc <HAL_DMA_Start_IT+0x478>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d06d      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a80      	ldr	r2, [pc, #512]	@ (8003200 <HAL_DMA_Start_IT+0x47c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d068      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a7f      	ldr	r2, [pc, #508]	@ (8003204 <HAL_DMA_Start_IT+0x480>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d063      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a7d      	ldr	r2, [pc, #500]	@ (8003208 <HAL_DMA_Start_IT+0x484>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d05e      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7c      	ldr	r2, [pc, #496]	@ (800320c <HAL_DMA_Start_IT+0x488>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d059      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a7a      	ldr	r2, [pc, #488]	@ (8003210 <HAL_DMA_Start_IT+0x48c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d054      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a79      	ldr	r2, [pc, #484]	@ (8003214 <HAL_DMA_Start_IT+0x490>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d04f      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a77      	ldr	r2, [pc, #476]	@ (8003218 <HAL_DMA_Start_IT+0x494>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d04a      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a76      	ldr	r2, [pc, #472]	@ (800321c <HAL_DMA_Start_IT+0x498>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d045      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a74      	ldr	r2, [pc, #464]	@ (8003220 <HAL_DMA_Start_IT+0x49c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d040      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a73      	ldr	r2, [pc, #460]	@ (8003224 <HAL_DMA_Start_IT+0x4a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d03b      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a71      	ldr	r2, [pc, #452]	@ (8003228 <HAL_DMA_Start_IT+0x4a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d036      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a70      	ldr	r2, [pc, #448]	@ (800322c <HAL_DMA_Start_IT+0x4a8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d031      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a6e      	ldr	r2, [pc, #440]	@ (8003230 <HAL_DMA_Start_IT+0x4ac>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02c      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6d      	ldr	r2, [pc, #436]	@ (8003234 <HAL_DMA_Start_IT+0x4b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d027      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6b      	ldr	r2, [pc, #428]	@ (8003238 <HAL_DMA_Start_IT+0x4b4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d022      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6a      	ldr	r2, [pc, #424]	@ (800323c <HAL_DMA_Start_IT+0x4b8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d01d      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a68      	ldr	r2, [pc, #416]	@ (8003240 <HAL_DMA_Start_IT+0x4bc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d018      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a67      	ldr	r2, [pc, #412]	@ (8003244 <HAL_DMA_Start_IT+0x4c0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	@ (8003248 <HAL_DMA_Start_IT+0x4c4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00e      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a64      	ldr	r2, [pc, #400]	@ (800324c <HAL_DMA_Start_IT+0x4c8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a62      	ldr	r2, [pc, #392]	@ (8003250 <HAL_DMA_Start_IT+0x4cc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_DMA_Start_IT+0x350>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a61      	ldr	r2, [pc, #388]	@ (8003254 <HAL_DMA_Start_IT+0x4d0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_DMA_Start_IT+0x354>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_DMA_Start_IT+0x356>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01a      	beq.n	8003114 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030fa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800310e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003112:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a37      	ldr	r2, [pc, #220]	@ (80031f8 <HAL_DMA_Start_IT+0x474>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d04a      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a36      	ldr	r2, [pc, #216]	@ (80031fc <HAL_DMA_Start_IT+0x478>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d045      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a34      	ldr	r2, [pc, #208]	@ (8003200 <HAL_DMA_Start_IT+0x47c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d040      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a33      	ldr	r2, [pc, #204]	@ (8003204 <HAL_DMA_Start_IT+0x480>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d03b      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a31      	ldr	r2, [pc, #196]	@ (8003208 <HAL_DMA_Start_IT+0x484>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d036      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a30      	ldr	r2, [pc, #192]	@ (800320c <HAL_DMA_Start_IT+0x488>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2e      	ldr	r2, [pc, #184]	@ (8003210 <HAL_DMA_Start_IT+0x48c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d02c      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2d      	ldr	r2, [pc, #180]	@ (8003214 <HAL_DMA_Start_IT+0x490>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d027      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <HAL_DMA_Start_IT+0x494>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d022      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_DMA_Start_IT+0x498>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d01d      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a28      	ldr	r2, [pc, #160]	@ (8003220 <HAL_DMA_Start_IT+0x49c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d018      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a27      	ldr	r2, [pc, #156]	@ (8003224 <HAL_DMA_Start_IT+0x4a0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a25      	ldr	r2, [pc, #148]	@ (8003228 <HAL_DMA_Start_IT+0x4a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00e      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a24      	ldr	r2, [pc, #144]	@ (800322c <HAL_DMA_Start_IT+0x4a8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a22      	ldr	r2, [pc, #136]	@ (8003230 <HAL_DMA_Start_IT+0x4ac>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_DMA_Start_IT+0x430>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a21      	ldr	r2, [pc, #132]	@ (8003234 <HAL_DMA_Start_IT+0x4b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <HAL_DMA_Start_IT+0x442>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e012      	b.n	80031ec <HAL_DMA_Start_IT+0x468>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e009      	b.n	80031ec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40020010 	.word	0x40020010
 80031fc:	40020028 	.word	0x40020028
 8003200:	40020040 	.word	0x40020040
 8003204:	40020058 	.word	0x40020058
 8003208:	40020070 	.word	0x40020070
 800320c:	40020088 	.word	0x40020088
 8003210:	400200a0 	.word	0x400200a0
 8003214:	400200b8 	.word	0x400200b8
 8003218:	40020410 	.word	0x40020410
 800321c:	40020428 	.word	0x40020428
 8003220:	40020440 	.word	0x40020440
 8003224:	40020458 	.word	0x40020458
 8003228:	40020470 	.word	0x40020470
 800322c:	40020488 	.word	0x40020488
 8003230:	400204a0 	.word	0x400204a0
 8003234:	400204b8 	.word	0x400204b8
 8003238:	58025408 	.word	0x58025408
 800323c:	5802541c 	.word	0x5802541c
 8003240:	58025430 	.word	0x58025430
 8003244:	58025444 	.word	0x58025444
 8003248:	58025458 	.word	0x58025458
 800324c:	5802546c 	.word	0x5802546c
 8003250:	58025480 	.word	0x58025480
 8003254:	58025494 	.word	0x58025494

08003258 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff f904 	bl	800246c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e2dc      	b.n	800382a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d008      	beq.n	800328e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2280      	movs	r2, #128	@ 0x80
 8003280:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e2cd      	b.n	800382a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a76      	ldr	r2, [pc, #472]	@ (800346c <HAL_DMA_Abort+0x214>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d04a      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a74      	ldr	r2, [pc, #464]	@ (8003470 <HAL_DMA_Abort+0x218>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d045      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a73      	ldr	r2, [pc, #460]	@ (8003474 <HAL_DMA_Abort+0x21c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d040      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a71      	ldr	r2, [pc, #452]	@ (8003478 <HAL_DMA_Abort+0x220>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d03b      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a70      	ldr	r2, [pc, #448]	@ (800347c <HAL_DMA_Abort+0x224>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d036      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003480 <HAL_DMA_Abort+0x228>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d031      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6d      	ldr	r2, [pc, #436]	@ (8003484 <HAL_DMA_Abort+0x22c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d02c      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003488 <HAL_DMA_Abort+0x230>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d027      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a6a      	ldr	r2, [pc, #424]	@ (800348c <HAL_DMA_Abort+0x234>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d022      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a68      	ldr	r2, [pc, #416]	@ (8003490 <HAL_DMA_Abort+0x238>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01d      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a67      	ldr	r2, [pc, #412]	@ (8003494 <HAL_DMA_Abort+0x23c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d018      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	@ (8003498 <HAL_DMA_Abort+0x240>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a64      	ldr	r2, [pc, #400]	@ (800349c <HAL_DMA_Abort+0x244>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a62      	ldr	r2, [pc, #392]	@ (80034a0 <HAL_DMA_Abort+0x248>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d009      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a61      	ldr	r2, [pc, #388]	@ (80034a4 <HAL_DMA_Abort+0x24c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_DMA_Abort+0xd6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a5f      	ldr	r2, [pc, #380]	@ (80034a8 <HAL_DMA_Abort+0x250>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d101      	bne.n	8003332 <HAL_DMA_Abort+0xda>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_DMA_Abort+0xdc>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 021e 	bic.w	r2, r2, #30
 8003346:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003356:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e00a      	b.n	8003376 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 020e 	bic.w	r2, r2, #14
 800336e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3c      	ldr	r2, [pc, #240]	@ (800346c <HAL_DMA_Abort+0x214>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d072      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3a      	ldr	r2, [pc, #232]	@ (8003470 <HAL_DMA_Abort+0x218>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d06d      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a39      	ldr	r2, [pc, #228]	@ (8003474 <HAL_DMA_Abort+0x21c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d068      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a37      	ldr	r2, [pc, #220]	@ (8003478 <HAL_DMA_Abort+0x220>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d063      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a36      	ldr	r2, [pc, #216]	@ (800347c <HAL_DMA_Abort+0x224>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d05e      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a34      	ldr	r2, [pc, #208]	@ (8003480 <HAL_DMA_Abort+0x228>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d059      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a33      	ldr	r2, [pc, #204]	@ (8003484 <HAL_DMA_Abort+0x22c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d054      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a31      	ldr	r2, [pc, #196]	@ (8003488 <HAL_DMA_Abort+0x230>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d04f      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a30      	ldr	r2, [pc, #192]	@ (800348c <HAL_DMA_Abort+0x234>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003490 <HAL_DMA_Abort+0x238>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2d      	ldr	r2, [pc, #180]	@ (8003494 <HAL_DMA_Abort+0x23c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003498 <HAL_DMA_Abort+0x240>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2a      	ldr	r2, [pc, #168]	@ (800349c <HAL_DMA_Abort+0x244>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <HAL_DMA_Abort+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <HAL_DMA_Abort+0x24c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a25      	ldr	r2, [pc, #148]	@ (80034a8 <HAL_DMA_Abort+0x250>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a24      	ldr	r2, [pc, #144]	@ (80034ac <HAL_DMA_Abort+0x254>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <HAL_DMA_Abort+0x258>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <HAL_DMA_Abort+0x25c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_DMA_Abort+0x260>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1e      	ldr	r2, [pc, #120]	@ (80034bc <HAL_DMA_Abort+0x264>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <HAL_DMA_Abort+0x268>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <HAL_DMA_Abort+0x26c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Abort+0x20e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_DMA_Abort+0x270>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d132      	bne.n	80034cc <HAL_DMA_Abort+0x274>
 8003466:	2301      	movs	r3, #1
 8003468:	e031      	b.n	80034ce <HAL_DMA_Abort+0x276>
 800346a:	bf00      	nop
 800346c:	40020010 	.word	0x40020010
 8003470:	40020028 	.word	0x40020028
 8003474:	40020040 	.word	0x40020040
 8003478:	40020058 	.word	0x40020058
 800347c:	40020070 	.word	0x40020070
 8003480:	40020088 	.word	0x40020088
 8003484:	400200a0 	.word	0x400200a0
 8003488:	400200b8 	.word	0x400200b8
 800348c:	40020410 	.word	0x40020410
 8003490:	40020428 	.word	0x40020428
 8003494:	40020440 	.word	0x40020440
 8003498:	40020458 	.word	0x40020458
 800349c:	40020470 	.word	0x40020470
 80034a0:	40020488 	.word	0x40020488
 80034a4:	400204a0 	.word	0x400204a0
 80034a8:	400204b8 	.word	0x400204b8
 80034ac:	58025408 	.word	0x58025408
 80034b0:	5802541c 	.word	0x5802541c
 80034b4:	58025430 	.word	0x58025430
 80034b8:	58025444 	.word	0x58025444
 80034bc:	58025458 	.word	0x58025458
 80034c0:	5802546c 	.word	0x5802546c
 80034c4:	58025480 	.word	0x58025480
 80034c8:	58025494 	.word	0x58025494
 80034cc:	2300      	movs	r3, #0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a6d      	ldr	r2, [pc, #436]	@ (800369c <HAL_DMA_Abort+0x444>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a6b      	ldr	r2, [pc, #428]	@ (80036a0 <HAL_DMA_Abort+0x448>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6a      	ldr	r2, [pc, #424]	@ (80036a4 <HAL_DMA_Abort+0x44c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a68      	ldr	r2, [pc, #416]	@ (80036a8 <HAL_DMA_Abort+0x450>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a67      	ldr	r2, [pc, #412]	@ (80036ac <HAL_DMA_Abort+0x454>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a65      	ldr	r2, [pc, #404]	@ (80036b0 <HAL_DMA_Abort+0x458>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a64      	ldr	r2, [pc, #400]	@ (80036b4 <HAL_DMA_Abort+0x45c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a62      	ldr	r2, [pc, #392]	@ (80036b8 <HAL_DMA_Abort+0x460>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a61      	ldr	r2, [pc, #388]	@ (80036bc <HAL_DMA_Abort+0x464>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a5f      	ldr	r2, [pc, #380]	@ (80036c0 <HAL_DMA_Abort+0x468>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a5e      	ldr	r2, [pc, #376]	@ (80036c4 <HAL_DMA_Abort+0x46c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a5c      	ldr	r2, [pc, #368]	@ (80036c8 <HAL_DMA_Abort+0x470>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a5b      	ldr	r2, [pc, #364]	@ (80036cc <HAL_DMA_Abort+0x474>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a59      	ldr	r2, [pc, #356]	@ (80036d0 <HAL_DMA_Abort+0x478>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a58      	ldr	r2, [pc, #352]	@ (80036d4 <HAL_DMA_Abort+0x47c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_Abort+0x32a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a56      	ldr	r2, [pc, #344]	@ (80036d8 <HAL_DMA_Abort+0x480>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <HAL_DMA_Abort+0x33c>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e007      	b.n	80035a4 <HAL_DMA_Abort+0x34c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035a4:	e013      	b.n	80035ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a6:	f7fe ff61 	bl	800246c <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d90c      	bls.n	80035ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e12d      	b.n	800382a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2f      	ldr	r2, [pc, #188]	@ (800369c <HAL_DMA_Abort+0x444>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d04a      	beq.n	800367a <HAL_DMA_Abort+0x422>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a2d      	ldr	r2, [pc, #180]	@ (80036a0 <HAL_DMA_Abort+0x448>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d045      	beq.n	800367a <HAL_DMA_Abort+0x422>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a2c      	ldr	r2, [pc, #176]	@ (80036a4 <HAL_DMA_Abort+0x44c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d040      	beq.n	800367a <HAL_DMA_Abort+0x422>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	@ (80036a8 <HAL_DMA_Abort+0x450>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d03b      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a29      	ldr	r2, [pc, #164]	@ (80036ac <HAL_DMA_Abort+0x454>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d036      	beq.n	800367a <HAL_DMA_Abort+0x422>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a27      	ldr	r2, [pc, #156]	@ (80036b0 <HAL_DMA_Abort+0x458>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d031      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a26      	ldr	r2, [pc, #152]	@ (80036b4 <HAL_DMA_Abort+0x45c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d02c      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a24      	ldr	r2, [pc, #144]	@ (80036b8 <HAL_DMA_Abort+0x460>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d027      	beq.n	800367a <HAL_DMA_Abort+0x422>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a23      	ldr	r2, [pc, #140]	@ (80036bc <HAL_DMA_Abort+0x464>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a21      	ldr	r2, [pc, #132]	@ (80036c0 <HAL_DMA_Abort+0x468>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01d      	beq.n	800367a <HAL_DMA_Abort+0x422>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a20      	ldr	r2, [pc, #128]	@ (80036c4 <HAL_DMA_Abort+0x46c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d018      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1e      	ldr	r2, [pc, #120]	@ (80036c8 <HAL_DMA_Abort+0x470>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_DMA_Abort+0x474>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00e      	beq.n	800367a <HAL_DMA_Abort+0x422>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1b      	ldr	r2, [pc, #108]	@ (80036d0 <HAL_DMA_Abort+0x478>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1a      	ldr	r2, [pc, #104]	@ (80036d4 <HAL_DMA_Abort+0x47c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d004      	beq.n	800367a <HAL_DMA_Abort+0x422>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a18      	ldr	r2, [pc, #96]	@ (80036d8 <HAL_DMA_Abort+0x480>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d101      	bne.n	800367e <HAL_DMA_Abort+0x426>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_DMA_Abort+0x428>
 800367e:	2300      	movs	r3, #0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02b      	beq.n	80036dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003688:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	223f      	movs	r2, #63	@ 0x3f
 8003694:	409a      	lsls	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	609a      	str	r2, [r3, #8]
 800369a:	e02a      	b.n	80036f2 <HAL_DMA_Abort+0x49a>
 800369c:	40020010 	.word	0x40020010
 80036a0:	40020028 	.word	0x40020028
 80036a4:	40020040 	.word	0x40020040
 80036a8:	40020058 	.word	0x40020058
 80036ac:	40020070 	.word	0x40020070
 80036b0:	40020088 	.word	0x40020088
 80036b4:	400200a0 	.word	0x400200a0
 80036b8:	400200b8 	.word	0x400200b8
 80036bc:	40020410 	.word	0x40020410
 80036c0:	40020428 	.word	0x40020428
 80036c4:	40020440 	.word	0x40020440
 80036c8:	40020458 	.word	0x40020458
 80036cc:	40020470 	.word	0x40020470
 80036d0:	40020488 	.word	0x40020488
 80036d4:	400204a0 	.word	0x400204a0
 80036d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a4f      	ldr	r2, [pc, #316]	@ (8003834 <HAL_DMA_Abort+0x5dc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d072      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a4d      	ldr	r2, [pc, #308]	@ (8003838 <HAL_DMA_Abort+0x5e0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d06d      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4c      	ldr	r2, [pc, #304]	@ (800383c <HAL_DMA_Abort+0x5e4>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d068      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a4a      	ldr	r2, [pc, #296]	@ (8003840 <HAL_DMA_Abort+0x5e8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d063      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a49      	ldr	r2, [pc, #292]	@ (8003844 <HAL_DMA_Abort+0x5ec>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d05e      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a47      	ldr	r2, [pc, #284]	@ (8003848 <HAL_DMA_Abort+0x5f0>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d059      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a46      	ldr	r2, [pc, #280]	@ (800384c <HAL_DMA_Abort+0x5f4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d054      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a44      	ldr	r2, [pc, #272]	@ (8003850 <HAL_DMA_Abort+0x5f8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d04f      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a43      	ldr	r2, [pc, #268]	@ (8003854 <HAL_DMA_Abort+0x5fc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d04a      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a41      	ldr	r2, [pc, #260]	@ (8003858 <HAL_DMA_Abort+0x600>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d045      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a40      	ldr	r2, [pc, #256]	@ (800385c <HAL_DMA_Abort+0x604>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d040      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3e      	ldr	r2, [pc, #248]	@ (8003860 <HAL_DMA_Abort+0x608>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d03b      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3d      	ldr	r2, [pc, #244]	@ (8003864 <HAL_DMA_Abort+0x60c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d036      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a3b      	ldr	r2, [pc, #236]	@ (8003868 <HAL_DMA_Abort+0x610>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d031      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a3a      	ldr	r2, [pc, #232]	@ (800386c <HAL_DMA_Abort+0x614>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d02c      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a38      	ldr	r2, [pc, #224]	@ (8003870 <HAL_DMA_Abort+0x618>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d027      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a37      	ldr	r2, [pc, #220]	@ (8003874 <HAL_DMA_Abort+0x61c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a35      	ldr	r2, [pc, #212]	@ (8003878 <HAL_DMA_Abort+0x620>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a34      	ldr	r2, [pc, #208]	@ (800387c <HAL_DMA_Abort+0x624>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a32      	ldr	r2, [pc, #200]	@ (8003880 <HAL_DMA_Abort+0x628>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a31      	ldr	r2, [pc, #196]	@ (8003884 <HAL_DMA_Abort+0x62c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003888 <HAL_DMA_Abort+0x630>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a2e      	ldr	r2, [pc, #184]	@ (800388c <HAL_DMA_Abort+0x634>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_Abort+0x58a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003890 <HAL_DMA_Abort+0x638>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_DMA_Abort+0x58e>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_DMA_Abort+0x590>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800380c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003816:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40020010 	.word	0x40020010
 8003838:	40020028 	.word	0x40020028
 800383c:	40020040 	.word	0x40020040
 8003840:	40020058 	.word	0x40020058
 8003844:	40020070 	.word	0x40020070
 8003848:	40020088 	.word	0x40020088
 800384c:	400200a0 	.word	0x400200a0
 8003850:	400200b8 	.word	0x400200b8
 8003854:	40020410 	.word	0x40020410
 8003858:	40020428 	.word	0x40020428
 800385c:	40020440 	.word	0x40020440
 8003860:	40020458 	.word	0x40020458
 8003864:	40020470 	.word	0x40020470
 8003868:	40020488 	.word	0x40020488
 800386c:	400204a0 	.word	0x400204a0
 8003870:	400204b8 	.word	0x400204b8
 8003874:	58025408 	.word	0x58025408
 8003878:	5802541c 	.word	0x5802541c
 800387c:	58025430 	.word	0x58025430
 8003880:	58025444 	.word	0x58025444
 8003884:	58025458 	.word	0x58025458
 8003888:	5802546c 	.word	0x5802546c
 800388c:	58025480 	.word	0x58025480
 8003890:	58025494 	.word	0x58025494

08003894 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e237      	b.n	8003d16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d004      	beq.n	80038bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2280      	movs	r2, #128	@ 0x80
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e22c      	b.n	8003d16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5c      	ldr	r2, [pc, #368]	@ (8003a34 <HAL_DMA_Abort_IT+0x1a0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d04a      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5b      	ldr	r2, [pc, #364]	@ (8003a38 <HAL_DMA_Abort_IT+0x1a4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d045      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a59      	ldr	r2, [pc, #356]	@ (8003a3c <HAL_DMA_Abort_IT+0x1a8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d040      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a58      	ldr	r2, [pc, #352]	@ (8003a40 <HAL_DMA_Abort_IT+0x1ac>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d03b      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a56      	ldr	r2, [pc, #344]	@ (8003a44 <HAL_DMA_Abort_IT+0x1b0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d036      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a55      	ldr	r2, [pc, #340]	@ (8003a48 <HAL_DMA_Abort_IT+0x1b4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d031      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a53      	ldr	r2, [pc, #332]	@ (8003a4c <HAL_DMA_Abort_IT+0x1b8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d02c      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a52      	ldr	r2, [pc, #328]	@ (8003a50 <HAL_DMA_Abort_IT+0x1bc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d027      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a50      	ldr	r2, [pc, #320]	@ (8003a54 <HAL_DMA_Abort_IT+0x1c0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d022      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a4f      	ldr	r2, [pc, #316]	@ (8003a58 <HAL_DMA_Abort_IT+0x1c4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d01d      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a4d      	ldr	r2, [pc, #308]	@ (8003a5c <HAL_DMA_Abort_IT+0x1c8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d018      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a4c      	ldr	r2, [pc, #304]	@ (8003a60 <HAL_DMA_Abort_IT+0x1cc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a4a      	ldr	r2, [pc, #296]	@ (8003a64 <HAL_DMA_Abort_IT+0x1d0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00e      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a49      	ldr	r2, [pc, #292]	@ (8003a68 <HAL_DMA_Abort_IT+0x1d4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a47      	ldr	r2, [pc, #284]	@ (8003a6c <HAL_DMA_Abort_IT+0x1d8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_DMA_Abort_IT+0xc8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a46      	ldr	r2, [pc, #280]	@ (8003a70 <HAL_DMA_Abort_IT+0x1dc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d101      	bne.n	8003960 <HAL_DMA_Abort_IT+0xcc>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_DMA_Abort_IT+0xce>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8086 	beq.w	8003a74 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2f      	ldr	r2, [pc, #188]	@ (8003a34 <HAL_DMA_Abort_IT+0x1a0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2e      	ldr	r2, [pc, #184]	@ (8003a38 <HAL_DMA_Abort_IT+0x1a4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d045      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2c      	ldr	r2, [pc, #176]	@ (8003a3c <HAL_DMA_Abort_IT+0x1a8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2b      	ldr	r2, [pc, #172]	@ (8003a40 <HAL_DMA_Abort_IT+0x1ac>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d03b      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a29      	ldr	r2, [pc, #164]	@ (8003a44 <HAL_DMA_Abort_IT+0x1b0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d036      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a28      	ldr	r2, [pc, #160]	@ (8003a48 <HAL_DMA_Abort_IT+0x1b4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d031      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a26      	ldr	r2, [pc, #152]	@ (8003a4c <HAL_DMA_Abort_IT+0x1b8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a25      	ldr	r2, [pc, #148]	@ (8003a50 <HAL_DMA_Abort_IT+0x1bc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a23      	ldr	r2, [pc, #140]	@ (8003a54 <HAL_DMA_Abort_IT+0x1c0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d022      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <HAL_DMA_Abort_IT+0x1c4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01d      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a20      	ldr	r2, [pc, #128]	@ (8003a5c <HAL_DMA_Abort_IT+0x1c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <HAL_DMA_Abort_IT+0x1cc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <HAL_DMA_Abort_IT+0x1d0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <HAL_DMA_Abort_IT+0x1d4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1a      	ldr	r2, [pc, #104]	@ (8003a6c <HAL_DMA_Abort_IT+0x1d8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_Abort_IT+0x17c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	@ (8003a70 <HAL_DMA_Abort_IT+0x1dc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <HAL_DMA_Abort_IT+0x18e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e178      	b.n	8003d14 <HAL_DMA_Abort_IT+0x480>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e16f      	b.n	8003d14 <HAL_DMA_Abort_IT+0x480>
 8003a34:	40020010 	.word	0x40020010
 8003a38:	40020028 	.word	0x40020028
 8003a3c:	40020040 	.word	0x40020040
 8003a40:	40020058 	.word	0x40020058
 8003a44:	40020070 	.word	0x40020070
 8003a48:	40020088 	.word	0x40020088
 8003a4c:	400200a0 	.word	0x400200a0
 8003a50:	400200b8 	.word	0x400200b8
 8003a54:	40020410 	.word	0x40020410
 8003a58:	40020428 	.word	0x40020428
 8003a5c:	40020440 	.word	0x40020440
 8003a60:	40020458 	.word	0x40020458
 8003a64:	40020470 	.word	0x40020470
 8003a68:	40020488 	.word	0x40020488
 8003a6c:	400204a0 	.word	0x400204a0
 8003a70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 020e 	bic.w	r2, r2, #14
 8003a82:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6c      	ldr	r2, [pc, #432]	@ (8003c3c <HAL_DMA_Abort_IT+0x3a8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d04a      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a6b      	ldr	r2, [pc, #428]	@ (8003c40 <HAL_DMA_Abort_IT+0x3ac>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d045      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a69      	ldr	r2, [pc, #420]	@ (8003c44 <HAL_DMA_Abort_IT+0x3b0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d040      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a68      	ldr	r2, [pc, #416]	@ (8003c48 <HAL_DMA_Abort_IT+0x3b4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d03b      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a66      	ldr	r2, [pc, #408]	@ (8003c4c <HAL_DMA_Abort_IT+0x3b8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d036      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a65      	ldr	r2, [pc, #404]	@ (8003c50 <HAL_DMA_Abort_IT+0x3bc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d031      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a63      	ldr	r2, [pc, #396]	@ (8003c54 <HAL_DMA_Abort_IT+0x3c0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02c      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a62      	ldr	r2, [pc, #392]	@ (8003c58 <HAL_DMA_Abort_IT+0x3c4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d027      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a60      	ldr	r2, [pc, #384]	@ (8003c5c <HAL_DMA_Abort_IT+0x3c8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d022      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5f      	ldr	r2, [pc, #380]	@ (8003c60 <HAL_DMA_Abort_IT+0x3cc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d01d      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a5d      	ldr	r2, [pc, #372]	@ (8003c64 <HAL_DMA_Abort_IT+0x3d0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d018      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5c      	ldr	r2, [pc, #368]	@ (8003c68 <HAL_DMA_Abort_IT+0x3d4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d013      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a5a      	ldr	r2, [pc, #360]	@ (8003c6c <HAL_DMA_Abort_IT+0x3d8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00e      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a59      	ldr	r2, [pc, #356]	@ (8003c70 <HAL_DMA_Abort_IT+0x3dc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a57      	ldr	r2, [pc, #348]	@ (8003c74 <HAL_DMA_Abort_IT+0x3e0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <HAL_DMA_Abort_IT+0x290>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a56      	ldr	r2, [pc, #344]	@ (8003c78 <HAL_DMA_Abort_IT+0x3e4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d108      	bne.n	8003b36 <HAL_DMA_Abort_IT+0x2a2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e007      	b.n	8003b46 <HAL_DMA_Abort_IT+0x2b2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c3c <HAL_DMA_Abort_IT+0x3a8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d072      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3a      	ldr	r2, [pc, #232]	@ (8003c40 <HAL_DMA_Abort_IT+0x3ac>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d06d      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a39      	ldr	r2, [pc, #228]	@ (8003c44 <HAL_DMA_Abort_IT+0x3b0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d068      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a37      	ldr	r2, [pc, #220]	@ (8003c48 <HAL_DMA_Abort_IT+0x3b4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d063      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a36      	ldr	r2, [pc, #216]	@ (8003c4c <HAL_DMA_Abort_IT+0x3b8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d05e      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a34      	ldr	r2, [pc, #208]	@ (8003c50 <HAL_DMA_Abort_IT+0x3bc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d059      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a33      	ldr	r2, [pc, #204]	@ (8003c54 <HAL_DMA_Abort_IT+0x3c0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d054      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a31      	ldr	r2, [pc, #196]	@ (8003c58 <HAL_DMA_Abort_IT+0x3c4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d04f      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a30      	ldr	r2, [pc, #192]	@ (8003c5c <HAL_DMA_Abort_IT+0x3c8>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d04a      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c60 <HAL_DMA_Abort_IT+0x3cc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d045      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2d      	ldr	r2, [pc, #180]	@ (8003c64 <HAL_DMA_Abort_IT+0x3d0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d040      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003c68 <HAL_DMA_Abort_IT+0x3d4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d03b      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <HAL_DMA_Abort_IT+0x3d8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d036      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a28      	ldr	r2, [pc, #160]	@ (8003c70 <HAL_DMA_Abort_IT+0x3dc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d031      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a27      	ldr	r2, [pc, #156]	@ (8003c74 <HAL_DMA_Abort_IT+0x3e0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d02c      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	@ (8003c78 <HAL_DMA_Abort_IT+0x3e4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d027      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a24      	ldr	r2, [pc, #144]	@ (8003c7c <HAL_DMA_Abort_IT+0x3e8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	@ (8003c80 <HAL_DMA_Abort_IT+0x3ec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01d      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	@ (8003c84 <HAL_DMA_Abort_IT+0x3f0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	@ (8003c88 <HAL_DMA_Abort_IT+0x3f4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <HAL_DMA_Abort_IT+0x3f8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c90 <HAL_DMA_Abort_IT+0x3fc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	@ (8003c94 <HAL_DMA_Abort_IT+0x400>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x3a2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a19      	ldr	r2, [pc, #100]	@ (8003c98 <HAL_DMA_Abort_IT+0x404>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d132      	bne.n	8003c9c <HAL_DMA_Abort_IT+0x408>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e031      	b.n	8003c9e <HAL_DMA_Abort_IT+0x40a>
 8003c3a:	bf00      	nop
 8003c3c:	40020010 	.word	0x40020010
 8003c40:	40020028 	.word	0x40020028
 8003c44:	40020040 	.word	0x40020040
 8003c48:	40020058 	.word	0x40020058
 8003c4c:	40020070 	.word	0x40020070
 8003c50:	40020088 	.word	0x40020088
 8003c54:	400200a0 	.word	0x400200a0
 8003c58:	400200b8 	.word	0x400200b8
 8003c5c:	40020410 	.word	0x40020410
 8003c60:	40020428 	.word	0x40020428
 8003c64:	40020440 	.word	0x40020440
 8003c68:	40020458 	.word	0x40020458
 8003c6c:	40020470 	.word	0x40020470
 8003c70:	40020488 	.word	0x40020488
 8003c74:	400204a0 	.word	0x400204a0
 8003c78:	400204b8 	.word	0x400204b8
 8003c7c:	58025408 	.word	0x58025408
 8003c80:	5802541c 	.word	0x5802541c
 8003c84:	58025430 	.word	0x58025430
 8003c88:	58025444 	.word	0x58025444
 8003c8c:	58025458 	.word	0x58025458
 8003c90:	5802546c 	.word	0x5802546c
 8003c94:	58025480 	.word	0x58025480
 8003c98:	58025494 	.word	0x58025494
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d028      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cd0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00c      	beq.n	8003cf4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cf2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop

08003d20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	@ 0x28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d2c:	4b67      	ldr	r3, [pc, #412]	@ (8003ecc <HAL_DMA_IRQHandler+0x1ac>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a67      	ldr	r2, [pc, #412]	@ (8003ed0 <HAL_DMA_IRQHandler+0x1b0>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a9b      	lsrs	r3, r3, #10
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1b4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d04a      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5d      	ldr	r2, [pc, #372]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1b8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d045      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8003edc <HAL_DMA_IRQHandler+0x1bc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d040      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1c0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d03b      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a59      	ldr	r2, [pc, #356]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1c4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d036      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a57      	ldr	r2, [pc, #348]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1c8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d031      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a56      	ldr	r2, [pc, #344]	@ (8003eec <HAL_DMA_IRQHandler+0x1cc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d02c      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a54      	ldr	r2, [pc, #336]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1d0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d027      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a53      	ldr	r2, [pc, #332]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1d4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d022      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a51      	ldr	r2, [pc, #324]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1d8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01d      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a50      	ldr	r2, [pc, #320]	@ (8003efc <HAL_DMA_IRQHandler+0x1dc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d018      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8003f00 <HAL_DMA_IRQHandler+0x1e0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a4d      	ldr	r2, [pc, #308]	@ (8003f04 <HAL_DMA_IRQHandler+0x1e4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00e      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f08 <HAL_DMA_IRQHandler+0x1e8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d009      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a4a      	ldr	r2, [pc, #296]	@ (8003f0c <HAL_DMA_IRQHandler+0x1ec>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d004      	beq.n	8003df2 <HAL_DMA_IRQHandler+0xd2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a48      	ldr	r2, [pc, #288]	@ (8003f10 <HAL_DMA_IRQHandler+0x1f0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_DMA_IRQHandler+0xd6>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_IRQHandler+0xd8>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 842b 	beq.w	8004654 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e02:	f003 031f 	and.w	r3, r3, #31
 8003e06:	2208      	movs	r2, #8
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80a2 	beq.w	8003f58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed4 <HAL_DMA_IRQHandler+0x1b4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d04a      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed8 <HAL_DMA_IRQHandler+0x1b8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d045      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003edc <HAL_DMA_IRQHandler+0x1bc>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d040      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ee0 <HAL_DMA_IRQHandler+0x1c0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d03b      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a28      	ldr	r2, [pc, #160]	@ (8003ee4 <HAL_DMA_IRQHandler+0x1c4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d036      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ee8 <HAL_DMA_IRQHandler+0x1c8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d031      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a25      	ldr	r2, [pc, #148]	@ (8003eec <HAL_DMA_IRQHandler+0x1cc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d02c      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ef0 <HAL_DMA_IRQHandler+0x1d0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d027      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a22      	ldr	r2, [pc, #136]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1d4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d022      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a21      	ldr	r2, [pc, #132]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1d8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01d      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003efc <HAL_DMA_IRQHandler+0x1dc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d018      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1e      	ldr	r2, [pc, #120]	@ (8003f00 <HAL_DMA_IRQHandler+0x1e0>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1c      	ldr	r2, [pc, #112]	@ (8003f04 <HAL_DMA_IRQHandler+0x1e4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00e      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f08 <HAL_DMA_IRQHandler+0x1e8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d009      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	@ (8003f0c <HAL_DMA_IRQHandler+0x1ec>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d004      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x194>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a18      	ldr	r2, [pc, #96]	@ (8003f10 <HAL_DMA_IRQHandler+0x1f0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d12f      	bne.n	8003f14 <HAL_DMA_IRQHandler+0x1f4>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bf14      	ite	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	2300      	moveq	r3, #0
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	e02e      	b.n	8003f28 <HAL_DMA_IRQHandler+0x208>
 8003eca:	bf00      	nop
 8003ecc:	24000000 	.word	0x24000000
 8003ed0:	1b4e81b5 	.word	0x1b4e81b5
 8003ed4:	40020010 	.word	0x40020010
 8003ed8:	40020028 	.word	0x40020028
 8003edc:	40020040 	.word	0x40020040
 8003ee0:	40020058 	.word	0x40020058
 8003ee4:	40020070 	.word	0x40020070
 8003ee8:	40020088 	.word	0x40020088
 8003eec:	400200a0 	.word	0x400200a0
 8003ef0:	400200b8 	.word	0x400200b8
 8003ef4:	40020410 	.word	0x40020410
 8003ef8:	40020428 	.word	0x40020428
 8003efc:	40020440 	.word	0x40020440
 8003f00:	40020458 	.word	0x40020458
 8003f04:	40020470 	.word	0x40020470
 8003f08:	40020488 	.word	0x40020488
 8003f0c:	400204a0 	.word	0x400204a0
 8003f10:	400204b8 	.word	0x400204b8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf14      	ite	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	2300      	moveq	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0204 	bic.w	r2, r2, #4
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2208      	movs	r2, #8
 8003f46:	409a      	lsls	r2, r3
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	f043 0201 	orr.w	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	fa22 f303 	lsr.w	r3, r2, r3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06e      	beq.n	800404c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a69      	ldr	r2, [pc, #420]	@ (8004118 <HAL_DMA_IRQHandler+0x3f8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a67      	ldr	r2, [pc, #412]	@ (800411c <HAL_DMA_IRQHandler+0x3fc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a66      	ldr	r2, [pc, #408]	@ (8004120 <HAL_DMA_IRQHandler+0x400>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a64      	ldr	r2, [pc, #400]	@ (8004124 <HAL_DMA_IRQHandler+0x404>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a63      	ldr	r2, [pc, #396]	@ (8004128 <HAL_DMA_IRQHandler+0x408>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a61      	ldr	r2, [pc, #388]	@ (800412c <HAL_DMA_IRQHandler+0x40c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a60      	ldr	r2, [pc, #384]	@ (8004130 <HAL_DMA_IRQHandler+0x410>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5e      	ldr	r2, [pc, #376]	@ (8004134 <HAL_DMA_IRQHandler+0x414>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8004138 <HAL_DMA_IRQHandler+0x418>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5b      	ldr	r2, [pc, #364]	@ (800413c <HAL_DMA_IRQHandler+0x41c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8004140 <HAL_DMA_IRQHandler+0x420>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	@ (8004144 <HAL_DMA_IRQHandler+0x424>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a57      	ldr	r2, [pc, #348]	@ (8004148 <HAL_DMA_IRQHandler+0x428>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a55      	ldr	r2, [pc, #340]	@ (800414c <HAL_DMA_IRQHandler+0x42c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a54      	ldr	r2, [pc, #336]	@ (8004150 <HAL_DMA_IRQHandler+0x430>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_IRQHandler+0x2ee>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a52      	ldr	r2, [pc, #328]	@ (8004154 <HAL_DMA_IRQHandler+0x434>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_DMA_IRQHandler+0x304>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e003      	b.n	800402c <HAL_DMA_IRQHandler+0x30c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	f043 0202 	orr.w	r2, r3, #2
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	2204      	movs	r2, #4
 8004056:	409a      	lsls	r2, r3
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 808f 	beq.w	8004180 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2c      	ldr	r2, [pc, #176]	@ (8004118 <HAL_DMA_IRQHandler+0x3f8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d04a      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a2a      	ldr	r2, [pc, #168]	@ (800411c <HAL_DMA_IRQHandler+0x3fc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d045      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a29      	ldr	r2, [pc, #164]	@ (8004120 <HAL_DMA_IRQHandler+0x400>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d040      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a27      	ldr	r2, [pc, #156]	@ (8004124 <HAL_DMA_IRQHandler+0x404>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d03b      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <HAL_DMA_IRQHandler+0x408>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d036      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a24      	ldr	r2, [pc, #144]	@ (800412c <HAL_DMA_IRQHandler+0x40c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d031      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a23      	ldr	r2, [pc, #140]	@ (8004130 <HAL_DMA_IRQHandler+0x410>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d02c      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a21      	ldr	r2, [pc, #132]	@ (8004134 <HAL_DMA_IRQHandler+0x414>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d027      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a20      	ldr	r2, [pc, #128]	@ (8004138 <HAL_DMA_IRQHandler+0x418>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d022      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1e      	ldr	r2, [pc, #120]	@ (800413c <HAL_DMA_IRQHandler+0x41c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01d      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <HAL_DMA_IRQHandler+0x420>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d018      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <HAL_DMA_IRQHandler+0x424>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d013      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1a      	ldr	r2, [pc, #104]	@ (8004148 <HAL_DMA_IRQHandler+0x428>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00e      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a18      	ldr	r2, [pc, #96]	@ (800414c <HAL_DMA_IRQHandler+0x42c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d009      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <HAL_DMA_IRQHandler+0x430>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_DMA_IRQHandler+0x3e2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a15      	ldr	r2, [pc, #84]	@ (8004154 <HAL_DMA_IRQHandler+0x434>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d12a      	bne.n	8004158 <HAL_DMA_IRQHandler+0x438>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e023      	b.n	8004160 <HAL_DMA_IRQHandler+0x440>
 8004118:	40020010 	.word	0x40020010
 800411c:	40020028 	.word	0x40020028
 8004120:	40020040 	.word	0x40020040
 8004124:	40020058 	.word	0x40020058
 8004128:	40020070 	.word	0x40020070
 800412c:	40020088 	.word	0x40020088
 8004130:	400200a0 	.word	0x400200a0
 8004134:	400200b8 	.word	0x400200b8
 8004138:	40020410 	.word	0x40020410
 800413c:	40020428 	.word	0x40020428
 8004140:	40020440 	.word	0x40020440
 8004144:	40020458 	.word	0x40020458
 8004148:	40020470 	.word	0x40020470
 800414c:	40020488 	.word	0x40020488
 8004150:	400204a0 	.word	0x400204a0
 8004154:	400204b8 	.word	0x400204b8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2204      	movs	r2, #4
 800416e:	409a      	lsls	r2, r3
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0204 	orr.w	r2, r3, #4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2210      	movs	r2, #16
 800418a:	409a      	lsls	r2, r3
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80a6 	beq.w	80042e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a85      	ldr	r2, [pc, #532]	@ (80043b0 <HAL_DMA_IRQHandler+0x690>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d04a      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a83      	ldr	r2, [pc, #524]	@ (80043b4 <HAL_DMA_IRQHandler+0x694>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d045      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a82      	ldr	r2, [pc, #520]	@ (80043b8 <HAL_DMA_IRQHandler+0x698>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d040      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a80      	ldr	r2, [pc, #512]	@ (80043bc <HAL_DMA_IRQHandler+0x69c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d03b      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7f      	ldr	r2, [pc, #508]	@ (80043c0 <HAL_DMA_IRQHandler+0x6a0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d036      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a7d      	ldr	r2, [pc, #500]	@ (80043c4 <HAL_DMA_IRQHandler+0x6a4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d031      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7c      	ldr	r2, [pc, #496]	@ (80043c8 <HAL_DMA_IRQHandler+0x6a8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d02c      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7a      	ldr	r2, [pc, #488]	@ (80043cc <HAL_DMA_IRQHandler+0x6ac>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d027      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a79      	ldr	r2, [pc, #484]	@ (80043d0 <HAL_DMA_IRQHandler+0x6b0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d022      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a77      	ldr	r2, [pc, #476]	@ (80043d4 <HAL_DMA_IRQHandler+0x6b4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01d      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a76      	ldr	r2, [pc, #472]	@ (80043d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d018      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a74      	ldr	r2, [pc, #464]	@ (80043dc <HAL_DMA_IRQHandler+0x6bc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a73      	ldr	r2, [pc, #460]	@ (80043e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d00e      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a71      	ldr	r2, [pc, #452]	@ (80043e4 <HAL_DMA_IRQHandler+0x6c4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a70      	ldr	r2, [pc, #448]	@ (80043e8 <HAL_DMA_IRQHandler+0x6c8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d004      	beq.n	8004236 <HAL_DMA_IRQHandler+0x516>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6e      	ldr	r2, [pc, #440]	@ (80043ec <HAL_DMA_IRQHandler+0x6cc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d10a      	bne.n	800424c <HAL_DMA_IRQHandler+0x52c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e009      	b.n	8004260 <HAL_DMA_IRQHandler+0x540>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d03e      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2210      	movs	r2, #16
 800426e:	409a      	lsls	r2, r3
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d024      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
 80042a0:	e01f      	b.n	80042e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d01b      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
 80042b2:	e016      	b.n	80042e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0208 	bic.w	r2, r2, #8
 80042d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	2220      	movs	r2, #32
 80042ec:	409a      	lsls	r2, r3
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8110 	beq.w	8004518 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <HAL_DMA_IRQHandler+0x690>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d04a      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_DMA_IRQHandler+0x694>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d045      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a29      	ldr	r2, [pc, #164]	@ (80043b8 <HAL_DMA_IRQHandler+0x698>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d040      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a28      	ldr	r2, [pc, #160]	@ (80043bc <HAL_DMA_IRQHandler+0x69c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d03b      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a26      	ldr	r2, [pc, #152]	@ (80043c0 <HAL_DMA_IRQHandler+0x6a0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d036      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a25      	ldr	r2, [pc, #148]	@ (80043c4 <HAL_DMA_IRQHandler+0x6a4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d031      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a23      	ldr	r2, [pc, #140]	@ (80043c8 <HAL_DMA_IRQHandler+0x6a8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d02c      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a22      	ldr	r2, [pc, #136]	@ (80043cc <HAL_DMA_IRQHandler+0x6ac>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d027      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a20      	ldr	r2, [pc, #128]	@ (80043d0 <HAL_DMA_IRQHandler+0x6b0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d022      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1f      	ldr	r2, [pc, #124]	@ (80043d4 <HAL_DMA_IRQHandler+0x6b4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d01d      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1d      	ldr	r2, [pc, #116]	@ (80043d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d018      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	@ (80043dc <HAL_DMA_IRQHandler+0x6bc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d013      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00e      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_DMA_IRQHandler+0x6c4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <HAL_DMA_IRQHandler+0x6c8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d004      	beq.n	8004398 <HAL_DMA_IRQHandler+0x678>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a16      	ldr	r2, [pc, #88]	@ (80043ec <HAL_DMA_IRQHandler+0x6cc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d12b      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x6d0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	bf14      	ite	ne
 80043a6:	2301      	movne	r3, #1
 80043a8:	2300      	moveq	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	e02a      	b.n	8004404 <HAL_DMA_IRQHandler+0x6e4>
 80043ae:	bf00      	nop
 80043b0:	40020010 	.word	0x40020010
 80043b4:	40020028 	.word	0x40020028
 80043b8:	40020040 	.word	0x40020040
 80043bc:	40020058 	.word	0x40020058
 80043c0:	40020070 	.word	0x40020070
 80043c4:	40020088 	.word	0x40020088
 80043c8:	400200a0 	.word	0x400200a0
 80043cc:	400200b8 	.word	0x400200b8
 80043d0:	40020410 	.word	0x40020410
 80043d4:	40020428 	.word	0x40020428
 80043d8:	40020440 	.word	0x40020440
 80043dc:	40020458 	.word	0x40020458
 80043e0:	40020470 	.word	0x40020470
 80043e4:	40020488 	.word	0x40020488
 80043e8:	400204a0 	.word	0x400204a0
 80043ec:	400204b8 	.word	0x400204b8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 8087 	beq.w	8004518 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2220      	movs	r2, #32
 8004414:	409a      	lsls	r2, r3
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b04      	cmp	r3, #4
 8004424:	d139      	bne.n	800449a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0216 	bic.w	r2, r2, #22
 8004434:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004444:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <HAL_DMA_IRQHandler+0x736>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0208 	bic.w	r2, r2, #8
 8004464:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	223f      	movs	r2, #63	@ 0x3f
 8004470:	409a      	lsls	r2, r3
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 834a 	beq.w	8004b24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
          }
          return;
 8004498:	e344      	b.n	8004b24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d018      	beq.n	80044da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d108      	bne.n	80044c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d02c      	beq.n	8004518 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e027      	b.n	8004518 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d023      	beq.n	8004518 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4798      	blx	r3
 80044d8:	e01e      	b.n	8004518 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10f      	bne.n	8004508 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0210 	bic.w	r2, r2, #16
 80044f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8306 	beq.w	8004b2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8088 	beq.w	8004640 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2204      	movs	r2, #4
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a7a      	ldr	r2, [pc, #488]	@ (8004728 <HAL_DMA_IRQHandler+0xa08>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d04a      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a79      	ldr	r2, [pc, #484]	@ (800472c <HAL_DMA_IRQHandler+0xa0c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d045      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a77      	ldr	r2, [pc, #476]	@ (8004730 <HAL_DMA_IRQHandler+0xa10>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d040      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a76      	ldr	r2, [pc, #472]	@ (8004734 <HAL_DMA_IRQHandler+0xa14>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d03b      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a74      	ldr	r2, [pc, #464]	@ (8004738 <HAL_DMA_IRQHandler+0xa18>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d036      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a73      	ldr	r2, [pc, #460]	@ (800473c <HAL_DMA_IRQHandler+0xa1c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d031      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a71      	ldr	r2, [pc, #452]	@ (8004740 <HAL_DMA_IRQHandler+0xa20>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02c      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a70      	ldr	r2, [pc, #448]	@ (8004744 <HAL_DMA_IRQHandler+0xa24>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d027      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6e      	ldr	r2, [pc, #440]	@ (8004748 <HAL_DMA_IRQHandler+0xa28>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d022      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6d      	ldr	r2, [pc, #436]	@ (800474c <HAL_DMA_IRQHandler+0xa2c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d01d      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004750 <HAL_DMA_IRQHandler+0xa30>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004754 <HAL_DMA_IRQHandler+0xa34>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_DMA_IRQHandler+0xa38>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a67      	ldr	r2, [pc, #412]	@ (800475c <HAL_DMA_IRQHandler+0xa3c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a65      	ldr	r2, [pc, #404]	@ (8004760 <HAL_DMA_IRQHandler+0xa40>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x8b8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a64      	ldr	r2, [pc, #400]	@ (8004764 <HAL_DMA_IRQHandler+0xa44>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d108      	bne.n	80045ea <HAL_DMA_IRQHandler+0x8ca>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0201 	bic.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e007      	b.n	80045fa <HAL_DMA_IRQHandler+0x8da>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004602:	429a      	cmp	r2, r3
 8004604:	d307      	bcc.n	8004616 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f2      	bne.n	80045fa <HAL_DMA_IRQHandler+0x8da>
 8004614:	e000      	b.n	8004618 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004616:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2203      	movs	r2, #3
 800462a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800462e:	e003      	b.n	8004638 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8272 	beq.w	8004b2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	4798      	blx	r3
 8004652:	e26c      	b.n	8004b2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a43      	ldr	r2, [pc, #268]	@ (8004768 <HAL_DMA_IRQHandler+0xa48>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d022      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_DMA_IRQHandler+0xa4c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d01d      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a40      	ldr	r2, [pc, #256]	@ (8004770 <HAL_DMA_IRQHandler+0xa50>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d018      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3f      	ldr	r2, [pc, #252]	@ (8004774 <HAL_DMA_IRQHandler+0xa54>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3d      	ldr	r2, [pc, #244]	@ (8004778 <HAL_DMA_IRQHandler+0xa58>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00e      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a3c      	ldr	r2, [pc, #240]	@ (800477c <HAL_DMA_IRQHandler+0xa5c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3a      	ldr	r2, [pc, #232]	@ (8004780 <HAL_DMA_IRQHandler+0xa60>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <HAL_DMA_IRQHandler+0x984>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a39      	ldr	r2, [pc, #228]	@ (8004784 <HAL_DMA_IRQHandler+0xa64>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d101      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x988>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_DMA_IRQHandler+0x98a>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 823f 	beq.w	8004b2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	2204      	movs	r2, #4
 80046c2:	409a      	lsls	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80cd 	beq.w	8004868 <HAL_DMA_IRQHandler+0xb48>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80c7 	beq.w	8004868 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2204      	movs	r2, #4
 80046e4:	409a      	lsls	r2, r3
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d049      	beq.n	8004788 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8210 	beq.w	8004b28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004710:	e20a      	b.n	8004b28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8206 	beq.w	8004b28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004724:	e200      	b.n	8004b28 <HAL_DMA_IRQHandler+0xe08>
 8004726:	bf00      	nop
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
 8004768:	58025408 	.word	0x58025408
 800476c:	5802541c 	.word	0x5802541c
 8004770:	58025430 	.word	0x58025430
 8004774:	58025444 	.word	0x58025444
 8004778:	58025458 	.word	0x58025458
 800477c:	5802546c 	.word	0x5802546c
 8004780:	58025480 	.word	0x58025480
 8004784:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d160      	bne.n	8004854 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7f      	ldr	r2, [pc, #508]	@ (8004994 <HAL_DMA_IRQHandler+0xc74>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04a      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a7d      	ldr	r2, [pc, #500]	@ (8004998 <HAL_DMA_IRQHandler+0xc78>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d045      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7c      	ldr	r2, [pc, #496]	@ (800499c <HAL_DMA_IRQHandler+0xc7c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d040      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7a      	ldr	r2, [pc, #488]	@ (80049a0 <HAL_DMA_IRQHandler+0xc80>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d03b      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a79      	ldr	r2, [pc, #484]	@ (80049a4 <HAL_DMA_IRQHandler+0xc84>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d036      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a77      	ldr	r2, [pc, #476]	@ (80049a8 <HAL_DMA_IRQHandler+0xc88>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d031      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a76      	ldr	r2, [pc, #472]	@ (80049ac <HAL_DMA_IRQHandler+0xc8c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d02c      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a74      	ldr	r2, [pc, #464]	@ (80049b0 <HAL_DMA_IRQHandler+0xc90>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d027      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a73      	ldr	r2, [pc, #460]	@ (80049b4 <HAL_DMA_IRQHandler+0xc94>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d022      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a71      	ldr	r2, [pc, #452]	@ (80049b8 <HAL_DMA_IRQHandler+0xc98>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d01d      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a70      	ldr	r2, [pc, #448]	@ (80049bc <HAL_DMA_IRQHandler+0xc9c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d018      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a6e      	ldr	r2, [pc, #440]	@ (80049c0 <HAL_DMA_IRQHandler+0xca0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6d      	ldr	r2, [pc, #436]	@ (80049c4 <HAL_DMA_IRQHandler+0xca4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6b      	ldr	r2, [pc, #428]	@ (80049c8 <HAL_DMA_IRQHandler+0xca8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d009      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a6a      	ldr	r2, [pc, #424]	@ (80049cc <HAL_DMA_IRQHandler+0xcac>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_DMA_IRQHandler+0xb12>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a68      	ldr	r2, [pc, #416]	@ (80049d0 <HAL_DMA_IRQHandler+0xcb0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <HAL_DMA_IRQHandler+0xb24>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0208 	bic.w	r2, r2, #8
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e007      	b.n	8004854 <HAL_DMA_IRQHandler+0xb34>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0204 	bic.w	r2, r2, #4
 8004852:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8165 	beq.w	8004b28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004866:	e15f      	b.n	8004b28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	2202      	movs	r2, #2
 8004872:	409a      	lsls	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80c5 	beq.w	8004a08 <HAL_DMA_IRQHandler+0xce8>
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80bf 	beq.w	8004a08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2202      	movs	r2, #2
 8004894:	409a      	lsls	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d018      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 813a 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048c0:	e134      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8130 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d4:	e12a      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8089 	bne.w	80049f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004994 <HAL_DMA_IRQHandler+0xc74>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d04a      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a29      	ldr	r2, [pc, #164]	@ (8004998 <HAL_DMA_IRQHandler+0xc78>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d045      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a28      	ldr	r2, [pc, #160]	@ (800499c <HAL_DMA_IRQHandler+0xc7c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d040      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a26      	ldr	r2, [pc, #152]	@ (80049a0 <HAL_DMA_IRQHandler+0xc80>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d03b      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a25      	ldr	r2, [pc, #148]	@ (80049a4 <HAL_DMA_IRQHandler+0xc84>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a23      	ldr	r2, [pc, #140]	@ (80049a8 <HAL_DMA_IRQHandler+0xc88>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a22      	ldr	r2, [pc, #136]	@ (80049ac <HAL_DMA_IRQHandler+0xc8c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d02c      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a20      	ldr	r2, [pc, #128]	@ (80049b0 <HAL_DMA_IRQHandler+0xc90>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d027      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1f      	ldr	r2, [pc, #124]	@ (80049b4 <HAL_DMA_IRQHandler+0xc94>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d022      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_DMA_IRQHandler+0xc98>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d01d      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1c      	ldr	r2, [pc, #112]	@ (80049bc <HAL_DMA_IRQHandler+0xc9c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d018      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1a      	ldr	r2, [pc, #104]	@ (80049c0 <HAL_DMA_IRQHandler+0xca0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a19      	ldr	r2, [pc, #100]	@ (80049c4 <HAL_DMA_IRQHandler+0xca4>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00e      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <HAL_DMA_IRQHandler+0xca8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d009      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <HAL_DMA_IRQHandler+0xcac>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d004      	beq.n	8004982 <HAL_DMA_IRQHandler+0xc62>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a14      	ldr	r2, [pc, #80]	@ (80049d0 <HAL_DMA_IRQHandler+0xcb0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d128      	bne.n	80049d4 <HAL_DMA_IRQHandler+0xcb4>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0214 	bic.w	r2, r2, #20
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e027      	b.n	80049e4 <HAL_DMA_IRQHandler+0xcc4>
 8004994:	40020010 	.word	0x40020010
 8004998:	40020028 	.word	0x40020028
 800499c:	40020040 	.word	0x40020040
 80049a0:	40020058 	.word	0x40020058
 80049a4:	40020070 	.word	0x40020070
 80049a8:	40020088 	.word	0x40020088
 80049ac:	400200a0 	.word	0x400200a0
 80049b0:	400200b8 	.word	0x400200b8
 80049b4:	40020410 	.word	0x40020410
 80049b8:	40020428 	.word	0x40020428
 80049bc:	40020440 	.word	0x40020440
 80049c0:	40020458 	.word	0x40020458
 80049c4:	40020470 	.word	0x40020470
 80049c8:	40020488 	.word	0x40020488
 80049cc:	400204a0 	.word	0x400204a0
 80049d0:	400204b8 	.word	0x400204b8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 020a 	bic.w	r2, r2, #10
 80049e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8097 	beq.w	8004b2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a06:	e091      	b.n	8004b2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	2208      	movs	r2, #8
 8004a12:	409a      	lsls	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8088 	beq.w	8004b2e <HAL_DMA_IRQHandler+0xe0e>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8082 	beq.w	8004b2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a41      	ldr	r2, [pc, #260]	@ (8004b34 <HAL_DMA_IRQHandler+0xe14>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d04a      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3f      	ldr	r2, [pc, #252]	@ (8004b38 <HAL_DMA_IRQHandler+0xe18>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d045      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a3e      	ldr	r2, [pc, #248]	@ (8004b3c <HAL_DMA_IRQHandler+0xe1c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d040      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b40 <HAL_DMA_IRQHandler+0xe20>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d03b      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a3b      	ldr	r2, [pc, #236]	@ (8004b44 <HAL_DMA_IRQHandler+0xe24>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d036      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a39      	ldr	r2, [pc, #228]	@ (8004b48 <HAL_DMA_IRQHandler+0xe28>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d031      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	@ (8004b4c <HAL_DMA_IRQHandler+0xe2c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d02c      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a36      	ldr	r2, [pc, #216]	@ (8004b50 <HAL_DMA_IRQHandler+0xe30>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d027      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a35      	ldr	r2, [pc, #212]	@ (8004b54 <HAL_DMA_IRQHandler+0xe34>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a33      	ldr	r2, [pc, #204]	@ (8004b58 <HAL_DMA_IRQHandler+0xe38>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a32      	ldr	r2, [pc, #200]	@ (8004b5c <HAL_DMA_IRQHandler+0xe3c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a30      	ldr	r2, [pc, #192]	@ (8004b60 <HAL_DMA_IRQHandler+0xe40>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b64 <HAL_DMA_IRQHandler+0xe44>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b68 <HAL_DMA_IRQHandler+0xe48>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	@ (8004b6c <HAL_DMA_IRQHandler+0xe4c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_DMA_IRQHandler+0xdaa>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b70 <HAL_DMA_IRQHandler+0xe50>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d108      	bne.n	8004adc <HAL_DMA_IRQHandler+0xdbc>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 021c 	bic.w	r2, r2, #28
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e007      	b.n	8004aec <HAL_DMA_IRQHandler+0xdcc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 020e 	bic.w	r2, r2, #14
 8004aea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2201      	movs	r2, #1
 8004af6:	409a      	lsls	r2, r3
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
 8004b22:	e004      	b.n	8004b2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b24:	bf00      	nop
 8004b26:	e002      	b.n	8004b2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b2e:	3728      	adds	r7, #40	@ 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40020010 	.word	0x40020010
 8004b38:	40020028 	.word	0x40020028
 8004b3c:	40020040 	.word	0x40020040
 8004b40:	40020058 	.word	0x40020058
 8004b44:	40020070 	.word	0x40020070
 8004b48:	40020088 	.word	0x40020088
 8004b4c:	400200a0 	.word	0x400200a0
 8004b50:	400200b8 	.word	0x400200b8
 8004b54:	40020410 	.word	0x40020410
 8004b58:	40020428 	.word	0x40020428
 8004b5c:	40020440 	.word	0x40020440
 8004b60:	40020458 	.word	0x40020458
 8004b64:	40020470 	.word	0x40020470
 8004b68:	40020488 	.word	0x40020488
 8004b6c:	400204a0 	.word	0x400204a0
 8004b70:	400204b8 	.word	0x400204b8

08004b74 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7f      	ldr	r2, [pc, #508]	@ (8004da8 <DMA_SetConfig+0x21c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d072      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7d      	ldr	r2, [pc, #500]	@ (8004dac <DMA_SetConfig+0x220>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d06d      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004db0 <DMA_SetConfig+0x224>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d068      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7a      	ldr	r2, [pc, #488]	@ (8004db4 <DMA_SetConfig+0x228>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d063      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a79      	ldr	r2, [pc, #484]	@ (8004db8 <DMA_SetConfig+0x22c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d05e      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a77      	ldr	r2, [pc, #476]	@ (8004dbc <DMA_SetConfig+0x230>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d059      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a76      	ldr	r2, [pc, #472]	@ (8004dc0 <DMA_SetConfig+0x234>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d054      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a74      	ldr	r2, [pc, #464]	@ (8004dc4 <DMA_SetConfig+0x238>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d04f      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	@ (8004dc8 <DMA_SetConfig+0x23c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d04a      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a71      	ldr	r2, [pc, #452]	@ (8004dcc <DMA_SetConfig+0x240>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d045      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	@ (8004dd0 <DMA_SetConfig+0x244>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d040      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd4 <DMA_SetConfig+0x248>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d03b      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6d      	ldr	r2, [pc, #436]	@ (8004dd8 <DMA_SetConfig+0x24c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d036      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ddc <DMA_SetConfig+0x250>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d031      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a6a      	ldr	r2, [pc, #424]	@ (8004de0 <DMA_SetConfig+0x254>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d02c      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a68      	ldr	r2, [pc, #416]	@ (8004de4 <DMA_SetConfig+0x258>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d027      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a67      	ldr	r2, [pc, #412]	@ (8004de8 <DMA_SetConfig+0x25c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a65      	ldr	r2, [pc, #404]	@ (8004dec <DMA_SetConfig+0x260>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d01d      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a64      	ldr	r2, [pc, #400]	@ (8004df0 <DMA_SetConfig+0x264>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a62      	ldr	r2, [pc, #392]	@ (8004df4 <DMA_SetConfig+0x268>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a61      	ldr	r2, [pc, #388]	@ (8004df8 <DMA_SetConfig+0x26c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <DMA_SetConfig+0x270>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a5e      	ldr	r2, [pc, #376]	@ (8004e00 <DMA_SetConfig+0x274>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <DMA_SetConfig+0x10a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a5c      	ldr	r2, [pc, #368]	@ (8004e04 <DMA_SetConfig+0x278>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <DMA_SetConfig+0x10e>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <DMA_SetConfig+0x110>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00d      	beq.n	8004cbc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ca8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a39      	ldr	r2, [pc, #228]	@ (8004da8 <DMA_SetConfig+0x21c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d04a      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a38      	ldr	r2, [pc, #224]	@ (8004dac <DMA_SetConfig+0x220>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d045      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a36      	ldr	r2, [pc, #216]	@ (8004db0 <DMA_SetConfig+0x224>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d040      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <DMA_SetConfig+0x228>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d03b      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a33      	ldr	r2, [pc, #204]	@ (8004db8 <DMA_SetConfig+0x22c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d036      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	@ (8004dbc <DMA_SetConfig+0x230>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d031      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a30      	ldr	r2, [pc, #192]	@ (8004dc0 <DMA_SetConfig+0x234>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02c      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <DMA_SetConfig+0x238>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d027      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <DMA_SetConfig+0x23c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <DMA_SetConfig+0x240>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd0 <DMA_SetConfig+0x244>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a29      	ldr	r2, [pc, #164]	@ (8004dd4 <DMA_SetConfig+0x248>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a27      	ldr	r2, [pc, #156]	@ (8004dd8 <DMA_SetConfig+0x24c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a26      	ldr	r2, [pc, #152]	@ (8004ddc <DMA_SetConfig+0x250>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a24      	ldr	r2, [pc, #144]	@ (8004de0 <DMA_SetConfig+0x254>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <DMA_SetConfig+0x1d0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a23      	ldr	r2, [pc, #140]	@ (8004de4 <DMA_SetConfig+0x258>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <DMA_SetConfig+0x1d4>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <DMA_SetConfig+0x1d6>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d059      	beq.n	8004e1a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	223f      	movs	r2, #63	@ 0x3f
 8004d70:	409a      	lsls	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b40      	cmp	r3, #64	@ 0x40
 8004d94:	d138      	bne.n	8004e08 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004da6:	e086      	b.n	8004eb6 <DMA_SetConfig+0x32a>
 8004da8:	40020010 	.word	0x40020010
 8004dac:	40020028 	.word	0x40020028
 8004db0:	40020040 	.word	0x40020040
 8004db4:	40020058 	.word	0x40020058
 8004db8:	40020070 	.word	0x40020070
 8004dbc:	40020088 	.word	0x40020088
 8004dc0:	400200a0 	.word	0x400200a0
 8004dc4:	400200b8 	.word	0x400200b8
 8004dc8:	40020410 	.word	0x40020410
 8004dcc:	40020428 	.word	0x40020428
 8004dd0:	40020440 	.word	0x40020440
 8004dd4:	40020458 	.word	0x40020458
 8004dd8:	40020470 	.word	0x40020470
 8004ddc:	40020488 	.word	0x40020488
 8004de0:	400204a0 	.word	0x400204a0
 8004de4:	400204b8 	.word	0x400204b8
 8004de8:	58025408 	.word	0x58025408
 8004dec:	5802541c 	.word	0x5802541c
 8004df0:	58025430 	.word	0x58025430
 8004df4:	58025444 	.word	0x58025444
 8004df8:	58025458 	.word	0x58025458
 8004dfc:	5802546c 	.word	0x5802546c
 8004e00:	58025480 	.word	0x58025480
 8004e04:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
}
 8004e18:	e04d      	b.n	8004eb6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <DMA_SetConfig+0x338>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a27      	ldr	r2, [pc, #156]	@ (8004ec8 <DMA_SetConfig+0x33c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a26      	ldr	r2, [pc, #152]	@ (8004ecc <DMA_SetConfig+0x340>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <DMA_SetConfig+0x344>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a23      	ldr	r2, [pc, #140]	@ (8004ed4 <DMA_SetConfig+0x348>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <DMA_SetConfig+0x34c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a20      	ldr	r2, [pc, #128]	@ (8004edc <DMA_SetConfig+0x350>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <DMA_SetConfig+0x2de>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <DMA_SetConfig+0x354>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <DMA_SetConfig+0x2e2>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <DMA_SetConfig+0x2e4>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d108      	bne.n	8004ea6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	60da      	str	r2, [r3, #12]
}
 8004ea4:	e007      	b.n	8004eb6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	60da      	str	r2, [r3, #12]
}
 8004eb6:	bf00      	nop
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	58025408 	.word	0x58025408
 8004ec8:	5802541c 	.word	0x5802541c
 8004ecc:	58025430 	.word	0x58025430
 8004ed0:	58025444 	.word	0x58025444
 8004ed4:	58025458 	.word	0x58025458
 8004ed8:	5802546c 	.word	0x5802546c
 8004edc:	58025480 	.word	0x58025480
 8004ee0:	58025494 	.word	0x58025494

08004ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a42      	ldr	r2, [pc, #264]	@ (8004ffc <DMA_CalcBaseAndBitshift+0x118>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d04a      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a41      	ldr	r2, [pc, #260]	@ (8005000 <DMA_CalcBaseAndBitshift+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d045      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a3f      	ldr	r2, [pc, #252]	@ (8005004 <DMA_CalcBaseAndBitshift+0x120>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d040      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8005008 <DMA_CalcBaseAndBitshift+0x124>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d03b      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3c      	ldr	r2, [pc, #240]	@ (800500c <DMA_CalcBaseAndBitshift+0x128>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d036      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3b      	ldr	r2, [pc, #236]	@ (8005010 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d031      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a39      	ldr	r2, [pc, #228]	@ (8005014 <DMA_CalcBaseAndBitshift+0x130>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02c      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a38      	ldr	r2, [pc, #224]	@ (8005018 <DMA_CalcBaseAndBitshift+0x134>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d027      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a36      	ldr	r2, [pc, #216]	@ (800501c <DMA_CalcBaseAndBitshift+0x138>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d022      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a35      	ldr	r2, [pc, #212]	@ (8005020 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01d      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <DMA_CalcBaseAndBitshift+0x140>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d018      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <DMA_CalcBaseAndBitshift+0x144>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d013      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a30      	ldr	r2, [pc, #192]	@ (800502c <DMA_CalcBaseAndBitshift+0x148>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00e      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2f      	ldr	r2, [pc, #188]	@ (8005030 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d009      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005034 <DMA_CalcBaseAndBitshift+0x150>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2c      	ldr	r2, [pc, #176]	@ (8005038 <DMA_CalcBaseAndBitshift+0x154>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d101      	bne.n	8004f90 <DMA_CalcBaseAndBitshift+0xac>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <DMA_CalcBaseAndBitshift+0xae>
 8004f90:	2300      	movs	r3, #0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d024      	beq.n	8004fe0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	3b10      	subs	r3, #16
 8004f9e:	4a27      	ldr	r2, [pc, #156]	@ (800503c <DMA_CalcBaseAndBitshift+0x158>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	4a24      	ldr	r2, [pc, #144]	@ (8005040 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fb0:	5cd3      	ldrb	r3, [r2, r3]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d908      	bls.n	8004fd0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8005044 <DMA_CalcBaseAndBitshift+0x160>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fce:	e00d      	b.n	8004fec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005044 <DMA_CalcBaseAndBitshift+0x160>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fde:	e005      	b.n	8004fec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40020010 	.word	0x40020010
 8005000:	40020028 	.word	0x40020028
 8005004:	40020040 	.word	0x40020040
 8005008:	40020058 	.word	0x40020058
 800500c:	40020070 	.word	0x40020070
 8005010:	40020088 	.word	0x40020088
 8005014:	400200a0 	.word	0x400200a0
 8005018:	400200b8 	.word	0x400200b8
 800501c:	40020410 	.word	0x40020410
 8005020:	40020428 	.word	0x40020428
 8005024:	40020440 	.word	0x40020440
 8005028:	40020458 	.word	0x40020458
 800502c:	40020470 	.word	0x40020470
 8005030:	40020488 	.word	0x40020488
 8005034:	400204a0 	.word	0x400204a0
 8005038:	400204b8 	.word	0x400204b8
 800503c:	aaaaaaab 	.word	0xaaaaaaab
 8005040:	0801dd7c 	.word	0x0801dd7c
 8005044:	fffffc00 	.word	0xfffffc00

08005048 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d120      	bne.n	800509e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	2b03      	cmp	r3, #3
 8005062:	d858      	bhi.n	8005116 <DMA_CheckFifoParam+0xce>
 8005064:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <DMA_CheckFifoParam+0x24>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	0800508f 	.word	0x0800508f
 8005074:	0800507d 	.word	0x0800507d
 8005078:	08005117 	.word	0x08005117
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d048      	beq.n	800511a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800508c:	e045      	b.n	800511a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005096:	d142      	bne.n	800511e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800509c:	e03f      	b.n	800511e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a6:	d123      	bne.n	80050f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d838      	bhi.n	8005122 <DMA_CheckFifoParam+0xda>
 80050b0:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <DMA_CheckFifoParam+0x70>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050cf 	.word	0x080050cf
 80050c0:	080050c9 	.word	0x080050c9
 80050c4:	080050e1 	.word	0x080050e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
        break;
 80050cc:	e030      	b.n	8005130 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d025      	beq.n	8005126 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050de:	e022      	b.n	8005126 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050e8:	d11f      	bne.n	800512a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050ee:	e01c      	b.n	800512a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d902      	bls.n	80050fe <DMA_CheckFifoParam+0xb6>
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d003      	beq.n	8005104 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80050fc:	e018      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
        break;
 8005102:	e015      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
    break;
 8005114:	e00b      	b.n	800512e <DMA_CheckFifoParam+0xe6>
        break;
 8005116:	bf00      	nop
 8005118:	e00a      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 800511a:	bf00      	nop
 800511c:	e008      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 800511e:	bf00      	nop
 8005120:	e006      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
        break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
    break;
 800512e:	bf00      	nop
    }
  }

  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop

08005140 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a38      	ldr	r2, [pc, #224]	@ (8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d022      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a36      	ldr	r2, [pc, #216]	@ (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01d      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a35      	ldr	r2, [pc, #212]	@ (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a33      	ldr	r2, [pc, #204]	@ (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a32      	ldr	r2, [pc, #200]	@ (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a30      	ldr	r2, [pc, #192]	@ (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2f      	ldr	r2, [pc, #188]	@ (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2d      	ldr	r2, [pc, #180]	@ (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01a      	beq.n	80051de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	3b08      	subs	r3, #8
 80051b0:	4a28      	ldr	r2, [pc, #160]	@ (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4b26      	ldr	r3, [pc, #152]	@ (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a24      	ldr	r2, [pc, #144]	@ (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	2201      	movs	r2, #1
 80051d6:	409a      	lsls	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051dc:	e024      	b.n	8005228 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	3b10      	subs	r3, #16
 80051e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d806      	bhi.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d902      	bls.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3308      	adds	r3, #8
 8005204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4b18      	ldr	r3, [pc, #96]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a16      	ldr	r2, [pc, #88]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005218:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	2201      	movs	r2, #1
 8005222:	409a      	lsls	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	58025408 	.word	0x58025408
 8005238:	5802541c 	.word	0x5802541c
 800523c:	58025430 	.word	0x58025430
 8005240:	58025444 	.word	0x58025444
 8005244:	58025458 	.word	0x58025458
 8005248:	5802546c 	.word	0x5802546c
 800524c:	58025480 	.word	0x58025480
 8005250:	58025494 	.word	0x58025494
 8005254:	cccccccd 	.word	0xcccccccd
 8005258:	16009600 	.word	0x16009600
 800525c:	58025880 	.word	0x58025880
 8005260:	aaaaaaab 	.word	0xaaaaaaab
 8005264:	400204b8 	.word	0x400204b8
 8005268:	4002040f 	.word	0x4002040f
 800526c:	10008200 	.word	0x10008200
 8005270:	40020880 	.word	0x40020880

08005274 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04a      	beq.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d847      	bhi.n	8005320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a25      	ldr	r2, [pc, #148]	@ (800532c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a24      	ldr	r2, [pc, #144]	@ (8005330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01d      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a22      	ldr	r2, [pc, #136]	@ (8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a21      	ldr	r2, [pc, #132]	@ (8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1f      	ldr	r2, [pc, #124]	@ (800533c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1b      	ldr	r2, [pc, #108]	@ (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d101      	bne.n	80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052e4:	2300      	movs	r3, #0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4b17      	ldr	r3, [pc, #92]	@ (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	461a      	mov	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80052fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80052fe:	e009      	b.n	8005314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4b14      	ldr	r3, [pc, #80]	@ (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	461a      	mov	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a11      	ldr	r2, [pc, #68]	@ (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005312:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b01      	subs	r3, #1
 8005318:	2201      	movs	r2, #1
 800531a:	409a      	lsls	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	58025408 	.word	0x58025408
 8005330:	5802541c 	.word	0x5802541c
 8005334:	58025430 	.word	0x58025430
 8005338:	58025444 	.word	0x58025444
 800533c:	58025458 	.word	0x58025458
 8005340:	5802546c 	.word	0x5802546c
 8005344:	58025480 	.word	0x58025480
 8005348:	58025494 	.word	0x58025494
 800534c:	1600963f 	.word	0x1600963f
 8005350:	58025940 	.word	0x58025940
 8005354:	1000823f 	.word	0x1000823f
 8005358:	40020940 	.word	0x40020940

0800535c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0e3      	b.n	8005536 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2223      	movs	r2, #35	@ 0x23
 800537c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7fb ff3b 	bl	80011fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005386:	4b6e      	ldr	r3, [pc, #440]	@ (8005540 <HAL_ETH_Init+0x1e4>)
 8005388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800538c:	4a6c      	ldr	r2, [pc, #432]	@ (8005540 <HAL_ETH_Init+0x1e4>)
 800538e:	f043 0302 	orr.w	r3, r3, #2
 8005392:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005396:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_ETH_Init+0x1e4>)
 8005398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7a1b      	ldrb	r3, [r3, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053ac:	2000      	movs	r0, #0
 80053ae:	f7fd f899 	bl	80024e4 <HAL_SYSCFG_ETHInterfaceSelect>
 80053b2:	e003      	b.n	80053bc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053b4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80053b8:	f7fd f894 	bl	80024e4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80053bc:	4b61      	ldr	r3, [pc, #388]	@ (8005544 <HAL_ETH_Init+0x1e8>)
 80053be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	f043 0301 	orr.w	r3, r3, #1
 80053d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80053d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d8:	f7fd f848 	bl	800246c <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053de:	e011      	b.n	8005404 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80053e0:	f7fd f844 	bl	800246c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80053ee:	d909      	bls.n	8005404 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2204      	movs	r2, #4
 80053f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	22e0      	movs	r2, #224	@ 0xe0
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e098      	b.n	8005536 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e4      	bne.n	80053e0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f89e 	bl	8005558 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800541c:	f001 ffd4 	bl	80073c8 <HAL_RCC_GetHCLKFreq>
 8005420:	4603      	mov	r3, r0
 8005422:	4a49      	ldr	r2, [pc, #292]	@ (8005548 <HAL_ETH_Init+0x1ec>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	0c9a      	lsrs	r2, r3, #18
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3a01      	subs	r2, #1
 8005430:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa81 	bl	800593c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005442:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005446:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005452:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005456:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	22e0      	movs	r2, #224	@ 0xe0
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e05d      	b.n	8005536 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005482:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005486:	4b31      	ldr	r3, [pc, #196]	@ (800554c <HAL_ETH_Init+0x1f0>)
 8005488:	4013      	ands	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6952      	ldr	r2, [r2, #20]
 800548e:	0051      	lsls	r1, r2, #1
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800549a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fae9 	bl	8005a76 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fb2f 	bl	8005b08 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	3305      	adds	r3, #5
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	021a      	lsls	r2, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	3304      	adds	r3, #4
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	4619      	mov	r1, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	3303      	adds	r3, #3
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	061a      	lsls	r2, r3, #24
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	3302      	adds	r3, #2
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	041b      	lsls	r3, r3, #16
 80054dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	3301      	adds	r3, #1
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054f8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b11      	ldr	r3, [pc, #68]	@ (8005550 <HAL_ETH_Init+0x1f4>)
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	4b0d      	ldr	r3, [pc, #52]	@ (8005554 <HAL_ETH_Init+0x1f8>)
 800551e:	430b      	orrs	r3, r1
 8005520:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2210      	movs	r2, #16
 8005530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	58024400 	.word	0x58024400
 8005544:	58000400 	.word	0x58000400
 8005548:	431bde83 	.word	0x431bde83
 800554c:	ffff8001 	.word	0xffff8001
 8005550:	0c020060 	.word	0x0c020060
 8005554:	0c20c000 	.word	0x0c20c000

08005558 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005568:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005570:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005572:	f001 ff29 	bl	80073c8 <HAL_RCC_GetHCLKFreq>
 8005576:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a1a      	ldr	r2, [pc, #104]	@ (80055e4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d804      	bhi.n	800558a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e022      	b.n	80055d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4a16      	ldr	r2, [pc, #88]	@ (80055e8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d204      	bcs.n	800559c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	e019      	b.n	80055d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4a13      	ldr	r2, [pc, #76]	@ (80055ec <HAL_ETH_SetMDIOClockRange+0x94>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d915      	bls.n	80055d0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a12      	ldr	r2, [pc, #72]	@ (80055f0 <HAL_ETH_SetMDIOClockRange+0x98>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d804      	bhi.n	80055b6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e00c      	b.n	80055d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a0e      	ldr	r2, [pc, #56]	@ (80055f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d804      	bhi.n	80055c8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e003      	b.n	80055d0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	02160ebf 	.word	0x02160ebf
 80055e8:	03938700 	.word	0x03938700
 80055ec:	05f5e0ff 	.word	0x05f5e0ff
 80055f0:	08f0d17f 	.word	0x08f0d17f
 80055f4:	0ee6b27f 	.word	0x0ee6b27f

080055f8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800560a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	791b      	ldrb	r3, [r3, #4]
 8005610:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	7b1b      	ldrb	r3, [r3, #12]
 8005618:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800561a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	7b5b      	ldrb	r3, [r3, #13]
 8005620:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	7b9b      	ldrb	r3, [r3, #14]
 8005628:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800562a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	7bdb      	ldrb	r3, [r3, #15]
 8005630:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005632:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	7c12      	ldrb	r2, [r2, #16]
 8005638:	2a00      	cmp	r2, #0
 800563a:	d102      	bne.n	8005642 <ETH_SetMACConfig+0x4a>
 800563c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005640:	e000      	b.n	8005644 <ETH_SetMACConfig+0x4c>
 8005642:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005644:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	7c52      	ldrb	r2, [r2, #17]
 800564a:	2a00      	cmp	r2, #0
 800564c:	d102      	bne.n	8005654 <ETH_SetMACConfig+0x5c>
 800564e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005652:	e000      	b.n	8005656 <ETH_SetMACConfig+0x5e>
 8005654:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	7c9b      	ldrb	r3, [r3, #18]
 800565c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800565e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005664:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800566a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	7f1b      	ldrb	r3, [r3, #28]
 8005670:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	7f5b      	ldrb	r3, [r3, #29]
 8005678:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800567a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	7f92      	ldrb	r2, [r2, #30]
 8005680:	2a00      	cmp	r2, #0
 8005682:	d102      	bne.n	800568a <ETH_SetMACConfig+0x92>
 8005684:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005688:	e000      	b.n	800568c <ETH_SetMACConfig+0x94>
 800568a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800568c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	7fdb      	ldrb	r3, [r3, #31]
 8005692:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005694:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	f892 2020 	ldrb.w	r2, [r2, #32]
 800569c:	2a00      	cmp	r2, #0
 800569e:	d102      	bne.n	80056a6 <ETH_SetMACConfig+0xae>
 80056a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056a4:	e000      	b.n	80056a8 <ETH_SetMACConfig+0xb0>
 80056a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056a8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056b6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80056b8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	4b56      	ldr	r3, [pc, #344]	@ (8005824 <ETH_SetMACConfig+0x22c>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	68f9      	ldr	r1, [r7, #12]
 80056d2:	430b      	orrs	r3, r1
 80056d4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056da:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056e2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80056e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056ec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80056ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056f6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80056f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005700:	2a00      	cmp	r2, #0
 8005702:	d102      	bne.n	800570a <ETH_SetMACConfig+0x112>
 8005704:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005708:	e000      	b.n	800570c <ETH_SetMACConfig+0x114>
 800570a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800570c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b42      	ldr	r3, [pc, #264]	@ (8005828 <ETH_SetMACConfig+0x230>)
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	430b      	orrs	r3, r1
 8005728:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005730:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	4b3a      	ldr	r3, [pc, #232]	@ (800582c <ETH_SetMACConfig+0x234>)
 8005742:	4013      	ands	r3, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6812      	ldr	r2, [r2, #0]
 8005748:	68f9      	ldr	r1, [r7, #12]
 800574a:	430b      	orrs	r3, r1
 800574c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005754:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800575a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005762:	2a00      	cmp	r2, #0
 8005764:	d101      	bne.n	800576a <ETH_SetMACConfig+0x172>
 8005766:	2280      	movs	r2, #128	@ 0x80
 8005768:	e000      	b.n	800576c <ETH_SetMACConfig+0x174>
 800576a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800576c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005772:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800577e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8005782:	4013      	ands	r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	430b      	orrs	r3, r1
 800578c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005794:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800579c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	f023 0103 	bic.w	r1, r3, #3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80057c2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80057de:	2a00      	cmp	r2, #0
 80057e0:	d101      	bne.n	80057e6 <ETH_SetMACConfig+0x1ee>
 80057e2:	2240      	movs	r2, #64	@ 0x40
 80057e4:	e000      	b.n	80057e8 <ETH_SetMACConfig+0x1f0>
 80057e6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80057e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80057f0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80057fa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005808:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	430a      	orrs	r2, r1
 8005814:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	00048083 	.word	0x00048083
 8005828:	c0f88000 	.word	0xc0f88000
 800582c:	fffffef0 	.word	0xfffffef0

08005830 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b38      	ldr	r3, [pc, #224]	@ (8005928 <ETH_SetDMAConfig+0xf8>)
 8005846:	4013      	ands	r3, r2
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	6811      	ldr	r1, [r2, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	430b      	orrs	r3, r1
 8005852:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005856:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005862:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	7b1b      	ldrb	r3, [r3, #12]
 8005868:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	4b2c      	ldr	r3, [pc, #176]	@ (800592c <ETH_SetDMAConfig+0xfc>)
 800587a:	4013      	ands	r3, r2
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	68f9      	ldr	r1, [r7, #12]
 8005882:	430b      	orrs	r3, r1
 8005884:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005888:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	7b5b      	ldrb	r3, [r3, #13]
 800588e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80058a4:	4b22      	ldr	r3, [pc, #136]	@ (8005930 <ETH_SetDMAConfig+0x100>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058b4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	7d1b      	ldrb	r3, [r3, #20]
 80058c0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80058c2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	7f5b      	ldrb	r3, [r3, #29]
 80058c8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80058da:	4b16      	ldr	r3, [pc, #88]	@ (8005934 <ETH_SetDMAConfig+0x104>)
 80058dc:	4013      	ands	r3, r2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	68f9      	ldr	r1, [r7, #12]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	7f1b      	ldrb	r3, [r3, #28]
 80058f2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005904:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005908:	4b0b      	ldr	r3, [pc, #44]	@ (8005938 <ETH_SetDMAConfig+0x108>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	430b      	orrs	r3, r1
 8005914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005918:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	ffff87fd 	.word	0xffff87fd
 800592c:	ffff2ffe 	.word	0xffff2ffe
 8005930:	fffec000 	.word	0xfffec000
 8005934:	ffc0efef 	.word	0xffc0efef
 8005938:	7fc0ffff 	.word	0x7fc0ffff

0800593c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b0a4      	sub	sp, #144	@ 0x90
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800594a:	2300      	movs	r3, #0
 800594c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005954:	2300      	movs	r3, #0
 8005956:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800597c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800597e:	2300      	movs	r3, #0
 8005980:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005984:	2300      	movs	r3, #0
 8005986:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005988:	2300      	movs	r3, #0
 800598a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800598e:	2300      	movs	r3, #0
 8005990:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005994:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005998:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80059a0:	2300      	movs	r3, #0
 80059a2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80059b6:	2300      	movs	r3, #0
 80059b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80059be:	2300      	movs	r3, #0
 80059c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80059d4:	2320      	movs	r3, #32
 80059d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80059e6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80059ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80059ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80059f0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80059f8:	2302      	movs	r3, #2
 80059fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a16:	2300      	movs	r3, #0
 8005a18:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a24:	4619      	mov	r1, r3
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fde6 	bl	80055f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a30:	2301      	movs	r3, #1
 8005a32:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a46:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a4a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a50:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a54:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005a5c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fee1 	bl	8005830 <ETH_SetDMAConfig>
}
 8005a6e:	bf00      	nop
 8005a70:	3790      	adds	r7, #144	@ 0x90
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e01d      	b.n	8005ac0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68d9      	ldr	r1, [r3, #12]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	3206      	adds	r2, #6
 8005ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d9de      	bls.n	8005a84 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ae8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005af8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005afc:	bf00      	nop
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e023      	b.n	8005b5e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6919      	ldr	r1, [r3, #16]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2200      	movs	r2, #0
 8005b32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	3212      	adds	r2, #18
 8005b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d9d8      	bls.n	8005b16 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b9e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	@ 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bd2:	4b89      	ldr	r3, [pc, #548]	@ (8005df8 <HAL_GPIO_Init+0x234>)
 8005bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bd6:	e194      	b.n	8005f02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	2101      	movs	r1, #1
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	4013      	ands	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8186 	beq.w	8005efc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d005      	beq.n	8005c08 <HAL_GPIO_Init+0x44>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d130      	bne.n	8005c6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	2203      	movs	r2, #3
 8005c14:	fa02 f303 	lsl.w	r3, r2, r3
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c3e:	2201      	movs	r2, #1
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43db      	mvns	r3, r3
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	f003 0201 	and.w	r2, r3, #1
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d017      	beq.n	8005ca6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	2203      	movs	r2, #3
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d123      	bne.n	8005cfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	08da      	lsrs	r2, r3, #3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3208      	adds	r2, #8
 8005cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	220f      	movs	r2, #15
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	08da      	lsrs	r2, r3, #3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3208      	adds	r2, #8
 8005cf4:	69b9      	ldr	r1, [r7, #24]
 8005cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	005b      	lsls	r3, r3, #1
 8005d04:	2203      	movs	r2, #3
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 0203 	and.w	r2, r3, #3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80e0 	beq.w	8005efc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005dfc <HAL_GPIO_Init+0x238>)
 8005d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d42:	4a2e      	ldr	r2, [pc, #184]	@ (8005dfc <HAL_GPIO_Init+0x238>)
 8005d44:	f043 0302 	orr.w	r3, r3, #2
 8005d48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dfc <HAL_GPIO_Init+0x238>)
 8005d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d5a:	4a29      	ldr	r2, [pc, #164]	@ (8005e00 <HAL_GPIO_Init+0x23c>)
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	089b      	lsrs	r3, r3, #2
 8005d60:	3302      	adds	r3, #2
 8005d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	220f      	movs	r2, #15
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a20      	ldr	r2, [pc, #128]	@ (8005e04 <HAL_GPIO_Init+0x240>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d052      	beq.n	8005e2c <HAL_GPIO_Init+0x268>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	@ (8005e08 <HAL_GPIO_Init+0x244>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d031      	beq.n	8005df2 <HAL_GPIO_Init+0x22e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a1e      	ldr	r2, [pc, #120]	@ (8005e0c <HAL_GPIO_Init+0x248>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d02b      	beq.n	8005dee <HAL_GPIO_Init+0x22a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1d      	ldr	r2, [pc, #116]	@ (8005e10 <HAL_GPIO_Init+0x24c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d025      	beq.n	8005dea <HAL_GPIO_Init+0x226>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e14 <HAL_GPIO_Init+0x250>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01f      	beq.n	8005de6 <HAL_GPIO_Init+0x222>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <HAL_GPIO_Init+0x254>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d019      	beq.n	8005de2 <HAL_GPIO_Init+0x21e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e1c <HAL_GPIO_Init+0x258>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_GPIO_Init+0x21a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a19      	ldr	r2, [pc, #100]	@ (8005e20 <HAL_GPIO_Init+0x25c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00d      	beq.n	8005dda <HAL_GPIO_Init+0x216>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a18      	ldr	r2, [pc, #96]	@ (8005e24 <HAL_GPIO_Init+0x260>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <HAL_GPIO_Init+0x212>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a17      	ldr	r2, [pc, #92]	@ (8005e28 <HAL_GPIO_Init+0x264>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_GPIO_Init+0x20e>
 8005dce:	2309      	movs	r3, #9
 8005dd0:	e02d      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005dd2:	230a      	movs	r3, #10
 8005dd4:	e02b      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	e029      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005dda:	2307      	movs	r3, #7
 8005ddc:	e027      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005dde:	2306      	movs	r3, #6
 8005de0:	e025      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005de2:	2305      	movs	r3, #5
 8005de4:	e023      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005de6:	2304      	movs	r3, #4
 8005de8:	e021      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005dea:	2303      	movs	r3, #3
 8005dec:	e01f      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e01d      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e01b      	b.n	8005e2e <HAL_GPIO_Init+0x26a>
 8005df6:	bf00      	nop
 8005df8:	58000080 	.word	0x58000080
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	58000400 	.word	0x58000400
 8005e04:	58020000 	.word	0x58020000
 8005e08:	58020400 	.word	0x58020400
 8005e0c:	58020800 	.word	0x58020800
 8005e10:	58020c00 	.word	0x58020c00
 8005e14:	58021000 	.word	0x58021000
 8005e18:	58021400 	.word	0x58021400
 8005e1c:	58021800 	.word	0x58021800
 8005e20:	58021c00 	.word	0x58021c00
 8005e24:	58022000 	.word	0x58022000
 8005e28:	58022400 	.word	0x58022400
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	f002 0203 	and.w	r2, r2, #3
 8005e34:	0092      	lsls	r2, r2, #2
 8005e36:	4093      	lsls	r3, r2
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e3e:	4938      	ldr	r1, [pc, #224]	@ (8005f20 <HAL_GPIO_Init+0x35c>)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	43db      	mvns	r3, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	43db      	mvns	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ea0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	3301      	adds	r3, #1
 8005f00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f47f ae63 	bne.w	8005bd8 <HAL_GPIO_Init+0x14>
  }
}
 8005f12:	bf00      	nop
 8005f14:	bf00      	nop
 8005f16:	3724      	adds	r7, #36	@ 0x24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	58000400 	.word	0x58000400

08005f24 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f2c:	4a08      	ldr	r2, [pc, #32]	@ (8005f50 <HAL_HSEM_FastTake+0x2c>)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3320      	adds	r3, #32
 8005f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f36:	4a07      	ldr	r2, [pc, #28]	@ (8005f54 <HAL_HSEM_FastTake+0x30>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	58026400 	.word	0x58026400
 8005f54:	80000300 	.word	0x80000300

08005f58 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f62:	4906      	ldr	r1, [pc, #24]	@ (8005f7c <HAL_HSEM_Release+0x24>)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	58026400 	.word	0x58026400

08005f80 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8005f88:	4b05      	ldr	r3, [pc, #20]	@ (8005fa0 <HAL_HSEM_ActivateNotification+0x20>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4904      	ldr	r1, [pc, #16]	@ (8005fa0 <HAL_HSEM_ActivateNotification+0x20>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]
#endif
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	58026500 	.word	0x58026500

08005fa4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005faa:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <HAL_HSEM_IRQHandler+0x30>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005fb0:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <HAL_HSEM_IRQHandler+0x30>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	4906      	ldr	r1, [pc, #24]	@ (8005fd4 <HAL_HSEM_IRQHandler+0x30>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005fbe:	4a05      	ldr	r2, [pc, #20]	@ (8005fd4 <HAL_HSEM_IRQHandler+0x30>)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f807 	bl	8005fd8 <HAL_HSEM_FreeCallback>
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	58026500 	.word	0x58026500

08005fd8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e041      	b.n	8006082 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006006:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006010:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6852      	ldr	r2, [r2, #4]
 800601a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6892      	ldr	r2, [r2, #8]
 8006024:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006026:	f7fc fa21 	bl	800246c <HAL_GetTick>
 800602a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800602c:	e00f      	b.n	800604e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800602e:	f7fc fa1d 	bl	800246c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b31      	cmp	r3, #49	@ 0x31
 800603a:	d908      	bls.n	800604e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e019      	b.n	8006082 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e8      	bne.n	800602e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	429a      	cmp	r2, r3
 8006068:	d005      	beq.n	8006076 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	611a      	str	r2, [r3, #16]
 8006074:	e004      	b.n	8006080 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800607e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800609a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af02      	add	r7, sp, #8
 80060b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0fe      	b.n	80062ba <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fc f8c5 	bl	8002260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2203      	movs	r2, #3
 80060da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f005 fc42 	bl	800b96c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6818      	ldr	r0, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	7c1a      	ldrb	r2, [r3, #16]
 80060f0:	f88d 2000 	strb.w	r2, [sp]
 80060f4:	3304      	adds	r3, #4
 80060f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060f8:	f005 fbc6 	bl	800b888 <USB_CoreInit>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0d5      	b.n	80062ba <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f005 fc3a 	bl	800b98e <USB_SetCurrentMode>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0c6      	b.n	80062ba <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	e04a      	b.n	80061c8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006132:	7bfa      	ldrb	r2, [r7, #15]
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	440b      	add	r3, r1
 8006140:	3315      	adds	r3, #21
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006146:	7bfa      	ldrb	r2, [r7, #15]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	3314      	adds	r3, #20
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	b298      	uxth	r0, r3
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	332e      	adds	r3, #46	@ 0x2e
 800616e:	4602      	mov	r2, r0
 8006170:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006172:	7bfa      	ldrb	r2, [r7, #15]
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3318      	adds	r3, #24
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006186:	7bfa      	ldrb	r2, [r7, #15]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	331c      	adds	r3, #28
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3320      	adds	r3, #32
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061ae:	7bfa      	ldrb	r2, [r7, #15]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	3324      	adds	r3, #36	@ 0x24
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	3301      	adds	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	791b      	ldrb	r3, [r3, #4]
 80061cc:	7bfa      	ldrb	r2, [r7, #15]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d3af      	bcc.n	8006132 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061d2:	2300      	movs	r3, #0
 80061d4:	73fb      	strb	r3, [r7, #15]
 80061d6:	e044      	b.n	8006262 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061d8:	7bfa      	ldrb	r2, [r7, #15]
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80061ea:	2200      	movs	r2, #0
 80061ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80061ee:	7bfa      	ldrb	r2, [r7, #15]
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006200:	7bfa      	ldrb	r2, [r7, #15]
 8006202:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006204:	7bfa      	ldrb	r2, [r7, #15]
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800621a:	7bfa      	ldrb	r2, [r7, #15]
 800621c:	6879      	ldr	r1, [r7, #4]
 800621e:	4613      	mov	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006230:	7bfa      	ldrb	r2, [r7, #15]
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006246:	7bfa      	ldrb	r2, [r7, #15]
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	3301      	adds	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	7bfa      	ldrb	r2, [r7, #15]
 8006268:	429a      	cmp	r2, r3
 800626a:	d3b5      	bcc.n	80061d8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7c1a      	ldrb	r2, [r3, #16]
 8006274:	f88d 2000 	strb.w	r2, [sp]
 8006278:	3304      	adds	r3, #4
 800627a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800627c:	f005 fbd4 	bl	800ba28 <USB_DevInit>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e013      	b.n	80062ba <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7b1b      	ldrb	r3, [r3, #12]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f80b 	bl	80062c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f005 fd8f 	bl	800bdd6 <USB_DevDisconnect>

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f2:	4b05      	ldr	r3, [pc, #20]	@ (8006308 <HAL_PCDEx_ActivateLPM+0x44>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	10000003 	.word	0x10000003

0800630c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006314:	4b29      	ldr	r3, [pc, #164]	@ (80063bc <HAL_PWREx_ConfigSupply+0xb0>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b06      	cmp	r3, #6
 800631e:	d00a      	beq.n	8006336 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006320:	4b26      	ldr	r3, [pc, #152]	@ (80063bc <HAL_PWREx_ConfigSupply+0xb0>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d001      	beq.n	8006332 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e040      	b.n	80063b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	e03e      	b.n	80063b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006336:	4b21      	ldr	r3, [pc, #132]	@ (80063bc <HAL_PWREx_ConfigSupply+0xb0>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800633e:	491f      	ldr	r1, [pc, #124]	@ (80063bc <HAL_PWREx_ConfigSupply+0xb0>)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4313      	orrs	r3, r2
 8006344:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006346:	f7fc f891 	bl	800246c <HAL_GetTick>
 800634a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800634c:	e009      	b.n	8006362 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800634e:	f7fc f88d 	bl	800246c <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800635c:	d901      	bls.n	8006362 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e028      	b.n	80063b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006362:	4b16      	ldr	r3, [pc, #88]	@ (80063bc <HAL_PWREx_ConfigSupply+0xb0>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636e:	d1ee      	bne.n	800634e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b1e      	cmp	r3, #30
 8006374:	d008      	beq.n	8006388 <HAL_PWREx_ConfigSupply+0x7c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b2e      	cmp	r3, #46	@ 0x2e
 800637a:	d005      	beq.n	8006388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b1d      	cmp	r3, #29
 8006380:	d002      	beq.n	8006388 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b2d      	cmp	r3, #45	@ 0x2d
 8006386:	d114      	bne.n	80063b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006388:	f7fc f870 	bl	800246c <HAL_GetTick>
 800638c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800638e:	e009      	b.n	80063a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006390:	f7fc f86c 	bl	800246c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800639e:	d901      	bls.n	80063a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e007      	b.n	80063b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063a4:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <HAL_PWREx_ConfigSupply+0xb0>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b0:	d1ee      	bne.n	8006390 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	58024800 	.word	0x58024800

080063c0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063c4:	4b05      	ldr	r3, [pc, #20]	@ (80063dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4a04      	ldr	r2, [pc, #16]	@ (80063dc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ce:	60d3      	str	r3, [r2, #12]
}
 80063d0:	bf00      	nop
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	58024800 	.word	0x58024800

080063e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08c      	sub	sp, #48	@ 0x30
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f000 bc48 	b.w	8006c84 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8088 	beq.w	8006512 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006402:	4b99      	ldr	r3, [pc, #612]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800640a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800640c:	4b96      	ldr	r3, [pc, #600]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006414:	2b10      	cmp	r3, #16
 8006416:	d007      	beq.n	8006428 <HAL_RCC_OscConfig+0x48>
 8006418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800641a:	2b18      	cmp	r3, #24
 800641c:	d111      	bne.n	8006442 <HAL_RCC_OscConfig+0x62>
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d10c      	bne.n	8006442 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006428:	4b8f      	ldr	r3, [pc, #572]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d06d      	beq.n	8006510 <HAL_RCC_OscConfig+0x130>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d169      	bne.n	8006510 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f000 bc21 	b.w	8006c84 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800644a:	d106      	bne.n	800645a <HAL_RCC_OscConfig+0x7a>
 800644c:	4b86      	ldr	r3, [pc, #536]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a85      	ldr	r2, [pc, #532]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e02e      	b.n	80064b8 <HAL_RCC_OscConfig+0xd8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10c      	bne.n	800647c <HAL_RCC_OscConfig+0x9c>
 8006462:	4b81      	ldr	r3, [pc, #516]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a80      	ldr	r2, [pc, #512]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4b7e      	ldr	r3, [pc, #504]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a7d      	ldr	r2, [pc, #500]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e01d      	b.n	80064b8 <HAL_RCC_OscConfig+0xd8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0xc0>
 8006486:	4b78      	ldr	r3, [pc, #480]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a77      	ldr	r2, [pc, #476]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800648c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b75      	ldr	r3, [pc, #468]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a74      	ldr	r2, [pc, #464]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0xd8>
 80064a0:	4b71      	ldr	r3, [pc, #452]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a70      	ldr	r2, [pc, #448]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b6e      	ldr	r3, [pc, #440]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a6d      	ldr	r2, [pc, #436]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80064b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c0:	f7fb ffd4 	bl	800246c <HAL_GetTick>
 80064c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c8:	f7fb ffd0 	bl	800246c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	@ 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e3d4      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064da:	4b63      	ldr	r3, [pc, #396]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0xe8>
 80064e6:	e014      	b.n	8006512 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fb ffc0 	bl	800246c <HAL_GetTick>
 80064ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fb ffbc 	bl	800246c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	@ 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e3c0      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006502:	4b59      	ldr	r3, [pc, #356]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x110>
 800650e:	e000      	b.n	8006512 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 80ca 	beq.w	80066b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006520:	4b51      	ldr	r3, [pc, #324]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006528:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800652a:	4b4f      	ldr	r3, [pc, #316]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800652c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <HAL_RCC_OscConfig+0x166>
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	2b18      	cmp	r3, #24
 800653a:	d156      	bne.n	80065ea <HAL_RCC_OscConfig+0x20a>
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d151      	bne.n	80065ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006546:	4b48      	ldr	r3, [pc, #288]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_RCC_OscConfig+0x17e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e392      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800655e:	4b42      	ldr	r3, [pc, #264]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 0219 	bic.w	r2, r3, #25
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	493f      	ldr	r1, [pc, #252]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800656c:	4313      	orrs	r3, r2
 800656e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006570:	f7fb ff7c 	bl	800246c <HAL_GetTick>
 8006574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006576:	e008      	b.n	800658a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006578:	f7fb ff78 	bl	800246c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	2b02      	cmp	r3, #2
 8006584:	d901      	bls.n	800658a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e37c      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800658a:	4b37      	ldr	r3, [pc, #220]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d0f0      	beq.n	8006578 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	f7fb ff99 	bl	80024cc <HAL_GetREVID>
 800659a:	4603      	mov	r3, r0
 800659c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d817      	bhi.n	80065d4 <HAL_RCC_OscConfig+0x1f4>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d108      	bne.n	80065be <HAL_RCC_OscConfig+0x1de>
 80065ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065bc:	e07a      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	031b      	lsls	r3, r3, #12
 80065cc:	4926      	ldr	r1, [pc, #152]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d2:	e06f      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d4:	4b24      	ldr	r3, [pc, #144]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	061b      	lsls	r3, r3, #24
 80065e2:	4921      	ldr	r1, [pc, #132]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065e8:	e064      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d047      	beq.n	8006682 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 0219 	bic.w	r2, r3, #25
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	491a      	ldr	r1, [pc, #104]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006600:	4313      	orrs	r3, r2
 8006602:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006604:	f7fb ff32 	bl	800246c <HAL_GetTick>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660c:	f7fb ff2e 	bl	800246c <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e332      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800661e:	4b12      	ldr	r3, [pc, #72]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0304 	and.w	r3, r3, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f0      	beq.n	800660c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800662a:	f7fb ff4f 	bl	80024cc <HAL_GetREVID>
 800662e:	4603      	mov	r3, r0
 8006630:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006634:	4293      	cmp	r3, r2
 8006636:	d819      	bhi.n	800666c <HAL_RCC_OscConfig+0x28c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b40      	cmp	r3, #64	@ 0x40
 800663e:	d108      	bne.n	8006652 <HAL_RCC_OscConfig+0x272>
 8006640:	4b09      	ldr	r3, [pc, #36]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006648:	4a07      	ldr	r2, [pc, #28]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 800664a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800664e:	6053      	str	r3, [r2, #4]
 8006650:	e030      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d4>
 8006652:	4b05      	ldr	r3, [pc, #20]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	031b      	lsls	r3, r3, #12
 8006660:	4901      	ldr	r1, [pc, #4]	@ (8006668 <HAL_RCC_OscConfig+0x288>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
 8006666:	e025      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d4>
 8006668:	58024400 	.word	0x58024400
 800666c:	4b9a      	ldr	r3, [pc, #616]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	4997      	ldr	r1, [pc, #604]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800667c:	4313      	orrs	r3, r2
 800667e:	604b      	str	r3, [r1, #4]
 8006680:	e018      	b.n	80066b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006682:	4b95      	ldr	r3, [pc, #596]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a94      	ldr	r2, [pc, #592]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668e:	f7fb feed 	bl	800246c <HAL_GetTick>
 8006692:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006696:	f7fb fee9 	bl	800246c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e2ed      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066a8:	4b8b      	ldr	r3, [pc, #556]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80a9 	beq.w	8006814 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c2:	4b85      	ldr	r3, [pc, #532]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066cc:	4b82      	ldr	r3, [pc, #520]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80066ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d007      	beq.n	80066e8 <HAL_RCC_OscConfig+0x308>
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b18      	cmp	r3, #24
 80066dc:	d13a      	bne.n	8006754 <HAL_RCC_OscConfig+0x374>
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d135      	bne.n	8006754 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066e8:	4b7b      	ldr	r3, [pc, #492]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCC_OscConfig+0x320>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	2b80      	cmp	r3, #128	@ 0x80
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e2c1      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006700:	f7fb fee4 	bl	80024cc <HAL_GetREVID>
 8006704:	4603      	mov	r3, r0
 8006706:	f241 0203 	movw	r2, #4099	@ 0x1003
 800670a:	4293      	cmp	r3, r2
 800670c:	d817      	bhi.n	800673e <HAL_RCC_OscConfig+0x35e>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	2b20      	cmp	r3, #32
 8006714:	d108      	bne.n	8006728 <HAL_RCC_OscConfig+0x348>
 8006716:	4b70      	ldr	r3, [pc, #448]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800671e:	4a6e      	ldr	r2, [pc, #440]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006720:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006724:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006726:	e075      	b.n	8006814 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006728:	4b6b      	ldr	r3, [pc, #428]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	069b      	lsls	r3, r3, #26
 8006736:	4968      	ldr	r1, [pc, #416]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800673c:	e06a      	b.n	8006814 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800673e:	4b66      	ldr	r3, [pc, #408]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	061b      	lsls	r3, r3, #24
 800674c:	4962      	ldr	r1, [pc, #392]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800674e:	4313      	orrs	r3, r2
 8006750:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006752:	e05f      	b.n	8006814 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d042      	beq.n	80067e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800675c:	4b5e      	ldr	r3, [pc, #376]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a5d      	ldr	r2, [pc, #372]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fb fe80 	bl	800246c <HAL_GetTick>
 800676c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006770:	f7fb fe7c 	bl	800246c <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e280      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006782:	4b55      	ldr	r3, [pc, #340]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0f0      	beq.n	8006770 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800678e:	f7fb fe9d 	bl	80024cc <HAL_GetREVID>
 8006792:	4603      	mov	r3, r0
 8006794:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006798:	4293      	cmp	r3, r2
 800679a:	d817      	bhi.n	80067cc <HAL_RCC_OscConfig+0x3ec>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d108      	bne.n	80067b6 <HAL_RCC_OscConfig+0x3d6>
 80067a4:	4b4c      	ldr	r3, [pc, #304]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067ac:	4a4a      	ldr	r2, [pc, #296]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067b2:	6053      	str	r3, [r2, #4]
 80067b4:	e02e      	b.n	8006814 <HAL_RCC_OscConfig+0x434>
 80067b6:	4b48      	ldr	r3, [pc, #288]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	069b      	lsls	r3, r3, #26
 80067c4:	4944      	ldr	r1, [pc, #272]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	604b      	str	r3, [r1, #4]
 80067ca:	e023      	b.n	8006814 <HAL_RCC_OscConfig+0x434>
 80067cc:	4b42      	ldr	r3, [pc, #264]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	061b      	lsls	r3, r3, #24
 80067da:	493f      	ldr	r1, [pc, #252]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	60cb      	str	r3, [r1, #12]
 80067e0:	e018      	b.n	8006814 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067e2:	4b3d      	ldr	r3, [pc, #244]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a3c      	ldr	r2, [pc, #240]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fb fe3d 	bl	800246c <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80067f6:	f7fb fe39 	bl	800246c <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e23d      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006808:	4b33      	ldr	r3, [pc, #204]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f0      	bne.n	80067f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d036      	beq.n	800688e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d019      	beq.n	800685c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006828:	4b2b      	ldr	r3, [pc, #172]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800682a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682c:	4a2a      	ldr	r2, [pc, #168]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006834:	f7fb fe1a 	bl	800246c <HAL_GetTick>
 8006838:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800683c:	f7fb fe16 	bl	800246c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e21a      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800684e:	4b22      	ldr	r3, [pc, #136]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0f0      	beq.n	800683c <HAL_RCC_OscConfig+0x45c>
 800685a:	e018      	b.n	800688e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800685c:	4b1e      	ldr	r3, [pc, #120]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 800685e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006860:	4a1d      	ldr	r2, [pc, #116]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006862:	f023 0301 	bic.w	r3, r3, #1
 8006866:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006868:	f7fb fe00 	bl	800246c <HAL_GetTick>
 800686c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006870:	f7fb fdfc 	bl	800246c <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e200      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006882:	4b15      	ldr	r3, [pc, #84]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 8006884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f0      	bne.n	8006870 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d039      	beq.n	800690e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01c      	beq.n	80068dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068a2:	4b0d      	ldr	r3, [pc, #52]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a0c      	ldr	r2, [pc, #48]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068ae:	f7fb fddd 	bl	800246c <HAL_GetTick>
 80068b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068b6:	f7fb fdd9 	bl	800246c <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e1dd      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068c8:	4b03      	ldr	r3, [pc, #12]	@ (80068d8 <HAL_RCC_OscConfig+0x4f8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0f0      	beq.n	80068b6 <HAL_RCC_OscConfig+0x4d6>
 80068d4:	e01b      	b.n	800690e <HAL_RCC_OscConfig+0x52e>
 80068d6:	bf00      	nop
 80068d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068dc:	4b9b      	ldr	r3, [pc, #620]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a9a      	ldr	r2, [pc, #616]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80068e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068e8:	f7fb fdc0 	bl	800246c <HAL_GetTick>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068ee:	e008      	b.n	8006902 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068f0:	f7fb fdbc 	bl	800246c <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d901      	bls.n	8006902 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e1c0      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006902:	4b92      	ldr	r3, [pc, #584]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f0      	bne.n	80068f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8081 	beq.w	8006a1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800691c:	4b8c      	ldr	r3, [pc, #560]	@ (8006b50 <HAL_RCC_OscConfig+0x770>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a8b      	ldr	r2, [pc, #556]	@ (8006b50 <HAL_RCC_OscConfig+0x770>)
 8006922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006928:	f7fb fda0 	bl	800246c <HAL_GetTick>
 800692c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006930:	f7fb fd9c 	bl	800246c <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b64      	cmp	r3, #100	@ 0x64
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e1a0      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006942:	4b83      	ldr	r3, [pc, #524]	@ (8006b50 <HAL_RCC_OscConfig+0x770>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f0      	beq.n	8006930 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d106      	bne.n	8006964 <HAL_RCC_OscConfig+0x584>
 8006956:	4b7d      	ldr	r3, [pc, #500]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 800695c:	f043 0301 	orr.w	r3, r3, #1
 8006960:	6713      	str	r3, [r2, #112]	@ 0x70
 8006962:	e02d      	b.n	80069c0 <HAL_RCC_OscConfig+0x5e0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10c      	bne.n	8006986 <HAL_RCC_OscConfig+0x5a6>
 800696c:	4b77      	ldr	r3, [pc, #476]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 800696e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006970:	4a76      	ldr	r2, [pc, #472]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006972:	f023 0301 	bic.w	r3, r3, #1
 8006976:	6713      	str	r3, [r2, #112]	@ 0x70
 8006978:	4b74      	ldr	r3, [pc, #464]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	4a73      	ldr	r2, [pc, #460]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 800697e:	f023 0304 	bic.w	r3, r3, #4
 8006982:	6713      	str	r3, [r2, #112]	@ 0x70
 8006984:	e01c      	b.n	80069c0 <HAL_RCC_OscConfig+0x5e0>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b05      	cmp	r3, #5
 800698c:	d10c      	bne.n	80069a8 <HAL_RCC_OscConfig+0x5c8>
 800698e:	4b6f      	ldr	r3, [pc, #444]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006992:	4a6e      	ldr	r2, [pc, #440]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006994:	f043 0304 	orr.w	r3, r3, #4
 8006998:	6713      	str	r3, [r2, #112]	@ 0x70
 800699a:	4b6c      	ldr	r3, [pc, #432]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	4a6b      	ldr	r2, [pc, #428]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a6:	e00b      	b.n	80069c0 <HAL_RCC_OscConfig+0x5e0>
 80069a8:	4b68      	ldr	r3, [pc, #416]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80069aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ac:	4a67      	ldr	r2, [pc, #412]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b4:	4b65      	ldr	r3, [pc, #404]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b8:	4a64      	ldr	r2, [pc, #400]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80069ba:	f023 0304 	bic.w	r3, r3, #4
 80069be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d015      	beq.n	80069f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c8:	f7fb fd50 	bl	800246c <HAL_GetTick>
 80069cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069ce:	e00a      	b.n	80069e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d0:	f7fb fd4c 	bl	800246c <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069de:	4293      	cmp	r3, r2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e14e      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069e6:	4b59      	ldr	r3, [pc, #356]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 80069e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d0ee      	beq.n	80069d0 <HAL_RCC_OscConfig+0x5f0>
 80069f2:	e014      	b.n	8006a1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fb fd3a 	bl	800246c <HAL_GetTick>
 80069f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fb fd36 	bl	800246c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e138      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a12:	4b4e      	ldr	r3, [pc, #312]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1ee      	bne.n	80069fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 812d 	beq.w	8006c82 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a28:	4b48      	ldr	r3, [pc, #288]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a30:	2b18      	cmp	r3, #24
 8006a32:	f000 80bd 	beq.w	8006bb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	f040 809e 	bne.w	8006b7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a40:	4b42      	ldr	r3, [pc, #264]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a41      	ldr	r2, [pc, #260]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4c:	f7fb fd0e 	bl	800246c <HAL_GetTick>
 8006a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a52:	e008      	b.n	8006a66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a54:	f7fb fd0a 	bl	800246c <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d901      	bls.n	8006a66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e10e      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a66:	4b39      	ldr	r3, [pc, #228]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f0      	bne.n	8006a54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a72:	4b36      	ldr	r3, [pc, #216]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a76:	4b37      	ldr	r3, [pc, #220]	@ (8006b54 <HAL_RCC_OscConfig+0x774>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a82:	0112      	lsls	r2, r2, #4
 8006a84:	430a      	orrs	r2, r1
 8006a86:	4931      	ldr	r1, [pc, #196]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a90:	3b01      	subs	r3, #1
 8006a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	025b      	lsls	r3, r3, #9
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	061b      	lsls	r3, r3, #24
 8006ab8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006abc:	4923      	ldr	r1, [pc, #140]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ac2:	4b22      	ldr	r3, [pc, #136]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	4a21      	ldr	r2, [pc, #132]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006ac8:	f023 0301 	bic.w	r3, r3, #1
 8006acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006ace:	4b1f      	ldr	r3, [pc, #124]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad2:	4b21      	ldr	r3, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x778>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006ada:	00d2      	lsls	r2, r2, #3
 8006adc:	491b      	ldr	r1, [pc, #108]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	f023 020c 	bic.w	r2, r3, #12
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	4917      	ldr	r1, [pc, #92]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006af4:	4b15      	ldr	r3, [pc, #84]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	f023 0202 	bic.w	r2, r3, #2
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b00:	4912      	ldr	r1, [pc, #72]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b06:	4b11      	ldr	r3, [pc, #68]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	4a10      	ldr	r2, [pc, #64]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b12:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	4a0d      	ldr	r2, [pc, #52]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a0a      	ldr	r2, [pc, #40]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b2a:	4b08      	ldr	r3, [pc, #32]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	4a07      	ldr	r2, [pc, #28]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b36:	4b05      	ldr	r3, [pc, #20]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a04      	ldr	r2, [pc, #16]	@ (8006b4c <HAL_RCC_OscConfig+0x76c>)
 8006b3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fb fc93 	bl	800246c <HAL_GetTick>
 8006b46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b48:	e011      	b.n	8006b6e <HAL_RCC_OscConfig+0x78e>
 8006b4a:	bf00      	nop
 8006b4c:	58024400 	.word	0x58024400
 8006b50:	58024800 	.word	0x58024800
 8006b54:	fffffc0c 	.word	0xfffffc0c
 8006b58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5c:	f7fb fc86 	bl	800246c <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e08a      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b6e:	4b47      	ldr	r3, [pc, #284]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d0f0      	beq.n	8006b5c <HAL_RCC_OscConfig+0x77c>
 8006b7a:	e082      	b.n	8006c82 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b7c:	4b43      	ldr	r3, [pc, #268]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a42      	ldr	r2, [pc, #264]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b88:	f7fb fc70 	bl	800246c <HAL_GetTick>
 8006b8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b90:	f7fb fc6c 	bl	800246c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e070      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0x7b0>
 8006bae:	e068      	b.n	8006c82 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bb0:	4b36      	ldr	r3, [pc, #216]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bb6:	4b35      	ldr	r3, [pc, #212]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d031      	beq.n	8006c28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f003 0203 	and.w	r2, r3, #3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d12a      	bne.n	8006c28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	091b      	lsrs	r3, r3, #4
 8006bd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d122      	bne.n	8006c28 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d11a      	bne.n	8006c28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	0a5b      	lsrs	r3, r3, #9
 8006bf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d111      	bne.n	8006c28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	0c1b      	lsrs	r3, r3, #16
 8006c08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d108      	bne.n	8006c28 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	0e1b      	lsrs	r3, r3, #24
 8006c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c22:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e02b      	b.n	8006c84 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c2c:	4b17      	ldr	r3, [pc, #92]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c30:	08db      	lsrs	r3, r3, #3
 8006c32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c36:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d01f      	beq.n	8006c82 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c42:	4b12      	ldr	r3, [pc, #72]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c46:	4a11      	ldr	r2, [pc, #68]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c4e:	f7fb fc0d 	bl	800246c <HAL_GetTick>
 8006c52:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c54:	bf00      	nop
 8006c56:	f7fb fc09 	bl	800246c <HAL_GetTick>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d0f9      	beq.n	8006c56 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c62:	4b0a      	ldr	r3, [pc, #40]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c66:	4b0a      	ldr	r3, [pc, #40]	@ (8006c90 <HAL_RCC_OscConfig+0x8b0>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c6e:	00d2      	lsls	r2, r2, #3
 8006c70:	4906      	ldr	r1, [pc, #24]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c76:	4b05      	ldr	r3, [pc, #20]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	4a04      	ldr	r2, [pc, #16]	@ (8006c8c <HAL_RCC_OscConfig+0x8ac>)
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3730      	adds	r7, #48	@ 0x30
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	ffff0007 	.word	0xffff0007

08006c94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e19c      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca8:	4b8a      	ldr	r3, [pc, #552]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 030f 	and.w	r3, r3, #15
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d910      	bls.n	8006cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb6:	4b87      	ldr	r3, [pc, #540]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f023 020f 	bic.w	r2, r3, #15
 8006cbe:	4985      	ldr	r1, [pc, #532]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc6:	4b83      	ldr	r3, [pc, #524]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 030f 	and.w	r3, r3, #15
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e184      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d010      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	4b7b      	ldr	r3, [pc, #492]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d908      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cf4:	4b78      	ldr	r3, [pc, #480]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	4975      	ldr	r1, [pc, #468]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d010      	beq.n	8006d34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	4b70      	ldr	r3, [pc, #448]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d908      	bls.n	8006d34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d22:	4b6d      	ldr	r3, [pc, #436]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	496a      	ldr	r1, [pc, #424]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d010      	beq.n	8006d62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699a      	ldr	r2, [r3, #24]
 8006d44:	4b64      	ldr	r3, [pc, #400]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d908      	bls.n	8006d62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d50:	4b61      	ldr	r3, [pc, #388]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	495e      	ldr	r1, [pc, #376]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d010      	beq.n	8006d90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69da      	ldr	r2, [r3, #28]
 8006d72:	4b59      	ldr	r3, [pc, #356]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d908      	bls.n	8006d90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d7e:	4b56      	ldr	r3, [pc, #344]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	4953      	ldr	r1, [pc, #332]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d010      	beq.n	8006dbe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d908      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dac:	4b4a      	ldr	r3, [pc, #296]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	f023 020f 	bic.w	r2, r3, #15
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4947      	ldr	r1, [pc, #284]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d055      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dca:	4b43      	ldr	r3, [pc, #268]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	4940      	ldr	r1, [pc, #256]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d107      	bne.n	8006df4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006de4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d121      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e0f6      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d107      	bne.n	8006e0c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006dfc:	4b36      	ldr	r3, [pc, #216]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d115      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e0ea      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d107      	bne.n	8006e24 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e14:	4b30      	ldr	r3, [pc, #192]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0de      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e24:	4b2c      	ldr	r3, [pc, #176]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0d6      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e34:	4b28      	ldr	r3, [pc, #160]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	f023 0207 	bic.w	r2, r3, #7
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	4925      	ldr	r1, [pc, #148]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e42:	4313      	orrs	r3, r2
 8006e44:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e46:	f7fb fb11 	bl	800246c <HAL_GetTick>
 8006e4a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4c:	e00a      	b.n	8006e64 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e4e:	f7fb fb0d 	bl	800246c <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e0be      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e64:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d1eb      	bne.n	8006e4e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d010      	beq.n	8006ea4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	4b14      	ldr	r3, [pc, #80]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d208      	bcs.n	8006ea4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e92:	4b11      	ldr	r3, [pc, #68]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	f023 020f 	bic.w	r2, r3, #15
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	490e      	ldr	r1, [pc, #56]	@ (8006ed8 <HAL_RCC_ClockConfig+0x244>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d214      	bcs.n	8006edc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb2:	4b08      	ldr	r3, [pc, #32]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f023 020f 	bic.w	r2, r3, #15
 8006eba:	4906      	ldr	r1, [pc, #24]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec2:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <HAL_RCC_ClockConfig+0x240>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d005      	beq.n	8006edc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e086      	b.n	8006fe2 <HAL_RCC_ClockConfig+0x34e>
 8006ed4:	52002000 	.word	0x52002000
 8006ed8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d010      	beq.n	8006f0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	4b3f      	ldr	r3, [pc, #252]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d208      	bcs.n	8006f0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	4939      	ldr	r1, [pc, #228]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d010      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695a      	ldr	r2, [r3, #20]
 8006f1a:	4b34      	ldr	r3, [pc, #208]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d208      	bcs.n	8006f38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f26:	4b31      	ldr	r3, [pc, #196]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	492e      	ldr	r1, [pc, #184]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d010      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	4b28      	ldr	r3, [pc, #160]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d208      	bcs.n	8006f66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f54:	4b25      	ldr	r3, [pc, #148]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	4922      	ldr	r1, [pc, #136]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d010      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69da      	ldr	r2, [r3, #28]
 8006f76:	4b1d      	ldr	r3, [pc, #116]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d208      	bcs.n	8006f94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f82:	4b1a      	ldr	r3, [pc, #104]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	4917      	ldr	r1, [pc, #92]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f94:	f000 f89e 	bl	80070d4 <HAL_RCC_GetSysClockFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b14      	ldr	r3, [pc, #80]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	4912      	ldr	r1, [pc, #72]	@ (8006ff0 <HAL_RCC_ClockConfig+0x35c>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006fec <HAL_RCC_ClockConfig+0x358>)
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	4a0d      	ldr	r2, [pc, #52]	@ (8006ff0 <HAL_RCC_ClockConfig+0x35c>)
 8006fbc:	5cd3      	ldrb	r3, [r2, r3]
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff4 <HAL_RCC_ClockConfig+0x360>)
 8006fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff8 <HAL_RCC_ClockConfig+0x364>)
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <HAL_RCC_ClockConfig+0x368>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fa fe78 	bl	8001ccc <HAL_InitTick>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3718      	adds	r7, #24
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	0801dd48 	.word	0x0801dd48
 8006ff4:	24000004 	.word	0x24000004
 8006ff8:	24000000 	.word	0x24000000
 8006ffc:	2400000c 	.word	0x2400000c

08007000 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	@ 0x30
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d12a      	bne.n	8007068 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007012:	4b2d      	ldr	r3, [pc, #180]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 8007014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007018:	4a2b      	ldr	r2, [pc, #172]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007022:	4b29      	ldr	r3, [pc, #164]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 8007024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	61bb      	str	r3, [r7, #24]
 800702e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007036:	2302      	movs	r3, #2
 8007038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703a:	2303      	movs	r3, #3
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703e:	2300      	movs	r3, #0
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007042:	2300      	movs	r3, #0
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007046:	f107 031c 	add.w	r3, r7, #28
 800704a:	4619      	mov	r1, r3
 800704c:	481f      	ldr	r0, [pc, #124]	@ (80070cc <HAL_RCC_MCOConfig+0xcc>)
 800704e:	f7fe fdb9 	bl	8005bc4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007052:	4b1d      	ldr	r3, [pc, #116]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	430b      	orrs	r3, r1
 8007060:	4919      	ldr	r1, [pc, #100]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 8007062:	4313      	orrs	r3, r2
 8007064:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007066:	e02a      	b.n	80070be <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007068:	4b17      	ldr	r3, [pc, #92]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 800706a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800706e:	4a16      	ldr	r2, [pc, #88]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 8007070:	f043 0304 	orr.w	r3, r3, #4
 8007074:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007078:	4b13      	ldr	r3, [pc, #76]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 800707a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800708a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800708c:	2302      	movs	r3, #2
 800708e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007090:	2303      	movs	r3, #3
 8007092:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007094:	2300      	movs	r3, #0
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007098:	2300      	movs	r3, #0
 800709a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800709c:	f107 031c 	add.w	r3, r7, #28
 80070a0:	4619      	mov	r1, r3
 80070a2:	480b      	ldr	r0, [pc, #44]	@ (80070d0 <HAL_RCC_MCOConfig+0xd0>)
 80070a4:	f7fe fd8e 	bl	8005bc4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80070a8:	4b07      	ldr	r3, [pc, #28]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	01d9      	lsls	r1, r3, #7
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	430b      	orrs	r3, r1
 80070b8:	4903      	ldr	r1, [pc, #12]	@ (80070c8 <HAL_RCC_MCOConfig+0xc8>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]
}
 80070be:	bf00      	nop
 80070c0:	3730      	adds	r7, #48	@ 0x30
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	58024400 	.word	0x58024400
 80070cc:	58020000 	.word	0x58020000
 80070d0:	58020800 	.word	0x58020800

080070d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b089      	sub	sp, #36	@ 0x24
 80070d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070da:	4bb3      	ldr	r3, [pc, #716]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070e2:	2b18      	cmp	r3, #24
 80070e4:	f200 8155 	bhi.w	8007392 <HAL_RCC_GetSysClockFreq+0x2be>
 80070e8:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007393 	.word	0x08007393
 80070f8:	08007393 	.word	0x08007393
 80070fc:	08007393 	.word	0x08007393
 8007100:	08007393 	.word	0x08007393
 8007104:	08007393 	.word	0x08007393
 8007108:	08007393 	.word	0x08007393
 800710c:	08007393 	.word	0x08007393
 8007110:	0800717b 	.word	0x0800717b
 8007114:	08007393 	.word	0x08007393
 8007118:	08007393 	.word	0x08007393
 800711c:	08007393 	.word	0x08007393
 8007120:	08007393 	.word	0x08007393
 8007124:	08007393 	.word	0x08007393
 8007128:	08007393 	.word	0x08007393
 800712c:	08007393 	.word	0x08007393
 8007130:	08007181 	.word	0x08007181
 8007134:	08007393 	.word	0x08007393
 8007138:	08007393 	.word	0x08007393
 800713c:	08007393 	.word	0x08007393
 8007140:	08007393 	.word	0x08007393
 8007144:	08007393 	.word	0x08007393
 8007148:	08007393 	.word	0x08007393
 800714c:	08007393 	.word	0x08007393
 8007150:	08007187 	.word	0x08007187
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007154:	4b94      	ldr	r3, [pc, #592]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007160:	4b91      	ldr	r3, [pc, #580]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	08db      	lsrs	r3, r3, #3
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	4a90      	ldr	r2, [pc, #576]	@ (80073ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
 8007170:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007172:	e111      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007174:	4b8d      	ldr	r3, [pc, #564]	@ (80073ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007176:	61bb      	str	r3, [r7, #24]
      break;
 8007178:	e10e      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800717a:	4b8d      	ldr	r3, [pc, #564]	@ (80073b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800717c:	61bb      	str	r3, [r7, #24]
      break;
 800717e:	e10b      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007180:	4b8c      	ldr	r3, [pc, #560]	@ (80073b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007182:	61bb      	str	r3, [r7, #24]
      break;
 8007184:	e108      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007186:	4b88      	ldr	r3, [pc, #544]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007190:	4b85      	ldr	r3, [pc, #532]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800719a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800719c:	4b82      	ldr	r3, [pc, #520]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80071a6:	4b80      	ldr	r3, [pc, #512]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071aa:	08db      	lsrs	r3, r3, #3
 80071ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80e1 	beq.w	800738c <HAL_RCC_GetSysClockFreq+0x2b8>
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	f000 8083 	beq.w	80072d8 <HAL_RCC_GetSysClockFreq+0x204>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	f200 80a1 	bhi.w	800731c <HAL_RCC_GetSysClockFreq+0x248>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d003      	beq.n	80071e8 <HAL_RCC_GetSysClockFreq+0x114>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d056      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x1c0>
 80071e6:	e099      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071e8:	4b6f      	ldr	r3, [pc, #444]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d02d      	beq.n	8007250 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071f4:	4b6c      	ldr	r3, [pc, #432]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	08db      	lsrs	r3, r3, #3
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	4a6b      	ldr	r2, [pc, #428]	@ (80073ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
 8007204:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721e:	4b62      	ldr	r3, [pc, #392]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007232:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800724e:	e087      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	ee07 3a90 	vmov	s15, r3
 8007256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80073bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b51      	ldr	r3, [pc, #324]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a02 	vldr	s12, [r7, #8]
 8007276:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007292:	e065      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80073c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b40      	ldr	r3, [pc, #256]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072d6:	e043      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b2f      	ldr	r3, [pc, #188]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80072fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800731a:	e021      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80073c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b1e      	ldr	r3, [pc, #120]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007342:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80073b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800735e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007360:	4b11      	ldr	r3, [pc, #68]	@ (80073a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007364:	0a5b      	lsrs	r3, r3, #9
 8007366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800736a:	3301      	adds	r3, #1
 800736c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	ee07 3a90 	vmov	s15, r3
 8007374:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007378:	edd7 6a07 	vldr	s13, [r7, #28]
 800737c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007384:	ee17 3a90 	vmov	r3, s15
 8007388:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800738a:	e005      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
      break;
 8007390:	e002      	b.n	8007398 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007392:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007394:	61bb      	str	r3, [r7, #24]
      break;
 8007396:	bf00      	nop
  }

  return sysclockfreq;
 8007398:	69bb      	ldr	r3, [r7, #24]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3724      	adds	r7, #36	@ 0x24
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	58024400 	.word	0x58024400
 80073ac:	03d09000 	.word	0x03d09000
 80073b0:	003d0900 	.word	0x003d0900
 80073b4:	007a1200 	.word	0x007a1200
 80073b8:	46000000 	.word	0x46000000
 80073bc:	4c742400 	.word	0x4c742400
 80073c0:	4a742400 	.word	0x4a742400
 80073c4:	4af42400 	.word	0x4af42400

080073c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073ce:	f7ff fe81 	bl	80070d4 <HAL_RCC_GetSysClockFreq>
 80073d2:	4602      	mov	r2, r0
 80073d4:	4b10      	ldr	r3, [pc, #64]	@ (8007418 <HAL_RCC_GetHCLKFreq+0x50>)
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	0a1b      	lsrs	r3, r3, #8
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	490f      	ldr	r1, [pc, #60]	@ (800741c <HAL_RCC_GetHCLKFreq+0x54>)
 80073e0:	5ccb      	ldrb	r3, [r1, r3]
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80073ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <HAL_RCC_GetHCLKFreq+0x50>)
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	4a09      	ldr	r2, [pc, #36]	@ (800741c <HAL_RCC_GetHCLKFreq+0x54>)
 80073f6:	5cd3      	ldrb	r3, [r2, r3]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	4a07      	ldr	r2, [pc, #28]	@ (8007420 <HAL_RCC_GetHCLKFreq+0x58>)
 8007404:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007406:	4a07      	ldr	r2, [pc, #28]	@ (8007424 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800740c:	4b04      	ldr	r3, [pc, #16]	@ (8007420 <HAL_RCC_GetHCLKFreq+0x58>)
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	58024400 	.word	0x58024400
 800741c:	0801dd48 	.word	0x0801dd48
 8007420:	24000004 	.word	0x24000004
 8007424:	24000000 	.word	0x24000000

08007428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800742c:	f7ff ffcc 	bl	80073c8 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	091b      	lsrs	r3, r3, #4
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4904      	ldr	r1, [pc, #16]	@ (8007450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007448:	4618      	mov	r0, r3
 800744a:	bd80      	pop	{r7, pc}
 800744c:	58024400 	.word	0x58024400
 8007450:	0801dd48 	.word	0x0801dd48

08007454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007458:	f7ff ffb6 	bl	80073c8 <HAL_RCC_GetHCLKFreq>
 800745c:	4602      	mov	r2, r0
 800745e:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	0a1b      	lsrs	r3, r3, #8
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	4904      	ldr	r1, [pc, #16]	@ (800747c <HAL_RCC_GetPCLK2Freq+0x28>)
 800746a:	5ccb      	ldrb	r3, [r1, r3]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	58024400 	.word	0x58024400
 800747c:	0801dd48 	.word	0x0801dd48

08007480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	223f      	movs	r2, #63	@ 0x3f
 800748e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007490:	4b1a      	ldr	r3, [pc, #104]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0207 	and.w	r2, r3, #7
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800749c:	4b17      	ldr	r3, [pc, #92]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80074a8:	4b14      	ldr	r3, [pc, #80]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f003 020f 	and.w	r2, r3, #15
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80074b4:	4b11      	ldr	r3, [pc, #68]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80074c0:	4b0e      	ldr	r3, [pc, #56]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 80074c2:	69db      	ldr	r3, [r3, #28]
 80074c4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80074cc:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80074d8:	4b08      	ldr	r3, [pc, #32]	@ (80074fc <HAL_RCC_GetClockConfig+0x7c>)
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074e4:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <HAL_RCC_GetClockConfig+0x80>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	601a      	str	r2, [r3, #0]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	58024400 	.word	0x58024400
 8007500:	52002000 	.word	0x52002000

08007504 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007508:	b0ca      	sub	sp, #296	@ 0x128
 800750a:	af00      	add	r7, sp, #0
 800750c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007516:	2300      	movs	r3, #0
 8007518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800751c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007528:	2500      	movs	r5, #0
 800752a:	ea54 0305 	orrs.w	r3, r4, r5
 800752e:	d049      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007536:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800753a:	d02f      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800753c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007540:	d828      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007542:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007546:	d01a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007548:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800754c:	d822      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007556:	d007      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007558:	e01c      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800755a:	4bb8      	ldr	r3, [pc, #736]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800755c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800755e:	4ab7      	ldr	r2, [pc, #732]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007564:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007566:	e01a      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756c:	3308      	adds	r3, #8
 800756e:	2102      	movs	r1, #2
 8007570:	4618      	mov	r0, r3
 8007572:	f001 fc8f 	bl	8008e94 <RCCEx_PLL2_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800757c:	e00f      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	3328      	adds	r3, #40	@ 0x28
 8007584:	2102      	movs	r1, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fd36 	bl	8008ff8 <RCCEx_PLL3_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075a6:	4ba5      	ldr	r3, [pc, #660]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075b4:	4aa1      	ldr	r2, [pc, #644]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b6:	430b      	orrs	r3, r1
 80075b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80075ba:	e003      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	ea58 0309 	orrs.w	r3, r8, r9
 80075d8:	d047      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d82a      	bhi.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80075e4:	a201      	add	r2, pc, #4	@ (adr r2, 80075ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	08007601 	.word	0x08007601
 80075f0:	0800760f 	.word	0x0800760f
 80075f4:	08007625 	.word	0x08007625
 80075f8:	08007643 	.word	0x08007643
 80075fc:	08007643 	.word	0x08007643
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007600:	4b8e      	ldr	r3, [pc, #568]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007604:	4a8d      	ldr	r2, [pc, #564]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800760a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800760c:	e01a      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800760e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007612:	3308      	adds	r3, #8
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f001 fc3c 	bl	8008e94 <RCCEx_PLL2_Config>
 800761c:	4603      	mov	r3, r0
 800761e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007622:	e00f      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007628:	3328      	adds	r3, #40	@ 0x28
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f001 fce3 	bl	8008ff8 <RCCEx_PLL3_Config>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007638:	e004      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007640:	e000      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800764c:	4b7b      	ldr	r3, [pc, #492]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800764e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007650:	f023 0107 	bic.w	r1, r3, #7
 8007654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765a:	4a78      	ldr	r2, [pc, #480]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800765c:	430b      	orrs	r3, r1
 800765e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007660:	e003      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007676:	f04f 0b00 	mov.w	fp, #0
 800767a:	ea5a 030b 	orrs.w	r3, sl, fp
 800767e:	d04c      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800768a:	d030      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800768c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007690:	d829      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007692:	2bc0      	cmp	r3, #192	@ 0xc0
 8007694:	d02d      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007696:	2bc0      	cmp	r3, #192	@ 0xc0
 8007698:	d825      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800769a:	2b80      	cmp	r3, #128	@ 0x80
 800769c:	d018      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800769e:	2b80      	cmp	r3, #128	@ 0x80
 80076a0:	d821      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80076a6:	2b40      	cmp	r3, #64	@ 0x40
 80076a8:	d007      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076aa:	e01c      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076ac:	4b63      	ldr	r3, [pc, #396]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	4a62      	ldr	r2, [pc, #392]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076b8:	e01c      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076be:	3308      	adds	r3, #8
 80076c0:	2100      	movs	r1, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	f001 fbe6 	bl	8008e94 <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076ce:	e011      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d4:	3328      	adds	r3, #40	@ 0x28
 80076d6:	2100      	movs	r1, #0
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 fc8d 	bl	8008ff8 <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076e4:	e006      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076ec:	e002      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076ee:	bf00      	nop
 80076f0:	e000      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80076f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d10a      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80076fc:	4b4f      	ldr	r3, [pc, #316]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007700:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800770a:	4a4c      	ldr	r2, [pc, #304]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800770c:	430b      	orrs	r3, r1
 800770e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007710:	e003      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007726:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800772a:	2300      	movs	r3, #0
 800772c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007730:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007734:	460b      	mov	r3, r1
 8007736:	4313      	orrs	r3, r2
 8007738:	d053      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007742:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007746:	d035      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007748:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800774c:	d82e      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800774e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007752:	d031      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007754:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007758:	d828      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800775a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800775e:	d01a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007764:	d822      	bhi.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800776a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800776e:	d007      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007770:	e01c      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007772:	4b32      	ldr	r3, [pc, #200]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	4a31      	ldr	r2, [pc, #196]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800777c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800777e:	e01c      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007784:	3308      	adds	r3, #8
 8007786:	2100      	movs	r1, #0
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fb83 	bl	8008e94 <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007794:	e011      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	3328      	adds	r3, #40	@ 0x28
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 fc2a 	bl	8008ff8 <RCCEx_PLL3_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077aa:	e006      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077b2:	e002      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077b4:	bf00      	nop
 80077b6:	e000      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077c2:	4b1e      	ldr	r3, [pc, #120]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077d2:	4a1a      	ldr	r2, [pc, #104]	@ (800783c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d4:	430b      	orrs	r3, r1
 80077d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80077d8:	e003      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80077e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80077ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80077f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80077fc:	460b      	mov	r3, r1
 80077fe:	4313      	orrs	r3, r2
 8007800:	d056      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800780a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800780e:	d038      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007814:	d831      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800781a:	d034      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800781c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007820:	d82b      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007826:	d01d      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007828:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800782c:	d825      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800782e:	2b00      	cmp	r3, #0
 8007830:	d006      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007836:	d00a      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007838:	e01f      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800783a:	bf00      	nop
 800783c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007840:	4ba2      	ldr	r3, [pc, #648]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007844:	4aa1      	ldr	r2, [pc, #644]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800784a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800784c:	e01c      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800784e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007852:	3308      	adds	r3, #8
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f001 fb1c 	bl	8008e94 <RCCEx_PLL2_Config>
 800785c:	4603      	mov	r3, r0
 800785e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007862:	e011      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007868:	3328      	adds	r3, #40	@ 0x28
 800786a:	2100      	movs	r1, #0
 800786c:	4618      	mov	r0, r3
 800786e:	f001 fbc3 	bl	8008ff8 <RCCEx_PLL3_Config>
 8007872:	4603      	mov	r3, r0
 8007874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007878:	e006      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007880:	e002      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007882:	bf00      	nop
 8007884:	e000      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007890:	4b8e      	ldr	r3, [pc, #568]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007894:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078a0:	4a8a      	ldr	r2, [pc, #552]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078a2:	430b      	orrs	r3, r1
 80078a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078c0:	2300      	movs	r3, #0
 80078c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078ca:	460b      	mov	r3, r1
 80078cc:	4313      	orrs	r3, r2
 80078ce:	d03a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078d6:	2b30      	cmp	r3, #48	@ 0x30
 80078d8:	d01f      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078da:	2b30      	cmp	r3, #48	@ 0x30
 80078dc:	d819      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078de:	2b20      	cmp	r3, #32
 80078e0:	d00c      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80078e2:	2b20      	cmp	r3, #32
 80078e4:	d815      	bhi.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d019      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d111      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ee:	4b77      	ldr	r3, [pc, #476]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f2:	4a76      	ldr	r2, [pc, #472]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80078fa:	e011      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007900:	3308      	adds	r3, #8
 8007902:	2102      	movs	r1, #2
 8007904:	4618      	mov	r0, r3
 8007906:	f001 fac5 	bl	8008e94 <RCCEx_PLL2_Config>
 800790a:	4603      	mov	r3, r0
 800790c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007910:	e006      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007918:	e002      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800791a:	bf00      	nop
 800791c:	e000      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800791e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007928:	4b68      	ldr	r3, [pc, #416]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800792a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800792c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007936:	4a65      	ldr	r2, [pc, #404]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007938:	430b      	orrs	r3, r1
 800793a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800793c:	e003      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007952:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007956:	2300      	movs	r3, #0
 8007958:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800795c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007960:	460b      	mov	r3, r1
 8007962:	4313      	orrs	r3, r2
 8007964:	d051      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800796c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007970:	d035      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007972:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007976:	d82e      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007978:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800797c:	d031      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800797e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007982:	d828      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007988:	d01a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800798e:	d822      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007998:	d007      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800799a:	e01c      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799c:	4b4b      	ldr	r3, [pc, #300]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800799e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a0:	4a4a      	ldr	r2, [pc, #296]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079a8:	e01c      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ae:	3308      	adds	r3, #8
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fa6e 	bl	8008e94 <RCCEx_PLL2_Config>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079be:	e011      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c4:	3328      	adds	r3, #40	@ 0x28
 80079c6:	2100      	movs	r1, #0
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 fb15 	bl	8008ff8 <RCCEx_PLL3_Config>
 80079ce:	4603      	mov	r3, r0
 80079d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079d4:	e006      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079dc:	e002      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079de:	bf00      	nop
 80079e0:	e000      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80079e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10a      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80079ec:	4b37      	ldr	r3, [pc, #220]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079fa:	4a34      	ldr	r2, [pc, #208]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a24:	460b      	mov	r3, r1
 8007a26:	4313      	orrs	r3, r2
 8007a28:	d056      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a34:	d033      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a3a:	d82c      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a40:	d02f      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a46:	d826      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a4c:	d02b      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a52:	d820      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a58:	d012      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a5e:	d81a      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d022      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a68:	d115      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	3308      	adds	r3, #8
 8007a70:	2101      	movs	r1, #1
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 fa0e 	bl	8008e94 <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a7e:	e015      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	3328      	adds	r3, #40	@ 0x28
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fab5 	bl	8008ff8 <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007a94:	e00a      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a9c:	e006      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e004      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e002      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aa6:	bf00      	nop
 8007aa8:	e000      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10d      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac2:	4a02      	ldr	r2, [pc, #8]	@ (8007acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007aca:	bf00      	nop
 8007acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007aee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	d055      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b04:	d033      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b0a:	d82c      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b10:	d02f      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b16:	d826      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b1c:	d02b      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b22:	d820      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b28:	d012      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b2e:	d81a      	bhi.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d022      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b38:	d115      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	3308      	adds	r3, #8
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f9a6 	bl	8008e94 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e015      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b54:	3328      	adds	r3, #40	@ 0x28
 8007b56:	2101      	movs	r1, #1
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 fa4d 	bl	8008ff8 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b64:	e00a      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b6c:	e006      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b6e:	bf00      	nop
 8007b70:	e004      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b72:	bf00      	nop
 8007b74:	e002      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b76:	bf00      	nop
 8007b78:	e000      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10b      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b84:	4ba3      	ldr	r3, [pc, #652]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b88:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b94:	4a9f      	ldr	r2, [pc, #636]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b96:	430b      	orrs	r3, r1
 8007b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b9a:	e003      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	d037      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bce:	d00e      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007bd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bd4:	d816      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d018      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007bda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bde:	d111      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007be0:	4b8c      	ldr	r3, [pc, #560]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be4:	4a8b      	ldr	r2, [pc, #556]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007bec:	e00f      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 f94c 	bl	8008e94 <RCCEx_PLL2_Config>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c02:	e004      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c0a:	e000      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c16:	4b7f      	ldr	r3, [pc, #508]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c24:	4a7b      	ldr	r2, [pc, #492]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c26:	430b      	orrs	r3, r1
 8007c28:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c2a:	e003      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4313      	orrs	r3, r2
 8007c52:	d039      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d81c      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c64:	08007ca1 	.word	0x08007ca1
 8007c68:	08007c75 	.word	0x08007c75
 8007c6c:	08007c83 	.word	0x08007c83
 8007c70:	08007ca1 	.word	0x08007ca1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c74:	4b67      	ldr	r3, [pc, #412]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	4a66      	ldr	r2, [pc, #408]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c80:	e00f      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c86:	3308      	adds	r3, #8
 8007c88:	2102      	movs	r1, #2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f001 f902 	bl	8008e94 <RCCEx_PLL2_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007c96:	e004      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c9e:	e000      	b.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10a      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007caa:	4b5a      	ldr	r3, [pc, #360]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cae:	f023 0103 	bic.w	r1, r3, #3
 8007cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb8:	4a56      	ldr	r2, [pc, #344]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007cbe:	e003      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f000 809f 	beq.w	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007cea:	4b4b      	ldr	r3, [pc, #300]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a4a      	ldr	r2, [pc, #296]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cf6:	f7fa fbb9 	bl	800246c <HAL_GetTick>
 8007cfa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cfe:	e00b      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d00:	f7fa fbb4 	bl	800246c <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	2b64      	cmp	r3, #100	@ 0x64
 8007d0e:	d903      	bls.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d16:	e005      	b.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d18:	4b3f      	ldr	r3, [pc, #252]	@ (8007e18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0ed      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d179      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d2c:	4b39      	ldr	r3, [pc, #228]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d38:	4053      	eors	r3, r2
 8007d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d015      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d42:	4b34      	ldr	r3, [pc, #208]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d4e:	4b31      	ldr	r3, [pc, #196]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d52:	4a30      	ldr	r2, [pc, #192]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d5a:	4b2e      	ldr	r3, [pc, #184]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d66:	4a2b      	ldr	r2, [pc, #172]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d7a:	d118      	bne.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7c:	f7fa fb76 	bl	800246c <HAL_GetTick>
 8007d80:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d84:	e00d      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d86:	f7fa fb71 	bl	800246c <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d90:	1ad2      	subs	r2, r2, r3
 8007d92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d903      	bls.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007da0:	e005      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0eb      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d129      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dc6:	d10e      	bne.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007dc8:	4b12      	ldr	r3, [pc, #72]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dd8:	091a      	lsrs	r2, r3, #4
 8007dda:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	4a0d      	ldr	r2, [pc, #52]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6113      	str	r3, [r2, #16]
 8007de4:	e005      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007de6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	4a0a      	ldr	r2, [pc, #40]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007df0:	6113      	str	r3, [r2, #16]
 8007df2:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007df4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e02:	4a04      	ldr	r2, [pc, #16]	@ (8007e14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e04:	430b      	orrs	r3, r1
 8007e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e08:	e00e      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e12:	e009      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e14:	58024400 	.word	0x58024400
 8007e18:	58024800 	.word	0x58024800
 8007e1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f002 0301 	and.w	r3, r2, #1
 8007e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e42:	460b      	mov	r3, r1
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f000 8089 	beq.w	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e50:	2b28      	cmp	r3, #40	@ 0x28
 8007e52:	d86b      	bhi.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e54:	a201      	add	r2, pc, #4	@ (adr r2, 8007e5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007f35 	.word	0x08007f35
 8007e60:	08007f2d 	.word	0x08007f2d
 8007e64:	08007f2d 	.word	0x08007f2d
 8007e68:	08007f2d 	.word	0x08007f2d
 8007e6c:	08007f2d 	.word	0x08007f2d
 8007e70:	08007f2d 	.word	0x08007f2d
 8007e74:	08007f2d 	.word	0x08007f2d
 8007e78:	08007f2d 	.word	0x08007f2d
 8007e7c:	08007f01 	.word	0x08007f01
 8007e80:	08007f2d 	.word	0x08007f2d
 8007e84:	08007f2d 	.word	0x08007f2d
 8007e88:	08007f2d 	.word	0x08007f2d
 8007e8c:	08007f2d 	.word	0x08007f2d
 8007e90:	08007f2d 	.word	0x08007f2d
 8007e94:	08007f2d 	.word	0x08007f2d
 8007e98:	08007f2d 	.word	0x08007f2d
 8007e9c:	08007f17 	.word	0x08007f17
 8007ea0:	08007f2d 	.word	0x08007f2d
 8007ea4:	08007f2d 	.word	0x08007f2d
 8007ea8:	08007f2d 	.word	0x08007f2d
 8007eac:	08007f2d 	.word	0x08007f2d
 8007eb0:	08007f2d 	.word	0x08007f2d
 8007eb4:	08007f2d 	.word	0x08007f2d
 8007eb8:	08007f2d 	.word	0x08007f2d
 8007ebc:	08007f35 	.word	0x08007f35
 8007ec0:	08007f2d 	.word	0x08007f2d
 8007ec4:	08007f2d 	.word	0x08007f2d
 8007ec8:	08007f2d 	.word	0x08007f2d
 8007ecc:	08007f2d 	.word	0x08007f2d
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f2d 	.word	0x08007f2d
 8007ed8:	08007f2d 	.word	0x08007f2d
 8007edc:	08007f35 	.word	0x08007f35
 8007ee0:	08007f2d 	.word	0x08007f2d
 8007ee4:	08007f2d 	.word	0x08007f2d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f2d 	.word	0x08007f2d
 8007ef0:	08007f2d 	.word	0x08007f2d
 8007ef4:	08007f2d 	.word	0x08007f2d
 8007ef8:	08007f2d 	.word	0x08007f2d
 8007efc:	08007f35 	.word	0x08007f35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	3308      	adds	r3, #8
 8007f06:	2101      	movs	r1, #1
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 ffc3 	bl	8008e94 <RCCEx_PLL2_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f14:	e00f      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f1a:	3328      	adds	r3, #40	@ 0x28
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f86a 	bl	8008ff8 <RCCEx_PLL3_Config>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f2a:	e004      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f32:	e000      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f3e:	4bbf      	ldr	r3, [pc, #764]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f4c:	4abb      	ldr	r2, [pc, #748]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f52:	e003      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f002 0302 	and.w	r3, r2, #2
 8007f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f76:	460b      	mov	r3, r1
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	d041      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	d824      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007f86:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007fd9 	.word	0x08007fd9
 8007f90:	08007fa5 	.word	0x08007fa5
 8007f94:	08007fbb 	.word	0x08007fbb
 8007f98:	08007fd9 	.word	0x08007fd9
 8007f9c:	08007fd9 	.word	0x08007fd9
 8007fa0:	08007fd9 	.word	0x08007fd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa8:	3308      	adds	r3, #8
 8007faa:	2101      	movs	r1, #1
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 ff71 	bl	8008e94 <RCCEx_PLL2_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fb8:	e00f      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	3328      	adds	r3, #40	@ 0x28
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 f818 	bl	8008ff8 <RCCEx_PLL3_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fce:	e004      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fd6:	e000      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007fe2:	4b96      	ldr	r3, [pc, #600]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe6:	f023 0107 	bic.w	r1, r3, #7
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ff0:	4a92      	ldr	r2, [pc, #584]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff2:	430b      	orrs	r3, r1
 8007ff4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ff6:	e003      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ffc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008008:	f002 0304 	and.w	r3, r2, #4
 800800c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008010:	2300      	movs	r3, #0
 8008012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008016:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800801a:	460b      	mov	r3, r1
 800801c:	4313      	orrs	r3, r2
 800801e:	d044      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008028:	2b05      	cmp	r3, #5
 800802a:	d825      	bhi.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800802c:	a201      	add	r2, pc, #4	@ (adr r2, 8008034 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	08008081 	.word	0x08008081
 8008038:	0800804d 	.word	0x0800804d
 800803c:	08008063 	.word	0x08008063
 8008040:	08008081 	.word	0x08008081
 8008044:	08008081 	.word	0x08008081
 8008048:	08008081 	.word	0x08008081
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800804c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008050:	3308      	adds	r3, #8
 8008052:	2101      	movs	r1, #1
 8008054:	4618      	mov	r0, r3
 8008056:	f000 ff1d 	bl	8008e94 <RCCEx_PLL2_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008060:	e00f      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008066:	3328      	adds	r3, #40	@ 0x28
 8008068:	2101      	movs	r1, #1
 800806a:	4618      	mov	r0, r3
 800806c:	f000 ffc4 	bl	8008ff8 <RCCEx_PLL3_Config>
 8008070:	4603      	mov	r3, r0
 8008072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008076:	e004      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800807e:	e000      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800808a:	4b6c      	ldr	r3, [pc, #432]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800808c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808e:	f023 0107 	bic.w	r1, r3, #7
 8008092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800809a:	4a68      	ldr	r2, [pc, #416]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800809c:	430b      	orrs	r3, r1
 800809e:	6593      	str	r3, [r2, #88]	@ 0x58
 80080a0:	e003      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f002 0320 	and.w	r3, r2, #32
 80080b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080ba:	2300      	movs	r3, #0
 80080bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080c4:	460b      	mov	r3, r1
 80080c6:	4313      	orrs	r3, r2
 80080c8:	d055      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080d6:	d033      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080dc:	d82c      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e2:	d02f      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e8:	d826      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080ee:	d02b      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80080f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80080f4:	d820      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80080f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080fa:	d012      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80080fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008100:	d81a      	bhi.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d022      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800810a:	d115      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008110:	3308      	adds	r3, #8
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f000 febd 	bl	8008e94 <RCCEx_PLL2_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008120:	e015      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008126:	3328      	adds	r3, #40	@ 0x28
 8008128:	2102      	movs	r1, #2
 800812a:	4618      	mov	r0, r3
 800812c:	f000 ff64 	bl	8008ff8 <RCCEx_PLL3_Config>
 8008130:	4603      	mov	r3, r0
 8008132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008136:	e00a      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800813e:	e006      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008140:	bf00      	nop
 8008142:	e004      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008144:	bf00      	nop
 8008146:	e002      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008148:	bf00      	nop
 800814a:	e000      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800814c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800814e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10b      	bne.n	800816e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008156:	4b39      	ldr	r3, [pc, #228]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	4a35      	ldr	r2, [pc, #212]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008168:	430b      	orrs	r3, r1
 800816a:	6553      	str	r3, [r2, #84]	@ 0x54
 800816c:	e003      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800816e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008186:	2300      	movs	r3, #0
 8008188:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800818c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008190:	460b      	mov	r3, r1
 8008192:	4313      	orrs	r3, r2
 8008194:	d058      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800819e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081a2:	d033      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80081a4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081a8:	d82c      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ae:	d02f      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b4:	d826      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081ba:	d02b      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081c0:	d820      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081c6:	d012      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081cc:	d81a      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d022      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081d6:	d115      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081dc:	3308      	adds	r3, #8
 80081de:	2100      	movs	r1, #0
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fe57 	bl	8008e94 <RCCEx_PLL2_Config>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80081ec:	e015      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f2:	3328      	adds	r3, #40	@ 0x28
 80081f4:	2102      	movs	r1, #2
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fefe 	bl	8008ff8 <RCCEx_PLL3_Config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008202:	e00a      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800820a:	e006      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800820c:	bf00      	nop
 800820e:	e004      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008210:	bf00      	nop
 8008212:	e002      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008214:	bf00      	nop
 8008216:	e000      	b.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800821a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10e      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008222:	4b06      	ldr	r3, [pc, #24]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008226:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800822a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008232:	4a02      	ldr	r2, [pc, #8]	@ (800823c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008234:	430b      	orrs	r3, r1
 8008236:	6593      	str	r3, [r2, #88]	@ 0x58
 8008238:	e006      	b.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800823a:	bf00      	nop
 800823c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008244:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008254:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800825e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008262:	460b      	mov	r3, r1
 8008264:	4313      	orrs	r3, r2
 8008266:	d055      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008270:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008274:	d033      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008276:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800827a:	d82c      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800827c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008280:	d02f      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008286:	d826      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008288:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800828c:	d02b      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800828e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008292:	d820      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008294:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008298:	d012      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800829a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800829e:	d81a      	bhi.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d022      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80082a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a8:	d115      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	3308      	adds	r3, #8
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fdee 	bl	8008e94 <RCCEx_PLL2_Config>
 80082b8:	4603      	mov	r3, r0
 80082ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082be:	e015      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c4:	3328      	adds	r3, #40	@ 0x28
 80082c6:	2102      	movs	r1, #2
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fe95 	bl	8008ff8 <RCCEx_PLL3_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082d4:	e00a      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082dc:	e006      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082de:	bf00      	nop
 80082e0:	e004      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082e2:	bf00      	nop
 80082e4:	e002      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082e6:	bf00      	nop
 80082e8:	e000      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80082ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10b      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082f4:	4ba1      	ldr	r3, [pc, #644]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082f8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008304:	4a9d      	ldr	r2, [pc, #628]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008306:	430b      	orrs	r3, r1
 8008308:	6593      	str	r3, [r2, #88]	@ 0x58
 800830a:	e003      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f002 0308 	and.w	r3, r2, #8
 8008320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008324:	2300      	movs	r3, #0
 8008326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800832a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800832e:	460b      	mov	r3, r1
 8008330:	4313      	orrs	r3, r2
 8008332:	d01e      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800833c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008340:	d10c      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008346:	3328      	adds	r3, #40	@ 0x28
 8008348:	2102      	movs	r1, #2
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fe54 	bl	8008ff8 <RCCEx_PLL3_Config>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800835c:	4b87      	ldr	r3, [pc, #540]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800835e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008360:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800836c:	4a83      	ldr	r2, [pc, #524]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836e:	430b      	orrs	r3, r1
 8008370:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f002 0310 	and.w	r3, r2, #16
 800837e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008382:	2300      	movs	r3, #0
 8008384:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008388:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800838c:	460b      	mov	r3, r1
 800838e:	4313      	orrs	r3, r2
 8008390:	d01e      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800839a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800839e:	d10c      	bne.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a4:	3328      	adds	r3, #40	@ 0x28
 80083a6:	2102      	movs	r1, #2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fe25 	bl	8008ff8 <RCCEx_PLL3_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083ba:	4b70      	ldr	r3, [pc, #448]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083ca:	4a6c      	ldr	r2, [pc, #432]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083cc:	430b      	orrs	r3, r1
 80083ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80083dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083e0:	2300      	movs	r3, #0
 80083e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80083ea:	460b      	mov	r3, r1
 80083ec:	4313      	orrs	r3, r2
 80083ee:	d03e      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80083f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083fc:	d022      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80083fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008402:	d81b      	bhi.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840c:	d00b      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800840e:	e015      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008414:	3308      	adds	r3, #8
 8008416:	2100      	movs	r1, #0
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fd3b 	bl	8008e94 <RCCEx_PLL2_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008424:	e00f      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	3328      	adds	r3, #40	@ 0x28
 800842c:	2102      	movs	r1, #2
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fde2 	bl	8008ff8 <RCCEx_PLL3_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800843a:	e004      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008442:	e000      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800844e:	4b4b      	ldr	r3, [pc, #300]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008452:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800845e:	4a47      	ldr	r2, [pc, #284]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008460:	430b      	orrs	r3, r1
 8008462:	6593      	str	r3, [r2, #88]	@ 0x58
 8008464:	e003      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800847a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800847c:	2300      	movs	r3, #0
 800847e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008480:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008484:	460b      	mov	r3, r1
 8008486:	4313      	orrs	r3, r2
 8008488:	d03b      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008492:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008496:	d01f      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008498:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800849c:	d818      	bhi.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800849e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084a2:	d003      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80084a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a8:	d007      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084aa:	e011      	b.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ac:	4b33      	ldr	r3, [pc, #204]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b0:	4a32      	ldr	r2, [pc, #200]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084b8:	e00f      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084be:	3328      	adds	r3, #40	@ 0x28
 80084c0:	2101      	movs	r1, #1
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 fd98 	bl	8008ff8 <RCCEx_PLL3_Config>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084ce:	e004      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084d6:	e000      	b.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10b      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084e2:	4b26      	ldr	r3, [pc, #152]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80084ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f2:	4a22      	ldr	r2, [pc, #136]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084f4:	430b      	orrs	r3, r1
 80084f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80084f8:	e003      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800850e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008510:	2300      	movs	r3, #0
 8008512:	677b      	str	r3, [r7, #116]	@ 0x74
 8008514:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008518:	460b      	mov	r3, r1
 800851a:	4313      	orrs	r3, r2
 800851c:	d034      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800852c:	d007      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800852e:	e011      	b.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008530:	4b12      	ldr	r3, [pc, #72]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008534:	4a11      	ldr	r2, [pc, #68]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800853a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800853c:	e00e      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800853e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008542:	3308      	adds	r3, #8
 8008544:	2102      	movs	r1, #2
 8008546:	4618      	mov	r0, r3
 8008548:	f000 fca4 	bl	8008e94 <RCCEx_PLL2_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008552:	e003      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800855a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10d      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008564:	4b05      	ldr	r3, [pc, #20]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008568:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008572:	4a02      	ldr	r2, [pc, #8]	@ (800857c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008574:	430b      	orrs	r3, r1
 8008576:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008578:	e006      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800857a:	bf00      	nop
 800857c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008594:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008596:	2300      	movs	r3, #0
 8008598:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800859a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800859e:	460b      	mov	r3, r1
 80085a0:	4313      	orrs	r3, r2
 80085a2:	d00c      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a8:	3328      	adds	r3, #40	@ 0x28
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fd23 	bl	8008ff8 <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80085cc:	2300      	movs	r3, #0
 80085ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80085d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085d4:	460b      	mov	r3, r1
 80085d6:	4313      	orrs	r3, r2
 80085d8:	d038      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085e6:	d018      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80085e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085ec:	d811      	bhi.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f2:	d014      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80085f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f8:	d80b      	bhi.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d011      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008602:	d106      	bne.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008604:	4bc3      	ldr	r3, [pc, #780]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008608:	4ac2      	ldr	r2, [pc, #776]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800860a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800860e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008610:	e008      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008618:	e004      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800861a:	bf00      	nop
 800861c:	e002      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800861e:	bf00      	nop
 8008620:	e000      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800862c:	4bb9      	ldr	r3, [pc, #740]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800862e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008630:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800863c:	4ab5      	ldr	r2, [pc, #724]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800863e:	430b      	orrs	r3, r1
 8008640:	6553      	str	r3, [r2, #84]	@ 0x54
 8008642:	e003      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800865a:	2300      	movs	r3, #0
 800865c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800865e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008662:	460b      	mov	r3, r1
 8008664:	4313      	orrs	r3, r2
 8008666:	d009      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008668:	4baa      	ldr	r3, [pc, #680]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800866a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008676:	4aa7      	ldr	r2, [pc, #668]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008678:	430b      	orrs	r3, r1
 800867a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008684:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008688:	653b      	str	r3, [r7, #80]	@ 0x50
 800868a:	2300      	movs	r3, #0
 800868c:	657b      	str	r3, [r7, #84]	@ 0x54
 800868e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008692:	460b      	mov	r3, r1
 8008694:	4313      	orrs	r3, r2
 8008696:	d00a      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008698:	4b9e      	ldr	r3, [pc, #632]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086a8:	4a9a      	ldr	r2, [pc, #616]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086aa:	430b      	orrs	r3, r1
 80086ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086bc:	2300      	movs	r3, #0
 80086be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d009      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086ca:	4b92      	ldr	r3, [pc, #584]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086d8:	4a8e      	ldr	r2, [pc, #568]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086da:	430b      	orrs	r3, r1
 80086dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80086ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80086ec:	2300      	movs	r3, #0
 80086ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80086f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80086f4:	460b      	mov	r3, r1
 80086f6:	4313      	orrs	r3, r2
 80086f8:	d00e      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086fa:	4b86      	ldr	r3, [pc, #536]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	4a85      	ldr	r2, [pc, #532]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008700:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008704:	6113      	str	r3, [r2, #16]
 8008706:	4b83      	ldr	r3, [pc, #524]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008708:	6919      	ldr	r1, [r3, #16]
 800870a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800870e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008712:	4a80      	ldr	r2, [pc, #512]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008714:	430b      	orrs	r3, r1
 8008716:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008724:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800872a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800872e:	460b      	mov	r3, r1
 8008730:	4313      	orrs	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008734:	4b77      	ldr	r3, [pc, #476]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008738:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008742:	4a74      	ldr	r2, [pc, #464]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008744:	430b      	orrs	r3, r1
 8008746:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30
 8008756:	2300      	movs	r3, #0
 8008758:	637b      	str	r3, [r7, #52]	@ 0x34
 800875a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800875e:	460b      	mov	r3, r1
 8008760:	4313      	orrs	r3, r2
 8008762:	d00a      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008764:	4b6b      	ldr	r3, [pc, #428]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008768:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008774:	4a67      	ldr	r2, [pc, #412]	@ (8008914 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008776:	430b      	orrs	r3, r1
 8008778:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	2100      	movs	r1, #0
 8008784:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800878c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008790:	460b      	mov	r3, r1
 8008792:	4313      	orrs	r3, r2
 8008794:	d011      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879a:	3308      	adds	r3, #8
 800879c:	2100      	movs	r1, #0
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fb78 	bl	8008e94 <RCCEx_PLL2_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	2100      	movs	r1, #0
 80087c4:	6239      	str	r1, [r7, #32]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80087cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087d0:	460b      	mov	r3, r1
 80087d2:	4313      	orrs	r3, r2
 80087d4:	d011      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087da:	3308      	adds	r3, #8
 80087dc:	2101      	movs	r1, #1
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fb58 	bl	8008e94 <RCCEx_PLL2_Config>
 80087e4:	4603      	mov	r3, r0
 80087e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80087fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	2100      	movs	r1, #0
 8008804:	61b9      	str	r1, [r7, #24]
 8008806:	f003 0304 	and.w	r3, r3, #4
 800880a:	61fb      	str	r3, [r7, #28]
 800880c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008810:	460b      	mov	r3, r1
 8008812:	4313      	orrs	r3, r2
 8008814:	d011      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800881a:	3308      	adds	r3, #8
 800881c:	2102      	movs	r1, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f000 fb38 	bl	8008e94 <RCCEx_PLL2_Config>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008842:	2100      	movs	r1, #0
 8008844:	6139      	str	r1, [r7, #16]
 8008846:	f003 0308 	and.w	r3, r3, #8
 800884a:	617b      	str	r3, [r7, #20]
 800884c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008850:	460b      	mov	r3, r1
 8008852:	4313      	orrs	r3, r2
 8008854:	d011      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885a:	3328      	adds	r3, #40	@ 0x28
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f000 fbca 	bl	8008ff8 <RCCEx_PLL3_Config>
 8008864:	4603      	mov	r3, r0
 8008866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800886a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	2100      	movs	r1, #0
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	f003 0310 	and.w	r3, r3, #16
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008890:	460b      	mov	r3, r1
 8008892:	4313      	orrs	r3, r2
 8008894:	d011      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800889a:	3328      	adds	r3, #40	@ 0x28
 800889c:	2101      	movs	r1, #1
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fbaa 	bl	8008ff8 <RCCEx_PLL3_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	2100      	movs	r1, #0
 80088c4:	6039      	str	r1, [r7, #0]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	607b      	str	r3, [r7, #4]
 80088cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088d0:	460b      	mov	r3, r1
 80088d2:	4313      	orrs	r3, r2
 80088d4:	d011      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088da:	3328      	adds	r3, #40	@ 0x28
 80088dc:	2102      	movs	r1, #2
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fb8a 	bl	8008ff8 <RCCEx_PLL3_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80088fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	e000      	b.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
}
 8008908:	4618      	mov	r0, r3
 800890a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800890e:	46bd      	mov	sp, r7
 8008910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008914:	58024400 	.word	0x58024400

08008918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800891c:	f7fe fd54 	bl	80073c8 <HAL_RCC_GetHCLKFreq>
 8008920:	4602      	mov	r2, r0
 8008922:	4b06      	ldr	r3, [pc, #24]	@ (800893c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	091b      	lsrs	r3, r3, #4
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	4904      	ldr	r1, [pc, #16]	@ (8008940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800892e:	5ccb      	ldrb	r3, [r1, r3]
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008938:	4618      	mov	r0, r3
 800893a:	bd80      	pop	{r7, pc}
 800893c:	58024400 	.word	0x58024400
 8008940:	0801dd48 	.word	0x0801dd48

08008944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008944:	b480      	push	{r7}
 8008946:	b089      	sub	sp, #36	@ 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800894c:	4ba1      	ldr	r3, [pc, #644]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800894e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008956:	4b9f      	ldr	r3, [pc, #636]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895a:	0b1b      	lsrs	r3, r3, #12
 800895c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008962:	4b9c      	ldr	r3, [pc, #624]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008966:	091b      	lsrs	r3, r3, #4
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800896e:	4b99      	ldr	r3, [pc, #612]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008972:	08db      	lsrs	r3, r3, #3
 8008974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8111 	beq.w	8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b02      	cmp	r3, #2
 8008996:	f000 8083 	beq.w	8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	2b02      	cmp	r3, #2
 800899e:	f200 80a1 	bhi.w	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d056      	beq.n	8008a5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089ae:	e099      	b.n	8008ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b0:	4b88      	ldr	r3, [pc, #544]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d02d      	beq.n	8008a18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089bc:	4b85      	ldr	r3, [pc, #532]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	08db      	lsrs	r3, r3, #3
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	4a84      	ldr	r2, [pc, #528]	@ (8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
 80089cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	ee07 3a90 	vmov	s15, r3
 80089d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e6:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a16:	e087      	b.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	ee07 3a90 	vmov	s15, r3
 8008a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008be0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a5a:	e065      	b.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	ee07 3a90 	vmov	s15, r3
 8008a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a6e:	4b59      	ldr	r3, [pc, #356]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a9e:	e043      	b.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	ee07 3a90 	vmov	s15, r3
 8008aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ab2:	4b48      	ldr	r3, [pc, #288]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ac6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ae2:	e021      	b.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af6:	4b37      	ldr	r3, [pc, #220]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b28:	4b2a      	ldr	r3, [pc, #168]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b2c:	0a5b      	lsrs	r3, r3, #9
 8008b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4e:	ee17 2a90 	vmov	r2, s15
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b56:	4b1f      	ldr	r3, [pc, #124]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5a:	0c1b      	lsrs	r3, r3, #16
 8008b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b60:	ee07 3a90 	vmov	s15, r3
 8008b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7c:	ee17 2a90 	vmov	r2, s15
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008b84:	4b13      	ldr	r3, [pc, #76]	@ (8008bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b88:	0e1b      	lsrs	r3, r3, #24
 8008b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008baa:	ee17 2a90 	vmov	r2, s15
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bb2:	e008      	b.n	8008bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	609a      	str	r2, [r3, #8]
}
 8008bc6:	bf00      	nop
 8008bc8:	3724      	adds	r7, #36	@ 0x24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	03d09000 	.word	0x03d09000
 8008bdc:	46000000 	.word	0x46000000
 8008be0:	4c742400 	.word	0x4c742400
 8008be4:	4a742400 	.word	0x4a742400
 8008be8:	4af42400 	.word	0x4af42400

08008bec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b089      	sub	sp, #36	@ 0x24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf8:	f003 0303 	and.w	r3, r3, #3
 8008bfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	0d1b      	lsrs	r3, r3, #20
 8008c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c16:	4b99      	ldr	r3, [pc, #612]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1a:	08db      	lsrs	r3, r3, #3
 8008c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
 8008c26:	ee07 3a90 	vmov	s15, r3
 8008c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8111 	beq.w	8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	f000 8083 	beq.w	8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	f200 80a1 	bhi.w	8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d056      	beq.n	8008d04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c56:	e099      	b.n	8008d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c58:	4b88      	ldr	r3, [pc, #544]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d02d      	beq.n	8008cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c64:	4b85      	ldr	r3, [pc, #532]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	08db      	lsrs	r3, r3, #3
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	4a84      	ldr	r2, [pc, #528]	@ (8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
 8008c74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	ee07 3a90 	vmov	s15, r3
 8008c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	ee07 3a90 	vmov	s15, r3
 8008c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008cbe:	e087      	b.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008e88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d02:	e065      	b.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d16:	4b59      	ldr	r3, [pc, #356]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d46:	e043      	b.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d5a:	4b48      	ldr	r3, [pc, #288]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d8a:	e021      	b.n	8008dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d9e:	4b37      	ldr	r3, [pc, #220]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd4:	0a5b      	lsrs	r3, r3, #9
 8008dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dda:	ee07 3a90 	vmov	s15, r3
 8008dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df6:	ee17 2a90 	vmov	r2, s15
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e02:	0c1b      	lsrs	r3, r3, #16
 8008e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e08:	ee07 3a90 	vmov	s15, r3
 8008e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e24:	ee17 2a90 	vmov	r2, s15
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e2c:	4b13      	ldr	r3, [pc, #76]	@ (8008e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e30:	0e1b      	lsrs	r3, r3, #24
 8008e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e36:	ee07 3a90 	vmov	s15, r3
 8008e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e52:	ee17 2a90 	vmov	r2, s15
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e5a:	e008      	b.n	8008e6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	609a      	str	r2, [r3, #8]
}
 8008e6e:	bf00      	nop
 8008e70:	3724      	adds	r7, #36	@ 0x24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	03d09000 	.word	0x03d09000
 8008e84:	46000000 	.word	0x46000000
 8008e88:	4c742400 	.word	0x4c742400
 8008e8c:	4a742400 	.word	0x4a742400
 8008e90:	4af42400 	.word	0x4af42400

08008e94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ea2:	4b53      	ldr	r3, [pc, #332]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d101      	bne.n	8008eb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e099      	b.n	8008fe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008eb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ebe:	f7f9 fad5 	bl	800246c <HAL_GetTick>
 8008ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ec4:	e008      	b.n	8008ed8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ec6:	f7f9 fad1 	bl	800246c <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d901      	bls.n	8008ed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e086      	b.n	8008fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed8:	4b45      	ldr	r3, [pc, #276]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f0      	bne.n	8008ec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ee4:	4b42      	ldr	r3, [pc, #264]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	031b      	lsls	r3, r3, #12
 8008ef2:	493f      	ldr	r1, [pc, #252]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	025b      	lsls	r3, r3, #9
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	061b      	lsls	r3, r3, #24
 8008f24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f28:	4931      	ldr	r1, [pc, #196]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f2e:	4b30      	ldr	r3, [pc, #192]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	492d      	ldr	r1, [pc, #180]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f40:	4b2b      	ldr	r3, [pc, #172]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f44:	f023 0220 	bic.w	r2, r3, #32
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	4928      	ldr	r1, [pc, #160]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f52:	4b27      	ldr	r3, [pc, #156]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f56:	4a26      	ldr	r2, [pc, #152]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	f023 0310 	bic.w	r3, r3, #16
 8008f5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f5e:	4b24      	ldr	r3, [pc, #144]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f62:	4b24      	ldr	r3, [pc, #144]	@ (8008ff4 <RCCEx_PLL2_Config+0x160>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	69d2      	ldr	r2, [r2, #28]
 8008f6a:	00d2      	lsls	r2, r2, #3
 8008f6c:	4920      	ldr	r1, [pc, #128]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f72:	4b1f      	ldr	r3, [pc, #124]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f76:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	f043 0310 	orr.w	r3, r3, #16
 8008f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d106      	bne.n	8008f92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f84:	4b1a      	ldr	r3, [pc, #104]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	4a19      	ldr	r2, [pc, #100]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f90:	e00f      	b.n	8008fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d106      	bne.n	8008fa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f98:	4b15      	ldr	r3, [pc, #84]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9c:	4a14      	ldr	r2, [pc, #80]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fa4:	e005      	b.n	8008fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fa6:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008faa:	4a11      	ldr	r2, [pc, #68]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008fac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fbe:	f7f9 fa55 	bl	800246c <HAL_GetTick>
 8008fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fc4:	e008      	b.n	8008fd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fc6:	f7f9 fa51 	bl	800246c <HAL_GetTick>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d901      	bls.n	8008fd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e006      	b.n	8008fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd8:	4b05      	ldr	r3, [pc, #20]	@ (8008ff0 <RCCEx_PLL2_Config+0x15c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0f0      	beq.n	8008fc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	58024400 	.word	0x58024400
 8008ff4:	ffff0007 	.word	0xffff0007

08008ff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009006:	4b53      	ldr	r3, [pc, #332]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	f003 0303 	and.w	r3, r3, #3
 800900e:	2b03      	cmp	r3, #3
 8009010:	d101      	bne.n	8009016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e099      	b.n	800914a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009016:	4b4f      	ldr	r3, [pc, #316]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a4e      	ldr	r2, [pc, #312]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800901c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009022:	f7f9 fa23 	bl	800246c <HAL_GetTick>
 8009026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009028:	e008      	b.n	800903c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800902a:	f7f9 fa1f 	bl	800246c <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	2b02      	cmp	r3, #2
 8009036:	d901      	bls.n	800903c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e086      	b.n	800914a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800903c:	4b45      	ldr	r3, [pc, #276]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1f0      	bne.n	800902a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009048:	4b42      	ldr	r3, [pc, #264]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800904a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	051b      	lsls	r3, r3, #20
 8009056:	493f      	ldr	r1, [pc, #252]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009058:	4313      	orrs	r3, r2
 800905a:	628b      	str	r3, [r1, #40]	@ 0x28
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	3b01      	subs	r3, #1
 8009062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	3b01      	subs	r3, #1
 800906c:	025b      	lsls	r3, r3, #9
 800906e:	b29b      	uxth	r3, r3
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	3b01      	subs	r3, #1
 8009078:	041b      	lsls	r3, r3, #16
 800907a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	3b01      	subs	r3, #1
 8009086:	061b      	lsls	r3, r3, #24
 8009088:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800908c:	4931      	ldr	r1, [pc, #196]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800908e:	4313      	orrs	r3, r2
 8009090:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009092:	4b30      	ldr	r3, [pc, #192]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009096:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	492d      	ldr	r1, [pc, #180]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	4928      	ldr	r1, [pc, #160]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090b6:	4b27      	ldr	r3, [pc, #156]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	4a26      	ldr	r2, [pc, #152]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090c2:	4b24      	ldr	r3, [pc, #144]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090c6:	4b24      	ldr	r3, [pc, #144]	@ (8009158 <RCCEx_PLL3_Config+0x160>)
 80090c8:	4013      	ands	r3, r2
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	69d2      	ldr	r2, [r2, #28]
 80090ce:	00d2      	lsls	r2, r2, #3
 80090d0:	4920      	ldr	r1, [pc, #128]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090da:	4a1e      	ldr	r2, [pc, #120]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	4a19      	ldr	r2, [pc, #100]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090f4:	e00f      	b.n	8009116 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d106      	bne.n	800910a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090fc:	4b15      	ldr	r3, [pc, #84]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009100:	4a14      	ldr	r2, [pc, #80]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009102:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009108:	e005      	b.n	8009116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800910a:	4b12      	ldr	r3, [pc, #72]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	4a11      	ldr	r2, [pc, #68]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009114:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a0e      	ldr	r2, [pc, #56]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800911c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009122:	f7f9 f9a3 	bl	800246c <HAL_GetTick>
 8009126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009128:	e008      	b.n	800913c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800912a:	f7f9 f99f 	bl	800246c <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e006      	b.n	800914a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800913c:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <RCCEx_PLL3_Config+0x15c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f0      	beq.n	800912a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	58024400 	.word	0x58024400
 8009158:	ffff0007 	.word	0xffff0007

0800915c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e049      	b.n	8009202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f841 	bl	800920a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f000 f9e8 	bl	8009570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800920a:	b480      	push	{r7}
 800920c:	b083      	sub	sp, #12
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
	...

08009220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d001      	beq.n	8009238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e054      	b.n	80092e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a26      	ldr	r2, [pc, #152]	@ (80092f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d022      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009262:	d01d      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a22      	ldr	r2, [pc, #136]	@ (80092f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d018      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a21      	ldr	r2, [pc, #132]	@ (80092f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d013      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a1f      	ldr	r2, [pc, #124]	@ (80092fc <HAL_TIM_Base_Start_IT+0xdc>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00e      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a1e      	ldr	r2, [pc, #120]	@ (8009300 <HAL_TIM_Base_Start_IT+0xe0>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d009      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a1c      	ldr	r2, [pc, #112]	@ (8009304 <HAL_TIM_Base_Start_IT+0xe4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d004      	beq.n	80092a0 <HAL_TIM_Base_Start_IT+0x80>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a1b      	ldr	r2, [pc, #108]	@ (8009308 <HAL_TIM_Base_Start_IT+0xe8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d115      	bne.n	80092cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	4b19      	ldr	r3, [pc, #100]	@ (800930c <HAL_TIM_Base_Start_IT+0xec>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b06      	cmp	r3, #6
 80092b0:	d015      	beq.n	80092de <HAL_TIM_Base_Start_IT+0xbe>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b8:	d011      	beq.n	80092de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0201 	orr.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ca:	e008      	b.n	80092de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f042 0201 	orr.w	r2, r2, #1
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	e000      	b.n	80092e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3714      	adds	r7, #20
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40010000 	.word	0x40010000
 80092f4:	40000400 	.word	0x40000400
 80092f8:	40000800 	.word	0x40000800
 80092fc:	40000c00 	.word	0x40000c00
 8009300:	40010400 	.word	0x40010400
 8009304:	40001800 	.word	0x40001800
 8009308:	40014000 	.word	0x40014000
 800930c:	00010007 	.word	0x00010007

08009310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d020      	beq.n	8009374 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01b      	beq.n	8009374 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f06f 0202 	mvn.w	r2, #2
 8009344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f003 0303 	and.w	r3, r3, #3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f8e9 	bl	8009532 <HAL_TIM_IC_CaptureCallback>
 8009360:	e005      	b.n	800936e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f8db 	bl	800951e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f000 f8ec 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	d020      	beq.n	80093c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d01b      	beq.n	80093c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f06f 0204 	mvn.w	r2, #4
 8009390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d003      	beq.n	80093ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f8c3 	bl	8009532 <HAL_TIM_IC_CaptureCallback>
 80093ac:	e005      	b.n	80093ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f8b5 	bl	800951e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f8c6 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d020      	beq.n	800940c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0308 	and.w	r3, r3, #8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01b      	beq.n	800940c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0208 	mvn.w	r2, #8
 80093dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2204      	movs	r2, #4
 80093e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f89d 	bl	8009532 <HAL_TIM_IC_CaptureCallback>
 80093f8:	e005      	b.n	8009406 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f88f 	bl	800951e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f8a0 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2b00      	cmp	r3, #0
 8009414:	d020      	beq.n	8009458 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01b      	beq.n	8009458 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f06f 0210 	mvn.w	r2, #16
 8009428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2208      	movs	r2, #8
 800942e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f877 	bl	8009532 <HAL_TIM_IC_CaptureCallback>
 8009444:	e005      	b.n	8009452 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f869 	bl	800951e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f87a 	bl	8009546 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00c      	beq.n	800947c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f003 0301 	and.w	r3, r3, #1
 8009468:	2b00      	cmp	r3, #0
 800946a:	d007      	beq.n	800947c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0201 	mvn.w	r2, #1
 8009474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7f8 fa84 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009482:	2b00      	cmp	r3, #0
 8009484:	d104      	bne.n	8009490 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00c      	beq.n	80094aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f913 	bl	80096d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f90b 	bl	80096e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00c      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d007      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f834 	bl	800955a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f003 0320 	and.w	r3, r3, #32
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f06f 0220 	mvn.w	r2, #32
 800950e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f8d3 	bl	80096bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009526:	bf00      	nop
 8009528:	370c      	adds	r7, #12
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009532:	b480      	push	{r7}
 8009534:	b083      	sub	sp, #12
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800953a:	bf00      	nop
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
	...

08009570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a46      	ldr	r2, [pc, #280]	@ (800969c <TIM_Base_SetConfig+0x12c>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d013      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800958e:	d00f      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a43      	ldr	r2, [pc, #268]	@ (80096a0 <TIM_Base_SetConfig+0x130>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00b      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a42      	ldr	r2, [pc, #264]	@ (80096a4 <TIM_Base_SetConfig+0x134>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d007      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a41      	ldr	r2, [pc, #260]	@ (80096a8 <TIM_Base_SetConfig+0x138>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d003      	beq.n	80095b0 <TIM_Base_SetConfig+0x40>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a40      	ldr	r2, [pc, #256]	@ (80096ac <TIM_Base_SetConfig+0x13c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d108      	bne.n	80095c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a35      	ldr	r2, [pc, #212]	@ (800969c <TIM_Base_SetConfig+0x12c>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d01f      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095d0:	d01b      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a32      	ldr	r2, [pc, #200]	@ (80096a0 <TIM_Base_SetConfig+0x130>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d017      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a31      	ldr	r2, [pc, #196]	@ (80096a4 <TIM_Base_SetConfig+0x134>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d013      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a30      	ldr	r2, [pc, #192]	@ (80096a8 <TIM_Base_SetConfig+0x138>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d00f      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2f      	ldr	r2, [pc, #188]	@ (80096ac <TIM_Base_SetConfig+0x13c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d00b      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2e      	ldr	r2, [pc, #184]	@ (80096b0 <TIM_Base_SetConfig+0x140>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d007      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2d      	ldr	r2, [pc, #180]	@ (80096b4 <TIM_Base_SetConfig+0x144>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <TIM_Base_SetConfig+0x9a>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a2c      	ldr	r2, [pc, #176]	@ (80096b8 <TIM_Base_SetConfig+0x148>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d108      	bne.n	800961c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4313      	orrs	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a16      	ldr	r2, [pc, #88]	@ (800969c <TIM_Base_SetConfig+0x12c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d00f      	beq.n	8009668 <TIM_Base_SetConfig+0xf8>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a18      	ldr	r2, [pc, #96]	@ (80096ac <TIM_Base_SetConfig+0x13c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d00b      	beq.n	8009668 <TIM_Base_SetConfig+0xf8>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a17      	ldr	r2, [pc, #92]	@ (80096b0 <TIM_Base_SetConfig+0x140>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d007      	beq.n	8009668 <TIM_Base_SetConfig+0xf8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a16      	ldr	r2, [pc, #88]	@ (80096b4 <TIM_Base_SetConfig+0x144>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d003      	beq.n	8009668 <TIM_Base_SetConfig+0xf8>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a15      	ldr	r2, [pc, #84]	@ (80096b8 <TIM_Base_SetConfig+0x148>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d103      	bne.n	8009670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	691a      	ldr	r2, [r3, #16]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b01      	cmp	r3, #1
 8009680:	d105      	bne.n	800968e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	f023 0201 	bic.w	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	611a      	str	r2, [r3, #16]
  }
}
 800968e:	bf00      	nop
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	40010000 	.word	0x40010000
 80096a0:	40000400 	.word	0x40000400
 80096a4:	40000800 	.word	0x40000800
 80096a8:	40000c00 	.word	0x40000c00
 80096ac:	40010400 	.word	0x40010400
 80096b0:	40014000 	.word	0x40014000
 80096b4:	40014400 	.word	0x40014400
 80096b8:	40014800 	.word	0x40014800

080096bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e042      	b.n	8009790 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009710:	2b00      	cmp	r3, #0
 8009712:	d106      	bne.n	8009722 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7f8 fc95 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2224      	movs	r2, #36	@ 0x24
 8009726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0201 	bic.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f001 faea 	bl	800ad1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fd7f 	bl	800a24c <UART_SetConfig>
 800974e:	4603      	mov	r3, r0
 8009750:	2b01      	cmp	r3, #1
 8009752:	d101      	bne.n	8009758 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e01b      	b.n	8009790 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f042 0201 	orr.w	r2, r2, #1
 8009786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fb69 	bl	800ae60 <UART_CheckIdleState>
 800978e:	4603      	mov	r3, r0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	@ 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	4613      	mov	r3, r2
 80097a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	d167      	bne.n	8009880 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <HAL_UART_Transmit_DMA+0x24>
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e060      	b.n	8009882 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	88fa      	ldrh	r2, [r7, #6]
 80097ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	88fa      	ldrh	r2, [r7, #6]
 80097d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2221      	movs	r2, #33	@ 0x21
 80097e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d028      	beq.n	8009840 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f2:	4a26      	ldr	r2, [pc, #152]	@ (800988c <HAL_UART_Transmit_DMA+0xf4>)
 80097f4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097fa:	4a25      	ldr	r2, [pc, #148]	@ (8009890 <HAL_UART_Transmit_DMA+0xf8>)
 80097fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009802:	4a24      	ldr	r2, [pc, #144]	@ (8009894 <HAL_UART_Transmit_DMA+0xfc>)
 8009804:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800980a:	2200      	movs	r2, #0
 800980c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009816:	4619      	mov	r1, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3328      	adds	r3, #40	@ 0x28
 800981e:	461a      	mov	r2, r3
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	f7f9 faaf 	bl	8002d84 <HAL_DMA_Start_IT>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d009      	beq.n	8009840 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2210      	movs	r2, #16
 8009830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e020      	b.n	8009882 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2240      	movs	r2, #64	@ 0x40
 8009846:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3308      	adds	r3, #8
 800984e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	e853 3f00 	ldrex	r3, [r3]
 8009856:	613b      	str	r3, [r7, #16]
   return(result);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3308      	adds	r3, #8
 8009866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009868:	623a      	str	r2, [r7, #32]
 800986a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986c:	69f9      	ldr	r1, [r7, #28]
 800986e:	6a3a      	ldr	r2, [r7, #32]
 8009870:	e841 2300 	strex	r3, r2, [r1]
 8009874:	61bb      	str	r3, [r7, #24]
   return(result);
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e5      	bne.n	8009848 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	e000      	b.n	8009882 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009880:	2302      	movs	r3, #2
  }
}
 8009882:	4618      	mov	r0, r3
 8009884:	3728      	adds	r7, #40	@ 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	0800b32d 	.word	0x0800b32d
 8009890:	0800b3c3 	.word	0x0800b3c3
 8009894:	0800b545 	.word	0x0800b545

08009898 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	@ 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	4613      	mov	r3, r2
 80098a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098ac:	2b20      	cmp	r3, #32
 80098ae:	d137      	bne.n	8009920 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d002      	beq.n	80098bc <HAL_UART_Receive_DMA+0x24>
 80098b6:	88fb      	ldrh	r3, [r7, #6]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e030      	b.n	8009922 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a18      	ldr	r2, [pc, #96]	@ (800992c <HAL_UART_Receive_DMA+0x94>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d01f      	beq.n	8009910 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d018      	beq.n	8009910 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	613b      	str	r3, [r7, #16]
   return(result);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	69f9      	ldr	r1, [r7, #28]
 8009902:	6a3a      	ldr	r2, [r7, #32]
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	61bb      	str	r3, [r7, #24]
   return(result);
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e6      	bne.n	80098de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009910:	88fb      	ldrh	r3, [r7, #6]
 8009912:	461a      	mov	r2, r3
 8009914:	68b9      	ldr	r1, [r7, #8]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f001 fbba 	bl	800b090 <UART_Start_Receive_DMA>
 800991c:	4603      	mov	r3, r0
 800991e:	e000      	b.n	8009922 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009920:	2302      	movs	r3, #2
  }
}
 8009922:	4618      	mov	r0, r3
 8009924:	3728      	adds	r7, #40	@ 0x28
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	58000c00 	.word	0x58000c00

08009930 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b090      	sub	sp, #64	@ 0x40
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009946:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009952:	2b80      	cmp	r3, #128	@ 0x80
 8009954:	d139      	bne.n	80099ca <HAL_UART_DMAStop+0x9a>
 8009956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009958:	2b21      	cmp	r3, #33	@ 0x21
 800995a:	d136      	bne.n	80099ca <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	e853 3f00 	ldrex	r3, [r3]
 800996a:	61fb      	str	r3, [r7, #28]
   return(result);
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009972:	637b      	str	r3, [r7, #52]	@ 0x34
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3308      	adds	r3, #8
 800997a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800997c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800997e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009984:	e841 2300 	strex	r3, r2, [r1]
 8009988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d1e5      	bne.n	800995c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d015      	beq.n	80099c4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800999c:	4618      	mov	r0, r3
 800999e:	f7f9 fc5b 	bl	8003258 <HAL_DMA_Abort>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fb f8e1 	bl	8004b74 <HAL_DMA_GetError>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	d105      	bne.n	80099c4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2210      	movs	r2, #16
 80099bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e047      	b.n	8009a54 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 fc09 	bl	800b1dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d4:	2b40      	cmp	r3, #64	@ 0x40
 80099d6:	d13c      	bne.n	8009a52 <HAL_UART_DMAStop+0x122>
 80099d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099da:	2b22      	cmp	r3, #34	@ 0x22
 80099dc:	d139      	bne.n	8009a52 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	3308      	adds	r3, #8
 80099e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3308      	adds	r3, #8
 80099fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099fe:	61ba      	str	r2, [r7, #24]
 8009a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6979      	ldr	r1, [r7, #20]
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e5      	bne.n	80099de <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d017      	beq.n	8009a4c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f9 fc18 	bl	8003258 <HAL_DMA_Abort>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00e      	beq.n	8009a4c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fb f89d 	bl	8004b74 <HAL_DMA_GetError>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b20      	cmp	r3, #32
 8009a3e:	d105      	bne.n	8009a4c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2210      	movs	r2, #16
 8009a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e003      	b.n	8009a54 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fc07 	bl	800b260 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3740      	adds	r7, #64	@ 0x40
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009a90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d11b      	bne.n	8009ad0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a9c:	f003 0320 	and.w	r3, r3, #32
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d015      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d105      	bne.n	8009abc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d009      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 8377 	beq.w	800a1b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
      }
      return;
 8009ace:	e371      	b.n	800a1b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8123 	beq.w	8009d20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ada:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ade:	4b8d      	ldr	r3, [pc, #564]	@ (8009d14 <HAL_UART_IRQHandler+0x2b8>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009aea:	4b8b      	ldr	r3, [pc, #556]	@ (8009d18 <HAL_UART_IRQHandler+0x2bc>)
 8009aec:	4013      	ands	r3, r2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 8116 	beq.w	8009d20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d011      	beq.n	8009b24 <HAL_UART_IRQHandler+0xc8>
 8009b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2201      	movs	r2, #1
 8009b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b1a:	f043 0201 	orr.w	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d011      	beq.n	8009b54 <HAL_UART_IRQHandler+0xf8>
 8009b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b34:	f003 0301 	and.w	r3, r3, #1
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2202      	movs	r2, #2
 8009b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4a:	f043 0204 	orr.w	r2, r3, #4
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d011      	beq.n	8009b84 <HAL_UART_IRQHandler+0x128>
 8009b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00b      	beq.n	8009b84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2204      	movs	r2, #4
 8009b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b7a:	f043 0202 	orr.w	r2, r3, #2
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b88:	f003 0308 	and.w	r3, r3, #8
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d017      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b94:	f003 0320 	and.w	r3, r3, #32
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8009d14 <HAL_UART_IRQHandler+0x2b8>)
 8009ba2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2208      	movs	r2, #8
 8009bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb6:	f043 0208 	orr.w	r2, r3, #8
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d012      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x196>
 8009bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00c      	beq.n	8009bf2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be8:	f043 0220 	orr.w	r2, r3, #32
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 82dd 	beq.w	800a1b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c02:	f003 0320 	and.w	r3, r3, #32
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d013      	beq.n	8009c32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c0e:	f003 0320 	and.w	r3, r3, #32
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d105      	bne.n	8009c22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c46:	2b40      	cmp	r3, #64	@ 0x40
 8009c48:	d005      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d054      	beq.n	8009d00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 fb02 	bl	800b260 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c66:	2b40      	cmp	r3, #64	@ 0x40
 8009c68:	d146      	bne.n	8009cf8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3308      	adds	r3, #8
 8009c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3308      	adds	r3, #8
 8009c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ca6:	e841 2300 	strex	r3, r2, [r1]
 8009caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1d9      	bne.n	8009c6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d017      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cc6:	4a15      	ldr	r2, [pc, #84]	@ (8009d1c <HAL_UART_IRQHandler+0x2c0>)
 8009cc8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f9 fddf 	bl	8003894 <HAL_DMA_Abort_IT>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d019      	beq.n	8009d10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009cea:	4610      	mov	r0, r2
 8009cec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cee:	e00f      	b.n	8009d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fa95 	bl	800a220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cf6:	e00b      	b.n	8009d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fa91 	bl	800a220 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cfe:	e007      	b.n	8009d10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fa8d 	bl	800a220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d0e:	e253      	b.n	800a1b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d10:	bf00      	nop
    return;
 8009d12:	e251      	b.n	800a1b8 <HAL_UART_IRQHandler+0x75c>
 8009d14:	10000001 	.word	0x10000001
 8009d18:	04000120 	.word	0x04000120
 8009d1c:	0800b5c5 	.word	0x0800b5c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	f040 81e7 	bne.w	800a0f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d2e:	f003 0310 	and.w	r3, r3, #16
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 81e0 	beq.w	800a0f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 81d9 	beq.w	800a0f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2210      	movs	r2, #16
 8009d4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	f040 8151 	bne.w	800a000 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a96      	ldr	r2, [pc, #600]	@ (8009fc0 <HAL_UART_IRQHandler+0x564>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d068      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a93      	ldr	r2, [pc, #588]	@ (8009fc4 <HAL_UART_IRQHandler+0x568>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d061      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a91      	ldr	r2, [pc, #580]	@ (8009fc8 <HAL_UART_IRQHandler+0x56c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d05a      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a8e      	ldr	r2, [pc, #568]	@ (8009fcc <HAL_UART_IRQHandler+0x570>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d053      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a8c      	ldr	r2, [pc, #560]	@ (8009fd0 <HAL_UART_IRQHandler+0x574>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d04c      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a89      	ldr	r2, [pc, #548]	@ (8009fd4 <HAL_UART_IRQHandler+0x578>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d045      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a87      	ldr	r2, [pc, #540]	@ (8009fd8 <HAL_UART_IRQHandler+0x57c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d03e      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a84      	ldr	r2, [pc, #528]	@ (8009fdc <HAL_UART_IRQHandler+0x580>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d037      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a82      	ldr	r2, [pc, #520]	@ (8009fe0 <HAL_UART_IRQHandler+0x584>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d030      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a7f      	ldr	r2, [pc, #508]	@ (8009fe4 <HAL_UART_IRQHandler+0x588>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d029      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a7d      	ldr	r2, [pc, #500]	@ (8009fe8 <HAL_UART_IRQHandler+0x58c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d022      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a7a      	ldr	r2, [pc, #488]	@ (8009fec <HAL_UART_IRQHandler+0x590>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d01b      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a78      	ldr	r2, [pc, #480]	@ (8009ff0 <HAL_UART_IRQHandler+0x594>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d014      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a75      	ldr	r2, [pc, #468]	@ (8009ff4 <HAL_UART_IRQHandler+0x598>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d00d      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a73      	ldr	r2, [pc, #460]	@ (8009ff8 <HAL_UART_IRQHandler+0x59c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d006      	beq.n	8009e3e <HAL_UART_IRQHandler+0x3e2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a70      	ldr	r2, [pc, #448]	@ (8009ffc <HAL_UART_IRQHandler+0x5a0>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d106      	bne.n	8009e4c <HAL_UART_IRQHandler+0x3f0>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	e005      	b.n	8009e58 <HAL_UART_IRQHandler+0x3fc>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 81ab 	beq.w	800a1bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e70:	429a      	cmp	r2, r3
 8009e72:	f080 81a3 	bcs.w	800a1bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e86:	69db      	ldr	r3, [r3, #28]
 8009e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e8c:	f000 8087 	beq.w	8009f9e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009eba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ebe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1da      	bne.n	8009e90 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eec:	f023 0301 	bic.w	r3, r3, #1
 8009ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3308      	adds	r3, #8
 8009efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009efe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e1      	bne.n	8009eda <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3308      	adds	r3, #8
 8009f1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3308      	adds	r3, #8
 8009f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f42:	e841 2300 	strex	r3, r2, [r1]
 8009f46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1e3      	bne.n	8009f16 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f64:	e853 3f00 	ldrex	r3, [r3]
 8009f68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f6c:	f023 0310 	bic.w	r3, r3, #16
 8009f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f80:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e4      	bne.n	8009f5c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7f9 f95d 	bl	8003258 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f93b 	bl	800a234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fbe:	e0fd      	b.n	800a1bc <HAL_UART_IRQHandler+0x760>
 8009fc0:	40020010 	.word	0x40020010
 8009fc4:	40020028 	.word	0x40020028
 8009fc8:	40020040 	.word	0x40020040
 8009fcc:	40020058 	.word	0x40020058
 8009fd0:	40020070 	.word	0x40020070
 8009fd4:	40020088 	.word	0x40020088
 8009fd8:	400200a0 	.word	0x400200a0
 8009fdc:	400200b8 	.word	0x400200b8
 8009fe0:	40020410 	.word	0x40020410
 8009fe4:	40020428 	.word	0x40020428
 8009fe8:	40020440 	.word	0x40020440
 8009fec:	40020458 	.word	0x40020458
 8009ff0:	40020470 	.word	0x40020470
 8009ff4:	40020488 	.word	0x40020488
 8009ff8:	400204a0 	.word	0x400204a0
 8009ffc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 80cf 	beq.w	800a1c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 80ca 	beq.w	800a1c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a03c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a040:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a04e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a050:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a054:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a05c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1e4      	bne.n	800a02c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	3308      	adds	r3, #8
 800a068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	623b      	str	r3, [r7, #32]
   return(result);
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	4b55      	ldr	r3, [pc, #340]	@ (800a1cc <HAL_UART_IRQHandler+0x770>)
 800a076:	4013      	ands	r3, r2
 800a078:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3308      	adds	r3, #8
 800a082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a086:	633a      	str	r2, [r7, #48]	@ 0x30
 800a088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e3      	bne.n	800a062 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2220      	movs	r2, #32
 800a09e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	e853 3f00 	ldrex	r3, [r3]
 800a0ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0310 	bic.w	r3, r3, #16
 800a0c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0d0:	61fb      	str	r3, [r7, #28]
 800a0d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	69b9      	ldr	r1, [r7, #24]
 800a0d6:	69fa      	ldr	r2, [r7, #28]
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e4      	bne.n	800a0ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f89f 	bl	800a234 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0f6:	e063      	b.n	800a1c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00e      	beq.n	800a122 <HAL_UART_IRQHandler+0x6c6>
 800a104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d008      	beq.n	800a122 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 fa93 	bl	800b646 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a120:	e051      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d014      	beq.n	800a158 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a12e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a13e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d008      	beq.n	800a158 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d03a      	beq.n	800a1c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	4798      	blx	r3
    }
    return;
 800a156:	e035      	b.n	800a1c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	d009      	beq.n	800a178 <HAL_UART_IRQHandler+0x71c>
 800a164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f001 fa3d 	bl	800b5f0 <UART_EndTransmit_IT>
    return;
 800a176:	e026      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d009      	beq.n	800a198 <HAL_UART_IRQHandler+0x73c>
 800a184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a188:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 fa6c 	bl	800b66e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a196:	e016      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a19c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d010      	beq.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
 800a1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da0c      	bge.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f001 fa54 	bl	800b65a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1b2:	e008      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a1b4:	bf00      	nop
 800a1b6:	e006      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a1b8:	bf00      	nop
 800a1ba:	e004      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a1bc:	bf00      	nop
 800a1be:	e002      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a1c0:	bf00      	nop
 800a1c2:	e000      	b.n	800a1c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a1c4:	bf00      	nop
  }
}
 800a1c6:	37e8      	adds	r7, #232	@ 0xe8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	effffffe 	.word	0xeffffffe

0800a1d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	460b      	mov	r3, r1
 800a23e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a24c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a250:	b092      	sub	sp, #72	@ 0x48
 800a252:	af00      	add	r7, sp, #0
 800a254:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	431a      	orrs	r2, r3
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	4313      	orrs	r3, r2
 800a272:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	4bbe      	ldr	r3, [pc, #760]	@ (800a574 <UART_SetConfig+0x328>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	6812      	ldr	r2, [r2, #0]
 800a282:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a284:	430b      	orrs	r3, r1
 800a286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4ab3      	ldr	r2, [pc, #716]	@ (800a578 <UART_SetConfig+0x32c>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d004      	beq.n	800a2b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	6a1b      	ldr	r3, [r3, #32]
 800a2b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	4baf      	ldr	r3, [pc, #700]	@ (800a57c <UART_SetConfig+0x330>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	6812      	ldr	r2, [r2, #0]
 800a2c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	f023 010f 	bic.w	r1, r3, #15
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4aa6      	ldr	r2, [pc, #664]	@ (800a580 <UART_SetConfig+0x334>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d177      	bne.n	800a3dc <UART_SetConfig+0x190>
 800a2ec:	4ba5      	ldr	r3, [pc, #660]	@ (800a584 <UART_SetConfig+0x338>)
 800a2ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2f4:	2b28      	cmp	r3, #40	@ 0x28
 800a2f6:	d86d      	bhi.n	800a3d4 <UART_SetConfig+0x188>
 800a2f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a300 <UART_SetConfig+0xb4>)
 800a2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2fe:	bf00      	nop
 800a300:	0800a3a5 	.word	0x0800a3a5
 800a304:	0800a3d5 	.word	0x0800a3d5
 800a308:	0800a3d5 	.word	0x0800a3d5
 800a30c:	0800a3d5 	.word	0x0800a3d5
 800a310:	0800a3d5 	.word	0x0800a3d5
 800a314:	0800a3d5 	.word	0x0800a3d5
 800a318:	0800a3d5 	.word	0x0800a3d5
 800a31c:	0800a3d5 	.word	0x0800a3d5
 800a320:	0800a3ad 	.word	0x0800a3ad
 800a324:	0800a3d5 	.word	0x0800a3d5
 800a328:	0800a3d5 	.word	0x0800a3d5
 800a32c:	0800a3d5 	.word	0x0800a3d5
 800a330:	0800a3d5 	.word	0x0800a3d5
 800a334:	0800a3d5 	.word	0x0800a3d5
 800a338:	0800a3d5 	.word	0x0800a3d5
 800a33c:	0800a3d5 	.word	0x0800a3d5
 800a340:	0800a3b5 	.word	0x0800a3b5
 800a344:	0800a3d5 	.word	0x0800a3d5
 800a348:	0800a3d5 	.word	0x0800a3d5
 800a34c:	0800a3d5 	.word	0x0800a3d5
 800a350:	0800a3d5 	.word	0x0800a3d5
 800a354:	0800a3d5 	.word	0x0800a3d5
 800a358:	0800a3d5 	.word	0x0800a3d5
 800a35c:	0800a3d5 	.word	0x0800a3d5
 800a360:	0800a3bd 	.word	0x0800a3bd
 800a364:	0800a3d5 	.word	0x0800a3d5
 800a368:	0800a3d5 	.word	0x0800a3d5
 800a36c:	0800a3d5 	.word	0x0800a3d5
 800a370:	0800a3d5 	.word	0x0800a3d5
 800a374:	0800a3d5 	.word	0x0800a3d5
 800a378:	0800a3d5 	.word	0x0800a3d5
 800a37c:	0800a3d5 	.word	0x0800a3d5
 800a380:	0800a3c5 	.word	0x0800a3c5
 800a384:	0800a3d5 	.word	0x0800a3d5
 800a388:	0800a3d5 	.word	0x0800a3d5
 800a38c:	0800a3d5 	.word	0x0800a3d5
 800a390:	0800a3d5 	.word	0x0800a3d5
 800a394:	0800a3d5 	.word	0x0800a3d5
 800a398:	0800a3d5 	.word	0x0800a3d5
 800a39c:	0800a3d5 	.word	0x0800a3d5
 800a3a0:	0800a3cd 	.word	0x0800a3cd
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e222      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e21e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3b4:	2308      	movs	r3, #8
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e21a      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e216      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3c4:	2320      	movs	r3, #32
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ca:	e212      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3cc:	2340      	movs	r3, #64	@ 0x40
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d2:	e20e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3d4:	2380      	movs	r3, #128	@ 0x80
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3da:	e20a      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a69      	ldr	r2, [pc, #420]	@ (800a588 <UART_SetConfig+0x33c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d130      	bne.n	800a448 <UART_SetConfig+0x1fc>
 800a3e6:	4b67      	ldr	r3, [pc, #412]	@ (800a584 <UART_SetConfig+0x338>)
 800a3e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3ea:	f003 0307 	and.w	r3, r3, #7
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d826      	bhi.n	800a440 <UART_SetConfig+0x1f4>
 800a3f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a3f8 <UART_SetConfig+0x1ac>)
 800a3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f8:	0800a411 	.word	0x0800a411
 800a3fc:	0800a419 	.word	0x0800a419
 800a400:	0800a421 	.word	0x0800a421
 800a404:	0800a429 	.word	0x0800a429
 800a408:	0800a431 	.word	0x0800a431
 800a40c:	0800a439 	.word	0x0800a439
 800a410:	2300      	movs	r3, #0
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e1ec      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a418:	2304      	movs	r3, #4
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e1e8      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a420:	2308      	movs	r3, #8
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e1e4      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a428:	2310      	movs	r3, #16
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e1e0      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a430:	2320      	movs	r3, #32
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e1dc      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a438:	2340      	movs	r3, #64	@ 0x40
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e1d8      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a440:	2380      	movs	r3, #128	@ 0x80
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a446:	e1d4      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a4f      	ldr	r2, [pc, #316]	@ (800a58c <UART_SetConfig+0x340>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d130      	bne.n	800a4b4 <UART_SetConfig+0x268>
 800a452:	4b4c      	ldr	r3, [pc, #304]	@ (800a584 <UART_SetConfig+0x338>)
 800a454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a456:	f003 0307 	and.w	r3, r3, #7
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	d826      	bhi.n	800a4ac <UART_SetConfig+0x260>
 800a45e:	a201      	add	r2, pc, #4	@ (adr r2, 800a464 <UART_SetConfig+0x218>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a47d 	.word	0x0800a47d
 800a468:	0800a485 	.word	0x0800a485
 800a46c:	0800a48d 	.word	0x0800a48d
 800a470:	0800a495 	.word	0x0800a495
 800a474:	0800a49d 	.word	0x0800a49d
 800a478:	0800a4a5 	.word	0x0800a4a5
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e1b6      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a484:	2304      	movs	r3, #4
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e1b2      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a48c:	2308      	movs	r3, #8
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e1ae      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a494:	2310      	movs	r3, #16
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e1aa      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a49c:	2320      	movs	r3, #32
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e1a6      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a4a4:	2340      	movs	r3, #64	@ 0x40
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e1a2      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a4ac:	2380      	movs	r3, #128	@ 0x80
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e19e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a35      	ldr	r2, [pc, #212]	@ (800a590 <UART_SetConfig+0x344>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d130      	bne.n	800a520 <UART_SetConfig+0x2d4>
 800a4be:	4b31      	ldr	r3, [pc, #196]	@ (800a584 <UART_SetConfig+0x338>)
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	2b05      	cmp	r3, #5
 800a4c8:	d826      	bhi.n	800a518 <UART_SetConfig+0x2cc>
 800a4ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d0 <UART_SetConfig+0x284>)
 800a4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d0:	0800a4e9 	.word	0x0800a4e9
 800a4d4:	0800a4f1 	.word	0x0800a4f1
 800a4d8:	0800a4f9 	.word	0x0800a4f9
 800a4dc:	0800a501 	.word	0x0800a501
 800a4e0:	0800a509 	.word	0x0800a509
 800a4e4:	0800a511 	.word	0x0800a511
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e180      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e17c      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e178      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a500:	2310      	movs	r3, #16
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e174      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a508:	2320      	movs	r3, #32
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e170      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a510:	2340      	movs	r3, #64	@ 0x40
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e16c      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a518:	2380      	movs	r3, #128	@ 0x80
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e168      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a1b      	ldr	r2, [pc, #108]	@ (800a594 <UART_SetConfig+0x348>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d142      	bne.n	800a5b0 <UART_SetConfig+0x364>
 800a52a:	4b16      	ldr	r3, [pc, #88]	@ (800a584 <UART_SetConfig+0x338>)
 800a52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	2b05      	cmp	r3, #5
 800a534:	d838      	bhi.n	800a5a8 <UART_SetConfig+0x35c>
 800a536:	a201      	add	r2, pc, #4	@ (adr r2, 800a53c <UART_SetConfig+0x2f0>)
 800a538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a53c:	0800a555 	.word	0x0800a555
 800a540:	0800a55d 	.word	0x0800a55d
 800a544:	0800a565 	.word	0x0800a565
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	0800a599 	.word	0x0800a599
 800a550:	0800a5a1 	.word	0x0800a5a1
 800a554:	2300      	movs	r3, #0
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e14a      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a55c:	2304      	movs	r3, #4
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e146      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a564:	2308      	movs	r3, #8
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e142      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a56c:	2310      	movs	r3, #16
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e13e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a574:	cfff69f3 	.word	0xcfff69f3
 800a578:	58000c00 	.word	0x58000c00
 800a57c:	11fff4ff 	.word	0x11fff4ff
 800a580:	40011000 	.word	0x40011000
 800a584:	58024400 	.word	0x58024400
 800a588:	40004400 	.word	0x40004400
 800a58c:	40004800 	.word	0x40004800
 800a590:	40004c00 	.word	0x40004c00
 800a594:	40005000 	.word	0x40005000
 800a598:	2320      	movs	r3, #32
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e128      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a5a0:	2340      	movs	r3, #64	@ 0x40
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e124      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a5a8:	2380      	movs	r3, #128	@ 0x80
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ae:	e120      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4acb      	ldr	r2, [pc, #812]	@ (800a8e4 <UART_SetConfig+0x698>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d176      	bne.n	800a6a8 <UART_SetConfig+0x45c>
 800a5ba:	4bcb      	ldr	r3, [pc, #812]	@ (800a8e8 <UART_SetConfig+0x69c>)
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5c2:	2b28      	cmp	r3, #40	@ 0x28
 800a5c4:	d86c      	bhi.n	800a6a0 <UART_SetConfig+0x454>
 800a5c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5cc <UART_SetConfig+0x380>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a671 	.word	0x0800a671
 800a5d0:	0800a6a1 	.word	0x0800a6a1
 800a5d4:	0800a6a1 	.word	0x0800a6a1
 800a5d8:	0800a6a1 	.word	0x0800a6a1
 800a5dc:	0800a6a1 	.word	0x0800a6a1
 800a5e0:	0800a6a1 	.word	0x0800a6a1
 800a5e4:	0800a6a1 	.word	0x0800a6a1
 800a5e8:	0800a6a1 	.word	0x0800a6a1
 800a5ec:	0800a679 	.word	0x0800a679
 800a5f0:	0800a6a1 	.word	0x0800a6a1
 800a5f4:	0800a6a1 	.word	0x0800a6a1
 800a5f8:	0800a6a1 	.word	0x0800a6a1
 800a5fc:	0800a6a1 	.word	0x0800a6a1
 800a600:	0800a6a1 	.word	0x0800a6a1
 800a604:	0800a6a1 	.word	0x0800a6a1
 800a608:	0800a6a1 	.word	0x0800a6a1
 800a60c:	0800a681 	.word	0x0800a681
 800a610:	0800a6a1 	.word	0x0800a6a1
 800a614:	0800a6a1 	.word	0x0800a6a1
 800a618:	0800a6a1 	.word	0x0800a6a1
 800a61c:	0800a6a1 	.word	0x0800a6a1
 800a620:	0800a6a1 	.word	0x0800a6a1
 800a624:	0800a6a1 	.word	0x0800a6a1
 800a628:	0800a6a1 	.word	0x0800a6a1
 800a62c:	0800a689 	.word	0x0800a689
 800a630:	0800a6a1 	.word	0x0800a6a1
 800a634:	0800a6a1 	.word	0x0800a6a1
 800a638:	0800a6a1 	.word	0x0800a6a1
 800a63c:	0800a6a1 	.word	0x0800a6a1
 800a640:	0800a6a1 	.word	0x0800a6a1
 800a644:	0800a6a1 	.word	0x0800a6a1
 800a648:	0800a6a1 	.word	0x0800a6a1
 800a64c:	0800a691 	.word	0x0800a691
 800a650:	0800a6a1 	.word	0x0800a6a1
 800a654:	0800a6a1 	.word	0x0800a6a1
 800a658:	0800a6a1 	.word	0x0800a6a1
 800a65c:	0800a6a1 	.word	0x0800a6a1
 800a660:	0800a6a1 	.word	0x0800a6a1
 800a664:	0800a6a1 	.word	0x0800a6a1
 800a668:	0800a6a1 	.word	0x0800a6a1
 800a66c:	0800a699 	.word	0x0800a699
 800a670:	2301      	movs	r3, #1
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a676:	e0bc      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a678:	2304      	movs	r3, #4
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67e:	e0b8      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a680:	2308      	movs	r3, #8
 800a682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a686:	e0b4      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a688:	2310      	movs	r3, #16
 800a68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68e:	e0b0      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a690:	2320      	movs	r3, #32
 800a692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a696:	e0ac      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a698:	2340      	movs	r3, #64	@ 0x40
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69e:	e0a8      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a6a0:	2380      	movs	r3, #128	@ 0x80
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a6:	e0a4      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a8f      	ldr	r2, [pc, #572]	@ (800a8ec <UART_SetConfig+0x6a0>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d130      	bne.n	800a714 <UART_SetConfig+0x4c8>
 800a6b2:	4b8d      	ldr	r3, [pc, #564]	@ (800a8e8 <UART_SetConfig+0x69c>)
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	2b05      	cmp	r3, #5
 800a6bc:	d826      	bhi.n	800a70c <UART_SetConfig+0x4c0>
 800a6be:	a201      	add	r2, pc, #4	@ (adr r2, 800a6c4 <UART_SetConfig+0x478>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a6dd 	.word	0x0800a6dd
 800a6c8:	0800a6e5 	.word	0x0800a6e5
 800a6cc:	0800a6ed 	.word	0x0800a6ed
 800a6d0:	0800a6f5 	.word	0x0800a6f5
 800a6d4:	0800a6fd 	.word	0x0800a6fd
 800a6d8:	0800a705 	.word	0x0800a705
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e2:	e086      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a6e4:	2304      	movs	r3, #4
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ea:	e082      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f2:	e07e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fa:	e07a      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a6fc:	2320      	movs	r3, #32
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a702:	e076      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a704:	2340      	movs	r3, #64	@ 0x40
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70a:	e072      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a70c:	2380      	movs	r3, #128	@ 0x80
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a712:	e06e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a75      	ldr	r2, [pc, #468]	@ (800a8f0 <UART_SetConfig+0x6a4>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d130      	bne.n	800a780 <UART_SetConfig+0x534>
 800a71e:	4b72      	ldr	r3, [pc, #456]	@ (800a8e8 <UART_SetConfig+0x69c>)
 800a720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a722:	f003 0307 	and.w	r3, r3, #7
 800a726:	2b05      	cmp	r3, #5
 800a728:	d826      	bhi.n	800a778 <UART_SetConfig+0x52c>
 800a72a:	a201      	add	r2, pc, #4	@ (adr r2, 800a730 <UART_SetConfig+0x4e4>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a749 	.word	0x0800a749
 800a734:	0800a751 	.word	0x0800a751
 800a738:	0800a759 	.word	0x0800a759
 800a73c:	0800a761 	.word	0x0800a761
 800a740:	0800a769 	.word	0x0800a769
 800a744:	0800a771 	.word	0x0800a771
 800a748:	2300      	movs	r3, #0
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74e:	e050      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a750:	2304      	movs	r3, #4
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a756:	e04c      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a758:	2308      	movs	r3, #8
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75e:	e048      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a760:	2310      	movs	r3, #16
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a766:	e044      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a768:	2320      	movs	r3, #32
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76e:	e040      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a770:	2340      	movs	r3, #64	@ 0x40
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e03c      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a778:	2380      	movs	r3, #128	@ 0x80
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e038      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a5b      	ldr	r2, [pc, #364]	@ (800a8f4 <UART_SetConfig+0x6a8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d130      	bne.n	800a7ec <UART_SetConfig+0x5a0>
 800a78a:	4b57      	ldr	r3, [pc, #348]	@ (800a8e8 <UART_SetConfig+0x69c>)
 800a78c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	2b05      	cmp	r3, #5
 800a794:	d826      	bhi.n	800a7e4 <UART_SetConfig+0x598>
 800a796:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <UART_SetConfig+0x550>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7b5 	.word	0x0800a7b5
 800a7a0:	0800a7bd 	.word	0x0800a7bd
 800a7a4:	0800a7c5 	.word	0x0800a7c5
 800a7a8:	0800a7cd 	.word	0x0800a7cd
 800a7ac:	0800a7d5 	.word	0x0800a7d5
 800a7b0:	0800a7dd 	.word	0x0800a7dd
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ba:	e01a      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7bc:	2304      	movs	r3, #4
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7c2:	e016      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7c4:	2308      	movs	r3, #8
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ca:	e012      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7cc:	2310      	movs	r3, #16
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d2:	e00e      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7d4:	2320      	movs	r3, #32
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7da:	e00a      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7dc:	2340      	movs	r3, #64	@ 0x40
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e2:	e006      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7e4:	2380      	movs	r3, #128	@ 0x80
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ea:	e002      	b.n	800a7f2 <UART_SetConfig+0x5a6>
 800a7ec:	2380      	movs	r3, #128	@ 0x80
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a3f      	ldr	r2, [pc, #252]	@ (800a8f4 <UART_SetConfig+0x6a8>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	f040 80f8 	bne.w	800a9ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a802:	2b20      	cmp	r3, #32
 800a804:	dc46      	bgt.n	800a894 <UART_SetConfig+0x648>
 800a806:	2b02      	cmp	r3, #2
 800a808:	f2c0 8082 	blt.w	800a910 <UART_SetConfig+0x6c4>
 800a80c:	3b02      	subs	r3, #2
 800a80e:	2b1e      	cmp	r3, #30
 800a810:	d87e      	bhi.n	800a910 <UART_SetConfig+0x6c4>
 800a812:	a201      	add	r2, pc, #4	@ (adr r2, 800a818 <UART_SetConfig+0x5cc>)
 800a814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a818:	0800a89b 	.word	0x0800a89b
 800a81c:	0800a911 	.word	0x0800a911
 800a820:	0800a8a3 	.word	0x0800a8a3
 800a824:	0800a911 	.word	0x0800a911
 800a828:	0800a911 	.word	0x0800a911
 800a82c:	0800a911 	.word	0x0800a911
 800a830:	0800a8b3 	.word	0x0800a8b3
 800a834:	0800a911 	.word	0x0800a911
 800a838:	0800a911 	.word	0x0800a911
 800a83c:	0800a911 	.word	0x0800a911
 800a840:	0800a911 	.word	0x0800a911
 800a844:	0800a911 	.word	0x0800a911
 800a848:	0800a911 	.word	0x0800a911
 800a84c:	0800a911 	.word	0x0800a911
 800a850:	0800a8c3 	.word	0x0800a8c3
 800a854:	0800a911 	.word	0x0800a911
 800a858:	0800a911 	.word	0x0800a911
 800a85c:	0800a911 	.word	0x0800a911
 800a860:	0800a911 	.word	0x0800a911
 800a864:	0800a911 	.word	0x0800a911
 800a868:	0800a911 	.word	0x0800a911
 800a86c:	0800a911 	.word	0x0800a911
 800a870:	0800a911 	.word	0x0800a911
 800a874:	0800a911 	.word	0x0800a911
 800a878:	0800a911 	.word	0x0800a911
 800a87c:	0800a911 	.word	0x0800a911
 800a880:	0800a911 	.word	0x0800a911
 800a884:	0800a911 	.word	0x0800a911
 800a888:	0800a911 	.word	0x0800a911
 800a88c:	0800a911 	.word	0x0800a911
 800a890:	0800a903 	.word	0x0800a903
 800a894:	2b40      	cmp	r3, #64	@ 0x40
 800a896:	d037      	beq.n	800a908 <UART_SetConfig+0x6bc>
 800a898:	e03a      	b.n	800a910 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a89a:	f7fe f83d 	bl	8008918 <HAL_RCCEx_GetD3PCLK1Freq>
 800a89e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8a0:	e03c      	b.n	800a91c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fe f84c 	bl	8008944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b0:	e034      	b.n	800a91c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8b2:	f107 0318 	add.w	r3, r7, #24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe f998 	bl	8008bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c0:	e02c      	b.n	800a91c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8c2:	4b09      	ldr	r3, [pc, #36]	@ (800a8e8 <UART_SetConfig+0x69c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0320 	and.w	r3, r3, #32
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d016      	beq.n	800a8fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8ce:	4b06      	ldr	r3, [pc, #24]	@ (800a8e8 <UART_SetConfig+0x69c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	08db      	lsrs	r3, r3, #3
 800a8d4:	f003 0303 	and.w	r3, r3, #3
 800a8d8:	4a07      	ldr	r2, [pc, #28]	@ (800a8f8 <UART_SetConfig+0x6ac>)
 800a8da:	fa22 f303 	lsr.w	r3, r2, r3
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8e0:	e01c      	b.n	800a91c <UART_SetConfig+0x6d0>
 800a8e2:	bf00      	nop
 800a8e4:	40011400 	.word	0x40011400
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	40007800 	.word	0x40007800
 800a8f0:	40007c00 	.word	0x40007c00
 800a8f4:	58000c00 	.word	0x58000c00
 800a8f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a8fc:	4b9d      	ldr	r3, [pc, #628]	@ (800ab74 <UART_SetConfig+0x928>)
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a900:	e00c      	b.n	800a91c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a902:	4b9d      	ldr	r3, [pc, #628]	@ (800ab78 <UART_SetConfig+0x92c>)
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a906:	e009      	b.n	800a91c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90e:	e005      	b.n	800a91c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a914:	2301      	movs	r3, #1
 800a916:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a91a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a91c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 81de 	beq.w	800ace0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a928:	4a94      	ldr	r2, [pc, #592]	@ (800ab7c <UART_SetConfig+0x930>)
 800a92a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a92e:	461a      	mov	r2, r3
 800a930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a932:	fbb3 f3f2 	udiv	r3, r3, r2
 800a936:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	4613      	mov	r3, r2
 800a93e:	005b      	lsls	r3, r3, #1
 800a940:	4413      	add	r3, r2
 800a942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a944:	429a      	cmp	r2, r3
 800a946:	d305      	bcc.n	800a954 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a94e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a950:	429a      	cmp	r2, r3
 800a952:	d903      	bls.n	800a95c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a95a:	e1c1      	b.n	800ace0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a95e:	2200      	movs	r2, #0
 800a960:	60bb      	str	r3, [r7, #8]
 800a962:	60fa      	str	r2, [r7, #12]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a968:	4a84      	ldr	r2, [pc, #528]	@ (800ab7c <UART_SetConfig+0x930>)
 800a96a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	2200      	movs	r2, #0
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	607a      	str	r2, [r7, #4]
 800a976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a97a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a97e:	f7f5 fd67 	bl	8000450 <__aeabi_uldivmod>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4610      	mov	r0, r2
 800a988:	4619      	mov	r1, r3
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	f04f 0300 	mov.w	r3, #0
 800a992:	020b      	lsls	r3, r1, #8
 800a994:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a998:	0202      	lsls	r2, r0, #8
 800a99a:	6979      	ldr	r1, [r7, #20]
 800a99c:	6849      	ldr	r1, [r1, #4]
 800a99e:	0849      	lsrs	r1, r1, #1
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	eb12 0804 	adds.w	r8, r2, r4
 800a9aa:	eb43 0905 	adc.w	r9, r3, r5
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	469a      	mov	sl, r3
 800a9b6:	4693      	mov	fp, r2
 800a9b8:	4652      	mov	r2, sl
 800a9ba:	465b      	mov	r3, fp
 800a9bc:	4640      	mov	r0, r8
 800a9be:	4649      	mov	r1, r9
 800a9c0:	f7f5 fd46 	bl	8000450 <__aeabi_uldivmod>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9d2:	d308      	bcc.n	800a9e6 <UART_SetConfig+0x79a>
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9da:	d204      	bcs.n	800a9e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9e2:	60da      	str	r2, [r3, #12]
 800a9e4:	e17c      	b.n	800ace0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9ec:	e178      	b.n	800ace0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9f6:	f040 80c5 	bne.w	800ab84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a9fa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9fe:	2b20      	cmp	r3, #32
 800aa00:	dc48      	bgt.n	800aa94 <UART_SetConfig+0x848>
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	db7b      	blt.n	800aafe <UART_SetConfig+0x8b2>
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d879      	bhi.n	800aafe <UART_SetConfig+0x8b2>
 800aa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa10 <UART_SetConfig+0x7c4>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa9b 	.word	0x0800aa9b
 800aa14:	0800aaa3 	.word	0x0800aaa3
 800aa18:	0800aaff 	.word	0x0800aaff
 800aa1c:	0800aaff 	.word	0x0800aaff
 800aa20:	0800aaab 	.word	0x0800aaab
 800aa24:	0800aaff 	.word	0x0800aaff
 800aa28:	0800aaff 	.word	0x0800aaff
 800aa2c:	0800aaff 	.word	0x0800aaff
 800aa30:	0800aabb 	.word	0x0800aabb
 800aa34:	0800aaff 	.word	0x0800aaff
 800aa38:	0800aaff 	.word	0x0800aaff
 800aa3c:	0800aaff 	.word	0x0800aaff
 800aa40:	0800aaff 	.word	0x0800aaff
 800aa44:	0800aaff 	.word	0x0800aaff
 800aa48:	0800aaff 	.word	0x0800aaff
 800aa4c:	0800aaff 	.word	0x0800aaff
 800aa50:	0800aacb 	.word	0x0800aacb
 800aa54:	0800aaff 	.word	0x0800aaff
 800aa58:	0800aaff 	.word	0x0800aaff
 800aa5c:	0800aaff 	.word	0x0800aaff
 800aa60:	0800aaff 	.word	0x0800aaff
 800aa64:	0800aaff 	.word	0x0800aaff
 800aa68:	0800aaff 	.word	0x0800aaff
 800aa6c:	0800aaff 	.word	0x0800aaff
 800aa70:	0800aaff 	.word	0x0800aaff
 800aa74:	0800aaff 	.word	0x0800aaff
 800aa78:	0800aaff 	.word	0x0800aaff
 800aa7c:	0800aaff 	.word	0x0800aaff
 800aa80:	0800aaff 	.word	0x0800aaff
 800aa84:	0800aaff 	.word	0x0800aaff
 800aa88:	0800aaff 	.word	0x0800aaff
 800aa8c:	0800aaff 	.word	0x0800aaff
 800aa90:	0800aaf1 	.word	0x0800aaf1
 800aa94:	2b40      	cmp	r3, #64	@ 0x40
 800aa96:	d02e      	beq.n	800aaf6 <UART_SetConfig+0x8aa>
 800aa98:	e031      	b.n	800aafe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa9a:	f7fc fcc5 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 800aa9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaa0:	e033      	b.n	800ab0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaa2:	f7fc fcd7 	bl	8007454 <HAL_RCC_GetPCLK2Freq>
 800aaa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aaa8:	e02f      	b.n	800ab0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fd ff48 	bl	8008944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab8:	e027      	b.n	800ab0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaba:	f107 0318 	add.w	r3, r7, #24
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe f894 	bl	8008bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac8:	e01f      	b.n	800ab0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaca:	4b2d      	ldr	r3, [pc, #180]	@ (800ab80 <UART_SetConfig+0x934>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0320 	and.w	r3, r3, #32
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d009      	beq.n	800aaea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aad6:	4b2a      	ldr	r3, [pc, #168]	@ (800ab80 <UART_SetConfig+0x934>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	08db      	lsrs	r3, r3, #3
 800aadc:	f003 0303 	and.w	r3, r3, #3
 800aae0:	4a24      	ldr	r2, [pc, #144]	@ (800ab74 <UART_SetConfig+0x928>)
 800aae2:	fa22 f303 	lsr.w	r3, r2, r3
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aae8:	e00f      	b.n	800ab0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aaea:	4b22      	ldr	r3, [pc, #136]	@ (800ab74 <UART_SetConfig+0x928>)
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaee:	e00c      	b.n	800ab0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaf0:	4b21      	ldr	r3, [pc, #132]	@ (800ab78 <UART_SetConfig+0x92c>)
 800aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf4:	e009      	b.n	800ab0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aafa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aafc:	e005      	b.n	800ab0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aafe:	2300      	movs	r3, #0
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80e7 	beq.w	800ace0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab16:	4a19      	ldr	r2, [pc, #100]	@ (800ab7c <UART_SetConfig+0x930>)
 800ab18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab24:	005a      	lsls	r2, r3, #1
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	441a      	add	r2, r3
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	2b0f      	cmp	r3, #15
 800ab3c:	d916      	bls.n	800ab6c <UART_SetConfig+0x920>
 800ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab44:	d212      	bcs.n	800ab6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	f023 030f 	bic.w	r3, r3, #15
 800ab4e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	085b      	lsrs	r3, r3, #1
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	f003 0307 	and.w	r3, r3, #7
 800ab5a:	b29a      	uxth	r2, r3
 800ab5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ab68:	60da      	str	r2, [r3, #12]
 800ab6a:	e0b9      	b.n	800ace0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab72:	e0b5      	b.n	800ace0 <UART_SetConfig+0xa94>
 800ab74:	03d09000 	.word	0x03d09000
 800ab78:	003d0900 	.word	0x003d0900
 800ab7c:	0801dd84 	.word	0x0801dd84
 800ab80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab84:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	dc49      	bgt.n	800ac20 <UART_SetConfig+0x9d4>
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	db7c      	blt.n	800ac8a <UART_SetConfig+0xa3e>
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	d87a      	bhi.n	800ac8a <UART_SetConfig+0xa3e>
 800ab94:	a201      	add	r2, pc, #4	@ (adr r2, 800ab9c <UART_SetConfig+0x950>)
 800ab96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9a:	bf00      	nop
 800ab9c:	0800ac27 	.word	0x0800ac27
 800aba0:	0800ac2f 	.word	0x0800ac2f
 800aba4:	0800ac8b 	.word	0x0800ac8b
 800aba8:	0800ac8b 	.word	0x0800ac8b
 800abac:	0800ac37 	.word	0x0800ac37
 800abb0:	0800ac8b 	.word	0x0800ac8b
 800abb4:	0800ac8b 	.word	0x0800ac8b
 800abb8:	0800ac8b 	.word	0x0800ac8b
 800abbc:	0800ac47 	.word	0x0800ac47
 800abc0:	0800ac8b 	.word	0x0800ac8b
 800abc4:	0800ac8b 	.word	0x0800ac8b
 800abc8:	0800ac8b 	.word	0x0800ac8b
 800abcc:	0800ac8b 	.word	0x0800ac8b
 800abd0:	0800ac8b 	.word	0x0800ac8b
 800abd4:	0800ac8b 	.word	0x0800ac8b
 800abd8:	0800ac8b 	.word	0x0800ac8b
 800abdc:	0800ac57 	.word	0x0800ac57
 800abe0:	0800ac8b 	.word	0x0800ac8b
 800abe4:	0800ac8b 	.word	0x0800ac8b
 800abe8:	0800ac8b 	.word	0x0800ac8b
 800abec:	0800ac8b 	.word	0x0800ac8b
 800abf0:	0800ac8b 	.word	0x0800ac8b
 800abf4:	0800ac8b 	.word	0x0800ac8b
 800abf8:	0800ac8b 	.word	0x0800ac8b
 800abfc:	0800ac8b 	.word	0x0800ac8b
 800ac00:	0800ac8b 	.word	0x0800ac8b
 800ac04:	0800ac8b 	.word	0x0800ac8b
 800ac08:	0800ac8b 	.word	0x0800ac8b
 800ac0c:	0800ac8b 	.word	0x0800ac8b
 800ac10:	0800ac8b 	.word	0x0800ac8b
 800ac14:	0800ac8b 	.word	0x0800ac8b
 800ac18:	0800ac8b 	.word	0x0800ac8b
 800ac1c:	0800ac7d 	.word	0x0800ac7d
 800ac20:	2b40      	cmp	r3, #64	@ 0x40
 800ac22:	d02e      	beq.n	800ac82 <UART_SetConfig+0xa36>
 800ac24:	e031      	b.n	800ac8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac26:	f7fc fbff 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 800ac2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac2c:	e033      	b.n	800ac96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac2e:	f7fc fc11 	bl	8007454 <HAL_RCC_GetPCLK2Freq>
 800ac32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac34:	e02f      	b.n	800ac96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fd fe82 	bl	8008944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac44:	e027      	b.n	800ac96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac46:	f107 0318 	add.w	r3, r7, #24
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fd ffce 	bl	8008bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac54:	e01f      	b.n	800ac96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac56:	4b2d      	ldr	r3, [pc, #180]	@ (800ad0c <UART_SetConfig+0xac0>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac62:	4b2a      	ldr	r3, [pc, #168]	@ (800ad0c <UART_SetConfig+0xac0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	08db      	lsrs	r3, r3, #3
 800ac68:	f003 0303 	and.w	r3, r3, #3
 800ac6c:	4a28      	ldr	r2, [pc, #160]	@ (800ad10 <UART_SetConfig+0xac4>)
 800ac6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac74:	e00f      	b.n	800ac96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac76:	4b26      	ldr	r3, [pc, #152]	@ (800ad10 <UART_SetConfig+0xac4>)
 800ac78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7a:	e00c      	b.n	800ac96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac7c:	4b25      	ldr	r3, [pc, #148]	@ (800ad14 <UART_SetConfig+0xac8>)
 800ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac80:	e009      	b.n	800ac96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac88:	e005      	b.n	800ac96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac94:	bf00      	nop
    }

    if (pclk != 0U)
 800ac96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d021      	beq.n	800ace0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca0:	4a1d      	ldr	r2, [pc, #116]	@ (800ad18 <UART_SetConfig+0xacc>)
 800aca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca6:	461a      	mov	r2, r3
 800aca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	085b      	lsrs	r3, r3, #1
 800acb4:	441a      	add	r2, r3
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	fbb2 f3f3 	udiv	r3, r2, r3
 800acbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc2:	2b0f      	cmp	r3, #15
 800acc4:	d909      	bls.n	800acda <UART_SetConfig+0xa8e>
 800acc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800accc:	d205      	bcs.n	800acda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60da      	str	r2, [r3, #12]
 800acd8:	e002      	b.n	800ace0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	2201      	movs	r2, #1
 800ace4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2201      	movs	r2, #1
 800acec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	2200      	movs	r2, #0
 800acf4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2200      	movs	r2, #0
 800acfa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800acfc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3748      	adds	r7, #72	@ 0x48
 800ad04:	46bd      	mov	sp, r7
 800ad06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad0a:	bf00      	nop
 800ad0c:	58024400 	.word	0x58024400
 800ad10:	03d09000 	.word	0x03d09000
 800ad14:	003d0900 	.word	0x003d0900
 800ad18:	0801dd84 	.word	0x0801dd84

0800ad1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad28:	f003 0308 	and.w	r3, r3, #8
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00a      	beq.n	800ad46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	430a      	orrs	r2, r1
 800ad66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00a      	beq.n	800ad8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	430a      	orrs	r2, r1
 800ad88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8e:	f003 0304 	and.w	r3, r3, #4
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb0:	f003 0310 	and.w	r3, r3, #16
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00a      	beq.n	800adce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d01a      	beq.n	800ae32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae1a:	d10a      	bne.n	800ae32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	430a      	orrs	r2, r1
 800ae30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	605a      	str	r2, [r3, #4]
  }
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b098      	sub	sp, #96	@ 0x60
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae70:	f7f7 fafc 	bl	800246c <HAL_GetTick>
 800ae74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	d12f      	bne.n	800aee4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f88e 	bl	800afb4 <UART_WaitOnFlagUntilTimeout>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d022      	beq.n	800aee4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aeac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aebc:	647b      	str	r3, [r7, #68]	@ 0x44
 800aebe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e6      	bne.n	800ae9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e063      	b.n	800afac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0304 	and.w	r3, r3, #4
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d149      	bne.n	800af86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aef2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aefa:	2200      	movs	r2, #0
 800aefc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f857 	bl	800afb4 <UART_WaitOnFlagUntilTimeout>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d03c      	beq.n	800af86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	e853 3f00 	ldrex	r3, [r3]
 800af18:	623b      	str	r3, [r7, #32]
   return(result);
 800af1a:	6a3b      	ldr	r3, [r7, #32]
 800af1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800af2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af32:	e841 2300 	strex	r3, r2, [r1]
 800af36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1e6      	bne.n	800af0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3308      	adds	r3, #8
 800af44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	e853 3f00 	ldrex	r3, [r3]
 800af4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f023 0301 	bic.w	r3, r3, #1
 800af54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3308      	adds	r3, #8
 800af5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af5e:	61fa      	str	r2, [r7, #28]
 800af60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af62:	69b9      	ldr	r1, [r7, #24]
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	e841 2300 	strex	r3, r2, [r1]
 800af6a:	617b      	str	r3, [r7, #20]
   return(result);
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1e5      	bne.n	800af3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2220      	movs	r2, #32
 800af76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e012      	b.n	800afac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2220      	movs	r2, #32
 800af92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3758      	adds	r7, #88	@ 0x58
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc4:	e04f      	b.n	800b066 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afcc:	d04b      	beq.n	800b066 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afce:	f7f7 fa4d 	bl	800246c <HAL_GetTick>
 800afd2:	4602      	mov	r2, r0
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d302      	bcc.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x30>
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e04e      	b.n	800b086 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0304 	and.w	r3, r3, #4
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d037      	beq.n	800b066 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b80      	cmp	r3, #128	@ 0x80
 800affa:	d034      	beq.n	800b066 <UART_WaitOnFlagUntilTimeout+0xb2>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b40      	cmp	r3, #64	@ 0x40
 800b000:	d031      	beq.n	800b066 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	f003 0308 	and.w	r3, r3, #8
 800b00c:	2b08      	cmp	r3, #8
 800b00e:	d110      	bne.n	800b032 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2208      	movs	r2, #8
 800b016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f921 	bl	800b260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2208      	movs	r2, #8
 800b022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e029      	b.n	800b086 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b03c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b040:	d111      	bne.n	800b066 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b04a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 f907 	bl	800b260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2220      	movs	r2, #32
 800b056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e00f      	b.n	800b086 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	69da      	ldr	r2, [r3, #28]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4013      	ands	r3, r2
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	429a      	cmp	r2, r3
 800b074:	bf0c      	ite	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	2300      	movne	r3, #0
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	429a      	cmp	r2, r3
 800b082:	d0a0      	beq.n	800afc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b096      	sub	sp, #88	@ 0x58
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	4613      	mov	r3, r2
 800b09c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	88fa      	ldrh	r2, [r7, #6]
 800b0a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2222      	movs	r2, #34	@ 0x22
 800b0b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d02d      	beq.n	800b122 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0cc:	4a40      	ldr	r2, [pc, #256]	@ (800b1d0 <UART_Start_Receive_DMA+0x140>)
 800b0ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0d6:	4a3f      	ldr	r2, [pc, #252]	@ (800b1d4 <UART_Start_Receive_DMA+0x144>)
 800b0d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e0:	4a3d      	ldr	r2, [pc, #244]	@ (800b1d8 <UART_Start_Receive_DMA+0x148>)
 800b0e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3324      	adds	r3, #36	@ 0x24
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b100:	461a      	mov	r2, r3
 800b102:	88fb      	ldrh	r3, [r7, #6]
 800b104:	f7f7 fe3e 	bl	8002d84 <HAL_DMA_Start_IT>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d009      	beq.n	800b122 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2210      	movs	r2, #16
 800b112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2220      	movs	r2, #32
 800b11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e051      	b.n	800b1c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d018      	beq.n	800b15c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b132:	e853 3f00 	ldrex	r3, [r3]
 800b136:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b13e:	657b      	str	r3, [r7, #84]	@ 0x54
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	461a      	mov	r2, r3
 800b146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b14a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b14e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b150:	e841 2300 	strex	r3, r2, [r1]
 800b154:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1e6      	bne.n	800b12a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3308      	adds	r3, #8
 800b162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b166:	e853 3f00 	ldrex	r3, [r3]
 800b16a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16e:	f043 0301 	orr.w	r3, r3, #1
 800b172:	653b      	str	r3, [r7, #80]	@ 0x50
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	3308      	adds	r3, #8
 800b17a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b17c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b17e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b180:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b182:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b184:	e841 2300 	strex	r3, r2, [r1]
 800b188:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1e5      	bne.n	800b15c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	3308      	adds	r3, #8
 800b196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	e853 3f00 	ldrex	r3, [r3]
 800b19e:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3308      	adds	r3, #8
 800b1ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1b0:	623a      	str	r2, [r7, #32]
 800b1b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	69f9      	ldr	r1, [r7, #28]
 800b1b6:	6a3a      	ldr	r2, [r7, #32]
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e5      	bne.n	800b190 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3758      	adds	r7, #88	@ 0x58
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	0800b3df 	.word	0x0800b3df
 800b1d4:	0800b507 	.word	0x0800b507
 800b1d8:	0800b545 	.word	0x0800b545

0800b1dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b08f      	sub	sp, #60	@ 0x3c
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	e853 3f00 	ldrex	r3, [r3]
 800b1f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b204:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b20a:	e841 2300 	strex	r3, r2, [r1]
 800b20e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1e6      	bne.n	800b1e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	3308      	adds	r3, #8
 800b21c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	60bb      	str	r3, [r7, #8]
   return(result);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b22c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	3308      	adds	r3, #8
 800b234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b236:	61ba      	str	r2, [r7, #24]
 800b238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23a:	6979      	ldr	r1, [r7, #20]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	e841 2300 	strex	r3, r2, [r1]
 800b242:	613b      	str	r3, [r7, #16]
   return(result);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1e5      	bne.n	800b216 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2220      	movs	r2, #32
 800b24e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b252:	bf00      	nop
 800b254:	373c      	adds	r7, #60	@ 0x3c
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b095      	sub	sp, #84	@ 0x54
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b270:	e853 3f00 	ldrex	r3, [r3]
 800b274:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b27c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b286:	643b      	str	r3, [r7, #64]	@ 0x40
 800b288:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b28a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b28c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1e6      	bne.n	800b268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a2:	6a3b      	ldr	r3, [r7, #32]
 800b2a4:	e853 3f00 	ldrex	r3, [r3]
 800b2a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b328 <UART_EndRxTransfer+0xc8>)
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3308      	adds	r3, #8
 800b2b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c2:	e841 2300 	strex	r3, r2, [r1]
 800b2c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e5      	bne.n	800b29a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d118      	bne.n	800b308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	f023 0310 	bic.w	r3, r3, #16
 800b2ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2f4:	61bb      	str	r3, [r7, #24]
 800b2f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6979      	ldr	r1, [r7, #20]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	613b      	str	r3, [r7, #16]
   return(result);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e6      	bne.n	800b2d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2220      	movs	r2, #32
 800b30c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b31c:	bf00      	nop
 800b31e:	3754      	adds	r7, #84	@ 0x54
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	effffffe 	.word	0xeffffffe

0800b32c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b090      	sub	sp, #64	@ 0x40
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b338:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b342:	d037      	beq.n	800b3b4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b346:	2200      	movs	r2, #0
 800b348:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3308      	adds	r3, #8
 800b352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	623b      	str	r3, [r7, #32]
   return(result);
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b362:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3308      	adds	r3, #8
 800b36a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b36c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b374:	e841 2300 	strex	r3, r2, [r1]
 800b378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1e5      	bne.n	800b34c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b394:	637b      	str	r3, [r7, #52]	@ 0x34
 800b396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39e:	61fb      	str	r3, [r7, #28]
 800b3a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	69b9      	ldr	r1, [r7, #24]
 800b3a4:	69fa      	ldr	r2, [r7, #28]
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	617b      	str	r3, [r7, #20]
   return(result);
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e6      	bne.n	800b380 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3b2:	e002      	b.n	800b3ba <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b3b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b3b6:	f7fe ff0b 	bl	800a1d0 <HAL_UART_TxCpltCallback>
}
 800b3ba:	bf00      	nop
 800b3bc:	3740      	adds	r7, #64	@ 0x40
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7fe ff07 	bl	800a1e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b09c      	sub	sp, #112	@ 0x70
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3f4:	d071      	beq.n	800b4da <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b3f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b406:	e853 3f00 	ldrex	r3, [r3]
 800b40a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b40e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b412:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	461a      	mov	r2, r3
 800b41a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b41c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b41e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b420:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b424:	e841 2300 	strex	r3, r2, [r1]
 800b428:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e6      	bne.n	800b3fe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3308      	adds	r3, #8
 800b436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b442:	f023 0301 	bic.w	r3, r3, #1
 800b446:	667b      	str	r3, [r7, #100]	@ 0x64
 800b448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b450:	647a      	str	r2, [r7, #68]	@ 0x44
 800b452:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e5      	bne.n	800b430 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	3308      	adds	r3, #8
 800b46a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	623b      	str	r3, [r7, #32]
   return(result);
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b47a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	3308      	adds	r3, #8
 800b482:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b484:	633a      	str	r2, [r7, #48]	@ 0x30
 800b486:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b48a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e5      	bne.n	800b464 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b49a:	2220      	movs	r2, #32
 800b49c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d118      	bne.n	800b4da <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f023 0310 	bic.w	r3, r3, #16
 800b4bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4c6:	61fb      	str	r3, [r7, #28]
 800b4c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	69b9      	ldr	r1, [r7, #24]
 800b4cc:	69fa      	ldr	r2, [r7, #28]
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	617b      	str	r3, [r7, #20]
   return(result);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e6      	bne.n	800b4a8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4dc:	2200      	movs	r2, #0
 800b4de:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d107      	bne.n	800b4f8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4f2:	f7fe fe9f 	bl	800a234 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b4f6:	e002      	b.n	800b4fe <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b4f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b4fa:	f7fe fe7d 	bl	800a1f8 <HAL_UART_RxCpltCallback>
}
 800b4fe:	bf00      	nop
 800b500:	3770      	adds	r7, #112	@ 0x70
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b084      	sub	sp, #16
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b512:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d109      	bne.n	800b536 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b528:	085b      	lsrs	r3, r3, #1
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	4619      	mov	r1, r3
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7fe fe80 	bl	800a234 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b534:	e002      	b.n	800b53c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7fe fe68 	bl	800a20c <HAL_UART_RxHalfCpltCallback>
}
 800b53c:	bf00      	nop
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b550:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b558:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b560:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b56c:	2b80      	cmp	r3, #128	@ 0x80
 800b56e:	d109      	bne.n	800b584 <UART_DMAError+0x40>
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	2b21      	cmp	r3, #33	@ 0x21
 800b574:	d106      	bne.n	800b584 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	2200      	movs	r2, #0
 800b57a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b57e:	6978      	ldr	r0, [r7, #20]
 800b580:	f7ff fe2c 	bl	800b1dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b58e:	2b40      	cmp	r3, #64	@ 0x40
 800b590:	d109      	bne.n	800b5a6 <UART_DMAError+0x62>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2b22      	cmp	r3, #34	@ 0x22
 800b596:	d106      	bne.n	800b5a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b5a0:	6978      	ldr	r0, [r7, #20]
 800b5a2:	f7ff fe5d 	bl	800b260 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ac:	f043 0210 	orr.w	r2, r3, #16
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5b6:	6978      	ldr	r0, [r7, #20]
 800b5b8:	f7fe fe32 	bl	800a220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5bc:	bf00      	nop
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f7fe fe1c 	bl	800a220 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5e8:	bf00      	nop
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	e853 3f00 	ldrex	r3, [r3]
 800b604:	60bb      	str	r3, [r7, #8]
   return(result);
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b60c:	61fb      	str	r3, [r7, #28]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	461a      	mov	r2, r3
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	61bb      	str	r3, [r7, #24]
 800b618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61a:	6979      	ldr	r1, [r7, #20]
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	e841 2300 	strex	r3, r2, [r1]
 800b622:	613b      	str	r3, [r7, #16]
   return(result);
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1e6      	bne.n	800b5f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7fe fdc9 	bl	800a1d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b63e:	bf00      	nop
 800b640:	3720      	adds	r7, #32
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}

0800b646 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b662:	bf00      	nop
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b66e:	b480      	push	{r7}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b690:	2b01      	cmp	r3, #1
 800b692:	d101      	bne.n	800b698 <HAL_UARTEx_DisableFifoMode+0x16>
 800b694:	2302      	movs	r3, #2
 800b696:	e027      	b.n	800b6e8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2224      	movs	r2, #36	@ 0x24
 800b6a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f022 0201 	bic.w	r2, r2, #1
 800b6be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b6c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b704:	2b01      	cmp	r3, #1
 800b706:	d101      	bne.n	800b70c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b708:	2302      	movs	r3, #2
 800b70a:	e02d      	b.n	800b768 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2224      	movs	r2, #36	@ 0x24
 800b718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f022 0201 	bic.w	r2, r2, #1
 800b732:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	430a      	orrs	r2, r1
 800b746:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f84f 	bl	800b7ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b780:	2b01      	cmp	r3, #1
 800b782:	d101      	bne.n	800b788 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b784:	2302      	movs	r3, #2
 800b786:	e02d      	b.n	800b7e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2224      	movs	r2, #36	@ 0x24
 800b794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0201 	bic.w	r2, r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f811 	bl	800b7ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2220      	movs	r2, #32
 800b7d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d108      	bne.n	800b80e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b80c:	e031      	b.n	800b872 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b80e:	2310      	movs	r3, #16
 800b810:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b812:	2310      	movs	r3, #16
 800b814:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	0e5b      	lsrs	r3, r3, #25
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	f003 0307 	and.w	r3, r3, #7
 800b824:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	0f5b      	lsrs	r3, r3, #29
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b836:	7bbb      	ldrb	r3, [r7, #14]
 800b838:	7b3a      	ldrb	r2, [r7, #12]
 800b83a:	4911      	ldr	r1, [pc, #68]	@ (800b880 <UARTEx_SetNbDataToProcess+0x94>)
 800b83c:	5c8a      	ldrb	r2, [r1, r2]
 800b83e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b842:	7b3a      	ldrb	r2, [r7, #12]
 800b844:	490f      	ldr	r1, [pc, #60]	@ (800b884 <UARTEx_SetNbDataToProcess+0x98>)
 800b846:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b848:	fb93 f3f2 	sdiv	r3, r3, r2
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b854:	7bfb      	ldrb	r3, [r7, #15]
 800b856:	7b7a      	ldrb	r2, [r7, #13]
 800b858:	4909      	ldr	r1, [pc, #36]	@ (800b880 <UARTEx_SetNbDataToProcess+0x94>)
 800b85a:	5c8a      	ldrb	r2, [r1, r2]
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b860:	7b7a      	ldrb	r2, [r7, #13]
 800b862:	4908      	ldr	r1, [pc, #32]	@ (800b884 <UARTEx_SetNbDataToProcess+0x98>)
 800b864:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b866:	fb93 f3f2 	sdiv	r3, r3, r2
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	0801dd9c 	.word	0x0801dd9c
 800b884:	0801dda4 	.word	0x0801dda4

0800b888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b888:	b084      	sub	sp, #16
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	f107 001c 	add.w	r0, r7, #28
 800b896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b89a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d121      	bne.n	800b8e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b964 <USB_CoreInit+0xdc>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d105      	bne.n	800b8da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 faaa 	bl	800be34 <USB_CoreReset>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73fb      	strb	r3, [r7, #15]
 800b8e4:	e01b      	b.n	800b91e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fa9e 	bl	800be34 <USB_CoreReset>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b8fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b908:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b910:	e005      	b.n	800b91e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b916:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b91e:	7fbb      	ldrb	r3, [r7, #30]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d116      	bne.n	800b952 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b928:	b29a      	uxth	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b932:	4b0d      	ldr	r3, [pc, #52]	@ (800b968 <USB_CoreInit+0xe0>)
 800b934:	4313      	orrs	r3, r2
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	f043 0206 	orr.w	r2, r3, #6
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	f043 0220 	orr.w	r2, r3, #32
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b952:	7bfb      	ldrb	r3, [r7, #15]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b95e:	b004      	add	sp, #16
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	ffbdffbf 	.word	0xffbdffbf
 800b968:	03ee0000 	.word	0x03ee0000

0800b96c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	689b      	ldr	r3, [r3, #8]
 800b978:	f023 0201 	bic.w	r2, r3, #1
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	370c      	adds	r7, #12
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	460b      	mov	r3, r1
 800b998:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9aa:	78fb      	ldrb	r3, [r7, #3]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d115      	bne.n	800b9dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b9bc:	200a      	movs	r0, #10
 800b9be:	f7f6 fd61 	bl	8002484 <HAL_Delay>
      ms += 10U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	330a      	adds	r3, #10
 800b9c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fa25 	bl	800be18 <USB_GetMode>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d01e      	beq.n	800ba12 <USB_SetCurrentMode+0x84>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b9d8:	d9f0      	bls.n	800b9bc <USB_SetCurrentMode+0x2e>
 800b9da:	e01a      	b.n	800ba12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d115      	bne.n	800ba0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b9ee:	200a      	movs	r0, #10
 800b9f0:	f7f6 fd48 	bl	8002484 <HAL_Delay>
      ms += 10U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	330a      	adds	r3, #10
 800b9f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa0c 	bl	800be18 <USB_GetMode>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <USB_SetCurrentMode+0x84>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba0a:	d9f0      	bls.n	800b9ee <USB_SetCurrentMode+0x60>
 800ba0c:	e001      	b.n	800ba12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e005      	b.n	800ba1e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba16:	d101      	bne.n	800ba1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e000      	b.n	800ba1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba28:	b084      	sub	sp, #16
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b086      	sub	sp, #24
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba42:	2300      	movs	r3, #0
 800ba44:	613b      	str	r3, [r7, #16]
 800ba46:	e009      	b.n	800ba5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	3340      	adds	r3, #64	@ 0x40
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	2200      	movs	r2, #0
 800ba54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	613b      	str	r3, [r7, #16]
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2b0e      	cmp	r3, #14
 800ba60:	d9f2      	bls.n	800ba48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d11c      	bne.n	800baa4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	68fa      	ldr	r2, [r7, #12]
 800ba74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba78:	f043 0302 	orr.w	r3, r3, #2
 800ba7c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba82:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	e005      	b.n	800bab0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bab6:	461a      	mov	r2, r3
 800bab8:	2300      	movs	r3, #0
 800baba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800babc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10d      	bne.n	800bae0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d104      	bne.n	800bad6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bacc:	2100      	movs	r1, #0
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f968 	bl	800bda4 <USB_SetDevSpeed>
 800bad4:	e008      	b.n	800bae8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bad6:	2101      	movs	r1, #1
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f963 	bl	800bda4 <USB_SetDevSpeed>
 800bade:	e003      	b.n	800bae8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bae0:	2103      	movs	r1, #3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f95e 	bl	800bda4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bae8:	2110      	movs	r1, #16
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f8fa 	bl	800bce4 <USB_FlushTxFifo>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800baf6:	2301      	movs	r3, #1
 800baf8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f924 	bl	800bd48 <USB_FlushRxFifo>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb10:	461a      	mov	r2, r3
 800bb12:	2300      	movs	r3, #0
 800bb14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	2300      	movs	r3, #0
 800bb20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb28:	461a      	mov	r2, r3
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb2e:	2300      	movs	r3, #0
 800bb30:	613b      	str	r3, [r7, #16]
 800bb32:	e043      	b.n	800bbbc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	015a      	lsls	r2, r3, #5
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb4a:	d118      	bne.n	800bb7e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb64:	6013      	str	r3, [r2, #0]
 800bb66:	e013      	b.n	800bb90 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb74:	461a      	mov	r2, r3
 800bb76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	e008      	b.n	800bb90 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	015a      	lsls	r2, r3, #5
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	4413      	add	r3, r2
 800bb86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	015a      	lsls	r2, r3, #5
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4413      	add	r3, r2
 800bb98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	2300      	movs	r3, #0
 800bba0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bbb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	613b      	str	r3, [r7, #16]
 800bbbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d3b5      	bcc.n	800bb34 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	613b      	str	r3, [r7, #16]
 800bbcc:	e043      	b.n	800bc56 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbe4:	d118      	bne.n	800bc18 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10a      	bne.n	800bc02 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	e013      	b.n	800bc2a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	e008      	b.n	800bc2a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	015a      	lsls	r2, r3, #5
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	4413      	add	r3, r2
 800bc20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc24:	461a      	mov	r2, r3
 800bc26:	2300      	movs	r3, #0
 800bc28:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	015a      	lsls	r2, r3, #5
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	4413      	add	r3, r2
 800bc32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc36:	461a      	mov	r2, r3
 800bc38:	2300      	movs	r3, #0
 800bc3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc48:	461a      	mov	r2, r3
 800bc4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	3301      	adds	r3, #1
 800bc54:	613b      	str	r3, [r7, #16]
 800bc56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d3b5      	bcc.n	800bbce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc74:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bc82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bc84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d105      	bne.n	800bc98 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	f043 0210 	orr.w	r2, r3, #16
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	699a      	ldr	r2, [r3, #24]
 800bc9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcdc <USB_DevInit+0x2b4>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bca4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d005      	beq.n	800bcb8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	699b      	ldr	r3, [r3, #24]
 800bcb0:	f043 0208 	orr.w	r2, r3, #8
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bcb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d105      	bne.n	800bccc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	699a      	ldr	r2, [r3, #24]
 800bcc4:	4b06      	ldr	r3, [pc, #24]	@ (800bce0 <USB_DevInit+0x2b8>)
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcd8:	b004      	add	sp, #16
 800bcda:	4770      	bx	lr
 800bcdc:	803c3800 	.word	0x803c3800
 800bce0:	40000004 	.word	0x40000004

0800bce4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bcfe:	d901      	bls.n	800bd04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e01b      	b.n	800bd3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	daf2      	bge.n	800bcf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	019b      	lsls	r3, r3, #6
 800bd14:	f043 0220 	orr.w	r2, r3, #32
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd28:	d901      	bls.n	800bd2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e006      	b.n	800bd3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	f003 0320 	and.w	r3, r3, #32
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	d0f0      	beq.n	800bd1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd60:	d901      	bls.n	800bd66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	e018      	b.n	800bd98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	daf2      	bge.n	800bd54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2210      	movs	r2, #16
 800bd76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd84:	d901      	bls.n	800bd8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e006      	b.n	800bd98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	f003 0310 	and.w	r3, r3, #16
 800bd92:	2b10      	cmp	r3, #16
 800bd94:	d0f0      	beq.n	800bd78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bd96:	2300      	movs	r3, #0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	78fb      	ldrb	r3, [r7, #3]
 800bdbe:	68f9      	ldr	r1, [r7, #12]
 800bdc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdc4:	4313      	orrs	r3, r2
 800bdc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr

0800bdd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b085      	sub	sp, #20
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68fa      	ldr	r2, [r7, #12]
 800bdec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bdf0:	f023 0303 	bic.w	r3, r3, #3
 800bdf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be04:	f043 0302 	orr.w	r3, r3, #2
 800be08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3714      	adds	r7, #20
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	f003 0301 	and.w	r3, r3, #1
}
 800be28:	4618      	mov	r0, r3
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be3c:	2300      	movs	r3, #0
 800be3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3301      	adds	r3, #1
 800be44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be4c:	d901      	bls.n	800be52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be4e:	2303      	movs	r3, #3
 800be50:	e01b      	b.n	800be8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	2b00      	cmp	r3, #0
 800be58:	daf2      	bge.n	800be40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be5a:	2300      	movs	r3, #0
 800be5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f043 0201 	orr.w	r2, r3, #1
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be76:	d901      	bls.n	800be7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e006      	b.n	800be8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	f003 0301 	and.w	r3, r3, #1
 800be84:	2b01      	cmp	r3, #1
 800be86:	d0f0      	beq.n	800be6a <USB_CoreReset+0x36>

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
	...

0800be98 <__NVIC_SetPriority>:
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	6039      	str	r1, [r7, #0]
 800bea2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	db0a      	blt.n	800bec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	b2da      	uxtb	r2, r3
 800beb0:	490c      	ldr	r1, [pc, #48]	@ (800bee4 <__NVIC_SetPriority+0x4c>)
 800beb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beb6:	0112      	lsls	r2, r2, #4
 800beb8:	b2d2      	uxtb	r2, r2
 800beba:	440b      	add	r3, r1
 800bebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bec0:	e00a      	b.n	800bed8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	4908      	ldr	r1, [pc, #32]	@ (800bee8 <__NVIC_SetPriority+0x50>)
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	3b04      	subs	r3, #4
 800bed0:	0112      	lsls	r2, r2, #4
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	440b      	add	r3, r1
 800bed6:	761a      	strb	r2, [r3, #24]
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	e000e100 	.word	0xe000e100
 800bee8:	e000ed00 	.word	0xe000ed00

0800beec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bef0:	4b05      	ldr	r3, [pc, #20]	@ (800bf08 <SysTick_Handler+0x1c>)
 800bef2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bef4:	f002 f97e 	bl	800e1f4 <xTaskGetSchedulerState>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b01      	cmp	r3, #1
 800befc:	d001      	beq.n	800bf02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800befe:	f000 fd9b 	bl	800ca38 <xPortSysTickHandler>
  }
}
 800bf02:	bf00      	nop
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	e000e010 	.word	0xe000e010

0800bf0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf10:	2100      	movs	r1, #0
 800bf12:	f06f 0004 	mvn.w	r0, #4
 800bf16:	f7ff ffbf 	bl	800be98 <__NVIC_SetPriority>
#endif
}
 800bf1a:	bf00      	nop
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf26:	f3ef 8305 	mrs	r3, IPSR
 800bf2a:	603b      	str	r3, [r7, #0]
  return(result);
 800bf2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d003      	beq.n	800bf3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bf32:	f06f 0305 	mvn.w	r3, #5
 800bf36:	607b      	str	r3, [r7, #4]
 800bf38:	e00c      	b.n	800bf54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bf3a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf64 <osKernelInitialize+0x44>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d105      	bne.n	800bf4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf42:	4b08      	ldr	r3, [pc, #32]	@ (800bf64 <osKernelInitialize+0x44>)
 800bf44:	2201      	movs	r2, #1
 800bf46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	607b      	str	r3, [r7, #4]
 800bf4c:	e002      	b.n	800bf54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf54:	687b      	ldr	r3, [r7, #4]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	2400a518 	.word	0x2400a518

0800bf68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf6e:	f3ef 8305 	mrs	r3, IPSR
 800bf72:	603b      	str	r3, [r7, #0]
  return(result);
 800bf74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf7a:	f06f 0305 	mvn.w	r3, #5
 800bf7e:	607b      	str	r3, [r7, #4]
 800bf80:	e010      	b.n	800bfa4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bf82:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb0 <osKernelStart+0x48>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d109      	bne.n	800bf9e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bf8a:	f7ff ffbf 	bl	800bf0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bf8e:	4b08      	ldr	r3, [pc, #32]	@ (800bfb0 <osKernelStart+0x48>)
 800bf90:	2202      	movs	r2, #2
 800bf92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bf94:	f001 fcb8 	bl	800d908 <vTaskStartScheduler>
      stat = osOK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	607b      	str	r3, [r7, #4]
 800bf9c:	e002      	b.n	800bfa4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfa2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfa4:	687b      	ldr	r3, [r7, #4]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	2400a518 	.word	0x2400a518

0800bfb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08e      	sub	sp, #56	@ 0x38
 800bfb8:	af04      	add	r7, sp, #16
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc4:	f3ef 8305 	mrs	r3, IPSR
 800bfc8:	617b      	str	r3, [r7, #20]
  return(result);
 800bfca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d17e      	bne.n	800c0ce <osThreadNew+0x11a>
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d07b      	beq.n	800c0ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bfd6:	2380      	movs	r3, #128	@ 0x80
 800bfd8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bfda:	2318      	movs	r3, #24
 800bfdc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bfe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfe6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d045      	beq.n	800c07a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <osThreadNew+0x48>
        name = attr->name;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d008      	beq.n	800c022 <osThreadNew+0x6e>
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	2b38      	cmp	r3, #56	@ 0x38
 800c014:	d805      	bhi.n	800c022 <osThreadNew+0x6e>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <osThreadNew+0x72>
        return (NULL);
 800c022:	2300      	movs	r3, #0
 800c024:	e054      	b.n	800c0d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d003      	beq.n	800c036 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	089b      	lsrs	r3, r3, #2
 800c034:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00e      	beq.n	800c05c <osThreadNew+0xa8>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	2b5b      	cmp	r3, #91	@ 0x5b
 800c044:	d90a      	bls.n	800c05c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d006      	beq.n	800c05c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <osThreadNew+0xa8>
        mem = 1;
 800c056:	2301      	movs	r3, #1
 800c058:	61bb      	str	r3, [r7, #24]
 800c05a:	e010      	b.n	800c07e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10c      	bne.n	800c07e <osThreadNew+0xca>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d108      	bne.n	800c07e <osThreadNew+0xca>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d104      	bne.n	800c07e <osThreadNew+0xca>
          mem = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	61bb      	str	r3, [r7, #24]
 800c078:	e001      	b.n	800c07e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d110      	bne.n	800c0a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c08c:	9202      	str	r2, [sp, #8]
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	6a3a      	ldr	r2, [r7, #32]
 800c098:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f001 fa58 	bl	800d550 <xTaskCreateStatic>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	613b      	str	r3, [r7, #16]
 800c0a4:	e013      	b.n	800c0ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d110      	bne.n	800c0ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0ac:	6a3b      	ldr	r3, [r7, #32]
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	f107 0310 	add.w	r3, r7, #16
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	9300      	str	r3, [sp, #0]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 faa6 	bl	800d610 <xTaskCreate>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d001      	beq.n	800c0ce <osThreadNew+0x11a>
            hTask = NULL;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c0ce:	693b      	ldr	r3, [r7, #16]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3728      	adds	r7, #40	@ 0x28
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e0:	f3ef 8305 	mrs	r3, IPSR
 800c0e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c0e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d003      	beq.n	800c0f4 <osDelay+0x1c>
    stat = osErrorISR;
 800c0ec:	f06f 0305 	mvn.w	r3, #5
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	e007      	b.n	800c104 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f001 fbcc 	bl	800d89c <vTaskDelay>
    }
  }

  return (stat);
 800c104:	68fb      	ldr	r3, [r7, #12]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4a07      	ldr	r2, [pc, #28]	@ (800c13c <vApplicationGetIdleTaskMemory+0x2c>)
 800c120:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	4a06      	ldr	r2, [pc, #24]	@ (800c140 <vApplicationGetIdleTaskMemory+0x30>)
 800c126:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2280      	movs	r2, #128	@ 0x80
 800c12c:	601a      	str	r2, [r3, #0]
}
 800c12e:	bf00      	nop
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	2400a51c 	.word	0x2400a51c
 800c140:	2400a578 	.word	0x2400a578

0800c144 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	4a07      	ldr	r2, [pc, #28]	@ (800c170 <vApplicationGetTimerTaskMemory+0x2c>)
 800c154:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	4a06      	ldr	r2, [pc, #24]	@ (800c174 <vApplicationGetTimerTaskMemory+0x30>)
 800c15a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c162:	601a      	str	r2, [r3, #0]
}
 800c164:	bf00      	nop
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	2400a778 	.word	0x2400a778
 800c174:	2400a7d4 	.word	0x2400a7d4

0800c178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b08a      	sub	sp, #40	@ 0x28
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c180:	2300      	movs	r3, #0
 800c182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c184:	f001 fc28 	bl	800d9d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c188:	4b5c      	ldr	r3, [pc, #368]	@ (800c2fc <pvPortMalloc+0x184>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c190:	f000 f924 	bl	800c3dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c194:	4b5a      	ldr	r3, [pc, #360]	@ (800c300 <pvPortMalloc+0x188>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4013      	ands	r3, r2
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f040 8095 	bne.w	800c2cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01e      	beq.n	800c1e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c1a8:	2208      	movs	r2, #8
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f003 0307 	and.w	r3, r3, #7
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d015      	beq.n	800c1e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f023 0307 	bic.w	r3, r3, #7
 800c1c0:	3308      	adds	r3, #8
 800c1c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f003 0307 	and.w	r3, r3, #7
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00b      	beq.n	800c1e6 <pvPortMalloc+0x6e>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	617b      	str	r3, [r7, #20]
}
 800c1e0:	bf00      	nop
 800c1e2:	bf00      	nop
 800c1e4:	e7fd      	b.n	800c1e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d06f      	beq.n	800c2cc <pvPortMalloc+0x154>
 800c1ec:	4b45      	ldr	r3, [pc, #276]	@ (800c304 <pvPortMalloc+0x18c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d86a      	bhi.n	800c2cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1f6:	4b44      	ldr	r3, [pc, #272]	@ (800c308 <pvPortMalloc+0x190>)
 800c1f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1fa:	4b43      	ldr	r3, [pc, #268]	@ (800c308 <pvPortMalloc+0x190>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c200:	e004      	b.n	800c20c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	429a      	cmp	r2, r3
 800c214:	d903      	bls.n	800c21e <pvPortMalloc+0xa6>
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1f1      	bne.n	800c202 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c21e:	4b37      	ldr	r3, [pc, #220]	@ (800c2fc <pvPortMalloc+0x184>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c224:	429a      	cmp	r2, r3
 800c226:	d051      	beq.n	800c2cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2208      	movs	r2, #8
 800c22e:	4413      	add	r3, r2
 800c230:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	6a3b      	ldr	r3, [r7, #32]
 800c238:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	1ad2      	subs	r2, r2, r3
 800c242:	2308      	movs	r3, #8
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	429a      	cmp	r2, r3
 800c248:	d920      	bls.n	800c28c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c24a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4413      	add	r3, r2
 800c250:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	f003 0307 	and.w	r3, r3, #7
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00b      	beq.n	800c274 <pvPortMalloc+0xfc>
	__asm volatile
 800c25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	613b      	str	r3, [r7, #16]
}
 800c26e:	bf00      	nop
 800c270:	bf00      	nop
 800c272:	e7fd      	b.n	800c270 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c276:	685a      	ldr	r2, [r3, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	1ad2      	subs	r2, r2, r3
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c286:	69b8      	ldr	r0, [r7, #24]
 800c288:	f000 f90a 	bl	800c4a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c28c:	4b1d      	ldr	r3, [pc, #116]	@ (800c304 <pvPortMalloc+0x18c>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	4a1b      	ldr	r2, [pc, #108]	@ (800c304 <pvPortMalloc+0x18c>)
 800c298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c29a:	4b1a      	ldr	r3, [pc, #104]	@ (800c304 <pvPortMalloc+0x18c>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	4b1b      	ldr	r3, [pc, #108]	@ (800c30c <pvPortMalloc+0x194>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d203      	bcs.n	800c2ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2a6:	4b17      	ldr	r3, [pc, #92]	@ (800c304 <pvPortMalloc+0x18c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a18      	ldr	r2, [pc, #96]	@ (800c30c <pvPortMalloc+0x194>)
 800c2ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b0:	685a      	ldr	r2, [r3, #4]
 800c2b2:	4b13      	ldr	r3, [pc, #76]	@ (800c300 <pvPortMalloc+0x188>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2be:	2200      	movs	r2, #0
 800c2c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2c2:	4b13      	ldr	r3, [pc, #76]	@ (800c310 <pvPortMalloc+0x198>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	4a11      	ldr	r2, [pc, #68]	@ (800c310 <pvPortMalloc+0x198>)
 800c2ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2cc:	f001 fb92 	bl	800d9f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	f003 0307 	and.w	r3, r3, #7
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00b      	beq.n	800c2f2 <pvPortMalloc+0x17a>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	60fb      	str	r3, [r7, #12]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <pvPortMalloc+0x176>
	return pvReturn;
 800c2f2:	69fb      	ldr	r3, [r7, #28]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3728      	adds	r7, #40	@ 0x28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	2400e7dc 	.word	0x2400e7dc
 800c300:	2400e7f0 	.word	0x2400e7f0
 800c304:	2400e7e0 	.word	0x2400e7e0
 800c308:	2400e7d4 	.word	0x2400e7d4
 800c30c:	2400e7e4 	.word	0x2400e7e4
 800c310:	2400e7e8 	.word	0x2400e7e8

0800c314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d04f      	beq.n	800c3c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c326:	2308      	movs	r3, #8
 800c328:	425b      	negs	r3, r3
 800c32a:	697a      	ldr	r2, [r7, #20]
 800c32c:	4413      	add	r3, r2
 800c32e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	4b25      	ldr	r3, [pc, #148]	@ (800c3d0 <vPortFree+0xbc>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4013      	ands	r3, r2
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10b      	bne.n	800c35a <vPortFree+0x46>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	60fb      	str	r3, [r7, #12]
}
 800c354:	bf00      	nop
 800c356:	bf00      	nop
 800c358:	e7fd      	b.n	800c356 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00b      	beq.n	800c37a <vPortFree+0x66>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	60bb      	str	r3, [r7, #8]
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	e7fd      	b.n	800c376 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b14      	ldr	r3, [pc, #80]	@ (800c3d0 <vPortFree+0xbc>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4013      	ands	r3, r2
 800c384:	2b00      	cmp	r3, #0
 800c386:	d01e      	beq.n	800c3c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d11a      	bne.n	800c3c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	685a      	ldr	r2, [r3, #4]
 800c394:	4b0e      	ldr	r3, [pc, #56]	@ (800c3d0 <vPortFree+0xbc>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	43db      	mvns	r3, r3
 800c39a:	401a      	ands	r2, r3
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3a0:	f001 fb1a 	bl	800d9d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	685a      	ldr	r2, [r3, #4]
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d4 <vPortFree+0xc0>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	4a09      	ldr	r2, [pc, #36]	@ (800c3d4 <vPortFree+0xc0>)
 800c3b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3b2:	6938      	ldr	r0, [r7, #16]
 800c3b4:	f000 f874 	bl	800c4a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3b8:	4b07      	ldr	r3, [pc, #28]	@ (800c3d8 <vPortFree+0xc4>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	4a06      	ldr	r2, [pc, #24]	@ (800c3d8 <vPortFree+0xc4>)
 800c3c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3c2:	f001 fb17 	bl	800d9f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3c6:	bf00      	nop
 800c3c8:	3718      	adds	r7, #24
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	2400e7f0 	.word	0x2400e7f0
 800c3d4:	2400e7e0 	.word	0x2400e7e0
 800c3d8:	2400e7ec 	.word	0x2400e7ec

0800c3dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c3e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3e8:	4b27      	ldr	r3, [pc, #156]	@ (800c488 <prvHeapInit+0xac>)
 800c3ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00c      	beq.n	800c410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3307      	adds	r3, #7
 800c3fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	4a1f      	ldr	r2, [pc, #124]	@ (800c488 <prvHeapInit+0xac>)
 800c40c:	4413      	add	r3, r2
 800c40e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c414:	4a1d      	ldr	r2, [pc, #116]	@ (800c48c <prvHeapInit+0xb0>)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c41a:	4b1c      	ldr	r3, [pc, #112]	@ (800c48c <prvHeapInit+0xb0>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	4413      	add	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c428:	2208      	movs	r2, #8
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f023 0307 	bic.w	r3, r3, #7
 800c436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4a15      	ldr	r2, [pc, #84]	@ (800c490 <prvHeapInit+0xb4>)
 800c43c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c43e:	4b14      	ldr	r3, [pc, #80]	@ (800c490 <prvHeapInit+0xb4>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2200      	movs	r2, #0
 800c444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c446:	4b12      	ldr	r3, [pc, #72]	@ (800c490 <prvHeapInit+0xb4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	1ad2      	subs	r2, r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c45c:	4b0c      	ldr	r3, [pc, #48]	@ (800c490 <prvHeapInit+0xb4>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4a0a      	ldr	r2, [pc, #40]	@ (800c494 <prvHeapInit+0xb8>)
 800c46a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	4a09      	ldr	r2, [pc, #36]	@ (800c498 <prvHeapInit+0xbc>)
 800c472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c474:	4b09      	ldr	r3, [pc, #36]	@ (800c49c <prvHeapInit+0xc0>)
 800c476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	2400abd4 	.word	0x2400abd4
 800c48c:	2400e7d4 	.word	0x2400e7d4
 800c490:	2400e7dc 	.word	0x2400e7dc
 800c494:	2400e7e4 	.word	0x2400e7e4
 800c498:	2400e7e0 	.word	0x2400e7e0
 800c49c:	2400e7f0 	.word	0x2400e7f0

0800c4a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4a8:	4b28      	ldr	r3, [pc, #160]	@ (800c54c <prvInsertBlockIntoFreeList+0xac>)
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	e002      	b.n	800c4b4 <prvInsertBlockIntoFreeList+0x14>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d8f7      	bhi.n	800c4ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d108      	bne.n	800c4e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	441a      	add	r2, r3
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	441a      	add	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d118      	bne.n	800c528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	4b15      	ldr	r3, [pc, #84]	@ (800c550 <prvInsertBlockIntoFreeList+0xb0>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d00d      	beq.n	800c51e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	441a      	add	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	681a      	ldr	r2, [r3, #0]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	e008      	b.n	800c530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c51e:	4b0c      	ldr	r3, [pc, #48]	@ (800c550 <prvInsertBlockIntoFreeList+0xb0>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	e003      	b.n	800c530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d002      	beq.n	800c53e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	2400e7d4 	.word	0x2400e7d4
 800c550:	2400e7dc 	.word	0x2400e7dc

0800c554 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f103 0208 	add.w	r2, r3, #8
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c56c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f103 0208 	add.w	r2, r3, #8
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f103 0208 	add.w	r2, r3, #8
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5a2:	bf00      	nop
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b085      	sub	sp, #20
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	685b      	ldr	r3, [r3, #4]
 800c5bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	601a      	str	r2, [r3, #0]
}
 800c5ea:	bf00      	nop
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c60c:	d103      	bne.n	800c616 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	60fb      	str	r3, [r7, #12]
 800c614:	e00c      	b.n	800c630 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	3308      	adds	r3, #8
 800c61a:	60fb      	str	r3, [r7, #12]
 800c61c:	e002      	b.n	800c624 <vListInsert+0x2e>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	60fb      	str	r3, [r7, #12]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d2f6      	bcs.n	800c61e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	683a      	ldr	r2, [r7, #0]
 800c64a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	601a      	str	r2, [r3, #0]
}
 800c65c:	bf00      	nop
 800c65e:	3714      	adds	r7, #20
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	6892      	ldr	r2, [r2, #8]
 800c67e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6852      	ldr	r2, [r2, #4]
 800c688:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d103      	bne.n	800c69c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689a      	ldr	r2, [r3, #8]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	1e5a      	subs	r2, r3, #1
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3b04      	subs	r3, #4
 800c6cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	3b04      	subs	r3, #4
 800c6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f023 0201 	bic.w	r2, r3, #1
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	3b04      	subs	r3, #4
 800c6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c6ec:	4a0c      	ldr	r2, [pc, #48]	@ (800c720 <pxPortInitialiseStack+0x64>)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	3b14      	subs	r3, #20
 800c6f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3b04      	subs	r3, #4
 800c702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f06f 0202 	mvn.w	r2, #2
 800c70a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3b20      	subs	r3, #32
 800c710:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c712:	68fb      	ldr	r3, [r7, #12]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	0800c725 	.word	0x0800c725

0800c724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c72e:	4b13      	ldr	r3, [pc, #76]	@ (800c77c <prvTaskExitError+0x58>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c736:	d00b      	beq.n	800c750 <prvTaskExitError+0x2c>
	__asm volatile
 800c738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73c:	f383 8811 	msr	BASEPRI, r3
 800c740:	f3bf 8f6f 	isb	sy
 800c744:	f3bf 8f4f 	dsb	sy
 800c748:	60fb      	str	r3, [r7, #12]
}
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
 800c74e:	e7fd      	b.n	800c74c <prvTaskExitError+0x28>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	60bb      	str	r3, [r7, #8]
}
 800c762:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c764:	bf00      	nop
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d0fc      	beq.n	800c766 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c76c:	bf00      	nop
 800c76e:	bf00      	nop
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	24000014 	.word	0x24000014

0800c780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c780:	4b07      	ldr	r3, [pc, #28]	@ (800c7a0 <pxCurrentTCBConst2>)
 800c782:	6819      	ldr	r1, [r3, #0]
 800c784:	6808      	ldr	r0, [r1, #0]
 800c786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78a:	f380 8809 	msr	PSP, r0
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f04f 0000 	mov.w	r0, #0
 800c796:	f380 8811 	msr	BASEPRI, r0
 800c79a:	4770      	bx	lr
 800c79c:	f3af 8000 	nop.w

0800c7a0 <pxCurrentTCBConst2>:
 800c7a0:	2400e83c 	.word	0x2400e83c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7a4:	bf00      	nop
 800c7a6:	bf00      	nop

0800c7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7a8:	4808      	ldr	r0, [pc, #32]	@ (800c7cc <prvPortStartFirstTask+0x24>)
 800c7aa:	6800      	ldr	r0, [r0, #0]
 800c7ac:	6800      	ldr	r0, [r0, #0]
 800c7ae:	f380 8808 	msr	MSP, r0
 800c7b2:	f04f 0000 	mov.w	r0, #0
 800c7b6:	f380 8814 	msr	CONTROL, r0
 800c7ba:	b662      	cpsie	i
 800c7bc:	b661      	cpsie	f
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	df00      	svc	0
 800c7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7ca:	bf00      	nop
 800c7cc:	e000ed08 	.word	0xe000ed08

0800c7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b086      	sub	sp, #24
 800c7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c7d6:	4b47      	ldr	r3, [pc, #284]	@ (800c8f4 <xPortStartScheduler+0x124>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a47      	ldr	r2, [pc, #284]	@ (800c8f8 <xPortStartScheduler+0x128>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d10b      	bne.n	800c7f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	613b      	str	r3, [r7, #16]
}
 800c7f2:	bf00      	nop
 800c7f4:	bf00      	nop
 800c7f6:	e7fd      	b.n	800c7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c7f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c8f4 <xPortStartScheduler+0x124>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c8fc <xPortStartScheduler+0x12c>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d10b      	bne.n	800c81a <xPortStartScheduler+0x4a>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	60fb      	str	r3, [r7, #12]
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop
 800c818:	e7fd      	b.n	800c816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c81a:	4b39      	ldr	r3, [pc, #228]	@ (800c900 <xPortStartScheduler+0x130>)
 800c81c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	b2db      	uxtb	r3, r3
 800c824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	22ff      	movs	r2, #255	@ 0xff
 800c82a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	b2db      	uxtb	r3, r3
 800c832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c834:	78fb      	ldrb	r3, [r7, #3]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	4b31      	ldr	r3, [pc, #196]	@ (800c904 <xPortStartScheduler+0x134>)
 800c840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c842:	4b31      	ldr	r3, [pc, #196]	@ (800c908 <xPortStartScheduler+0x138>)
 800c844:	2207      	movs	r2, #7
 800c846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c848:	e009      	b.n	800c85e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c84a:	4b2f      	ldr	r3, [pc, #188]	@ (800c908 <xPortStartScheduler+0x138>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	3b01      	subs	r3, #1
 800c850:	4a2d      	ldr	r2, [pc, #180]	@ (800c908 <xPortStartScheduler+0x138>)
 800c852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c85e:	78fb      	ldrb	r3, [r7, #3]
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c866:	2b80      	cmp	r3, #128	@ 0x80
 800c868:	d0ef      	beq.n	800c84a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c86a:	4b27      	ldr	r3, [pc, #156]	@ (800c908 <xPortStartScheduler+0x138>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f1c3 0307 	rsb	r3, r3, #7
 800c872:	2b04      	cmp	r3, #4
 800c874:	d00b      	beq.n	800c88e <xPortStartScheduler+0xbe>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	60bb      	str	r3, [r7, #8]
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	e7fd      	b.n	800c88a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c88e:	4b1e      	ldr	r3, [pc, #120]	@ (800c908 <xPortStartScheduler+0x138>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	021b      	lsls	r3, r3, #8
 800c894:	4a1c      	ldr	r2, [pc, #112]	@ (800c908 <xPortStartScheduler+0x138>)
 800c896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c898:	4b1b      	ldr	r3, [pc, #108]	@ (800c908 <xPortStartScheduler+0x138>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c8a0:	4a19      	ldr	r2, [pc, #100]	@ (800c908 <xPortStartScheduler+0x138>)
 800c8a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	b2da      	uxtb	r2, r3
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8ac:	4b17      	ldr	r3, [pc, #92]	@ (800c90c <xPortStartScheduler+0x13c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a16      	ldr	r2, [pc, #88]	@ (800c90c <xPortStartScheduler+0x13c>)
 800c8b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c8b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8b8:	4b14      	ldr	r3, [pc, #80]	@ (800c90c <xPortStartScheduler+0x13c>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a13      	ldr	r2, [pc, #76]	@ (800c90c <xPortStartScheduler+0x13c>)
 800c8be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8c4:	f000 f8da 	bl	800ca7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8c8:	4b11      	ldr	r3, [pc, #68]	@ (800c910 <xPortStartScheduler+0x140>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8ce:	f000 f8f9 	bl	800cac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c8d2:	4b10      	ldr	r3, [pc, #64]	@ (800c914 <xPortStartScheduler+0x144>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c914 <xPortStartScheduler+0x144>)
 800c8d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c8dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c8de:	f7ff ff63 	bl	800c7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c8e2:	f001 f9ef 	bl	800dcc4 <vTaskSwitchContext>
	prvTaskExitError();
 800c8e6:	f7ff ff1d 	bl	800c724 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3718      	adds	r7, #24
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	e000ed00 	.word	0xe000ed00
 800c8f8:	410fc271 	.word	0x410fc271
 800c8fc:	410fc270 	.word	0x410fc270
 800c900:	e000e400 	.word	0xe000e400
 800c904:	2400e7f4 	.word	0x2400e7f4
 800c908:	2400e7f8 	.word	0x2400e7f8
 800c90c:	e000ed20 	.word	0xe000ed20
 800c910:	24000014 	.word	0x24000014
 800c914:	e000ef34 	.word	0xe000ef34

0800c918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	607b      	str	r3, [r7, #4]
}
 800c930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c932:	4b10      	ldr	r3, [pc, #64]	@ (800c974 <vPortEnterCritical+0x5c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3301      	adds	r3, #1
 800c938:	4a0e      	ldr	r2, [pc, #56]	@ (800c974 <vPortEnterCritical+0x5c>)
 800c93a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c93c:	4b0d      	ldr	r3, [pc, #52]	@ (800c974 <vPortEnterCritical+0x5c>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b01      	cmp	r3, #1
 800c942:	d110      	bne.n	800c966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c944:	4b0c      	ldr	r3, [pc, #48]	@ (800c978 <vPortEnterCritical+0x60>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00b      	beq.n	800c966 <vPortEnterCritical+0x4e>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	603b      	str	r3, [r7, #0]
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	e7fd      	b.n	800c962 <vPortEnterCritical+0x4a>
	}
}
 800c966:	bf00      	nop
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	24000014 	.word	0x24000014
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c982:	4b12      	ldr	r3, [pc, #72]	@ (800c9cc <vPortExitCritical+0x50>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10b      	bne.n	800c9a2 <vPortExitCritical+0x26>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	607b      	str	r3, [r7, #4]
}
 800c99c:	bf00      	nop
 800c99e:	bf00      	nop
 800c9a0:	e7fd      	b.n	800c99e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9cc <vPortExitCritical+0x50>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	4a08      	ldr	r2, [pc, #32]	@ (800c9cc <vPortExitCritical+0x50>)
 800c9aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9ac:	4b07      	ldr	r3, [pc, #28]	@ (800c9cc <vPortExitCritical+0x50>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d105      	bne.n	800c9c0 <vPortExitCritical+0x44>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr
 800c9cc:	24000014 	.word	0x24000014

0800c9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c9d0:	f3ef 8009 	mrs	r0, PSP
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	4b15      	ldr	r3, [pc, #84]	@ (800ca30 <pxCurrentTCBConst>)
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	f01e 0f10 	tst.w	lr, #16
 800c9e0:	bf08      	it	eq
 800c9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c9f4:	f380 8811 	msr	BASEPRI, r0
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f001 f960 	bl	800dcc4 <vTaskSwitchContext>
 800ca04:	f04f 0000 	mov.w	r0, #0
 800ca08:	f380 8811 	msr	BASEPRI, r0
 800ca0c:	bc09      	pop	{r0, r3}
 800ca0e:	6819      	ldr	r1, [r3, #0]
 800ca10:	6808      	ldr	r0, [r1, #0]
 800ca12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca16:	f01e 0f10 	tst.w	lr, #16
 800ca1a:	bf08      	it	eq
 800ca1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca20:	f380 8809 	msr	PSP, r0
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	f3af 8000 	nop.w

0800ca30 <pxCurrentTCBConst>:
 800ca30:	2400e83c 	.word	0x2400e83c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop

0800ca38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	607b      	str	r3, [r7, #4]
}
 800ca50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca52:	f001 f87d 	bl	800db50 <xTaskIncrementTick>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca5c:	4b06      	ldr	r3, [pc, #24]	@ (800ca78 <xPortSysTickHandler+0x40>)
 800ca5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	2300      	movs	r3, #0
 800ca66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	f383 8811 	msr	BASEPRI, r3
}
 800ca6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	e000ed04 	.word	0xe000ed04

0800ca7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca80:	4b0b      	ldr	r3, [pc, #44]	@ (800cab0 <vPortSetupTimerInterrupt+0x34>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca86:	4b0b      	ldr	r3, [pc, #44]	@ (800cab4 <vPortSetupTimerInterrupt+0x38>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cab8 <vPortSetupTimerInterrupt+0x3c>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a0a      	ldr	r2, [pc, #40]	@ (800cabc <vPortSetupTimerInterrupt+0x40>)
 800ca92:	fba2 2303 	umull	r2, r3, r2, r3
 800ca96:	099b      	lsrs	r3, r3, #6
 800ca98:	4a09      	ldr	r2, [pc, #36]	@ (800cac0 <vPortSetupTimerInterrupt+0x44>)
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca9e:	4b04      	ldr	r3, [pc, #16]	@ (800cab0 <vPortSetupTimerInterrupt+0x34>)
 800caa0:	2207      	movs	r2, #7
 800caa2:	601a      	str	r2, [r3, #0]
}
 800caa4:	bf00      	nop
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	e000e010 	.word	0xe000e010
 800cab4:	e000e018 	.word	0xe000e018
 800cab8:	24000000 	.word	0x24000000
 800cabc:	10624dd3 	.word	0x10624dd3
 800cac0:	e000e014 	.word	0xe000e014

0800cac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cad4 <vPortEnableVFP+0x10>
 800cac8:	6801      	ldr	r1, [r0, #0]
 800caca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cace:	6001      	str	r1, [r0, #0]
 800cad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cad2:	bf00      	nop
 800cad4:	e000ed88 	.word	0xe000ed88

0800cad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cade:	f3ef 8305 	mrs	r3, IPSR
 800cae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b0f      	cmp	r3, #15
 800cae8:	d915      	bls.n	800cb16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800caea:	4a18      	ldr	r2, [pc, #96]	@ (800cb4c <vPortValidateInterruptPriority+0x74>)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4413      	add	r3, r2
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800caf4:	4b16      	ldr	r3, [pc, #88]	@ (800cb50 <vPortValidateInterruptPriority+0x78>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	7afa      	ldrb	r2, [r7, #11]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d20b      	bcs.n	800cb16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	607b      	str	r3, [r7, #4]
}
 800cb10:	bf00      	nop
 800cb12:	bf00      	nop
 800cb14:	e7fd      	b.n	800cb12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb16:	4b0f      	ldr	r3, [pc, #60]	@ (800cb54 <vPortValidateInterruptPriority+0x7c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb58 <vPortValidateInterruptPriority+0x80>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d90b      	bls.n	800cb3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	603b      	str	r3, [r7, #0]
}
 800cb38:	bf00      	nop
 800cb3a:	bf00      	nop
 800cb3c:	e7fd      	b.n	800cb3a <vPortValidateInterruptPriority+0x62>
	}
 800cb3e:	bf00      	nop
 800cb40:	3714      	adds	r7, #20
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	e000e3f0 	.word	0xe000e3f0
 800cb50:	2400e7f4 	.word	0x2400e7f4
 800cb54:	e000ed0c 	.word	0xe000ed0c
 800cb58:	2400e7f8 	.word	0x2400e7f8

0800cb5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d10b      	bne.n	800cb88 <xQueueGenericReset+0x2c>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60bb      	str	r3, [r7, #8]
}
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	e7fd      	b.n	800cb84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb88:	f7ff fec6 	bl	800c918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb94:	68f9      	ldr	r1, [r7, #12]
 800cb96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cb98:	fb01 f303 	mul.w	r3, r1, r3
 800cb9c:	441a      	add	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	68f9      	ldr	r1, [r7, #12]
 800cbbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbbe:	fb01 f303 	mul.w	r3, r1, r3
 800cbc2:	441a      	add	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	22ff      	movs	r2, #255	@ 0xff
 800cbcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	22ff      	movs	r2, #255	@ 0xff
 800cbd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d114      	bne.n	800cc08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d01a      	beq.n	800cc1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3310      	adds	r3, #16
 800cbea:	4618      	mov	r0, r3
 800cbec:	f001 f91a 	bl	800de24 <xTaskRemoveFromEventList>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d012      	beq.n	800cc1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cbf6:	4b0d      	ldr	r3, [pc, #52]	@ (800cc2c <xQueueGenericReset+0xd0>)
 800cbf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbfc:	601a      	str	r2, [r3, #0]
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	e009      	b.n	800cc1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3310      	adds	r3, #16
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff fca1 	bl	800c554 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3324      	adds	r3, #36	@ 0x24
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fc9c 	bl	800c554 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc1c:	f7ff feae 	bl	800c97c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc20:	2301      	movs	r3, #1
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	e000ed04 	.word	0xe000ed04

0800cc30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b08e      	sub	sp, #56	@ 0x38
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
 800cc3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10b      	bne.n	800cc5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	e7fd      	b.n	800cc58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10b      	bne.n	800cc7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <xQueueGenericCreateStatic+0x56>
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <xQueueGenericCreateStatic+0x5a>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <xQueueGenericCreateStatic+0x5c>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10b      	bne.n	800cca8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	623b      	str	r3, [r7, #32]
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	e7fd      	b.n	800cca4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d102      	bne.n	800ccb4 <xQueueGenericCreateStatic+0x84>
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <xQueueGenericCreateStatic+0x88>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e000      	b.n	800ccba <xQueueGenericCreateStatic+0x8a>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d10b      	bne.n	800ccd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc2:	f383 8811 	msr	BASEPRI, r3
 800ccc6:	f3bf 8f6f 	isb	sy
 800ccca:	f3bf 8f4f 	dsb	sy
 800ccce:	61fb      	str	r3, [r7, #28]
}
 800ccd0:	bf00      	nop
 800ccd2:	bf00      	nop
 800ccd4:	e7fd      	b.n	800ccd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccd6:	2350      	movs	r3, #80	@ 0x50
 800ccd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b50      	cmp	r3, #80	@ 0x50
 800ccde:	d00b      	beq.n	800ccf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	61bb      	str	r3, [r7, #24]
}
 800ccf2:	bf00      	nop
 800ccf4:	bf00      	nop
 800ccf6:	e7fd      	b.n	800ccf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ccfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00d      	beq.n	800cd20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd06:	2201      	movs	r2, #1
 800cd08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	4613      	mov	r3, r2
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	68b9      	ldr	r1, [r7, #8]
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f000 f805 	bl	800cd2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3730      	adds	r7, #48	@ 0x30
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b084      	sub	sp, #16
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	607a      	str	r2, [r7, #4]
 800cd36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d103      	bne.n	800cd46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	69ba      	ldr	r2, [r7, #24]
 800cd42:	601a      	str	r2, [r3, #0]
 800cd44:	e002      	b.n	800cd4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	68ba      	ldr	r2, [r7, #8]
 800cd56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd58:	2101      	movs	r1, #1
 800cd5a:	69b8      	ldr	r0, [r7, #24]
 800cd5c:	f7ff fefe 	bl	800cb5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	78fa      	ldrb	r2, [r7, #3]
 800cd64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	@ 0x38
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10b      	bne.n	800cda4 <xQueueGenericSend+0x34>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd9e:	bf00      	nop
 800cda0:	bf00      	nop
 800cda2:	e7fd      	b.n	800cda0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d103      	bne.n	800cdb2 <xQueueGenericSend+0x42>
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d101      	bne.n	800cdb6 <xQueueGenericSend+0x46>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e000      	b.n	800cdb8 <xQueueGenericSend+0x48>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10b      	bne.n	800cdd4 <xQueueGenericSend+0x64>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cdce:	bf00      	nop
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b02      	cmp	r3, #2
 800cdd8:	d103      	bne.n	800cde2 <xQueueGenericSend+0x72>
 800cdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d101      	bne.n	800cde6 <xQueueGenericSend+0x76>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e000      	b.n	800cde8 <xQueueGenericSend+0x78>
 800cde6:	2300      	movs	r3, #0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10b      	bne.n	800ce04 <xQueueGenericSend+0x94>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	623b      	str	r3, [r7, #32]
}
 800cdfe:	bf00      	nop
 800ce00:	bf00      	nop
 800ce02:	e7fd      	b.n	800ce00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce04:	f001 f9f6 	bl	800e1f4 <xTaskGetSchedulerState>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <xQueueGenericSend+0xa4>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <xQueueGenericSend+0xa8>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e000      	b.n	800ce1a <xQueueGenericSend+0xaa>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10b      	bne.n	800ce36 <xQueueGenericSend+0xc6>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	61fb      	str	r3, [r7, #28]
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	e7fd      	b.n	800ce32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce36:	f7ff fd6f 	bl	800c918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d302      	bcc.n	800ce4c <xQueueGenericSend+0xdc>
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d129      	bne.n	800cea0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	68b9      	ldr	r1, [r7, #8]
 800ce50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce52:	f000 fa0f 	bl	800d274 <prvCopyDataToQueue>
 800ce56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d010      	beq.n	800ce82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce62:	3324      	adds	r3, #36	@ 0x24
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 ffdd 	bl	800de24 <xTaskRemoveFromEventList>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d013      	beq.n	800ce98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce70:	4b3f      	ldr	r3, [pc, #252]	@ (800cf70 <xQueueGenericSend+0x200>)
 800ce72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce76:	601a      	str	r2, [r3, #0]
 800ce78:	f3bf 8f4f 	dsb	sy
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	e00a      	b.n	800ce98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d007      	beq.n	800ce98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce88:	4b39      	ldr	r3, [pc, #228]	@ (800cf70 <xQueueGenericSend+0x200>)
 800ce8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce98:	f7ff fd70 	bl	800c97c <vPortExitCritical>
				return pdPASS;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e063      	b.n	800cf68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d103      	bne.n	800ceae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cea6:	f7ff fd69 	bl	800c97c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e05c      	b.n	800cf68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d106      	bne.n	800cec2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f001 f83f 	bl	800df3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cebe:	2301      	movs	r3, #1
 800cec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cec2:	f7ff fd5b 	bl	800c97c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cec6:	f000 fd87 	bl	800d9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ceca:	f7ff fd25 	bl	800c918 <vPortEnterCritical>
 800cece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ced4:	b25b      	sxtb	r3, r3
 800ced6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ceda:	d103      	bne.n	800cee4 <xQueueGenericSend+0x174>
 800cedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cede:	2200      	movs	r2, #0
 800cee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ceea:	b25b      	sxtb	r3, r3
 800ceec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cef0:	d103      	bne.n	800cefa <xQueueGenericSend+0x18a>
 800cef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cefa:	f7ff fd3f 	bl	800c97c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cefe:	1d3a      	adds	r2, r7, #4
 800cf00:	f107 0314 	add.w	r3, r7, #20
 800cf04:	4611      	mov	r1, r2
 800cf06:	4618      	mov	r0, r3
 800cf08:	f001 f82e 	bl	800df68 <xTaskCheckForTimeOut>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d124      	bne.n	800cf5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf14:	f000 faa6 	bl	800d464 <prvIsQueueFull>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d018      	beq.n	800cf50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	3310      	adds	r3, #16
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	4611      	mov	r1, r2
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 ff2a 	bl	800dd80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf2e:	f000 fa31 	bl	800d394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf32:	f000 fd5f 	bl	800d9f4 <xTaskResumeAll>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f47f af7c 	bne.w	800ce36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cf3e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf70 <xQueueGenericSend+0x200>)
 800cf40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf44:	601a      	str	r2, [r3, #0]
 800cf46:	f3bf 8f4f 	dsb	sy
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	e772      	b.n	800ce36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf52:	f000 fa1f 	bl	800d394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf56:	f000 fd4d 	bl	800d9f4 <xTaskResumeAll>
 800cf5a:	e76c      	b.n	800ce36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf5e:	f000 fa19 	bl	800d394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf62:	f000 fd47 	bl	800d9f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3738      	adds	r7, #56	@ 0x38
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	e000ed04 	.word	0xe000ed04

0800cf74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b090      	sub	sp, #64	@ 0x40
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
 800cf80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d10b      	bne.n	800cfa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cf8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cf9e:	bf00      	nop
 800cfa0:	bf00      	nop
 800cfa2:	e7fd      	b.n	800cfa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d103      	bne.n	800cfb2 <xQueueGenericSendFromISR+0x3e>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <xQueueGenericSendFromISR+0x42>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e000      	b.n	800cfb8 <xQueueGenericSendFromISR+0x44>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10b      	bne.n	800cfd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfce:	bf00      	nop
 800cfd0:	bf00      	nop
 800cfd2:	e7fd      	b.n	800cfd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d103      	bne.n	800cfe2 <xQueueGenericSendFromISR+0x6e>
 800cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d101      	bne.n	800cfe6 <xQueueGenericSendFromISR+0x72>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <xQueueGenericSendFromISR+0x74>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10b      	bne.n	800d004 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	623b      	str	r3, [r7, #32]
}
 800cffe:	bf00      	nop
 800d000:	bf00      	nop
 800d002:	e7fd      	b.n	800d000 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d004:	f7ff fd68 	bl	800cad8 <vPortValidateInterruptPriority>
	__asm volatile
 800d008:	f3ef 8211 	mrs	r2, BASEPRI
 800d00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	61fa      	str	r2, [r7, #28]
 800d01e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d020:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d022:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d302      	bcc.n	800d036 <xQueueGenericSendFromISR+0xc2>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b02      	cmp	r3, #2
 800d034:	d12f      	bne.n	800d096 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d03c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d044:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	68b9      	ldr	r1, [r7, #8]
 800d04a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d04c:	f000 f912 	bl	800d274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d050:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d058:	d112      	bne.n	800d080 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d016      	beq.n	800d090 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d064:	3324      	adds	r3, #36	@ 0x24
 800d066:	4618      	mov	r0, r3
 800d068:	f000 fedc 	bl	800de24 <xTaskRemoveFromEventList>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00e      	beq.n	800d090 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00b      	beq.n	800d090 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	e007      	b.n	800d090 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d084:	3301      	adds	r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	b25a      	sxtb	r2, r3
 800d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d090:	2301      	movs	r3, #1
 800d092:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d094:	e001      	b.n	800d09a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d096:	2300      	movs	r3, #0
 800d098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d09c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f383 8811 	msr	BASEPRI, r3
}
 800d0a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3740      	adds	r7, #64	@ 0x40
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08c      	sub	sp, #48	@ 0x30
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d10b      	bne.n	800d0e2 <xQueueReceive+0x32>
	__asm volatile
 800d0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ce:	f383 8811 	msr	BASEPRI, r3
 800d0d2:	f3bf 8f6f 	isb	sy
 800d0d6:	f3bf 8f4f 	dsb	sy
 800d0da:	623b      	str	r3, [r7, #32]
}
 800d0dc:	bf00      	nop
 800d0de:	bf00      	nop
 800d0e0:	e7fd      	b.n	800d0de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d103      	bne.n	800d0f0 <xQueueReceive+0x40>
 800d0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <xQueueReceive+0x44>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e000      	b.n	800d0f6 <xQueueReceive+0x46>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10b      	bne.n	800d112 <xQueueReceive+0x62>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	61fb      	str	r3, [r7, #28]
}
 800d10c:	bf00      	nop
 800d10e:	bf00      	nop
 800d110:	e7fd      	b.n	800d10e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d112:	f001 f86f 	bl	800e1f4 <xTaskGetSchedulerState>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d102      	bne.n	800d122 <xQueueReceive+0x72>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <xQueueReceive+0x76>
 800d122:	2301      	movs	r3, #1
 800d124:	e000      	b.n	800d128 <xQueueReceive+0x78>
 800d126:	2300      	movs	r3, #0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10b      	bne.n	800d144 <xQueueReceive+0x94>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	61bb      	str	r3, [r7, #24]
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	e7fd      	b.n	800d140 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d144:	f7ff fbe8 	bl	800c918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d14c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	2b00      	cmp	r3, #0
 800d152:	d01f      	beq.n	800d194 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d154:	68b9      	ldr	r1, [r7, #8]
 800d156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d158:	f000 f8f6 	bl	800d348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d15e:	1e5a      	subs	r2, r3, #1
 800d160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d162:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00f      	beq.n	800d18c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16e:	3310      	adds	r3, #16
 800d170:	4618      	mov	r0, r3
 800d172:	f000 fe57 	bl	800de24 <xTaskRemoveFromEventList>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d007      	beq.n	800d18c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d17c:	4b3c      	ldr	r3, [pc, #240]	@ (800d270 <xQueueReceive+0x1c0>)
 800d17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d182:	601a      	str	r2, [r3, #0]
 800d184:	f3bf 8f4f 	dsb	sy
 800d188:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d18c:	f7ff fbf6 	bl	800c97c <vPortExitCritical>
				return pdPASS;
 800d190:	2301      	movs	r3, #1
 800d192:	e069      	b.n	800d268 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d103      	bne.n	800d1a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d19a:	f7ff fbef 	bl	800c97c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e062      	b.n	800d268 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d106      	bne.n	800d1b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1a8:	f107 0310 	add.w	r3, r7, #16
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f000 fec5 	bl	800df3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1b6:	f7ff fbe1 	bl	800c97c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1ba:	f000 fc0d 	bl	800d9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1be:	f7ff fbab 	bl	800c918 <vPortEnterCritical>
 800d1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1c8:	b25b      	sxtb	r3, r3
 800d1ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1ce:	d103      	bne.n	800d1d8 <xQueueReceive+0x128>
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1de:	b25b      	sxtb	r3, r3
 800d1e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1e4:	d103      	bne.n	800d1ee <xQueueReceive+0x13e>
 800d1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1ee:	f7ff fbc5 	bl	800c97c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1f2:	1d3a      	adds	r2, r7, #4
 800d1f4:	f107 0310 	add.w	r3, r7, #16
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f000 feb4 	bl	800df68 <xTaskCheckForTimeOut>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d123      	bne.n	800d24e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d208:	f000 f916 	bl	800d438 <prvIsQueueEmpty>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d017      	beq.n	800d242 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d214:	3324      	adds	r3, #36	@ 0x24
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	4611      	mov	r1, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 fdb0 	bl	800dd80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d222:	f000 f8b7 	bl	800d394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d226:	f000 fbe5 	bl	800d9f4 <xTaskResumeAll>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d189      	bne.n	800d144 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d230:	4b0f      	ldr	r3, [pc, #60]	@ (800d270 <xQueueReceive+0x1c0>)
 800d232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d236:	601a      	str	r2, [r3, #0]
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	e780      	b.n	800d144 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d244:	f000 f8a6 	bl	800d394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d248:	f000 fbd4 	bl	800d9f4 <xTaskResumeAll>
 800d24c:	e77a      	b.n	800d144 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d24e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d250:	f000 f8a0 	bl	800d394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d254:	f000 fbce 	bl	800d9f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d25a:	f000 f8ed 	bl	800d438 <prvIsQueueEmpty>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	f43f af6f 	beq.w	800d144 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d266:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3730      	adds	r7, #48	@ 0x30
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	e000ed04 	.word	0xe000ed04

0800d274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d280:	2300      	movs	r3, #0
 800d282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10d      	bne.n	800d2ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d14d      	bne.n	800d336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 ffc6 	bl	800e230 <xTaskPriorityDisinherit>
 800d2a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	609a      	str	r2, [r3, #8]
 800d2ac:	e043      	b.n	800d336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d119      	bne.n	800d2e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6858      	ldr	r0, [r3, #4]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2bc:	461a      	mov	r2, r3
 800d2be:	68b9      	ldr	r1, [r7, #8]
 800d2c0:	f00f fe9b 	bl	801cffa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2cc:	441a      	add	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	685a      	ldr	r2, [r3, #4]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d32b      	bcc.n	800d336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
 800d2e6:	e026      	b.n	800d336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	68d8      	ldr	r0, [r3, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	68b9      	ldr	r1, [r7, #8]
 800d2f4:	f00f fe81 	bl	801cffa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d300:	425b      	negs	r3, r3
 800d302:	441a      	add	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	68da      	ldr	r2, [r3, #12]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	429a      	cmp	r2, r3
 800d312:	d207      	bcs.n	800d324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	689a      	ldr	r2, [r3, #8]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d31c:	425b      	negs	r3, r3
 800d31e:	441a      	add	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b02      	cmp	r3, #2
 800d328:	d105      	bne.n	800d336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	3b01      	subs	r3, #1
 800d334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d33e:	697b      	ldr	r3, [r7, #20]
}
 800d340:	4618      	mov	r0, r3
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d356:	2b00      	cmp	r3, #0
 800d358:	d018      	beq.n	800d38c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	68da      	ldr	r2, [r3, #12]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d362:	441a      	add	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	68da      	ldr	r2, [r3, #12]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	429a      	cmp	r2, r3
 800d372:	d303      	bcc.n	800d37c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68d9      	ldr	r1, [r3, #12]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d384:	461a      	mov	r2, r3
 800d386:	6838      	ldr	r0, [r7, #0]
 800d388:	f00f fe37 	bl	801cffa <memcpy>
	}
}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d39c:	f7ff fabc 	bl	800c918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3a8:	e011      	b.n	800d3ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d012      	beq.n	800d3d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	3324      	adds	r3, #36	@ 0x24
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 fd34 	bl	800de24 <xTaskRemoveFromEventList>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3c2:	f000 fe35 	bl	800e030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3c6:	7bfb      	ldrb	r3, [r7, #15]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dce9      	bgt.n	800d3aa <prvUnlockQueue+0x16>
 800d3d6:	e000      	b.n	800d3da <prvUnlockQueue+0x46>
					break;
 800d3d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	22ff      	movs	r2, #255	@ 0xff
 800d3de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d3e2:	f7ff facb 	bl	800c97c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3e6:	f7ff fa97 	bl	800c918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d3f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3f2:	e011      	b.n	800d418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d012      	beq.n	800d422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3310      	adds	r3, #16
 800d400:	4618      	mov	r0, r3
 800d402:	f000 fd0f 	bl	800de24 <xTaskRemoveFromEventList>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d40c:	f000 fe10 	bl	800e030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	3b01      	subs	r3, #1
 800d414:	b2db      	uxtb	r3, r3
 800d416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	dce9      	bgt.n	800d3f4 <prvUnlockQueue+0x60>
 800d420:	e000      	b.n	800d424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	22ff      	movs	r2, #255	@ 0xff
 800d428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d42c:	f7ff faa6 	bl	800c97c <vPortExitCritical>
}
 800d430:	bf00      	nop
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d440:	f7ff fa6a 	bl	800c918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d102      	bne.n	800d452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d44c:	2301      	movs	r3, #1
 800d44e:	60fb      	str	r3, [r7, #12]
 800d450:	e001      	b.n	800d456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d452:	2300      	movs	r3, #0
 800d454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d456:	f7ff fa91 	bl	800c97c <vPortExitCritical>

	return xReturn;
 800d45a:	68fb      	ldr	r3, [r7, #12]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d46c:	f7ff fa54 	bl	800c918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d478:	429a      	cmp	r2, r3
 800d47a:	d102      	bne.n	800d482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e001      	b.n	800d486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d482:	2300      	movs	r3, #0
 800d484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d486:	f7ff fa79 	bl	800c97c <vPortExitCritical>

	return xReturn;
 800d48a:	68fb      	ldr	r3, [r7, #12]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	e014      	b.n	800d4ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4a4:	4a0f      	ldr	r2, [pc, #60]	@ (800d4e4 <vQueueAddToRegistry+0x50>)
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d10b      	bne.n	800d4c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4b0:	490c      	ldr	r1, [pc, #48]	@ (800d4e4 <vQueueAddToRegistry+0x50>)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	683a      	ldr	r2, [r7, #0]
 800d4b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d4e4 <vQueueAddToRegistry+0x50>)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	4413      	add	r3, r2
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4c6:	e006      	b.n	800d4d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	60fb      	str	r3, [r7, #12]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2b07      	cmp	r3, #7
 800d4d2:	d9e7      	bls.n	800d4a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d4d4:	bf00      	nop
 800d4d6:	bf00      	nop
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	2400e7fc 	.word	0x2400e7fc

0800d4e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4f8:	f7ff fa0e 	bl	800c918 <vPortEnterCritical>
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d502:	b25b      	sxtb	r3, r3
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d508:	d103      	bne.n	800d512 <vQueueWaitForMessageRestricted+0x2a>
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d518:	b25b      	sxtb	r3, r3
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d51e:	d103      	bne.n	800d528 <vQueueWaitForMessageRestricted+0x40>
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d528:	f7ff fa28 	bl	800c97c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d530:	2b00      	cmp	r3, #0
 800d532:	d106      	bne.n	800d542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	3324      	adds	r3, #36	@ 0x24
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	68b9      	ldr	r1, [r7, #8]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fc45 	bl	800ddcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f7ff ff26 	bl	800d394 <prvUnlockQueue>
	}
 800d548:	bf00      	nop
 800d54a:	3718      	adds	r7, #24
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d550:	b580      	push	{r7, lr}
 800d552:	b08e      	sub	sp, #56	@ 0x38
 800d554:	af04      	add	r7, sp, #16
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10b      	bne.n	800d57c <xTaskCreateStatic+0x2c>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	623b      	str	r3, [r7, #32]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d10b      	bne.n	800d59a <xTaskCreateStatic+0x4a>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	61fb      	str	r3, [r7, #28]
}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	e7fd      	b.n	800d596 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d59a:	235c      	movs	r3, #92	@ 0x5c
 800d59c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5a2:	d00b      	beq.n	800d5bc <xTaskCreateStatic+0x6c>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	61bb      	str	r3, [r7, #24]
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	e7fd      	b.n	800d5b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d01e      	beq.n	800d602 <xTaskCreateStatic+0xb2>
 800d5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d01b      	beq.n	800d602 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d5d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d6:	2202      	movs	r2, #2
 800d5d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5dc:	2300      	movs	r3, #0
 800d5de:	9303      	str	r3, [sp, #12]
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e2:	9302      	str	r3, [sp, #8]
 800d5e4:	f107 0314 	add.w	r3, r7, #20
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	68b9      	ldr	r1, [r7, #8]
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 f850 	bl	800d69a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5fc:	f000 f8de 	bl	800d7bc <prvAddNewTaskToReadyList>
 800d600:	e001      	b.n	800d606 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d602:	2300      	movs	r3, #0
 800d604:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d606:	697b      	ldr	r3, [r7, #20]
	}
 800d608:	4618      	mov	r0, r3
 800d60a:	3728      	adds	r7, #40	@ 0x28
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08c      	sub	sp, #48	@ 0x30
 800d614:	af04      	add	r7, sp, #16
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	603b      	str	r3, [r7, #0]
 800d61c:	4613      	mov	r3, r2
 800d61e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d620:	88fb      	ldrh	r3, [r7, #6]
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	4618      	mov	r0, r3
 800d626:	f7fe fda7 	bl	800c178 <pvPortMalloc>
 800d62a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00e      	beq.n	800d650 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d632:	205c      	movs	r0, #92	@ 0x5c
 800d634:	f7fe fda0 	bl	800c178 <pvPortMalloc>
 800d638:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d003      	beq.n	800d648 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	631a      	str	r2, [r3, #48]	@ 0x30
 800d646:	e005      	b.n	800d654 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d648:	6978      	ldr	r0, [r7, #20]
 800d64a:	f7fe fe63 	bl	800c314 <vPortFree>
 800d64e:	e001      	b.n	800d654 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d650:	2300      	movs	r3, #0
 800d652:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d017      	beq.n	800d68a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d662:	88fa      	ldrh	r2, [r7, #6]
 800d664:	2300      	movs	r3, #0
 800d666:	9303      	str	r3, [sp, #12]
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	9302      	str	r3, [sp, #8]
 800d66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	68b9      	ldr	r1, [r7, #8]
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 f80e 	bl	800d69a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d67e:	69f8      	ldr	r0, [r7, #28]
 800d680:	f000 f89c 	bl	800d7bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d684:	2301      	movs	r3, #1
 800d686:	61bb      	str	r3, [r7, #24]
 800d688:	e002      	b.n	800d690 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d68a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d68e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d690:	69bb      	ldr	r3, [r7, #24]
	}
 800d692:	4618      	mov	r0, r3
 800d694:	3720      	adds	r7, #32
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b088      	sub	sp, #32
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	60f8      	str	r0, [r7, #12]
 800d6a2:	60b9      	str	r1, [r7, #8]
 800d6a4:	607a      	str	r2, [r7, #4]
 800d6a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	21a5      	movs	r1, #165	@ 0xa5
 800d6b4:	f00f fbd8 	bl	801ce68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6bc:	6879      	ldr	r1, [r7, #4]
 800d6be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d6c2:	440b      	add	r3, r1
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6ca:	69bb      	ldr	r3, [r7, #24]
 800d6cc:	f023 0307 	bic.w	r3, r3, #7
 800d6d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6d2:	69bb      	ldr	r3, [r7, #24]
 800d6d4:	f003 0307 	and.w	r3, r3, #7
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00b      	beq.n	800d6f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	617b      	str	r3, [r7, #20]
}
 800d6ee:	bf00      	nop
 800d6f0:	bf00      	nop
 800d6f2:	e7fd      	b.n	800d6f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d01f      	beq.n	800d73a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	61fb      	str	r3, [r7, #28]
 800d6fe:	e012      	b.n	800d726 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	4413      	add	r3, r2
 800d706:	7819      	ldrb	r1, [r3, #0]
 800d708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	3334      	adds	r3, #52	@ 0x34
 800d710:	460a      	mov	r2, r1
 800d712:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	4413      	add	r3, r2
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d006      	beq.n	800d72e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	3301      	adds	r3, #1
 800d724:	61fb      	str	r3, [r7, #28]
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	2b0f      	cmp	r3, #15
 800d72a:	d9e9      	bls.n	800d700 <prvInitialiseNewTask+0x66>
 800d72c:	e000      	b.n	800d730 <prvInitialiseNewTask+0x96>
			{
				break;
 800d72e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d738:	e003      	b.n	800d742 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d744:	2b37      	cmp	r3, #55	@ 0x37
 800d746:	d901      	bls.n	800d74c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d748:	2337      	movs	r3, #55	@ 0x37
 800d74a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d750:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d756:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75a:	2200      	movs	r2, #0
 800d75c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d760:	3304      	adds	r3, #4
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe ff16 	bl	800c594 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76a:	3318      	adds	r3, #24
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe ff11 	bl	800c594 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d786:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78a:	2200      	movs	r2, #0
 800d78c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	68f9      	ldr	r1, [r7, #12]
 800d79a:	69b8      	ldr	r0, [r7, #24]
 800d79c:	f7fe ff8e 	bl	800c6bc <pxPortInitialiseStack>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d002      	beq.n	800d7b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7b2:	bf00      	nop
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
	...

0800d7bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7c4:	f7ff f8a8 	bl	800c918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7c8:	4b2d      	ldr	r3, [pc, #180]	@ (800d880 <prvAddNewTaskToReadyList+0xc4>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	4a2c      	ldr	r2, [pc, #176]	@ (800d880 <prvAddNewTaskToReadyList+0xc4>)
 800d7d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7d2:	4b2c      	ldr	r3, [pc, #176]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d109      	bne.n	800d7ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7da:	4a2a      	ldr	r2, [pc, #168]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7e0:	4b27      	ldr	r3, [pc, #156]	@ (800d880 <prvAddNewTaskToReadyList+0xc4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d110      	bne.n	800d80a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7e8:	f000 fc46 	bl	800e078 <prvInitialiseTaskLists>
 800d7ec:	e00d      	b.n	800d80a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d7ee:	4b26      	ldr	r3, [pc, #152]	@ (800d888 <prvAddNewTaskToReadyList+0xcc>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d109      	bne.n	800d80a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7f6:	4b23      	ldr	r3, [pc, #140]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d800:	429a      	cmp	r2, r3
 800d802:	d802      	bhi.n	800d80a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d804:	4a1f      	ldr	r2, [pc, #124]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d80a:	4b20      	ldr	r3, [pc, #128]	@ (800d88c <prvAddNewTaskToReadyList+0xd0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3301      	adds	r3, #1
 800d810:	4a1e      	ldr	r2, [pc, #120]	@ (800d88c <prvAddNewTaskToReadyList+0xd0>)
 800d812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d814:	4b1d      	ldr	r3, [pc, #116]	@ (800d88c <prvAddNewTaskToReadyList+0xd0>)
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d820:	4b1b      	ldr	r3, [pc, #108]	@ (800d890 <prvAddNewTaskToReadyList+0xd4>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	429a      	cmp	r2, r3
 800d826:	d903      	bls.n	800d830 <prvAddNewTaskToReadyList+0x74>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82c:	4a18      	ldr	r2, [pc, #96]	@ (800d890 <prvAddNewTaskToReadyList+0xd4>)
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d834:	4613      	mov	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	4413      	add	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	4a15      	ldr	r2, [pc, #84]	@ (800d894 <prvAddNewTaskToReadyList+0xd8>)
 800d83e:	441a      	add	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	3304      	adds	r3, #4
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f7fe feb1 	bl	800c5ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d84c:	f7ff f896 	bl	800c97c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d850:	4b0d      	ldr	r3, [pc, #52]	@ (800d888 <prvAddNewTaskToReadyList+0xcc>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d00e      	beq.n	800d876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d858:	4b0a      	ldr	r3, [pc, #40]	@ (800d884 <prvAddNewTaskToReadyList+0xc8>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d862:	429a      	cmp	r2, r3
 800d864:	d207      	bcs.n	800d876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d866:	4b0c      	ldr	r3, [pc, #48]	@ (800d898 <prvAddNewTaskToReadyList+0xdc>)
 800d868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d876:	bf00      	nop
 800d878:	3708      	adds	r7, #8
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	2400ed10 	.word	0x2400ed10
 800d884:	2400e83c 	.word	0x2400e83c
 800d888:	2400ed1c 	.word	0x2400ed1c
 800d88c:	2400ed2c 	.word	0x2400ed2c
 800d890:	2400ed18 	.word	0x2400ed18
 800d894:	2400e840 	.word	0x2400e840
 800d898:	e000ed04 	.word	0xe000ed04

0800d89c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d018      	beq.n	800d8e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8ae:	4b14      	ldr	r3, [pc, #80]	@ (800d900 <vTaskDelay+0x64>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00b      	beq.n	800d8ce <vTaskDelay+0x32>
	__asm volatile
 800d8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ba:	f383 8811 	msr	BASEPRI, r3
 800d8be:	f3bf 8f6f 	isb	sy
 800d8c2:	f3bf 8f4f 	dsb	sy
 800d8c6:	60bb      	str	r3, [r7, #8]
}
 800d8c8:	bf00      	nop
 800d8ca:	bf00      	nop
 800d8cc:	e7fd      	b.n	800d8ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8ce:	f000 f883 	bl	800d9d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fd1b 	bl	800e310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8da:	f000 f88b 	bl	800d9f4 <xTaskResumeAll>
 800d8de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d107      	bne.n	800d8f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d8e6:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <vTaskDelay+0x68>)
 800d8e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8ec:	601a      	str	r2, [r3, #0]
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	2400ed38 	.word	0x2400ed38
 800d904:	e000ed04 	.word	0xe000ed04

0800d908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08a      	sub	sp, #40	@ 0x28
 800d90c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d90e:	2300      	movs	r3, #0
 800d910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d916:	463a      	mov	r2, r7
 800d918:	1d39      	adds	r1, r7, #4
 800d91a:	f107 0308 	add.w	r3, r7, #8
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fe fbf6 	bl	800c110 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	9202      	str	r2, [sp, #8]
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	2300      	movs	r3, #0
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	2300      	movs	r3, #0
 800d934:	460a      	mov	r2, r1
 800d936:	4922      	ldr	r1, [pc, #136]	@ (800d9c0 <vTaskStartScheduler+0xb8>)
 800d938:	4822      	ldr	r0, [pc, #136]	@ (800d9c4 <vTaskStartScheduler+0xbc>)
 800d93a:	f7ff fe09 	bl	800d550 <xTaskCreateStatic>
 800d93e:	4603      	mov	r3, r0
 800d940:	4a21      	ldr	r2, [pc, #132]	@ (800d9c8 <vTaskStartScheduler+0xc0>)
 800d942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d944:	4b20      	ldr	r3, [pc, #128]	@ (800d9c8 <vTaskStartScheduler+0xc0>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d94c:	2301      	movs	r3, #1
 800d94e:	617b      	str	r3, [r7, #20]
 800d950:	e001      	b.n	800d956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d952:	2300      	movs	r3, #0
 800d954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d102      	bne.n	800d962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d95c:	f000 fd2c 	bl	800e3b8 <xTimerCreateTimerTask>
 800d960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d116      	bne.n	800d996 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d96c:	f383 8811 	msr	BASEPRI, r3
 800d970:	f3bf 8f6f 	isb	sy
 800d974:	f3bf 8f4f 	dsb	sy
 800d978:	613b      	str	r3, [r7, #16]
}
 800d97a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d97c:	4b13      	ldr	r3, [pc, #76]	@ (800d9cc <vTaskStartScheduler+0xc4>)
 800d97e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d984:	4b12      	ldr	r3, [pc, #72]	@ (800d9d0 <vTaskStartScheduler+0xc8>)
 800d986:	2201      	movs	r2, #1
 800d988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d98a:	4b12      	ldr	r3, [pc, #72]	@ (800d9d4 <vTaskStartScheduler+0xcc>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d990:	f7fe ff1e 	bl	800c7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d994:	e00f      	b.n	800d9b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d99c:	d10b      	bne.n	800d9b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800d99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	60fb      	str	r3, [r7, #12]
}
 800d9b0:	bf00      	nop
 800d9b2:	bf00      	nop
 800d9b4:	e7fd      	b.n	800d9b2 <vTaskStartScheduler+0xaa>
}
 800d9b6:	bf00      	nop
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	0801dd14 	.word	0x0801dd14
 800d9c4:	0800e049 	.word	0x0800e049
 800d9c8:	2400ed34 	.word	0x2400ed34
 800d9cc:	2400ed30 	.word	0x2400ed30
 800d9d0:	2400ed1c 	.word	0x2400ed1c
 800d9d4:	2400ed14 	.word	0x2400ed14

0800d9d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9d8:	b480      	push	{r7}
 800d9da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9dc:	4b04      	ldr	r3, [pc, #16]	@ (800d9f0 <vTaskSuspendAll+0x18>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	4a03      	ldr	r2, [pc, #12]	@ (800d9f0 <vTaskSuspendAll+0x18>)
 800d9e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d9e6:	bf00      	nop
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	2400ed38 	.word	0x2400ed38

0800d9f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da02:	4b42      	ldr	r3, [pc, #264]	@ (800db0c <xTaskResumeAll+0x118>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10b      	bne.n	800da22 <xTaskResumeAll+0x2e>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	603b      	str	r3, [r7, #0]
}
 800da1c:	bf00      	nop
 800da1e:	bf00      	nop
 800da20:	e7fd      	b.n	800da1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da22:	f7fe ff79 	bl	800c918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da26:	4b39      	ldr	r3, [pc, #228]	@ (800db0c <xTaskResumeAll+0x118>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	3b01      	subs	r3, #1
 800da2c:	4a37      	ldr	r2, [pc, #220]	@ (800db0c <xTaskResumeAll+0x118>)
 800da2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da30:	4b36      	ldr	r3, [pc, #216]	@ (800db0c <xTaskResumeAll+0x118>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d162      	bne.n	800dafe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da38:	4b35      	ldr	r3, [pc, #212]	@ (800db10 <xTaskResumeAll+0x11c>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d05e      	beq.n	800dafe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da40:	e02f      	b.n	800daa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da42:	4b34      	ldr	r3, [pc, #208]	@ (800db14 <xTaskResumeAll+0x120>)
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	3318      	adds	r3, #24
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fe fe0a 	bl	800c668 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	3304      	adds	r3, #4
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fe fe05 	bl	800c668 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da62:	4b2d      	ldr	r3, [pc, #180]	@ (800db18 <xTaskResumeAll+0x124>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	429a      	cmp	r2, r3
 800da68:	d903      	bls.n	800da72 <xTaskResumeAll+0x7e>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da6e:	4a2a      	ldr	r2, [pc, #168]	@ (800db18 <xTaskResumeAll+0x124>)
 800da70:	6013      	str	r3, [r2, #0]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da76:	4613      	mov	r3, r2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	4413      	add	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4a27      	ldr	r2, [pc, #156]	@ (800db1c <xTaskResumeAll+0x128>)
 800da80:	441a      	add	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3304      	adds	r3, #4
 800da86:	4619      	mov	r1, r3
 800da88:	4610      	mov	r0, r2
 800da8a:	f7fe fd90 	bl	800c5ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da92:	4b23      	ldr	r3, [pc, #140]	@ (800db20 <xTaskResumeAll+0x12c>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da98:	429a      	cmp	r2, r3
 800da9a:	d302      	bcc.n	800daa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800da9c:	4b21      	ldr	r3, [pc, #132]	@ (800db24 <xTaskResumeAll+0x130>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800daa2:	4b1c      	ldr	r3, [pc, #112]	@ (800db14 <xTaskResumeAll+0x120>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1cb      	bne.n	800da42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dab0:	f000 fb80 	bl	800e1b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dab4:	4b1c      	ldr	r3, [pc, #112]	@ (800db28 <xTaskResumeAll+0x134>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d010      	beq.n	800dae2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dac0:	f000 f846 	bl	800db50 <xTaskIncrementTick>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d002      	beq.n	800dad0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800daca:	4b16      	ldr	r3, [pc, #88]	@ (800db24 <xTaskResumeAll+0x130>)
 800dacc:	2201      	movs	r2, #1
 800dace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	3b01      	subs	r3, #1
 800dad4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1f1      	bne.n	800dac0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800dadc:	4b12      	ldr	r3, [pc, #72]	@ (800db28 <xTaskResumeAll+0x134>)
 800dade:	2200      	movs	r2, #0
 800dae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dae2:	4b10      	ldr	r3, [pc, #64]	@ (800db24 <xTaskResumeAll+0x130>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d009      	beq.n	800dafe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800daea:	2301      	movs	r3, #1
 800daec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800daee:	4b0f      	ldr	r3, [pc, #60]	@ (800db2c <xTaskResumeAll+0x138>)
 800daf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dafe:	f7fe ff3d 	bl	800c97c <vPortExitCritical>

	return xAlreadyYielded;
 800db02:	68bb      	ldr	r3, [r7, #8]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	2400ed38 	.word	0x2400ed38
 800db10:	2400ed10 	.word	0x2400ed10
 800db14:	2400ecd0 	.word	0x2400ecd0
 800db18:	2400ed18 	.word	0x2400ed18
 800db1c:	2400e840 	.word	0x2400e840
 800db20:	2400e83c 	.word	0x2400e83c
 800db24:	2400ed24 	.word	0x2400ed24
 800db28:	2400ed20 	.word	0x2400ed20
 800db2c:	e000ed04 	.word	0xe000ed04

0800db30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db36:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <xTaskGetTickCount+0x1c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db3c:	687b      	ldr	r3, [r7, #4]
}
 800db3e:	4618      	mov	r0, r3
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	2400ed14 	.word	0x2400ed14

0800db50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db56:	2300      	movs	r3, #0
 800db58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db5a:	4b4f      	ldr	r3, [pc, #316]	@ (800dc98 <xTaskIncrementTick+0x148>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f040 8090 	bne.w	800dc84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db64:	4b4d      	ldr	r3, [pc, #308]	@ (800dc9c <xTaskIncrementTick+0x14c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	3301      	adds	r3, #1
 800db6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db6c:	4a4b      	ldr	r2, [pc, #300]	@ (800dc9c <xTaskIncrementTick+0x14c>)
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d121      	bne.n	800dbbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800db78:	4b49      	ldr	r3, [pc, #292]	@ (800dca0 <xTaskIncrementTick+0x150>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00b      	beq.n	800db9a <xTaskIncrementTick+0x4a>
	__asm volatile
 800db82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	603b      	str	r3, [r7, #0]
}
 800db94:	bf00      	nop
 800db96:	bf00      	nop
 800db98:	e7fd      	b.n	800db96 <xTaskIncrementTick+0x46>
 800db9a:	4b41      	ldr	r3, [pc, #260]	@ (800dca0 <xTaskIncrementTick+0x150>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	60fb      	str	r3, [r7, #12]
 800dba0:	4b40      	ldr	r3, [pc, #256]	@ (800dca4 <xTaskIncrementTick+0x154>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a3e      	ldr	r2, [pc, #248]	@ (800dca0 <xTaskIncrementTick+0x150>)
 800dba6:	6013      	str	r3, [r2, #0]
 800dba8:	4a3e      	ldr	r2, [pc, #248]	@ (800dca4 <xTaskIncrementTick+0x154>)
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	4b3e      	ldr	r3, [pc, #248]	@ (800dca8 <xTaskIncrementTick+0x158>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	4a3c      	ldr	r2, [pc, #240]	@ (800dca8 <xTaskIncrementTick+0x158>)
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	f000 fafc 	bl	800e1b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbbc:	4b3b      	ldr	r3, [pc, #236]	@ (800dcac <xTaskIncrementTick+0x15c>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d349      	bcc.n	800dc5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbc6:	4b36      	ldr	r3, [pc, #216]	@ (800dca0 <xTaskIncrementTick+0x150>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d104      	bne.n	800dbda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd0:	4b36      	ldr	r3, [pc, #216]	@ (800dcac <xTaskIncrementTick+0x15c>)
 800dbd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dbd6:	601a      	str	r2, [r3, #0]
					break;
 800dbd8:	e03f      	b.n	800dc5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbda:	4b31      	ldr	r3, [pc, #196]	@ (800dca0 <xTaskIncrementTick+0x150>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dbea:	693a      	ldr	r2, [r7, #16]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d203      	bcs.n	800dbfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dbf2:	4a2e      	ldr	r2, [pc, #184]	@ (800dcac <xTaskIncrementTick+0x15c>)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dbf8:	e02f      	b.n	800dc5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	3304      	adds	r3, #4
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe fd32 	bl	800c668 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d004      	beq.n	800dc16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	3318      	adds	r3, #24
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fe fd29 	bl	800c668 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc1a:	4b25      	ldr	r3, [pc, #148]	@ (800dcb0 <xTaskIncrementTick+0x160>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d903      	bls.n	800dc2a <xTaskIncrementTick+0xda>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc26:	4a22      	ldr	r2, [pc, #136]	@ (800dcb0 <xTaskIncrementTick+0x160>)
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2e:	4613      	mov	r3, r2
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4413      	add	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4a1f      	ldr	r2, [pc, #124]	@ (800dcb4 <xTaskIncrementTick+0x164>)
 800dc38:	441a      	add	r2, r3
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4610      	mov	r0, r2
 800dc42:	f7fe fcb4 	bl	800c5ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800dcb8 <xTaskIncrementTick+0x168>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d3b8      	bcc.n	800dbc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dc54:	2301      	movs	r3, #1
 800dc56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc58:	e7b5      	b.n	800dbc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc5a:	4b17      	ldr	r3, [pc, #92]	@ (800dcb8 <xTaskIncrementTick+0x168>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc60:	4914      	ldr	r1, [pc, #80]	@ (800dcb4 <xTaskIncrementTick+0x164>)
 800dc62:	4613      	mov	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4413      	add	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	440b      	add	r3, r1
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d901      	bls.n	800dc76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dc72:	2301      	movs	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc76:	4b11      	ldr	r3, [pc, #68]	@ (800dcbc <xTaskIncrementTick+0x16c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d007      	beq.n	800dc8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	617b      	str	r3, [r7, #20]
 800dc82:	e004      	b.n	800dc8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dc84:	4b0e      	ldr	r3, [pc, #56]	@ (800dcc0 <xTaskIncrementTick+0x170>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	4a0d      	ldr	r2, [pc, #52]	@ (800dcc0 <xTaskIncrementTick+0x170>)
 800dc8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dc8e:	697b      	ldr	r3, [r7, #20]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	2400ed38 	.word	0x2400ed38
 800dc9c:	2400ed14 	.word	0x2400ed14
 800dca0:	2400ecc8 	.word	0x2400ecc8
 800dca4:	2400eccc 	.word	0x2400eccc
 800dca8:	2400ed28 	.word	0x2400ed28
 800dcac:	2400ed30 	.word	0x2400ed30
 800dcb0:	2400ed18 	.word	0x2400ed18
 800dcb4:	2400e840 	.word	0x2400e840
 800dcb8:	2400e83c 	.word	0x2400e83c
 800dcbc:	2400ed24 	.word	0x2400ed24
 800dcc0:	2400ed20 	.word	0x2400ed20

0800dcc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b085      	sub	sp, #20
 800dcc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcca:	4b28      	ldr	r3, [pc, #160]	@ (800dd6c <vTaskSwitchContext+0xa8>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d003      	beq.n	800dcda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcd2:	4b27      	ldr	r3, [pc, #156]	@ (800dd70 <vTaskSwitchContext+0xac>)
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcd8:	e042      	b.n	800dd60 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dcda:	4b25      	ldr	r3, [pc, #148]	@ (800dd70 <vTaskSwitchContext+0xac>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce0:	4b24      	ldr	r3, [pc, #144]	@ (800dd74 <vTaskSwitchContext+0xb0>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	e011      	b.n	800dd0c <vTaskSwitchContext+0x48>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d10b      	bne.n	800dd06 <vTaskSwitchContext+0x42>
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	607b      	str	r3, [r7, #4]
}
 800dd00:	bf00      	nop
 800dd02:	bf00      	nop
 800dd04:	e7fd      	b.n	800dd02 <vTaskSwitchContext+0x3e>
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	60fb      	str	r3, [r7, #12]
 800dd0c:	491a      	ldr	r1, [pc, #104]	@ (800dd78 <vTaskSwitchContext+0xb4>)
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	4613      	mov	r3, r2
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	440b      	add	r3, r1
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d0e3      	beq.n	800dce8 <vTaskSwitchContext+0x24>
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	4613      	mov	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4a13      	ldr	r2, [pc, #76]	@ (800dd78 <vTaskSwitchContext+0xb4>)
 800dd2c:	4413      	add	r3, r2
 800dd2e:	60bb      	str	r3, [r7, #8]
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	605a      	str	r2, [r3, #4]
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	3308      	adds	r3, #8
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d104      	bne.n	800dd50 <vTaskSwitchContext+0x8c>
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	685a      	ldr	r2, [r3, #4]
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	605a      	str	r2, [r3, #4]
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	68db      	ldr	r3, [r3, #12]
 800dd56:	4a09      	ldr	r2, [pc, #36]	@ (800dd7c <vTaskSwitchContext+0xb8>)
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	4a06      	ldr	r2, [pc, #24]	@ (800dd74 <vTaskSwitchContext+0xb0>)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6013      	str	r3, [r2, #0]
}
 800dd60:	bf00      	nop
 800dd62:	3714      	adds	r7, #20
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	2400ed38 	.word	0x2400ed38
 800dd70:	2400ed24 	.word	0x2400ed24
 800dd74:	2400ed18 	.word	0x2400ed18
 800dd78:	2400e840 	.word	0x2400e840
 800dd7c:	2400e83c 	.word	0x2400e83c

0800dd80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d10b      	bne.n	800dda8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	60fb      	str	r3, [r7, #12]
}
 800dda2:	bf00      	nop
 800dda4:	bf00      	nop
 800dda6:	e7fd      	b.n	800dda4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dda8:	4b07      	ldr	r3, [pc, #28]	@ (800ddc8 <vTaskPlaceOnEventList+0x48>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3318      	adds	r3, #24
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7fe fc20 	bl	800c5f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	6838      	ldr	r0, [r7, #0]
 800ddba:	f000 faa9 	bl	800e310 <prvAddCurrentTaskToDelayedList>
}
 800ddbe:	bf00      	nop
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	2400e83c 	.word	0x2400e83c

0800ddcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d10b      	bne.n	800ddf6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ddde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde2:	f383 8811 	msr	BASEPRI, r3
 800dde6:	f3bf 8f6f 	isb	sy
 800ddea:	f3bf 8f4f 	dsb	sy
 800ddee:	617b      	str	r3, [r7, #20]
}
 800ddf0:	bf00      	nop
 800ddf2:	bf00      	nop
 800ddf4:	e7fd      	b.n	800ddf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddf6:	4b0a      	ldr	r3, [pc, #40]	@ (800de20 <vTaskPlaceOnEventListRestricted+0x54>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3318      	adds	r3, #24
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7fe fbd5 	bl	800c5ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d002      	beq.n	800de10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800de0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	68b8      	ldr	r0, [r7, #8]
 800de14:	f000 fa7c 	bl	800e310 <prvAddCurrentTaskToDelayedList>
	}
 800de18:	bf00      	nop
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	2400e83c 	.word	0x2400e83c

0800de24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10b      	bne.n	800de52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3e:	f383 8811 	msr	BASEPRI, r3
 800de42:	f3bf 8f6f 	isb	sy
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	60fb      	str	r3, [r7, #12]
}
 800de4c:	bf00      	nop
 800de4e:	bf00      	nop
 800de50:	e7fd      	b.n	800de4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	3318      	adds	r3, #24
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fc06 	bl	800c668 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ded4 <xTaskRemoveFromEventList+0xb0>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d11d      	bne.n	800dea0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	3304      	adds	r3, #4
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fe fbfd 	bl	800c668 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de72:	4b19      	ldr	r3, [pc, #100]	@ (800ded8 <xTaskRemoveFromEventList+0xb4>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	429a      	cmp	r2, r3
 800de78:	d903      	bls.n	800de82 <xTaskRemoveFromEventList+0x5e>
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de7e:	4a16      	ldr	r2, [pc, #88]	@ (800ded8 <xTaskRemoveFromEventList+0xb4>)
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de86:	4613      	mov	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4413      	add	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4a13      	ldr	r2, [pc, #76]	@ (800dedc <xTaskRemoveFromEventList+0xb8>)
 800de90:	441a      	add	r2, r3
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	3304      	adds	r3, #4
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7fe fb88 	bl	800c5ae <vListInsertEnd>
 800de9e:	e005      	b.n	800deac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	3318      	adds	r3, #24
 800dea4:	4619      	mov	r1, r3
 800dea6:	480e      	ldr	r0, [pc, #56]	@ (800dee0 <xTaskRemoveFromEventList+0xbc>)
 800dea8:	f7fe fb81 	bl	800c5ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dee4 <xTaskRemoveFromEventList+0xc0>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d905      	bls.n	800dec6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800deba:	2301      	movs	r3, #1
 800debc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800debe:	4b0a      	ldr	r3, [pc, #40]	@ (800dee8 <xTaskRemoveFromEventList+0xc4>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	e001      	b.n	800deca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800deca:	697b      	ldr	r3, [r7, #20]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3718      	adds	r7, #24
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	2400ed38 	.word	0x2400ed38
 800ded8:	2400ed18 	.word	0x2400ed18
 800dedc:	2400e840 	.word	0x2400e840
 800dee0:	2400ecd0 	.word	0x2400ecd0
 800dee4:	2400e83c 	.word	0x2400e83c
 800dee8:	2400ed24 	.word	0x2400ed24

0800deec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10b      	bne.n	800df12 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	60fb      	str	r3, [r7, #12]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800df12:	f7fe fd01 	bl	800c918 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df16:	4b07      	ldr	r3, [pc, #28]	@ (800df34 <vTaskSetTimeOutState+0x48>)
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800df1e:	4b06      	ldr	r3, [pc, #24]	@ (800df38 <vTaskSetTimeOutState+0x4c>)
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800df26:	f7fe fd29 	bl	800c97c <vPortExitCritical>
}
 800df2a:	bf00      	nop
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	2400ed28 	.word	0x2400ed28
 800df38:	2400ed14 	.word	0x2400ed14

0800df3c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df3c:	b480      	push	{r7}
 800df3e:	b083      	sub	sp, #12
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df44:	4b06      	ldr	r3, [pc, #24]	@ (800df60 <vTaskInternalSetTimeOutState+0x24>)
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df4c:	4b05      	ldr	r3, [pc, #20]	@ (800df64 <vTaskInternalSetTimeOutState+0x28>)
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	605a      	str	r2, [r3, #4]
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	2400ed28 	.word	0x2400ed28
 800df64:	2400ed14 	.word	0x2400ed14

0800df68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10b      	bne.n	800df90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800df78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	613b      	str	r3, [r7, #16]
}
 800df8a:	bf00      	nop
 800df8c:	bf00      	nop
 800df8e:	e7fd      	b.n	800df8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10b      	bne.n	800dfae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800df96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	60fb      	str	r3, [r7, #12]
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	e7fd      	b.n	800dfaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dfae:	f7fe fcb3 	bl	800c918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfb2:	4b1d      	ldr	r3, [pc, #116]	@ (800e028 <xTaskCheckForTimeOut+0xc0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfca:	d102      	bne.n	800dfd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61fb      	str	r3, [r7, #28]
 800dfd0:	e023      	b.n	800e01a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	4b15      	ldr	r3, [pc, #84]	@ (800e02c <xTaskCheckForTimeOut+0xc4>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d007      	beq.n	800dfee <xTaskCheckForTimeOut+0x86>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d302      	bcc.n	800dfee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dfe8:	2301      	movs	r3, #1
 800dfea:	61fb      	str	r3, [r7, #28]
 800dfec:	e015      	b.n	800e01a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d20b      	bcs.n	800e010 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff ff99 	bl	800df3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e00a:	2300      	movs	r3, #0
 800e00c:	61fb      	str	r3, [r7, #28]
 800e00e:	e004      	b.n	800e01a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e016:	2301      	movs	r3, #1
 800e018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e01a:	f7fe fcaf 	bl	800c97c <vPortExitCritical>

	return xReturn;
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3720      	adds	r7, #32
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	2400ed14 	.word	0x2400ed14
 800e02c:	2400ed28 	.word	0x2400ed28

0800e030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e030:	b480      	push	{r7}
 800e032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e034:	4b03      	ldr	r3, [pc, #12]	@ (800e044 <vTaskMissedYield+0x14>)
 800e036:	2201      	movs	r2, #1
 800e038:	601a      	str	r2, [r3, #0]
}
 800e03a:	bf00      	nop
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	2400ed24 	.word	0x2400ed24

0800e048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e050:	f000 f852 	bl	800e0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e054:	4b06      	ldr	r3, [pc, #24]	@ (800e070 <prvIdleTask+0x28>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d9f9      	bls.n	800e050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e05c:	4b05      	ldr	r3, [pc, #20]	@ (800e074 <prvIdleTask+0x2c>)
 800e05e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e062:	601a      	str	r2, [r3, #0]
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e06c:	e7f0      	b.n	800e050 <prvIdleTask+0x8>
 800e06e:	bf00      	nop
 800e070:	2400e840 	.word	0x2400e840
 800e074:	e000ed04 	.word	0xe000ed04

0800e078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e07e:	2300      	movs	r3, #0
 800e080:	607b      	str	r3, [r7, #4]
 800e082:	e00c      	b.n	800e09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4a12      	ldr	r2, [pc, #72]	@ (800e0d8 <prvInitialiseTaskLists+0x60>)
 800e090:	4413      	add	r3, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fa5e 	bl	800c554 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3301      	adds	r3, #1
 800e09c:	607b      	str	r3, [r7, #4]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b37      	cmp	r3, #55	@ 0x37
 800e0a2:	d9ef      	bls.n	800e084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0a4:	480d      	ldr	r0, [pc, #52]	@ (800e0dc <prvInitialiseTaskLists+0x64>)
 800e0a6:	f7fe fa55 	bl	800c554 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0aa:	480d      	ldr	r0, [pc, #52]	@ (800e0e0 <prvInitialiseTaskLists+0x68>)
 800e0ac:	f7fe fa52 	bl	800c554 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0b0:	480c      	ldr	r0, [pc, #48]	@ (800e0e4 <prvInitialiseTaskLists+0x6c>)
 800e0b2:	f7fe fa4f 	bl	800c554 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0b6:	480c      	ldr	r0, [pc, #48]	@ (800e0e8 <prvInitialiseTaskLists+0x70>)
 800e0b8:	f7fe fa4c 	bl	800c554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0bc:	480b      	ldr	r0, [pc, #44]	@ (800e0ec <prvInitialiseTaskLists+0x74>)
 800e0be:	f7fe fa49 	bl	800c554 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0c2:	4b0b      	ldr	r3, [pc, #44]	@ (800e0f0 <prvInitialiseTaskLists+0x78>)
 800e0c4:	4a05      	ldr	r2, [pc, #20]	@ (800e0dc <prvInitialiseTaskLists+0x64>)
 800e0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f4 <prvInitialiseTaskLists+0x7c>)
 800e0ca:	4a05      	ldr	r2, [pc, #20]	@ (800e0e0 <prvInitialiseTaskLists+0x68>)
 800e0cc:	601a      	str	r2, [r3, #0]
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	2400e840 	.word	0x2400e840
 800e0dc:	2400eca0 	.word	0x2400eca0
 800e0e0:	2400ecb4 	.word	0x2400ecb4
 800e0e4:	2400ecd0 	.word	0x2400ecd0
 800e0e8:	2400ece4 	.word	0x2400ece4
 800e0ec:	2400ecfc 	.word	0x2400ecfc
 800e0f0:	2400ecc8 	.word	0x2400ecc8
 800e0f4:	2400eccc 	.word	0x2400eccc

0800e0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0fe:	e019      	b.n	800e134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e100:	f7fe fc0a 	bl	800c918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e104:	4b10      	ldr	r3, [pc, #64]	@ (800e148 <prvCheckTasksWaitingTermination+0x50>)
 800e106:	68db      	ldr	r3, [r3, #12]
 800e108:	68db      	ldr	r3, [r3, #12]
 800e10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3304      	adds	r3, #4
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe faa9 	bl	800c668 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e116:	4b0d      	ldr	r3, [pc, #52]	@ (800e14c <prvCheckTasksWaitingTermination+0x54>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	3b01      	subs	r3, #1
 800e11c:	4a0b      	ldr	r2, [pc, #44]	@ (800e14c <prvCheckTasksWaitingTermination+0x54>)
 800e11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e120:	4b0b      	ldr	r3, [pc, #44]	@ (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	3b01      	subs	r3, #1
 800e126:	4a0a      	ldr	r2, [pc, #40]	@ (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e12a:	f7fe fc27 	bl	800c97c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f810 	bl	800e154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e134:	4b06      	ldr	r3, [pc, #24]	@ (800e150 <prvCheckTasksWaitingTermination+0x58>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1e1      	bne.n	800e100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e13c:	bf00      	nop
 800e13e:	bf00      	nop
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	2400ece4 	.word	0x2400ece4
 800e14c:	2400ed10 	.word	0x2400ed10
 800e150:	2400ecf8 	.word	0x2400ecf8

0800e154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e162:	2b00      	cmp	r3, #0
 800e164:	d108      	bne.n	800e178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe f8d2 	bl	800c314 <vPortFree>
				vPortFree( pxTCB );
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f7fe f8cf 	bl	800c314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e176:	e019      	b.n	800e1ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d103      	bne.n	800e18a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7fe f8c6 	bl	800c314 <vPortFree>
	}
 800e188:	e010      	b.n	800e1ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e190:	2b02      	cmp	r3, #2
 800e192:	d00b      	beq.n	800e1ac <prvDeleteTCB+0x58>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	60fb      	str	r3, [r7, #12]
}
 800e1a6:	bf00      	nop
 800e1a8:	bf00      	nop
 800e1aa:	e7fd      	b.n	800e1a8 <prvDeleteTCB+0x54>
	}
 800e1ac:	bf00      	nop
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e1ec <prvResetNextTaskUnblockTime+0x38>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d104      	bne.n	800e1ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1c4:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e1c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1cc:	e008      	b.n	800e1e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1ce:	4b07      	ldr	r3, [pc, #28]	@ (800e1ec <prvResetNextTaskUnblockTime+0x38>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4a04      	ldr	r2, [pc, #16]	@ (800e1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800e1de:	6013      	str	r3, [r2, #0]
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	2400ecc8 	.word	0x2400ecc8
 800e1f0:	2400ed30 	.word	0x2400ed30

0800e1f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e228 <xTaskGetSchedulerState+0x34>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d102      	bne.n	800e208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e202:	2301      	movs	r3, #1
 800e204:	607b      	str	r3, [r7, #4]
 800e206:	e008      	b.n	800e21a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e208:	4b08      	ldr	r3, [pc, #32]	@ (800e22c <xTaskGetSchedulerState+0x38>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d102      	bne.n	800e216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e210:	2302      	movs	r3, #2
 800e212:	607b      	str	r3, [r7, #4]
 800e214:	e001      	b.n	800e21a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e216:	2300      	movs	r3, #0
 800e218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e21a:	687b      	ldr	r3, [r7, #4]
	}
 800e21c:	4618      	mov	r0, r3
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	2400ed1c 	.word	0x2400ed1c
 800e22c:	2400ed38 	.word	0x2400ed38

0800e230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e23c:	2300      	movs	r3, #0
 800e23e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d058      	beq.n	800e2f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e246:	4b2f      	ldr	r3, [pc, #188]	@ (800e304 <xTaskPriorityDisinherit+0xd4>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	693a      	ldr	r2, [r7, #16]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d00b      	beq.n	800e268 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	60fb      	str	r3, [r7, #12]
}
 800e262:	bf00      	nop
 800e264:	bf00      	nop
 800e266:	e7fd      	b.n	800e264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10b      	bne.n	800e288 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	60bb      	str	r3, [r7, #8]
}
 800e282:	bf00      	nop
 800e284:	bf00      	nop
 800e286:	e7fd      	b.n	800e284 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e28c:	1e5a      	subs	r2, r3, #1
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d02c      	beq.n	800e2f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d128      	bne.n	800e2f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe f9dc 	bl	800c668 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e308 <xTaskPriorityDisinherit+0xd8>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d903      	bls.n	800e2d8 <xTaskPriorityDisinherit+0xa8>
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2d4:	4a0c      	ldr	r2, [pc, #48]	@ (800e308 <xTaskPriorityDisinherit+0xd8>)
 800e2d6:	6013      	str	r3, [r2, #0]
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2dc:	4613      	mov	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	4413      	add	r3, r2
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4a09      	ldr	r2, [pc, #36]	@ (800e30c <xTaskPriorityDisinherit+0xdc>)
 800e2e6:	441a      	add	r2, r3
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	f7fe f95d 	bl	800c5ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e2f8:	697b      	ldr	r3, [r7, #20]
	}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3718      	adds	r7, #24
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	2400e83c 	.word	0x2400e83c
 800e308:	2400ed18 	.word	0x2400ed18
 800e30c:	2400e840 	.word	0x2400e840

0800e310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e31a:	4b21      	ldr	r3, [pc, #132]	@ (800e3a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e320:	4b20      	ldr	r3, [pc, #128]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3304      	adds	r3, #4
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe f99e 	bl	800c668 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e332:	d10a      	bne.n	800e34a <prvAddCurrentTaskToDelayedList+0x3a>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d007      	beq.n	800e34a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e33a:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	3304      	adds	r3, #4
 800e340:	4619      	mov	r1, r3
 800e342:	4819      	ldr	r0, [pc, #100]	@ (800e3a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e344:	f7fe f933 	bl	800c5ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e348:	e026      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e34a:	68fa      	ldr	r2, [r7, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4413      	add	r3, r2
 800e350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e352:	4b14      	ldr	r3, [pc, #80]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e35a:	68ba      	ldr	r2, [r7, #8]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d209      	bcs.n	800e376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e362:	4b12      	ldr	r3, [pc, #72]	@ (800e3ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	4b0f      	ldr	r3, [pc, #60]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	3304      	adds	r3, #4
 800e36c:	4619      	mov	r1, r3
 800e36e:	4610      	mov	r0, r2
 800e370:	f7fe f941 	bl	800c5f6 <vListInsert>
}
 800e374:	e010      	b.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e376:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	4b0a      	ldr	r3, [pc, #40]	@ (800e3a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3304      	adds	r3, #4
 800e380:	4619      	mov	r1, r3
 800e382:	4610      	mov	r0, r2
 800e384:	f7fe f937 	bl	800c5f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e388:	4b0a      	ldr	r3, [pc, #40]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68ba      	ldr	r2, [r7, #8]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d202      	bcs.n	800e398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e392:	4a08      	ldr	r2, [pc, #32]	@ (800e3b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	6013      	str	r3, [r2, #0]
}
 800e398:	bf00      	nop
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	2400ed14 	.word	0x2400ed14
 800e3a4:	2400e83c 	.word	0x2400e83c
 800e3a8:	2400ecfc 	.word	0x2400ecfc
 800e3ac:	2400eccc 	.word	0x2400eccc
 800e3b0:	2400ecc8 	.word	0x2400ecc8
 800e3b4:	2400ed30 	.word	0x2400ed30

0800e3b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08a      	sub	sp, #40	@ 0x28
 800e3bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3c2:	f000 fb13 	bl	800e9ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3c6:	4b1d      	ldr	r3, [pc, #116]	@ (800e43c <xTimerCreateTimerTask+0x84>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d021      	beq.n	800e412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3d6:	1d3a      	adds	r2, r7, #4
 800e3d8:	f107 0108 	add.w	r1, r7, #8
 800e3dc:	f107 030c 	add.w	r3, r7, #12
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fd feaf 	bl	800c144 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e3e6:	6879      	ldr	r1, [r7, #4]
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	9202      	str	r2, [sp, #8]
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	460a      	mov	r2, r1
 800e3f8:	4911      	ldr	r1, [pc, #68]	@ (800e440 <xTimerCreateTimerTask+0x88>)
 800e3fa:	4812      	ldr	r0, [pc, #72]	@ (800e444 <xTimerCreateTimerTask+0x8c>)
 800e3fc:	f7ff f8a8 	bl	800d550 <xTaskCreateStatic>
 800e400:	4603      	mov	r3, r0
 800e402:	4a11      	ldr	r2, [pc, #68]	@ (800e448 <xTimerCreateTimerTask+0x90>)
 800e404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e406:	4b10      	ldr	r3, [pc, #64]	@ (800e448 <xTimerCreateTimerTask+0x90>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e40e:	2301      	movs	r3, #1
 800e410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10b      	bne.n	800e430 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	613b      	str	r3, [r7, #16]
}
 800e42a:	bf00      	nop
 800e42c:	bf00      	nop
 800e42e:	e7fd      	b.n	800e42c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e430:	697b      	ldr	r3, [r7, #20]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	2400ed6c 	.word	0x2400ed6c
 800e440:	0801dd1c 	.word	0x0801dd1c
 800e444:	0800e585 	.word	0x0800e585
 800e448:	2400ed70 	.word	0x2400ed70

0800e44c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08a      	sub	sp, #40	@ 0x28
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e45a:	2300      	movs	r3, #0
 800e45c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10b      	bne.n	800e47c <xTimerGenericCommand+0x30>
	__asm volatile
 800e464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e468:	f383 8811 	msr	BASEPRI, r3
 800e46c:	f3bf 8f6f 	isb	sy
 800e470:	f3bf 8f4f 	dsb	sy
 800e474:	623b      	str	r3, [r7, #32]
}
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	e7fd      	b.n	800e478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e47c:	4b19      	ldr	r3, [pc, #100]	@ (800e4e4 <xTimerGenericCommand+0x98>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d02a      	beq.n	800e4da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	2b05      	cmp	r3, #5
 800e494:	dc18      	bgt.n	800e4c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e496:	f7ff fead 	bl	800e1f4 <xTaskGetSchedulerState>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d109      	bne.n	800e4b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4a0:	4b10      	ldr	r3, [pc, #64]	@ (800e4e4 <xTimerGenericCommand+0x98>)
 800e4a2:	6818      	ldr	r0, [r3, #0]
 800e4a4:	f107 0110 	add.w	r1, r7, #16
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4ac:	f7fe fc60 	bl	800cd70 <xQueueGenericSend>
 800e4b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e4b2:	e012      	b.n	800e4da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e4 <xTimerGenericCommand+0x98>)
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	f107 0110 	add.w	r1, r7, #16
 800e4bc:	2300      	movs	r3, #0
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f7fe fc56 	bl	800cd70 <xQueueGenericSend>
 800e4c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e4c6:	e008      	b.n	800e4da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4c8:	4b06      	ldr	r3, [pc, #24]	@ (800e4e4 <xTimerGenericCommand+0x98>)
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	f107 0110 	add.w	r1, r7, #16
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	683a      	ldr	r2, [r7, #0]
 800e4d4:	f7fe fd4e 	bl	800cf74 <xQueueGenericSendFromISR>
 800e4d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e4dc:	4618      	mov	r0, r3
 800e4de:	3728      	adds	r7, #40	@ 0x28
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	2400ed6c 	.word	0x2400ed6c

0800e4e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b088      	sub	sp, #32
 800e4ec:	af02      	add	r7, sp, #8
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4f2:	4b23      	ldr	r3, [pc, #140]	@ (800e580 <prvProcessExpiredTimer+0x98>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe f8b1 	bl	800c668 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e50c:	f003 0304 	and.w	r3, r3, #4
 800e510:	2b00      	cmp	r3, #0
 800e512:	d023      	beq.n	800e55c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	699a      	ldr	r2, [r3, #24]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	18d1      	adds	r1, r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	683a      	ldr	r2, [r7, #0]
 800e520:	6978      	ldr	r0, [r7, #20]
 800e522:	f000 f8d5 	bl	800e6d0 <prvInsertTimerInActiveList>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d020      	beq.n	800e56e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e52c:	2300      	movs	r3, #0
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	2300      	movs	r3, #0
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	2100      	movs	r1, #0
 800e536:	6978      	ldr	r0, [r7, #20]
 800e538:	f7ff ff88 	bl	800e44c <xTimerGenericCommand>
 800e53c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d114      	bne.n	800e56e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	60fb      	str	r3, [r7, #12]
}
 800e556:	bf00      	nop
 800e558:	bf00      	nop
 800e55a:	e7fd      	b.n	800e558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e562:	f023 0301 	bic.w	r3, r3, #1
 800e566:	b2da      	uxtb	r2, r3
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	6a1b      	ldr	r3, [r3, #32]
 800e572:	6978      	ldr	r0, [r7, #20]
 800e574:	4798      	blx	r3
}
 800e576:	bf00      	nop
 800e578:	3718      	adds	r7, #24
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	2400ed64 	.word	0x2400ed64

0800e584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e58c:	f107 0308 	add.w	r3, r7, #8
 800e590:	4618      	mov	r0, r3
 800e592:	f000 f859 	bl	800e648 <prvGetNextExpireTime>
 800e596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	4619      	mov	r1, r3
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f000 f805 	bl	800e5ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5a2:	f000 f8d7 	bl	800e754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5a6:	bf00      	nop
 800e5a8:	e7f0      	b.n	800e58c <prvTimerTask+0x8>
	...

0800e5ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5b6:	f7ff fa0f 	bl	800d9d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5ba:	f107 0308 	add.w	r3, r7, #8
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 f866 	bl	800e690 <prvSampleTimeNow>
 800e5c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d130      	bne.n	800e62e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d10a      	bne.n	800e5e8 <prvProcessTimerOrBlockTask+0x3c>
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d806      	bhi.n	800e5e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5da:	f7ff fa0b 	bl	800d9f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5de:	68f9      	ldr	r1, [r7, #12]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff ff81 	bl	800e4e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5e6:	e024      	b.n	800e632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d008      	beq.n	800e600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e5ee:	4b13      	ldr	r3, [pc, #76]	@ (800e63c <prvProcessTimerOrBlockTask+0x90>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <prvProcessTimerOrBlockTask+0x50>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	e000      	b.n	800e5fe <prvProcessTimerOrBlockTask+0x52>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e600:	4b0f      	ldr	r3, [pc, #60]	@ (800e640 <prvProcessTimerOrBlockTask+0x94>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	683a      	ldr	r2, [r7, #0]
 800e60c:	4619      	mov	r1, r3
 800e60e:	f7fe ff6b 	bl	800d4e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e612:	f7ff f9ef 	bl	800d9f4 <xTaskResumeAll>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10a      	bne.n	800e632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e61c:	4b09      	ldr	r3, [pc, #36]	@ (800e644 <prvProcessTimerOrBlockTask+0x98>)
 800e61e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e622:	601a      	str	r2, [r3, #0]
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	f3bf 8f6f 	isb	sy
}
 800e62c:	e001      	b.n	800e632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e62e:	f7ff f9e1 	bl	800d9f4 <xTaskResumeAll>
}
 800e632:	bf00      	nop
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	2400ed68 	.word	0x2400ed68
 800e640:	2400ed6c 	.word	0x2400ed6c
 800e644:	e000ed04 	.word	0xe000ed04

0800e648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e648:	b480      	push	{r7}
 800e64a:	b085      	sub	sp, #20
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e650:	4b0e      	ldr	r3, [pc, #56]	@ (800e68c <prvGetNextExpireTime+0x44>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d101      	bne.n	800e65e <prvGetNextExpireTime+0x16>
 800e65a:	2201      	movs	r2, #1
 800e65c:	e000      	b.n	800e660 <prvGetNextExpireTime+0x18>
 800e65e:	2200      	movs	r2, #0
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d105      	bne.n	800e678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e66c:	4b07      	ldr	r3, [pc, #28]	@ (800e68c <prvGetNextExpireTime+0x44>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	e001      	b.n	800e67c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e678:	2300      	movs	r3, #0
 800e67a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e67c:	68fb      	ldr	r3, [r7, #12]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3714      	adds	r7, #20
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	2400ed64 	.word	0x2400ed64

0800e690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e698:	f7ff fa4a 	bl	800db30 <xTaskGetTickCount>
 800e69c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e69e:	4b0b      	ldr	r3, [pc, #44]	@ (800e6cc <prvSampleTimeNow+0x3c>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d205      	bcs.n	800e6b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6a8:	f000 f93a 	bl	800e920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	e002      	b.n	800e6ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6ba:	4a04      	ldr	r2, [pc, #16]	@ (800e6cc <prvSampleTimeNow+0x3c>)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	2400ed74 	.word	0x2400ed74

0800e6d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b086      	sub	sp, #24
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
 800e6dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d812      	bhi.n	800e71c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	1ad2      	subs	r2, r2, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	429a      	cmp	r2, r3
 800e702:	d302      	bcc.n	800e70a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e704:	2301      	movs	r3, #1
 800e706:	617b      	str	r3, [r7, #20]
 800e708:	e01b      	b.n	800e742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e70a:	4b10      	ldr	r3, [pc, #64]	@ (800e74c <prvInsertTimerInActiveList+0x7c>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3304      	adds	r3, #4
 800e712:	4619      	mov	r1, r3
 800e714:	4610      	mov	r0, r2
 800e716:	f7fd ff6e 	bl	800c5f6 <vListInsert>
 800e71a:	e012      	b.n	800e742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	429a      	cmp	r2, r3
 800e722:	d206      	bcs.n	800e732 <prvInsertTimerInActiveList+0x62>
 800e724:	68ba      	ldr	r2, [r7, #8]
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d302      	bcc.n	800e732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e72c:	2301      	movs	r3, #1
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	e007      	b.n	800e742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e732:	4b07      	ldr	r3, [pc, #28]	@ (800e750 <prvInsertTimerInActiveList+0x80>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	3304      	adds	r3, #4
 800e73a:	4619      	mov	r1, r3
 800e73c:	4610      	mov	r0, r2
 800e73e:	f7fd ff5a 	bl	800c5f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e742:	697b      	ldr	r3, [r7, #20]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3718      	adds	r7, #24
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	2400ed68 	.word	0x2400ed68
 800e750:	2400ed64 	.word	0x2400ed64

0800e754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08e      	sub	sp, #56	@ 0x38
 800e758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e75a:	e0ce      	b.n	800e8fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	da19      	bge.n	800e796 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e762:	1d3b      	adds	r3, r7, #4
 800e764:	3304      	adds	r3, #4
 800e766:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10b      	bne.n	800e786 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e772:	f383 8811 	msr	BASEPRI, r3
 800e776:	f3bf 8f6f 	isb	sy
 800e77a:	f3bf 8f4f 	dsb	sy
 800e77e:	61fb      	str	r3, [r7, #28]
}
 800e780:	bf00      	nop
 800e782:	bf00      	nop
 800e784:	e7fd      	b.n	800e782 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e78c:	6850      	ldr	r0, [r2, #4]
 800e78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e790:	6892      	ldr	r2, [r2, #8]
 800e792:	4611      	mov	r1, r2
 800e794:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f2c0 80ae 	blt.w	800e8fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a4:	695b      	ldr	r3, [r3, #20]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d004      	beq.n	800e7b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fd ff5a 	bl	800c668 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff ff6a 	bl	800e690 <prvSampleTimeNow>
 800e7bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b09      	cmp	r3, #9
 800e7c2:	f200 8097 	bhi.w	800e8f4 <prvProcessReceivedCommands+0x1a0>
 800e7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7cc <prvProcessReceivedCommands+0x78>)
 800e7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7cc:	0800e7f5 	.word	0x0800e7f5
 800e7d0:	0800e7f5 	.word	0x0800e7f5
 800e7d4:	0800e7f5 	.word	0x0800e7f5
 800e7d8:	0800e86b 	.word	0x0800e86b
 800e7dc:	0800e87f 	.word	0x0800e87f
 800e7e0:	0800e8cb 	.word	0x0800e8cb
 800e7e4:	0800e7f5 	.word	0x0800e7f5
 800e7e8:	0800e7f5 	.word	0x0800e7f5
 800e7ec:	0800e86b 	.word	0x0800e86b
 800e7f0:	0800e87f 	.word	0x0800e87f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e7fa:	f043 0301 	orr.w	r3, r3, #1
 800e7fe:	b2da      	uxtb	r2, r3
 800e800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80a:	699b      	ldr	r3, [r3, #24]
 800e80c:	18d1      	adds	r1, r2, r3
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e814:	f7ff ff5c 	bl	800e6d0 <prvInsertTimerInActiveList>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d06c      	beq.n	800e8f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e820:	6a1b      	ldr	r3, [r3, #32]
 800e822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e82c:	f003 0304 	and.w	r3, r3, #4
 800e830:	2b00      	cmp	r3, #0
 800e832:	d061      	beq.n	800e8f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	441a      	add	r2, r3
 800e83c:	2300      	movs	r3, #0
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	2300      	movs	r3, #0
 800e842:	2100      	movs	r1, #0
 800e844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e846:	f7ff fe01 	bl	800e44c <xTimerGenericCommand>
 800e84a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e84c:	6a3b      	ldr	r3, [r7, #32]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d152      	bne.n	800e8f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	61bb      	str	r3, [r7, #24]
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop
 800e868:	e7fd      	b.n	800e866 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e86c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e870:	f023 0301 	bic.w	r3, r3, #1
 800e874:	b2da      	uxtb	r2, r3
 800e876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e878:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e87c:	e03d      	b.n	800e8fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e884:	f043 0301 	orr.w	r3, r3, #1
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e894:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e898:	699b      	ldr	r3, [r3, #24]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d10b      	bne.n	800e8b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	617b      	str	r3, [r7, #20]
}
 800e8b0:	bf00      	nop
 800e8b2:	bf00      	nop
 800e8b4:	e7fd      	b.n	800e8b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b8:	699a      	ldr	r2, [r3, #24]
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8bc:	18d1      	adds	r1, r2, r3
 800e8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8c4:	f7ff ff04 	bl	800e6d0 <prvInsertTimerInActiveList>
					break;
 800e8c8:	e017      	b.n	800e8fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8d0:	f003 0302 	and.w	r3, r3, #2
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d103      	bne.n	800e8e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e8d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8da:	f7fd fd1b 	bl	800c314 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e8de:	e00c      	b.n	800e8fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8e6:	f023 0301 	bic.w	r3, r3, #1
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e8f2:	e002      	b.n	800e8fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e8f4:	bf00      	nop
 800e8f6:	e000      	b.n	800e8fa <prvProcessReceivedCommands+0x1a6>
					break;
 800e8f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e8fa:	4b08      	ldr	r3, [pc, #32]	@ (800e91c <prvProcessReceivedCommands+0x1c8>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	1d39      	adds	r1, r7, #4
 800e900:	2200      	movs	r2, #0
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe fbd4 	bl	800d0b0 <xQueueReceive>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f47f af26 	bne.w	800e75c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e910:	bf00      	nop
 800e912:	bf00      	nop
 800e914:	3730      	adds	r7, #48	@ 0x30
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}
 800e91a:	bf00      	nop
 800e91c:	2400ed6c 	.word	0x2400ed6c

0800e920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b088      	sub	sp, #32
 800e924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e926:	e049      	b.n	800e9bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e928:	4b2e      	ldr	r3, [pc, #184]	@ (800e9e4 <prvSwitchTimerLists+0xc4>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e932:	4b2c      	ldr	r3, [pc, #176]	@ (800e9e4 <prvSwitchTimerLists+0xc4>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	3304      	adds	r3, #4
 800e940:	4618      	mov	r0, r3
 800e942:	f7fd fe91 	bl	800c668 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6a1b      	ldr	r3, [r3, #32]
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e954:	f003 0304 	and.w	r3, r3, #4
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d02f      	beq.n	800e9bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	699b      	ldr	r3, [r3, #24]
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	4413      	add	r3, r2
 800e964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d90e      	bls.n	800e98c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	68fa      	ldr	r2, [r7, #12]
 800e978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e97a:	4b1a      	ldr	r3, [pc, #104]	@ (800e9e4 <prvSwitchTimerLists+0xc4>)
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	3304      	adds	r3, #4
 800e982:	4619      	mov	r1, r3
 800e984:	4610      	mov	r0, r2
 800e986:	f7fd fe36 	bl	800c5f6 <vListInsert>
 800e98a:	e017      	b.n	800e9bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e98c:	2300      	movs	r3, #0
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	2300      	movs	r3, #0
 800e992:	693a      	ldr	r2, [r7, #16]
 800e994:	2100      	movs	r1, #0
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7ff fd58 	bl	800e44c <xTimerGenericCommand>
 800e99c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10b      	bne.n	800e9bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f3bf 8f4f 	dsb	sy
 800e9b4:	603b      	str	r3, [r7, #0]
}
 800e9b6:	bf00      	nop
 800e9b8:	bf00      	nop
 800e9ba:	e7fd      	b.n	800e9b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9bc:	4b09      	ldr	r3, [pc, #36]	@ (800e9e4 <prvSwitchTimerLists+0xc4>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1b0      	bne.n	800e928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9c6:	4b07      	ldr	r3, [pc, #28]	@ (800e9e4 <prvSwitchTimerLists+0xc4>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9cc:	4b06      	ldr	r3, [pc, #24]	@ (800e9e8 <prvSwitchTimerLists+0xc8>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a04      	ldr	r2, [pc, #16]	@ (800e9e4 <prvSwitchTimerLists+0xc4>)
 800e9d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9d4:	4a04      	ldr	r2, [pc, #16]	@ (800e9e8 <prvSwitchTimerLists+0xc8>)
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	6013      	str	r3, [r2, #0]
}
 800e9da:	bf00      	nop
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	2400ed64 	.word	0x2400ed64
 800e9e8:	2400ed68 	.word	0x2400ed68

0800e9ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9f2:	f7fd ff91 	bl	800c918 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e9f6:	4b15      	ldr	r3, [pc, #84]	@ (800ea4c <prvCheckForValidListAndQueue+0x60>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d120      	bne.n	800ea40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e9fe:	4814      	ldr	r0, [pc, #80]	@ (800ea50 <prvCheckForValidListAndQueue+0x64>)
 800ea00:	f7fd fda8 	bl	800c554 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea04:	4813      	ldr	r0, [pc, #76]	@ (800ea54 <prvCheckForValidListAndQueue+0x68>)
 800ea06:	f7fd fda5 	bl	800c554 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea0a:	4b13      	ldr	r3, [pc, #76]	@ (800ea58 <prvCheckForValidListAndQueue+0x6c>)
 800ea0c:	4a10      	ldr	r2, [pc, #64]	@ (800ea50 <prvCheckForValidListAndQueue+0x64>)
 800ea0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea10:	4b12      	ldr	r3, [pc, #72]	@ (800ea5c <prvCheckForValidListAndQueue+0x70>)
 800ea12:	4a10      	ldr	r2, [pc, #64]	@ (800ea54 <prvCheckForValidListAndQueue+0x68>)
 800ea14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea16:	2300      	movs	r3, #0
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	4b11      	ldr	r3, [pc, #68]	@ (800ea60 <prvCheckForValidListAndQueue+0x74>)
 800ea1c:	4a11      	ldr	r2, [pc, #68]	@ (800ea64 <prvCheckForValidListAndQueue+0x78>)
 800ea1e:	2110      	movs	r1, #16
 800ea20:	200a      	movs	r0, #10
 800ea22:	f7fe f905 	bl	800cc30 <xQueueGenericCreateStatic>
 800ea26:	4603      	mov	r3, r0
 800ea28:	4a08      	ldr	r2, [pc, #32]	@ (800ea4c <prvCheckForValidListAndQueue+0x60>)
 800ea2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea2c:	4b07      	ldr	r3, [pc, #28]	@ (800ea4c <prvCheckForValidListAndQueue+0x60>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d005      	beq.n	800ea40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea34:	4b05      	ldr	r3, [pc, #20]	@ (800ea4c <prvCheckForValidListAndQueue+0x60>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	490b      	ldr	r1, [pc, #44]	@ (800ea68 <prvCheckForValidListAndQueue+0x7c>)
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f7fe fd2a 	bl	800d494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea40:	f7fd ff9c 	bl	800c97c <vPortExitCritical>
}
 800ea44:	bf00      	nop
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	2400ed6c 	.word	0x2400ed6c
 800ea50:	2400ed3c 	.word	0x2400ed3c
 800ea54:	2400ed50 	.word	0x2400ed50
 800ea58:	2400ed64 	.word	0x2400ed64
 800ea5c:	2400ed68 	.word	0x2400ed68
 800ea60:	2400ee18 	.word	0x2400ee18
 800ea64:	2400ed78 	.word	0x2400ed78
 800ea68:	0801dd24 	.word	0x0801dd24

0800ea6c <micro_ros_string_utilities_init>:
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	b086      	sub	sp, #24
 800ea72:	460f      	mov	r7, r1
 800ea74:	4604      	mov	r4, r0
 800ea76:	a801      	add	r0, sp, #4
 800ea78:	f001 f978 	bl	800fd6c <rcutils_get_default_allocator>
 800ea7c:	4638      	mov	r0, r7
 800ea7e:	f7f1 fc39 	bl	80002f4 <strlen>
 800ea82:	f100 0801 	add.w	r8, r0, #1
 800ea86:	9b01      	ldr	r3, [sp, #4]
 800ea88:	4605      	mov	r5, r0
 800ea8a:	9905      	ldr	r1, [sp, #20]
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4798      	blx	r3
 800ea90:	4606      	mov	r6, r0
 800ea92:	4642      	mov	r2, r8
 800ea94:	2100      	movs	r1, #0
 800ea96:	f00e f9e7 	bl	801ce68 <memset>
 800ea9a:	462a      	mov	r2, r5
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	f00e faab 	bl	801cffa <memcpy>
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f8c4 8008 	str.w	r8, [r4, #8]
 800eaaa:	e9c4 6500 	strd	r6, r5, [r4]
 800eaae:	b006      	add	sp, #24
 800eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eab4 <rcl_get_zero_initialized_init_options>:
 800eab4:	2000      	movs	r0, #0
 800eab6:	4770      	bx	lr

0800eab8 <rcl_init_options_init>:
 800eab8:	b084      	sub	sp, #16
 800eaba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eabc:	b097      	sub	sp, #92	@ 0x5c
 800eabe:	ae1d      	add	r6, sp, #116	@ 0x74
 800eac0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d058      	beq.n	800eb7a <rcl_init_options_init+0xc2>
 800eac8:	6803      	ldr	r3, [r0, #0]
 800eaca:	4605      	mov	r5, r0
 800eacc:	b133      	cbz	r3, 800eadc <rcl_init_options_init+0x24>
 800eace:	2464      	movs	r4, #100	@ 0x64
 800ead0:	4620      	mov	r0, r4
 800ead2:	b017      	add	sp, #92	@ 0x5c
 800ead4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ead8:	b004      	add	sp, #16
 800eada:	4770      	bx	lr
 800eadc:	4630      	mov	r0, r6
 800eade:	f001 f953 	bl	800fd88 <rcutils_allocator_is_valid>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d049      	beq.n	800eb7a <rcl_init_options_init+0xc2>
 800eae6:	46b4      	mov	ip, r6
 800eae8:	ac11      	add	r4, sp, #68	@ 0x44
 800eaea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eaee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eaf0:	f8dc 3000 	ldr.w	r3, [ip]
 800eaf4:	2050      	movs	r0, #80	@ 0x50
 800eaf6:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eaf8:	6023      	str	r3, [r4, #0]
 800eafa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eafc:	4798      	blx	r3
 800eafe:	4604      	mov	r4, r0
 800eb00:	6028      	str	r0, [r5, #0]
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d03b      	beq.n	800eb7e <rcl_init_options_init+0xc6>
 800eb06:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800eb0a:	4686      	mov	lr, r0
 800eb0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb14:	f8dc 3000 	ldr.w	r3, [ip]
 800eb18:	a802      	add	r0, sp, #8
 800eb1a:	f8ce 3000 	str.w	r3, [lr]
 800eb1e:	f001 f9bf 	bl	800fea0 <rmw_get_zero_initialized_init_options>
 800eb22:	f10d 0e08 	add.w	lr, sp, #8
 800eb26:	f104 0c18 	add.w	ip, r4, #24
 800eb2a:	682f      	ldr	r7, [r5, #0]
 800eb2c:	ac20      	add	r4, sp, #128	@ 0x80
 800eb2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb46:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eb4a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eb4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb52:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb56:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800eb5a:	f107 0018 	add.w	r0, r7, #24
 800eb5e:	f001 f9cd 	bl	800fefc <rmw_init_options_init>
 800eb62:	4604      	mov	r4, r0
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d0b3      	beq.n	800ead0 <rcl_init_options_init+0x18>
 800eb68:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eb6a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eb6c:	6828      	ldr	r0, [r5, #0]
 800eb6e:	4798      	blx	r3
 800eb70:	4620      	mov	r0, r4
 800eb72:	f008 f9ff 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 800eb76:	4604      	mov	r4, r0
 800eb78:	e7aa      	b.n	800ead0 <rcl_init_options_init+0x18>
 800eb7a:	240b      	movs	r4, #11
 800eb7c:	e7a8      	b.n	800ead0 <rcl_init_options_init+0x18>
 800eb7e:	240a      	movs	r4, #10
 800eb80:	e7a6      	b.n	800ead0 <rcl_init_options_init+0x18>
 800eb82:	bf00      	nop

0800eb84 <rcl_init_options_fini>:
 800eb84:	b530      	push	{r4, r5, lr}
 800eb86:	b087      	sub	sp, #28
 800eb88:	b1f0      	cbz	r0, 800ebc8 <rcl_init_options_fini+0x44>
 800eb8a:	6803      	ldr	r3, [r0, #0]
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	b1db      	cbz	r3, 800ebc8 <rcl_init_options_fini+0x44>
 800eb90:	469c      	mov	ip, r3
 800eb92:	f10d 0e04 	add.w	lr, sp, #4
 800eb96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb9e:	f8dc 3000 	ldr.w	r3, [ip]
 800eba2:	a801      	add	r0, sp, #4
 800eba4:	f8ce 3000 	str.w	r3, [lr]
 800eba8:	f001 f8ee 	bl	800fd88 <rcutils_allocator_is_valid>
 800ebac:	b160      	cbz	r0, 800ebc8 <rcl_init_options_fini+0x44>
 800ebae:	6820      	ldr	r0, [r4, #0]
 800ebb0:	3018      	adds	r0, #24
 800ebb2:	f001 fa5d 	bl	8010070 <rmw_init_options_fini>
 800ebb6:	4605      	mov	r5, r0
 800ebb8:	b950      	cbnz	r0, 800ebd0 <rcl_init_options_fini+0x4c>
 800ebba:	6820      	ldr	r0, [r4, #0]
 800ebbc:	9b02      	ldr	r3, [sp, #8]
 800ebbe:	9905      	ldr	r1, [sp, #20]
 800ebc0:	4798      	blx	r3
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	b007      	add	sp, #28
 800ebc6:	bd30      	pop	{r4, r5, pc}
 800ebc8:	250b      	movs	r5, #11
 800ebca:	4628      	mov	r0, r5
 800ebcc:	b007      	add	sp, #28
 800ebce:	bd30      	pop	{r4, r5, pc}
 800ebd0:	f008 f9d0 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 800ebd4:	4605      	mov	r5, r0
 800ebd6:	e7f8      	b.n	800ebca <rcl_init_options_fini+0x46>

0800ebd8 <rcl_init_options_copy>:
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	b094      	sub	sp, #80	@ 0x50
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d05b      	beq.n	800ec9a <rcl_init_options_copy+0xc2>
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	6800      	ldr	r0, [r0, #0]
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d057      	beq.n	800ec9a <rcl_init_options_copy+0xc2>
 800ebea:	460e      	mov	r6, r1
 800ebec:	f001 f8cc 	bl	800fd88 <rcutils_allocator_is_valid>
 800ebf0:	2e00      	cmp	r6, #0
 800ebf2:	d052      	beq.n	800ec9a <rcl_init_options_copy+0xc2>
 800ebf4:	f080 0001 	eor.w	r0, r0, #1
 800ebf8:	b2c0      	uxtb	r0, r0
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d14d      	bne.n	800ec9a <rcl_init_options_copy+0xc2>
 800ebfe:	6833      	ldr	r3, [r6, #0]
 800ec00:	b123      	cbz	r3, 800ec0c <rcl_init_options_copy+0x34>
 800ec02:	2464      	movs	r4, #100	@ 0x64
 800ec04:	4620      	mov	r0, r4
 800ec06:	b014      	add	sp, #80	@ 0x50
 800ec08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0c:	6827      	ldr	r7, [r4, #0]
 800ec0e:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ec10:	46bc      	mov	ip, r7
 800ec12:	f8d7 8000 	ldr.w	r8, [r7]
 800ec16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec1c:	f8dc 3000 	ldr.w	r3, [ip]
 800ec20:	2050      	movs	r0, #80	@ 0x50
 800ec22:	4619      	mov	r1, r3
 800ec24:	602b      	str	r3, [r5, #0]
 800ec26:	47c0      	blx	r8
 800ec28:	4605      	mov	r5, r0
 800ec2a:	6030      	str	r0, [r6, #0]
 800ec2c:	b3d0      	cbz	r0, 800eca4 <rcl_init_options_copy+0xcc>
 800ec2e:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ec32:	4686      	mov	lr, r0
 800ec34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec3c:	f8dc 3000 	ldr.w	r3, [ip]
 800ec40:	4668      	mov	r0, sp
 800ec42:	f8ce 3000 	str.w	r3, [lr]
 800ec46:	f001 f92b 	bl	800fea0 <rmw_get_zero_initialized_init_options>
 800ec4a:	46ee      	mov	lr, sp
 800ec4c:	f105 0c18 	add.w	ip, r5, #24
 800ec50:	6824      	ldr	r4, [r4, #0]
 800ec52:	6835      	ldr	r5, [r6, #0]
 800ec54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ec70:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ec74:	f104 0018 	add.w	r0, r4, #24
 800ec78:	f105 0118 	add.w	r1, r5, #24
 800ec7c:	f001 f9a6 	bl	800ffcc <rmw_init_options_copy>
 800ec80:	4604      	mov	r4, r0
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0be      	beq.n	800ec04 <rcl_init_options_copy+0x2c>
 800ec86:	f001 f88d 	bl	800fda4 <rcutils_get_error_string>
 800ec8a:	f001 f8a1 	bl	800fdd0 <rcutils_reset_error>
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f7ff ff78 	bl	800eb84 <rcl_init_options_fini>
 800ec94:	b140      	cbz	r0, 800eca8 <rcl_init_options_copy+0xd0>
 800ec96:	4604      	mov	r4, r0
 800ec98:	e7b4      	b.n	800ec04 <rcl_init_options_copy+0x2c>
 800ec9a:	240b      	movs	r4, #11
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	b014      	add	sp, #80	@ 0x50
 800eca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca4:	240a      	movs	r4, #10
 800eca6:	e7ad      	b.n	800ec04 <rcl_init_options_copy+0x2c>
 800eca8:	4620      	mov	r0, r4
 800ecaa:	b014      	add	sp, #80	@ 0x50
 800ecac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb0:	f008 b960 	b.w	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>

0800ecb4 <rcl_init_options_set_domain_id>:
 800ecb4:	b120      	cbz	r0, 800ecc0 <rcl_init_options_set_domain_id+0xc>
 800ecb6:	6803      	ldr	r3, [r0, #0]
 800ecb8:	b113      	cbz	r3, 800ecc0 <rcl_init_options_set_domain_id+0xc>
 800ecba:	2000      	movs	r0, #0
 800ecbc:	6259      	str	r1, [r3, #36]	@ 0x24
 800ecbe:	4770      	bx	lr
 800ecc0:	200b      	movs	r0, #11
 800ecc2:	4770      	bx	lr

0800ecc4 <rcl_get_zero_initialized_publisher>:
 800ecc4:	4b01      	ldr	r3, [pc, #4]	@ (800eccc <rcl_get_zero_initialized_publisher+0x8>)
 800ecc6:	6818      	ldr	r0, [r3, #0]
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	0801ddac 	.word	0x0801ddac

0800ecd0 <rcl_publisher_init>:
 800ecd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd4:	b088      	sub	sp, #32
 800ecd6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ecd8:	2e00      	cmp	r6, #0
 800ecda:	d06b      	beq.n	800edb4 <rcl_publisher_init+0xe4>
 800ecdc:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800ece0:	4605      	mov	r5, r0
 800ece2:	460f      	mov	r7, r1
 800ece4:	4690      	mov	r8, r2
 800ece6:	4650      	mov	r0, sl
 800ece8:	4699      	mov	r9, r3
 800ecea:	f001 f84d 	bl	800fd88 <rcutils_allocator_is_valid>
 800ecee:	f080 0401 	eor.w	r4, r0, #1
 800ecf2:	b2e4      	uxtb	r4, r4
 800ecf4:	2c00      	cmp	r4, #0
 800ecf6:	d15d      	bne.n	800edb4 <rcl_publisher_init+0xe4>
 800ecf8:	2d00      	cmp	r5, #0
 800ecfa:	d05b      	beq.n	800edb4 <rcl_publisher_init+0xe4>
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	b123      	cbz	r3, 800ed0a <rcl_publisher_init+0x3a>
 800ed00:	2464      	movs	r4, #100	@ 0x64
 800ed02:	4620      	mov	r0, r4
 800ed04:	b008      	add	sp, #32
 800ed06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	f008 fc30 	bl	8017570 <rcl_node_is_valid>
 800ed10:	2800      	cmp	r0, #0
 800ed12:	d054      	beq.n	800edbe <rcl_publisher_init+0xee>
 800ed14:	f1b8 0f00 	cmp.w	r8, #0
 800ed18:	d04c      	beq.n	800edb4 <rcl_publisher_init+0xe4>
 800ed1a:	fab9 f389 	clz	r3, r9
 800ed1e:	095b      	lsrs	r3, r3, #5
 800ed20:	f1b9 0f00 	cmp.w	r9, #0
 800ed24:	d046      	beq.n	800edb4 <rcl_publisher_init+0xe4>
 800ed26:	aa07      	add	r2, sp, #28
 800ed28:	9307      	str	r3, [sp, #28]
 800ed2a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ed2e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ed32:	9205      	str	r2, [sp, #20]
 800ed34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed38:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ed3c:	4649      	mov	r1, r9
 800ed3e:	4638      	mov	r0, r7
 800ed40:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ed44:	f008 fc6c 	bl	8017620 <rcl_node_resolve_name>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d14f      	bne.n	800edec <rcl_publisher_init+0x11c>
 800ed4c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ed4e:	20c8      	movs	r0, #200	@ 0xc8
 800ed50:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ed52:	4798      	blx	r3
 800ed54:	6028      	str	r0, [r5, #0]
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d050      	beq.n	800edfc <rcl_publisher_init+0x12c>
 800ed5a:	4638      	mov	r0, r7
 800ed5c:	f008 fc2a 	bl	80175b4 <rcl_node_get_rmw_handle>
 800ed60:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ed64:	4641      	mov	r1, r8
 800ed66:	9a07      	ldr	r2, [sp, #28]
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	4633      	mov	r3, r6
 800ed6c:	682c      	ldr	r4, [r5, #0]
 800ed6e:	f001 fca5 	bl	80106bc <rmw_create_publisher>
 800ed72:	682b      	ldr	r3, [r5, #0]
 800ed74:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800ed78:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ed7c:	b370      	cbz	r0, 800eddc <rcl_publisher_init+0x10c>
 800ed7e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ed82:	f001 fd7f 	bl	8010884 <rmw_publisher_get_actual_qos>
 800ed86:	682b      	ldr	r3, [r5, #0]
 800ed88:	4604      	mov	r4, r0
 800ed8a:	b9d0      	cbnz	r0, 800edc2 <rcl_publisher_init+0xf2>
 800ed8c:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800ed90:	4631      	mov	r1, r6
 800ed92:	4618      	mov	r0, r3
 800ed94:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ed98:	2270      	movs	r2, #112	@ 0x70
 800ed9a:	f00e f92e 	bl	801cffa <memcpy>
 800ed9e:	683a      	ldr	r2, [r7, #0]
 800eda0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800eda4:	9807      	ldr	r0, [sp, #28]
 800eda6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800eda8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800edaa:	4798      	blx	r3
 800edac:	4620      	mov	r0, r4
 800edae:	b008      	add	sp, #32
 800edb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb4:	240b      	movs	r4, #11
 800edb6:	4620      	mov	r0, r4
 800edb8:	b008      	add	sp, #32
 800edba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edbe:	24c8      	movs	r4, #200	@ 0xc8
 800edc0:	e79f      	b.n	800ed02 <rcl_publisher_init+0x32>
 800edc2:	b1cb      	cbz	r3, 800edf8 <rcl_publisher_init+0x128>
 800edc4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800edc8:	b142      	cbz	r2, 800eddc <rcl_publisher_init+0x10c>
 800edca:	4638      	mov	r0, r7
 800edcc:	f008 fbf2 	bl	80175b4 <rcl_node_get_rmw_handle>
 800edd0:	682b      	ldr	r3, [r5, #0]
 800edd2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800edd6:	f001 fd69 	bl	80108ac <rmw_destroy_publisher>
 800edda:	682b      	ldr	r3, [r5, #0]
 800eddc:	4618      	mov	r0, r3
 800edde:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800ede0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ede2:	2401      	movs	r4, #1
 800ede4:	4790      	blx	r2
 800ede6:	2300      	movs	r3, #0
 800ede8:	602b      	str	r3, [r5, #0]
 800edea:	e7db      	b.n	800eda4 <rcl_publisher_init+0xd4>
 800edec:	2867      	cmp	r0, #103	@ 0x67
 800edee:	d007      	beq.n	800ee00 <rcl_publisher_init+0x130>
 800edf0:	2869      	cmp	r0, #105	@ 0x69
 800edf2:	d005      	beq.n	800ee00 <rcl_publisher_init+0x130>
 800edf4:	280a      	cmp	r0, #10
 800edf6:	d001      	beq.n	800edfc <rcl_publisher_init+0x12c>
 800edf8:	2401      	movs	r4, #1
 800edfa:	e7d3      	b.n	800eda4 <rcl_publisher_init+0xd4>
 800edfc:	240a      	movs	r4, #10
 800edfe:	e7d1      	b.n	800eda4 <rcl_publisher_init+0xd4>
 800ee00:	2467      	movs	r4, #103	@ 0x67
 800ee02:	e7cf      	b.n	800eda4 <rcl_publisher_init+0xd4>

0800ee04 <rcl_publisher_get_default_options>:
 800ee04:	b570      	push	{r4, r5, r6, lr}
 800ee06:	4d14      	ldr	r5, [pc, #80]	@ (800ee58 <rcl_publisher_get_default_options+0x54>)
 800ee08:	b088      	sub	sp, #32
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	2250      	movs	r2, #80	@ 0x50
 800ee0e:	4913      	ldr	r1, [pc, #76]	@ (800ee5c <rcl_publisher_get_default_options+0x58>)
 800ee10:	4628      	mov	r0, r5
 800ee12:	f00e f8f2 	bl	801cffa <memcpy>
 800ee16:	a802      	add	r0, sp, #8
 800ee18:	f000 ffa8 	bl	800fd6c <rcutils_get_default_allocator>
 800ee1c:	f10d 0c08 	add.w	ip, sp, #8
 800ee20:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ee24:	466e      	mov	r6, sp
 800ee26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ee32:	4630      	mov	r0, r6
 800ee34:	f8ce 3000 	str.w	r3, [lr]
 800ee38:	f001 f842 	bl	800fec0 <rmw_get_default_publisher_options>
 800ee3c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ee40:	2270      	movs	r2, #112	@ 0x70
 800ee42:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ee46:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f00e f8d4 	bl	801cffa <memcpy>
 800ee52:	4620      	mov	r0, r4
 800ee54:	b008      	add	sp, #32
 800ee56:	bd70      	pop	{r4, r5, r6, pc}
 800ee58:	2400ee68 	.word	0x2400ee68
 800ee5c:	0801ddb0 	.word	0x0801ddb0

0800ee60 <rcl_publish>:
 800ee60:	b1f8      	cbz	r0, 800eea2 <rcl_publish+0x42>
 800ee62:	6803      	ldr	r3, [r0, #0]
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	4604      	mov	r4, r0
 800ee68:	b1b3      	cbz	r3, 800ee98 <rcl_publish+0x38>
 800ee6a:	4616      	mov	r6, r2
 800ee6c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ee70:	b192      	cbz	r2, 800ee98 <rcl_publish+0x38>
 800ee72:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ee76:	460d      	mov	r5, r1
 800ee78:	f008 f89a 	bl	8016fb0 <rcl_context_is_valid>
 800ee7c:	b160      	cbz	r0, 800ee98 <rcl_publish+0x38>
 800ee7e:	6823      	ldr	r3, [r4, #0]
 800ee80:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ee84:	b140      	cbz	r0, 800ee98 <rcl_publish+0x38>
 800ee86:	b155      	cbz	r5, 800ee9e <rcl_publish+0x3e>
 800ee88:	4632      	mov	r2, r6
 800ee8a:	4629      	mov	r1, r5
 800ee8c:	f001 fbb6 	bl	80105fc <rmw_publish>
 800ee90:	3800      	subs	r0, #0
 800ee92:	bf18      	it	ne
 800ee94:	2001      	movne	r0, #1
 800ee96:	bd70      	pop	{r4, r5, r6, pc}
 800ee98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ee9c:	bd70      	pop	{r4, r5, r6, pc}
 800ee9e:	200b      	movs	r0, #11
 800eea0:	bd70      	pop	{r4, r5, r6, pc}
 800eea2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eea6:	4770      	bx	lr

0800eea8 <rcl_publisher_is_valid>:
 800eea8:	b1a0      	cbz	r0, 800eed4 <rcl_publisher_is_valid+0x2c>
 800eeaa:	6803      	ldr	r3, [r0, #0]
 800eeac:	b510      	push	{r4, lr}
 800eeae:	4604      	mov	r4, r0
 800eeb0:	b173      	cbz	r3, 800eed0 <rcl_publisher_is_valid+0x28>
 800eeb2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eeb6:	b15a      	cbz	r2, 800eed0 <rcl_publisher_is_valid+0x28>
 800eeb8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eebc:	f008 f878 	bl	8016fb0 <rcl_context_is_valid>
 800eec0:	b130      	cbz	r0, 800eed0 <rcl_publisher_is_valid+0x28>
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eec8:	3800      	subs	r0, #0
 800eeca:	bf18      	it	ne
 800eecc:	2001      	movne	r0, #1
 800eece:	bd10      	pop	{r4, pc}
 800eed0:	2000      	movs	r0, #0
 800eed2:	bd10      	pop	{r4, pc}
 800eed4:	2000      	movs	r0, #0
 800eed6:	4770      	bx	lr

0800eed8 <rcl_publisher_is_valid_except_context>:
 800eed8:	b130      	cbz	r0, 800eee8 <rcl_publisher_is_valid_except_context+0x10>
 800eeda:	6800      	ldr	r0, [r0, #0]
 800eedc:	b120      	cbz	r0, 800eee8 <rcl_publisher_is_valid_except_context+0x10>
 800eede:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800eee2:	3800      	subs	r0, #0
 800eee4:	bf18      	it	ne
 800eee6:	2001      	movne	r0, #1
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop

0800eeec <_rclc_check_for_new_data>:
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d046      	beq.n	800ef7e <_rclc_check_for_new_data+0x92>
 800eef0:	4603      	mov	r3, r0
 800eef2:	b530      	push	{r4, r5, lr}
 800eef4:	7802      	ldrb	r2, [r0, #0]
 800eef6:	b085      	sub	sp, #20
 800eef8:	2a0a      	cmp	r2, #10
 800eefa:	d842      	bhi.n	800ef82 <_rclc_check_for_new_data+0x96>
 800eefc:	e8df f002 	tbb	[pc, r2]
 800ef00:	14181212 	.word	0x14181212
 800ef04:	06060614 	.word	0x06060614
 800ef08:	2e1a      	.short	0x2e1a
 800ef0a:	16          	.byte	0x16
 800ef0b:	00          	.byte	0x00
 800ef0c:	6a0a      	ldr	r2, [r1, #32]
 800ef0e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ef10:	2000      	movs	r0, #0
 800ef12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ef16:	1a12      	subs	r2, r2, r0
 800ef18:	bf18      	it	ne
 800ef1a:	2201      	movne	r2, #1
 800ef1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef20:	b005      	add	sp, #20
 800ef22:	bd30      	pop	{r4, r5, pc}
 800ef24:	680a      	ldr	r2, [r1, #0]
 800ef26:	e7f2      	b.n	800ef0e <_rclc_check_for_new_data+0x22>
 800ef28:	698a      	ldr	r2, [r1, #24]
 800ef2a:	e7f0      	b.n	800ef0e <_rclc_check_for_new_data+0x22>
 800ef2c:	688a      	ldr	r2, [r1, #8]
 800ef2e:	e7ee      	b.n	800ef0e <_rclc_check_for_new_data+0x22>
 800ef30:	690a      	ldr	r2, [r1, #16]
 800ef32:	e7ec      	b.n	800ef0e <_rclc_check_for_new_data+0x22>
 800ef34:	685c      	ldr	r4, [r3, #4]
 800ef36:	4608      	mov	r0, r1
 800ef38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef40:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800ef44:	f104 0110 	add.w	r1, r4, #16
 800ef48:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ef4c:	9500      	str	r5, [sp, #0]
 800ef4e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ef52:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ef56:	f00a f9bf 	bl	80192d8 <rcl_action_client_wait_set_get_entities_ready>
 800ef5a:	e7e1      	b.n	800ef20 <_rclc_check_for_new_data+0x34>
 800ef5c:	685c      	ldr	r4, [r3, #4]
 800ef5e:	4608      	mov	r0, r1
 800ef60:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800ef64:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800ef68:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ef6c:	e9cd 2100 	strd	r2, r1, [sp]
 800ef70:	f104 0220 	add.w	r2, r4, #32
 800ef74:	f104 0110 	add.w	r1, r4, #16
 800ef78:	f00a fbc8 	bl	801970c <rcl_action_server_wait_set_get_entities_ready>
 800ef7c:	e7d0      	b.n	800ef20 <_rclc_check_for_new_data+0x34>
 800ef7e:	200b      	movs	r0, #11
 800ef80:	4770      	bx	lr
 800ef82:	2001      	movs	r0, #1
 800ef84:	e7cc      	b.n	800ef20 <_rclc_check_for_new_data+0x34>
 800ef86:	bf00      	nop

0800ef88 <_rclc_take_new_data>:
 800ef88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8a:	b09b      	sub	sp, #108	@ 0x6c
 800ef8c:	2800      	cmp	r0, #0
 800ef8e:	f000 8088 	beq.w	800f0a2 <_rclc_take_new_data+0x11a>
 800ef92:	7803      	ldrb	r3, [r0, #0]
 800ef94:	4604      	mov	r4, r0
 800ef96:	2b0a      	cmp	r3, #10
 800ef98:	f200 8167 	bhi.w	800f26a <_rclc_take_new_data+0x2e2>
 800ef9c:	e8df f003 	tbb	[pc, r3]
 800efa0:	44152d2d 	.word	0x44152d2d
 800efa4:	19191944 	.word	0x19191944
 800efa8:	065a      	.short	0x065a
 800efaa:	15          	.byte	0x15
 800efab:	00          	.byte	0x00
 800efac:	6840      	ldr	r0, [r0, #4]
 800efae:	f890 3020 	ldrb.w	r3, [r0, #32]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f040 80b2 	bne.w	800f11c <_rclc_take_new_data+0x194>
 800efb8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f040 80e4 	bne.w	800f18a <_rclc_take_new_data+0x202>
 800efc2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d16f      	bne.n	800f0aa <_rclc_take_new_data+0x122>
 800efca:	2500      	movs	r5, #0
 800efcc:	4628      	mov	r0, r5
 800efce:	b01b      	add	sp, #108	@ 0x6c
 800efd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efd2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800efd4:	6a0b      	ldr	r3, [r1, #32]
 800efd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0f5      	beq.n	800efca <_rclc_take_new_data+0x42>
 800efde:	6882      	ldr	r2, [r0, #8]
 800efe0:	f100 0110 	add.w	r1, r0, #16
 800efe4:	6840      	ldr	r0, [r0, #4]
 800efe6:	f008 fcf5 	bl	80179d4 <rcl_take_request>
 800efea:	4605      	mov	r5, r0
 800efec:	2800      	cmp	r0, #0
 800efee:	d0ec      	beq.n	800efca <_rclc_take_new_data+0x42>
 800eff0:	f240 2359 	movw	r3, #601	@ 0x259
 800eff4:	4298      	cmp	r0, r3
 800eff6:	d013      	beq.n	800f020 <_rclc_take_new_data+0x98>
 800eff8:	e029      	b.n	800f04e <_rclc_take_new_data+0xc6>
 800effa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800effc:	680b      	ldr	r3, [r1, #0]
 800effe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d0e1      	beq.n	800efca <_rclc_take_new_data+0x42>
 800f006:	2300      	movs	r3, #0
 800f008:	aa0a      	add	r2, sp, #40	@ 0x28
 800f00a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f00e:	f008 fd43 	bl	8017a98 <rcl_take>
 800f012:	4605      	mov	r5, r0
 800f014:	2800      	cmp	r0, #0
 800f016:	d0d9      	beq.n	800efcc <_rclc_take_new_data+0x44>
 800f018:	f240 1391 	movw	r3, #401	@ 0x191
 800f01c:	4298      	cmp	r0, r3
 800f01e:	d116      	bne.n	800f04e <_rclc_take_new_data+0xc6>
 800f020:	2300      	movs	r3, #0
 800f022:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f026:	e7d1      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f028:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f02a:	698b      	ldr	r3, [r1, #24]
 800f02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0ca      	beq.n	800efca <_rclc_take_new_data+0x42>
 800f034:	6882      	ldr	r2, [r0, #8]
 800f036:	f100 0110 	add.w	r1, r0, #16
 800f03a:	6840      	ldr	r0, [r0, #4]
 800f03c:	f007 ff48 	bl	8016ed0 <rcl_take_response>
 800f040:	4605      	mov	r5, r0
 800f042:	2800      	cmp	r0, #0
 800f044:	d0c1      	beq.n	800efca <_rclc_take_new_data+0x42>
 800f046:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f04a:	4298      	cmp	r0, r3
 800f04c:	d0be      	beq.n	800efcc <_rclc_take_new_data+0x44>
 800f04e:	f000 febf 	bl	800fdd0 <rcutils_reset_error>
 800f052:	e7bb      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f054:	6840      	ldr	r0, [r0, #4]
 800f056:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d17d      	bne.n	800f15a <_rclc_take_new_data+0x1d2>
 800f05e:	69c3      	ldr	r3, [r0, #28]
 800f060:	b11b      	cbz	r3, 800f06a <_rclc_take_new_data+0xe2>
 800f062:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f066:	2b00      	cmp	r3, #0
 800f068:	d144      	bne.n	800f0f4 <_rclc_take_new_data+0x16c>
 800f06a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f040 80ac 	bne.w	800f1cc <_rclc_take_new_data+0x244>
 800f074:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d0a6      	beq.n	800efca <_rclc_take_new_data+0x42>
 800f07c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f07e:	a90a      	add	r1, sp, #40	@ 0x28
 800f080:	3010      	adds	r0, #16
 800f082:	f00a f801 	bl	8019088 <rcl_action_take_result_response>
 800f086:	4605      	mov	r5, r0
 800f088:	2800      	cmp	r0, #0
 800f08a:	d1e0      	bne.n	800f04e <_rclc_take_new_data+0xc6>
 800f08c:	6860      	ldr	r0, [r4, #4]
 800f08e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f092:	f00a fc6b 	bl	801996c <rclc_action_find_handle_by_result_request_sequence_number>
 800f096:	2800      	cmp	r0, #0
 800f098:	d098      	beq.n	800efcc <_rclc_take_new_data+0x44>
 800f09a:	2301      	movs	r3, #1
 800f09c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f0a0:	e794      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f0a2:	250b      	movs	r5, #11
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	b01b      	add	sp, #108	@ 0x6c
 800f0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0aa:	ae04      	add	r6, sp, #16
 800f0ac:	3010      	adds	r0, #16
 800f0ae:	aa0a      	add	r2, sp, #40	@ 0x28
 800f0b0:	4631      	mov	r1, r6
 800f0b2:	f00a fa5f 	bl	8019574 <rcl_action_take_cancel_request>
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1c8      	bne.n	800f04e <_rclc_take_new_data+0xc6>
 800f0bc:	a90a      	add	r1, sp, #40	@ 0x28
 800f0be:	6860      	ldr	r0, [r4, #4]
 800f0c0:	f00a fc14 	bl	80198ec <rclc_action_find_goal_handle_by_uuid>
 800f0c4:	4607      	mov	r7, r0
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	f000 80bb 	beq.w	800f242 <_rclc_take_new_data+0x2ba>
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f0d2:	f00a fb95 	bl	8019800 <rcl_action_transition_goal_state>
 800f0d6:	2803      	cmp	r0, #3
 800f0d8:	4684      	mov	ip, r0
 800f0da:	f040 80a7 	bne.w	800f22c <_rclc_take_new_data+0x2a4>
 800f0de:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f0e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f0e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f0ea:	e884 0003 	stmia.w	r4, {r0, r1}
 800f0ee:	f887 c008 	strb.w	ip, [r7, #8]
 800f0f2:	e76b      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f0f4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f0f6:	3010      	adds	r0, #16
 800f0f8:	f00a f846 	bl	8019188 <rcl_action_take_feedback>
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d1a5      	bne.n	800f04e <_rclc_take_new_data+0xc6>
 800f102:	6860      	ldr	r0, [r4, #4]
 800f104:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f106:	f00a fbf1 	bl	80198ec <rclc_action_find_goal_handle_by_uuid>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2800      	cmp	r0, #0
 800f10e:	f000 80a3 	beq.w	800f258 <_rclc_take_new_data+0x2d0>
 800f112:	2201      	movs	r2, #1
 800f114:	6860      	ldr	r0, [r4, #4]
 800f116:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f11a:	e7a6      	b.n	800f06a <_rclc_take_new_data+0xe2>
 800f11c:	f00a fbc0 	bl	80198a0 <rclc_action_take_goal_handle>
 800f120:	4606      	mov	r6, r0
 800f122:	6860      	ldr	r0, [r4, #4]
 800f124:	2e00      	cmp	r6, #0
 800f126:	f43f af47 	beq.w	800efb8 <_rclc_take_new_data+0x30>
 800f12a:	6070      	str	r0, [r6, #4]
 800f12c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800f130:	69f2      	ldr	r2, [r6, #28]
 800f132:	3010      	adds	r0, #16
 800f134:	f00a f966 	bl	8019404 <rcl_action_take_goal_request>
 800f138:	4605      	mov	r5, r0
 800f13a:	2800      	cmp	r0, #0
 800f13c:	f040 808e 	bne.w	800f25c <_rclc_take_new_data+0x2d4>
 800f140:	69f7      	ldr	r7, [r6, #28]
 800f142:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f144:	7235      	strb	r5, [r6, #8]
 800f146:	f8c6 0009 	str.w	r0, [r6, #9]
 800f14a:	f8c6 100d 	str.w	r1, [r6, #13]
 800f14e:	6860      	ldr	r0, [r4, #4]
 800f150:	f8c6 2011 	str.w	r2, [r6, #17]
 800f154:	f8c6 3015 	str.w	r3, [r6, #21]
 800f158:	e72e      	b.n	800efb8 <_rclc_take_new_data+0x30>
 800f15a:	aa04      	add	r2, sp, #16
 800f15c:	a90a      	add	r1, sp, #40	@ 0x28
 800f15e:	3010      	adds	r0, #16
 800f160:	f009 ff1a 	bl	8018f98 <rcl_action_take_goal_response>
 800f164:	4605      	mov	r5, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	f47f af71 	bne.w	800f04e <_rclc_take_new_data+0xc6>
 800f16c:	6860      	ldr	r0, [r4, #4]
 800f16e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f172:	f00a fbe9 	bl	8019948 <rclc_action_find_handle_by_goal_request_sequence_number>
 800f176:	b130      	cbz	r0, 800f186 <_rclc_take_new_data+0x1fe>
 800f178:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f17c:	2201      	movs	r2, #1
 800f17e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f182:	f880 2020 	strb.w	r2, [r0, #32]
 800f186:	6860      	ldr	r0, [r4, #4]
 800f188:	e769      	b.n	800f05e <_rclc_take_new_data+0xd6>
 800f18a:	3010      	adds	r0, #16
 800f18c:	aa04      	add	r2, sp, #16
 800f18e:	a90a      	add	r1, sp, #40	@ 0x28
 800f190:	f00a f9b0 	bl	80194f4 <rcl_action_take_result_request>
 800f194:	4605      	mov	r5, r0
 800f196:	2800      	cmp	r0, #0
 800f198:	f47f af59 	bne.w	800f04e <_rclc_take_new_data+0xc6>
 800f19c:	a904      	add	r1, sp, #16
 800f19e:	6860      	ldr	r0, [r4, #4]
 800f1a0:	f00a fba4 	bl	80198ec <rclc_action_find_goal_handle_by_uuid>
 800f1a4:	4607      	mov	r7, r0
 800f1a6:	b160      	cbz	r0, 800f1c2 <_rclc_take_new_data+0x23a>
 800f1a8:	ad0a      	add	r5, sp, #40	@ 0x28
 800f1aa:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800f1ae:	f04f 0c02 	mov.w	ip, #2
 800f1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1ba:	e886 0003 	stmia.w	r6, {r0, r1}
 800f1be:	f887 c008 	strb.w	ip, [r7, #8]
 800f1c2:	6860      	ldr	r0, [r4, #4]
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800f1ca:	e6fa      	b.n	800efc2 <_rclc_take_new_data+0x3a>
 800f1cc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800f1d0:	a90a      	add	r1, sp, #40	@ 0x28
 800f1d2:	3010      	adds	r0, #16
 800f1d4:	f009 ff98 	bl	8019108 <rcl_action_take_cancel_response>
 800f1d8:	4605      	mov	r5, r0
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f47f af37 	bne.w	800f04e <_rclc_take_new_data+0xc6>
 800f1e0:	6860      	ldr	r0, [r4, #4]
 800f1e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f1e6:	f00a fbd3 	bl	8019990 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	6860      	ldr	r0, [r4, #4]
 800f1ee:	2e00      	cmp	r6, #0
 800f1f0:	f43f af40 	beq.w	800f074 <_rclc_take_new_data+0xec>
 800f1f4:	2701      	movs	r7, #1
 800f1f6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f1f8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f43f af3a 	beq.w	800f074 <_rclc_take_new_data+0xec>
 800f200:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f202:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800f206:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f20a:	f00a fb6f 	bl	80198ec <rclc_action_find_goal_handle_by_uuid>
 800f20e:	b138      	cbz	r0, 800f220 <_rclc_take_new_data+0x298>
 800f210:	6860      	ldr	r0, [r4, #4]
 800f212:	3501      	adds	r5, #1
 800f214:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800f218:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f21a:	42ab      	cmp	r3, r5
 800f21c:	d8f0      	bhi.n	800f200 <_rclc_take_new_data+0x278>
 800f21e:	e729      	b.n	800f074 <_rclc_take_new_data+0xec>
 800f220:	6860      	ldr	r0, [r4, #4]
 800f222:	3501      	adds	r5, #1
 800f224:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f226:	42ab      	cmp	r3, r5
 800f228:	d8ea      	bhi.n	800f200 <_rclc_take_new_data+0x278>
 800f22a:	e723      	b.n	800f074 <_rclc_take_new_data+0xec>
 800f22c:	ab06      	add	r3, sp, #24
 800f22e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f230:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f234:	2103      	movs	r1, #3
 800f236:	6860      	ldr	r0, [r4, #4]
 800f238:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f23c:	f00a fc1c 	bl	8019a78 <rclc_action_server_goal_cancel_reject>
 800f240:	e6c4      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f242:	ab06      	add	r3, sp, #24
 800f244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f246:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f24a:	2102      	movs	r1, #2
 800f24c:	6860      	ldr	r0, [r4, #4]
 800f24e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f252:	f00a fc11 	bl	8019a78 <rclc_action_server_goal_cancel_reject>
 800f256:	e6b9      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f258:	6860      	ldr	r0, [r4, #4]
 800f25a:	e706      	b.n	800f06a <_rclc_take_new_data+0xe2>
 800f25c:	4631      	mov	r1, r6
 800f25e:	6860      	ldr	r0, [r4, #4]
 800f260:	f00a fb2e 	bl	80198c0 <rclc_action_remove_used_goal_handle>
 800f264:	f000 fdb4 	bl	800fdd0 <rcutils_reset_error>
 800f268:	e6b0      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f26a:	2501      	movs	r5, #1
 800f26c:	e6ae      	b.n	800efcc <_rclc_take_new_data+0x44>
 800f26e:	bf00      	nop

0800f270 <_rclc_execute.part.0>:
 800f270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f272:	7803      	ldrb	r3, [r0, #0]
 800f274:	b085      	sub	sp, #20
 800f276:	4604      	mov	r4, r0
 800f278:	2b0a      	cmp	r3, #10
 800f27a:	f200 8139 	bhi.w	800f4f0 <_rclc_execute.part.0+0x280>
 800f27e:	e8df f003 	tbb	[pc, r3]
 800f282:	4268      	.short	0x4268
 800f284:	06a75b4d 	.word	0x06a75b4d
 800f288:	721d0606 	.word	0x721d0606
 800f28c:	62          	.byte	0x62
 800f28d:	00          	.byte	0x00
 800f28e:	2b06      	cmp	r3, #6
 800f290:	f000 8126 	beq.w	800f4e0 <_rclc_execute.part.0+0x270>
 800f294:	2b07      	cmp	r3, #7
 800f296:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f298:	f040 811c 	bne.w	800f4d4 <_rclc_execute.part.0+0x264>
 800f29c:	f104 0510 	add.w	r5, r4, #16
 800f2a0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f2a4:	6880      	ldr	r0, [r0, #8]
 800f2a6:	4798      	blx	r3
 800f2a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	6860      	ldr	r0, [r4, #4]
 800f2ae:	f008 fbd1 	bl	8017a54 <rcl_send_response>
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	b378      	cbz	r0, 800f316 <_rclc_execute.part.0+0xa6>
 800f2b6:	f000 fd8b 	bl	800fdd0 <rcutils_reset_error>
 800f2ba:	e02c      	b.n	800f316 <_rclc_execute.part.0+0xa6>
 800f2bc:	6840      	ldr	r0, [r0, #4]
 800f2be:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 808e 	beq.w	800f3e4 <_rclc_execute.part.0+0x174>
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	2701      	movs	r7, #1
 800f2cc:	e004      	b.n	800f2d8 <_rclc_execute.part.0+0x68>
 800f2ce:	f00a fac1 	bl	8019854 <rclc_action_send_result_request>
 800f2d2:	b998      	cbnz	r0, 800f2fc <_rclc_execute.part.0+0x8c>
 800f2d4:	722f      	strb	r7, [r5, #8]
 800f2d6:	6860      	ldr	r0, [r4, #4]
 800f2d8:	f00a fb6c 	bl	80199b4 <rclc_action_find_first_handle_with_goal_response>
 800f2dc:	4605      	mov	r5, r0
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d07f      	beq.n	800f3e2 <_rclc_execute.part.0+0x172>
 800f2e2:	6863      	ldr	r3, [r4, #4]
 800f2e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f2e6:	699b      	ldr	r3, [r3, #24]
 800f2e8:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f2ec:	f885 6020 	strb.w	r6, [r5, #32]
 800f2f0:	4798      	blx	r3
 800f2f2:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d1e8      	bne.n	800f2ce <_rclc_execute.part.0+0x5e>
 800f2fc:	6860      	ldr	r0, [r4, #4]
 800f2fe:	4629      	mov	r1, r5
 800f300:	f00a fade 	bl	80198c0 <rclc_action_remove_used_goal_handle>
 800f304:	e7e7      	b.n	800f2d6 <_rclc_execute.part.0+0x66>
 800f306:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f30a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800f30e:	b100      	cbz	r0, 800f312 <_rclc_execute.part.0+0xa2>
 800f310:	68a0      	ldr	r0, [r4, #8]
 800f312:	2400      	movs	r4, #0
 800f314:	4798      	blx	r3
 800f316:	4620      	mov	r0, r4
 800f318:	b005      	add	sp, #20
 800f31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f31c:	6840      	ldr	r0, [r0, #4]
 800f31e:	f008 fef1 	bl	8018104 <rcl_timer_call>
 800f322:	f240 3321 	movw	r3, #801	@ 0x321
 800f326:	4604      	mov	r4, r0
 800f328:	4298      	cmp	r0, r3
 800f32a:	d001      	beq.n	800f330 <_rclc_execute.part.0+0xc0>
 800f32c:	2800      	cmp	r0, #0
 800f32e:	d1c2      	bne.n	800f2b6 <_rclc_execute.part.0+0x46>
 800f330:	2400      	movs	r4, #0
 800f332:	4620      	mov	r0, r4
 800f334:	b005      	add	sp, #20
 800f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f338:	2400      	movs	r4, #0
 800f33a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f33c:	6880      	ldr	r0, [r0, #8]
 800f33e:	4798      	blx	r3
 800f340:	4620      	mov	r0, r4
 800f342:	b005      	add	sp, #20
 800f344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f346:	2400      	movs	r4, #0
 800f348:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f34a:	4798      	blx	r3
 800f34c:	4620      	mov	r0, r4
 800f34e:	b005      	add	sp, #20
 800f350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f352:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f358:	b100      	cbz	r0, 800f35c <_rclc_execute.part.0+0xec>
 800f35a:	68a0      	ldr	r0, [r4, #8]
 800f35c:	2400      	movs	r4, #0
 800f35e:	4798      	blx	r3
 800f360:	4620      	mov	r0, r4
 800f362:	b005      	add	sp, #20
 800f364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f366:	6840      	ldr	r0, [r0, #4]
 800f368:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f36c:	bb3b      	cbnz	r3, 800f3be <_rclc_execute.part.0+0x14e>
 800f36e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d07d      	beq.n	800f472 <_rclc_execute.part.0+0x202>
 800f376:	f640 0634 	movw	r6, #2100	@ 0x834
 800f37a:	2701      	movs	r7, #1
 800f37c:	e007      	b.n	800f38e <_rclc_execute.part.0+0x11e>
 800f37e:	4628      	mov	r0, r5
 800f380:	f00a fb30 	bl	80199e4 <rclc_action_server_response_goal_request>
 800f384:	4629      	mov	r1, r5
 800f386:	6860      	ldr	r0, [r4, #4]
 800f388:	f00a fa9a 	bl	80198c0 <rclc_action_remove_used_goal_handle>
 800f38c:	6860      	ldr	r0, [r4, #4]
 800f38e:	2100      	movs	r1, #0
 800f390:	f00a fac2 	bl	8019918 <rclc_action_find_first_handle_by_status>
 800f394:	4605      	mov	r5, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	d068      	beq.n	800f46c <_rclc_execute.part.0+0x1fc>
 800f39a:	6863      	ldr	r3, [r4, #4]
 800f39c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f39e:	699b      	ldr	r3, [r3, #24]
 800f3a0:	4798      	blx	r3
 800f3a2:	42b0      	cmp	r0, r6
 800f3a4:	f04f 0100 	mov.w	r1, #0
 800f3a8:	d1e9      	bne.n	800f37e <_rclc_execute.part.0+0x10e>
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f00a fb19 	bl	80199e4 <rclc_action_server_response_goal_request>
 800f3b2:	722f      	strb	r7, [r5, #8]
 800f3b4:	e7ea      	b.n	800f38c <_rclc_execute.part.0+0x11c>
 800f3b6:	6848      	ldr	r0, [r1, #4]
 800f3b8:	f00a fa82 	bl	80198c0 <rclc_action_remove_used_goal_handle>
 800f3bc:	6860      	ldr	r0, [r4, #4]
 800f3be:	f00a fab7 	bl	8019930 <rclc_action_find_first_terminated_handle>
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d1f6      	bne.n	800f3b6 <_rclc_execute.part.0+0x146>
 800f3c8:	6860      	ldr	r0, [r4, #4]
 800f3ca:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f3ce:	e7ce      	b.n	800f36e <_rclc_execute.part.0+0xfe>
 800f3d0:	2400      	movs	r4, #0
 800f3d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f3d4:	f100 0110 	add.w	r1, r0, #16
 800f3d8:	6880      	ldr	r0, [r0, #8]
 800f3da:	4798      	blx	r3
 800f3dc:	4620      	mov	r0, r4
 800f3de:	b005      	add	sp, #20
 800f3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3e2:	6860      	ldr	r0, [r4, #4]
 800f3e4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f3e8:	b18b      	cbz	r3, 800f40e <_rclc_execute.part.0+0x19e>
 800f3ea:	68c5      	ldr	r5, [r0, #12]
 800f3ec:	b32d      	cbz	r5, 800f43a <_rclc_execute.part.0+0x1ca>
 800f3ee:	2600      	movs	r6, #0
 800f3f0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f3f4:	b143      	cbz	r3, 800f408 <_rclc_execute.part.0+0x198>
 800f3f6:	69c3      	ldr	r3, [r0, #28]
 800f3f8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f3fc:	b123      	cbz	r3, 800f408 <_rclc_execute.part.0+0x198>
 800f3fe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f400:	4628      	mov	r0, r5
 800f402:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f404:	4798      	blx	r3
 800f406:	6860      	ldr	r0, [r4, #4]
 800f408:	682d      	ldr	r5, [r5, #0]
 800f40a:	2d00      	cmp	r5, #0
 800f40c:	d1f0      	bne.n	800f3f0 <_rclc_execute.part.0+0x180>
 800f40e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f412:	b193      	cbz	r3, 800f43a <_rclc_execute.part.0+0x1ca>
 800f414:	68c5      	ldr	r5, [r0, #12]
 800f416:	b185      	cbz	r5, 800f43a <_rclc_execute.part.0+0x1ca>
 800f418:	2600      	movs	r6, #0
 800f41a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f41e:	b14b      	cbz	r3, 800f434 <_rclc_execute.part.0+0x1c4>
 800f420:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f422:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f426:	b12b      	cbz	r3, 800f434 <_rclc_execute.part.0+0x1c4>
 800f428:	4628      	mov	r0, r5
 800f42a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f42e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f430:	4798      	blx	r3
 800f432:	6860      	ldr	r0, [r4, #4]
 800f434:	682d      	ldr	r5, [r5, #0]
 800f436:	2d00      	cmp	r5, #0
 800f438:	d1ef      	bne.n	800f41a <_rclc_execute.part.0+0x1aa>
 800f43a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f43f af76 	beq.w	800f330 <_rclc_execute.part.0+0xc0>
 800f444:	2700      	movs	r7, #0
 800f446:	e00b      	b.n	800f460 <_rclc_execute.part.0+0x1f0>
 800f448:	6863      	ldr	r3, [r4, #4]
 800f44a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f44c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f44e:	6a1e      	ldr	r6, [r3, #32]
 800f450:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f454:	47b0      	blx	r6
 800f456:	6860      	ldr	r0, [r4, #4]
 800f458:	4629      	mov	r1, r5
 800f45a:	f00a fa31 	bl	80198c0 <rclc_action_remove_used_goal_handle>
 800f45e:	6860      	ldr	r0, [r4, #4]
 800f460:	f00a fab4 	bl	80199cc <rclc_action_find_first_handle_with_result_response>
 800f464:	4605      	mov	r5, r0
 800f466:	2800      	cmp	r0, #0
 800f468:	d1ee      	bne.n	800f448 <_rclc_execute.part.0+0x1d8>
 800f46a:	e761      	b.n	800f330 <_rclc_execute.part.0+0xc0>
 800f46c:	6860      	ldr	r0, [r4, #4]
 800f46e:	f880 5020 	strb.w	r5, [r0, #32]
 800f472:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f476:	2b00      	cmp	r3, #0
 800f478:	f43f af5a 	beq.w	800f330 <_rclc_execute.part.0+0xc0>
 800f47c:	68c5      	ldr	r5, [r0, #12]
 800f47e:	b1b5      	cbz	r5, 800f4ae <_rclc_execute.part.0+0x23e>
 800f480:	2602      	movs	r6, #2
 800f482:	e001      	b.n	800f488 <_rclc_execute.part.0+0x218>
 800f484:	682d      	ldr	r5, [r5, #0]
 800f486:	b195      	cbz	r5, 800f4ae <_rclc_execute.part.0+0x23e>
 800f488:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f48c:	2b03      	cmp	r3, #3
 800f48e:	d1f9      	bne.n	800f484 <_rclc_execute.part.0+0x214>
 800f490:	69c3      	ldr	r3, [r0, #28]
 800f492:	4628      	mov	r0, r5
 800f494:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f496:	4798      	blx	r3
 800f498:	4603      	mov	r3, r0
 800f49a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f49e:	4628      	mov	r0, r5
 800f4a0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f4a4:	b143      	cbz	r3, 800f4b8 <_rclc_execute.part.0+0x248>
 800f4a6:	f00a fabb 	bl	8019a20 <rclc_action_server_goal_cancel_accept>
 800f4aa:	6860      	ldr	r0, [r4, #4]
 800f4ac:	e7ea      	b.n	800f484 <_rclc_execute.part.0+0x214>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	461c      	mov	r4, r3
 800f4b2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f4b6:	e72e      	b.n	800f316 <_rclc_execute.part.0+0xa6>
 800f4b8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f4ba:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f4be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f4c2:	2101      	movs	r1, #1
 800f4c4:	6860      	ldr	r0, [r4, #4]
 800f4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ca:	f00a fad5 	bl	8019a78 <rclc_action_server_goal_cancel_reject>
 800f4ce:	722e      	strb	r6, [r5, #8]
 800f4d0:	6860      	ldr	r0, [r4, #4]
 800f4d2:	e7d7      	b.n	800f484 <_rclc_execute.part.0+0x214>
 800f4d4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f4d6:	f104 0510 	add.w	r5, r4, #16
 800f4da:	6880      	ldr	r0, [r0, #8]
 800f4dc:	4798      	blx	r3
 800f4de:	e6e3      	b.n	800f2a8 <_rclc_execute.part.0+0x38>
 800f4e0:	f100 0510 	add.w	r5, r0, #16
 800f4e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f4e6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	6880      	ldr	r0, [r0, #8]
 800f4ec:	4798      	blx	r3
 800f4ee:	e6db      	b.n	800f2a8 <_rclc_execute.part.0+0x38>
 800f4f0:	2401      	movs	r4, #1
 800f4f2:	e710      	b.n	800f316 <_rclc_execute.part.0+0xa6>

0800f4f4 <rclc_executor_trigger_any>:
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d03d      	beq.n	800f574 <rclc_executor_trigger_any+0x80>
 800f4f8:	2900      	cmp	r1, #0
 800f4fa:	d03c      	beq.n	800f576 <rclc_executor_trigger_any+0x82>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f502:	2200      	movs	r2, #0
 800f504:	2800      	cmp	r0, #0
 800f506:	d035      	beq.n	800f574 <rclc_executor_trigger_any+0x80>
 800f508:	b430      	push	{r4, r5}
 800f50a:	f893 c000 	ldrb.w	ip, [r3]
 800f50e:	f1bc 0f08 	cmp.w	ip, #8
 800f512:	d11d      	bne.n	800f550 <rclc_executor_trigger_any+0x5c>
 800f514:	685c      	ldr	r4, [r3, #4]
 800f516:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f518:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f51c:	d105      	bne.n	800f52a <rclc_executor_trigger_any+0x36>
 800f51e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f522:	b910      	cbnz	r0, 800f52a <rclc_executor_trigger_any+0x36>
 800f524:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f528:	b128      	cbz	r0, 800f536 <rclc_executor_trigger_any+0x42>
 800f52a:	bc30      	pop	{r4, r5}
 800f52c:	4770      	bx	lr
 800f52e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f532:	2800      	cmp	r0, #0
 800f534:	d1f9      	bne.n	800f52a <rclc_executor_trigger_any+0x36>
 800f536:	3201      	adds	r2, #1
 800f538:	3340      	adds	r3, #64	@ 0x40
 800f53a:	4291      	cmp	r1, r2
 800f53c:	d017      	beq.n	800f56e <rclc_executor_trigger_any+0x7a>
 800f53e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f542:	2800      	cmp	r0, #0
 800f544:	d0f1      	beq.n	800f52a <rclc_executor_trigger_any+0x36>
 800f546:	f893 c000 	ldrb.w	ip, [r3]
 800f54a:	f1bc 0f08 	cmp.w	ip, #8
 800f54e:	d0e1      	beq.n	800f514 <rclc_executor_trigger_any+0x20>
 800f550:	f1bc 0f09 	cmp.w	ip, #9
 800f554:	d1eb      	bne.n	800f52e <rclc_executor_trigger_any+0x3a>
 800f556:	685c      	ldr	r4, [r3, #4]
 800f558:	6a25      	ldr	r5, [r4, #32]
 800f55a:	2d00      	cmp	r5, #0
 800f55c:	d1e5      	bne.n	800f52a <rclc_executor_trigger_any+0x36>
 800f55e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f562:	2800      	cmp	r0, #0
 800f564:	d1e1      	bne.n	800f52a <rclc_executor_trigger_any+0x36>
 800f566:	3201      	adds	r2, #1
 800f568:	3340      	adds	r3, #64	@ 0x40
 800f56a:	4291      	cmp	r1, r2
 800f56c:	d1e7      	bne.n	800f53e <rclc_executor_trigger_any+0x4a>
 800f56e:	2000      	movs	r0, #0
 800f570:	bc30      	pop	{r4, r5}
 800f572:	4770      	bx	lr
 800f574:	4770      	bx	lr
 800f576:	4608      	mov	r0, r1
 800f578:	4770      	bx	lr
 800f57a:	bf00      	nop

0800f57c <rclc_executor_get_zero_initialized_executor>:
 800f57c:	b510      	push	{r4, lr}
 800f57e:	4604      	mov	r4, r0
 800f580:	2288      	movs	r2, #136	@ 0x88
 800f582:	4902      	ldr	r1, [pc, #8]	@ (800f58c <rclc_executor_get_zero_initialized_executor+0x10>)
 800f584:	f00d fd39 	bl	801cffa <memcpy>
 800f588:	4620      	mov	r0, r4
 800f58a:	bd10      	pop	{r4, pc}
 800f58c:	0801de00 	.word	0x0801de00

0800f590 <rclc_executor_init>:
 800f590:	2900      	cmp	r1, #0
 800f592:	d06a      	beq.n	800f66a <rclc_executor_init+0xda>
 800f594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f598:	4605      	mov	r5, r0
 800f59a:	b0b0      	sub	sp, #192	@ 0xc0
 800f59c:	2800      	cmp	r0, #0
 800f59e:	d05c      	beq.n	800f65a <rclc_executor_init+0xca>
 800f5a0:	4616      	mov	r6, r2
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	4688      	mov	r8, r1
 800f5a6:	461f      	mov	r7, r3
 800f5a8:	f000 fbee 	bl	800fd88 <rcutils_allocator_is_valid>
 800f5ac:	2e00      	cmp	r6, #0
 800f5ae:	d054      	beq.n	800f65a <rclc_executor_init+0xca>
 800f5b0:	f080 0401 	eor.w	r4, r0, #1
 800f5b4:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800f5b8:	d14f      	bne.n	800f65a <rclc_executor_init+0xca>
 800f5ba:	2288      	movs	r2, #136	@ 0x88
 800f5bc:	4930      	ldr	r1, [pc, #192]	@ (800f680 <rclc_executor_init+0xf0>)
 800f5be:	a80e      	add	r0, sp, #56	@ 0x38
 800f5c0:	f00d fd1b 	bl	801cffa <memcpy>
 800f5c4:	a90e      	add	r1, sp, #56	@ 0x38
 800f5c6:	2288      	movs	r2, #136	@ 0x88
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f00d fd16 	bl	801cffa <memcpy>
 800f5ce:	4668      	mov	r0, sp
 800f5d0:	f8c5 8000 	str.w	r8, [r5]
 800f5d4:	60ae      	str	r6, [r5, #8]
 800f5d6:	f008 ff0b 	bl	80183f0 <rcl_get_zero_initialized_wait_set>
 800f5da:	46ec      	mov	ip, sp
 800f5dc:	f105 0e14 	add.w	lr, r5, #20
 800f5e0:	f8d7 8000 	ldr.w	r8, [r7]
 800f5e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5f0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f5f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f5f8:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800f678 <rclc_executor_init+0xe8>
 800f5fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f600:	f8dc 3000 	ldr.w	r3, [ip]
 800f604:	01b0      	lsls	r0, r6, #6
 800f606:	6939      	ldr	r1, [r7, #16]
 800f608:	f8ce 3000 	str.w	r3, [lr]
 800f60c:	612f      	str	r7, [r5, #16]
 800f60e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f612:	47c0      	blx	r8
 800f614:	6068      	str	r0, [r5, #4]
 800f616:	b908      	cbnz	r0, 800f61c <rclc_executor_init+0x8c>
 800f618:	e029      	b.n	800f66e <rclc_executor_init+0xde>
 800f61a:	6868      	ldr	r0, [r5, #4]
 800f61c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f620:	3401      	adds	r4, #1
 800f622:	4631      	mov	r1, r6
 800f624:	f000 fa74 	bl	800fb10 <rclc_executor_handle_init>
 800f628:	42a6      	cmp	r6, r4
 800f62a:	d8f6      	bhi.n	800f61a <rclc_executor_init+0x8a>
 800f62c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f630:	f000 fa62 	bl	800faf8 <rclc_executor_handle_counters_zero_init>
 800f634:	4a13      	ldr	r2, [pc, #76]	@ (800f684 <rclc_executor_init+0xf4>)
 800f636:	2300      	movs	r3, #0
 800f638:	6868      	ldr	r0, [r5, #4]
 800f63a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800f63e:	b168      	cbz	r0, 800f65c <rclc_executor_init+0xcc>
 800f640:	68ab      	ldr	r3, [r5, #8]
 800f642:	b173      	cbz	r3, 800f662 <rclc_executor_init+0xd2>
 800f644:	692a      	ldr	r2, [r5, #16]
 800f646:	fab2 f382 	clz	r3, r2
 800f64a:	095b      	lsrs	r3, r3, #5
 800f64c:	b14a      	cbz	r2, 800f662 <rclc_executor_init+0xd2>
 800f64e:	4618      	mov	r0, r3
 800f650:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800f654:	b030      	add	sp, #192	@ 0xc0
 800f656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f65a:	200b      	movs	r0, #11
 800f65c:	b030      	add	sp, #192	@ 0xc0
 800f65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f662:	2000      	movs	r0, #0
 800f664:	b030      	add	sp, #192	@ 0xc0
 800f666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f66a:	200b      	movs	r0, #11
 800f66c:	4770      	bx	lr
 800f66e:	200a      	movs	r0, #10
 800f670:	e7f4      	b.n	800f65c <rclc_executor_init+0xcc>
 800f672:	bf00      	nop
 800f674:	f3af 8000 	nop.w
 800f678:	3b9aca00 	.word	0x3b9aca00
 800f67c:	00000000 	.word	0x00000000
 800f680:	0801de00 	.word	0x0801de00
 800f684:	0800f4f5 	.word	0x0800f4f5

0800f688 <rclc_executor_add_timer>:
 800f688:	b351      	cbz	r1, 800f6e0 <rclc_executor_add_timer+0x58>
 800f68a:	fab0 f280 	clz	r2, r0
 800f68e:	b570      	push	{r4, r5, r6, lr}
 800f690:	0952      	lsrs	r2, r2, #5
 800f692:	4604      	mov	r4, r0
 800f694:	b1e0      	cbz	r0, 800f6d0 <rclc_executor_add_timer+0x48>
 800f696:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800f69a:	4283      	cmp	r3, r0
 800f69c:	d301      	bcc.n	800f6a2 <rclc_executor_add_timer+0x1a>
 800f69e:	2001      	movs	r0, #1
 800f6a0:	bd70      	pop	{r4, r5, r6, pc}
 800f6a2:	6860      	ldr	r0, [r4, #4]
 800f6a4:	019d      	lsls	r5, r3, #6
 800f6a6:	1c5e      	adds	r6, r3, #1
 800f6a8:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800f6ac:	6059      	str	r1, [r3, #4]
 800f6ae:	2102      	movs	r1, #2
 800f6b0:	5341      	strh	r1, [r0, r5]
 800f6b2:	2101      	movs	r1, #1
 800f6b4:	f104 0514 	add.w	r5, r4, #20
 800f6b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f6ba:	8719      	strh	r1, [r3, #56]	@ 0x38
 800f6bc:	4628      	mov	r0, r5
 800f6be:	60e6      	str	r6, [r4, #12]
 800f6c0:	f008 feaa 	bl	8018418 <rcl_wait_set_is_valid>
 800f6c4:	b930      	cbnz	r0, 800f6d4 <rclc_executor_add_timer+0x4c>
 800f6c6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800f6ce:	bd70      	pop	{r4, r5, r6, pc}
 800f6d0:	200b      	movs	r0, #11
 800f6d2:	bd70      	pop	{r4, r5, r6, pc}
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f008 fea5 	bl	8018424 <rcl_wait_set_fini>
 800f6da:	2800      	cmp	r0, #0
 800f6dc:	d0f3      	beq.n	800f6c6 <rclc_executor_add_timer+0x3e>
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	200b      	movs	r0, #11
 800f6e2:	4770      	bx	lr

0800f6e4 <rclc_executor_prepare>:
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	d044      	beq.n	800f772 <rclc_executor_prepare+0x8e>
 800f6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6ea:	f100 0514 	add.w	r5, r0, #20
 800f6ee:	b09b      	sub	sp, #108	@ 0x6c
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f008 fe90 	bl	8018418 <rcl_wait_set_is_valid>
 800f6f8:	b110      	cbz	r0, 800f700 <rclc_executor_prepare+0x1c>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	b01b      	add	sp, #108	@ 0x6c
 800f6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f700:	4628      	mov	r0, r5
 800f702:	f008 fe8f 	bl	8018424 <rcl_wait_set_fini>
 800f706:	2800      	cmp	r0, #0
 800f708:	d130      	bne.n	800f76c <rclc_executor_prepare+0x88>
 800f70a:	a80c      	add	r0, sp, #48	@ 0x30
 800f70c:	ae04      	add	r6, sp, #16
 800f70e:	f008 fe6f 	bl	80183f0 <rcl_get_zero_initialized_wait_set>
 800f712:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f716:	46ae      	mov	lr, r5
 800f718:	6927      	ldr	r7, [r4, #16]
 800f71a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f71e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f726:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f72a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f72e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f732:	f8dc 3000 	ldr.w	r3, [ip]
 800f736:	f8ce 3000 	str.w	r3, [lr]
 800f73a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f73c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	4628      	mov	r0, r5
 800f742:	6822      	ldr	r2, [r4, #0]
 800f744:	6033      	str	r3, [r6, #0]
 800f746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f748:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f74a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f74e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f752:	e9cd 2100 	strd	r2, r1, [sp]
 800f756:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f758:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f75a:	f009 f963 	bl	8018a24 <rcl_wait_set_init>
 800f75e:	2800      	cmp	r0, #0
 800f760:	d0cc      	beq.n	800f6fc <rclc_executor_prepare+0x18>
 800f762:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f764:	f000 fb34 	bl	800fdd0 <rcutils_reset_error>
 800f768:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f76a:	e7c7      	b.n	800f6fc <rclc_executor_prepare+0x18>
 800f76c:	f000 fb30 	bl	800fdd0 <rcutils_reset_error>
 800f770:	e7cb      	b.n	800f70a <rclc_executor_prepare+0x26>
 800f772:	200b      	movs	r0, #11
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop

0800f778 <rclc_executor_spin_some.part.0>:
 800f778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f77c:	4605      	mov	r5, r0
 800f77e:	4691      	mov	r9, r2
 800f780:	4698      	mov	r8, r3
 800f782:	f7ff ffaf 	bl	800f6e4 <rclc_executor_prepare>
 800f786:	f105 0614 	add.w	r6, r5, #20
 800f78a:	4630      	mov	r0, r6
 800f78c:	f008 ff16 	bl	80185bc <rcl_wait_set_clear>
 800f790:	4607      	mov	r7, r0
 800f792:	2800      	cmp	r0, #0
 800f794:	f040 80a8 	bne.w	800f8e8 <rclc_executor_spin_some.part.0+0x170>
 800f798:	68ab      	ldr	r3, [r5, #8]
 800f79a:	b30b      	cbz	r3, 800f7e0 <rclc_executor_spin_some.part.0+0x68>
 800f79c:	4604      	mov	r4, r0
 800f79e:	6869      	ldr	r1, [r5, #4]
 800f7a0:	01a2      	lsls	r2, r4, #6
 800f7a2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f7a6:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f7aa:	b1cb      	cbz	r3, 800f7e0 <rclc_executor_spin_some.part.0+0x68>
 800f7ac:	5c8b      	ldrb	r3, [r1, r2]
 800f7ae:	2b0a      	cmp	r3, #10
 800f7b0:	f200 80de 	bhi.w	800f970 <rclc_executor_spin_some.part.0+0x1f8>
 800f7b4:	e8df f003 	tbb	[pc, r3]
 800f7b8:	8da99d9d 	.word	0x8da99d9d
 800f7bc:	0606068d 	.word	0x0606068d
 800f7c0:	c1ce      	.short	0xc1ce
 800f7c2:	b5          	.byte	0xb5
 800f7c3:	00          	.byte	0x00
 800f7c4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f7c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f7cc:	4630      	mov	r0, r6
 800f7ce:	f009 fa45 	bl	8018c5c <rcl_wait_set_add_service>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	f040 8087 	bne.w	800f8e6 <rclc_executor_spin_some.part.0+0x16e>
 800f7d8:	3401      	adds	r4, #1
 800f7da:	68ab      	ldr	r3, [r5, #8]
 800f7dc:	429c      	cmp	r4, r3
 800f7de:	d3de      	bcc.n	800f79e <rclc_executor_spin_some.part.0+0x26>
 800f7e0:	4643      	mov	r3, r8
 800f7e2:	464a      	mov	r2, r9
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	f009 fa67 	bl	8018cb8 <rcl_wait>
 800f7ea:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f000 80c6 	beq.w	800f980 <rclc_executor_spin_some.part.0+0x208>
 800f7f4:	2b01      	cmp	r3, #1
 800f7f6:	f040 80bb 	bne.w	800f970 <rclc_executor_spin_some.part.0+0x1f8>
 800f7fa:	68ab      	ldr	r3, [r5, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f000 8159 	beq.w	800fab4 <rclc_executor_spin_some.part.0+0x33c>
 800f802:	2400      	movs	r4, #0
 800f804:	f240 1991 	movw	r9, #401	@ 0x191
 800f808:	46a0      	mov	r8, r4
 800f80a:	e00a      	b.n	800f822 <rclc_executor_spin_some.part.0+0xaa>
 800f80c:	f7ff fb6e 	bl	800eeec <_rclc_check_for_new_data>
 800f810:	4604      	mov	r4, r0
 800f812:	b110      	cbz	r0, 800f81a <rclc_executor_spin_some.part.0+0xa2>
 800f814:	4548      	cmp	r0, r9
 800f816:	f040 80b1 	bne.w	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f81a:	68ab      	ldr	r3, [r5, #8]
 800f81c:	4598      	cmp	r8, r3
 800f81e:	f080 8126 	bcs.w	800fa6e <rclc_executor_spin_some.part.0+0x2f6>
 800f822:	686a      	ldr	r2, [r5, #4]
 800f824:	4631      	mov	r1, r6
 800f826:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f82a:	f108 0801 	add.w	r8, r8, #1
 800f82e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f832:	f1bc 0f00 	cmp.w	ip, #0
 800f836:	d1e9      	bne.n	800f80c <rclc_executor_spin_some.part.0+0x94>
 800f838:	4619      	mov	r1, r3
 800f83a:	4610      	mov	r0, r2
 800f83c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f840:	4798      	blx	r3
 800f842:	2800      	cmp	r0, #0
 800f844:	f000 809a 	beq.w	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f848:	68ab      	ldr	r3, [r5, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 8096 	beq.w	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f850:	f04f 0800 	mov.w	r8, #0
 800f854:	f240 1991 	movw	r9, #401	@ 0x191
 800f858:	e009      	b.n	800f86e <rclc_executor_spin_some.part.0+0xf6>
 800f85a:	f7ff fb95 	bl	800ef88 <_rclc_take_new_data>
 800f85e:	4604      	mov	r4, r0
 800f860:	b110      	cbz	r0, 800f868 <rclc_executor_spin_some.part.0+0xf0>
 800f862:	4548      	cmp	r0, r9
 800f864:	f040 808a 	bne.w	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f868:	68ab      	ldr	r3, [r5, #8]
 800f86a:	4598      	cmp	r8, r3
 800f86c:	d209      	bcs.n	800f882 <rclc_executor_spin_some.part.0+0x10a>
 800f86e:	6868      	ldr	r0, [r5, #4]
 800f870:	4631      	mov	r1, r6
 800f872:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f876:	f108 0801 	add.w	r8, r8, #1
 800f87a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f87e:	2a00      	cmp	r2, #0
 800f880:	d1eb      	bne.n	800f85a <rclc_executor_spin_some.part.0+0xe2>
 800f882:	2b00      	cmp	r3, #0
 800f884:	d07a      	beq.n	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f886:	2600      	movs	r6, #0
 800f888:	e00e      	b.n	800f8a8 <rclc_executor_spin_some.part.0+0x130>
 800f88a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f88e:	2a08      	cmp	r2, #8
 800f890:	f000 80fc 	beq.w	800fa8c <rclc_executor_spin_some.part.0+0x314>
 800f894:	2a09      	cmp	r2, #9
 800f896:	f000 80ee 	beq.w	800fa76 <rclc_executor_spin_some.part.0+0x2fe>
 800f89a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f89e:	b98a      	cbnz	r2, 800f8c4 <rclc_executor_spin_some.part.0+0x14c>
 800f8a0:	3601      	adds	r6, #1
 800f8a2:	429e      	cmp	r6, r3
 800f8a4:	d267      	bcs.n	800f976 <rclc_executor_spin_some.part.0+0x1fe>
 800f8a6:	2400      	movs	r4, #0
 800f8a8:	686a      	ldr	r2, [r5, #4]
 800f8aa:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f8ae:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f8b2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f8b6:	2900      	cmp	r1, #0
 800f8b8:	d060      	beq.n	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f8ba:	7841      	ldrb	r1, [r0, #1]
 800f8bc:	2900      	cmp	r1, #0
 800f8be:	d0e4      	beq.n	800f88a <rclc_executor_spin_some.part.0+0x112>
 800f8c0:	2901      	cmp	r1, #1
 800f8c2:	d1ed      	bne.n	800f8a0 <rclc_executor_spin_some.part.0+0x128>
 800f8c4:	f7ff fcd4 	bl	800f270 <_rclc_execute.part.0>
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	f040 80b5 	bne.w	800fa38 <rclc_executor_spin_some.part.0+0x2c0>
 800f8ce:	68ab      	ldr	r3, [r5, #8]
 800f8d0:	e7e6      	b.n	800f8a0 <rclc_executor_spin_some.part.0+0x128>
 800f8d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f009 f992 	bl	8018c04 <rcl_wait_set_add_client>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	f43f af79 	beq.w	800f7d8 <rclc_executor_spin_some.part.0+0x60>
 800f8e6:	4607      	mov	r7, r0
 800f8e8:	f000 fa72 	bl	800fdd0 <rcutils_reset_error>
 800f8ec:	4638      	mov	r0, r7
 800f8ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f8f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f008 fe32 	bl	8018564 <rcl_wait_set_add_subscription>
 800f900:	2800      	cmp	r0, #0
 800f902:	f43f af69 	beq.w	800f7d8 <rclc_executor_spin_some.part.0+0x60>
 800f906:	4607      	mov	r7, r0
 800f908:	e7ee      	b.n	800f8e8 <rclc_executor_spin_some.part.0+0x170>
 800f90a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f90e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f912:	4630      	mov	r0, r6
 800f914:	f009 f946 	bl	8018ba4 <rcl_wait_set_add_timer>
 800f918:	2800      	cmp	r0, #0
 800f91a:	f43f af5d 	beq.w	800f7d8 <rclc_executor_spin_some.part.0+0x60>
 800f91e:	4607      	mov	r7, r0
 800f920:	e7e2      	b.n	800f8e8 <rclc_executor_spin_some.part.0+0x170>
 800f922:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f926:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f92a:	4630      	mov	r0, r6
 800f92c:	f009 f90e 	bl	8018b4c <rcl_wait_set_add_guard_condition>
 800f930:	2800      	cmp	r0, #0
 800f932:	f43f af51 	beq.w	800f7d8 <rclc_executor_spin_some.part.0+0x60>
 800f936:	4607      	mov	r7, r0
 800f938:	e7d6      	b.n	800f8e8 <rclc_executor_spin_some.part.0+0x170>
 800f93a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f93e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f942:	4630      	mov	r0, r6
 800f944:	3110      	adds	r1, #16
 800f946:	f009 fe8d 	bl	8019664 <rcl_action_wait_set_add_action_server>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	f43f af44 	beq.w	800f7d8 <rclc_executor_spin_some.part.0+0x60>
 800f950:	4607      	mov	r7, r0
 800f952:	e7c9      	b.n	800f8e8 <rclc_executor_spin_some.part.0+0x170>
 800f954:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f958:	2300      	movs	r3, #0
 800f95a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f95e:	4630      	mov	r0, r6
 800f960:	3110      	adds	r1, #16
 800f962:	f009 fc55 	bl	8019210 <rcl_action_wait_set_add_action_client>
 800f966:	2800      	cmp	r0, #0
 800f968:	f43f af36 	beq.w	800f7d8 <rclc_executor_spin_some.part.0+0x60>
 800f96c:	4607      	mov	r7, r0
 800f96e:	e7bb      	b.n	800f8e8 <rclc_executor_spin_some.part.0+0x170>
 800f970:	2701      	movs	r7, #1
 800f972:	f000 fa2d 	bl	800fdd0 <rcutils_reset_error>
 800f976:	4638      	mov	r0, r7
 800f978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97c:	4627      	mov	r7, r4
 800f97e:	e7fa      	b.n	800f976 <rclc_executor_spin_some.part.0+0x1fe>
 800f980:	68ab      	ldr	r3, [r5, #8]
 800f982:	2b00      	cmp	r3, #0
 800f984:	f000 8093 	beq.w	800faae <rclc_executor_spin_some.part.0+0x336>
 800f988:	2400      	movs	r4, #0
 800f98a:	f240 1991 	movw	r9, #401	@ 0x191
 800f98e:	46a0      	mov	r8, r4
 800f990:	e008      	b.n	800f9a4 <rclc_executor_spin_some.part.0+0x22c>
 800f992:	f7ff faab 	bl	800eeec <_rclc_check_for_new_data>
 800f996:	4604      	mov	r4, r0
 800f998:	b108      	cbz	r0, 800f99e <rclc_executor_spin_some.part.0+0x226>
 800f99a:	4548      	cmp	r0, r9
 800f99c:	d1ee      	bne.n	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f99e:	68ab      	ldr	r3, [r5, #8]
 800f9a0:	4598      	cmp	r8, r3
 800f9a2:	d266      	bcs.n	800fa72 <rclc_executor_spin_some.part.0+0x2fa>
 800f9a4:	686a      	ldr	r2, [r5, #4]
 800f9a6:	4631      	mov	r1, r6
 800f9a8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f9ac:	f108 0801 	add.w	r8, r8, #1
 800f9b0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f9b4:	f1bc 0f00 	cmp.w	ip, #0
 800f9b8:	d1eb      	bne.n	800f992 <rclc_executor_spin_some.part.0+0x21a>
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	4610      	mov	r0, r2
 800f9be:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f9c2:	4798      	blx	r3
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d0d9      	beq.n	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f9c8:	68ab      	ldr	r3, [r5, #8]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d0d6      	beq.n	800f97c <rclc_executor_spin_some.part.0+0x204>
 800f9ce:	f04f 0a00 	mov.w	sl, #0
 800f9d2:	f240 1891 	movw	r8, #401	@ 0x191
 800f9d6:	f240 2959 	movw	r9, #601	@ 0x259
 800f9da:	e00e      	b.n	800f9fa <rclc_executor_spin_some.part.0+0x282>
 800f9dc:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f9e0:	2b08      	cmp	r3, #8
 800f9e2:	d034      	beq.n	800fa4e <rclc_executor_spin_some.part.0+0x2d6>
 800f9e4:	2b09      	cmp	r3, #9
 800f9e6:	d029      	beq.n	800fa3c <rclc_executor_spin_some.part.0+0x2c4>
 800f9e8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f9ec:	bb03      	cbnz	r3, 800fa30 <rclc_executor_spin_some.part.0+0x2b8>
 800f9ee:	f10a 0a01 	add.w	sl, sl, #1
 800f9f2:	68ab      	ldr	r3, [r5, #8]
 800f9f4:	459a      	cmp	sl, r3
 800f9f6:	d2be      	bcs.n	800f976 <rclc_executor_spin_some.part.0+0x1fe>
 800f9f8:	2400      	movs	r4, #0
 800f9fa:	6868      	ldr	r0, [r5, #4]
 800f9fc:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800fa00:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800fa04:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d0b7      	beq.n	800f97c <rclc_executor_spin_some.part.0+0x204>
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	f7ff fabb 	bl	800ef88 <_rclc_take_new_data>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	bf18      	it	ne
 800fa16:	4540      	cmpne	r0, r8
 800fa18:	d001      	beq.n	800fa1e <rclc_executor_spin_some.part.0+0x2a6>
 800fa1a:	4548      	cmp	r0, r9
 800fa1c:	d10c      	bne.n	800fa38 <rclc_executor_spin_some.part.0+0x2c0>
 800fa1e:	686b      	ldr	r3, [r5, #4]
 800fa20:	eb13 000b 	adds.w	r0, r3, fp
 800fa24:	d021      	beq.n	800fa6a <rclc_executor_spin_some.part.0+0x2f2>
 800fa26:	7842      	ldrb	r2, [r0, #1]
 800fa28:	2a00      	cmp	r2, #0
 800fa2a:	d0d7      	beq.n	800f9dc <rclc_executor_spin_some.part.0+0x264>
 800fa2c:	2a01      	cmp	r2, #1
 800fa2e:	d1de      	bne.n	800f9ee <rclc_executor_spin_some.part.0+0x276>
 800fa30:	f7ff fc1e 	bl	800f270 <_rclc_execute.part.0>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d0da      	beq.n	800f9ee <rclc_executor_spin_some.part.0+0x276>
 800fa38:	4607      	mov	r7, r0
 800fa3a:	e79c      	b.n	800f976 <rclc_executor_spin_some.part.0+0x1fe>
 800fa3c:	6843      	ldr	r3, [r0, #4]
 800fa3e:	6a1a      	ldr	r2, [r3, #32]
 800fa40:	2a00      	cmp	r2, #0
 800fa42:	d1f5      	bne.n	800fa30 <rclc_executor_spin_some.part.0+0x2b8>
 800fa44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d0d0      	beq.n	800f9ee <rclc_executor_spin_some.part.0+0x276>
 800fa4c:	e7f0      	b.n	800fa30 <rclc_executor_spin_some.part.0+0x2b8>
 800fa4e:	6843      	ldr	r3, [r0, #4]
 800fa50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa52:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800fa56:	d1eb      	bne.n	800fa30 <rclc_executor_spin_some.part.0+0x2b8>
 800fa58:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fa5c:	2a00      	cmp	r2, #0
 800fa5e:	d1e7      	bne.n	800fa30 <rclc_executor_spin_some.part.0+0x2b8>
 800fa60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d0c2      	beq.n	800f9ee <rclc_executor_spin_some.part.0+0x276>
 800fa68:	e7e2      	b.n	800fa30 <rclc_executor_spin_some.part.0+0x2b8>
 800fa6a:	270b      	movs	r7, #11
 800fa6c:	e783      	b.n	800f976 <rclc_executor_spin_some.part.0+0x1fe>
 800fa6e:	686a      	ldr	r2, [r5, #4]
 800fa70:	e6e2      	b.n	800f838 <rclc_executor_spin_some.part.0+0xc0>
 800fa72:	686a      	ldr	r2, [r5, #4]
 800fa74:	e7a1      	b.n	800f9ba <rclc_executor_spin_some.part.0+0x242>
 800fa76:	6842      	ldr	r2, [r0, #4]
 800fa78:	6a11      	ldr	r1, [r2, #32]
 800fa7a:	2900      	cmp	r1, #0
 800fa7c:	f47f af22 	bne.w	800f8c4 <rclc_executor_spin_some.part.0+0x14c>
 800fa80:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	f43f af0b 	beq.w	800f8a0 <rclc_executor_spin_some.part.0+0x128>
 800fa8a:	e71b      	b.n	800f8c4 <rclc_executor_spin_some.part.0+0x14c>
 800fa8c:	6842      	ldr	r2, [r0, #4]
 800fa8e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800fa90:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800fa94:	f47f af16 	bne.w	800f8c4 <rclc_executor_spin_some.part.0+0x14c>
 800fa98:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800fa9c:	2900      	cmp	r1, #0
 800fa9e:	f47f af11 	bne.w	800f8c4 <rclc_executor_spin_some.part.0+0x14c>
 800faa2:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800faa6:	2a00      	cmp	r2, #0
 800faa8:	f43f aefa 	beq.w	800f8a0 <rclc_executor_spin_some.part.0+0x128>
 800faac:	e70a      	b.n	800f8c4 <rclc_executor_spin_some.part.0+0x14c>
 800faae:	686a      	ldr	r2, [r5, #4]
 800fab0:	461c      	mov	r4, r3
 800fab2:	e782      	b.n	800f9ba <rclc_executor_spin_some.part.0+0x242>
 800fab4:	686a      	ldr	r2, [r5, #4]
 800fab6:	461c      	mov	r4, r3
 800fab8:	e6be      	b.n	800f838 <rclc_executor_spin_some.part.0+0xc0>
 800faba:	bf00      	nop

0800fabc <rclc_executor_spin>:
 800fabc:	b1d0      	cbz	r0, 800faf4 <rclc_executor_spin+0x38>
 800fabe:	b510      	push	{r4, lr}
 800fac0:	4604      	mov	r4, r0
 800fac2:	b082      	sub	sp, #8
 800fac4:	e004      	b.n	800fad0 <rclc_executor_spin+0x14>
 800fac6:	f7ff fe57 	bl	800f778 <rclc_executor_spin_some.part.0>
 800faca:	f030 0302 	bics.w	r3, r0, #2
 800face:	d10f      	bne.n	800faf0 <rclc_executor_spin+0x34>
 800fad0:	6820      	ldr	r0, [r4, #0]
 800fad2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800fad6:	e9cd 2300 	strd	r2, r3, [sp]
 800fada:	f007 fa69 	bl	8016fb0 <rcl_context_is_valid>
 800fade:	4601      	mov	r1, r0
 800fae0:	4620      	mov	r0, r4
 800fae2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fae6:	2900      	cmp	r1, #0
 800fae8:	d1ed      	bne.n	800fac6 <rclc_executor_spin+0xa>
 800faea:	f000 f971 	bl	800fdd0 <rcutils_reset_error>
 800faee:	2001      	movs	r0, #1
 800faf0:	b002      	add	sp, #8
 800faf2:	bd10      	pop	{r4, pc}
 800faf4:	200b      	movs	r0, #11
 800faf6:	4770      	bx	lr

0800faf8 <rclc_executor_handle_counters_zero_init>:
 800faf8:	b130      	cbz	r0, 800fb08 <rclc_executor_handle_counters_zero_init+0x10>
 800fafa:	2220      	movs	r2, #32
 800fafc:	2100      	movs	r1, #0
 800fafe:	b508      	push	{r3, lr}
 800fb00:	f00d f9b2 	bl	801ce68 <memset>
 800fb04:	2000      	movs	r0, #0
 800fb06:	bd08      	pop	{r3, pc}
 800fb08:	200b      	movs	r0, #11
 800fb0a:	4770      	bx	lr
 800fb0c:	0000      	movs	r0, r0
	...

0800fb10 <rclc_executor_handle_init>:
 800fb10:	4603      	mov	r3, r0
 800fb12:	b178      	cbz	r0, 800fb34 <rclc_executor_handle_init+0x24>
 800fb14:	2200      	movs	r2, #0
 800fb16:	f04f 0c0b 	mov.w	ip, #11
 800fb1a:	6341      	str	r1, [r0, #52]	@ 0x34
 800fb1c:	4610      	mov	r0, r2
 800fb1e:	f8a3 c000 	strh.w	ip, [r3]
 800fb22:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb24:	871a      	strh	r2, [r3, #56]	@ 0x38
 800fb26:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800fb38 <rclc_executor_handle_init+0x28>
 800fb2a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800fb2e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800fb32:	4770      	bx	lr
 800fb34:	200b      	movs	r0, #11
 800fb36:	4770      	bx	lr
	...

0800fb40 <rclc_support_init_with_options>:
 800fb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb44:	b083      	sub	sp, #12
 800fb46:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	bf18      	it	ne
 800fb4c:	2f00      	cmpne	r7, #0
 800fb4e:	d027      	beq.n	800fba0 <rclc_support_init_with_options+0x60>
 800fb50:	4604      	mov	r4, r0
 800fb52:	b328      	cbz	r0, 800fba0 <rclc_support_init_with_options+0x60>
 800fb54:	46e9      	mov	r9, sp
 800fb56:	461d      	mov	r5, r3
 800fb58:	460e      	mov	r6, r1
 800fb5a:	4690      	mov	r8, r2
 800fb5c:	4648      	mov	r0, r9
 800fb5e:	f007 fa1d 	bl	8016f9c <rcl_get_zero_initialized_context>
 800fb62:	462a      	mov	r2, r5
 800fb64:	4623      	mov	r3, r4
 800fb66:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb6a:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb6e:	4641      	mov	r1, r8
 800fb70:	4630      	mov	r0, r6
 800fb72:	f007 fa83 	bl	801707c <rcl_init>
 800fb76:	4605      	mov	r5, r0
 800fb78:	b960      	cbnz	r0, 800fb94 <rclc_support_init_with_options+0x54>
 800fb7a:	463a      	mov	r2, r7
 800fb7c:	f104 010c 	add.w	r1, r4, #12
 800fb80:	2003      	movs	r0, #3
 800fb82:	60a7      	str	r7, [r4, #8]
 800fb84:	f008 f808 	bl	8017b98 <rcl_clock_init>
 800fb88:	4605      	mov	r5, r0
 800fb8a:	b918      	cbnz	r0, 800fb94 <rclc_support_init_with_options+0x54>
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	b003      	add	sp, #12
 800fb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb94:	f000 f91c 	bl	800fdd0 <rcutils_reset_error>
 800fb98:	4628      	mov	r0, r5
 800fb9a:	b003      	add	sp, #12
 800fb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fba0:	250b      	movs	r5, #11
 800fba2:	4628      	mov	r0, r5
 800fba4:	b003      	add	sp, #12
 800fba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbaa:	bf00      	nop

0800fbac <rclc_node_init_default>:
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	bf18      	it	ne
 800fbb0:	2a00      	cmpne	r2, #0
 800fbb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbb6:	4616      	mov	r6, r2
 800fbb8:	bf0c      	ite	eq
 800fbba:	2201      	moveq	r2, #1
 800fbbc:	2200      	movne	r2, #0
 800fbbe:	b0a1      	sub	sp, #132	@ 0x84
 800fbc0:	2900      	cmp	r1, #0
 800fbc2:	bf08      	it	eq
 800fbc4:	f042 0201 	orreq.w	r2, r2, #1
 800fbc8:	bb22      	cbnz	r2, 800fc14 <rclc_node_init_default+0x68>
 800fbca:	4604      	mov	r4, r0
 800fbcc:	b310      	cbz	r0, 800fc14 <rclc_node_init_default+0x68>
 800fbce:	f10d 0810 	add.w	r8, sp, #16
 800fbd2:	461f      	mov	r7, r3
 800fbd4:	460d      	mov	r5, r1
 800fbd6:	f10d 0918 	add.w	r9, sp, #24
 800fbda:	4640      	mov	r0, r8
 800fbdc:	f007 fb76 	bl	80172cc <rcl_get_zero_initialized_node>
 800fbe0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fbe4:	e884 0003 	stmia.w	r4, {r0, r1}
 800fbe8:	4648      	mov	r0, r9
 800fbea:	f007 fce9 	bl	80175c0 <rcl_node_get_default_options>
 800fbee:	4640      	mov	r0, r8
 800fbf0:	f007 fb6c 	bl	80172cc <rcl_get_zero_initialized_node>
 800fbf4:	f8cd 9000 	str.w	r9, [sp]
 800fbf8:	463b      	mov	r3, r7
 800fbfa:	4632      	mov	r2, r6
 800fbfc:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fc00:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc04:	4629      	mov	r1, r5
 800fc06:	4620      	mov	r0, r4
 800fc08:	f007 fb6a 	bl	80172e0 <rcl_node_init>
 800fc0c:	b930      	cbnz	r0, 800fc1c <rclc_node_init_default+0x70>
 800fc0e:	b021      	add	sp, #132	@ 0x84
 800fc10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc14:	200b      	movs	r0, #11
 800fc16:	b021      	add	sp, #132	@ 0x84
 800fc18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc1c:	9003      	str	r0, [sp, #12]
 800fc1e:	f000 f8d7 	bl	800fdd0 <rcutils_reset_error>
 800fc22:	f000 f8d5 	bl	800fdd0 <rcutils_reset_error>
 800fc26:	9803      	ldr	r0, [sp, #12]
 800fc28:	b021      	add	sp, #132	@ 0x84
 800fc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc2e:	bf00      	nop

0800fc30 <rclc_publisher_init_best_effort>:
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bf18      	it	ne
 800fc34:	2a00      	cmpne	r2, #0
 800fc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3a:	4616      	mov	r6, r2
 800fc3c:	bf0c      	ite	eq
 800fc3e:	2201      	moveq	r2, #1
 800fc40:	2200      	movne	r2, #0
 800fc42:	b0a0      	sub	sp, #128	@ 0x80
 800fc44:	2900      	cmp	r1, #0
 800fc46:	bf08      	it	eq
 800fc48:	f042 0201 	orreq.w	r2, r2, #1
 800fc4c:	bb1a      	cbnz	r2, 800fc96 <rclc_publisher_init_best_effort+0x66>
 800fc4e:	4604      	mov	r4, r0
 800fc50:	b308      	cbz	r0, 800fc96 <rclc_publisher_init_best_effort+0x66>
 800fc52:	f10d 0810 	add.w	r8, sp, #16
 800fc56:	461f      	mov	r7, r3
 800fc58:	460d      	mov	r5, r1
 800fc5a:	f7ff f833 	bl	800ecc4 <rcl_get_zero_initialized_publisher>
 800fc5e:	6020      	str	r0, [r4, #0]
 800fc60:	4640      	mov	r0, r8
 800fc62:	f7ff f8cf 	bl	800ee04 <rcl_publisher_get_default_options>
 800fc66:	2250      	movs	r2, #80	@ 0x50
 800fc68:	490d      	ldr	r1, [pc, #52]	@ (800fca0 <rclc_publisher_init_best_effort+0x70>)
 800fc6a:	4640      	mov	r0, r8
 800fc6c:	f00d f9c5 	bl	801cffa <memcpy>
 800fc70:	463b      	mov	r3, r7
 800fc72:	4632      	mov	r2, r6
 800fc74:	4629      	mov	r1, r5
 800fc76:	4620      	mov	r0, r4
 800fc78:	f8cd 8000 	str.w	r8, [sp]
 800fc7c:	f7ff f828 	bl	800ecd0 <rcl_publisher_init>
 800fc80:	b910      	cbnz	r0, 800fc88 <rclc_publisher_init_best_effort+0x58>
 800fc82:	b020      	add	sp, #128	@ 0x80
 800fc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc88:	9003      	str	r0, [sp, #12]
 800fc8a:	f000 f8a1 	bl	800fdd0 <rcutils_reset_error>
 800fc8e:	9803      	ldr	r0, [sp, #12]
 800fc90:	b020      	add	sp, #128	@ 0x80
 800fc92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc96:	200b      	movs	r0, #11
 800fc98:	b020      	add	sp, #128	@ 0x80
 800fc9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9e:	bf00      	nop
 800fca0:	0801de88 	.word	0x0801de88

0800fca4 <rclc_timer_init_default>:
 800fca4:	b361      	cbz	r1, 800fd00 <rclc_timer_init_default+0x5c>
 800fca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcaa:	4606      	mov	r6, r0
 800fcac:	b08a      	sub	sp, #40	@ 0x28
 800fcae:	b318      	cbz	r0, 800fcf8 <rclc_timer_init_default+0x54>
 800fcb0:	460d      	mov	r5, r1
 800fcb2:	4690      	mov	r8, r2
 800fcb4:	461f      	mov	r7, r3
 800fcb6:	f008 f967 	bl	8017f88 <rcl_get_zero_initialized_timer>
 800fcba:	68ac      	ldr	r4, [r5, #8]
 800fcbc:	f10d 0c0c 	add.w	ip, sp, #12
 800fcc0:	6030      	str	r0, [r6, #0]
 800fcc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcc8:	6823      	ldr	r3, [r4, #0]
 800fcca:	462a      	mov	r2, r5
 800fccc:	f105 010c 	add.w	r1, r5, #12
 800fcd0:	4630      	mov	r0, r6
 800fcd2:	f8cc 3000 	str.w	r3, [ip]
 800fcd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fcd8:	e9cd 8700 	strd	r8, r7, [sp]
 800fcdc:	9302      	str	r3, [sp, #8]
 800fcde:	f008 f95b 	bl	8017f98 <rcl_timer_init>
 800fce2:	b910      	cbnz	r0, 800fcea <rclc_timer_init_default+0x46>
 800fce4:	b00a      	add	sp, #40	@ 0x28
 800fce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcea:	9009      	str	r0, [sp, #36]	@ 0x24
 800fcec:	f000 f870 	bl	800fdd0 <rcutils_reset_error>
 800fcf0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fcf2:	b00a      	add	sp, #40	@ 0x28
 800fcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf8:	200b      	movs	r0, #11
 800fcfa:	b00a      	add	sp, #40	@ 0x28
 800fcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd00:	200b      	movs	r0, #11
 800fd02:	4770      	bx	lr

0800fd04 <__default_zero_allocate>:
 800fd04:	f00c bbc6 	b.w	801c494 <calloc>

0800fd08 <__default_reallocate>:
 800fd08:	f00c bd64 	b.w	801c7d4 <realloc>

0800fd0c <__default_deallocate>:
 800fd0c:	f00c bc40 	b.w	801c590 <free>

0800fd10 <__default_allocate>:
 800fd10:	f00c bc36 	b.w	801c580 <malloc>

0800fd14 <rcutils_get_zero_initialized_allocator>:
 800fd14:	b510      	push	{r4, lr}
 800fd16:	4c05      	ldr	r4, [pc, #20]	@ (800fd2c <rcutils_get_zero_initialized_allocator+0x18>)
 800fd18:	4686      	mov	lr, r0
 800fd1a:	4684      	mov	ip, r0
 800fd1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd22:	6823      	ldr	r3, [r4, #0]
 800fd24:	4670      	mov	r0, lr
 800fd26:	f8cc 3000 	str.w	r3, [ip]
 800fd2a:	bd10      	pop	{r4, pc}
 800fd2c:	0801ded8 	.word	0x0801ded8

0800fd30 <rcutils_set_default_allocator>:
 800fd30:	b1a8      	cbz	r0, 800fd5e <rcutils_set_default_allocator+0x2e>
 800fd32:	6802      	ldr	r2, [r0, #0]
 800fd34:	b1a2      	cbz	r2, 800fd60 <rcutils_set_default_allocator+0x30>
 800fd36:	6841      	ldr	r1, [r0, #4]
 800fd38:	b1a1      	cbz	r1, 800fd64 <rcutils_set_default_allocator+0x34>
 800fd3a:	b410      	push	{r4}
 800fd3c:	68c4      	ldr	r4, [r0, #12]
 800fd3e:	b164      	cbz	r4, 800fd5a <rcutils_set_default_allocator+0x2a>
 800fd40:	6880      	ldr	r0, [r0, #8]
 800fd42:	b138      	cbz	r0, 800fd54 <rcutils_set_default_allocator+0x24>
 800fd44:	4b08      	ldr	r3, [pc, #32]	@ (800fd68 <rcutils_set_default_allocator+0x38>)
 800fd46:	601a      	str	r2, [r3, #0]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800fd4e:	2001      	movs	r0, #1
 800fd50:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800fd54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	e7fa      	b.n	800fd54 <rcutils_set_default_allocator+0x24>
 800fd5e:	4770      	bx	lr
 800fd60:	4610      	mov	r0, r2
 800fd62:	4770      	bx	lr
 800fd64:	4608      	mov	r0, r1
 800fd66:	4770      	bx	lr
 800fd68:	24000018 	.word	0x24000018

0800fd6c <rcutils_get_default_allocator>:
 800fd6c:	b510      	push	{r4, lr}
 800fd6e:	4c05      	ldr	r4, [pc, #20]	@ (800fd84 <rcutils_get_default_allocator+0x18>)
 800fd70:	4686      	mov	lr, r0
 800fd72:	4684      	mov	ip, r0
 800fd74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	4670      	mov	r0, lr
 800fd7e:	f8cc 3000 	str.w	r3, [ip]
 800fd82:	bd10      	pop	{r4, pc}
 800fd84:	24000018 	.word	0x24000018

0800fd88 <rcutils_allocator_is_valid>:
 800fd88:	b158      	cbz	r0, 800fda2 <rcutils_allocator_is_valid+0x1a>
 800fd8a:	6803      	ldr	r3, [r0, #0]
 800fd8c:	b143      	cbz	r3, 800fda0 <rcutils_allocator_is_valid+0x18>
 800fd8e:	6843      	ldr	r3, [r0, #4]
 800fd90:	b133      	cbz	r3, 800fda0 <rcutils_allocator_is_valid+0x18>
 800fd92:	68c3      	ldr	r3, [r0, #12]
 800fd94:	b123      	cbz	r3, 800fda0 <rcutils_allocator_is_valid+0x18>
 800fd96:	6880      	ldr	r0, [r0, #8]
 800fd98:	3800      	subs	r0, #0
 800fd9a:	bf18      	it	ne
 800fd9c:	2001      	movne	r0, #1
 800fd9e:	4770      	bx	lr
 800fda0:	4618      	mov	r0, r3
 800fda2:	4770      	bx	lr

0800fda4 <rcutils_get_error_string>:
 800fda4:	4b06      	ldr	r3, [pc, #24]	@ (800fdc0 <rcutils_get_error_string+0x1c>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	b13b      	cbz	r3, 800fdba <rcutils_get_error_string+0x16>
 800fdaa:	4b06      	ldr	r3, [pc, #24]	@ (800fdc4 <rcutils_get_error_string+0x20>)
 800fdac:	781a      	ldrb	r2, [r3, #0]
 800fdae:	b90a      	cbnz	r2, 800fdb4 <rcutils_get_error_string+0x10>
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	701a      	strb	r2, [r3, #0]
 800fdb4:	4b04      	ldr	r3, [pc, #16]	@ (800fdc8 <rcutils_get_error_string+0x24>)
 800fdb6:	7818      	ldrb	r0, [r3, #0]
 800fdb8:	4770      	bx	lr
 800fdba:	4b04      	ldr	r3, [pc, #16]	@ (800fdcc <rcutils_get_error_string+0x28>)
 800fdbc:	7818      	ldrb	r0, [r3, #0]
 800fdbe:	4770      	bx	lr
 800fdc0:	2400eed8 	.word	0x2400eed8
 800fdc4:	2400eef1 	.word	0x2400eef1
 800fdc8:	2400eef0 	.word	0x2400eef0
 800fdcc:	0801e23c 	.word	0x0801e23c

0800fdd0 <rcutils_reset_error>:
 800fdd0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800fdf0 <rcutils_reset_error+0x20>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	4a08      	ldr	r2, [pc, #32]	@ (800fdf8 <rcutils_reset_error+0x28>)
 800fdd8:	4808      	ldr	r0, [pc, #32]	@ (800fdfc <rcutils_reset_error+0x2c>)
 800fdda:	8013      	strh	r3, [r2, #0]
 800fddc:	4908      	ldr	r1, [pc, #32]	@ (800fe00 <rcutils_reset_error+0x30>)
 800fdde:	7003      	strb	r3, [r0, #0]
 800fde0:	700b      	strb	r3, [r1, #0]
 800fde2:	ed82 7b02 	vstr	d7, [r2, #8]
 800fde6:	4a07      	ldr	r2, [pc, #28]	@ (800fe04 <rcutils_reset_error+0x34>)
 800fde8:	7013      	strb	r3, [r2, #0]
 800fdea:	4770      	bx	lr
 800fdec:	f3af 8000 	nop.w
	...
 800fdf8:	2400eee0 	.word	0x2400eee0
 800fdfc:	2400eef1 	.word	0x2400eef1
 800fe00:	2400eef0 	.word	0x2400eef0
 800fe04:	2400eed8 	.word	0x2400eed8

0800fe08 <rcutils_system_time_now>:
 800fe08:	b300      	cbz	r0, 800fe4c <rcutils_system_time_now+0x44>
 800fe0a:	b570      	push	{r4, r5, r6, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	4604      	mov	r4, r0
 800fe10:	2001      	movs	r0, #1
 800fe12:	4669      	mov	r1, sp
 800fe14:	f7f1 febc 	bl	8001b90 <clock_gettime>
 800fe18:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe1c:	2900      	cmp	r1, #0
 800fe1e:	db12      	blt.n	800fe46 <rcutils_system_time_now+0x3e>
 800fe20:	ea53 0201 	orrs.w	r2, r3, r1
 800fe24:	9d02      	ldr	r5, [sp, #8]
 800fe26:	d101      	bne.n	800fe2c <rcutils_system_time_now+0x24>
 800fe28:	2d00      	cmp	r5, #0
 800fe2a:	db0c      	blt.n	800fe46 <rcutils_system_time_now+0x3e>
 800fe2c:	4e08      	ldr	r6, [pc, #32]	@ (800fe50 <rcutils_system_time_now+0x48>)
 800fe2e:	2000      	movs	r0, #0
 800fe30:	fba3 3206 	umull	r3, r2, r3, r6
 800fe34:	195b      	adds	r3, r3, r5
 800fe36:	fb06 2201 	mla	r2, r6, r1, r2
 800fe3a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fe3e:	e9c4 3200 	strd	r3, r2, [r4]
 800fe42:	b004      	add	sp, #16
 800fe44:	bd70      	pop	{r4, r5, r6, pc}
 800fe46:	2002      	movs	r0, #2
 800fe48:	b004      	add	sp, #16
 800fe4a:	bd70      	pop	{r4, r5, r6, pc}
 800fe4c:	200b      	movs	r0, #11
 800fe4e:	4770      	bx	lr
 800fe50:	3b9aca00 	.word	0x3b9aca00

0800fe54 <rcutils_steady_time_now>:
 800fe54:	b300      	cbz	r0, 800fe98 <rcutils_steady_time_now+0x44>
 800fe56:	b570      	push	{r4, r5, r6, lr}
 800fe58:	b084      	sub	sp, #16
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	4669      	mov	r1, sp
 800fe60:	f7f1 fe96 	bl	8001b90 <clock_gettime>
 800fe64:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe68:	2900      	cmp	r1, #0
 800fe6a:	db12      	blt.n	800fe92 <rcutils_steady_time_now+0x3e>
 800fe6c:	ea53 0201 	orrs.w	r2, r3, r1
 800fe70:	9d02      	ldr	r5, [sp, #8]
 800fe72:	d101      	bne.n	800fe78 <rcutils_steady_time_now+0x24>
 800fe74:	2d00      	cmp	r5, #0
 800fe76:	db0c      	blt.n	800fe92 <rcutils_steady_time_now+0x3e>
 800fe78:	4e08      	ldr	r6, [pc, #32]	@ (800fe9c <rcutils_steady_time_now+0x48>)
 800fe7a:	2000      	movs	r0, #0
 800fe7c:	fba3 3206 	umull	r3, r2, r3, r6
 800fe80:	195b      	adds	r3, r3, r5
 800fe82:	fb06 2201 	mla	r2, r6, r1, r2
 800fe86:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fe8a:	e9c4 3200 	strd	r3, r2, [r4]
 800fe8e:	b004      	add	sp, #16
 800fe90:	bd70      	pop	{r4, r5, r6, pc}
 800fe92:	2002      	movs	r0, #2
 800fe94:	b004      	add	sp, #16
 800fe96:	bd70      	pop	{r4, r5, r6, pc}
 800fe98:	200b      	movs	r0, #11
 800fe9a:	4770      	bx	lr
 800fe9c:	3b9aca00 	.word	0x3b9aca00

0800fea0 <rmw_get_zero_initialized_init_options>:
 800fea0:	b510      	push	{r4, lr}
 800fea2:	4604      	mov	r4, r0
 800fea4:	2238      	movs	r2, #56	@ 0x38
 800fea6:	2100      	movs	r1, #0
 800fea8:	f00c ffde 	bl	801ce68 <memset>
 800feac:	f104 0010 	add.w	r0, r4, #16
 800feb0:	f000 f80a 	bl	800fec8 <rmw_get_default_security_options>
 800feb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800feb8:	4620      	mov	r0, r4
 800feba:	60e3      	str	r3, [r4, #12]
 800febc:	bd10      	pop	{r4, pc}
 800febe:	bf00      	nop

0800fec0 <rmw_get_default_publisher_options>:
 800fec0:	2200      	movs	r2, #0
 800fec2:	6002      	str	r2, [r0, #0]
 800fec4:	7102      	strb	r2, [r0, #4]
 800fec6:	4770      	bx	lr

0800fec8 <rmw_get_default_security_options>:
 800fec8:	2200      	movs	r2, #0
 800feca:	7002      	strb	r2, [r0, #0]
 800fecc:	6042      	str	r2, [r0, #4]
 800fece:	4770      	bx	lr

0800fed0 <rmw_uros_set_custom_transport>:
 800fed0:	b470      	push	{r4, r5, r6}
 800fed2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fed6:	b162      	cbz	r2, 800fef2 <rmw_uros_set_custom_transport+0x22>
 800fed8:	b15b      	cbz	r3, 800fef2 <rmw_uros_set_custom_transport+0x22>
 800feda:	b155      	cbz	r5, 800fef2 <rmw_uros_set_custom_transport+0x22>
 800fedc:	b14e      	cbz	r6, 800fef2 <rmw_uros_set_custom_transport+0x22>
 800fede:	4c06      	ldr	r4, [pc, #24]	@ (800fef8 <rmw_uros_set_custom_transport+0x28>)
 800fee0:	7020      	strb	r0, [r4, #0]
 800fee2:	2000      	movs	r0, #0
 800fee4:	6166      	str	r6, [r4, #20]
 800fee6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800feea:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800feee:	bc70      	pop	{r4, r5, r6}
 800fef0:	4770      	bx	lr
 800fef2:	200b      	movs	r0, #11
 800fef4:	bc70      	pop	{r4, r5, r6}
 800fef6:	4770      	bx	lr
 800fef8:	2400eef4 	.word	0x2400eef4

0800fefc <rmw_init_options_init>:
 800fefc:	b084      	sub	sp, #16
 800fefe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff00:	b083      	sub	sp, #12
 800ff02:	ad09      	add	r5, sp, #36	@ 0x24
 800ff04:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ff08:	b130      	cbz	r0, 800ff18 <rmw_init_options_init+0x1c>
 800ff0a:	4604      	mov	r4, r0
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	f7ff ff3b 	bl	800fd88 <rcutils_allocator_is_valid>
 800ff12:	b108      	cbz	r0, 800ff18 <rmw_init_options_init+0x1c>
 800ff14:	68a6      	ldr	r6, [r4, #8]
 800ff16:	b12e      	cbz	r6, 800ff24 <rmw_init_options_init+0x28>
 800ff18:	200b      	movs	r0, #11
 800ff1a:	b003      	add	sp, #12
 800ff1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff20:	b004      	add	sp, #16
 800ff22:	4770      	bx	lr
 800ff24:	2200      	movs	r2, #0
 800ff26:	2300      	movs	r3, #0
 800ff28:	f104 0c20 	add.w	ip, r4, #32
 800ff2c:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800ffc8 <rmw_init_options_init+0xcc>
 800ff30:	466f      	mov	r7, sp
 800ff32:	e9c4 2300 	strd	r2, r3, [r4]
 800ff36:	4b20      	ldr	r3, [pc, #128]	@ (800ffb8 <rmw_init_options_init+0xbc>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	60a3      	str	r3, [r4, #8]
 800ff3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff42:	682b      	ldr	r3, [r5, #0]
 800ff44:	4638      	mov	r0, r7
 800ff46:	f8cc 3000 	str.w	r3, [ip]
 800ff4a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ff4e:	60e6      	str	r6, [r4, #12]
 800ff50:	f7ff ffba 	bl	800fec8 <rmw_get_default_security_options>
 800ff54:	f104 0310 	add.w	r3, r4, #16
 800ff58:	2203      	movs	r2, #3
 800ff5a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ff5e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff62:	4816      	ldr	r0, [pc, #88]	@ (800ffbc <rmw_init_options_init+0xc0>)
 800ff64:	4916      	ldr	r1, [pc, #88]	@ (800ffc0 <rmw_init_options_init+0xc4>)
 800ff66:	7626      	strb	r6, [r4, #24]
 800ff68:	f000 fed2 	bl	8010d10 <rmw_uxrce_init_init_options_impl_memory>
 800ff6c:	4813      	ldr	r0, [pc, #76]	@ (800ffbc <rmw_init_options_init+0xc0>)
 800ff6e:	f00a fbf1 	bl	801a754 <get_memory>
 800ff72:	b1f0      	cbz	r0, 800ffb2 <rmw_init_options_init+0xb6>
 800ff74:	4a13      	ldr	r2, [pc, #76]	@ (800ffc4 <rmw_init_options_init+0xc8>)
 800ff76:	6883      	ldr	r3, [r0, #8]
 800ff78:	6851      	ldr	r1, [r2, #4]
 800ff7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff7c:	7810      	ldrb	r0, [r2, #0]
 800ff7e:	6159      	str	r1, [r3, #20]
 800ff80:	68d1      	ldr	r1, [r2, #12]
 800ff82:	7418      	strb	r0, [r3, #16]
 800ff84:	61d9      	str	r1, [r3, #28]
 800ff86:	6911      	ldr	r1, [r2, #16]
 800ff88:	6219      	str	r1, [r3, #32]
 800ff8a:	6951      	ldr	r1, [r2, #20]
 800ff8c:	6892      	ldr	r2, [r2, #8]
 800ff8e:	6259      	str	r1, [r3, #36]	@ 0x24
 800ff90:	619a      	str	r2, [r3, #24]
 800ff92:	f005 fe15 	bl	8015bc0 <uxr_nanos>
 800ff96:	f00c fbb1 	bl	801c6fc <srand>
 800ff9a:	f00c fbdd 	bl	801c758 <rand>
 800ff9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ffa0:	6298      	str	r0, [r3, #40]	@ 0x28
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	d0f9      	beq.n	800ff9a <rmw_init_options_init+0x9e>
 800ffa6:	2000      	movs	r0, #0
 800ffa8:	b003      	add	sp, #12
 800ffaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffae:	b004      	add	sp, #16
 800ffb0:	4770      	bx	lr
 800ffb2:	2001      	movs	r0, #1
 800ffb4:	e7b1      	b.n	800ff1a <rmw_init_options_init+0x1e>
 800ffb6:	bf00      	nop
 800ffb8:	0801eb04 	.word	0x0801eb04
 800ffbc:	2401380c 	.word	0x2401380c
 800ffc0:	2400f0a8 	.word	0x2400f0a8
 800ffc4:	2400eef4 	.word	0x2400eef4
 800ffc8:	0801deec 	.word	0x0801deec

0800ffcc <rmw_init_options_copy>:
 800ffcc:	2800      	cmp	r0, #0
 800ffce:	d047      	beq.n	8010060 <rmw_init_options_copy+0x94>
 800ffd0:	b570      	push	{r4, r5, r6, lr}
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	b149      	cbz	r1, 800ffea <rmw_init_options_copy+0x1e>
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	6880      	ldr	r0, [r0, #8]
 800ffda:	b120      	cbz	r0, 800ffe6 <rmw_init_options_copy+0x1a>
 800ffdc:	4b22      	ldr	r3, [pc, #136]	@ (8010068 <rmw_init_options_copy+0x9c>)
 800ffde:	6819      	ldr	r1, [r3, #0]
 800ffe0:	f7f0 f97e 	bl	80002e0 <strcmp>
 800ffe4:	bba8      	cbnz	r0, 8010052 <rmw_init_options_copy+0x86>
 800ffe6:	68ab      	ldr	r3, [r5, #8]
 800ffe8:	b11b      	cbz	r3, 800fff2 <rmw_init_options_copy+0x26>
 800ffea:	f04f 0c0b 	mov.w	ip, #11
 800ffee:	4660      	mov	r0, ip
 800fff0:	bd70      	pop	{r4, r5, r6, pc}
 800fff2:	4623      	mov	r3, r4
 800fff4:	462a      	mov	r2, r5
 800fff6:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800fffa:	f8d3 e000 	ldr.w	lr, [r3]
 800fffe:	3310      	adds	r3, #16
 8010000:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8010004:	3210      	adds	r2, #16
 8010006:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801000a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801000e:	42b3      	cmp	r3, r6
 8010010:	f842 ec10 	str.w	lr, [r2, #-16]
 8010014:	f842 cc0c 	str.w	ip, [r2, #-12]
 8010018:	f842 0c08 	str.w	r0, [r2, #-8]
 801001c:	f842 1c04 	str.w	r1, [r2, #-4]
 8010020:	d1eb      	bne.n	800fffa <rmw_init_options_copy+0x2e>
 8010022:	6819      	ldr	r1, [r3, #0]
 8010024:	685b      	ldr	r3, [r3, #4]
 8010026:	4811      	ldr	r0, [pc, #68]	@ (801006c <rmw_init_options_copy+0xa0>)
 8010028:	6011      	str	r1, [r2, #0]
 801002a:	6053      	str	r3, [r2, #4]
 801002c:	f00a fb92 	bl	801a754 <get_memory>
 8010030:	b198      	cbz	r0, 801005a <rmw_init_options_copy+0x8e>
 8010032:	6883      	ldr	r3, [r0, #8]
 8010034:	f04f 0c00 	mov.w	ip, #0
 8010038:	636b      	str	r3, [r5, #52]	@ 0x34
 801003a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801003c:	f103 0410 	add.w	r4, r3, #16
 8010040:	3510      	adds	r5, #16
 8010042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010046:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801004a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801004e:	4660      	mov	r0, ip
 8010050:	bd70      	pop	{r4, r5, r6, pc}
 8010052:	f04f 0c0c 	mov.w	ip, #12
 8010056:	4660      	mov	r0, ip
 8010058:	bd70      	pop	{r4, r5, r6, pc}
 801005a:	f04f 0c01 	mov.w	ip, #1
 801005e:	e7c6      	b.n	800ffee <rmw_init_options_copy+0x22>
 8010060:	f04f 0c0b 	mov.w	ip, #11
 8010064:	4660      	mov	r0, ip
 8010066:	4770      	bx	lr
 8010068:	0801eb04 	.word	0x0801eb04
 801006c:	2401380c 	.word	0x2401380c

08010070 <rmw_init_options_fini>:
 8010070:	b510      	push	{r4, lr}
 8010072:	b08e      	sub	sp, #56	@ 0x38
 8010074:	b388      	cbz	r0, 80100da <rmw_init_options_fini+0x6a>
 8010076:	4604      	mov	r4, r0
 8010078:	3020      	adds	r0, #32
 801007a:	f7ff fe85 	bl	800fd88 <rcutils_allocator_is_valid>
 801007e:	b360      	cbz	r0, 80100da <rmw_init_options_fini+0x6a>
 8010080:	68a0      	ldr	r0, [r4, #8]
 8010082:	b120      	cbz	r0, 801008e <rmw_init_options_fini+0x1e>
 8010084:	4b1a      	ldr	r3, [pc, #104]	@ (80100f0 <rmw_init_options_fini+0x80>)
 8010086:	6819      	ldr	r1, [r3, #0]
 8010088:	f7f0 f92a 	bl	80002e0 <strcmp>
 801008c:	bb68      	cbnz	r0, 80100ea <rmw_init_options_fini+0x7a>
 801008e:	4b19      	ldr	r3, [pc, #100]	@ (80100f4 <rmw_init_options_fini+0x84>)
 8010090:	6819      	ldr	r1, [r3, #0]
 8010092:	b331      	cbz	r1, 80100e2 <rmw_init_options_fini+0x72>
 8010094:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010096:	e001      	b.n	801009c <rmw_init_options_fini+0x2c>
 8010098:	6849      	ldr	r1, [r1, #4]
 801009a:	b311      	cbz	r1, 80100e2 <rmw_init_options_fini+0x72>
 801009c:	688b      	ldr	r3, [r1, #8]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d1fa      	bne.n	8010098 <rmw_init_options_fini+0x28>
 80100a2:	4814      	ldr	r0, [pc, #80]	@ (80100f4 <rmw_init_options_fini+0x84>)
 80100a4:	f00a fb66 	bl	801a774 <put_memory>
 80100a8:	4668      	mov	r0, sp
 80100aa:	f7ff fef9 	bl	800fea0 <rmw_get_zero_initialized_init_options>
 80100ae:	46ee      	mov	lr, sp
 80100b0:	46a4      	mov	ip, r4
 80100b2:	2400      	movs	r4, #0
 80100b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80100d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80100d4:	4620      	mov	r0, r4
 80100d6:	b00e      	add	sp, #56	@ 0x38
 80100d8:	bd10      	pop	{r4, pc}
 80100da:	240b      	movs	r4, #11
 80100dc:	4620      	mov	r0, r4
 80100de:	b00e      	add	sp, #56	@ 0x38
 80100e0:	bd10      	pop	{r4, pc}
 80100e2:	2401      	movs	r4, #1
 80100e4:	4620      	mov	r0, r4
 80100e6:	b00e      	add	sp, #56	@ 0x38
 80100e8:	bd10      	pop	{r4, pc}
 80100ea:	240c      	movs	r4, #12
 80100ec:	e7f2      	b.n	80100d4 <rmw_init_options_fini+0x64>
 80100ee:	bf00      	nop
 80100f0:	0801eb04 	.word	0x0801eb04
 80100f4:	2401380c 	.word	0x2401380c

080100f8 <rmw_init>:
 80100f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80100fc:	b083      	sub	sp, #12
 80100fe:	2800      	cmp	r0, #0
 8010100:	f000 80d3 	beq.w	80102aa <rmw_init+0x1b2>
 8010104:	460e      	mov	r6, r1
 8010106:	2900      	cmp	r1, #0
 8010108:	f000 80cf 	beq.w	80102aa <rmw_init+0x1b2>
 801010c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801010e:	4605      	mov	r5, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 80ca 	beq.w	80102aa <rmw_init+0x1b2>
 8010116:	4b78      	ldr	r3, [pc, #480]	@ (80102f8 <rmw_init+0x200>)
 8010118:	6880      	ldr	r0, [r0, #8]
 801011a:	681f      	ldr	r7, [r3, #0]
 801011c:	b128      	cbz	r0, 801012a <rmw_init+0x32>
 801011e:	4639      	mov	r1, r7
 8010120:	f7f0 f8de 	bl	80002e0 <strcmp>
 8010124:	2800      	cmp	r0, #0
 8010126:	f040 80ca 	bne.w	80102be <rmw_init+0x1c6>
 801012a:	4c74      	ldr	r4, [pc, #464]	@ (80102fc <rmw_init+0x204>)
 801012c:	f04f 0800 	mov.w	r8, #0
 8010130:	4973      	ldr	r1, [pc, #460]	@ (8010300 <rmw_init+0x208>)
 8010132:	4874      	ldr	r0, [pc, #464]	@ (8010304 <rmw_init+0x20c>)
 8010134:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010138:	60b7      	str	r7, [r6, #8]
 801013a:	e9c6 2300 	strd	r2, r3, [r6]
 801013e:	68eb      	ldr	r3, [r5, #12]
 8010140:	2201      	movs	r2, #1
 8010142:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010144:	f000 fd84 	bl	8010c50 <rmw_uxrce_init_session_memory>
 8010148:	4620      	mov	r0, r4
 801014a:	2204      	movs	r2, #4
 801014c:	496e      	ldr	r1, [pc, #440]	@ (8010308 <rmw_init+0x210>)
 801014e:	f000 fdbf 	bl	8010cd0 <rmw_uxrce_init_static_input_buffer_memory>
 8010152:	486c      	ldr	r0, [pc, #432]	@ (8010304 <rmw_init+0x20c>)
 8010154:	f884 800d 	strb.w	r8, [r4, #13]
 8010158:	f00a fafc 	bl	801a754 <get_memory>
 801015c:	2800      	cmp	r0, #0
 801015e:	f000 80a9 	beq.w	80102b4 <rmw_init+0x1bc>
 8010162:	6884      	ldr	r4, [r0, #8]
 8010164:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010166:	f104 0910 	add.w	r9, r4, #16
 801016a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801016c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010170:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010174:	9101      	str	r1, [sp, #4]
 8010176:	4661      	mov	r1, ip
 8010178:	6a00      	ldr	r0, [r0, #32]
 801017a:	9000      	str	r0, [sp, #0]
 801017c:	4648      	mov	r0, r9
 801017e:	f003 fcad 	bl	8013adc <uxr_set_custom_transport_callbacks>
 8010182:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010186:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801018a:	4960      	ldr	r1, [pc, #384]	@ (801030c <rmw_init+0x214>)
 801018c:	4860      	ldr	r0, [pc, #384]	@ (8010310 <rmw_init+0x218>)
 801018e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8010192:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8010196:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801019a:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801019e:	2201      	movs	r2, #1
 80101a0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80101a4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80101a8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80101ac:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80101b0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80101b2:	f000 fd2d 	bl	8010c10 <rmw_uxrce_init_node_memory>
 80101b6:	2205      	movs	r2, #5
 80101b8:	4956      	ldr	r1, [pc, #344]	@ (8010314 <rmw_init+0x21c>)
 80101ba:	4857      	ldr	r0, [pc, #348]	@ (8010318 <rmw_init+0x220>)
 80101bc:	f000 fd08 	bl	8010bd0 <rmw_uxrce_init_subscription_memory>
 80101c0:	220a      	movs	r2, #10
 80101c2:	4956      	ldr	r1, [pc, #344]	@ (801031c <rmw_init+0x224>)
 80101c4:	4856      	ldr	r0, [pc, #344]	@ (8010320 <rmw_init+0x228>)
 80101c6:	f000 fce3 	bl	8010b90 <rmw_uxrce_init_publisher_memory>
 80101ca:	2201      	movs	r2, #1
 80101cc:	4955      	ldr	r1, [pc, #340]	@ (8010324 <rmw_init+0x22c>)
 80101ce:	4856      	ldr	r0, [pc, #344]	@ (8010328 <rmw_init+0x230>)
 80101d0:	f000 fc9e 	bl	8010b10 <rmw_uxrce_init_service_memory>
 80101d4:	2201      	movs	r2, #1
 80101d6:	4955      	ldr	r1, [pc, #340]	@ (801032c <rmw_init+0x234>)
 80101d8:	4855      	ldr	r0, [pc, #340]	@ (8010330 <rmw_init+0x238>)
 80101da:	f000 fcb9 	bl	8010b50 <rmw_uxrce_init_client_memory>
 80101de:	220f      	movs	r2, #15
 80101e0:	4954      	ldr	r1, [pc, #336]	@ (8010334 <rmw_init+0x23c>)
 80101e2:	4855      	ldr	r0, [pc, #340]	@ (8010338 <rmw_init+0x240>)
 80101e4:	f000 fd54 	bl	8010c90 <rmw_uxrce_init_topic_memory>
 80101e8:	2203      	movs	r2, #3
 80101ea:	4954      	ldr	r1, [pc, #336]	@ (801033c <rmw_init+0x244>)
 80101ec:	4854      	ldr	r0, [pc, #336]	@ (8010340 <rmw_init+0x248>)
 80101ee:	f000 fd8f 	bl	8010d10 <rmw_uxrce_init_init_options_impl_memory>
 80101f2:	2204      	movs	r2, #4
 80101f4:	4953      	ldr	r1, [pc, #332]	@ (8010344 <rmw_init+0x24c>)
 80101f6:	4854      	ldr	r0, [pc, #336]	@ (8010348 <rmw_init+0x250>)
 80101f8:	f000 fdaa 	bl	8010d50 <rmw_uxrce_init_wait_set_memory>
 80101fc:	4953      	ldr	r1, [pc, #332]	@ (801034c <rmw_init+0x254>)
 80101fe:	4854      	ldr	r0, [pc, #336]	@ (8010350 <rmw_init+0x258>)
 8010200:	2204      	movs	r2, #4
 8010202:	f000 fdc5 	bl	8010d90 <rmw_uxrce_init_guard_condition_memory>
 8010206:	4642      	mov	r2, r8
 8010208:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801020a:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801020c:	f000 fc48 	bl	8010aa0 <rmw_uxrce_transport_init>
 8010210:	4607      	mov	r7, r0
 8010212:	2800      	cmp	r0, #0
 8010214:	d158      	bne.n	80102c8 <rmw_init+0x1d0>
 8010216:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010218:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801021c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010222:	4628      	mov	r0, r5
 8010224:	f003 fe50 	bl	8013ec8 <uxr_init_session>
 8010228:	4622      	mov	r2, r4
 801022a:	494a      	ldr	r1, [pc, #296]	@ (8010354 <rmw_init+0x25c>)
 801022c:	4628      	mov	r0, r5
 801022e:	f003 fe6f 	bl	8013f10 <uxr_set_topic_callback>
 8010232:	463a      	mov	r2, r7
 8010234:	4948      	ldr	r1, [pc, #288]	@ (8010358 <rmw_init+0x260>)
 8010236:	4628      	mov	r0, r5
 8010238:	f003 fe66 	bl	8013f08 <uxr_set_status_callback>
 801023c:	463a      	mov	r2, r7
 801023e:	4947      	ldr	r1, [pc, #284]	@ (801035c <rmw_init+0x264>)
 8010240:	4628      	mov	r0, r5
 8010242:	f003 fe69 	bl	8013f18 <uxr_set_request_callback>
 8010246:	463a      	mov	r2, r7
 8010248:	4945      	ldr	r1, [pc, #276]	@ (8010360 <rmw_init+0x268>)
 801024a:	4628      	mov	r0, r5
 801024c:	f003 fe68 	bl	8013f20 <uxr_set_reply_callback>
 8010250:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010254:	2304      	movs	r3, #4
 8010256:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801025a:	0092      	lsls	r2, r2, #2
 801025c:	4628      	mov	r0, r5
 801025e:	f003 fe9f 	bl	8013fa0 <uxr_create_input_reliable_stream>
 8010262:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010266:	2304      	movs	r3, #4
 8010268:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801026c:	0092      	lsls	r2, r2, #2
 801026e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010272:	4628      	mov	r0, r5
 8010274:	f003 fe6a 	bl	8013f4c <uxr_create_output_reliable_stream>
 8010278:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801027c:	4628      	mov	r0, r5
 801027e:	f003 fe89 	bl	8013f94 <uxr_create_input_best_effort_stream>
 8010282:	f241 3194 	movw	r1, #5012	@ 0x1394
 8010286:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801028a:	4628      	mov	r0, r5
 801028c:	4421      	add	r1, r4
 801028e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010292:	f003 fe49 	bl	8013f28 <uxr_create_output_best_effort_stream>
 8010296:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801029a:	4628      	mov	r0, r5
 801029c:	f004 fc28 	bl	8014af0 <uxr_create_session>
 80102a0:	b1f8      	cbz	r0, 80102e2 <rmw_init+0x1ea>
 80102a2:	4638      	mov	r0, r7
 80102a4:	b003      	add	sp, #12
 80102a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102aa:	270b      	movs	r7, #11
 80102ac:	4638      	mov	r0, r7
 80102ae:	b003      	add	sp, #12
 80102b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102b4:	2701      	movs	r7, #1
 80102b6:	4638      	mov	r0, r7
 80102b8:	b003      	add	sp, #12
 80102ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102be:	270c      	movs	r7, #12
 80102c0:	4638      	mov	r0, r7
 80102c2:	b003      	add	sp, #12
 80102c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102c8:	4648      	mov	r0, r9
 80102ca:	f003 fc45 	bl	8013b58 <uxr_close_custom_transport>
 80102ce:	4621      	mov	r1, r4
 80102d0:	480c      	ldr	r0, [pc, #48]	@ (8010304 <rmw_init+0x20c>)
 80102d2:	f00a fa4f 	bl	801a774 <put_memory>
 80102d6:	4638      	mov	r0, r7
 80102d8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80102dc:	b003      	add	sp, #12
 80102de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e2:	4648      	mov	r0, r9
 80102e4:	f003 fc38 	bl	8013b58 <uxr_close_custom_transport>
 80102e8:	4621      	mov	r1, r4
 80102ea:	4806      	ldr	r0, [pc, #24]	@ (8010304 <rmw_init+0x20c>)
 80102ec:	f00a fa42 	bl	801a774 <put_memory>
 80102f0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80102f2:	2701      	movs	r7, #1
 80102f4:	e7d5      	b.n	80102a2 <rmw_init+0x1aa>
 80102f6:	bf00      	nop
 80102f8:	0801eb04 	.word	0x0801eb04
 80102fc:	2401385c 	.word	0x2401385c
 8010300:	2400fb08 	.word	0x2400fb08
 8010304:	2401384c 	.word	0x2401384c
 8010308:	240110b0 	.word	0x240110b0
 801030c:	2400f12c 	.word	0x2400f12c
 8010310:	2401381c 	.word	0x2401381c
 8010314:	240131b0 	.word	0x240131b0
 8010318:	2401386c 	.word	0x2401386c
 801031c:	2400f1d0 	.word	0x2400f1d0
 8010320:	2401382c 	.word	0x2401382c
 8010324:	2400fa40 	.word	0x2400fa40
 8010328:	2401383c 	.word	0x2401383c
 801032c:	2400ef60 	.word	0x2400ef60
 8010330:	2400ef4c 	.word	0x2400ef4c
 8010334:	240135e8 	.word	0x240135e8
 8010338:	2401387c 	.word	0x2401387c
 801033c:	2400f0a8 	.word	0x2400f0a8
 8010340:	2401380c 	.word	0x2401380c
 8010344:	2401378c 	.word	0x2401378c
 8010348:	2401388c 	.word	0x2401388c
 801034c:	2400f028 	.word	0x2400f028
 8010350:	240137fc 	.word	0x240137fc
 8010354:	0801a58d 	.word	0x0801a58d
 8010358:	0801a585 	.word	0x0801a585
 801035c:	0801a625 	.word	0x0801a625
 8010360:	0801a6c1 	.word	0x0801a6c1

08010364 <rmw_context_fini>:
 8010364:	4b17      	ldr	r3, [pc, #92]	@ (80103c4 <rmw_context_fini+0x60>)
 8010366:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010368:	b570      	push	{r4, r5, r6, lr}
 801036a:	681c      	ldr	r4, [r3, #0]
 801036c:	4605      	mov	r5, r0
 801036e:	b334      	cbz	r4, 80103be <rmw_context_fini+0x5a>
 8010370:	2600      	movs	r6, #0
 8010372:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010376:	6902      	ldr	r2, [r0, #16]
 8010378:	428a      	cmp	r2, r1
 801037a:	d018      	beq.n	80103ae <rmw_context_fini+0x4a>
 801037c:	2c00      	cmp	r4, #0
 801037e:	d1f8      	bne.n	8010372 <rmw_context_fini+0xe>
 8010380:	b189      	cbz	r1, 80103a6 <rmw_context_fini+0x42>
 8010382:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8010386:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801038a:	789b      	ldrb	r3, [r3, #2]
 801038c:	2b01      	cmp	r3, #1
 801038e:	bf14      	ite	ne
 8010390:	210a      	movne	r1, #10
 8010392:	2100      	moveq	r1, #0
 8010394:	f004 fb84 	bl	8014aa0 <uxr_delete_session_retries>
 8010398:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801039a:	f000 fd19 	bl	8010dd0 <rmw_uxrce_fini_session_memory>
 801039e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80103a0:	3010      	adds	r0, #16
 80103a2:	f003 fbd9 	bl	8013b58 <uxr_close_custom_transport>
 80103a6:	2300      	movs	r3, #0
 80103a8:	4630      	mov	r0, r6
 80103aa:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80103ac:	bd70      	pop	{r4, r5, r6, pc}
 80103ae:	3018      	adds	r0, #24
 80103b0:	f000 f89c 	bl	80104ec <rmw_destroy_node>
 80103b4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80103b6:	4606      	mov	r6, r0
 80103b8:	2c00      	cmp	r4, #0
 80103ba:	d1da      	bne.n	8010372 <rmw_context_fini+0xe>
 80103bc:	e7e0      	b.n	8010380 <rmw_context_fini+0x1c>
 80103be:	4626      	mov	r6, r4
 80103c0:	e7de      	b.n	8010380 <rmw_context_fini+0x1c>
 80103c2:	bf00      	nop
 80103c4:	2401381c 	.word	0x2401381c

080103c8 <create_node>:
 80103c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103cc:	b083      	sub	sp, #12
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d064      	beq.n	801049c <create_node+0xd4>
 80103d2:	4606      	mov	r6, r0
 80103d4:	4838      	ldr	r0, [pc, #224]	@ (80104b8 <create_node+0xf0>)
 80103d6:	460f      	mov	r7, r1
 80103d8:	4690      	mov	r8, r2
 80103da:	461d      	mov	r5, r3
 80103dc:	f00a f9ba 	bl	801a754 <get_memory>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d05b      	beq.n	801049c <create_node+0xd4>
 80103e4:	6884      	ldr	r4, [r0, #8]
 80103e6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80103e8:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80103ec:	f104 0518 	add.w	r5, r4, #24
 80103f0:	6123      	str	r3, [r4, #16]
 80103f2:	f00a fa17 	bl	801a824 <rmw_get_implementation_identifier>
 80103f6:	f8c4 9020 	str.w	r9, [r4, #32]
 80103fa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80103fe:	4630      	mov	r0, r6
 8010400:	f7ef ff78 	bl	80002f4 <strlen>
 8010404:	1c42      	adds	r2, r0, #1
 8010406:	2a3c      	cmp	r2, #60	@ 0x3c
 8010408:	d840      	bhi.n	801048c <create_node+0xc4>
 801040a:	4648      	mov	r0, r9
 801040c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8010410:	4631      	mov	r1, r6
 8010412:	f00c fdf2 	bl	801cffa <memcpy>
 8010416:	4638      	mov	r0, r7
 8010418:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801041c:	f7ef ff6a 	bl	80002f4 <strlen>
 8010420:	1c42      	adds	r2, r0, #1
 8010422:	2a3c      	cmp	r2, #60	@ 0x3c
 8010424:	d832      	bhi.n	801048c <create_node+0xc4>
 8010426:	4639      	mov	r1, r7
 8010428:	4648      	mov	r0, r9
 801042a:	f00c fde6 	bl	801cffa <memcpy>
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	2101      	movs	r1, #1
 8010432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010436:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801043a:	1842      	adds	r2, r0, r1
 801043c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010440:	f003 fb8e 	bl	8013b60 <uxr_object_id>
 8010444:	6160      	str	r0, [r4, #20]
 8010446:	783b      	ldrb	r3, [r7, #0]
 8010448:	2b2f      	cmp	r3, #47	@ 0x2f
 801044a:	d12c      	bne.n	80104a6 <create_node+0xde>
 801044c:	787b      	ldrb	r3, [r7, #1]
 801044e:	bb53      	cbnz	r3, 80104a6 <create_node+0xde>
 8010450:	4633      	mov	r3, r6
 8010452:	4a1a      	ldr	r2, [pc, #104]	@ (80104bc <create_node+0xf4>)
 8010454:	213c      	movs	r1, #60	@ 0x3c
 8010456:	481a      	ldr	r0, [pc, #104]	@ (80104c0 <create_node+0xf8>)
 8010458:	f00c fb98 	bl	801cb8c <sniprintf>
 801045c:	6920      	ldr	r0, [r4, #16]
 801045e:	2106      	movs	r1, #6
 8010460:	fa1f f388 	uxth.w	r3, r8
 8010464:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010468:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801046c:	9101      	str	r1, [sp, #4]
 801046e:	4914      	ldr	r1, [pc, #80]	@ (80104c0 <create_node+0xf8>)
 8010470:	9100      	str	r1, [sp, #0]
 8010472:	6811      	ldr	r1, [r2, #0]
 8010474:	6962      	ldr	r2, [r4, #20]
 8010476:	f003 f9a7 	bl	80137c8 <uxr_buffer_create_participant_bin>
 801047a:	4602      	mov	r2, r0
 801047c:	6920      	ldr	r0, [r4, #16]
 801047e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010482:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010486:	f000 fe25 	bl	80110d4 <run_xrce_session>
 801048a:	b918      	cbnz	r0, 8010494 <create_node+0xcc>
 801048c:	4628      	mov	r0, r5
 801048e:	2500      	movs	r5, #0
 8010490:	f000 fca4 	bl	8010ddc <rmw_uxrce_fini_node_memory>
 8010494:	4628      	mov	r0, r5
 8010496:	b003      	add	sp, #12
 8010498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801049c:	2500      	movs	r5, #0
 801049e:	4628      	mov	r0, r5
 80104a0:	b003      	add	sp, #12
 80104a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104a6:	463b      	mov	r3, r7
 80104a8:	4a06      	ldr	r2, [pc, #24]	@ (80104c4 <create_node+0xfc>)
 80104aa:	213c      	movs	r1, #60	@ 0x3c
 80104ac:	9600      	str	r6, [sp, #0]
 80104ae:	4804      	ldr	r0, [pc, #16]	@ (80104c0 <create_node+0xf8>)
 80104b0:	f00c fb6c 	bl	801cb8c <sniprintf>
 80104b4:	e7d2      	b.n	801045c <create_node+0x94>
 80104b6:	bf00      	nop
 80104b8:	2401381c 	.word	0x2401381c
 80104bc:	0801df2c 	.word	0x0801df2c
 80104c0:	2400ef10 	.word	0x2400ef10
 80104c4:	0801def0 	.word	0x0801def0

080104c8 <rmw_create_node>:
 80104c8:	468c      	mov	ip, r1
 80104ca:	4611      	mov	r1, r2
 80104cc:	f1bc 0f00 	cmp.w	ip, #0
 80104d0:	d00a      	beq.n	80104e8 <rmw_create_node+0x20>
 80104d2:	f89c 3000 	ldrb.w	r3, [ip]
 80104d6:	b13b      	cbz	r3, 80104e8 <rmw_create_node+0x20>
 80104d8:	b132      	cbz	r2, 80104e8 <rmw_create_node+0x20>
 80104da:	7813      	ldrb	r3, [r2, #0]
 80104dc:	b123      	cbz	r3, 80104e8 <rmw_create_node+0x20>
 80104de:	4603      	mov	r3, r0
 80104e0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80104e2:	4660      	mov	r0, ip
 80104e4:	f7ff bf70 	b.w	80103c8 <create_node>
 80104e8:	2000      	movs	r0, #0
 80104ea:	4770      	bx	lr

080104ec <rmw_destroy_node>:
 80104ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ee:	b328      	cbz	r0, 801053c <rmw_destroy_node+0x50>
 80104f0:	4607      	mov	r7, r0
 80104f2:	6800      	ldr	r0, [r0, #0]
 80104f4:	b120      	cbz	r0, 8010500 <rmw_destroy_node+0x14>
 80104f6:	4b37      	ldr	r3, [pc, #220]	@ (80105d4 <rmw_destroy_node+0xe8>)
 80104f8:	6819      	ldr	r1, [r3, #0]
 80104fa:	f7ef fef1 	bl	80002e0 <strcmp>
 80104fe:	b9e8      	cbnz	r0, 801053c <rmw_destroy_node+0x50>
 8010500:	687d      	ldr	r5, [r7, #4]
 8010502:	b1dd      	cbz	r5, 801053c <rmw_destroy_node+0x50>
 8010504:	4b34      	ldr	r3, [pc, #208]	@ (80105d8 <rmw_destroy_node+0xec>)
 8010506:	681c      	ldr	r4, [r3, #0]
 8010508:	2c00      	cmp	r4, #0
 801050a:	d060      	beq.n	80105ce <rmw_destroy_node+0xe2>
 801050c:	2600      	movs	r6, #0
 801050e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010512:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8010516:	429d      	cmp	r5, r3
 8010518:	d013      	beq.n	8010542 <rmw_destroy_node+0x56>
 801051a:	2c00      	cmp	r4, #0
 801051c:	d1f7      	bne.n	801050e <rmw_destroy_node+0x22>
 801051e:	4b2f      	ldr	r3, [pc, #188]	@ (80105dc <rmw_destroy_node+0xf0>)
 8010520:	681c      	ldr	r4, [r3, #0]
 8010522:	b1c4      	cbz	r4, 8010556 <rmw_destroy_node+0x6a>
 8010524:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010528:	6a0b      	ldr	r3, [r1, #32]
 801052a:	429d      	cmp	r5, r3
 801052c:	d1f9      	bne.n	8010522 <rmw_destroy_node+0x36>
 801052e:	317c      	adds	r1, #124	@ 0x7c
 8010530:	4638      	mov	r0, r7
 8010532:	f000 fa53 	bl	80109dc <rmw_destroy_subscription>
 8010536:	2801      	cmp	r0, #1
 8010538:	4606      	mov	r6, r0
 801053a:	d1f2      	bne.n	8010522 <rmw_destroy_node+0x36>
 801053c:	2601      	movs	r6, #1
 801053e:	4630      	mov	r0, r6
 8010540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010542:	3184      	adds	r1, #132	@ 0x84
 8010544:	4638      	mov	r0, r7
 8010546:	f000 f9b1 	bl	80108ac <rmw_destroy_publisher>
 801054a:	2801      	cmp	r0, #1
 801054c:	4606      	mov	r6, r0
 801054e:	d0f5      	beq.n	801053c <rmw_destroy_node+0x50>
 8010550:	2c00      	cmp	r4, #0
 8010552:	d1dc      	bne.n	801050e <rmw_destroy_node+0x22>
 8010554:	e7e3      	b.n	801051e <rmw_destroy_node+0x32>
 8010556:	4b22      	ldr	r3, [pc, #136]	@ (80105e0 <rmw_destroy_node+0xf4>)
 8010558:	681c      	ldr	r4, [r3, #0]
 801055a:	b16c      	cbz	r4, 8010578 <rmw_destroy_node+0x8c>
 801055c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010560:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010562:	429d      	cmp	r5, r3
 8010564:	d1f9      	bne.n	801055a <rmw_destroy_node+0x6e>
 8010566:	317c      	adds	r1, #124	@ 0x7c
 8010568:	4638      	mov	r0, r7
 801056a:	f000 f9f3 	bl	8010954 <rmw_destroy_service>
 801056e:	2801      	cmp	r0, #1
 8010570:	4606      	mov	r6, r0
 8010572:	d0e3      	beq.n	801053c <rmw_destroy_node+0x50>
 8010574:	2c00      	cmp	r4, #0
 8010576:	d1f1      	bne.n	801055c <rmw_destroy_node+0x70>
 8010578:	4b1a      	ldr	r3, [pc, #104]	@ (80105e4 <rmw_destroy_node+0xf8>)
 801057a:	681c      	ldr	r4, [r3, #0]
 801057c:	b16c      	cbz	r4, 801059a <rmw_destroy_node+0xae>
 801057e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010582:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010584:	429d      	cmp	r5, r3
 8010586:	d1f9      	bne.n	801057c <rmw_destroy_node+0x90>
 8010588:	317c      	adds	r1, #124	@ 0x7c
 801058a:	4638      	mov	r0, r7
 801058c:	f00a f906 	bl	801a79c <rmw_destroy_client>
 8010590:	2801      	cmp	r0, #1
 8010592:	4606      	mov	r6, r0
 8010594:	d0d2      	beq.n	801053c <rmw_destroy_node+0x50>
 8010596:	2c00      	cmp	r4, #0
 8010598:	d1f1      	bne.n	801057e <rmw_destroy_node+0x92>
 801059a:	6928      	ldr	r0, [r5, #16]
 801059c:	696a      	ldr	r2, [r5, #20]
 801059e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105a6:	6819      	ldr	r1, [r3, #0]
 80105a8:	f003 f8c2 	bl	8013730 <uxr_buffer_delete_entity>
 80105ac:	4602      	mov	r2, r0
 80105ae:	6928      	ldr	r0, [r5, #16]
 80105b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105b8:	f000 fd8c 	bl	80110d4 <run_xrce_session>
 80105bc:	4603      	mov	r3, r0
 80105be:	4638      	mov	r0, r7
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	bf08      	it	eq
 80105c4:	2602      	moveq	r6, #2
 80105c6:	f000 fc09 	bl	8010ddc <rmw_uxrce_fini_node_memory>
 80105ca:	4630      	mov	r0, r6
 80105cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ce:	4626      	mov	r6, r4
 80105d0:	e7a5      	b.n	801051e <rmw_destroy_node+0x32>
 80105d2:	bf00      	nop
 80105d4:	0801eb04 	.word	0x0801eb04
 80105d8:	2401382c 	.word	0x2401382c
 80105dc:	2401386c 	.word	0x2401386c
 80105e0:	2401383c 	.word	0x2401383c
 80105e4:	2400ef4c 	.word	0x2400ef4c

080105e8 <rmw_node_get_graph_guard_condition>:
 80105e8:	6843      	ldr	r3, [r0, #4]
 80105ea:	6918      	ldr	r0, [r3, #16]
 80105ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop

080105f4 <flush_session>:
 80105f4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80105f6:	f004 b8b3 	b.w	8014760 <uxr_run_session_until_confirm_delivery>
 80105fa:	bf00      	nop

080105fc <rmw_publish>:
 80105fc:	2800      	cmp	r0, #0
 80105fe:	d053      	beq.n	80106a8 <rmw_publish+0xac>
 8010600:	b570      	push	{r4, r5, r6, lr}
 8010602:	460d      	mov	r5, r1
 8010604:	b08e      	sub	sp, #56	@ 0x38
 8010606:	2900      	cmp	r1, #0
 8010608:	d04b      	beq.n	80106a2 <rmw_publish+0xa6>
 801060a:	4604      	mov	r4, r0
 801060c:	6800      	ldr	r0, [r0, #0]
 801060e:	f000 fddb 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 8010612:	2800      	cmp	r0, #0
 8010614:	d045      	beq.n	80106a2 <rmw_publish+0xa6>
 8010616:	6866      	ldr	r6, [r4, #4]
 8010618:	2e00      	cmp	r6, #0
 801061a:	d042      	beq.n	80106a2 <rmw_publish+0xa6>
 801061c:	69b4      	ldr	r4, [r6, #24]
 801061e:	4628      	mov	r0, r5
 8010620:	6923      	ldr	r3, [r4, #16]
 8010622:	4798      	blx	r3
 8010624:	69f3      	ldr	r3, [r6, #28]
 8010626:	9005      	str	r0, [sp, #20]
 8010628:	b113      	cbz	r3, 8010630 <rmw_publish+0x34>
 801062a:	a805      	add	r0, sp, #20
 801062c:	4798      	blx	r3
 801062e:	9805      	ldr	r0, [sp, #20]
 8010630:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010634:	691b      	ldr	r3, [r3, #16]
 8010636:	9000      	str	r0, [sp, #0]
 8010638:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801063c:	6972      	ldr	r2, [r6, #20]
 801063e:	ab06      	add	r3, sp, #24
 8010640:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010642:	f005 fb5d 	bl	8015d00 <uxr_prepare_output_stream>
 8010646:	b1d8      	cbz	r0, 8010680 <rmw_publish+0x84>
 8010648:	68a3      	ldr	r3, [r4, #8]
 801064a:	a906      	add	r1, sp, #24
 801064c:	4628      	mov	r0, r5
 801064e:	4798      	blx	r3
 8010650:	6a33      	ldr	r3, [r6, #32]
 8010652:	4604      	mov	r4, r0
 8010654:	b10b      	cbz	r3, 801065a <rmw_publish+0x5e>
 8010656:	a806      	add	r0, sp, #24
 8010658:	4798      	blx	r3
 801065a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801065e:	2b01      	cmp	r3, #1
 8010660:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010664:	d022      	beq.n	80106ac <rmw_publish+0xb0>
 8010666:	6918      	ldr	r0, [r3, #16]
 8010668:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801066a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801066e:	f004 f877 	bl	8014760 <uxr_run_session_until_confirm_delivery>
 8010672:	4020      	ands	r0, r4
 8010674:	b2c4      	uxtb	r4, r0
 8010676:	f084 0001 	eor.w	r0, r4, #1
 801067a:	b2c0      	uxtb	r0, r0
 801067c:	b00e      	add	sp, #56	@ 0x38
 801067e:	bd70      	pop	{r4, r5, r6, pc}
 8010680:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010684:	6918      	ldr	r0, [r3, #16]
 8010686:	9b05      	ldr	r3, [sp, #20]
 8010688:	9602      	str	r6, [sp, #8]
 801068a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801068e:	9300      	str	r3, [sp, #0]
 8010690:	4b09      	ldr	r3, [pc, #36]	@ (80106b8 <rmw_publish+0xbc>)
 8010692:	9301      	str	r3, [sp, #4]
 8010694:	ab06      	add	r3, sp, #24
 8010696:	6972      	ldr	r2, [r6, #20]
 8010698:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801069a:	f005 fb61 	bl	8015d60 <uxr_prepare_output_stream_fragmented>
 801069e:	2800      	cmp	r0, #0
 80106a0:	d1d2      	bne.n	8010648 <rmw_publish+0x4c>
 80106a2:	2001      	movs	r0, #1
 80106a4:	b00e      	add	sp, #56	@ 0x38
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	2001      	movs	r0, #1
 80106aa:	4770      	bx	lr
 80106ac:	6918      	ldr	r0, [r3, #16]
 80106ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106b2:	f003 fc9b 	bl	8013fec <uxr_flash_output_streams>
 80106b6:	e7de      	b.n	8010676 <rmw_publish+0x7a>
 80106b8:	080105f5 	.word	0x080105f5

080106bc <rmw_create_publisher>:
 80106bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c0:	b087      	sub	sp, #28
 80106c2:	2800      	cmp	r0, #0
 80106c4:	f000 80d2 	beq.w	801086c <rmw_create_publisher+0x1b0>
 80106c8:	460e      	mov	r6, r1
 80106ca:	2900      	cmp	r1, #0
 80106cc:	f000 80ce 	beq.w	801086c <rmw_create_publisher+0x1b0>
 80106d0:	4604      	mov	r4, r0
 80106d2:	6800      	ldr	r0, [r0, #0]
 80106d4:	4615      	mov	r5, r2
 80106d6:	461f      	mov	r7, r3
 80106d8:	f000 fd76 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 80106dc:	f080 0001 	eor.w	r0, r0, #1
 80106e0:	b2c0      	uxtb	r0, r0
 80106e2:	2800      	cmp	r0, #0
 80106e4:	f040 80c2 	bne.w	801086c <rmw_create_publisher+0x1b0>
 80106e8:	2d00      	cmp	r5, #0
 80106ea:	f000 80bf 	beq.w	801086c <rmw_create_publisher+0x1b0>
 80106ee:	782b      	ldrb	r3, [r5, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f000 80bb 	beq.w	801086c <rmw_create_publisher+0x1b0>
 80106f6:	2f00      	cmp	r7, #0
 80106f8:	f000 80b8 	beq.w	801086c <rmw_create_publisher+0x1b0>
 80106fc:	485e      	ldr	r0, [pc, #376]	@ (8010878 <rmw_create_publisher+0x1bc>)
 80106fe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010702:	f00a f827 	bl	801a754 <get_memory>
 8010706:	2800      	cmp	r0, #0
 8010708:	f000 80b0 	beq.w	801086c <rmw_create_publisher+0x1b0>
 801070c:	6884      	ldr	r4, [r0, #8]
 801070e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8010712:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010716:	f00a f885 	bl	801a824 <rmw_get_implementation_identifier>
 801071a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801071e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010722:	4628      	mov	r0, r5
 8010724:	f7ef fde6 	bl	80002f4 <strlen>
 8010728:	3001      	adds	r0, #1
 801072a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801072e:	283c      	cmp	r0, #60	@ 0x3c
 8010730:	f200 808f 	bhi.w	8010852 <rmw_create_publisher+0x196>
 8010734:	462b      	mov	r3, r5
 8010736:	4a51      	ldr	r2, [pc, #324]	@ (801087c <rmw_create_publisher+0x1c0>)
 8010738:	213c      	movs	r1, #60	@ 0x3c
 801073a:	4650      	mov	r0, sl
 801073c:	f00c fa26 	bl	801cb8c <sniprintf>
 8010740:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010744:	4639      	mov	r1, r7
 8010746:	2250      	movs	r2, #80	@ 0x50
 8010748:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801074a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801074e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8010752:	f00c fc52 	bl	801cffa <memcpy>
 8010756:	7a3b      	ldrb	r3, [r7, #8]
 8010758:	4630      	mov	r0, r6
 801075a:	4949      	ldr	r1, [pc, #292]	@ (8010880 <rmw_create_publisher+0x1c4>)
 801075c:	2b02      	cmp	r3, #2
 801075e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010762:	bf0c      	ite	eq
 8010764:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8010768:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801076c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801076e:	2300      	movs	r3, #0
 8010770:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8010774:	f000 fd36 	bl	80111e4 <get_message_typesupport_handle>
 8010778:	2800      	cmp	r0, #0
 801077a:	d06a      	beq.n	8010852 <rmw_create_publisher+0x196>
 801077c:	6842      	ldr	r2, [r0, #4]
 801077e:	61a2      	str	r2, [r4, #24]
 8010780:	2a00      	cmp	r2, #0
 8010782:	d066      	beq.n	8010852 <rmw_create_publisher+0x196>
 8010784:	4629      	mov	r1, r5
 8010786:	463b      	mov	r3, r7
 8010788:	4648      	mov	r0, r9
 801078a:	f00a f851 	bl	801a830 <create_topic>
 801078e:	6260      	str	r0, [r4, #36]	@ 0x24
 8010790:	2800      	cmp	r0, #0
 8010792:	d062      	beq.n	801085a <rmw_create_publisher+0x19e>
 8010794:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010798:	2103      	movs	r1, #3
 801079a:	2506      	movs	r5, #6
 801079c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107a0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80107a4:	1c42      	adds	r2, r0, #1
 80107a6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80107aa:	f003 f9d9 	bl	8013b60 <uxr_object_id>
 80107ae:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80107b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107b6:	6120      	str	r0, [r4, #16]
 80107b8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80107bc:	6910      	ldr	r0, [r2, #16]
 80107be:	9500      	str	r5, [sp, #0]
 80107c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80107c4:	6819      	ldr	r1, [r3, #0]
 80107c6:	6922      	ldr	r2, [r4, #16]
 80107c8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80107cc:	f003 f864 	bl	8013898 <uxr_buffer_create_publisher_bin>
 80107d0:	4602      	mov	r2, r0
 80107d2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80107d6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80107da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80107de:	f000 fc79 	bl	80110d4 <run_xrce_session>
 80107e2:	b3b0      	cbz	r0, 8010852 <rmw_create_publisher+0x196>
 80107e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107e8:	2105      	movs	r1, #5
 80107ea:	f10d 0a10 	add.w	sl, sp, #16
 80107ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107f2:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80107f6:	1c42      	adds	r2, r0, #1
 80107f8:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80107fc:	f003 f9b0 	bl	8013b60 <uxr_object_id>
 8010800:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010804:	4639      	mov	r1, r7
 8010806:	6160      	str	r0, [r4, #20]
 8010808:	691e      	ldr	r6, [r3, #16]
 801080a:	4650      	mov	r0, sl
 801080c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010810:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010814:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010818:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801081c:	f000 fc76 	bl	801110c <convert_qos_profile>
 8010820:	9503      	str	r5, [sp, #12]
 8010822:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010826:	9001      	str	r0, [sp, #4]
 8010828:	4630      	mov	r0, r6
 801082a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801082e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801083a:	f003 f85d 	bl	80138f8 <uxr_buffer_create_datawriter_bin>
 801083e:	4602      	mov	r2, r0
 8010840:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010844:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010848:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801084c:	f000 fc42 	bl	80110d4 <run_xrce_session>
 8010850:	b970      	cbnz	r0, 8010870 <rmw_create_publisher+0x1b4>
 8010852:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010854:	b108      	cbz	r0, 801085a <rmw_create_publisher+0x19e>
 8010856:	f000 fb31 	bl	8010ebc <rmw_uxrce_fini_topic_memory>
 801085a:	4640      	mov	r0, r8
 801085c:	f04f 0800 	mov.w	r8, #0
 8010860:	f000 fad4 	bl	8010e0c <rmw_uxrce_fini_publisher_memory>
 8010864:	4640      	mov	r0, r8
 8010866:	b007      	add	sp, #28
 8010868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086c:	f04f 0800 	mov.w	r8, #0
 8010870:	4640      	mov	r0, r8
 8010872:	b007      	add	sp, #28
 8010874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010878:	2401382c 	.word	0x2401382c
 801087c:	0801df2c 	.word	0x0801df2c
 8010880:	0801def8 	.word	0x0801def8

08010884 <rmw_publisher_get_actual_qos>:
 8010884:	b178      	cbz	r0, 80108a6 <rmw_publisher_get_actual_qos+0x22>
 8010886:	b510      	push	{r4, lr}
 8010888:	fab1 f481 	clz	r4, r1
 801088c:	0964      	lsrs	r4, r4, #5
 801088e:	b141      	cbz	r1, 80108a2 <rmw_publisher_get_actual_qos+0x1e>
 8010890:	6843      	ldr	r3, [r0, #4]
 8010892:	2250      	movs	r2, #80	@ 0x50
 8010894:	4608      	mov	r0, r1
 8010896:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 801089a:	f00c fbae 	bl	801cffa <memcpy>
 801089e:	4620      	mov	r0, r4
 80108a0:	bd10      	pop	{r4, pc}
 80108a2:	200b      	movs	r0, #11
 80108a4:	bd10      	pop	{r4, pc}
 80108a6:	200b      	movs	r0, #11
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop

080108ac <rmw_destroy_publisher>:
 80108ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108b0:	b128      	cbz	r0, 80108be <rmw_destroy_publisher+0x12>
 80108b2:	4604      	mov	r4, r0
 80108b4:	6800      	ldr	r0, [r0, #0]
 80108b6:	460d      	mov	r5, r1
 80108b8:	f000 fc86 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 80108bc:	b918      	cbnz	r0, 80108c6 <rmw_destroy_publisher+0x1a>
 80108be:	2401      	movs	r4, #1
 80108c0:	4620      	mov	r0, r4
 80108c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c6:	6863      	ldr	r3, [r4, #4]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d0f8      	beq.n	80108be <rmw_destroy_publisher+0x12>
 80108cc:	fab5 f485 	clz	r4, r5
 80108d0:	0964      	lsrs	r4, r4, #5
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	d0f3      	beq.n	80108be <rmw_destroy_publisher+0x12>
 80108d6:	6828      	ldr	r0, [r5, #0]
 80108d8:	f000 fc76 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 80108dc:	2800      	cmp	r0, #0
 80108de:	d0ee      	beq.n	80108be <rmw_destroy_publisher+0x12>
 80108e0:	686e      	ldr	r6, [r5, #4]
 80108e2:	2e00      	cmp	r6, #0
 80108e4:	d0eb      	beq.n	80108be <rmw_destroy_publisher+0x12>
 80108e6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80108e8:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 80108ec:	f009 fff0 	bl	801a8d0 <destroy_topic>
 80108f0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80108f4:	6972      	ldr	r2, [r6, #20]
 80108f6:	6918      	ldr	r0, [r3, #16]
 80108f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80108fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010900:	6819      	ldr	r1, [r3, #0]
 8010902:	f002 ff15 	bl	8013730 <uxr_buffer_delete_entity>
 8010906:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801090a:	4680      	mov	r8, r0
 801090c:	6932      	ldr	r2, [r6, #16]
 801090e:	6918      	ldr	r0, [r3, #16]
 8010910:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010914:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010918:	6819      	ldr	r1, [r3, #0]
 801091a:	f002 ff09 	bl	8013730 <uxr_buffer_delete_entity>
 801091e:	4606      	mov	r6, r0
 8010920:	6938      	ldr	r0, [r7, #16]
 8010922:	4642      	mov	r2, r8
 8010924:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010928:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801092c:	f000 fbd2 	bl	80110d4 <run_xrce_session>
 8010930:	693f      	ldr	r7, [r7, #16]
 8010932:	4632      	mov	r2, r6
 8010934:	4606      	mov	r6, r0
 8010936:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801093a:	4638      	mov	r0, r7
 801093c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010940:	f000 fbc8 	bl	80110d4 <run_xrce_session>
 8010944:	b126      	cbz	r6, 8010950 <rmw_destroy_publisher+0xa4>
 8010946:	b118      	cbz	r0, 8010950 <rmw_destroy_publisher+0xa4>
 8010948:	4628      	mov	r0, r5
 801094a:	f000 fa5f 	bl	8010e0c <rmw_uxrce_fini_publisher_memory>
 801094e:	e7b7      	b.n	80108c0 <rmw_destroy_publisher+0x14>
 8010950:	2402      	movs	r4, #2
 8010952:	e7f9      	b.n	8010948 <rmw_destroy_publisher+0x9c>

08010954 <rmw_destroy_service>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	b128      	cbz	r0, 8010964 <rmw_destroy_service+0x10>
 8010958:	4604      	mov	r4, r0
 801095a:	6800      	ldr	r0, [r0, #0]
 801095c:	460d      	mov	r5, r1
 801095e:	f000 fc33 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 8010962:	b910      	cbnz	r0, 801096a <rmw_destroy_service+0x16>
 8010964:	2401      	movs	r4, #1
 8010966:	4620      	mov	r0, r4
 8010968:	bd70      	pop	{r4, r5, r6, pc}
 801096a:	6863      	ldr	r3, [r4, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d0f9      	beq.n	8010964 <rmw_destroy_service+0x10>
 8010970:	2d00      	cmp	r5, #0
 8010972:	d0f7      	beq.n	8010964 <rmw_destroy_service+0x10>
 8010974:	6828      	ldr	r0, [r5, #0]
 8010976:	f000 fc27 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 801097a:	2800      	cmp	r0, #0
 801097c:	d0f2      	beq.n	8010964 <rmw_destroy_service+0x10>
 801097e:	686e      	ldr	r6, [r5, #4]
 8010980:	2e00      	cmp	r6, #0
 8010982:	d0ef      	beq.n	8010964 <rmw_destroy_service+0x10>
 8010984:	6864      	ldr	r4, [r4, #4]
 8010986:	6932      	ldr	r2, [r6, #16]
 8010988:	6920      	ldr	r0, [r4, #16]
 801098a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801098e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010992:	6819      	ldr	r1, [r3, #0]
 8010994:	f003 f914 	bl	8013bc0 <uxr_buffer_cancel_data>
 8010998:	4602      	mov	r2, r0
 801099a:	6920      	ldr	r0, [r4, #16]
 801099c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109a4:	f000 fb96 	bl	80110d4 <run_xrce_session>
 80109a8:	6920      	ldr	r0, [r4, #16]
 80109aa:	6932      	ldr	r2, [r6, #16]
 80109ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80109b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109b4:	6819      	ldr	r1, [r3, #0]
 80109b6:	f002 febb 	bl	8013730 <uxr_buffer_delete_entity>
 80109ba:	4602      	mov	r2, r0
 80109bc:	6920      	ldr	r0, [r4, #16]
 80109be:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109c6:	f000 fb85 	bl	80110d4 <run_xrce_session>
 80109ca:	4603      	mov	r3, r0
 80109cc:	4628      	mov	r0, r5
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	bf14      	ite	ne
 80109d2:	2400      	movne	r4, #0
 80109d4:	2402      	moveq	r4, #2
 80109d6:	f000 fa45 	bl	8010e64 <rmw_uxrce_fini_service_memory>
 80109da:	e7c4      	b.n	8010966 <rmw_destroy_service+0x12>

080109dc <rmw_destroy_subscription>:
 80109dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e0:	b128      	cbz	r0, 80109ee <rmw_destroy_subscription+0x12>
 80109e2:	4604      	mov	r4, r0
 80109e4:	6800      	ldr	r0, [r0, #0]
 80109e6:	460d      	mov	r5, r1
 80109e8:	f000 fbee 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 80109ec:	b918      	cbnz	r0, 80109f6 <rmw_destroy_subscription+0x1a>
 80109ee:	2401      	movs	r4, #1
 80109f0:	4620      	mov	r0, r4
 80109f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f6:	6863      	ldr	r3, [r4, #4]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d0f8      	beq.n	80109ee <rmw_destroy_subscription+0x12>
 80109fc:	fab5 f485 	clz	r4, r5
 8010a00:	0964      	lsrs	r4, r4, #5
 8010a02:	2d00      	cmp	r5, #0
 8010a04:	d0f3      	beq.n	80109ee <rmw_destroy_subscription+0x12>
 8010a06:	6828      	ldr	r0, [r5, #0]
 8010a08:	f000 fbde 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d0ee      	beq.n	80109ee <rmw_destroy_subscription+0x12>
 8010a10:	686e      	ldr	r6, [r5, #4]
 8010a12:	2e00      	cmp	r6, #0
 8010a14:	d0eb      	beq.n	80109ee <rmw_destroy_subscription+0x12>
 8010a16:	6a37      	ldr	r7, [r6, #32]
 8010a18:	6972      	ldr	r2, [r6, #20]
 8010a1a:	6938      	ldr	r0, [r7, #16]
 8010a1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a24:	6819      	ldr	r1, [r3, #0]
 8010a26:	f003 f8cb 	bl	8013bc0 <uxr_buffer_cancel_data>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	6938      	ldr	r0, [r7, #16]
 8010a2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010a32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010a36:	f000 fb4d 	bl	80110d4 <run_xrce_session>
 8010a3a:	69f0      	ldr	r0, [r6, #28]
 8010a3c:	f009 ff48 	bl	801a8d0 <destroy_topic>
 8010a40:	6a33      	ldr	r3, [r6, #32]
 8010a42:	6972      	ldr	r2, [r6, #20]
 8010a44:	6918      	ldr	r0, [r3, #16]
 8010a46:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a4a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a4e:	6819      	ldr	r1, [r3, #0]
 8010a50:	f002 fe6e 	bl	8013730 <uxr_buffer_delete_entity>
 8010a54:	6a33      	ldr	r3, [r6, #32]
 8010a56:	4680      	mov	r8, r0
 8010a58:	6932      	ldr	r2, [r6, #16]
 8010a5a:	6918      	ldr	r0, [r3, #16]
 8010a5c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a60:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a64:	6819      	ldr	r1, [r3, #0]
 8010a66:	f002 fe63 	bl	8013730 <uxr_buffer_delete_entity>
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	6938      	ldr	r0, [r7, #16]
 8010a6e:	4642      	mov	r2, r8
 8010a70:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010a74:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010a78:	f000 fb2c 	bl	80110d4 <run_xrce_session>
 8010a7c:	693f      	ldr	r7, [r7, #16]
 8010a7e:	4632      	mov	r2, r6
 8010a80:	4606      	mov	r6, r0
 8010a82:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010a86:	4638      	mov	r0, r7
 8010a88:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010a8c:	f000 fb22 	bl	80110d4 <run_xrce_session>
 8010a90:	b126      	cbz	r6, 8010a9c <rmw_destroy_subscription+0xc0>
 8010a92:	b118      	cbz	r0, 8010a9c <rmw_destroy_subscription+0xc0>
 8010a94:	4628      	mov	r0, r5
 8010a96:	f000 f9cf 	bl	8010e38 <rmw_uxrce_fini_subscription_memory>
 8010a9a:	e7a9      	b.n	80109f0 <rmw_destroy_subscription+0x14>
 8010a9c:	2402      	movs	r4, #2
 8010a9e:	e7f9      	b.n	8010a94 <rmw_destroy_subscription+0xb8>

08010aa0 <rmw_uxrce_transport_init>:
 8010aa0:	b508      	push	{r3, lr}
 8010aa2:	b108      	cbz	r0, 8010aa8 <rmw_uxrce_transport_init+0x8>
 8010aa4:	f100 0210 	add.w	r2, r0, #16
 8010aa8:	b139      	cbz	r1, 8010aba <rmw_uxrce_transport_init+0x1a>
 8010aaa:	6949      	ldr	r1, [r1, #20]
 8010aac:	4610      	mov	r0, r2
 8010aae:	f003 f81f 	bl	8013af0 <uxr_init_custom_transport>
 8010ab2:	f080 0001 	eor.w	r0, r0, #1
 8010ab6:	b2c0      	uxtb	r0, r0
 8010ab8:	bd08      	pop	{r3, pc}
 8010aba:	4b04      	ldr	r3, [pc, #16]	@ (8010acc <rmw_uxrce_transport_init+0x2c>)
 8010abc:	4610      	mov	r0, r2
 8010abe:	6859      	ldr	r1, [r3, #4]
 8010ac0:	f003 f816 	bl	8013af0 <uxr_init_custom_transport>
 8010ac4:	f080 0001 	eor.w	r0, r0, #1
 8010ac8:	b2c0      	uxtb	r0, r0
 8010aca:	bd08      	pop	{r3, pc}
 8010acc:	2400eef4 	.word	0x2400eef4

08010ad0 <rmw_uros_epoch_nanos>:
 8010ad0:	4b05      	ldr	r3, [pc, #20]	@ (8010ae8 <rmw_uros_epoch_nanos+0x18>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	b123      	cbz	r3, 8010ae0 <rmw_uros_epoch_nanos+0x10>
 8010ad6:	6898      	ldr	r0, [r3, #8]
 8010ad8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010adc:	f003 ba7c 	b.w	8013fd8 <uxr_epoch_nanos>
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	2100      	movs	r1, #0
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	2401384c 	.word	0x2401384c

08010aec <rmw_uros_sync_session>:
 8010aec:	b508      	push	{r3, lr}
 8010aee:	4b07      	ldr	r3, [pc, #28]	@ (8010b0c <rmw_uros_sync_session+0x20>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	b14b      	cbz	r3, 8010b08 <rmw_uros_sync_session+0x1c>
 8010af4:	4601      	mov	r1, r0
 8010af6:	6898      	ldr	r0, [r3, #8]
 8010af8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010afc:	f003 feac 	bl	8014858 <uxr_sync_session>
 8010b00:	f080 0001 	eor.w	r0, r0, #1
 8010b04:	b2c0      	uxtb	r0, r0
 8010b06:	bd08      	pop	{r3, pc}
 8010b08:	2001      	movs	r0, #1
 8010b0a:	bd08      	pop	{r3, pc}
 8010b0c:	2401384c 	.word	0x2401384c

08010b10 <rmw_uxrce_init_service_memory>:
 8010b10:	b1e2      	cbz	r2, 8010b4c <rmw_uxrce_init_service_memory+0x3c>
 8010b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b16:	7b05      	ldrb	r5, [r0, #12]
 8010b18:	4606      	mov	r6, r0
 8010b1a:	b9ad      	cbnz	r5, 8010b48 <rmw_uxrce_init_service_memory+0x38>
 8010b1c:	23c8      	movs	r3, #200	@ 0xc8
 8010b1e:	4617      	mov	r7, r2
 8010b20:	460c      	mov	r4, r1
 8010b22:	46a8      	mov	r8, r5
 8010b24:	6083      	str	r3, [r0, #8]
 8010b26:	f240 1301 	movw	r3, #257	@ 0x101
 8010b2a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b2e:	8183      	strh	r3, [r0, #12]
 8010b30:	3501      	adds	r5, #1
 8010b32:	4621      	mov	r1, r4
 8010b34:	4630      	mov	r0, r6
 8010b36:	f009 fe1d 	bl	801a774 <put_memory>
 8010b3a:	42af      	cmp	r7, r5
 8010b3c:	60a4      	str	r4, [r4, #8]
 8010b3e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010b42:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8010b46:	d1f3      	bne.n	8010b30 <rmw_uxrce_init_service_memory+0x20>
 8010b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b4c:	4770      	bx	lr
 8010b4e:	bf00      	nop

08010b50 <rmw_uxrce_init_client_memory>:
 8010b50:	b1e2      	cbz	r2, 8010b8c <rmw_uxrce_init_client_memory+0x3c>
 8010b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b56:	7b05      	ldrb	r5, [r0, #12]
 8010b58:	4606      	mov	r6, r0
 8010b5a:	b9ad      	cbnz	r5, 8010b88 <rmw_uxrce_init_client_memory+0x38>
 8010b5c:	23c8      	movs	r3, #200	@ 0xc8
 8010b5e:	4617      	mov	r7, r2
 8010b60:	460c      	mov	r4, r1
 8010b62:	46a8      	mov	r8, r5
 8010b64:	6083      	str	r3, [r0, #8]
 8010b66:	f240 1301 	movw	r3, #257	@ 0x101
 8010b6a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b6e:	8183      	strh	r3, [r0, #12]
 8010b70:	3501      	adds	r5, #1
 8010b72:	4621      	mov	r1, r4
 8010b74:	4630      	mov	r0, r6
 8010b76:	f009 fdfd 	bl	801a774 <put_memory>
 8010b7a:	42af      	cmp	r7, r5
 8010b7c:	60a4      	str	r4, [r4, #8]
 8010b7e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010b82:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8010b86:	d1f3      	bne.n	8010b70 <rmw_uxrce_init_client_memory+0x20>
 8010b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop

08010b90 <rmw_uxrce_init_publisher_memory>:
 8010b90:	b1e2      	cbz	r2, 8010bcc <rmw_uxrce_init_publisher_memory+0x3c>
 8010b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b96:	7b05      	ldrb	r5, [r0, #12]
 8010b98:	4606      	mov	r6, r0
 8010b9a:	b9ad      	cbnz	r5, 8010bc8 <rmw_uxrce_init_publisher_memory+0x38>
 8010b9c:	23d8      	movs	r3, #216	@ 0xd8
 8010b9e:	4617      	mov	r7, r2
 8010ba0:	460c      	mov	r4, r1
 8010ba2:	46a8      	mov	r8, r5
 8010ba4:	6083      	str	r3, [r0, #8]
 8010ba6:	f240 1301 	movw	r3, #257	@ 0x101
 8010baa:	e9c0 5500 	strd	r5, r5, [r0]
 8010bae:	8183      	strh	r3, [r0, #12]
 8010bb0:	3501      	adds	r5, #1
 8010bb2:	4621      	mov	r1, r4
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f009 fddd 	bl	801a774 <put_memory>
 8010bba:	42af      	cmp	r7, r5
 8010bbc:	60a4      	str	r4, [r4, #8]
 8010bbe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010bc2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8010bc6:	d1f3      	bne.n	8010bb0 <rmw_uxrce_init_publisher_memory+0x20>
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop

08010bd0 <rmw_uxrce_init_subscription_memory>:
 8010bd0:	b1e2      	cbz	r2, 8010c0c <rmw_uxrce_init_subscription_memory+0x3c>
 8010bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bd6:	7b05      	ldrb	r5, [r0, #12]
 8010bd8:	4606      	mov	r6, r0
 8010bda:	b9ad      	cbnz	r5, 8010c08 <rmw_uxrce_init_subscription_memory+0x38>
 8010bdc:	23d8      	movs	r3, #216	@ 0xd8
 8010bde:	4617      	mov	r7, r2
 8010be0:	460c      	mov	r4, r1
 8010be2:	46a8      	mov	r8, r5
 8010be4:	6083      	str	r3, [r0, #8]
 8010be6:	f240 1301 	movw	r3, #257	@ 0x101
 8010bea:	e9c0 5500 	strd	r5, r5, [r0]
 8010bee:	8183      	strh	r3, [r0, #12]
 8010bf0:	3501      	adds	r5, #1
 8010bf2:	4621      	mov	r1, r4
 8010bf4:	4630      	mov	r0, r6
 8010bf6:	f009 fdbd 	bl	801a774 <put_memory>
 8010bfa:	42af      	cmp	r7, r5
 8010bfc:	60a4      	str	r4, [r4, #8]
 8010bfe:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010c02:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8010c06:	d1f3      	bne.n	8010bf0 <rmw_uxrce_init_subscription_memory+0x20>
 8010c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c0c:	4770      	bx	lr
 8010c0e:	bf00      	nop

08010c10 <rmw_uxrce_init_node_memory>:
 8010c10:	b1e2      	cbz	r2, 8010c4c <rmw_uxrce_init_node_memory+0x3c>
 8010c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c16:	7b05      	ldrb	r5, [r0, #12]
 8010c18:	4606      	mov	r6, r0
 8010c1a:	b9ad      	cbnz	r5, 8010c48 <rmw_uxrce_init_node_memory+0x38>
 8010c1c:	23a4      	movs	r3, #164	@ 0xa4
 8010c1e:	4617      	mov	r7, r2
 8010c20:	460c      	mov	r4, r1
 8010c22:	46a8      	mov	r8, r5
 8010c24:	6083      	str	r3, [r0, #8]
 8010c26:	f240 1301 	movw	r3, #257	@ 0x101
 8010c2a:	e9c0 5500 	strd	r5, r5, [r0]
 8010c2e:	8183      	strh	r3, [r0, #12]
 8010c30:	3501      	adds	r5, #1
 8010c32:	4621      	mov	r1, r4
 8010c34:	4630      	mov	r0, r6
 8010c36:	f009 fd9d 	bl	801a774 <put_memory>
 8010c3a:	42af      	cmp	r7, r5
 8010c3c:	60a4      	str	r4, [r4, #8]
 8010c3e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010c42:	f804 8c98 	strb.w	r8, [r4, #-152]
 8010c46:	d1f3      	bne.n	8010c30 <rmw_uxrce_init_node_memory+0x20>
 8010c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop

08010c50 <rmw_uxrce_init_session_memory>:
 8010c50:	b1ea      	cbz	r2, 8010c8e <rmw_uxrce_init_session_memory+0x3e>
 8010c52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c56:	7b05      	ldrb	r5, [r0, #12]
 8010c58:	4606      	mov	r6, r0
 8010c5a:	b9b5      	cbnz	r5, 8010c8a <rmw_uxrce_init_session_memory+0x3a>
 8010c5c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010c60:	f240 1301 	movw	r3, #257	@ 0x101
 8010c64:	4617      	mov	r7, r2
 8010c66:	460c      	mov	r4, r1
 8010c68:	46a9      	mov	r9, r5
 8010c6a:	f8c0 8008 	str.w	r8, [r0, #8]
 8010c6e:	8183      	strh	r3, [r0, #12]
 8010c70:	e9c0 5500 	strd	r5, r5, [r0]
 8010c74:	3501      	adds	r5, #1
 8010c76:	4621      	mov	r1, r4
 8010c78:	4630      	mov	r0, r6
 8010c7a:	f009 fd7b 	bl	801a774 <put_memory>
 8010c7e:	42af      	cmp	r7, r5
 8010c80:	60a4      	str	r4, [r4, #8]
 8010c82:	f884 900c 	strb.w	r9, [r4, #12]
 8010c86:	4444      	add	r4, r8
 8010c88:	d1f4      	bne.n	8010c74 <rmw_uxrce_init_session_memory+0x24>
 8010c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c8e:	4770      	bx	lr

08010c90 <rmw_uxrce_init_topic_memory>:
 8010c90:	b1e2      	cbz	r2, 8010ccc <rmw_uxrce_init_topic_memory+0x3c>
 8010c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c96:	7b05      	ldrb	r5, [r0, #12]
 8010c98:	4606      	mov	r6, r0
 8010c9a:	b9ad      	cbnz	r5, 8010cc8 <rmw_uxrce_init_topic_memory+0x38>
 8010c9c:	231c      	movs	r3, #28
 8010c9e:	4617      	mov	r7, r2
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	46a8      	mov	r8, r5
 8010ca4:	6083      	str	r3, [r0, #8]
 8010ca6:	f240 1301 	movw	r3, #257	@ 0x101
 8010caa:	e9c0 5500 	strd	r5, r5, [r0]
 8010cae:	8183      	strh	r3, [r0, #12]
 8010cb0:	3501      	adds	r5, #1
 8010cb2:	4621      	mov	r1, r4
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	f009 fd5d 	bl	801a774 <put_memory>
 8010cba:	42af      	cmp	r7, r5
 8010cbc:	60a4      	str	r4, [r4, #8]
 8010cbe:	f104 041c 	add.w	r4, r4, #28
 8010cc2:	f804 8c10 	strb.w	r8, [r4, #-16]
 8010cc6:	d1f3      	bne.n	8010cb0 <rmw_uxrce_init_topic_memory+0x20>
 8010cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop

08010cd0 <rmw_uxrce_init_static_input_buffer_memory>:
 8010cd0:	b1ea      	cbz	r2, 8010d0e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd6:	7b05      	ldrb	r5, [r0, #12]
 8010cd8:	4606      	mov	r6, r0
 8010cda:	b9b5      	cbnz	r5, 8010d0a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010cdc:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010ce0:	4617      	mov	r7, r2
 8010ce2:	460c      	mov	r4, r1
 8010ce4:	46a8      	mov	r8, r5
 8010ce6:	6083      	str	r3, [r0, #8]
 8010ce8:	f240 1301 	movw	r3, #257	@ 0x101
 8010cec:	e9c0 5500 	strd	r5, r5, [r0]
 8010cf0:	8183      	strh	r3, [r0, #12]
 8010cf2:	3501      	adds	r5, #1
 8010cf4:	4621      	mov	r1, r4
 8010cf6:	4630      	mov	r0, r6
 8010cf8:	f009 fd3c 	bl	801a774 <put_memory>
 8010cfc:	42af      	cmp	r7, r5
 8010cfe:	60a4      	str	r4, [r4, #8]
 8010d00:	f884 800c 	strb.w	r8, [r4, #12]
 8010d04:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010d08:	d1f3      	bne.n	8010cf2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d0e:	4770      	bx	lr

08010d10 <rmw_uxrce_init_init_options_impl_memory>:
 8010d10:	b1e2      	cbz	r2, 8010d4c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d16:	7b05      	ldrb	r5, [r0, #12]
 8010d18:	4606      	mov	r6, r0
 8010d1a:	b9ad      	cbnz	r5, 8010d48 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010d1c:	232c      	movs	r3, #44	@ 0x2c
 8010d1e:	4617      	mov	r7, r2
 8010d20:	460c      	mov	r4, r1
 8010d22:	46a8      	mov	r8, r5
 8010d24:	6083      	str	r3, [r0, #8]
 8010d26:	f240 1301 	movw	r3, #257	@ 0x101
 8010d2a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d2e:	8183      	strh	r3, [r0, #12]
 8010d30:	3501      	adds	r5, #1
 8010d32:	4621      	mov	r1, r4
 8010d34:	4630      	mov	r0, r6
 8010d36:	f009 fd1d 	bl	801a774 <put_memory>
 8010d3a:	42af      	cmp	r7, r5
 8010d3c:	60a4      	str	r4, [r4, #8]
 8010d3e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010d42:	f804 8c20 	strb.w	r8, [r4, #-32]
 8010d46:	d1f3      	bne.n	8010d30 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop

08010d50 <rmw_uxrce_init_wait_set_memory>:
 8010d50:	b1e2      	cbz	r2, 8010d8c <rmw_uxrce_init_wait_set_memory+0x3c>
 8010d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d56:	7b05      	ldrb	r5, [r0, #12]
 8010d58:	4606      	mov	r6, r0
 8010d5a:	b9ad      	cbnz	r5, 8010d88 <rmw_uxrce_init_wait_set_memory+0x38>
 8010d5c:	231c      	movs	r3, #28
 8010d5e:	4617      	mov	r7, r2
 8010d60:	460c      	mov	r4, r1
 8010d62:	46a8      	mov	r8, r5
 8010d64:	6083      	str	r3, [r0, #8]
 8010d66:	f240 1301 	movw	r3, #257	@ 0x101
 8010d6a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d6e:	8183      	strh	r3, [r0, #12]
 8010d70:	3501      	adds	r5, #1
 8010d72:	4621      	mov	r1, r4
 8010d74:	4630      	mov	r0, r6
 8010d76:	f009 fcfd 	bl	801a774 <put_memory>
 8010d7a:	42af      	cmp	r7, r5
 8010d7c:	60a4      	str	r4, [r4, #8]
 8010d7e:	f104 041c 	add.w	r4, r4, #28
 8010d82:	f804 8c10 	strb.w	r8, [r4, #-16]
 8010d86:	d1f3      	bne.n	8010d70 <rmw_uxrce_init_wait_set_memory+0x20>
 8010d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop

08010d90 <rmw_uxrce_init_guard_condition_memory>:
 8010d90:	b1e2      	cbz	r2, 8010dcc <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d96:	7b05      	ldrb	r5, [r0, #12]
 8010d98:	4606      	mov	r6, r0
 8010d9a:	b9ad      	cbnz	r5, 8010dc8 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010d9c:	2320      	movs	r3, #32
 8010d9e:	4617      	mov	r7, r2
 8010da0:	460c      	mov	r4, r1
 8010da2:	46a8      	mov	r8, r5
 8010da4:	6083      	str	r3, [r0, #8]
 8010da6:	f240 1301 	movw	r3, #257	@ 0x101
 8010daa:	e9c0 5500 	strd	r5, r5, [r0]
 8010dae:	8183      	strh	r3, [r0, #12]
 8010db0:	3501      	adds	r5, #1
 8010db2:	4621      	mov	r1, r4
 8010db4:	4630      	mov	r0, r6
 8010db6:	f009 fcdd 	bl	801a774 <put_memory>
 8010dba:	42af      	cmp	r7, r5
 8010dbc:	60a4      	str	r4, [r4, #8]
 8010dbe:	f104 0420 	add.w	r4, r4, #32
 8010dc2:	f804 8c14 	strb.w	r8, [r4, #-20]
 8010dc6:	d1f3      	bne.n	8010db0 <rmw_uxrce_init_guard_condition_memory+0x20>
 8010dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop

08010dd0 <rmw_uxrce_fini_session_memory>:
 8010dd0:	4601      	mov	r1, r0
 8010dd2:	4801      	ldr	r0, [pc, #4]	@ (8010dd8 <rmw_uxrce_fini_session_memory+0x8>)
 8010dd4:	f009 bcce 	b.w	801a774 <put_memory>
 8010dd8:	2401384c 	.word	0x2401384c

08010ddc <rmw_uxrce_fini_node_memory>:
 8010ddc:	b538      	push	{r3, r4, r5, lr}
 8010dde:	4604      	mov	r4, r0
 8010de0:	6800      	ldr	r0, [r0, #0]
 8010de2:	b128      	cbz	r0, 8010df0 <rmw_uxrce_fini_node_memory+0x14>
 8010de4:	4b07      	ldr	r3, [pc, #28]	@ (8010e04 <rmw_uxrce_fini_node_memory+0x28>)
 8010de6:	6819      	ldr	r1, [r3, #0]
 8010de8:	f7ef fa7a 	bl	80002e0 <strcmp>
 8010dec:	b940      	cbnz	r0, 8010e00 <rmw_uxrce_fini_node_memory+0x24>
 8010dee:	6020      	str	r0, [r4, #0]
 8010df0:	6861      	ldr	r1, [r4, #4]
 8010df2:	b129      	cbz	r1, 8010e00 <rmw_uxrce_fini_node_memory+0x24>
 8010df4:	2500      	movs	r5, #0
 8010df6:	4804      	ldr	r0, [pc, #16]	@ (8010e08 <rmw_uxrce_fini_node_memory+0x2c>)
 8010df8:	610d      	str	r5, [r1, #16]
 8010dfa:	f009 fcbb 	bl	801a774 <put_memory>
 8010dfe:	6065      	str	r5, [r4, #4]
 8010e00:	bd38      	pop	{r3, r4, r5, pc}
 8010e02:	bf00      	nop
 8010e04:	0801eb04 	.word	0x0801eb04
 8010e08:	2401381c 	.word	0x2401381c

08010e0c <rmw_uxrce_fini_publisher_memory>:
 8010e0c:	b510      	push	{r4, lr}
 8010e0e:	4604      	mov	r4, r0
 8010e10:	6800      	ldr	r0, [r0, #0]
 8010e12:	b128      	cbz	r0, 8010e20 <rmw_uxrce_fini_publisher_memory+0x14>
 8010e14:	4b06      	ldr	r3, [pc, #24]	@ (8010e30 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010e16:	6819      	ldr	r1, [r3, #0]
 8010e18:	f7ef fa62 	bl	80002e0 <strcmp>
 8010e1c:	b938      	cbnz	r0, 8010e2e <rmw_uxrce_fini_publisher_memory+0x22>
 8010e1e:	6020      	str	r0, [r4, #0]
 8010e20:	6861      	ldr	r1, [r4, #4]
 8010e22:	b121      	cbz	r1, 8010e2e <rmw_uxrce_fini_publisher_memory+0x22>
 8010e24:	4803      	ldr	r0, [pc, #12]	@ (8010e34 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010e26:	f009 fca5 	bl	801a774 <put_memory>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	6063      	str	r3, [r4, #4]
 8010e2e:	bd10      	pop	{r4, pc}
 8010e30:	0801eb04 	.word	0x0801eb04
 8010e34:	2401382c 	.word	0x2401382c

08010e38 <rmw_uxrce_fini_subscription_memory>:
 8010e38:	b510      	push	{r4, lr}
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	6800      	ldr	r0, [r0, #0]
 8010e3e:	b128      	cbz	r0, 8010e4c <rmw_uxrce_fini_subscription_memory+0x14>
 8010e40:	4b06      	ldr	r3, [pc, #24]	@ (8010e5c <rmw_uxrce_fini_subscription_memory+0x24>)
 8010e42:	6819      	ldr	r1, [r3, #0]
 8010e44:	f7ef fa4c 	bl	80002e0 <strcmp>
 8010e48:	b938      	cbnz	r0, 8010e5a <rmw_uxrce_fini_subscription_memory+0x22>
 8010e4a:	6020      	str	r0, [r4, #0]
 8010e4c:	6861      	ldr	r1, [r4, #4]
 8010e4e:	b121      	cbz	r1, 8010e5a <rmw_uxrce_fini_subscription_memory+0x22>
 8010e50:	4803      	ldr	r0, [pc, #12]	@ (8010e60 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010e52:	f009 fc8f 	bl	801a774 <put_memory>
 8010e56:	2300      	movs	r3, #0
 8010e58:	6063      	str	r3, [r4, #4]
 8010e5a:	bd10      	pop	{r4, pc}
 8010e5c:	0801eb04 	.word	0x0801eb04
 8010e60:	2401386c 	.word	0x2401386c

08010e64 <rmw_uxrce_fini_service_memory>:
 8010e64:	b510      	push	{r4, lr}
 8010e66:	4604      	mov	r4, r0
 8010e68:	6800      	ldr	r0, [r0, #0]
 8010e6a:	b128      	cbz	r0, 8010e78 <rmw_uxrce_fini_service_memory+0x14>
 8010e6c:	4b06      	ldr	r3, [pc, #24]	@ (8010e88 <rmw_uxrce_fini_service_memory+0x24>)
 8010e6e:	6819      	ldr	r1, [r3, #0]
 8010e70:	f7ef fa36 	bl	80002e0 <strcmp>
 8010e74:	b938      	cbnz	r0, 8010e86 <rmw_uxrce_fini_service_memory+0x22>
 8010e76:	6020      	str	r0, [r4, #0]
 8010e78:	6861      	ldr	r1, [r4, #4]
 8010e7a:	b121      	cbz	r1, 8010e86 <rmw_uxrce_fini_service_memory+0x22>
 8010e7c:	4803      	ldr	r0, [pc, #12]	@ (8010e8c <rmw_uxrce_fini_service_memory+0x28>)
 8010e7e:	f009 fc79 	bl	801a774 <put_memory>
 8010e82:	2300      	movs	r3, #0
 8010e84:	6063      	str	r3, [r4, #4]
 8010e86:	bd10      	pop	{r4, pc}
 8010e88:	0801eb04 	.word	0x0801eb04
 8010e8c:	2401383c 	.word	0x2401383c

08010e90 <rmw_uxrce_fini_client_memory>:
 8010e90:	b510      	push	{r4, lr}
 8010e92:	4604      	mov	r4, r0
 8010e94:	6800      	ldr	r0, [r0, #0]
 8010e96:	b128      	cbz	r0, 8010ea4 <rmw_uxrce_fini_client_memory+0x14>
 8010e98:	4b06      	ldr	r3, [pc, #24]	@ (8010eb4 <rmw_uxrce_fini_client_memory+0x24>)
 8010e9a:	6819      	ldr	r1, [r3, #0]
 8010e9c:	f7ef fa20 	bl	80002e0 <strcmp>
 8010ea0:	b938      	cbnz	r0, 8010eb2 <rmw_uxrce_fini_client_memory+0x22>
 8010ea2:	6020      	str	r0, [r4, #0]
 8010ea4:	6861      	ldr	r1, [r4, #4]
 8010ea6:	b121      	cbz	r1, 8010eb2 <rmw_uxrce_fini_client_memory+0x22>
 8010ea8:	4803      	ldr	r0, [pc, #12]	@ (8010eb8 <rmw_uxrce_fini_client_memory+0x28>)
 8010eaa:	f009 fc63 	bl	801a774 <put_memory>
 8010eae:	2300      	movs	r3, #0
 8010eb0:	6063      	str	r3, [r4, #4]
 8010eb2:	bd10      	pop	{r4, pc}
 8010eb4:	0801eb04 	.word	0x0801eb04
 8010eb8:	2400ef4c 	.word	0x2400ef4c

08010ebc <rmw_uxrce_fini_topic_memory>:
 8010ebc:	b510      	push	{r4, lr}
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4803      	ldr	r0, [pc, #12]	@ (8010ed0 <rmw_uxrce_fini_topic_memory+0x14>)
 8010ec2:	4621      	mov	r1, r4
 8010ec4:	f009 fc56 	bl	801a774 <put_memory>
 8010ec8:	2300      	movs	r3, #0
 8010eca:	61a3      	str	r3, [r4, #24]
 8010ecc:	bd10      	pop	{r4, pc}
 8010ece:	bf00      	nop
 8010ed0:	2401387c 	.word	0x2401387c

08010ed4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	492b      	ldr	r1, [pc, #172]	@ (8010f84 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010ed8:	b530      	push	{r4, r5, lr}
 8010eda:	680d      	ldr	r5, [r1, #0]
 8010edc:	ac03      	add	r4, sp, #12
 8010ede:	e884 000c 	stmia.w	r4, {r2, r3}
 8010ee2:	461c      	mov	r4, r3
 8010ee4:	2d00      	cmp	r5, #0
 8010ee6:	d04b      	beq.n	8010f80 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8010ee8:	462b      	mov	r3, r5
 8010eea:	2100      	movs	r1, #0
 8010eec:	689a      	ldr	r2, [r3, #8]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010ef4:	4290      	cmp	r0, r2
 8010ef6:	bf08      	it	eq
 8010ef8:	3101      	addeq	r1, #1
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1f6      	bne.n	8010eec <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010efe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010f02:	2b02      	cmp	r3, #2
 8010f04:	d029      	beq.n	8010f5a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010f06:	d820      	bhi.n	8010f4a <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8010f08:	428c      	cmp	r4, r1
 8010f0a:	d828      	bhi.n	8010f5e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010f0c:	fab4 f284 	clz	r2, r4
 8010f10:	0952      	lsrs	r2, r2, #5
 8010f12:	b324      	cbz	r4, 8010f5e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010f14:	b1dd      	cbz	r5, 8010f4e <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8010f16:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010f1a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010f1e:	e001      	b.n	8010f24 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010f20:	686d      	ldr	r5, [r5, #4]
 8010f22:	b1ad      	cbz	r5, 8010f50 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010f24:	68ab      	ldr	r3, [r5, #8]
 8010f26:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8010f2a:	4288      	cmp	r0, r1
 8010f2c:	d1f8      	bne.n	8010f20 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f2e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8010f32:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010f36:	4561      	cmp	r1, ip
 8010f38:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f3c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010f40:	daee      	bge.n	8010f20 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f42:	468c      	mov	ip, r1
 8010f44:	461c      	mov	r4, r3
 8010f46:	462a      	mov	r2, r5
 8010f48:	e7ea      	b.n	8010f20 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f4a:	2b03      	cmp	r3, #3
 8010f4c:	d0dc      	beq.n	8010f08 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8010f4e:	2200      	movs	r2, #0
 8010f50:	4610      	mov	r0, r2
 8010f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f56:	b002      	add	sp, #8
 8010f58:	4770      	bx	lr
 8010f5a:	428c      	cmp	r4, r1
 8010f5c:	d905      	bls.n	8010f6a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8010f5e:	4809      	ldr	r0, [pc, #36]	@ (8010f84 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f64:	b002      	add	sp, #8
 8010f66:	f009 bbf5 	b.w	801a754 <get_memory>
 8010f6a:	fab4 f284 	clz	r2, r4
 8010f6e:	0952      	lsrs	r2, r2, #5
 8010f70:	2c00      	cmp	r4, #0
 8010f72:	d1ed      	bne.n	8010f50 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010f74:	4803      	ldr	r0, [pc, #12]	@ (8010f84 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010f76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f7a:	b002      	add	sp, #8
 8010f7c:	f009 bbea 	b.w	801a754 <get_memory>
 8010f80:	4629      	mov	r1, r5
 8010f82:	e7bc      	b.n	8010efe <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010f84:	2401385c 	.word	0x2401385c

08010f88 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010f88:	4b12      	ldr	r3, [pc, #72]	@ (8010fd4 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	b530      	push	{r4, r5, lr}
 8010f8e:	b1f3      	cbz	r3, 8010fce <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010f90:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010f94:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010f98:	2400      	movs	r4, #0
 8010f9a:	e001      	b.n	8010fa0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	b1a3      	cbz	r3, 8010fca <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010fa0:	689a      	ldr	r2, [r3, #8]
 8010fa2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010fa6:	4288      	cmp	r0, r1
 8010fa8:	d1f8      	bne.n	8010f9c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010faa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010fae:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8010fb2:	4571      	cmp	r1, lr
 8010fb4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010fb8:	eb72 050c 	sbcs.w	r5, r2, ip
 8010fbc:	daee      	bge.n	8010f9c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010fbe:	461c      	mov	r4, r3
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	468e      	mov	lr, r1
 8010fc4:	4694      	mov	ip, r2
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d1ea      	bne.n	8010fa0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010fca:	4620      	mov	r0, r4
 8010fcc:	bd30      	pop	{r4, r5, pc}
 8010fce:	461c      	mov	r4, r3
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	bd30      	pop	{r4, r5, pc}
 8010fd4:	2401385c 	.word	0x2401385c

08010fd8 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80110d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010fda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fde:	681f      	ldr	r7, [r3, #0]
 8010fe0:	ed2d 8b06 	vpush	{d8-d10}
 8010fe4:	b08d      	sub	sp, #52	@ 0x34
 8010fe6:	f7ff fd73 	bl	8010ad0 <rmw_uros_epoch_nanos>
 8010fea:	2f00      	cmp	r7, #0
 8010fec:	d05d      	beq.n	80110aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010fee:	46b8      	mov	r8, r7
 8010ff0:	4681      	mov	r9, r0
 8010ff2:	468a      	mov	sl, r1
 8010ff4:	ac04      	add	r4, sp, #16
 8010ff6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010ffa:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010ffe:	2b04      	cmp	r3, #4
 8011000:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80110b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011004:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80110c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011008:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80110c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801100c:	d03f      	beq.n	801108e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801100e:	2b05      	cmp	r3, #5
 8011010:	d044      	beq.n	801109c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011012:	2b03      	cmp	r3, #3
 8011014:	d03b      	beq.n	801108e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011016:	ed8d 8b04 	vstr	d8, [sp, #16]
 801101a:	ed8d ab06 	vstr	d10, [sp, #24]
 801101e:	ab08      	add	r3, sp, #32
 8011020:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011024:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801102a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801102e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011032:	f009 f8c9 	bl	801a1c8 <rmw_time_equal>
 8011036:	b118      	cbz	r0, 8011040 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011038:	ed8d 9b04 	vstr	d9, [sp, #16]
 801103c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011040:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011044:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011048:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801104c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011050:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011054:	f009 f90e 	bl	801a274 <rmw_time_total_nsec>
 8011058:	1830      	adds	r0, r6, r0
 801105a:	eb47 0101 	adc.w	r1, r7, r1
 801105e:	4548      	cmp	r0, r9
 8011060:	eb71 030a 	sbcs.w	r3, r1, sl
 8011064:	db05      	blt.n	8011072 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011066:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801106a:	4591      	cmp	r9, r2
 801106c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8011070:	da03      	bge.n	801107a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8011072:	4641      	mov	r1, r8
 8011074:	4816      	ldr	r0, [pc, #88]	@ (80110d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011076:	f009 fb7d 	bl	801a774 <put_memory>
 801107a:	f1bb 0f00 	cmp.w	fp, #0
 801107e:	d014      	beq.n	80110aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011080:	46d8      	mov	r8, fp
 8011082:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011086:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801108a:	2b04      	cmp	r3, #4
 801108c:	d1bf      	bne.n	801100e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801108e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8011092:	3340      	adds	r3, #64	@ 0x40
 8011094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801109a:	e7c0      	b.n	801101e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801109c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80110a0:	3348      	adds	r3, #72	@ 0x48
 80110a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80110a8:	e7b9      	b.n	801101e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80110aa:	b00d      	add	sp, #52	@ 0x34
 80110ac:	ecbd 8b06 	vpop	{d8-d10}
 80110b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b4:	f3af 8000 	nop.w
	...
 80110c0:	00000001 	.word	0x00000001
 80110c4:	00000000 	.word	0x00000000
 80110c8:	0000001e 	.word	0x0000001e
 80110cc:	00000000 	.word	0x00000000
 80110d0:	2401385c 	.word	0x2401385c

080110d4 <run_xrce_session>:
 80110d4:	b510      	push	{r4, lr}
 80110d6:	788c      	ldrb	r4, [r1, #2]
 80110d8:	b086      	sub	sp, #24
 80110da:	2c01      	cmp	r4, #1
 80110dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80110e0:	d00c      	beq.n	80110fc <run_xrce_session+0x28>
 80110e2:	2401      	movs	r4, #1
 80110e4:	4619      	mov	r1, r3
 80110e6:	f10d 020e 	add.w	r2, sp, #14
 80110ea:	f10d 0317 	add.w	r3, sp, #23
 80110ee:	9400      	str	r4, [sp, #0]
 80110f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110f4:	f003 fb58 	bl	80147a8 <uxr_run_session_until_all_status>
 80110f8:	b006      	add	sp, #24
 80110fa:	bd10      	pop	{r4, pc}
 80110fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011100:	f002 ff74 	bl	8013fec <uxr_flash_output_streams>
 8011104:	4620      	mov	r0, r4
 8011106:	b006      	add	sp, #24
 8011108:	bd10      	pop	{r4, pc}
 801110a:	bf00      	nop

0801110c <convert_qos_profile>:
 801110c:	7a4a      	ldrb	r2, [r1, #9]
 801110e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011112:	2a02      	cmp	r2, #2
 8011114:	bf18      	it	ne
 8011116:	2200      	movne	r2, #0
 8011118:	7002      	strb	r2, [r0, #0]
 801111a:	f1ac 0202 	sub.w	r2, ip, #2
 801111e:	fab2 f282 	clz	r2, r2
 8011122:	0952      	lsrs	r2, r2, #5
 8011124:	7042      	strb	r2, [r0, #1]
 8011126:	780a      	ldrb	r2, [r1, #0]
 8011128:	8889      	ldrh	r1, [r1, #4]
 801112a:	f1a2 0202 	sub.w	r2, r2, #2
 801112e:	8081      	strh	r1, [r0, #4]
 8011130:	fab2 f282 	clz	r2, r2
 8011134:	0952      	lsrs	r2, r2, #5
 8011136:	7082      	strb	r2, [r0, #2]
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop

0801113c <generate_type_name>:
 801113c:	2300      	movs	r3, #0
 801113e:	b530      	push	{r4, r5, lr}
 8011140:	700b      	strb	r3, [r1, #0]
 8011142:	b087      	sub	sp, #28
 8011144:	6803      	ldr	r3, [r0, #0]
 8011146:	4614      	mov	r4, r2
 8011148:	b1bb      	cbz	r3, 801117a <generate_type_name+0x3e>
 801114a:	4a0e      	ldr	r2, [pc, #56]	@ (8011184 <generate_type_name+0x48>)
 801114c:	4615      	mov	r5, r2
 801114e:	9500      	str	r5, [sp, #0]
 8011150:	9203      	str	r2, [sp, #12]
 8011152:	4d0d      	ldr	r5, [pc, #52]	@ (8011188 <generate_type_name+0x4c>)
 8011154:	6842      	ldr	r2, [r0, #4]
 8011156:	4608      	mov	r0, r1
 8011158:	490c      	ldr	r1, [pc, #48]	@ (801118c <generate_type_name+0x50>)
 801115a:	9204      	str	r2, [sp, #16]
 801115c:	9105      	str	r1, [sp, #20]
 801115e:	9102      	str	r1, [sp, #8]
 8011160:	4621      	mov	r1, r4
 8011162:	4a0b      	ldr	r2, [pc, #44]	@ (8011190 <generate_type_name+0x54>)
 8011164:	9501      	str	r5, [sp, #4]
 8011166:	f00b fd11 	bl	801cb8c <sniprintf>
 801116a:	2800      	cmp	r0, #0
 801116c:	bfa8      	it	ge
 801116e:	4284      	cmpge	r4, r0
 8011170:	bfcc      	ite	gt
 8011172:	2001      	movgt	r0, #1
 8011174:	2000      	movle	r0, #0
 8011176:	b007      	add	sp, #28
 8011178:	bd30      	pop	{r4, r5, pc}
 801117a:	4b06      	ldr	r3, [pc, #24]	@ (8011194 <generate_type_name+0x58>)
 801117c:	4a01      	ldr	r2, [pc, #4]	@ (8011184 <generate_type_name+0x48>)
 801117e:	461d      	mov	r5, r3
 8011180:	e7e5      	b.n	801114e <generate_type_name+0x12>
 8011182:	bf00      	nop
 8011184:	0801df1c 	.word	0x0801df1c
 8011188:	0801df34 	.word	0x0801df34
 801118c:	0801df30 	.word	0x0801df30
 8011190:	0801df20 	.word	0x0801df20
 8011194:	0801eba8 	.word	0x0801eba8

08011198 <generate_topic_name>:
 8011198:	b530      	push	{r4, r5, lr}
 801119a:	4614      	mov	r4, r2
 801119c:	b083      	sub	sp, #12
 801119e:	4605      	mov	r5, r0
 80111a0:	4b07      	ldr	r3, [pc, #28]	@ (80111c0 <generate_topic_name+0x28>)
 80111a2:	4a08      	ldr	r2, [pc, #32]	@ (80111c4 <generate_topic_name+0x2c>)
 80111a4:	4608      	mov	r0, r1
 80111a6:	9500      	str	r5, [sp, #0]
 80111a8:	4621      	mov	r1, r4
 80111aa:	f00b fcef 	bl	801cb8c <sniprintf>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	bfa8      	it	ge
 80111b2:	4284      	cmpge	r4, r0
 80111b4:	bfcc      	ite	gt
 80111b6:	2001      	movgt	r0, #1
 80111b8:	2000      	movle	r0, #0
 80111ba:	b003      	add	sp, #12
 80111bc:	bd30      	pop	{r4, r5, pc}
 80111be:	bf00      	nop
 80111c0:	0801df40 	.word	0x0801df40
 80111c4:	0801df38 	.word	0x0801df38

080111c8 <is_uxrce_rmw_identifier_valid>:
 80111c8:	b510      	push	{r4, lr}
 80111ca:	4604      	mov	r4, r0
 80111cc:	b140      	cbz	r0, 80111e0 <is_uxrce_rmw_identifier_valid+0x18>
 80111ce:	f009 fb29 	bl	801a824 <rmw_get_implementation_identifier>
 80111d2:	4601      	mov	r1, r0
 80111d4:	4620      	mov	r0, r4
 80111d6:	f7ef f883 	bl	80002e0 <strcmp>
 80111da:	fab0 f080 	clz	r0, r0
 80111de:	0940      	lsrs	r0, r0, #5
 80111e0:	bd10      	pop	{r4, pc}
 80111e2:	bf00      	nop

080111e4 <get_message_typesupport_handle>:
 80111e4:	6883      	ldr	r3, [r0, #8]
 80111e6:	4718      	bx	r3

080111e8 <get_message_typesupport_handle_function>:
 80111e8:	b510      	push	{r4, lr}
 80111ea:	4604      	mov	r4, r0
 80111ec:	6800      	ldr	r0, [r0, #0]
 80111ee:	f7ef f877 	bl	80002e0 <strcmp>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	bf0c      	ite	eq
 80111f6:	4620      	moveq	r0, r4
 80111f8:	2000      	movne	r0, #0
 80111fa:	bd10      	pop	{r4, pc}

080111fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80111fc:	4b04      	ldr	r3, [pc, #16]	@ (8011210 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	b10a      	cbz	r2, 8011206 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8011202:	4803      	ldr	r0, [pc, #12]	@ (8011210 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011204:	4770      	bx	lr
 8011206:	4a03      	ldr	r2, [pc, #12]	@ (8011214 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8011208:	4801      	ldr	r0, [pc, #4]	@ (8011210 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801120a:	6812      	ldr	r2, [r2, #0]
 801120c:	601a      	str	r2, [r3, #0]
 801120e:	4770      	bx	lr
 8011210:	24000034 	.word	0x24000034
 8011214:	24000678 	.word	0x24000678

08011218 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011218:	4a02      	ldr	r2, [pc, #8]	@ (8011224 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 801121a:	4b03      	ldr	r3, [pc, #12]	@ (8011228 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 801121c:	6812      	ldr	r2, [r2, #0]
 801121e:	601a      	str	r2, [r3, #0]
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	24000678 	.word	0x24000678
 8011228:	24000034 	.word	0x24000034

0801122c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 801122c:	4b04      	ldr	r3, [pc, #16]	@ (8011240 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801122e:	681a      	ldr	r2, [r3, #0]
 8011230:	b10a      	cbz	r2, 8011236 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xa>
 8011232:	4803      	ldr	r0, [pc, #12]	@ (8011240 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 8011234:	4770      	bx	lr
 8011236:	4a03      	ldr	r2, [pc, #12]	@ (8011244 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x18>)
 8011238:	4801      	ldr	r0, [pc, #4]	@ (8011240 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801123a:	6812      	ldr	r2, [r2, #0]
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	4770      	bx	lr
 8011240:	24000048 	.word	0x24000048
 8011244:	24000678 	.word	0x24000678

08011248 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 8011248:	4a02      	ldr	r2, [pc, #8]	@ (8011254 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xc>)
 801124a:	4b03      	ldr	r3, [pc, #12]	@ (8011258 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x10>)
 801124c:	6812      	ldr	r2, [r2, #0]
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	24000678 	.word	0x24000678
 8011258:	24000048 	.word	0x24000048

0801125c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 801125c:	2009      	movs	r0, #9
 801125e:	4770      	bx	lr

08011260 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8011260:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011264:	4770      	bx	lr
 8011266:	bf00      	nop

08011268 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8011268:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801126c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011270:	e9c2 0100 	strd	r0, r1, [r2]
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop

08011278 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 8011278:	e9d2 2300 	ldrd	r2, r3, [r2]
 801127c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011280:	e9c1 2300 	strd	r2, r3, [r1]
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop

08011288 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 8011288:	f009 be98 	b.w	801afbc <sensor_msgs__msg__Imu__init>

0801128c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 801128c:	f009 beec 	b.w	801b068 <sensor_msgs__msg__Imu__fini>

08011290 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 8011290:	2009      	movs	r0, #9
 8011292:	4770      	bx	lr

08011294 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 8011294:	2009      	movs	r0, #9
 8011296:	4770      	bx	lr

08011298 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 8011298:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop

080112a0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80112a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop

080112a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80112a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop

080112b0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80112b0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop

080112b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80112b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112bc:	4770      	bx	lr
 80112be:	bf00      	nop

080112c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80112c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112c8:	e9c2 0100 	strd	r0, r1, [r2]
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop

080112d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 80112d0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80112d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112d8:	e9c1 2300 	strd	r2, r3, [r1]
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop

080112e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 80112e0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112e8:	e9c2 0100 	strd	r0, r1, [r2]
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 80112f0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80112f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112f8:	e9c1 2300 	strd	r2, r3, [r1]
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop

08011300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011300:	b510      	push	{r4, lr}
 8011302:	4c0c      	ldr	r4, [pc, #48]	@ (8011334 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8011304:	f000 f9d8 	bl	80116b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011308:	60e0      	str	r0, [r4, #12]
 801130a:	f000 faff 	bl	801190c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801130e:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011310:	f000 fb0e 	bl	8011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011314:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011318:	f000 fb0a 	bl	8011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801131c:	4b06      	ldr	r3, [pc, #24]	@ (8011338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801131e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	b10a      	cbz	r2, 801132a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8011326:	4804      	ldr	r0, [pc, #16]	@ (8011338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011328:	bd10      	pop	{r4, pc}
 801132a:	4a04      	ldr	r2, [pc, #16]	@ (801133c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 801132c:	4802      	ldr	r0, [pc, #8]	@ (8011338 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801132e:	6812      	ldr	r2, [r2, #0]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	bd10      	pop	{r4, pc}
 8011334:	24000054 	.word	0x24000054
 8011338:	240001f8 	.word	0x240001f8
 801133c:	2400067c 	.word	0x2400067c

08011340 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__size_function__MagneticField__magnetic_field_covariance>:
 8011340:	2009      	movs	r0, #9
 8011342:	4770      	bx	lr

08011344 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_const_function__MagneticField__magnetic_field_covariance>:
 8011344:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop

0801134c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__fetch_function__MagneticField__magnetic_field_covariance>:
 801134c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011354:	e9c2 0100 	strd	r0, r1, [r2]
 8011358:	4770      	bx	lr
 801135a:	bf00      	nop

0801135c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__assign_function__MagneticField__magnetic_field_covariance>:
 801135c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011360:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011364:	e9c1 2300 	strd	r2, r3, [r1]
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop

0801136c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_init_function>:
 801136c:	f009 be90 	b.w	801b090 <sensor_msgs__msg__MagneticField__init>

08011370 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_fini_function>:
 8011370:	f009 beb2 	b.w	801b0d8 <sensor_msgs__msg__MagneticField__fini>

08011374 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_function__MagneticField__magnetic_field_covariance>:
 8011374:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop

0801137c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 801137c:	b510      	push	{r4, lr}
 801137e:	4c08      	ldr	r4, [pc, #32]	@ (80113a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x24>)
 8011380:	f000 f99a 	bl	80116b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011384:	60e0      	str	r0, [r4, #12]
 8011386:	f000 fad3 	bl	8011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801138a:	4b06      	ldr	r3, [pc, #24]	@ (80113a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 801138c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	b10a      	cbz	r2, 8011396 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x1a>
 8011392:	4804      	ldr	r0, [pc, #16]	@ (80113a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 8011394:	bd10      	pop	{r4, pc}
 8011396:	4a04      	ldr	r2, [pc, #16]	@ (80113a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x2c>)
 8011398:	4802      	ldr	r0, [pc, #8]	@ (80113a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 801139a:	6812      	ldr	r2, [r2, #0]
 801139c:	601a      	str	r2, [r3, #0]
 801139e:	bd10      	pop	{r4, pc}
 80113a0:	24000204 	.word	0x24000204
 80113a4:	240002b8 	.word	0x240002b8
 80113a8:	2400067c 	.word	0x2400067c

080113ac <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 80113ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b0:	4680      	mov	r8, r0
 80113b2:	460f      	mov	r7, r1
 80113b4:	f000 f9a4 	bl	8011700 <get_serialized_size_std_msgs__msg__Header>
 80113b8:	4604      	mov	r4, r0
 80113ba:	f108 0018 	add.w	r0, r8, #24
 80113be:	443c      	add	r4, r7
 80113c0:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 80113c4:	4621      	mov	r1, r4
 80113c6:	f000 fac1 	bl	801194c <get_serialized_size_geometry_msgs__msg__Quaternion>
 80113ca:	4404      	add	r4, r0
 80113cc:	2108      	movs	r1, #8
 80113ce:	4620      	mov	r0, r4
 80113d0:	f002 f8e6 	bl	80135a0 <ucdr_alignment>
 80113d4:	4606      	mov	r6, r0
 80113d6:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 80113da:	3648      	adds	r6, #72	@ 0x48
 80113dc:	4426      	add	r6, r4
 80113de:	4631      	mov	r1, r6
 80113e0:	f000 fb64 	bl	8011aac <get_serialized_size_geometry_msgs__msg__Vector3>
 80113e4:	1835      	adds	r5, r6, r0
 80113e6:	2108      	movs	r1, #8
 80113e8:	4628      	mov	r0, r5
 80113ea:	f002 f8d9 	bl	80135a0 <ucdr_alignment>
 80113ee:	4604      	mov	r4, r0
 80113f0:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 80113f4:	3448      	adds	r4, #72	@ 0x48
 80113f6:	4425      	add	r5, r4
 80113f8:	4629      	mov	r1, r5
 80113fa:	f000 fb57 	bl	8011aac <get_serialized_size_geometry_msgs__msg__Vector3>
 80113fe:	4405      	add	r5, r0
 8011400:	2108      	movs	r1, #8
 8011402:	4628      	mov	r0, r5
 8011404:	f002 f8cc 	bl	80135a0 <ucdr_alignment>
 8011408:	4438      	add	r0, r7
 801140a:	4428      	add	r0, r5
 801140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011410 <get_serialized_size_sensor_msgs__msg__Imu>:
 8011410:	b108      	cbz	r0, 8011416 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8011412:	f7ff bfcb 	b.w	80113ac <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011416:	4770      	bx	lr

08011418 <_Imu__get_serialized_size>:
 8011418:	b110      	cbz	r0, 8011420 <_Imu__get_serialized_size+0x8>
 801141a:	2100      	movs	r1, #0
 801141c:	f7ff bfc6 	b.w	80113ac <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop

08011424 <_Imu__cdr_deserialize>:
 8011424:	b538      	push	{r3, r4, r5, lr}
 8011426:	460c      	mov	r4, r1
 8011428:	2900      	cmp	r1, #0
 801142a:	d037      	beq.n	801149c <_Imu__cdr_deserialize+0x78>
 801142c:	4605      	mov	r5, r0
 801142e:	f000 f9eb 	bl	8011808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011432:	4603      	mov	r3, r0
 8011434:	4621      	mov	r1, r4
 8011436:	4628      	mov	r0, r5
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	4798      	blx	r3
 801143e:	f000 fb31 	bl	8011aa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011442:	4603      	mov	r3, r0
 8011444:	f104 0118 	add.w	r1, r4, #24
 8011448:	4628      	mov	r0, r5
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	4798      	blx	r3
 8011450:	2209      	movs	r2, #9
 8011452:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011456:	4628      	mov	r0, r5
 8011458:	f000 fd3a 	bl	8011ed0 <ucdr_deserialize_array_double>
 801145c:	f000 fbae 	bl	8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011460:	4603      	mov	r3, r0
 8011462:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8011466:	4628      	mov	r0, r5
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	4798      	blx	r3
 801146e:	2209      	movs	r2, #9
 8011470:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011474:	4628      	mov	r0, r5
 8011476:	f000 fd2b 	bl	8011ed0 <ucdr_deserialize_array_double>
 801147a:	f000 fb9f 	bl	8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801147e:	4603      	mov	r3, r0
 8011480:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 8011484:	4628      	mov	r0, r5
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	4798      	blx	r3
 801148c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8011490:	4628      	mov	r0, r5
 8011492:	2209      	movs	r2, #9
 8011494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011498:	f000 bd1a 	b.w	8011ed0 <ucdr_deserialize_array_double>
 801149c:	4608      	mov	r0, r1
 801149e:	bd38      	pop	{r3, r4, r5, pc}

080114a0 <_Imu__cdr_serialize>:
 80114a0:	2800      	cmp	r0, #0
 80114a2:	d039      	beq.n	8011518 <_Imu__cdr_serialize+0x78>
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	4604      	mov	r4, r0
 80114a8:	460d      	mov	r5, r1
 80114aa:	f000 f9ad 	bl	8011808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80114ae:	4603      	mov	r3, r0
 80114b0:	4629      	mov	r1, r5
 80114b2:	4620      	mov	r0, r4
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	689b      	ldr	r3, [r3, #8]
 80114b8:	4798      	blx	r3
 80114ba:	f000 faf3 	bl	8011aa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80114be:	4603      	mov	r3, r0
 80114c0:	4629      	mov	r1, r5
 80114c2:	f104 0018 	add.w	r0, r4, #24
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	4798      	blx	r3
 80114cc:	2209      	movs	r2, #9
 80114ce:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80114d2:	4628      	mov	r0, r5
 80114d4:	f000 fca8 	bl	8011e28 <ucdr_serialize_array_double>
 80114d8:	f000 fb70 	bl	8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80114dc:	4603      	mov	r3, r0
 80114de:	4629      	mov	r1, r5
 80114e0:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	4798      	blx	r3
 80114ea:	2209      	movs	r2, #9
 80114ec:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80114f0:	4628      	mov	r0, r5
 80114f2:	f000 fc99 	bl	8011e28 <ucdr_serialize_array_double>
 80114f6:	f000 fb61 	bl	8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80114fa:	4603      	mov	r3, r0
 80114fc:	4629      	mov	r1, r5
 80114fe:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	689b      	ldr	r3, [r3, #8]
 8011506:	4798      	blx	r3
 8011508:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 801150c:	4628      	mov	r0, r5
 801150e:	2209      	movs	r2, #9
 8011510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011514:	f000 bc88 	b.w	8011e28 <ucdr_serialize_array_double>
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop

0801151c <max_serialized_size_sensor_msgs__msg__Imu>:
 801151c:	2301      	movs	r3, #1
 801151e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011522:	7003      	strb	r3, [r0, #0]
 8011524:	4680      	mov	r8, r0
 8011526:	460f      	mov	r7, r1
 8011528:	f000 f964 	bl	80117f4 <max_serialized_size_std_msgs__msg__Header>
 801152c:	4604      	mov	r4, r0
 801152e:	4640      	mov	r0, r8
 8011530:	443c      	add	r4, r7
 8011532:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8011536:	4621      	mov	r1, r4
 8011538:	f000 fa94 	bl	8011a64 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801153c:	4404      	add	r4, r0
 801153e:	2108      	movs	r1, #8
 8011540:	4620      	mov	r0, r4
 8011542:	f002 f82d 	bl	80135a0 <ucdr_alignment>
 8011546:	4606      	mov	r6, r0
 8011548:	4640      	mov	r0, r8
 801154a:	3648      	adds	r6, #72	@ 0x48
 801154c:	4426      	add	r6, r4
 801154e:	4631      	mov	r1, r6
 8011550:	f000 fb1a 	bl	8011b88 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011554:	1835      	adds	r5, r6, r0
 8011556:	2108      	movs	r1, #8
 8011558:	4628      	mov	r0, r5
 801155a:	f002 f821 	bl	80135a0 <ucdr_alignment>
 801155e:	4604      	mov	r4, r0
 8011560:	4640      	mov	r0, r8
 8011562:	3448      	adds	r4, #72	@ 0x48
 8011564:	4425      	add	r5, r4
 8011566:	4629      	mov	r1, r5
 8011568:	f000 fb0e 	bl	8011b88 <max_serialized_size_geometry_msgs__msg__Vector3>
 801156c:	4405      	add	r5, r0
 801156e:	2108      	movs	r1, #8
 8011570:	4628      	mov	r0, r5
 8011572:	f002 f815 	bl	80135a0 <ucdr_alignment>
 8011576:	4438      	add	r0, r7
 8011578:	4428      	add	r0, r5
 801157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801157e:	bf00      	nop

08011580 <_Imu__max_serialized_size>:
 8011580:	b500      	push	{lr}
 8011582:	b083      	sub	sp, #12
 8011584:	2100      	movs	r1, #0
 8011586:	f10d 0007 	add.w	r0, sp, #7
 801158a:	f7ff ffc7 	bl	801151c <max_serialized_size_sensor_msgs__msg__Imu>
 801158e:	b003      	add	sp, #12
 8011590:	f85d fb04 	ldr.w	pc, [sp], #4

08011594 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011594:	4800      	ldr	r0, [pc, #0]	@ (8011598 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 8011596:	4770      	bx	lr
 8011598:	240002c4 	.word	0x240002c4

0801159c <get_serialized_size_sensor_msgs__msg__MagneticField>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	4605      	mov	r5, r0
 80115a0:	b190      	cbz	r0, 80115c8 <get_serialized_size_sensor_msgs__msg__MagneticField+0x2c>
 80115a2:	460c      	mov	r4, r1
 80115a4:	f000 f8ac 	bl	8011700 <get_serialized_size_std_msgs__msg__Header>
 80115a8:	4606      	mov	r6, r0
 80115aa:	f105 0018 	add.w	r0, r5, #24
 80115ae:	4426      	add	r6, r4
 80115b0:	f1c4 0448 	rsb	r4, r4, #72	@ 0x48
 80115b4:	4631      	mov	r1, r6
 80115b6:	f000 fa79 	bl	8011aac <get_serialized_size_geometry_msgs__msg__Vector3>
 80115ba:	4406      	add	r6, r0
 80115bc:	2108      	movs	r1, #8
 80115be:	4630      	mov	r0, r6
 80115c0:	f001 ffee 	bl	80135a0 <ucdr_alignment>
 80115c4:	4404      	add	r4, r0
 80115c6:	19a0      	adds	r0, r4, r6
 80115c8:	bd70      	pop	{r4, r5, r6, pc}
 80115ca:	bf00      	nop

080115cc <_MagneticField__cdr_deserialize>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	460c      	mov	r4, r1
 80115d0:	b1c9      	cbz	r1, 8011606 <_MagneticField__cdr_deserialize+0x3a>
 80115d2:	4605      	mov	r5, r0
 80115d4:	f000 f918 	bl	8011808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80115d8:	4603      	mov	r3, r0
 80115da:	4621      	mov	r1, r4
 80115dc:	4628      	mov	r0, r5
 80115de:	685b      	ldr	r3, [r3, #4]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	4798      	blx	r3
 80115e4:	f000 faea 	bl	8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80115e8:	4603      	mov	r3, r0
 80115ea:	f104 0118 	add.w	r1, r4, #24
 80115ee:	4628      	mov	r0, r5
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	4798      	blx	r3
 80115f6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80115fa:	4628      	mov	r0, r5
 80115fc:	2209      	movs	r2, #9
 80115fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011602:	f000 bc65 	b.w	8011ed0 <ucdr_deserialize_array_double>
 8011606:	4608      	mov	r0, r1
 8011608:	bd38      	pop	{r3, r4, r5, pc}
 801160a:	bf00      	nop

0801160c <_MagneticField__cdr_serialize>:
 801160c:	b1d8      	cbz	r0, 8011646 <_MagneticField__cdr_serialize+0x3a>
 801160e:	b538      	push	{r3, r4, r5, lr}
 8011610:	4604      	mov	r4, r0
 8011612:	460d      	mov	r5, r1
 8011614:	f000 f8f8 	bl	8011808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011618:	4603      	mov	r3, r0
 801161a:	4629      	mov	r1, r5
 801161c:	4620      	mov	r0, r4
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	4798      	blx	r3
 8011624:	f000 faca 	bl	8011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011628:	4603      	mov	r3, r0
 801162a:	4629      	mov	r1, r5
 801162c:	f104 0018 	add.w	r0, r4, #24
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	689b      	ldr	r3, [r3, #8]
 8011634:	4798      	blx	r3
 8011636:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801163a:	4628      	mov	r0, r5
 801163c:	2209      	movs	r2, #9
 801163e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011642:	f000 bbf1 	b.w	8011e28 <ucdr_serialize_array_double>
 8011646:	4770      	bx	lr

08011648 <_MagneticField__get_serialized_size>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4604      	mov	r4, r0
 801164c:	b180      	cbz	r0, 8011670 <_MagneticField__get_serialized_size+0x28>
 801164e:	2100      	movs	r1, #0
 8011650:	f000 f856 	bl	8011700 <get_serialized_size_std_msgs__msg__Header>
 8011654:	4605      	mov	r5, r0
 8011656:	f104 0018 	add.w	r0, r4, #24
 801165a:	4629      	mov	r1, r5
 801165c:	f000 fa26 	bl	8011aac <get_serialized_size_geometry_msgs__msg__Vector3>
 8011660:	4405      	add	r5, r0
 8011662:	2108      	movs	r1, #8
 8011664:	4628      	mov	r0, r5
 8011666:	f001 ff9b 	bl	80135a0 <ucdr_alignment>
 801166a:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 801166e:	1960      	adds	r0, r4, r5
 8011670:	bd38      	pop	{r3, r4, r5, pc}
 8011672:	bf00      	nop

08011674 <_MagneticField__max_serialized_size>:
 8011674:	b510      	push	{r4, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	2301      	movs	r3, #1
 801167a:	2100      	movs	r1, #0
 801167c:	f10d 0007 	add.w	r0, sp, #7
 8011680:	f88d 3007 	strb.w	r3, [sp, #7]
 8011684:	f000 f8b6 	bl	80117f4 <max_serialized_size_std_msgs__msg__Header>
 8011688:	4604      	mov	r4, r0
 801168a:	f10d 0007 	add.w	r0, sp, #7
 801168e:	4621      	mov	r1, r4
 8011690:	f000 fa7a 	bl	8011b88 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011694:	4404      	add	r4, r0
 8011696:	2108      	movs	r1, #8
 8011698:	4620      	mov	r0, r4
 801169a:	f001 ff81 	bl	80135a0 <ucdr_alignment>
 801169e:	3048      	adds	r0, #72	@ 0x48
 80116a0:	4420      	add	r0, r4
 80116a2:	b002      	add	sp, #8
 80116a4:	bd10      	pop	{r4, pc}
 80116a6:	bf00      	nop

080116a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 80116a8:	4800      	ldr	r0, [pc, #0]	@ (80116ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x4>)
 80116aa:	4770      	bx	lr
 80116ac:	240002ec 	.word	0x240002ec

080116b0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80116b0:	f009 bd1e 	b.w	801b0f0 <std_msgs__msg__Header__init>

080116b4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80116b4:	f009 bd40 	b.w	801b138 <std_msgs__msg__Header__fini>

080116b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80116b8:	b508      	push	{r3, lr}
 80116ba:	f000 f8ad 	bl	8011818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80116be:	4b06      	ldr	r3, [pc, #24]	@ (80116d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116c0:	4906      	ldr	r1, [pc, #24]	@ (80116dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	60c8      	str	r0, [r1, #12]
 80116c6:	b10a      	cbz	r2, 80116cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80116c8:	4803      	ldr	r0, [pc, #12]	@ (80116d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116ca:	bd08      	pop	{r3, pc}
 80116cc:	4a04      	ldr	r2, [pc, #16]	@ (80116e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80116ce:	4802      	ldr	r0, [pc, #8]	@ (80116d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	bd08      	pop	{r3, pc}
 80116d6:	bf00      	nop
 80116d8:	2400038c 	.word	0x2400038c
 80116dc:	24000314 	.word	0x24000314
 80116e0:	2400067c 	.word	0x2400067c

080116e4 <_Header__max_serialized_size>:
 80116e4:	b500      	push	{lr}
 80116e6:	b083      	sub	sp, #12
 80116e8:	2301      	movs	r3, #1
 80116ea:	2100      	movs	r1, #0
 80116ec:	f10d 0007 	add.w	r0, sp, #7
 80116f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80116f4:	f000 f8ee 	bl	80118d4 <max_serialized_size_builtin_interfaces__msg__Time>
 80116f8:	b003      	add	sp, #12
 80116fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80116fe:	bf00      	nop

08011700 <get_serialized_size_std_msgs__msg__Header>:
 8011700:	b570      	push	{r4, r5, r6, lr}
 8011702:	4605      	mov	r5, r0
 8011704:	b168      	cbz	r0, 8011722 <get_serialized_size_std_msgs__msg__Header+0x22>
 8011706:	460c      	mov	r4, r1
 8011708:	f000 f894 	bl	8011834 <get_serialized_size_builtin_interfaces__msg__Time>
 801170c:	2104      	movs	r1, #4
 801170e:	1826      	adds	r6, r4, r0
 8011710:	f1c4 0405 	rsb	r4, r4, #5
 8011714:	4630      	mov	r0, r6
 8011716:	f001 ff43 	bl	80135a0 <ucdr_alignment>
 801171a:	68e9      	ldr	r1, [r5, #12]
 801171c:	440c      	add	r4, r1
 801171e:	4404      	add	r4, r0
 8011720:	19a0      	adds	r0, r4, r6
 8011722:	bd70      	pop	{r4, r5, r6, pc}

08011724 <_Header__cdr_deserialize>:
 8011724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011726:	460c      	mov	r4, r1
 8011728:	b083      	sub	sp, #12
 801172a:	b1e9      	cbz	r1, 8011768 <_Header__cdr_deserialize+0x44>
 801172c:	4606      	mov	r6, r0
 801172e:	f000 f8e5 	bl	80118fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011732:	4603      	mov	r3, r0
 8011734:	4621      	mov	r1, r4
 8011736:	4630      	mov	r0, r6
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	4798      	blx	r3
 801173e:	6927      	ldr	r7, [r4, #16]
 8011740:	ab01      	add	r3, sp, #4
 8011742:	68a1      	ldr	r1, [r4, #8]
 8011744:	463a      	mov	r2, r7
 8011746:	4630      	mov	r0, r6
 8011748:	f001 ffac 	bl	80136a4 <ucdr_deserialize_sequence_char>
 801174c:	9b01      	ldr	r3, [sp, #4]
 801174e:	4605      	mov	r5, r0
 8011750:	b920      	cbnz	r0, 801175c <_Header__cdr_deserialize+0x38>
 8011752:	429f      	cmp	r7, r3
 8011754:	d30c      	bcc.n	8011770 <_Header__cdr_deserialize+0x4c>
 8011756:	4628      	mov	r0, r5
 8011758:	b003      	add	sp, #12
 801175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801175c:	b103      	cbz	r3, 8011760 <_Header__cdr_deserialize+0x3c>
 801175e:	3b01      	subs	r3, #1
 8011760:	4628      	mov	r0, r5
 8011762:	60e3      	str	r3, [r4, #12]
 8011764:	b003      	add	sp, #12
 8011766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011768:	460d      	mov	r5, r1
 801176a:	4628      	mov	r0, r5
 801176c:	b003      	add	sp, #12
 801176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011770:	2101      	movs	r1, #1
 8011772:	4630      	mov	r0, r6
 8011774:	75b5      	strb	r5, [r6, #22]
 8011776:	7571      	strb	r1, [r6, #21]
 8011778:	60e5      	str	r5, [r4, #12]
 801177a:	f001 ff29 	bl	80135d0 <ucdr_align_to>
 801177e:	4630      	mov	r0, r6
 8011780:	9901      	ldr	r1, [sp, #4]
 8011782:	f001 ff5d 	bl	8013640 <ucdr_advance_buffer>
 8011786:	4628      	mov	r0, r5
 8011788:	b003      	add	sp, #12
 801178a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801178c <_Header__cdr_serialize>:
 801178c:	b308      	cbz	r0, 80117d2 <_Header__cdr_serialize+0x46>
 801178e:	b570      	push	{r4, r5, r6, lr}
 8011790:	4604      	mov	r4, r0
 8011792:	460d      	mov	r5, r1
 8011794:	f000 f8b2 	bl	80118fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011798:	4603      	mov	r3, r0
 801179a:	4629      	mov	r1, r5
 801179c:	4620      	mov	r0, r4
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	4798      	blx	r3
 80117a4:	68a6      	ldr	r6, [r4, #8]
 80117a6:	b15e      	cbz	r6, 80117c0 <_Header__cdr_serialize+0x34>
 80117a8:	4630      	mov	r0, r6
 80117aa:	f7ee fda3 	bl	80002f4 <strlen>
 80117ae:	4603      	mov	r3, r0
 80117b0:	1c42      	adds	r2, r0, #1
 80117b2:	4631      	mov	r1, r6
 80117b4:	4628      	mov	r0, r5
 80117b6:	60e3      	str	r3, [r4, #12]
 80117b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117bc:	f001 bf60 	b.w	8013680 <ucdr_serialize_sequence_char>
 80117c0:	4633      	mov	r3, r6
 80117c2:	4632      	mov	r2, r6
 80117c4:	4631      	mov	r1, r6
 80117c6:	4628      	mov	r0, r5
 80117c8:	60e3      	str	r3, [r4, #12]
 80117ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117ce:	f001 bf57 	b.w	8013680 <ucdr_serialize_sequence_char>
 80117d2:	4770      	bx	lr

080117d4 <_Header__get_serialized_size>:
 80117d4:	b538      	push	{r3, r4, r5, lr}
 80117d6:	4604      	mov	r4, r0
 80117d8:	b150      	cbz	r0, 80117f0 <_Header__get_serialized_size+0x1c>
 80117da:	2100      	movs	r1, #0
 80117dc:	f000 f82a 	bl	8011834 <get_serialized_size_builtin_interfaces__msg__Time>
 80117e0:	2104      	movs	r1, #4
 80117e2:	4605      	mov	r5, r0
 80117e4:	f001 fedc 	bl	80135a0 <ucdr_alignment>
 80117e8:	68e2      	ldr	r2, [r4, #12]
 80117ea:	3205      	adds	r2, #5
 80117ec:	1953      	adds	r3, r2, r5
 80117ee:	4418      	add	r0, r3
 80117f0:	bd38      	pop	{r3, r4, r5, pc}
 80117f2:	bf00      	nop

080117f4 <max_serialized_size_std_msgs__msg__Header>:
 80117f4:	2301      	movs	r3, #1
 80117f6:	b510      	push	{r4, lr}
 80117f8:	7003      	strb	r3, [r0, #0]
 80117fa:	4604      	mov	r4, r0
 80117fc:	f000 f86a 	bl	80118d4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011800:	2300      	movs	r3, #0
 8011802:	7023      	strb	r3, [r4, #0]
 8011804:	bd10      	pop	{r4, pc}
 8011806:	bf00      	nop

08011808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011808:	4800      	ldr	r0, [pc, #0]	@ (801180c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801180a:	4770      	bx	lr
 801180c:	24000398 	.word	0x24000398

08011810 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011810:	f009 bc9e 	b.w	801b150 <builtin_interfaces__msg__Time__init>

08011814 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011814:	f009 bca0 	b.w	801b158 <builtin_interfaces__msg__Time__fini>

08011818 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011818:	4b04      	ldr	r3, [pc, #16]	@ (801182c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	b10a      	cbz	r2, 8011822 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801181e:	4803      	ldr	r0, [pc, #12]	@ (801182c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011820:	4770      	bx	lr
 8011822:	4a03      	ldr	r2, [pc, #12]	@ (8011830 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011824:	4801      	ldr	r0, [pc, #4]	@ (801182c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011826:	6812      	ldr	r2, [r2, #0]
 8011828:	601a      	str	r2, [r3, #0]
 801182a:	4770      	bx	lr
 801182c:	24000438 	.word	0x24000438
 8011830:	2400067c 	.word	0x2400067c

08011834 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011834:	b180      	cbz	r0, 8011858 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011836:	b538      	push	{r3, r4, r5, lr}
 8011838:	460d      	mov	r5, r1
 801183a:	2104      	movs	r1, #4
 801183c:	4628      	mov	r0, r5
 801183e:	f001 feaf 	bl	80135a0 <ucdr_alignment>
 8011842:	1d2b      	adds	r3, r5, #4
 8011844:	f1c5 0504 	rsb	r5, r5, #4
 8011848:	2104      	movs	r1, #4
 801184a:	181c      	adds	r4, r3, r0
 801184c:	4620      	mov	r0, r4
 801184e:	f001 fea7 	bl	80135a0 <ucdr_alignment>
 8011852:	4428      	add	r0, r5
 8011854:	4420      	add	r0, r4
 8011856:	bd38      	pop	{r3, r4, r5, pc}
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop

0801185c <_Time__cdr_deserialize>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	460c      	mov	r4, r1
 8011860:	b141      	cbz	r1, 8011874 <_Time__cdr_deserialize+0x18>
 8011862:	4605      	mov	r5, r0
 8011864:	f001 fa7e 	bl	8012d64 <ucdr_deserialize_int32_t>
 8011868:	1d21      	adds	r1, r4, #4
 801186a:	4628      	mov	r0, r5
 801186c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011870:	f000 bef6 	b.w	8012660 <ucdr_deserialize_uint32_t>
 8011874:	4608      	mov	r0, r1
 8011876:	bd38      	pop	{r3, r4, r5, pc}

08011878 <_Time__cdr_serialize>:
 8011878:	b160      	cbz	r0, 8011894 <_Time__cdr_serialize+0x1c>
 801187a:	b538      	push	{r3, r4, r5, lr}
 801187c:	460d      	mov	r5, r1
 801187e:	4604      	mov	r4, r0
 8011880:	6801      	ldr	r1, [r0, #0]
 8011882:	4628      	mov	r0, r5
 8011884:	f001 f9d6 	bl	8012c34 <ucdr_serialize_int32_t>
 8011888:	6861      	ldr	r1, [r4, #4]
 801188a:	4628      	mov	r0, r5
 801188c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011890:	f000 bdb6 	b.w	8012400 <ucdr_serialize_uint32_t>
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop

08011898 <_Time__get_serialized_size>:
 8011898:	b160      	cbz	r0, 80118b4 <_Time__get_serialized_size+0x1c>
 801189a:	2104      	movs	r1, #4
 801189c:	2000      	movs	r0, #0
 801189e:	b510      	push	{r4, lr}
 80118a0:	f001 fe7e 	bl	80135a0 <ucdr_alignment>
 80118a4:	2104      	movs	r1, #4
 80118a6:	1844      	adds	r4, r0, r1
 80118a8:	4620      	mov	r0, r4
 80118aa:	f001 fe79 	bl	80135a0 <ucdr_alignment>
 80118ae:	3004      	adds	r0, #4
 80118b0:	4420      	add	r0, r4
 80118b2:	bd10      	pop	{r4, pc}
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop

080118b8 <_Time__max_serialized_size>:
 80118b8:	b510      	push	{r4, lr}
 80118ba:	2104      	movs	r1, #4
 80118bc:	2000      	movs	r0, #0
 80118be:	f001 fe6f 	bl	80135a0 <ucdr_alignment>
 80118c2:	2104      	movs	r1, #4
 80118c4:	1844      	adds	r4, r0, r1
 80118c6:	4620      	mov	r0, r4
 80118c8:	f001 fe6a 	bl	80135a0 <ucdr_alignment>
 80118cc:	3004      	adds	r0, #4
 80118ce:	4420      	add	r0, r4
 80118d0:	bd10      	pop	{r4, pc}
 80118d2:	bf00      	nop

080118d4 <max_serialized_size_builtin_interfaces__msg__Time>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	460c      	mov	r4, r1
 80118d8:	2301      	movs	r3, #1
 80118da:	2104      	movs	r1, #4
 80118dc:	1d25      	adds	r5, r4, #4
 80118de:	7003      	strb	r3, [r0, #0]
 80118e0:	4620      	mov	r0, r4
 80118e2:	f1c4 0404 	rsb	r4, r4, #4
 80118e6:	f001 fe5b 	bl	80135a0 <ucdr_alignment>
 80118ea:	4405      	add	r5, r0
 80118ec:	2104      	movs	r1, #4
 80118ee:	4628      	mov	r0, r5
 80118f0:	f001 fe56 	bl	80135a0 <ucdr_alignment>
 80118f4:	4420      	add	r0, r4
 80118f6:	4428      	add	r0, r5
 80118f8:	bd38      	pop	{r3, r4, r5, pc}
 80118fa:	bf00      	nop

080118fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80118fc:	4800      	ldr	r0, [pc, #0]	@ (8011900 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80118fe:	4770      	bx	lr
 8011900:	24000444 	.word	0x24000444

08011904 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8011904:	f009 bc2a 	b.w	801b15c <geometry_msgs__msg__Quaternion__init>

08011908 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8011908:	f009 bc38 	b.w	801b17c <geometry_msgs__msg__Quaternion__fini>

0801190c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801190c:	4b04      	ldr	r3, [pc, #16]	@ (8011920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801190e:	681a      	ldr	r2, [r3, #0]
 8011910:	b10a      	cbz	r2, 8011916 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8011912:	4803      	ldr	r0, [pc, #12]	@ (8011920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011914:	4770      	bx	lr
 8011916:	4a03      	ldr	r2, [pc, #12]	@ (8011924 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8011918:	4801      	ldr	r0, [pc, #4]	@ (8011920 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801191a:	6812      	ldr	r2, [r2, #0]
 801191c:	601a      	str	r2, [r3, #0]
 801191e:	4770      	bx	lr
 8011920:	2400055c 	.word	0x2400055c
 8011924:	2400067c 	.word	0x2400067c

08011928 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8011928:	f009 bc2a 	b.w	801b180 <geometry_msgs__msg__Vector3__init>

0801192c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 801192c:	f009 bc2c 	b.w	801b188 <geometry_msgs__msg__Vector3__fini>

08011930 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8011930:	4b04      	ldr	r3, [pc, #16]	@ (8011944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	b10a      	cbz	r2, 801193a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8011936:	4803      	ldr	r0, [pc, #12]	@ (8011944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8011938:	4770      	bx	lr
 801193a:	4a03      	ldr	r2, [pc, #12]	@ (8011948 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 801193c:	4801      	ldr	r0, [pc, #4]	@ (8011944 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801193e:	6812      	ldr	r2, [r2, #0]
 8011940:	601a      	str	r2, [r3, #0]
 8011942:	4770      	bx	lr
 8011944:	2400061c 	.word	0x2400061c
 8011948:	2400067c 	.word	0x2400067c

0801194c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 801194c:	b1e8      	cbz	r0, 801198a <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 801194e:	b570      	push	{r4, r5, r6, lr}
 8011950:	460d      	mov	r5, r1
 8011952:	2108      	movs	r1, #8
 8011954:	4628      	mov	r0, r5
 8011956:	f001 fe23 	bl	80135a0 <ucdr_alignment>
 801195a:	f105 0308 	add.w	r3, r5, #8
 801195e:	2108      	movs	r1, #8
 8011960:	f1c5 0508 	rsb	r5, r5, #8
 8011964:	181e      	adds	r6, r3, r0
 8011966:	4630      	mov	r0, r6
 8011968:	f001 fe1a 	bl	80135a0 <ucdr_alignment>
 801196c:	2108      	movs	r1, #8
 801196e:	1844      	adds	r4, r0, r1
 8011970:	4434      	add	r4, r6
 8011972:	4620      	mov	r0, r4
 8011974:	f001 fe14 	bl	80135a0 <ucdr_alignment>
 8011978:	2108      	movs	r1, #8
 801197a:	4408      	add	r0, r1
 801197c:	4404      	add	r4, r0
 801197e:	4620      	mov	r0, r4
 8011980:	f001 fe0e 	bl	80135a0 <ucdr_alignment>
 8011984:	4428      	add	r0, r5
 8011986:	4420      	add	r0, r4
 8011988:	bd70      	pop	{r4, r5, r6, pc}
 801198a:	4770      	bx	lr

0801198c <_Quaternion__cdr_deserialize>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	460c      	mov	r4, r1
 8011990:	b199      	cbz	r1, 80119ba <_Quaternion__cdr_deserialize+0x2e>
 8011992:	4605      	mov	r5, r0
 8011994:	f001 fc18 	bl	80131c8 <ucdr_deserialize_double>
 8011998:	f104 0108 	add.w	r1, r4, #8
 801199c:	4628      	mov	r0, r5
 801199e:	f001 fc13 	bl	80131c8 <ucdr_deserialize_double>
 80119a2:	f104 0110 	add.w	r1, r4, #16
 80119a6:	4628      	mov	r0, r5
 80119a8:	f001 fc0e 	bl	80131c8 <ucdr_deserialize_double>
 80119ac:	f104 0118 	add.w	r1, r4, #24
 80119b0:	4628      	mov	r0, r5
 80119b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119b6:	f001 bc07 	b.w	80131c8 <ucdr_deserialize_double>
 80119ba:	4608      	mov	r0, r1
 80119bc:	bd38      	pop	{r3, r4, r5, pc}
 80119be:	bf00      	nop

080119c0 <_Quaternion__cdr_serialize>:
 80119c0:	b1c0      	cbz	r0, 80119f4 <_Quaternion__cdr_serialize+0x34>
 80119c2:	b538      	push	{r3, r4, r5, lr}
 80119c4:	460d      	mov	r5, r1
 80119c6:	4604      	mov	r4, r0
 80119c8:	ed90 0b00 	vldr	d0, [r0]
 80119cc:	4608      	mov	r0, r1
 80119ce:	f001 fa59 	bl	8012e84 <ucdr_serialize_double>
 80119d2:	4628      	mov	r0, r5
 80119d4:	ed94 0b02 	vldr	d0, [r4, #8]
 80119d8:	f001 fa54 	bl	8012e84 <ucdr_serialize_double>
 80119dc:	4628      	mov	r0, r5
 80119de:	ed94 0b04 	vldr	d0, [r4, #16]
 80119e2:	f001 fa4f 	bl	8012e84 <ucdr_serialize_double>
 80119e6:	4628      	mov	r0, r5
 80119e8:	ed94 0b06 	vldr	d0, [r4, #24]
 80119ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119f0:	f001 ba48 	b.w	8012e84 <ucdr_serialize_double>
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop

080119f8 <_Quaternion__get_serialized_size>:
 80119f8:	b1c0      	cbz	r0, 8011a2c <_Quaternion__get_serialized_size+0x34>
 80119fa:	2108      	movs	r1, #8
 80119fc:	2000      	movs	r0, #0
 80119fe:	b538      	push	{r3, r4, r5, lr}
 8011a00:	f001 fdce 	bl	80135a0 <ucdr_alignment>
 8011a04:	2108      	movs	r1, #8
 8011a06:	1845      	adds	r5, r0, r1
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f001 fdc9 	bl	80135a0 <ucdr_alignment>
 8011a0e:	2108      	movs	r1, #8
 8011a10:	1844      	adds	r4, r0, r1
 8011a12:	442c      	add	r4, r5
 8011a14:	4620      	mov	r0, r4
 8011a16:	f001 fdc3 	bl	80135a0 <ucdr_alignment>
 8011a1a:	2108      	movs	r1, #8
 8011a1c:	4408      	add	r0, r1
 8011a1e:	4404      	add	r4, r0
 8011a20:	4620      	mov	r0, r4
 8011a22:	f001 fdbd 	bl	80135a0 <ucdr_alignment>
 8011a26:	3008      	adds	r0, #8
 8011a28:	4420      	add	r0, r4
 8011a2a:	bd38      	pop	{r3, r4, r5, pc}
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop

08011a30 <_Quaternion__max_serialized_size>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	2108      	movs	r1, #8
 8011a34:	2000      	movs	r0, #0
 8011a36:	f001 fdb3 	bl	80135a0 <ucdr_alignment>
 8011a3a:	2108      	movs	r1, #8
 8011a3c:	1845      	adds	r5, r0, r1
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f001 fdae 	bl	80135a0 <ucdr_alignment>
 8011a44:	2108      	movs	r1, #8
 8011a46:	1844      	adds	r4, r0, r1
 8011a48:	442c      	add	r4, r5
 8011a4a:	4620      	mov	r0, r4
 8011a4c:	f001 fda8 	bl	80135a0 <ucdr_alignment>
 8011a50:	2108      	movs	r1, #8
 8011a52:	4408      	add	r0, r1
 8011a54:	4404      	add	r4, r0
 8011a56:	4620      	mov	r0, r4
 8011a58:	f001 fda2 	bl	80135a0 <ucdr_alignment>
 8011a5c:	3008      	adds	r0, #8
 8011a5e:	4420      	add	r0, r4
 8011a60:	bd38      	pop	{r3, r4, r5, pc}
 8011a62:	bf00      	nop

08011a64 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011a64:	b570      	push	{r4, r5, r6, lr}
 8011a66:	460c      	mov	r4, r1
 8011a68:	2301      	movs	r3, #1
 8011a6a:	2108      	movs	r1, #8
 8011a6c:	f104 0508 	add.w	r5, r4, #8
 8011a70:	7003      	strb	r3, [r0, #0]
 8011a72:	4620      	mov	r0, r4
 8011a74:	f1c4 0408 	rsb	r4, r4, #8
 8011a78:	f001 fd92 	bl	80135a0 <ucdr_alignment>
 8011a7c:	1946      	adds	r6, r0, r5
 8011a7e:	2108      	movs	r1, #8
 8011a80:	4630      	mov	r0, r6
 8011a82:	f001 fd8d 	bl	80135a0 <ucdr_alignment>
 8011a86:	2108      	movs	r1, #8
 8011a88:	1845      	adds	r5, r0, r1
 8011a8a:	4435      	add	r5, r6
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f001 fd87 	bl	80135a0 <ucdr_alignment>
 8011a92:	2108      	movs	r1, #8
 8011a94:	4408      	add	r0, r1
 8011a96:	4405      	add	r5, r0
 8011a98:	4628      	mov	r0, r5
 8011a9a:	f001 fd81 	bl	80135a0 <ucdr_alignment>
 8011a9e:	4420      	add	r0, r4
 8011aa0:	4428      	add	r0, r5
 8011aa2:	bd70      	pop	{r4, r5, r6, pc}

08011aa4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011aa4:	4800      	ldr	r0, [pc, #0]	@ (8011aa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011aa6:	4770      	bx	lr
 8011aa8:	24000628 	.word	0x24000628

08011aac <get_serialized_size_geometry_msgs__msg__Vector3>:
 8011aac:	b1b8      	cbz	r0, 8011ade <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8011aae:	b538      	push	{r3, r4, r5, lr}
 8011ab0:	460d      	mov	r5, r1
 8011ab2:	2108      	movs	r1, #8
 8011ab4:	4628      	mov	r0, r5
 8011ab6:	f001 fd73 	bl	80135a0 <ucdr_alignment>
 8011aba:	f105 0308 	add.w	r3, r5, #8
 8011abe:	2108      	movs	r1, #8
 8011ac0:	f1c5 0508 	rsb	r5, r5, #8
 8011ac4:	181c      	adds	r4, r3, r0
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f001 fd6a 	bl	80135a0 <ucdr_alignment>
 8011acc:	2108      	movs	r1, #8
 8011ace:	4408      	add	r0, r1
 8011ad0:	4404      	add	r4, r0
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f001 fd64 	bl	80135a0 <ucdr_alignment>
 8011ad8:	4428      	add	r0, r5
 8011ada:	4420      	add	r0, r4
 8011adc:	bd38      	pop	{r3, r4, r5, pc}
 8011ade:	4770      	bx	lr

08011ae0 <_Vector3__cdr_deserialize>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	460c      	mov	r4, r1
 8011ae4:	b171      	cbz	r1, 8011b04 <_Vector3__cdr_deserialize+0x24>
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	f001 fb6e 	bl	80131c8 <ucdr_deserialize_double>
 8011aec:	f104 0108 	add.w	r1, r4, #8
 8011af0:	4628      	mov	r0, r5
 8011af2:	f001 fb69 	bl	80131c8 <ucdr_deserialize_double>
 8011af6:	f104 0110 	add.w	r1, r4, #16
 8011afa:	4628      	mov	r0, r5
 8011afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b00:	f001 bb62 	b.w	80131c8 <ucdr_deserialize_double>
 8011b04:	4608      	mov	r0, r1
 8011b06:	bd38      	pop	{r3, r4, r5, pc}

08011b08 <_Vector3__cdr_serialize>:
 8011b08:	b198      	cbz	r0, 8011b32 <_Vector3__cdr_serialize+0x2a>
 8011b0a:	b538      	push	{r3, r4, r5, lr}
 8011b0c:	460d      	mov	r5, r1
 8011b0e:	4604      	mov	r4, r0
 8011b10:	ed90 0b00 	vldr	d0, [r0]
 8011b14:	4608      	mov	r0, r1
 8011b16:	f001 f9b5 	bl	8012e84 <ucdr_serialize_double>
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	ed94 0b02 	vldr	d0, [r4, #8]
 8011b20:	f001 f9b0 	bl	8012e84 <ucdr_serialize_double>
 8011b24:	4628      	mov	r0, r5
 8011b26:	ed94 0b04 	vldr	d0, [r4, #16]
 8011b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b2e:	f001 b9a9 	b.w	8012e84 <ucdr_serialize_double>
 8011b32:	4770      	bx	lr

08011b34 <_Vector3__get_serialized_size>:
 8011b34:	b190      	cbz	r0, 8011b5c <_Vector3__get_serialized_size+0x28>
 8011b36:	2108      	movs	r1, #8
 8011b38:	2000      	movs	r0, #0
 8011b3a:	b510      	push	{r4, lr}
 8011b3c:	f001 fd30 	bl	80135a0 <ucdr_alignment>
 8011b40:	2108      	movs	r1, #8
 8011b42:	1844      	adds	r4, r0, r1
 8011b44:	4620      	mov	r0, r4
 8011b46:	f001 fd2b 	bl	80135a0 <ucdr_alignment>
 8011b4a:	2108      	movs	r1, #8
 8011b4c:	4408      	add	r0, r1
 8011b4e:	4404      	add	r4, r0
 8011b50:	4620      	mov	r0, r4
 8011b52:	f001 fd25 	bl	80135a0 <ucdr_alignment>
 8011b56:	3008      	adds	r0, #8
 8011b58:	4420      	add	r0, r4
 8011b5a:	bd10      	pop	{r4, pc}
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop

08011b60 <_Vector3__max_serialized_size>:
 8011b60:	b538      	push	{r3, r4, r5, lr}
 8011b62:	2108      	movs	r1, #8
 8011b64:	2000      	movs	r0, #0
 8011b66:	f001 fd1b 	bl	80135a0 <ucdr_alignment>
 8011b6a:	2108      	movs	r1, #8
 8011b6c:	1845      	adds	r5, r0, r1
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f001 fd16 	bl	80135a0 <ucdr_alignment>
 8011b74:	2108      	movs	r1, #8
 8011b76:	1844      	adds	r4, r0, r1
 8011b78:	442c      	add	r4, r5
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f001 fd10 	bl	80135a0 <ucdr_alignment>
 8011b80:	3008      	adds	r0, #8
 8011b82:	4420      	add	r0, r4
 8011b84:	bd38      	pop	{r3, r4, r5, pc}
 8011b86:	bf00      	nop

08011b88 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8011b88:	b570      	push	{r4, r5, r6, lr}
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	2108      	movs	r1, #8
 8011b90:	f104 0508 	add.w	r5, r4, #8
 8011b94:	7003      	strb	r3, [r0, #0]
 8011b96:	4620      	mov	r0, r4
 8011b98:	f1c4 0408 	rsb	r4, r4, #8
 8011b9c:	f001 fd00 	bl	80135a0 <ucdr_alignment>
 8011ba0:	1946      	adds	r6, r0, r5
 8011ba2:	2108      	movs	r1, #8
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	f001 fcfb 	bl	80135a0 <ucdr_alignment>
 8011baa:	2108      	movs	r1, #8
 8011bac:	1845      	adds	r5, r0, r1
 8011bae:	4435      	add	r5, r6
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	f001 fcf5 	bl	80135a0 <ucdr_alignment>
 8011bb6:	4420      	add	r0, r4
 8011bb8:	4428      	add	r0, r5
 8011bba:	bd70      	pop	{r4, r5, r6, pc}

08011bbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8011bbc:	4800      	ldr	r0, [pc, #0]	@ (8011bc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8011bbe:	4770      	bx	lr
 8011bc0:	24000650 	.word	0x24000650

08011bc4 <ucdr_serialize_endian_array_char>:
 8011bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bc8:	4619      	mov	r1, r3
 8011bca:	461f      	mov	r7, r3
 8011bcc:	4605      	mov	r5, r0
 8011bce:	4690      	mov	r8, r2
 8011bd0:	f001 fc8e 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011bd4:	b9e0      	cbnz	r0, 8011c10 <ucdr_serialize_endian_array_char+0x4c>
 8011bd6:	463e      	mov	r6, r7
 8011bd8:	e00b      	b.n	8011bf2 <ucdr_serialize_endian_array_char+0x2e>
 8011bda:	4441      	add	r1, r8
 8011bdc:	68a8      	ldr	r0, [r5, #8]
 8011bde:	4622      	mov	r2, r4
 8011be0:	1b36      	subs	r6, r6, r4
 8011be2:	f00b fa0a 	bl	801cffa <memcpy>
 8011be6:	68ab      	ldr	r3, [r5, #8]
 8011be8:	6928      	ldr	r0, [r5, #16]
 8011bea:	4423      	add	r3, r4
 8011bec:	4420      	add	r0, r4
 8011bee:	60ab      	str	r3, [r5, #8]
 8011bf0:	6128      	str	r0, [r5, #16]
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f001 fd04 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011bfc:	1bb9      	subs	r1, r7, r6
 8011bfe:	4604      	mov	r4, r0
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1ea      	bne.n	8011bda <ucdr_serialize_endian_array_char+0x16>
 8011c04:	2301      	movs	r3, #1
 8011c06:	7da8      	ldrb	r0, [r5, #22]
 8011c08:	756b      	strb	r3, [r5, #21]
 8011c0a:	4058      	eors	r0, r3
 8011c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c10:	463a      	mov	r2, r7
 8011c12:	4641      	mov	r1, r8
 8011c14:	68a8      	ldr	r0, [r5, #8]
 8011c16:	f00b f9f0 	bl	801cffa <memcpy>
 8011c1a:	68aa      	ldr	r2, [r5, #8]
 8011c1c:	692b      	ldr	r3, [r5, #16]
 8011c1e:	443a      	add	r2, r7
 8011c20:	443b      	add	r3, r7
 8011c22:	60aa      	str	r2, [r5, #8]
 8011c24:	612b      	str	r3, [r5, #16]
 8011c26:	e7ed      	b.n	8011c04 <ucdr_serialize_endian_array_char+0x40>

08011c28 <ucdr_deserialize_endian_array_char>:
 8011c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	461f      	mov	r7, r3
 8011c30:	4605      	mov	r5, r0
 8011c32:	4690      	mov	r8, r2
 8011c34:	f001 fc5c 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011c38:	b9e8      	cbnz	r0, 8011c76 <ucdr_deserialize_endian_array_char+0x4e>
 8011c3a:	463e      	mov	r6, r7
 8011c3c:	e00c      	b.n	8011c58 <ucdr_deserialize_endian_array_char+0x30>
 8011c3e:	eb08 0003 	add.w	r0, r8, r3
 8011c42:	68a9      	ldr	r1, [r5, #8]
 8011c44:	4622      	mov	r2, r4
 8011c46:	1b36      	subs	r6, r6, r4
 8011c48:	f00b f9d7 	bl	801cffa <memcpy>
 8011c4c:	68ab      	ldr	r3, [r5, #8]
 8011c4e:	6928      	ldr	r0, [r5, #16]
 8011c50:	4423      	add	r3, r4
 8011c52:	4420      	add	r0, r4
 8011c54:	60ab      	str	r3, [r5, #8]
 8011c56:	6128      	str	r0, [r5, #16]
 8011c58:	4631      	mov	r1, r6
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	4628      	mov	r0, r5
 8011c5e:	f001 fcd1 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011c62:	1bbb      	subs	r3, r7, r6
 8011c64:	4604      	mov	r4, r0
 8011c66:	2800      	cmp	r0, #0
 8011c68:	d1e9      	bne.n	8011c3e <ucdr_deserialize_endian_array_char+0x16>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	7da8      	ldrb	r0, [r5, #22]
 8011c6e:	756b      	strb	r3, [r5, #21]
 8011c70:	4058      	eors	r0, r3
 8011c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c76:	463a      	mov	r2, r7
 8011c78:	68a9      	ldr	r1, [r5, #8]
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	f00b f9bd 	bl	801cffa <memcpy>
 8011c80:	68aa      	ldr	r2, [r5, #8]
 8011c82:	692b      	ldr	r3, [r5, #16]
 8011c84:	443a      	add	r2, r7
 8011c86:	443b      	add	r3, r7
 8011c88:	60aa      	str	r2, [r5, #8]
 8011c8a:	612b      	str	r3, [r5, #16]
 8011c8c:	e7ed      	b.n	8011c6a <ucdr_deserialize_endian_array_char+0x42>
 8011c8e:	bf00      	nop

08011c90 <ucdr_serialize_array_uint8_t>:
 8011c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c94:	4688      	mov	r8, r1
 8011c96:	4611      	mov	r1, r2
 8011c98:	4617      	mov	r7, r2
 8011c9a:	4605      	mov	r5, r0
 8011c9c:	f001 fc28 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011ca0:	b9e0      	cbnz	r0, 8011cdc <ucdr_serialize_array_uint8_t+0x4c>
 8011ca2:	463e      	mov	r6, r7
 8011ca4:	e00b      	b.n	8011cbe <ucdr_serialize_array_uint8_t+0x2e>
 8011ca6:	4441      	add	r1, r8
 8011ca8:	68a8      	ldr	r0, [r5, #8]
 8011caa:	4622      	mov	r2, r4
 8011cac:	1b36      	subs	r6, r6, r4
 8011cae:	f00b f9a4 	bl	801cffa <memcpy>
 8011cb2:	68ab      	ldr	r3, [r5, #8]
 8011cb4:	6928      	ldr	r0, [r5, #16]
 8011cb6:	4423      	add	r3, r4
 8011cb8:	4420      	add	r0, r4
 8011cba:	60ab      	str	r3, [r5, #8]
 8011cbc:	6128      	str	r0, [r5, #16]
 8011cbe:	4631      	mov	r1, r6
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	f001 fc9e 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011cc8:	1bb9      	subs	r1, r7, r6
 8011cca:	4604      	mov	r4, r0
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d1ea      	bne.n	8011ca6 <ucdr_serialize_array_uint8_t+0x16>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	7da8      	ldrb	r0, [r5, #22]
 8011cd4:	756b      	strb	r3, [r5, #21]
 8011cd6:	4058      	eors	r0, r3
 8011cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cdc:	463a      	mov	r2, r7
 8011cde:	4641      	mov	r1, r8
 8011ce0:	68a8      	ldr	r0, [r5, #8]
 8011ce2:	f00b f98a 	bl	801cffa <memcpy>
 8011ce6:	68aa      	ldr	r2, [r5, #8]
 8011ce8:	692b      	ldr	r3, [r5, #16]
 8011cea:	443a      	add	r2, r7
 8011cec:	443b      	add	r3, r7
 8011cee:	60aa      	str	r2, [r5, #8]
 8011cf0:	612b      	str	r3, [r5, #16]
 8011cf2:	e7ed      	b.n	8011cd0 <ucdr_serialize_array_uint8_t+0x40>

08011cf4 <ucdr_serialize_endian_array_uint8_t>:
 8011cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	461f      	mov	r7, r3
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	4690      	mov	r8, r2
 8011d00:	f001 fbf6 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011d04:	b9e0      	cbnz	r0, 8011d40 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011d06:	463e      	mov	r6, r7
 8011d08:	e00b      	b.n	8011d22 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8011d0a:	4441      	add	r1, r8
 8011d0c:	68a8      	ldr	r0, [r5, #8]
 8011d0e:	4622      	mov	r2, r4
 8011d10:	1b36      	subs	r6, r6, r4
 8011d12:	f00b f972 	bl	801cffa <memcpy>
 8011d16:	68ab      	ldr	r3, [r5, #8]
 8011d18:	6928      	ldr	r0, [r5, #16]
 8011d1a:	4423      	add	r3, r4
 8011d1c:	4420      	add	r0, r4
 8011d1e:	60ab      	str	r3, [r5, #8]
 8011d20:	6128      	str	r0, [r5, #16]
 8011d22:	4631      	mov	r1, r6
 8011d24:	2201      	movs	r2, #1
 8011d26:	4628      	mov	r0, r5
 8011d28:	f001 fc6c 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011d2c:	1bb9      	subs	r1, r7, r6
 8011d2e:	4604      	mov	r4, r0
 8011d30:	2800      	cmp	r0, #0
 8011d32:	d1ea      	bne.n	8011d0a <ucdr_serialize_endian_array_uint8_t+0x16>
 8011d34:	2301      	movs	r3, #1
 8011d36:	7da8      	ldrb	r0, [r5, #22]
 8011d38:	756b      	strb	r3, [r5, #21]
 8011d3a:	4058      	eors	r0, r3
 8011d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d40:	463a      	mov	r2, r7
 8011d42:	4641      	mov	r1, r8
 8011d44:	68a8      	ldr	r0, [r5, #8]
 8011d46:	f00b f958 	bl	801cffa <memcpy>
 8011d4a:	68aa      	ldr	r2, [r5, #8]
 8011d4c:	692b      	ldr	r3, [r5, #16]
 8011d4e:	443a      	add	r2, r7
 8011d50:	443b      	add	r3, r7
 8011d52:	60aa      	str	r2, [r5, #8]
 8011d54:	612b      	str	r3, [r5, #16]
 8011d56:	e7ed      	b.n	8011d34 <ucdr_serialize_endian_array_uint8_t+0x40>

08011d58 <ucdr_deserialize_array_uint8_t>:
 8011d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d5c:	4688      	mov	r8, r1
 8011d5e:	4611      	mov	r1, r2
 8011d60:	4617      	mov	r7, r2
 8011d62:	4605      	mov	r5, r0
 8011d64:	f001 fbc4 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011d68:	b9e8      	cbnz	r0, 8011da6 <ucdr_deserialize_array_uint8_t+0x4e>
 8011d6a:	463e      	mov	r6, r7
 8011d6c:	e00c      	b.n	8011d88 <ucdr_deserialize_array_uint8_t+0x30>
 8011d6e:	eb08 0003 	add.w	r0, r8, r3
 8011d72:	68a9      	ldr	r1, [r5, #8]
 8011d74:	4622      	mov	r2, r4
 8011d76:	1b36      	subs	r6, r6, r4
 8011d78:	f00b f93f 	bl	801cffa <memcpy>
 8011d7c:	68ab      	ldr	r3, [r5, #8]
 8011d7e:	6928      	ldr	r0, [r5, #16]
 8011d80:	4423      	add	r3, r4
 8011d82:	4420      	add	r0, r4
 8011d84:	60ab      	str	r3, [r5, #8]
 8011d86:	6128      	str	r0, [r5, #16]
 8011d88:	4631      	mov	r1, r6
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	f001 fc39 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011d92:	1bbb      	subs	r3, r7, r6
 8011d94:	4604      	mov	r4, r0
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d1e9      	bne.n	8011d6e <ucdr_deserialize_array_uint8_t+0x16>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	7da8      	ldrb	r0, [r5, #22]
 8011d9e:	756b      	strb	r3, [r5, #21]
 8011da0:	4058      	eors	r0, r3
 8011da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da6:	463a      	mov	r2, r7
 8011da8:	68a9      	ldr	r1, [r5, #8]
 8011daa:	4640      	mov	r0, r8
 8011dac:	f00b f925 	bl	801cffa <memcpy>
 8011db0:	68aa      	ldr	r2, [r5, #8]
 8011db2:	692b      	ldr	r3, [r5, #16]
 8011db4:	443a      	add	r2, r7
 8011db6:	443b      	add	r3, r7
 8011db8:	60aa      	str	r2, [r5, #8]
 8011dba:	612b      	str	r3, [r5, #16]
 8011dbc:	e7ed      	b.n	8011d9a <ucdr_deserialize_array_uint8_t+0x42>
 8011dbe:	bf00      	nop

08011dc0 <ucdr_deserialize_endian_array_uint8_t>:
 8011dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	461f      	mov	r7, r3
 8011dc8:	4605      	mov	r5, r0
 8011dca:	4690      	mov	r8, r2
 8011dcc:	f001 fb90 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011dd0:	b9e8      	cbnz	r0, 8011e0e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8011dd2:	463e      	mov	r6, r7
 8011dd4:	e00c      	b.n	8011df0 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8011dd6:	eb08 0003 	add.w	r0, r8, r3
 8011dda:	68a9      	ldr	r1, [r5, #8]
 8011ddc:	4622      	mov	r2, r4
 8011dde:	1b36      	subs	r6, r6, r4
 8011de0:	f00b f90b 	bl	801cffa <memcpy>
 8011de4:	68ab      	ldr	r3, [r5, #8]
 8011de6:	6928      	ldr	r0, [r5, #16]
 8011de8:	4423      	add	r3, r4
 8011dea:	4420      	add	r0, r4
 8011dec:	60ab      	str	r3, [r5, #8]
 8011dee:	6128      	str	r0, [r5, #16]
 8011df0:	4631      	mov	r1, r6
 8011df2:	2201      	movs	r2, #1
 8011df4:	4628      	mov	r0, r5
 8011df6:	f001 fc05 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011dfa:	1bbb      	subs	r3, r7, r6
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	d1e9      	bne.n	8011dd6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011e02:	2301      	movs	r3, #1
 8011e04:	7da8      	ldrb	r0, [r5, #22]
 8011e06:	756b      	strb	r3, [r5, #21]
 8011e08:	4058      	eors	r0, r3
 8011e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e0e:	463a      	mov	r2, r7
 8011e10:	68a9      	ldr	r1, [r5, #8]
 8011e12:	4640      	mov	r0, r8
 8011e14:	f00b f8f1 	bl	801cffa <memcpy>
 8011e18:	68aa      	ldr	r2, [r5, #8]
 8011e1a:	692b      	ldr	r3, [r5, #16]
 8011e1c:	443a      	add	r2, r7
 8011e1e:	443b      	add	r3, r7
 8011e20:	60aa      	str	r2, [r5, #8]
 8011e22:	612b      	str	r3, [r5, #16]
 8011e24:	e7ed      	b.n	8011e02 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8011e26:	bf00      	nop

08011e28 <ucdr_serialize_array_double>:
 8011e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	460e      	mov	r6, r1
 8011e30:	2108      	movs	r1, #8
 8011e32:	4617      	mov	r7, r2
 8011e34:	f001 fbbc 	bl	80135b0 <ucdr_buffer_alignment>
 8011e38:	4601      	mov	r1, r0
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	7d65      	ldrb	r5, [r4, #21]
 8011e3e:	f001 fbff 	bl	8013640 <ucdr_advance_buffer>
 8011e42:	7d21      	ldrb	r1, [r4, #20]
 8011e44:	7565      	strb	r5, [r4, #21]
 8011e46:	2901      	cmp	r1, #1
 8011e48:	d010      	beq.n	8011e6c <ucdr_serialize_array_double+0x44>
 8011e4a:	b157      	cbz	r7, 8011e62 <ucdr_serialize_array_double+0x3a>
 8011e4c:	2500      	movs	r5, #0
 8011e4e:	e000      	b.n	8011e52 <ucdr_serialize_array_double+0x2a>
 8011e50:	7d21      	ldrb	r1, [r4, #20]
 8011e52:	3501      	adds	r5, #1
 8011e54:	4620      	mov	r0, r4
 8011e56:	ecb6 0b02 	vldmia	r6!, {d0}
 8011e5a:	f001 f8e3 	bl	8013024 <ucdr_serialize_endian_double>
 8011e5e:	42af      	cmp	r7, r5
 8011e60:	d1f6      	bne.n	8011e50 <ucdr_serialize_array_double+0x28>
 8011e62:	7da0      	ldrb	r0, [r4, #22]
 8011e64:	f080 0001 	eor.w	r0, r0, #1
 8011e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e6c:	00ff      	lsls	r7, r7, #3
 8011e6e:	4620      	mov	r0, r4
 8011e70:	4639      	mov	r1, r7
 8011e72:	f001 fb3d 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011e76:	b9f8      	cbnz	r0, 8011eb8 <ucdr_serialize_array_double+0x90>
 8011e78:	46b8      	mov	r8, r7
 8011e7a:	e00c      	b.n	8011e96 <ucdr_serialize_array_double+0x6e>
 8011e7c:	462a      	mov	r2, r5
 8011e7e:	4431      	add	r1, r6
 8011e80:	68a0      	ldr	r0, [r4, #8]
 8011e82:	eba8 0805 	sub.w	r8, r8, r5
 8011e86:	f00b f8b8 	bl	801cffa <memcpy>
 8011e8a:	68a2      	ldr	r2, [r4, #8]
 8011e8c:	6923      	ldr	r3, [r4, #16]
 8011e8e:	442a      	add	r2, r5
 8011e90:	442b      	add	r3, r5
 8011e92:	60a2      	str	r2, [r4, #8]
 8011e94:	6123      	str	r3, [r4, #16]
 8011e96:	4641      	mov	r1, r8
 8011e98:	2208      	movs	r2, #8
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f001 fbb2 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011ea0:	eba7 0108 	sub.w	r1, r7, r8
 8011ea4:	4605      	mov	r5, r0
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d1e8      	bne.n	8011e7c <ucdr_serialize_array_double+0x54>
 8011eaa:	2308      	movs	r3, #8
 8011eac:	7da0      	ldrb	r0, [r4, #22]
 8011eae:	7563      	strb	r3, [r4, #21]
 8011eb0:	f080 0001 	eor.w	r0, r0, #1
 8011eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eb8:	463a      	mov	r2, r7
 8011eba:	4631      	mov	r1, r6
 8011ebc:	68a0      	ldr	r0, [r4, #8]
 8011ebe:	f00b f89c 	bl	801cffa <memcpy>
 8011ec2:	68a2      	ldr	r2, [r4, #8]
 8011ec4:	6923      	ldr	r3, [r4, #16]
 8011ec6:	443a      	add	r2, r7
 8011ec8:	441f      	add	r7, r3
 8011eca:	60a2      	str	r2, [r4, #8]
 8011ecc:	6127      	str	r7, [r4, #16]
 8011ece:	e7ec      	b.n	8011eaa <ucdr_serialize_array_double+0x82>

08011ed0 <ucdr_deserialize_array_double>:
 8011ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	460e      	mov	r6, r1
 8011ed8:	2108      	movs	r1, #8
 8011eda:	4617      	mov	r7, r2
 8011edc:	f001 fb68 	bl	80135b0 <ucdr_buffer_alignment>
 8011ee0:	4601      	mov	r1, r0
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	7d65      	ldrb	r5, [r4, #21]
 8011ee6:	f001 fbab 	bl	8013640 <ucdr_advance_buffer>
 8011eea:	7d21      	ldrb	r1, [r4, #20]
 8011eec:	7565      	strb	r5, [r4, #21]
 8011eee:	2901      	cmp	r1, #1
 8011ef0:	d010      	beq.n	8011f14 <ucdr_deserialize_array_double+0x44>
 8011ef2:	b157      	cbz	r7, 8011f0a <ucdr_deserialize_array_double+0x3a>
 8011ef4:	2500      	movs	r5, #0
 8011ef6:	e000      	b.n	8011efa <ucdr_deserialize_array_double+0x2a>
 8011ef8:	7d21      	ldrb	r1, [r4, #20]
 8011efa:	3501      	adds	r5, #1
 8011efc:	4632      	mov	r2, r6
 8011efe:	4620      	mov	r0, r4
 8011f00:	3608      	adds	r6, #8
 8011f02:	f001 fa27 	bl	8013354 <ucdr_deserialize_endian_double>
 8011f06:	42af      	cmp	r7, r5
 8011f08:	d1f6      	bne.n	8011ef8 <ucdr_deserialize_array_double+0x28>
 8011f0a:	7da0      	ldrb	r0, [r4, #22]
 8011f0c:	f080 0001 	eor.w	r0, r0, #1
 8011f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f14:	00ff      	lsls	r7, r7, #3
 8011f16:	4620      	mov	r0, r4
 8011f18:	4639      	mov	r1, r7
 8011f1a:	f001 fae9 	bl	80134f0 <ucdr_check_buffer_available_for>
 8011f1e:	b9f8      	cbnz	r0, 8011f60 <ucdr_deserialize_array_double+0x90>
 8011f20:	46b8      	mov	r8, r7
 8011f22:	e00c      	b.n	8011f3e <ucdr_deserialize_array_double+0x6e>
 8011f24:	18f0      	adds	r0, r6, r3
 8011f26:	462a      	mov	r2, r5
 8011f28:	68a1      	ldr	r1, [r4, #8]
 8011f2a:	eba8 0805 	sub.w	r8, r8, r5
 8011f2e:	f00b f864 	bl	801cffa <memcpy>
 8011f32:	68a2      	ldr	r2, [r4, #8]
 8011f34:	6923      	ldr	r3, [r4, #16]
 8011f36:	442a      	add	r2, r5
 8011f38:	442b      	add	r3, r5
 8011f3a:	60a2      	str	r2, [r4, #8]
 8011f3c:	6123      	str	r3, [r4, #16]
 8011f3e:	4641      	mov	r1, r8
 8011f40:	2208      	movs	r2, #8
 8011f42:	4620      	mov	r0, r4
 8011f44:	f001 fb5e 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8011f48:	eba7 0308 	sub.w	r3, r7, r8
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d1e8      	bne.n	8011f24 <ucdr_deserialize_array_double+0x54>
 8011f52:	2308      	movs	r3, #8
 8011f54:	7da0      	ldrb	r0, [r4, #22]
 8011f56:	7563      	strb	r3, [r4, #21]
 8011f58:	f080 0001 	eor.w	r0, r0, #1
 8011f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f60:	463a      	mov	r2, r7
 8011f62:	68a1      	ldr	r1, [r4, #8]
 8011f64:	4630      	mov	r0, r6
 8011f66:	f00b f848 	bl	801cffa <memcpy>
 8011f6a:	68a2      	ldr	r2, [r4, #8]
 8011f6c:	6923      	ldr	r3, [r4, #16]
 8011f6e:	443a      	add	r2, r7
 8011f70:	441f      	add	r7, r3
 8011f72:	60a2      	str	r2, [r4, #8]
 8011f74:	6127      	str	r7, [r4, #16]
 8011f76:	e7ec      	b.n	8011f52 <ucdr_deserialize_array_double+0x82>

08011f78 <ucdr_serialize_bool>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	2101      	movs	r1, #1
 8011f7e:	4604      	mov	r4, r0
 8011f80:	f001 fac2 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8011f84:	b148      	cbz	r0, 8011f9a <ucdr_serialize_bool+0x22>
 8011f86:	68a3      	ldr	r3, [r4, #8]
 8011f88:	2101      	movs	r1, #1
 8011f8a:	701d      	strb	r5, [r3, #0]
 8011f8c:	68a2      	ldr	r2, [r4, #8]
 8011f8e:	6923      	ldr	r3, [r4, #16]
 8011f90:	440a      	add	r2, r1
 8011f92:	7561      	strb	r1, [r4, #21]
 8011f94:	440b      	add	r3, r1
 8011f96:	60a2      	str	r2, [r4, #8]
 8011f98:	6123      	str	r3, [r4, #16]
 8011f9a:	7da0      	ldrb	r0, [r4, #22]
 8011f9c:	f080 0001 	eor.w	r0, r0, #1
 8011fa0:	bd38      	pop	{r3, r4, r5, pc}
 8011fa2:	bf00      	nop

08011fa4 <ucdr_deserialize_bool>:
 8011fa4:	b538      	push	{r3, r4, r5, lr}
 8011fa6:	460d      	mov	r5, r1
 8011fa8:	2101      	movs	r1, #1
 8011faa:	4604      	mov	r4, r0
 8011fac:	f001 faac 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8011fb0:	b160      	cbz	r0, 8011fcc <ucdr_deserialize_bool+0x28>
 8011fb2:	68a2      	ldr	r2, [r4, #8]
 8011fb4:	2101      	movs	r1, #1
 8011fb6:	6923      	ldr	r3, [r4, #16]
 8011fb8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011fbc:	440b      	add	r3, r1
 8011fbe:	3800      	subs	r0, #0
 8011fc0:	bf18      	it	ne
 8011fc2:	2001      	movne	r0, #1
 8011fc4:	7028      	strb	r0, [r5, #0]
 8011fc6:	60a2      	str	r2, [r4, #8]
 8011fc8:	6123      	str	r3, [r4, #16]
 8011fca:	7561      	strb	r1, [r4, #21]
 8011fcc:	7da0      	ldrb	r0, [r4, #22]
 8011fce:	f080 0001 	eor.w	r0, r0, #1
 8011fd2:	bd38      	pop	{r3, r4, r5, pc}

08011fd4 <ucdr_serialize_uint8_t>:
 8011fd4:	b538      	push	{r3, r4, r5, lr}
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	2101      	movs	r1, #1
 8011fda:	4604      	mov	r4, r0
 8011fdc:	f001 fa94 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8011fe0:	b148      	cbz	r0, 8011ff6 <ucdr_serialize_uint8_t+0x22>
 8011fe2:	68a3      	ldr	r3, [r4, #8]
 8011fe4:	2101      	movs	r1, #1
 8011fe6:	701d      	strb	r5, [r3, #0]
 8011fe8:	68a2      	ldr	r2, [r4, #8]
 8011fea:	6923      	ldr	r3, [r4, #16]
 8011fec:	440a      	add	r2, r1
 8011fee:	7561      	strb	r1, [r4, #21]
 8011ff0:	440b      	add	r3, r1
 8011ff2:	60a2      	str	r2, [r4, #8]
 8011ff4:	6123      	str	r3, [r4, #16]
 8011ff6:	7da0      	ldrb	r0, [r4, #22]
 8011ff8:	f080 0001 	eor.w	r0, r0, #1
 8011ffc:	bd38      	pop	{r3, r4, r5, pc}
 8011ffe:	bf00      	nop

08012000 <ucdr_deserialize_uint8_t>:
 8012000:	b538      	push	{r3, r4, r5, lr}
 8012002:	460d      	mov	r5, r1
 8012004:	2101      	movs	r1, #1
 8012006:	4604      	mov	r4, r0
 8012008:	f001 fa7e 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801200c:	b150      	cbz	r0, 8012024 <ucdr_deserialize_uint8_t+0x24>
 801200e:	68a3      	ldr	r3, [r4, #8]
 8012010:	2101      	movs	r1, #1
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	702b      	strb	r3, [r5, #0]
 8012016:	68a2      	ldr	r2, [r4, #8]
 8012018:	6923      	ldr	r3, [r4, #16]
 801201a:	440a      	add	r2, r1
 801201c:	7561      	strb	r1, [r4, #21]
 801201e:	440b      	add	r3, r1
 8012020:	60a2      	str	r2, [r4, #8]
 8012022:	6123      	str	r3, [r4, #16]
 8012024:	7da0      	ldrb	r0, [r4, #22]
 8012026:	f080 0001 	eor.w	r0, r0, #1
 801202a:	bd38      	pop	{r3, r4, r5, pc}

0801202c <ucdr_serialize_uint16_t>:
 801202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012030:	460b      	mov	r3, r1
 8012032:	b082      	sub	sp, #8
 8012034:	4604      	mov	r4, r0
 8012036:	2102      	movs	r1, #2
 8012038:	f8ad 3006 	strh.w	r3, [sp, #6]
 801203c:	f001 fab8 	bl	80135b0 <ucdr_buffer_alignment>
 8012040:	4601      	mov	r1, r0
 8012042:	4620      	mov	r0, r4
 8012044:	7d67      	ldrb	r7, [r4, #21]
 8012046:	f001 fafb 	bl	8013640 <ucdr_advance_buffer>
 801204a:	2102      	movs	r1, #2
 801204c:	4620      	mov	r0, r4
 801204e:	f001 fa4f 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012052:	bb78      	cbnz	r0, 80120b4 <ucdr_serialize_uint16_t+0x88>
 8012054:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012058:	42ab      	cmp	r3, r5
 801205a:	d926      	bls.n	80120aa <ucdr_serialize_uint16_t+0x7e>
 801205c:	1b5e      	subs	r6, r3, r5
 801205e:	60a3      	str	r3, [r4, #8]
 8012060:	6923      	ldr	r3, [r4, #16]
 8012062:	4620      	mov	r0, r4
 8012064:	f1c6 0802 	rsb	r8, r6, #2
 8012068:	4433      	add	r3, r6
 801206a:	4641      	mov	r1, r8
 801206c:	6123      	str	r3, [r4, #16]
 801206e:	f001 fa4b 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012072:	2800      	cmp	r0, #0
 8012074:	d03b      	beq.n	80120ee <ucdr_serialize_uint16_t+0xc2>
 8012076:	7d23      	ldrb	r3, [r4, #20]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d04a      	beq.n	8012112 <ucdr_serialize_uint16_t+0xe6>
 801207c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012080:	702b      	strb	r3, [r5, #0]
 8012082:	2e00      	cmp	r6, #0
 8012084:	d040      	beq.n	8012108 <ucdr_serialize_uint16_t+0xdc>
 8012086:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801208a:	706b      	strb	r3, [r5, #1]
 801208c:	6923      	ldr	r3, [r4, #16]
 801208e:	2102      	movs	r1, #2
 8012090:	68a2      	ldr	r2, [r4, #8]
 8012092:	3302      	adds	r3, #2
 8012094:	7da0      	ldrb	r0, [r4, #22]
 8012096:	4442      	add	r2, r8
 8012098:	7561      	strb	r1, [r4, #21]
 801209a:	1b9e      	subs	r6, r3, r6
 801209c:	f080 0001 	eor.w	r0, r0, #1
 80120a0:	60a2      	str	r2, [r4, #8]
 80120a2:	6126      	str	r6, [r4, #16]
 80120a4:	b002      	add	sp, #8
 80120a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120aa:	2102      	movs	r1, #2
 80120ac:	4620      	mov	r0, r4
 80120ae:	f001 fa2b 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80120b2:	b190      	cbz	r0, 80120da <ucdr_serialize_uint16_t+0xae>
 80120b4:	7d23      	ldrb	r3, [r4, #20]
 80120b6:	2b01      	cmp	r3, #1
 80120b8:	68a3      	ldr	r3, [r4, #8]
 80120ba:	d014      	beq.n	80120e6 <ucdr_serialize_uint16_t+0xba>
 80120bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80120c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120c4:	7019      	strb	r1, [r3, #0]
 80120c6:	68a3      	ldr	r3, [r4, #8]
 80120c8:	705a      	strb	r2, [r3, #1]
 80120ca:	2102      	movs	r1, #2
 80120cc:	68a2      	ldr	r2, [r4, #8]
 80120ce:	6923      	ldr	r3, [r4, #16]
 80120d0:	440a      	add	r2, r1
 80120d2:	7561      	strb	r1, [r4, #21]
 80120d4:	440b      	add	r3, r1
 80120d6:	60a2      	str	r2, [r4, #8]
 80120d8:	6123      	str	r3, [r4, #16]
 80120da:	7da0      	ldrb	r0, [r4, #22]
 80120dc:	f080 0001 	eor.w	r0, r0, #1
 80120e0:	b002      	add	sp, #8
 80120e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80120ea:	801a      	strh	r2, [r3, #0]
 80120ec:	e7ed      	b.n	80120ca <ucdr_serialize_uint16_t+0x9e>
 80120ee:	68a2      	ldr	r2, [r4, #8]
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	7da0      	ldrb	r0, [r4, #22]
 80120f4:	1b92      	subs	r2, r2, r6
 80120f6:	1b9b      	subs	r3, r3, r6
 80120f8:	7567      	strb	r7, [r4, #21]
 80120fa:	f080 0001 	eor.w	r0, r0, #1
 80120fe:	60a2      	str	r2, [r4, #8]
 8012100:	6123      	str	r3, [r4, #16]
 8012102:	b002      	add	sp, #8
 8012104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012108:	68a3      	ldr	r3, [r4, #8]
 801210a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801210e:	701a      	strb	r2, [r3, #0]
 8012110:	e7bc      	b.n	801208c <ucdr_serialize_uint16_t+0x60>
 8012112:	4628      	mov	r0, r5
 8012114:	f10d 0506 	add.w	r5, sp, #6
 8012118:	4632      	mov	r2, r6
 801211a:	4629      	mov	r1, r5
 801211c:	f00a ff6d 	bl	801cffa <memcpy>
 8012120:	4642      	mov	r2, r8
 8012122:	19a9      	adds	r1, r5, r6
 8012124:	68a0      	ldr	r0, [r4, #8]
 8012126:	f00a ff68 	bl	801cffa <memcpy>
 801212a:	e7af      	b.n	801208c <ucdr_serialize_uint16_t+0x60>

0801212c <ucdr_serialize_endian_uint16_t>:
 801212c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012130:	4604      	mov	r4, r0
 8012132:	b083      	sub	sp, #12
 8012134:	460d      	mov	r5, r1
 8012136:	2102      	movs	r1, #2
 8012138:	f8ad 2006 	strh.w	r2, [sp, #6]
 801213c:	f001 fa38 	bl	80135b0 <ucdr_buffer_alignment>
 8012140:	4601      	mov	r1, r0
 8012142:	4620      	mov	r0, r4
 8012144:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012148:	f001 fa7a 	bl	8013640 <ucdr_advance_buffer>
 801214c:	2102      	movs	r1, #2
 801214e:	4620      	mov	r0, r4
 8012150:	f001 f9ce 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012154:	bb70      	cbnz	r0, 80121b4 <ucdr_serialize_endian_uint16_t+0x88>
 8012156:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801215a:	42be      	cmp	r6, r7
 801215c:	d925      	bls.n	80121aa <ucdr_serialize_endian_uint16_t+0x7e>
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	4620      	mov	r0, r4
 8012162:	60a6      	str	r6, [r4, #8]
 8012164:	1bf6      	subs	r6, r6, r7
 8012166:	4433      	add	r3, r6
 8012168:	f1c6 0902 	rsb	r9, r6, #2
 801216c:	6123      	str	r3, [r4, #16]
 801216e:	4649      	mov	r1, r9
 8012170:	f001 f9ca 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012174:	2800      	cmp	r0, #0
 8012176:	d039      	beq.n	80121ec <ucdr_serialize_endian_uint16_t+0xc0>
 8012178:	2d01      	cmp	r5, #1
 801217a:	d04a      	beq.n	8012212 <ucdr_serialize_endian_uint16_t+0xe6>
 801217c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012180:	703b      	strb	r3, [r7, #0]
 8012182:	2e00      	cmp	r6, #0
 8012184:	d040      	beq.n	8012208 <ucdr_serialize_endian_uint16_t+0xdc>
 8012186:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801218a:	707b      	strb	r3, [r7, #1]
 801218c:	6923      	ldr	r3, [r4, #16]
 801218e:	2102      	movs	r1, #2
 8012190:	68a2      	ldr	r2, [r4, #8]
 8012192:	7da0      	ldrb	r0, [r4, #22]
 8012194:	3302      	adds	r3, #2
 8012196:	444a      	add	r2, r9
 8012198:	7561      	strb	r1, [r4, #21]
 801219a:	1b9b      	subs	r3, r3, r6
 801219c:	f080 0001 	eor.w	r0, r0, #1
 80121a0:	60a2      	str	r2, [r4, #8]
 80121a2:	6123      	str	r3, [r4, #16]
 80121a4:	b003      	add	sp, #12
 80121a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121aa:	2102      	movs	r1, #2
 80121ac:	4620      	mov	r0, r4
 80121ae:	f001 f9ab 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80121b2:	b188      	cbz	r0, 80121d8 <ucdr_serialize_endian_uint16_t+0xac>
 80121b4:	2d01      	cmp	r5, #1
 80121b6:	68a3      	ldr	r3, [r4, #8]
 80121b8:	d014      	beq.n	80121e4 <ucdr_serialize_endian_uint16_t+0xb8>
 80121ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80121be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121c2:	7019      	strb	r1, [r3, #0]
 80121c4:	68a3      	ldr	r3, [r4, #8]
 80121c6:	705a      	strb	r2, [r3, #1]
 80121c8:	2102      	movs	r1, #2
 80121ca:	68a2      	ldr	r2, [r4, #8]
 80121cc:	6923      	ldr	r3, [r4, #16]
 80121ce:	440a      	add	r2, r1
 80121d0:	7561      	strb	r1, [r4, #21]
 80121d2:	440b      	add	r3, r1
 80121d4:	60a2      	str	r2, [r4, #8]
 80121d6:	6123      	str	r3, [r4, #16]
 80121d8:	7da0      	ldrb	r0, [r4, #22]
 80121da:	f080 0001 	eor.w	r0, r0, #1
 80121de:	b003      	add	sp, #12
 80121e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80121e8:	801a      	strh	r2, [r3, #0]
 80121ea:	e7ed      	b.n	80121c8 <ucdr_serialize_endian_uint16_t+0x9c>
 80121ec:	68a2      	ldr	r2, [r4, #8]
 80121ee:	6923      	ldr	r3, [r4, #16]
 80121f0:	7da0      	ldrb	r0, [r4, #22]
 80121f2:	1b92      	subs	r2, r2, r6
 80121f4:	1b9b      	subs	r3, r3, r6
 80121f6:	f884 8015 	strb.w	r8, [r4, #21]
 80121fa:	f080 0001 	eor.w	r0, r0, #1
 80121fe:	60a2      	str	r2, [r4, #8]
 8012200:	6123      	str	r3, [r4, #16]
 8012202:	b003      	add	sp, #12
 8012204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012208:	68a3      	ldr	r3, [r4, #8]
 801220a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801220e:	701a      	strb	r2, [r3, #0]
 8012210:	e7bc      	b.n	801218c <ucdr_serialize_endian_uint16_t+0x60>
 8012212:	f10d 0506 	add.w	r5, sp, #6
 8012216:	4632      	mov	r2, r6
 8012218:	4638      	mov	r0, r7
 801221a:	4629      	mov	r1, r5
 801221c:	f00a feed 	bl	801cffa <memcpy>
 8012220:	464a      	mov	r2, r9
 8012222:	19a9      	adds	r1, r5, r6
 8012224:	68a0      	ldr	r0, [r4, #8]
 8012226:	f00a fee8 	bl	801cffa <memcpy>
 801222a:	e7af      	b.n	801218c <ucdr_serialize_endian_uint16_t+0x60>

0801222c <ucdr_deserialize_uint16_t>:
 801222c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012230:	4604      	mov	r4, r0
 8012232:	460d      	mov	r5, r1
 8012234:	2102      	movs	r1, #2
 8012236:	f001 f9bb 	bl	80135b0 <ucdr_buffer_alignment>
 801223a:	4601      	mov	r1, r0
 801223c:	4620      	mov	r0, r4
 801223e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012242:	f001 f9fd 	bl	8013640 <ucdr_advance_buffer>
 8012246:	2102      	movs	r1, #2
 8012248:	4620      	mov	r0, r4
 801224a:	f001 f951 	bl	80134f0 <ucdr_check_buffer_available_for>
 801224e:	bb60      	cbnz	r0, 80122aa <ucdr_deserialize_uint16_t+0x7e>
 8012250:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012254:	42be      	cmp	r6, r7
 8012256:	d923      	bls.n	80122a0 <ucdr_deserialize_uint16_t+0x74>
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	4620      	mov	r0, r4
 801225c:	60a6      	str	r6, [r4, #8]
 801225e:	1bf6      	subs	r6, r6, r7
 8012260:	4433      	add	r3, r6
 8012262:	f1c6 0902 	rsb	r9, r6, #2
 8012266:	6123      	str	r3, [r4, #16]
 8012268:	4649      	mov	r1, r9
 801226a:	f001 f94d 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801226e:	2800      	cmp	r0, #0
 8012270:	d034      	beq.n	80122dc <ucdr_deserialize_uint16_t+0xb0>
 8012272:	7d23      	ldrb	r3, [r4, #20]
 8012274:	2b01      	cmp	r3, #1
 8012276:	d042      	beq.n	80122fe <ucdr_deserialize_uint16_t+0xd2>
 8012278:	787b      	ldrb	r3, [r7, #1]
 801227a:	702b      	strb	r3, [r5, #0]
 801227c:	2e00      	cmp	r6, #0
 801227e:	d03a      	beq.n	80122f6 <ucdr_deserialize_uint16_t+0xca>
 8012280:	783b      	ldrb	r3, [r7, #0]
 8012282:	706b      	strb	r3, [r5, #1]
 8012284:	6923      	ldr	r3, [r4, #16]
 8012286:	2102      	movs	r1, #2
 8012288:	68a2      	ldr	r2, [r4, #8]
 801228a:	3302      	adds	r3, #2
 801228c:	7da0      	ldrb	r0, [r4, #22]
 801228e:	444a      	add	r2, r9
 8012290:	7561      	strb	r1, [r4, #21]
 8012292:	1b9b      	subs	r3, r3, r6
 8012294:	f080 0001 	eor.w	r0, r0, #1
 8012298:	60a2      	str	r2, [r4, #8]
 801229a:	6123      	str	r3, [r4, #16]
 801229c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122a0:	2102      	movs	r1, #2
 80122a2:	4620      	mov	r0, r4
 80122a4:	f001 f930 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80122a8:	b180      	cbz	r0, 80122cc <ucdr_deserialize_uint16_t+0xa0>
 80122aa:	7d23      	ldrb	r3, [r4, #20]
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	68a3      	ldr	r3, [r4, #8]
 80122b0:	d011      	beq.n	80122d6 <ucdr_deserialize_uint16_t+0xaa>
 80122b2:	785b      	ldrb	r3, [r3, #1]
 80122b4:	702b      	strb	r3, [r5, #0]
 80122b6:	68a3      	ldr	r3, [r4, #8]
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	706b      	strb	r3, [r5, #1]
 80122bc:	2102      	movs	r1, #2
 80122be:	68a2      	ldr	r2, [r4, #8]
 80122c0:	6923      	ldr	r3, [r4, #16]
 80122c2:	440a      	add	r2, r1
 80122c4:	7561      	strb	r1, [r4, #21]
 80122c6:	440b      	add	r3, r1
 80122c8:	60a2      	str	r2, [r4, #8]
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	7da0      	ldrb	r0, [r4, #22]
 80122ce:	f080 0001 	eor.w	r0, r0, #1
 80122d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122d6:	881b      	ldrh	r3, [r3, #0]
 80122d8:	802b      	strh	r3, [r5, #0]
 80122da:	e7ef      	b.n	80122bc <ucdr_deserialize_uint16_t+0x90>
 80122dc:	68a2      	ldr	r2, [r4, #8]
 80122de:	6923      	ldr	r3, [r4, #16]
 80122e0:	1b92      	subs	r2, r2, r6
 80122e2:	7da0      	ldrb	r0, [r4, #22]
 80122e4:	1b9b      	subs	r3, r3, r6
 80122e6:	f884 8015 	strb.w	r8, [r4, #21]
 80122ea:	f080 0001 	eor.w	r0, r0, #1
 80122ee:	60a2      	str	r2, [r4, #8]
 80122f0:	6123      	str	r3, [r4, #16]
 80122f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122f6:	68a3      	ldr	r3, [r4, #8]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	706b      	strb	r3, [r5, #1]
 80122fc:	e7c2      	b.n	8012284 <ucdr_deserialize_uint16_t+0x58>
 80122fe:	4639      	mov	r1, r7
 8012300:	4632      	mov	r2, r6
 8012302:	4628      	mov	r0, r5
 8012304:	f00a fe79 	bl	801cffa <memcpy>
 8012308:	464a      	mov	r2, r9
 801230a:	19a8      	adds	r0, r5, r6
 801230c:	68a1      	ldr	r1, [r4, #8]
 801230e:	f00a fe74 	bl	801cffa <memcpy>
 8012312:	e7b7      	b.n	8012284 <ucdr_deserialize_uint16_t+0x58>

08012314 <ucdr_deserialize_endian_uint16_t>:
 8012314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012318:	4604      	mov	r4, r0
 801231a:	460e      	mov	r6, r1
 801231c:	2102      	movs	r1, #2
 801231e:	4615      	mov	r5, r2
 8012320:	f001 f946 	bl	80135b0 <ucdr_buffer_alignment>
 8012324:	4601      	mov	r1, r0
 8012326:	4620      	mov	r0, r4
 8012328:	f894 8015 	ldrb.w	r8, [r4, #21]
 801232c:	f001 f988 	bl	8013640 <ucdr_advance_buffer>
 8012330:	2102      	movs	r1, #2
 8012332:	4620      	mov	r0, r4
 8012334:	f001 f8dc 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012338:	bb70      	cbnz	r0, 8012398 <ucdr_deserialize_endian_uint16_t+0x84>
 801233a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801233e:	454f      	cmp	r7, r9
 8012340:	d925      	bls.n	801238e <ucdr_deserialize_endian_uint16_t+0x7a>
 8012342:	6923      	ldr	r3, [r4, #16]
 8012344:	4620      	mov	r0, r4
 8012346:	60a7      	str	r7, [r4, #8]
 8012348:	eba7 0709 	sub.w	r7, r7, r9
 801234c:	443b      	add	r3, r7
 801234e:	f1c7 0a02 	rsb	sl, r7, #2
 8012352:	6123      	str	r3, [r4, #16]
 8012354:	4651      	mov	r1, sl
 8012356:	f001 f8d7 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801235a:	2800      	cmp	r0, #0
 801235c:	d034      	beq.n	80123c8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801235e:	2e01      	cmp	r6, #1
 8012360:	d043      	beq.n	80123ea <ucdr_deserialize_endian_uint16_t+0xd6>
 8012362:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012366:	702b      	strb	r3, [r5, #0]
 8012368:	2f00      	cmp	r7, #0
 801236a:	d03a      	beq.n	80123e2 <ucdr_deserialize_endian_uint16_t+0xce>
 801236c:	f899 3000 	ldrb.w	r3, [r9]
 8012370:	706b      	strb	r3, [r5, #1]
 8012372:	6923      	ldr	r3, [r4, #16]
 8012374:	2102      	movs	r1, #2
 8012376:	68a2      	ldr	r2, [r4, #8]
 8012378:	3302      	adds	r3, #2
 801237a:	7da0      	ldrb	r0, [r4, #22]
 801237c:	4452      	add	r2, sl
 801237e:	7561      	strb	r1, [r4, #21]
 8012380:	1bdb      	subs	r3, r3, r7
 8012382:	f080 0001 	eor.w	r0, r0, #1
 8012386:	60a2      	str	r2, [r4, #8]
 8012388:	6123      	str	r3, [r4, #16]
 801238a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801238e:	2102      	movs	r1, #2
 8012390:	4620      	mov	r0, r4
 8012392:	f001 f8b9 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012396:	b178      	cbz	r0, 80123b8 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012398:	2e01      	cmp	r6, #1
 801239a:	68a3      	ldr	r3, [r4, #8]
 801239c:	d011      	beq.n	80123c2 <ucdr_deserialize_endian_uint16_t+0xae>
 801239e:	785b      	ldrb	r3, [r3, #1]
 80123a0:	702b      	strb	r3, [r5, #0]
 80123a2:	68a3      	ldr	r3, [r4, #8]
 80123a4:	781b      	ldrb	r3, [r3, #0]
 80123a6:	706b      	strb	r3, [r5, #1]
 80123a8:	2102      	movs	r1, #2
 80123aa:	68a2      	ldr	r2, [r4, #8]
 80123ac:	6923      	ldr	r3, [r4, #16]
 80123ae:	440a      	add	r2, r1
 80123b0:	7561      	strb	r1, [r4, #21]
 80123b2:	440b      	add	r3, r1
 80123b4:	60a2      	str	r2, [r4, #8]
 80123b6:	6123      	str	r3, [r4, #16]
 80123b8:	7da0      	ldrb	r0, [r4, #22]
 80123ba:	f080 0001 	eor.w	r0, r0, #1
 80123be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c2:	881b      	ldrh	r3, [r3, #0]
 80123c4:	802b      	strh	r3, [r5, #0]
 80123c6:	e7ef      	b.n	80123a8 <ucdr_deserialize_endian_uint16_t+0x94>
 80123c8:	68a2      	ldr	r2, [r4, #8]
 80123ca:	6923      	ldr	r3, [r4, #16]
 80123cc:	1bd2      	subs	r2, r2, r7
 80123ce:	7da0      	ldrb	r0, [r4, #22]
 80123d0:	1bdb      	subs	r3, r3, r7
 80123d2:	f884 8015 	strb.w	r8, [r4, #21]
 80123d6:	f080 0001 	eor.w	r0, r0, #1
 80123da:	60a2      	str	r2, [r4, #8]
 80123dc:	6123      	str	r3, [r4, #16]
 80123de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e2:	68a3      	ldr	r3, [r4, #8]
 80123e4:	781b      	ldrb	r3, [r3, #0]
 80123e6:	706b      	strb	r3, [r5, #1]
 80123e8:	e7c3      	b.n	8012372 <ucdr_deserialize_endian_uint16_t+0x5e>
 80123ea:	4649      	mov	r1, r9
 80123ec:	463a      	mov	r2, r7
 80123ee:	4628      	mov	r0, r5
 80123f0:	f00a fe03 	bl	801cffa <memcpy>
 80123f4:	4652      	mov	r2, sl
 80123f6:	19e8      	adds	r0, r5, r7
 80123f8:	68a1      	ldr	r1, [r4, #8]
 80123fa:	f00a fdfe 	bl	801cffa <memcpy>
 80123fe:	e7b8      	b.n	8012372 <ucdr_deserialize_endian_uint16_t+0x5e>

08012400 <ucdr_serialize_uint32_t>:
 8012400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012404:	b082      	sub	sp, #8
 8012406:	4604      	mov	r4, r0
 8012408:	9101      	str	r1, [sp, #4]
 801240a:	2104      	movs	r1, #4
 801240c:	f001 f8d0 	bl	80135b0 <ucdr_buffer_alignment>
 8012410:	4601      	mov	r1, r0
 8012412:	4620      	mov	r0, r4
 8012414:	7d67      	ldrb	r7, [r4, #21]
 8012416:	f001 f913 	bl	8013640 <ucdr_advance_buffer>
 801241a:	2104      	movs	r1, #4
 801241c:	4620      	mov	r0, r4
 801241e:	f001 f867 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012422:	2800      	cmp	r0, #0
 8012424:	d139      	bne.n	801249a <ucdr_serialize_uint32_t+0x9a>
 8012426:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801242a:	42ab      	cmp	r3, r5
 801242c:	d930      	bls.n	8012490 <ucdr_serialize_uint32_t+0x90>
 801242e:	1b5e      	subs	r6, r3, r5
 8012430:	60a3      	str	r3, [r4, #8]
 8012432:	6923      	ldr	r3, [r4, #16]
 8012434:	4620      	mov	r0, r4
 8012436:	f1c6 0804 	rsb	r8, r6, #4
 801243a:	4433      	add	r3, r6
 801243c:	4641      	mov	r1, r8
 801243e:	6123      	str	r3, [r4, #16]
 8012440:	f001 f862 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012444:	2800      	cmp	r0, #0
 8012446:	d04c      	beq.n	80124e2 <ucdr_serialize_uint32_t+0xe2>
 8012448:	7d23      	ldrb	r3, [r4, #20]
 801244a:	2b01      	cmp	r3, #1
 801244c:	d063      	beq.n	8012516 <ucdr_serialize_uint32_t+0x116>
 801244e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012452:	702b      	strb	r3, [r5, #0]
 8012454:	2e00      	cmp	r6, #0
 8012456:	d051      	beq.n	80124fc <ucdr_serialize_uint32_t+0xfc>
 8012458:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801245c:	2e01      	cmp	r6, #1
 801245e:	706b      	strb	r3, [r5, #1]
 8012460:	d050      	beq.n	8012504 <ucdr_serialize_uint32_t+0x104>
 8012462:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012466:	2e02      	cmp	r6, #2
 8012468:	70ab      	strb	r3, [r5, #2]
 801246a:	d04f      	beq.n	801250c <ucdr_serialize_uint32_t+0x10c>
 801246c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012470:	70eb      	strb	r3, [r5, #3]
 8012472:	6923      	ldr	r3, [r4, #16]
 8012474:	2104      	movs	r1, #4
 8012476:	68a2      	ldr	r2, [r4, #8]
 8012478:	3304      	adds	r3, #4
 801247a:	7da0      	ldrb	r0, [r4, #22]
 801247c:	4442      	add	r2, r8
 801247e:	7561      	strb	r1, [r4, #21]
 8012480:	1b9e      	subs	r6, r3, r6
 8012482:	f080 0001 	eor.w	r0, r0, #1
 8012486:	60a2      	str	r2, [r4, #8]
 8012488:	6126      	str	r6, [r4, #16]
 801248a:	b002      	add	sp, #8
 801248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012490:	2104      	movs	r1, #4
 8012492:	4620      	mov	r0, r4
 8012494:	f001 f838 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012498:	b1d0      	cbz	r0, 80124d0 <ucdr_serialize_uint32_t+0xd0>
 801249a:	7d23      	ldrb	r3, [r4, #20]
 801249c:	2b01      	cmp	r3, #1
 801249e:	68a3      	ldr	r3, [r4, #8]
 80124a0:	d01c      	beq.n	80124dc <ucdr_serialize_uint32_t+0xdc>
 80124a2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80124a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80124aa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80124ae:	7018      	strb	r0, [r3, #0]
 80124b0:	68a3      	ldr	r3, [r4, #8]
 80124b2:	705a      	strb	r2, [r3, #1]
 80124b4:	68a3      	ldr	r3, [r4, #8]
 80124b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80124ba:	7099      	strb	r1, [r3, #2]
 80124bc:	68a3      	ldr	r3, [r4, #8]
 80124be:	70da      	strb	r2, [r3, #3]
 80124c0:	2104      	movs	r1, #4
 80124c2:	68a2      	ldr	r2, [r4, #8]
 80124c4:	6923      	ldr	r3, [r4, #16]
 80124c6:	440a      	add	r2, r1
 80124c8:	7561      	strb	r1, [r4, #21]
 80124ca:	440b      	add	r3, r1
 80124cc:	60a2      	str	r2, [r4, #8]
 80124ce:	6123      	str	r3, [r4, #16]
 80124d0:	7da0      	ldrb	r0, [r4, #22]
 80124d2:	f080 0001 	eor.w	r0, r0, #1
 80124d6:	b002      	add	sp, #8
 80124d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124dc:	9a01      	ldr	r2, [sp, #4]
 80124de:	601a      	str	r2, [r3, #0]
 80124e0:	e7ee      	b.n	80124c0 <ucdr_serialize_uint32_t+0xc0>
 80124e2:	68a2      	ldr	r2, [r4, #8]
 80124e4:	6923      	ldr	r3, [r4, #16]
 80124e6:	7da0      	ldrb	r0, [r4, #22]
 80124e8:	1b92      	subs	r2, r2, r6
 80124ea:	1b9b      	subs	r3, r3, r6
 80124ec:	7567      	strb	r7, [r4, #21]
 80124ee:	f080 0001 	eor.w	r0, r0, #1
 80124f2:	60a2      	str	r2, [r4, #8]
 80124f4:	6123      	str	r3, [r4, #16]
 80124f6:	b002      	add	sp, #8
 80124f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124fc:	68a3      	ldr	r3, [r4, #8]
 80124fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012502:	701a      	strb	r2, [r3, #0]
 8012504:	68a3      	ldr	r3, [r4, #8]
 8012506:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801250a:	701a      	strb	r2, [r3, #0]
 801250c:	68a3      	ldr	r3, [r4, #8]
 801250e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012512:	701a      	strb	r2, [r3, #0]
 8012514:	e7ad      	b.n	8012472 <ucdr_serialize_uint32_t+0x72>
 8012516:	4628      	mov	r0, r5
 8012518:	ad01      	add	r5, sp, #4
 801251a:	4632      	mov	r2, r6
 801251c:	4629      	mov	r1, r5
 801251e:	f00a fd6c 	bl	801cffa <memcpy>
 8012522:	4642      	mov	r2, r8
 8012524:	19a9      	adds	r1, r5, r6
 8012526:	68a0      	ldr	r0, [r4, #8]
 8012528:	f00a fd67 	bl	801cffa <memcpy>
 801252c:	e7a1      	b.n	8012472 <ucdr_serialize_uint32_t+0x72>
 801252e:	bf00      	nop

08012530 <ucdr_serialize_endian_uint32_t>:
 8012530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012534:	4604      	mov	r4, r0
 8012536:	b083      	sub	sp, #12
 8012538:	460d      	mov	r5, r1
 801253a:	2104      	movs	r1, #4
 801253c:	9201      	str	r2, [sp, #4]
 801253e:	f001 f837 	bl	80135b0 <ucdr_buffer_alignment>
 8012542:	4601      	mov	r1, r0
 8012544:	4620      	mov	r0, r4
 8012546:	f894 8015 	ldrb.w	r8, [r4, #21]
 801254a:	f001 f879 	bl	8013640 <ucdr_advance_buffer>
 801254e:	2104      	movs	r1, #4
 8012550:	4620      	mov	r0, r4
 8012552:	f000 ffcd 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012556:	2800      	cmp	r0, #0
 8012558:	d138      	bne.n	80125cc <ucdr_serialize_endian_uint32_t+0x9c>
 801255a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801255e:	42b7      	cmp	r7, r6
 8012560:	d92f      	bls.n	80125c2 <ucdr_serialize_endian_uint32_t+0x92>
 8012562:	6923      	ldr	r3, [r4, #16]
 8012564:	4620      	mov	r0, r4
 8012566:	60a7      	str	r7, [r4, #8]
 8012568:	1bbf      	subs	r7, r7, r6
 801256a:	443b      	add	r3, r7
 801256c:	f1c7 0904 	rsb	r9, r7, #4
 8012570:	6123      	str	r3, [r4, #16]
 8012572:	4649      	mov	r1, r9
 8012574:	f000 ffc8 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012578:	2800      	cmp	r0, #0
 801257a:	d04a      	beq.n	8012612 <ucdr_serialize_endian_uint32_t+0xe2>
 801257c:	2d01      	cmp	r5, #1
 801257e:	d063      	beq.n	8012648 <ucdr_serialize_endian_uint32_t+0x118>
 8012580:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012584:	7033      	strb	r3, [r6, #0]
 8012586:	2f00      	cmp	r7, #0
 8012588:	d051      	beq.n	801262e <ucdr_serialize_endian_uint32_t+0xfe>
 801258a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801258e:	2f01      	cmp	r7, #1
 8012590:	7073      	strb	r3, [r6, #1]
 8012592:	d050      	beq.n	8012636 <ucdr_serialize_endian_uint32_t+0x106>
 8012594:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012598:	2f02      	cmp	r7, #2
 801259a:	70b3      	strb	r3, [r6, #2]
 801259c:	d04f      	beq.n	801263e <ucdr_serialize_endian_uint32_t+0x10e>
 801259e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125a2:	70f3      	strb	r3, [r6, #3]
 80125a4:	6923      	ldr	r3, [r4, #16]
 80125a6:	2104      	movs	r1, #4
 80125a8:	68a2      	ldr	r2, [r4, #8]
 80125aa:	7da0      	ldrb	r0, [r4, #22]
 80125ac:	3304      	adds	r3, #4
 80125ae:	444a      	add	r2, r9
 80125b0:	7561      	strb	r1, [r4, #21]
 80125b2:	1bdb      	subs	r3, r3, r7
 80125b4:	f080 0001 	eor.w	r0, r0, #1
 80125b8:	60a2      	str	r2, [r4, #8]
 80125ba:	6123      	str	r3, [r4, #16]
 80125bc:	b003      	add	sp, #12
 80125be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125c2:	2104      	movs	r1, #4
 80125c4:	4620      	mov	r0, r4
 80125c6:	f000 ff9f 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80125ca:	b1c8      	cbz	r0, 8012600 <ucdr_serialize_endian_uint32_t+0xd0>
 80125cc:	2d01      	cmp	r5, #1
 80125ce:	68a3      	ldr	r3, [r4, #8]
 80125d0:	d01c      	beq.n	801260c <ucdr_serialize_endian_uint32_t+0xdc>
 80125d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80125d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80125de:	7018      	strb	r0, [r3, #0]
 80125e0:	68a3      	ldr	r3, [r4, #8]
 80125e2:	705a      	strb	r2, [r3, #1]
 80125e4:	68a3      	ldr	r3, [r4, #8]
 80125e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125ea:	7099      	strb	r1, [r3, #2]
 80125ec:	68a3      	ldr	r3, [r4, #8]
 80125ee:	70da      	strb	r2, [r3, #3]
 80125f0:	2104      	movs	r1, #4
 80125f2:	68a2      	ldr	r2, [r4, #8]
 80125f4:	6923      	ldr	r3, [r4, #16]
 80125f6:	440a      	add	r2, r1
 80125f8:	7561      	strb	r1, [r4, #21]
 80125fa:	440b      	add	r3, r1
 80125fc:	60a2      	str	r2, [r4, #8]
 80125fe:	6123      	str	r3, [r4, #16]
 8012600:	7da0      	ldrb	r0, [r4, #22]
 8012602:	f080 0001 	eor.w	r0, r0, #1
 8012606:	b003      	add	sp, #12
 8012608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801260c:	9a01      	ldr	r2, [sp, #4]
 801260e:	601a      	str	r2, [r3, #0]
 8012610:	e7ee      	b.n	80125f0 <ucdr_serialize_endian_uint32_t+0xc0>
 8012612:	68a2      	ldr	r2, [r4, #8]
 8012614:	6923      	ldr	r3, [r4, #16]
 8012616:	7da0      	ldrb	r0, [r4, #22]
 8012618:	1bd2      	subs	r2, r2, r7
 801261a:	1bdb      	subs	r3, r3, r7
 801261c:	f884 8015 	strb.w	r8, [r4, #21]
 8012620:	f080 0001 	eor.w	r0, r0, #1
 8012624:	60a2      	str	r2, [r4, #8]
 8012626:	6123      	str	r3, [r4, #16]
 8012628:	b003      	add	sp, #12
 801262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801262e:	68a3      	ldr	r3, [r4, #8]
 8012630:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012634:	701a      	strb	r2, [r3, #0]
 8012636:	68a3      	ldr	r3, [r4, #8]
 8012638:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801263c:	701a      	strb	r2, [r3, #0]
 801263e:	68a3      	ldr	r3, [r4, #8]
 8012640:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012644:	701a      	strb	r2, [r3, #0]
 8012646:	e7ad      	b.n	80125a4 <ucdr_serialize_endian_uint32_t+0x74>
 8012648:	ad01      	add	r5, sp, #4
 801264a:	463a      	mov	r2, r7
 801264c:	4630      	mov	r0, r6
 801264e:	4629      	mov	r1, r5
 8012650:	f00a fcd3 	bl	801cffa <memcpy>
 8012654:	464a      	mov	r2, r9
 8012656:	19e9      	adds	r1, r5, r7
 8012658:	68a0      	ldr	r0, [r4, #8]
 801265a:	f00a fcce 	bl	801cffa <memcpy>
 801265e:	e7a1      	b.n	80125a4 <ucdr_serialize_endian_uint32_t+0x74>

08012660 <ucdr_deserialize_uint32_t>:
 8012660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012664:	4604      	mov	r4, r0
 8012666:	460d      	mov	r5, r1
 8012668:	2104      	movs	r1, #4
 801266a:	f000 ffa1 	bl	80135b0 <ucdr_buffer_alignment>
 801266e:	4601      	mov	r1, r0
 8012670:	4620      	mov	r0, r4
 8012672:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012676:	f000 ffe3 	bl	8013640 <ucdr_advance_buffer>
 801267a:	2104      	movs	r1, #4
 801267c:	4620      	mov	r0, r4
 801267e:	f000 ff37 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012682:	2800      	cmp	r0, #0
 8012684:	d138      	bne.n	80126f8 <ucdr_deserialize_uint32_t+0x98>
 8012686:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801268a:	42b7      	cmp	r7, r6
 801268c:	d92f      	bls.n	80126ee <ucdr_deserialize_uint32_t+0x8e>
 801268e:	6923      	ldr	r3, [r4, #16]
 8012690:	4620      	mov	r0, r4
 8012692:	60a7      	str	r7, [r4, #8]
 8012694:	1bbf      	subs	r7, r7, r6
 8012696:	443b      	add	r3, r7
 8012698:	f1c7 0904 	rsb	r9, r7, #4
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	4649      	mov	r1, r9
 80126a0:	f000 ff32 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	d046      	beq.n	8012736 <ucdr_deserialize_uint32_t+0xd6>
 80126a8:	7d23      	ldrb	r3, [r4, #20]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d05c      	beq.n	8012768 <ucdr_deserialize_uint32_t+0x108>
 80126ae:	78f3      	ldrb	r3, [r6, #3]
 80126b0:	702b      	strb	r3, [r5, #0]
 80126b2:	2f00      	cmp	r7, #0
 80126b4:	d04c      	beq.n	8012750 <ucdr_deserialize_uint32_t+0xf0>
 80126b6:	78b3      	ldrb	r3, [r6, #2]
 80126b8:	2f01      	cmp	r7, #1
 80126ba:	706b      	strb	r3, [r5, #1]
 80126bc:	f105 0302 	add.w	r3, r5, #2
 80126c0:	d04a      	beq.n	8012758 <ucdr_deserialize_uint32_t+0xf8>
 80126c2:	7873      	ldrb	r3, [r6, #1]
 80126c4:	2f02      	cmp	r7, #2
 80126c6:	70ab      	strb	r3, [r5, #2]
 80126c8:	f105 0303 	add.w	r3, r5, #3
 80126cc:	d048      	beq.n	8012760 <ucdr_deserialize_uint32_t+0x100>
 80126ce:	7833      	ldrb	r3, [r6, #0]
 80126d0:	70eb      	strb	r3, [r5, #3]
 80126d2:	6923      	ldr	r3, [r4, #16]
 80126d4:	2104      	movs	r1, #4
 80126d6:	68a2      	ldr	r2, [r4, #8]
 80126d8:	3304      	adds	r3, #4
 80126da:	7da0      	ldrb	r0, [r4, #22]
 80126dc:	444a      	add	r2, r9
 80126de:	7561      	strb	r1, [r4, #21]
 80126e0:	1bdb      	subs	r3, r3, r7
 80126e2:	f080 0001 	eor.w	r0, r0, #1
 80126e6:	60a2      	str	r2, [r4, #8]
 80126e8:	6123      	str	r3, [r4, #16]
 80126ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126ee:	2104      	movs	r1, #4
 80126f0:	4620      	mov	r0, r4
 80126f2:	f000 ff09 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80126f6:	b1b0      	cbz	r0, 8012726 <ucdr_deserialize_uint32_t+0xc6>
 80126f8:	7d23      	ldrb	r3, [r4, #20]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	68a3      	ldr	r3, [r4, #8]
 80126fe:	d017      	beq.n	8012730 <ucdr_deserialize_uint32_t+0xd0>
 8012700:	78db      	ldrb	r3, [r3, #3]
 8012702:	702b      	strb	r3, [r5, #0]
 8012704:	68a3      	ldr	r3, [r4, #8]
 8012706:	789b      	ldrb	r3, [r3, #2]
 8012708:	706b      	strb	r3, [r5, #1]
 801270a:	68a3      	ldr	r3, [r4, #8]
 801270c:	785b      	ldrb	r3, [r3, #1]
 801270e:	70ab      	strb	r3, [r5, #2]
 8012710:	68a3      	ldr	r3, [r4, #8]
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	70eb      	strb	r3, [r5, #3]
 8012716:	2104      	movs	r1, #4
 8012718:	68a2      	ldr	r2, [r4, #8]
 801271a:	6923      	ldr	r3, [r4, #16]
 801271c:	440a      	add	r2, r1
 801271e:	7561      	strb	r1, [r4, #21]
 8012720:	440b      	add	r3, r1
 8012722:	60a2      	str	r2, [r4, #8]
 8012724:	6123      	str	r3, [r4, #16]
 8012726:	7da0      	ldrb	r0, [r4, #22]
 8012728:	f080 0001 	eor.w	r0, r0, #1
 801272c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	602b      	str	r3, [r5, #0]
 8012734:	e7ef      	b.n	8012716 <ucdr_deserialize_uint32_t+0xb6>
 8012736:	68a2      	ldr	r2, [r4, #8]
 8012738:	6923      	ldr	r3, [r4, #16]
 801273a:	1bd2      	subs	r2, r2, r7
 801273c:	7da0      	ldrb	r0, [r4, #22]
 801273e:	1bdb      	subs	r3, r3, r7
 8012740:	f884 8015 	strb.w	r8, [r4, #21]
 8012744:	f080 0001 	eor.w	r0, r0, #1
 8012748:	60a2      	str	r2, [r4, #8]
 801274a:	6123      	str	r3, [r4, #16]
 801274c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012750:	68a3      	ldr	r3, [r4, #8]
 8012752:	789b      	ldrb	r3, [r3, #2]
 8012754:	706b      	strb	r3, [r5, #1]
 8012756:	1cab      	adds	r3, r5, #2
 8012758:	68a2      	ldr	r2, [r4, #8]
 801275a:	7852      	ldrb	r2, [r2, #1]
 801275c:	f803 2b01 	strb.w	r2, [r3], #1
 8012760:	68a2      	ldr	r2, [r4, #8]
 8012762:	7812      	ldrb	r2, [r2, #0]
 8012764:	701a      	strb	r2, [r3, #0]
 8012766:	e7b4      	b.n	80126d2 <ucdr_deserialize_uint32_t+0x72>
 8012768:	4631      	mov	r1, r6
 801276a:	463a      	mov	r2, r7
 801276c:	4628      	mov	r0, r5
 801276e:	f00a fc44 	bl	801cffa <memcpy>
 8012772:	464a      	mov	r2, r9
 8012774:	19e8      	adds	r0, r5, r7
 8012776:	68a1      	ldr	r1, [r4, #8]
 8012778:	f00a fc3f 	bl	801cffa <memcpy>
 801277c:	e7a9      	b.n	80126d2 <ucdr_deserialize_uint32_t+0x72>
 801277e:	bf00      	nop

08012780 <ucdr_deserialize_endian_uint32_t>:
 8012780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012784:	4604      	mov	r4, r0
 8012786:	460e      	mov	r6, r1
 8012788:	2104      	movs	r1, #4
 801278a:	4615      	mov	r5, r2
 801278c:	f000 ff10 	bl	80135b0 <ucdr_buffer_alignment>
 8012790:	4601      	mov	r1, r0
 8012792:	4620      	mov	r0, r4
 8012794:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012798:	f000 ff52 	bl	8013640 <ucdr_advance_buffer>
 801279c:	2104      	movs	r1, #4
 801279e:	4620      	mov	r0, r4
 80127a0:	f000 fea6 	bl	80134f0 <ucdr_check_buffer_available_for>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d13c      	bne.n	8012822 <ucdr_deserialize_endian_uint32_t+0xa2>
 80127a8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80127ac:	42bb      	cmp	r3, r7
 80127ae:	d933      	bls.n	8012818 <ucdr_deserialize_endian_uint32_t+0x98>
 80127b0:	eba3 0907 	sub.w	r9, r3, r7
 80127b4:	60a3      	str	r3, [r4, #8]
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	4620      	mov	r0, r4
 80127ba:	f1c9 0a04 	rsb	sl, r9, #4
 80127be:	444b      	add	r3, r9
 80127c0:	4651      	mov	r1, sl
 80127c2:	6123      	str	r3, [r4, #16]
 80127c4:	f000 fea0 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d048      	beq.n	801285e <ucdr_deserialize_endian_uint32_t+0xde>
 80127cc:	2e01      	cmp	r6, #1
 80127ce:	d061      	beq.n	8012894 <ucdr_deserialize_endian_uint32_t+0x114>
 80127d0:	78fb      	ldrb	r3, [r7, #3]
 80127d2:	702b      	strb	r3, [r5, #0]
 80127d4:	f1b9 0f00 	cmp.w	r9, #0
 80127d8:	d050      	beq.n	801287c <ucdr_deserialize_endian_uint32_t+0xfc>
 80127da:	78bb      	ldrb	r3, [r7, #2]
 80127dc:	f1b9 0f01 	cmp.w	r9, #1
 80127e0:	706b      	strb	r3, [r5, #1]
 80127e2:	f105 0302 	add.w	r3, r5, #2
 80127e6:	d04d      	beq.n	8012884 <ucdr_deserialize_endian_uint32_t+0x104>
 80127e8:	787b      	ldrb	r3, [r7, #1]
 80127ea:	f1b9 0f02 	cmp.w	r9, #2
 80127ee:	70ab      	strb	r3, [r5, #2]
 80127f0:	f105 0303 	add.w	r3, r5, #3
 80127f4:	d04a      	beq.n	801288c <ucdr_deserialize_endian_uint32_t+0x10c>
 80127f6:	783b      	ldrb	r3, [r7, #0]
 80127f8:	70eb      	strb	r3, [r5, #3]
 80127fa:	6923      	ldr	r3, [r4, #16]
 80127fc:	2104      	movs	r1, #4
 80127fe:	68a2      	ldr	r2, [r4, #8]
 8012800:	3304      	adds	r3, #4
 8012802:	7da0      	ldrb	r0, [r4, #22]
 8012804:	4452      	add	r2, sl
 8012806:	7561      	strb	r1, [r4, #21]
 8012808:	eba3 0309 	sub.w	r3, r3, r9
 801280c:	f080 0001 	eor.w	r0, r0, #1
 8012810:	60a2      	str	r2, [r4, #8]
 8012812:	6123      	str	r3, [r4, #16]
 8012814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012818:	2104      	movs	r1, #4
 801281a:	4620      	mov	r0, r4
 801281c:	f000 fe74 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012820:	b1a8      	cbz	r0, 801284e <ucdr_deserialize_endian_uint32_t+0xce>
 8012822:	2e01      	cmp	r6, #1
 8012824:	68a3      	ldr	r3, [r4, #8]
 8012826:	d017      	beq.n	8012858 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012828:	78db      	ldrb	r3, [r3, #3]
 801282a:	702b      	strb	r3, [r5, #0]
 801282c:	68a3      	ldr	r3, [r4, #8]
 801282e:	789b      	ldrb	r3, [r3, #2]
 8012830:	706b      	strb	r3, [r5, #1]
 8012832:	68a3      	ldr	r3, [r4, #8]
 8012834:	785b      	ldrb	r3, [r3, #1]
 8012836:	70ab      	strb	r3, [r5, #2]
 8012838:	68a3      	ldr	r3, [r4, #8]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	70eb      	strb	r3, [r5, #3]
 801283e:	2104      	movs	r1, #4
 8012840:	68a2      	ldr	r2, [r4, #8]
 8012842:	6923      	ldr	r3, [r4, #16]
 8012844:	440a      	add	r2, r1
 8012846:	7561      	strb	r1, [r4, #21]
 8012848:	440b      	add	r3, r1
 801284a:	60a2      	str	r2, [r4, #8]
 801284c:	6123      	str	r3, [r4, #16]
 801284e:	7da0      	ldrb	r0, [r4, #22]
 8012850:	f080 0001 	eor.w	r0, r0, #1
 8012854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	602b      	str	r3, [r5, #0]
 801285c:	e7ef      	b.n	801283e <ucdr_deserialize_endian_uint32_t+0xbe>
 801285e:	68a2      	ldr	r2, [r4, #8]
 8012860:	6923      	ldr	r3, [r4, #16]
 8012862:	eba2 0209 	sub.w	r2, r2, r9
 8012866:	7da0      	ldrb	r0, [r4, #22]
 8012868:	eba3 0309 	sub.w	r3, r3, r9
 801286c:	f884 8015 	strb.w	r8, [r4, #21]
 8012870:	f080 0001 	eor.w	r0, r0, #1
 8012874:	60a2      	str	r2, [r4, #8]
 8012876:	6123      	str	r3, [r4, #16]
 8012878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801287c:	68a3      	ldr	r3, [r4, #8]
 801287e:	789b      	ldrb	r3, [r3, #2]
 8012880:	706b      	strb	r3, [r5, #1]
 8012882:	1cab      	adds	r3, r5, #2
 8012884:	68a2      	ldr	r2, [r4, #8]
 8012886:	7852      	ldrb	r2, [r2, #1]
 8012888:	f803 2b01 	strb.w	r2, [r3], #1
 801288c:	68a2      	ldr	r2, [r4, #8]
 801288e:	7812      	ldrb	r2, [r2, #0]
 8012890:	701a      	strb	r2, [r3, #0]
 8012892:	e7b2      	b.n	80127fa <ucdr_deserialize_endian_uint32_t+0x7a>
 8012894:	4639      	mov	r1, r7
 8012896:	464a      	mov	r2, r9
 8012898:	4628      	mov	r0, r5
 801289a:	f00a fbae 	bl	801cffa <memcpy>
 801289e:	4652      	mov	r2, sl
 80128a0:	eb05 0009 	add.w	r0, r5, r9
 80128a4:	68a1      	ldr	r1, [r4, #8]
 80128a6:	f00a fba8 	bl	801cffa <memcpy>
 80128aa:	e7a6      	b.n	80127fa <ucdr_deserialize_endian_uint32_t+0x7a>

080128ac <ucdr_serialize_uint64_t>:
 80128ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128b0:	4604      	mov	r4, r0
 80128b2:	b082      	sub	sp, #8
 80128b4:	2108      	movs	r1, #8
 80128b6:	e9cd 2300 	strd	r2, r3, [sp]
 80128ba:	f000 fe79 	bl	80135b0 <ucdr_buffer_alignment>
 80128be:	4601      	mov	r1, r0
 80128c0:	4620      	mov	r0, r4
 80128c2:	7d67      	ldrb	r7, [r4, #21]
 80128c4:	f000 febc 	bl	8013640 <ucdr_advance_buffer>
 80128c8:	2108      	movs	r1, #8
 80128ca:	4620      	mov	r0, r4
 80128cc:	f000 fe10 	bl	80134f0 <ucdr_check_buffer_available_for>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	d14e      	bne.n	8012972 <ucdr_serialize_uint64_t+0xc6>
 80128d4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80128d8:	42ab      	cmp	r3, r5
 80128da:	d945      	bls.n	8012968 <ucdr_serialize_uint64_t+0xbc>
 80128dc:	1b5e      	subs	r6, r3, r5
 80128de:	60a3      	str	r3, [r4, #8]
 80128e0:	6923      	ldr	r3, [r4, #16]
 80128e2:	4620      	mov	r0, r4
 80128e4:	f1c6 0808 	rsb	r8, r6, #8
 80128e8:	4433      	add	r3, r6
 80128ea:	4641      	mov	r1, r8
 80128ec:	6123      	str	r3, [r4, #16]
 80128ee:	f000 fe0b 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	d074      	beq.n	80129e0 <ucdr_serialize_uint64_t+0x134>
 80128f6:	7d23      	ldrb	r3, [r4, #20]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	f000 809b 	beq.w	8012a34 <ucdr_serialize_uint64_t+0x188>
 80128fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012902:	702b      	strb	r3, [r5, #0]
 8012904:	2e00      	cmp	r6, #0
 8012906:	d078      	beq.n	80129fa <ucdr_serialize_uint64_t+0x14e>
 8012908:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801290c:	2e01      	cmp	r6, #1
 801290e:	706b      	strb	r3, [r5, #1]
 8012910:	d077      	beq.n	8012a02 <ucdr_serialize_uint64_t+0x156>
 8012912:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012916:	2e02      	cmp	r6, #2
 8012918:	70ab      	strb	r3, [r5, #2]
 801291a:	d076      	beq.n	8012a0a <ucdr_serialize_uint64_t+0x15e>
 801291c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012920:	2e03      	cmp	r6, #3
 8012922:	70eb      	strb	r3, [r5, #3]
 8012924:	d075      	beq.n	8012a12 <ucdr_serialize_uint64_t+0x166>
 8012926:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801292a:	2e04      	cmp	r6, #4
 801292c:	712b      	strb	r3, [r5, #4]
 801292e:	d074      	beq.n	8012a1a <ucdr_serialize_uint64_t+0x16e>
 8012930:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012934:	2e05      	cmp	r6, #5
 8012936:	716b      	strb	r3, [r5, #5]
 8012938:	d073      	beq.n	8012a22 <ucdr_serialize_uint64_t+0x176>
 801293a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801293e:	2e06      	cmp	r6, #6
 8012940:	71ab      	strb	r3, [r5, #6]
 8012942:	d072      	beq.n	8012a2a <ucdr_serialize_uint64_t+0x17e>
 8012944:	f89d 3000 	ldrb.w	r3, [sp]
 8012948:	71eb      	strb	r3, [r5, #7]
 801294a:	6923      	ldr	r3, [r4, #16]
 801294c:	2108      	movs	r1, #8
 801294e:	68a2      	ldr	r2, [r4, #8]
 8012950:	3308      	adds	r3, #8
 8012952:	7da0      	ldrb	r0, [r4, #22]
 8012954:	4442      	add	r2, r8
 8012956:	7561      	strb	r1, [r4, #21]
 8012958:	1b9e      	subs	r6, r3, r6
 801295a:	f080 0001 	eor.w	r0, r0, #1
 801295e:	60a2      	str	r2, [r4, #8]
 8012960:	6126      	str	r6, [r4, #16]
 8012962:	b002      	add	sp, #8
 8012964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012968:	2108      	movs	r1, #8
 801296a:	4620      	mov	r0, r4
 801296c:	f000 fdcc 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012970:	b350      	cbz	r0, 80129c8 <ucdr_serialize_uint64_t+0x11c>
 8012972:	7d23      	ldrb	r3, [r4, #20]
 8012974:	2b01      	cmp	r3, #1
 8012976:	d02d      	beq.n	80129d4 <ucdr_serialize_uint64_t+0x128>
 8012978:	68a3      	ldr	r3, [r4, #8]
 801297a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801297e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012982:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012986:	7018      	strb	r0, [r3, #0]
 8012988:	68a3      	ldr	r3, [r4, #8]
 801298a:	705a      	strb	r2, [r3, #1]
 801298c:	68a3      	ldr	r3, [r4, #8]
 801298e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012992:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012996:	7099      	strb	r1, [r3, #2]
 8012998:	68a3      	ldr	r3, [r4, #8]
 801299a:	70da      	strb	r2, [r3, #3]
 801299c:	68a3      	ldr	r3, [r4, #8]
 801299e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80129a2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80129a6:	7118      	strb	r0, [r3, #4]
 80129a8:	68a3      	ldr	r3, [r4, #8]
 80129aa:	715a      	strb	r2, [r3, #5]
 80129ac:	68a3      	ldr	r3, [r4, #8]
 80129ae:	f89d 2000 	ldrb.w	r2, [sp]
 80129b2:	7199      	strb	r1, [r3, #6]
 80129b4:	68a3      	ldr	r3, [r4, #8]
 80129b6:	71da      	strb	r2, [r3, #7]
 80129b8:	2108      	movs	r1, #8
 80129ba:	68a2      	ldr	r2, [r4, #8]
 80129bc:	6923      	ldr	r3, [r4, #16]
 80129be:	440a      	add	r2, r1
 80129c0:	7561      	strb	r1, [r4, #21]
 80129c2:	440b      	add	r3, r1
 80129c4:	60a2      	str	r2, [r4, #8]
 80129c6:	6123      	str	r3, [r4, #16]
 80129c8:	7da0      	ldrb	r0, [r4, #22]
 80129ca:	f080 0001 	eor.w	r0, r0, #1
 80129ce:	b002      	add	sp, #8
 80129d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129d4:	466b      	mov	r3, sp
 80129d6:	68a2      	ldr	r2, [r4, #8]
 80129d8:	cb03      	ldmia	r3!, {r0, r1}
 80129da:	6010      	str	r0, [r2, #0]
 80129dc:	6051      	str	r1, [r2, #4]
 80129de:	e7eb      	b.n	80129b8 <ucdr_serialize_uint64_t+0x10c>
 80129e0:	68a2      	ldr	r2, [r4, #8]
 80129e2:	6923      	ldr	r3, [r4, #16]
 80129e4:	7da0      	ldrb	r0, [r4, #22]
 80129e6:	1b92      	subs	r2, r2, r6
 80129e8:	1b9b      	subs	r3, r3, r6
 80129ea:	7567      	strb	r7, [r4, #21]
 80129ec:	f080 0001 	eor.w	r0, r0, #1
 80129f0:	60a2      	str	r2, [r4, #8]
 80129f2:	6123      	str	r3, [r4, #16]
 80129f4:	b002      	add	sp, #8
 80129f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129fa:	68a3      	ldr	r3, [r4, #8]
 80129fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a00:	701a      	strb	r2, [r3, #0]
 8012a02:	68a3      	ldr	r3, [r4, #8]
 8012a04:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a08:	701a      	strb	r2, [r3, #0]
 8012a0a:	68a3      	ldr	r3, [r4, #8]
 8012a0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a10:	701a      	strb	r2, [r3, #0]
 8012a12:	68a3      	ldr	r3, [r4, #8]
 8012a14:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012a18:	701a      	strb	r2, [r3, #0]
 8012a1a:	68a3      	ldr	r3, [r4, #8]
 8012a1c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a20:	701a      	strb	r2, [r3, #0]
 8012a22:	68a3      	ldr	r3, [r4, #8]
 8012a24:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012a28:	701a      	strb	r2, [r3, #0]
 8012a2a:	68a3      	ldr	r3, [r4, #8]
 8012a2c:	f89d 2000 	ldrb.w	r2, [sp]
 8012a30:	701a      	strb	r2, [r3, #0]
 8012a32:	e78a      	b.n	801294a <ucdr_serialize_uint64_t+0x9e>
 8012a34:	4628      	mov	r0, r5
 8012a36:	466d      	mov	r5, sp
 8012a38:	4632      	mov	r2, r6
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	f00a fadd 	bl	801cffa <memcpy>
 8012a40:	4642      	mov	r2, r8
 8012a42:	19a9      	adds	r1, r5, r6
 8012a44:	68a0      	ldr	r0, [r4, #8]
 8012a46:	f00a fad8 	bl	801cffa <memcpy>
 8012a4a:	e77e      	b.n	801294a <ucdr_serialize_uint64_t+0x9e>

08012a4c <ucdr_serialize_int16_t>:
 8012a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a50:	460b      	mov	r3, r1
 8012a52:	b082      	sub	sp, #8
 8012a54:	4604      	mov	r4, r0
 8012a56:	2102      	movs	r1, #2
 8012a58:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012a5c:	f000 fda8 	bl	80135b0 <ucdr_buffer_alignment>
 8012a60:	4601      	mov	r1, r0
 8012a62:	4620      	mov	r0, r4
 8012a64:	7d67      	ldrb	r7, [r4, #21]
 8012a66:	f000 fdeb 	bl	8013640 <ucdr_advance_buffer>
 8012a6a:	2102      	movs	r1, #2
 8012a6c:	4620      	mov	r0, r4
 8012a6e:	f000 fd3f 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012a72:	bb78      	cbnz	r0, 8012ad4 <ucdr_serialize_int16_t+0x88>
 8012a74:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012a78:	42ab      	cmp	r3, r5
 8012a7a:	d926      	bls.n	8012aca <ucdr_serialize_int16_t+0x7e>
 8012a7c:	1b5e      	subs	r6, r3, r5
 8012a7e:	60a3      	str	r3, [r4, #8]
 8012a80:	6923      	ldr	r3, [r4, #16]
 8012a82:	4620      	mov	r0, r4
 8012a84:	f1c6 0802 	rsb	r8, r6, #2
 8012a88:	4433      	add	r3, r6
 8012a8a:	4641      	mov	r1, r8
 8012a8c:	6123      	str	r3, [r4, #16]
 8012a8e:	f000 fd3b 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	d03b      	beq.n	8012b0e <ucdr_serialize_int16_t+0xc2>
 8012a96:	7d23      	ldrb	r3, [r4, #20]
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d04a      	beq.n	8012b32 <ucdr_serialize_int16_t+0xe6>
 8012a9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012aa0:	702b      	strb	r3, [r5, #0]
 8012aa2:	2e00      	cmp	r6, #0
 8012aa4:	d040      	beq.n	8012b28 <ucdr_serialize_int16_t+0xdc>
 8012aa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012aaa:	706b      	strb	r3, [r5, #1]
 8012aac:	6923      	ldr	r3, [r4, #16]
 8012aae:	2102      	movs	r1, #2
 8012ab0:	68a2      	ldr	r2, [r4, #8]
 8012ab2:	3302      	adds	r3, #2
 8012ab4:	7da0      	ldrb	r0, [r4, #22]
 8012ab6:	4442      	add	r2, r8
 8012ab8:	7561      	strb	r1, [r4, #21]
 8012aba:	1b9e      	subs	r6, r3, r6
 8012abc:	f080 0001 	eor.w	r0, r0, #1
 8012ac0:	60a2      	str	r2, [r4, #8]
 8012ac2:	6126      	str	r6, [r4, #16]
 8012ac4:	b002      	add	sp, #8
 8012ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aca:	2102      	movs	r1, #2
 8012acc:	4620      	mov	r0, r4
 8012ace:	f000 fd1b 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012ad2:	b190      	cbz	r0, 8012afa <ucdr_serialize_int16_t+0xae>
 8012ad4:	7d23      	ldrb	r3, [r4, #20]
 8012ad6:	2b01      	cmp	r3, #1
 8012ad8:	68a3      	ldr	r3, [r4, #8]
 8012ada:	d014      	beq.n	8012b06 <ucdr_serialize_int16_t+0xba>
 8012adc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012ae0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ae4:	7019      	strb	r1, [r3, #0]
 8012ae6:	68a3      	ldr	r3, [r4, #8]
 8012ae8:	705a      	strb	r2, [r3, #1]
 8012aea:	2102      	movs	r1, #2
 8012aec:	68a2      	ldr	r2, [r4, #8]
 8012aee:	6923      	ldr	r3, [r4, #16]
 8012af0:	440a      	add	r2, r1
 8012af2:	7561      	strb	r1, [r4, #21]
 8012af4:	440b      	add	r3, r1
 8012af6:	60a2      	str	r2, [r4, #8]
 8012af8:	6123      	str	r3, [r4, #16]
 8012afa:	7da0      	ldrb	r0, [r4, #22]
 8012afc:	f080 0001 	eor.w	r0, r0, #1
 8012b00:	b002      	add	sp, #8
 8012b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b06:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012b0a:	801a      	strh	r2, [r3, #0]
 8012b0c:	e7ed      	b.n	8012aea <ucdr_serialize_int16_t+0x9e>
 8012b0e:	68a2      	ldr	r2, [r4, #8]
 8012b10:	6923      	ldr	r3, [r4, #16]
 8012b12:	7da0      	ldrb	r0, [r4, #22]
 8012b14:	1b92      	subs	r2, r2, r6
 8012b16:	1b9b      	subs	r3, r3, r6
 8012b18:	7567      	strb	r7, [r4, #21]
 8012b1a:	f080 0001 	eor.w	r0, r0, #1
 8012b1e:	60a2      	str	r2, [r4, #8]
 8012b20:	6123      	str	r3, [r4, #16]
 8012b22:	b002      	add	sp, #8
 8012b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b28:	68a3      	ldr	r3, [r4, #8]
 8012b2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012b2e:	701a      	strb	r2, [r3, #0]
 8012b30:	e7bc      	b.n	8012aac <ucdr_serialize_int16_t+0x60>
 8012b32:	4628      	mov	r0, r5
 8012b34:	f10d 0506 	add.w	r5, sp, #6
 8012b38:	4632      	mov	r2, r6
 8012b3a:	4629      	mov	r1, r5
 8012b3c:	f00a fa5d 	bl	801cffa <memcpy>
 8012b40:	4642      	mov	r2, r8
 8012b42:	19a9      	adds	r1, r5, r6
 8012b44:	68a0      	ldr	r0, [r4, #8]
 8012b46:	f00a fa58 	bl	801cffa <memcpy>
 8012b4a:	e7af      	b.n	8012aac <ucdr_serialize_int16_t+0x60>

08012b4c <ucdr_deserialize_int16_t>:
 8012b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b50:	4604      	mov	r4, r0
 8012b52:	460d      	mov	r5, r1
 8012b54:	2102      	movs	r1, #2
 8012b56:	f000 fd2b 	bl	80135b0 <ucdr_buffer_alignment>
 8012b5a:	4601      	mov	r1, r0
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012b62:	f000 fd6d 	bl	8013640 <ucdr_advance_buffer>
 8012b66:	2102      	movs	r1, #2
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f000 fcc1 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012b6e:	bb60      	cbnz	r0, 8012bca <ucdr_deserialize_int16_t+0x7e>
 8012b70:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012b74:	42be      	cmp	r6, r7
 8012b76:	d923      	bls.n	8012bc0 <ucdr_deserialize_int16_t+0x74>
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	60a6      	str	r6, [r4, #8]
 8012b7e:	1bf6      	subs	r6, r6, r7
 8012b80:	4433      	add	r3, r6
 8012b82:	f1c6 0902 	rsb	r9, r6, #2
 8012b86:	6123      	str	r3, [r4, #16]
 8012b88:	4649      	mov	r1, r9
 8012b8a:	f000 fcbd 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012b8e:	2800      	cmp	r0, #0
 8012b90:	d034      	beq.n	8012bfc <ucdr_deserialize_int16_t+0xb0>
 8012b92:	7d23      	ldrb	r3, [r4, #20]
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	d042      	beq.n	8012c1e <ucdr_deserialize_int16_t+0xd2>
 8012b98:	787b      	ldrb	r3, [r7, #1]
 8012b9a:	702b      	strb	r3, [r5, #0]
 8012b9c:	2e00      	cmp	r6, #0
 8012b9e:	d03a      	beq.n	8012c16 <ucdr_deserialize_int16_t+0xca>
 8012ba0:	783b      	ldrb	r3, [r7, #0]
 8012ba2:	706b      	strb	r3, [r5, #1]
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	2102      	movs	r1, #2
 8012ba8:	68a2      	ldr	r2, [r4, #8]
 8012baa:	3302      	adds	r3, #2
 8012bac:	7da0      	ldrb	r0, [r4, #22]
 8012bae:	444a      	add	r2, r9
 8012bb0:	7561      	strb	r1, [r4, #21]
 8012bb2:	1b9b      	subs	r3, r3, r6
 8012bb4:	f080 0001 	eor.w	r0, r0, #1
 8012bb8:	60a2      	str	r2, [r4, #8]
 8012bba:	6123      	str	r3, [r4, #16]
 8012bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bc0:	2102      	movs	r1, #2
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f000 fca0 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012bc8:	b180      	cbz	r0, 8012bec <ucdr_deserialize_int16_t+0xa0>
 8012bca:	7d23      	ldrb	r3, [r4, #20]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	68a3      	ldr	r3, [r4, #8]
 8012bd0:	d011      	beq.n	8012bf6 <ucdr_deserialize_int16_t+0xaa>
 8012bd2:	785b      	ldrb	r3, [r3, #1]
 8012bd4:	702b      	strb	r3, [r5, #0]
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	706b      	strb	r3, [r5, #1]
 8012bdc:	2102      	movs	r1, #2
 8012bde:	68a2      	ldr	r2, [r4, #8]
 8012be0:	6923      	ldr	r3, [r4, #16]
 8012be2:	440a      	add	r2, r1
 8012be4:	7561      	strb	r1, [r4, #21]
 8012be6:	440b      	add	r3, r1
 8012be8:	60a2      	str	r2, [r4, #8]
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	7da0      	ldrb	r0, [r4, #22]
 8012bee:	f080 0001 	eor.w	r0, r0, #1
 8012bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bf6:	881b      	ldrh	r3, [r3, #0]
 8012bf8:	802b      	strh	r3, [r5, #0]
 8012bfa:	e7ef      	b.n	8012bdc <ucdr_deserialize_int16_t+0x90>
 8012bfc:	68a2      	ldr	r2, [r4, #8]
 8012bfe:	6923      	ldr	r3, [r4, #16]
 8012c00:	1b92      	subs	r2, r2, r6
 8012c02:	7da0      	ldrb	r0, [r4, #22]
 8012c04:	1b9b      	subs	r3, r3, r6
 8012c06:	f884 8015 	strb.w	r8, [r4, #21]
 8012c0a:	f080 0001 	eor.w	r0, r0, #1
 8012c0e:	60a2      	str	r2, [r4, #8]
 8012c10:	6123      	str	r3, [r4, #16]
 8012c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c16:	68a3      	ldr	r3, [r4, #8]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	706b      	strb	r3, [r5, #1]
 8012c1c:	e7c2      	b.n	8012ba4 <ucdr_deserialize_int16_t+0x58>
 8012c1e:	4639      	mov	r1, r7
 8012c20:	4632      	mov	r2, r6
 8012c22:	4628      	mov	r0, r5
 8012c24:	f00a f9e9 	bl	801cffa <memcpy>
 8012c28:	464a      	mov	r2, r9
 8012c2a:	19a8      	adds	r0, r5, r6
 8012c2c:	68a1      	ldr	r1, [r4, #8]
 8012c2e:	f00a f9e4 	bl	801cffa <memcpy>
 8012c32:	e7b7      	b.n	8012ba4 <ucdr_deserialize_int16_t+0x58>

08012c34 <ucdr_serialize_int32_t>:
 8012c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c38:	b082      	sub	sp, #8
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	9101      	str	r1, [sp, #4]
 8012c3e:	2104      	movs	r1, #4
 8012c40:	f000 fcb6 	bl	80135b0 <ucdr_buffer_alignment>
 8012c44:	4601      	mov	r1, r0
 8012c46:	4620      	mov	r0, r4
 8012c48:	7d67      	ldrb	r7, [r4, #21]
 8012c4a:	f000 fcf9 	bl	8013640 <ucdr_advance_buffer>
 8012c4e:	2104      	movs	r1, #4
 8012c50:	4620      	mov	r0, r4
 8012c52:	f000 fc4d 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012c56:	2800      	cmp	r0, #0
 8012c58:	d139      	bne.n	8012cce <ucdr_serialize_int32_t+0x9a>
 8012c5a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c5e:	42ab      	cmp	r3, r5
 8012c60:	d930      	bls.n	8012cc4 <ucdr_serialize_int32_t+0x90>
 8012c62:	1b5e      	subs	r6, r3, r5
 8012c64:	60a3      	str	r3, [r4, #8]
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	4620      	mov	r0, r4
 8012c6a:	f1c6 0804 	rsb	r8, r6, #4
 8012c6e:	4433      	add	r3, r6
 8012c70:	4641      	mov	r1, r8
 8012c72:	6123      	str	r3, [r4, #16]
 8012c74:	f000 fc48 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	d04c      	beq.n	8012d16 <ucdr_serialize_int32_t+0xe2>
 8012c7c:	7d23      	ldrb	r3, [r4, #20]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d063      	beq.n	8012d4a <ucdr_serialize_int32_t+0x116>
 8012c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c86:	702b      	strb	r3, [r5, #0]
 8012c88:	2e00      	cmp	r6, #0
 8012c8a:	d051      	beq.n	8012d30 <ucdr_serialize_int32_t+0xfc>
 8012c8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c90:	2e01      	cmp	r6, #1
 8012c92:	706b      	strb	r3, [r5, #1]
 8012c94:	d050      	beq.n	8012d38 <ucdr_serialize_int32_t+0x104>
 8012c96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c9a:	2e02      	cmp	r6, #2
 8012c9c:	70ab      	strb	r3, [r5, #2]
 8012c9e:	d04f      	beq.n	8012d40 <ucdr_serialize_int32_t+0x10c>
 8012ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ca4:	70eb      	strb	r3, [r5, #3]
 8012ca6:	6923      	ldr	r3, [r4, #16]
 8012ca8:	2104      	movs	r1, #4
 8012caa:	68a2      	ldr	r2, [r4, #8]
 8012cac:	3304      	adds	r3, #4
 8012cae:	7da0      	ldrb	r0, [r4, #22]
 8012cb0:	4442      	add	r2, r8
 8012cb2:	7561      	strb	r1, [r4, #21]
 8012cb4:	1b9e      	subs	r6, r3, r6
 8012cb6:	f080 0001 	eor.w	r0, r0, #1
 8012cba:	60a2      	str	r2, [r4, #8]
 8012cbc:	6126      	str	r6, [r4, #16]
 8012cbe:	b002      	add	sp, #8
 8012cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc4:	2104      	movs	r1, #4
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f000 fc1e 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012ccc:	b1d0      	cbz	r0, 8012d04 <ucdr_serialize_int32_t+0xd0>
 8012cce:	7d23      	ldrb	r3, [r4, #20]
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	68a3      	ldr	r3, [r4, #8]
 8012cd4:	d01c      	beq.n	8012d10 <ucdr_serialize_int32_t+0xdc>
 8012cd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012cda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cde:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012ce2:	7018      	strb	r0, [r3, #0]
 8012ce4:	68a3      	ldr	r3, [r4, #8]
 8012ce6:	705a      	strb	r2, [r3, #1]
 8012ce8:	68a3      	ldr	r3, [r4, #8]
 8012cea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012cee:	7099      	strb	r1, [r3, #2]
 8012cf0:	68a3      	ldr	r3, [r4, #8]
 8012cf2:	70da      	strb	r2, [r3, #3]
 8012cf4:	2104      	movs	r1, #4
 8012cf6:	68a2      	ldr	r2, [r4, #8]
 8012cf8:	6923      	ldr	r3, [r4, #16]
 8012cfa:	440a      	add	r2, r1
 8012cfc:	7561      	strb	r1, [r4, #21]
 8012cfe:	440b      	add	r3, r1
 8012d00:	60a2      	str	r2, [r4, #8]
 8012d02:	6123      	str	r3, [r4, #16]
 8012d04:	7da0      	ldrb	r0, [r4, #22]
 8012d06:	f080 0001 	eor.w	r0, r0, #1
 8012d0a:	b002      	add	sp, #8
 8012d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d10:	9a01      	ldr	r2, [sp, #4]
 8012d12:	601a      	str	r2, [r3, #0]
 8012d14:	e7ee      	b.n	8012cf4 <ucdr_serialize_int32_t+0xc0>
 8012d16:	68a2      	ldr	r2, [r4, #8]
 8012d18:	6923      	ldr	r3, [r4, #16]
 8012d1a:	7da0      	ldrb	r0, [r4, #22]
 8012d1c:	1b92      	subs	r2, r2, r6
 8012d1e:	1b9b      	subs	r3, r3, r6
 8012d20:	7567      	strb	r7, [r4, #21]
 8012d22:	f080 0001 	eor.w	r0, r0, #1
 8012d26:	60a2      	str	r2, [r4, #8]
 8012d28:	6123      	str	r3, [r4, #16]
 8012d2a:	b002      	add	sp, #8
 8012d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d30:	68a3      	ldr	r3, [r4, #8]
 8012d32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d36:	701a      	strb	r2, [r3, #0]
 8012d38:	68a3      	ldr	r3, [r4, #8]
 8012d3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d3e:	701a      	strb	r2, [r3, #0]
 8012d40:	68a3      	ldr	r3, [r4, #8]
 8012d42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d46:	701a      	strb	r2, [r3, #0]
 8012d48:	e7ad      	b.n	8012ca6 <ucdr_serialize_int32_t+0x72>
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	ad01      	add	r5, sp, #4
 8012d4e:	4632      	mov	r2, r6
 8012d50:	4629      	mov	r1, r5
 8012d52:	f00a f952 	bl	801cffa <memcpy>
 8012d56:	4642      	mov	r2, r8
 8012d58:	19a9      	adds	r1, r5, r6
 8012d5a:	68a0      	ldr	r0, [r4, #8]
 8012d5c:	f00a f94d 	bl	801cffa <memcpy>
 8012d60:	e7a1      	b.n	8012ca6 <ucdr_serialize_int32_t+0x72>
 8012d62:	bf00      	nop

08012d64 <ucdr_deserialize_int32_t>:
 8012d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d68:	4604      	mov	r4, r0
 8012d6a:	460d      	mov	r5, r1
 8012d6c:	2104      	movs	r1, #4
 8012d6e:	f000 fc1f 	bl	80135b0 <ucdr_buffer_alignment>
 8012d72:	4601      	mov	r1, r0
 8012d74:	4620      	mov	r0, r4
 8012d76:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d7a:	f000 fc61 	bl	8013640 <ucdr_advance_buffer>
 8012d7e:	2104      	movs	r1, #4
 8012d80:	4620      	mov	r0, r4
 8012d82:	f000 fbb5 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d138      	bne.n	8012dfc <ucdr_deserialize_int32_t+0x98>
 8012d8a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012d8e:	42b7      	cmp	r7, r6
 8012d90:	d92f      	bls.n	8012df2 <ucdr_deserialize_int32_t+0x8e>
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	4620      	mov	r0, r4
 8012d96:	60a7      	str	r7, [r4, #8]
 8012d98:	1bbf      	subs	r7, r7, r6
 8012d9a:	443b      	add	r3, r7
 8012d9c:	f1c7 0904 	rsb	r9, r7, #4
 8012da0:	6123      	str	r3, [r4, #16]
 8012da2:	4649      	mov	r1, r9
 8012da4:	f000 fbb0 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d046      	beq.n	8012e3a <ucdr_deserialize_int32_t+0xd6>
 8012dac:	7d23      	ldrb	r3, [r4, #20]
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d05c      	beq.n	8012e6c <ucdr_deserialize_int32_t+0x108>
 8012db2:	78f3      	ldrb	r3, [r6, #3]
 8012db4:	702b      	strb	r3, [r5, #0]
 8012db6:	2f00      	cmp	r7, #0
 8012db8:	d04c      	beq.n	8012e54 <ucdr_deserialize_int32_t+0xf0>
 8012dba:	78b3      	ldrb	r3, [r6, #2]
 8012dbc:	2f01      	cmp	r7, #1
 8012dbe:	706b      	strb	r3, [r5, #1]
 8012dc0:	f105 0302 	add.w	r3, r5, #2
 8012dc4:	d04a      	beq.n	8012e5c <ucdr_deserialize_int32_t+0xf8>
 8012dc6:	7873      	ldrb	r3, [r6, #1]
 8012dc8:	2f02      	cmp	r7, #2
 8012dca:	70ab      	strb	r3, [r5, #2]
 8012dcc:	f105 0303 	add.w	r3, r5, #3
 8012dd0:	d048      	beq.n	8012e64 <ucdr_deserialize_int32_t+0x100>
 8012dd2:	7833      	ldrb	r3, [r6, #0]
 8012dd4:	70eb      	strb	r3, [r5, #3]
 8012dd6:	6923      	ldr	r3, [r4, #16]
 8012dd8:	2104      	movs	r1, #4
 8012dda:	68a2      	ldr	r2, [r4, #8]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	7da0      	ldrb	r0, [r4, #22]
 8012de0:	444a      	add	r2, r9
 8012de2:	7561      	strb	r1, [r4, #21]
 8012de4:	1bdb      	subs	r3, r3, r7
 8012de6:	f080 0001 	eor.w	r0, r0, #1
 8012dea:	60a2      	str	r2, [r4, #8]
 8012dec:	6123      	str	r3, [r4, #16]
 8012dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012df2:	2104      	movs	r1, #4
 8012df4:	4620      	mov	r0, r4
 8012df6:	f000 fb87 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012dfa:	b1b0      	cbz	r0, 8012e2a <ucdr_deserialize_int32_t+0xc6>
 8012dfc:	7d23      	ldrb	r3, [r4, #20]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	68a3      	ldr	r3, [r4, #8]
 8012e02:	d017      	beq.n	8012e34 <ucdr_deserialize_int32_t+0xd0>
 8012e04:	78db      	ldrb	r3, [r3, #3]
 8012e06:	702b      	strb	r3, [r5, #0]
 8012e08:	68a3      	ldr	r3, [r4, #8]
 8012e0a:	789b      	ldrb	r3, [r3, #2]
 8012e0c:	706b      	strb	r3, [r5, #1]
 8012e0e:	68a3      	ldr	r3, [r4, #8]
 8012e10:	785b      	ldrb	r3, [r3, #1]
 8012e12:	70ab      	strb	r3, [r5, #2]
 8012e14:	68a3      	ldr	r3, [r4, #8]
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	70eb      	strb	r3, [r5, #3]
 8012e1a:	2104      	movs	r1, #4
 8012e1c:	68a2      	ldr	r2, [r4, #8]
 8012e1e:	6923      	ldr	r3, [r4, #16]
 8012e20:	440a      	add	r2, r1
 8012e22:	7561      	strb	r1, [r4, #21]
 8012e24:	440b      	add	r3, r1
 8012e26:	60a2      	str	r2, [r4, #8]
 8012e28:	6123      	str	r3, [r4, #16]
 8012e2a:	7da0      	ldrb	r0, [r4, #22]
 8012e2c:	f080 0001 	eor.w	r0, r0, #1
 8012e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	602b      	str	r3, [r5, #0]
 8012e38:	e7ef      	b.n	8012e1a <ucdr_deserialize_int32_t+0xb6>
 8012e3a:	68a2      	ldr	r2, [r4, #8]
 8012e3c:	6923      	ldr	r3, [r4, #16]
 8012e3e:	1bd2      	subs	r2, r2, r7
 8012e40:	7da0      	ldrb	r0, [r4, #22]
 8012e42:	1bdb      	subs	r3, r3, r7
 8012e44:	f884 8015 	strb.w	r8, [r4, #21]
 8012e48:	f080 0001 	eor.w	r0, r0, #1
 8012e4c:	60a2      	str	r2, [r4, #8]
 8012e4e:	6123      	str	r3, [r4, #16]
 8012e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e54:	68a3      	ldr	r3, [r4, #8]
 8012e56:	789b      	ldrb	r3, [r3, #2]
 8012e58:	706b      	strb	r3, [r5, #1]
 8012e5a:	1cab      	adds	r3, r5, #2
 8012e5c:	68a2      	ldr	r2, [r4, #8]
 8012e5e:	7852      	ldrb	r2, [r2, #1]
 8012e60:	f803 2b01 	strb.w	r2, [r3], #1
 8012e64:	68a2      	ldr	r2, [r4, #8]
 8012e66:	7812      	ldrb	r2, [r2, #0]
 8012e68:	701a      	strb	r2, [r3, #0]
 8012e6a:	e7b4      	b.n	8012dd6 <ucdr_deserialize_int32_t+0x72>
 8012e6c:	4631      	mov	r1, r6
 8012e6e:	463a      	mov	r2, r7
 8012e70:	4628      	mov	r0, r5
 8012e72:	f00a f8c2 	bl	801cffa <memcpy>
 8012e76:	464a      	mov	r2, r9
 8012e78:	19e8      	adds	r0, r5, r7
 8012e7a:	68a1      	ldr	r1, [r4, #8]
 8012e7c:	f00a f8bd 	bl	801cffa <memcpy>
 8012e80:	e7a9      	b.n	8012dd6 <ucdr_deserialize_int32_t+0x72>
 8012e82:	bf00      	nop

08012e84 <ucdr_serialize_double>:
 8012e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e88:	4604      	mov	r4, r0
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	2108      	movs	r1, #8
 8012e8e:	ed8d 0b00 	vstr	d0, [sp]
 8012e92:	f000 fb8d 	bl	80135b0 <ucdr_buffer_alignment>
 8012e96:	4601      	mov	r1, r0
 8012e98:	4620      	mov	r0, r4
 8012e9a:	7d67      	ldrb	r7, [r4, #21]
 8012e9c:	f000 fbd0 	bl	8013640 <ucdr_advance_buffer>
 8012ea0:	2108      	movs	r1, #8
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f000 fb24 	bl	80134f0 <ucdr_check_buffer_available_for>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	d14e      	bne.n	8012f4a <ucdr_serialize_double+0xc6>
 8012eac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012eb0:	42ab      	cmp	r3, r5
 8012eb2:	d945      	bls.n	8012f40 <ucdr_serialize_double+0xbc>
 8012eb4:	1b5e      	subs	r6, r3, r5
 8012eb6:	60a3      	str	r3, [r4, #8]
 8012eb8:	6923      	ldr	r3, [r4, #16]
 8012eba:	4620      	mov	r0, r4
 8012ebc:	f1c6 0808 	rsb	r8, r6, #8
 8012ec0:	4433      	add	r3, r6
 8012ec2:	4641      	mov	r1, r8
 8012ec4:	6123      	str	r3, [r4, #16]
 8012ec6:	f000 fb1f 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d074      	beq.n	8012fb8 <ucdr_serialize_double+0x134>
 8012ece:	7d23      	ldrb	r3, [r4, #20]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	f000 809b 	beq.w	801300c <ucdr_serialize_double+0x188>
 8012ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012eda:	702b      	strb	r3, [r5, #0]
 8012edc:	2e00      	cmp	r6, #0
 8012ede:	d078      	beq.n	8012fd2 <ucdr_serialize_double+0x14e>
 8012ee0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ee4:	2e01      	cmp	r6, #1
 8012ee6:	706b      	strb	r3, [r5, #1]
 8012ee8:	d077      	beq.n	8012fda <ucdr_serialize_double+0x156>
 8012eea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012eee:	2e02      	cmp	r6, #2
 8012ef0:	70ab      	strb	r3, [r5, #2]
 8012ef2:	d076      	beq.n	8012fe2 <ucdr_serialize_double+0x15e>
 8012ef4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ef8:	2e03      	cmp	r6, #3
 8012efa:	70eb      	strb	r3, [r5, #3]
 8012efc:	d075      	beq.n	8012fea <ucdr_serialize_double+0x166>
 8012efe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012f02:	2e04      	cmp	r6, #4
 8012f04:	712b      	strb	r3, [r5, #4]
 8012f06:	d074      	beq.n	8012ff2 <ucdr_serialize_double+0x16e>
 8012f08:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012f0c:	2e05      	cmp	r6, #5
 8012f0e:	716b      	strb	r3, [r5, #5]
 8012f10:	d073      	beq.n	8012ffa <ucdr_serialize_double+0x176>
 8012f12:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012f16:	2e06      	cmp	r6, #6
 8012f18:	71ab      	strb	r3, [r5, #6]
 8012f1a:	d072      	beq.n	8013002 <ucdr_serialize_double+0x17e>
 8012f1c:	f89d 3000 	ldrb.w	r3, [sp]
 8012f20:	71eb      	strb	r3, [r5, #7]
 8012f22:	6923      	ldr	r3, [r4, #16]
 8012f24:	2108      	movs	r1, #8
 8012f26:	68a2      	ldr	r2, [r4, #8]
 8012f28:	3308      	adds	r3, #8
 8012f2a:	7da0      	ldrb	r0, [r4, #22]
 8012f2c:	4442      	add	r2, r8
 8012f2e:	7561      	strb	r1, [r4, #21]
 8012f30:	1b9e      	subs	r6, r3, r6
 8012f32:	f080 0001 	eor.w	r0, r0, #1
 8012f36:	60a2      	str	r2, [r4, #8]
 8012f38:	6126      	str	r6, [r4, #16]
 8012f3a:	b002      	add	sp, #8
 8012f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f40:	2108      	movs	r1, #8
 8012f42:	4620      	mov	r0, r4
 8012f44:	f000 fae0 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8012f48:	b350      	cbz	r0, 8012fa0 <ucdr_serialize_double+0x11c>
 8012f4a:	7d23      	ldrb	r3, [r4, #20]
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	d02d      	beq.n	8012fac <ucdr_serialize_double+0x128>
 8012f50:	68a3      	ldr	r3, [r4, #8]
 8012f52:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012f56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f5a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012f5e:	7018      	strb	r0, [r3, #0]
 8012f60:	68a3      	ldr	r3, [r4, #8]
 8012f62:	705a      	strb	r2, [r3, #1]
 8012f64:	68a3      	ldr	r3, [r4, #8]
 8012f66:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f6a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012f6e:	7099      	strb	r1, [r3, #2]
 8012f70:	68a3      	ldr	r3, [r4, #8]
 8012f72:	70da      	strb	r2, [r3, #3]
 8012f74:	68a3      	ldr	r3, [r4, #8]
 8012f76:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012f7a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012f7e:	7118      	strb	r0, [r3, #4]
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	715a      	strb	r2, [r3, #5]
 8012f84:	68a3      	ldr	r3, [r4, #8]
 8012f86:	f89d 2000 	ldrb.w	r2, [sp]
 8012f8a:	7199      	strb	r1, [r3, #6]
 8012f8c:	68a3      	ldr	r3, [r4, #8]
 8012f8e:	71da      	strb	r2, [r3, #7]
 8012f90:	2108      	movs	r1, #8
 8012f92:	68a2      	ldr	r2, [r4, #8]
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	440a      	add	r2, r1
 8012f98:	7561      	strb	r1, [r4, #21]
 8012f9a:	440b      	add	r3, r1
 8012f9c:	60a2      	str	r2, [r4, #8]
 8012f9e:	6123      	str	r3, [r4, #16]
 8012fa0:	7da0      	ldrb	r0, [r4, #22]
 8012fa2:	f080 0001 	eor.w	r0, r0, #1
 8012fa6:	b002      	add	sp, #8
 8012fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fac:	466b      	mov	r3, sp
 8012fae:	68a2      	ldr	r2, [r4, #8]
 8012fb0:	cb03      	ldmia	r3!, {r0, r1}
 8012fb2:	6010      	str	r0, [r2, #0]
 8012fb4:	6051      	str	r1, [r2, #4]
 8012fb6:	e7eb      	b.n	8012f90 <ucdr_serialize_double+0x10c>
 8012fb8:	68a2      	ldr	r2, [r4, #8]
 8012fba:	6923      	ldr	r3, [r4, #16]
 8012fbc:	7da0      	ldrb	r0, [r4, #22]
 8012fbe:	1b92      	subs	r2, r2, r6
 8012fc0:	1b9b      	subs	r3, r3, r6
 8012fc2:	7567      	strb	r7, [r4, #21]
 8012fc4:	f080 0001 	eor.w	r0, r0, #1
 8012fc8:	60a2      	str	r2, [r4, #8]
 8012fca:	6123      	str	r3, [r4, #16]
 8012fcc:	b002      	add	sp, #8
 8012fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd2:	68a3      	ldr	r3, [r4, #8]
 8012fd4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012fd8:	701a      	strb	r2, [r3, #0]
 8012fda:	68a3      	ldr	r3, [r4, #8]
 8012fdc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012fe0:	701a      	strb	r2, [r3, #0]
 8012fe2:	68a3      	ldr	r3, [r4, #8]
 8012fe4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012fe8:	701a      	strb	r2, [r3, #0]
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012ff0:	701a      	strb	r2, [r3, #0]
 8012ff2:	68a3      	ldr	r3, [r4, #8]
 8012ff4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	68a3      	ldr	r3, [r4, #8]
 8012ffc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013000:	701a      	strb	r2, [r3, #0]
 8013002:	68a3      	ldr	r3, [r4, #8]
 8013004:	f89d 2000 	ldrb.w	r2, [sp]
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	e78a      	b.n	8012f22 <ucdr_serialize_double+0x9e>
 801300c:	4628      	mov	r0, r5
 801300e:	466d      	mov	r5, sp
 8013010:	4632      	mov	r2, r6
 8013012:	4629      	mov	r1, r5
 8013014:	f009 fff1 	bl	801cffa <memcpy>
 8013018:	4642      	mov	r2, r8
 801301a:	19a9      	adds	r1, r5, r6
 801301c:	68a0      	ldr	r0, [r4, #8]
 801301e:	f009 ffec 	bl	801cffa <memcpy>
 8013022:	e77e      	b.n	8012f22 <ucdr_serialize_double+0x9e>

08013024 <ucdr_serialize_endian_double>:
 8013024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013028:	4604      	mov	r4, r0
 801302a:	b083      	sub	sp, #12
 801302c:	460e      	mov	r6, r1
 801302e:	2108      	movs	r1, #8
 8013030:	ed8d 0b00 	vstr	d0, [sp]
 8013034:	f000 fabc 	bl	80135b0 <ucdr_buffer_alignment>
 8013038:	4601      	mov	r1, r0
 801303a:	4620      	mov	r0, r4
 801303c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013040:	f000 fafe 	bl	8013640 <ucdr_advance_buffer>
 8013044:	2108      	movs	r1, #8
 8013046:	4620      	mov	r0, r4
 8013048:	f000 fa52 	bl	80134f0 <ucdr_check_buffer_available_for>
 801304c:	2800      	cmp	r0, #0
 801304e:	d14d      	bne.n	80130ec <ucdr_serialize_endian_double+0xc8>
 8013050:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8013054:	42bd      	cmp	r5, r7
 8013056:	d944      	bls.n	80130e2 <ucdr_serialize_endian_double+0xbe>
 8013058:	6923      	ldr	r3, [r4, #16]
 801305a:	4620      	mov	r0, r4
 801305c:	60a5      	str	r5, [r4, #8]
 801305e:	1bed      	subs	r5, r5, r7
 8013060:	442b      	add	r3, r5
 8013062:	f1c5 0908 	rsb	r9, r5, #8
 8013066:	6123      	str	r3, [r4, #16]
 8013068:	4649      	mov	r1, r9
 801306a:	f000 fa4d 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801306e:	2800      	cmp	r0, #0
 8013070:	d072      	beq.n	8013158 <ucdr_serialize_endian_double+0x134>
 8013072:	2e01      	cmp	r6, #1
 8013074:	f000 809b 	beq.w	80131ae <ucdr_serialize_endian_double+0x18a>
 8013078:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801307c:	703b      	strb	r3, [r7, #0]
 801307e:	2d00      	cmp	r5, #0
 8013080:	d078      	beq.n	8013174 <ucdr_serialize_endian_double+0x150>
 8013082:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013086:	2d01      	cmp	r5, #1
 8013088:	707b      	strb	r3, [r7, #1]
 801308a:	d077      	beq.n	801317c <ucdr_serialize_endian_double+0x158>
 801308c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013090:	2d02      	cmp	r5, #2
 8013092:	70bb      	strb	r3, [r7, #2]
 8013094:	d076      	beq.n	8013184 <ucdr_serialize_endian_double+0x160>
 8013096:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801309a:	2d03      	cmp	r5, #3
 801309c:	70fb      	strb	r3, [r7, #3]
 801309e:	d075      	beq.n	801318c <ucdr_serialize_endian_double+0x168>
 80130a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80130a4:	2d04      	cmp	r5, #4
 80130a6:	713b      	strb	r3, [r7, #4]
 80130a8:	d074      	beq.n	8013194 <ucdr_serialize_endian_double+0x170>
 80130aa:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80130ae:	2d05      	cmp	r5, #5
 80130b0:	717b      	strb	r3, [r7, #5]
 80130b2:	d073      	beq.n	801319c <ucdr_serialize_endian_double+0x178>
 80130b4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80130b8:	2d06      	cmp	r5, #6
 80130ba:	71bb      	strb	r3, [r7, #6]
 80130bc:	d072      	beq.n	80131a4 <ucdr_serialize_endian_double+0x180>
 80130be:	f89d 3000 	ldrb.w	r3, [sp]
 80130c2:	71fb      	strb	r3, [r7, #7]
 80130c4:	6923      	ldr	r3, [r4, #16]
 80130c6:	2108      	movs	r1, #8
 80130c8:	68a2      	ldr	r2, [r4, #8]
 80130ca:	3308      	adds	r3, #8
 80130cc:	7da0      	ldrb	r0, [r4, #22]
 80130ce:	444a      	add	r2, r9
 80130d0:	7561      	strb	r1, [r4, #21]
 80130d2:	1b5d      	subs	r5, r3, r5
 80130d4:	f080 0001 	eor.w	r0, r0, #1
 80130d8:	60a2      	str	r2, [r4, #8]
 80130da:	6125      	str	r5, [r4, #16]
 80130dc:	b003      	add	sp, #12
 80130de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130e2:	2108      	movs	r1, #8
 80130e4:	4620      	mov	r0, r4
 80130e6:	f000 fa0f 	bl	8013508 <ucdr_check_final_buffer_behavior>
 80130ea:	b348      	cbz	r0, 8013140 <ucdr_serialize_endian_double+0x11c>
 80130ec:	2e01      	cmp	r6, #1
 80130ee:	d02d      	beq.n	801314c <ucdr_serialize_endian_double+0x128>
 80130f0:	68a3      	ldr	r3, [r4, #8]
 80130f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80130f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80130fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80130fe:	7018      	strb	r0, [r3, #0]
 8013100:	68a3      	ldr	r3, [r4, #8]
 8013102:	705a      	strb	r2, [r3, #1]
 8013104:	68a3      	ldr	r3, [r4, #8]
 8013106:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801310a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801310e:	7099      	strb	r1, [r3, #2]
 8013110:	68a3      	ldr	r3, [r4, #8]
 8013112:	70da      	strb	r2, [r3, #3]
 8013114:	68a3      	ldr	r3, [r4, #8]
 8013116:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801311a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801311e:	7118      	strb	r0, [r3, #4]
 8013120:	68a3      	ldr	r3, [r4, #8]
 8013122:	715a      	strb	r2, [r3, #5]
 8013124:	68a3      	ldr	r3, [r4, #8]
 8013126:	f89d 2000 	ldrb.w	r2, [sp]
 801312a:	7199      	strb	r1, [r3, #6]
 801312c:	68a3      	ldr	r3, [r4, #8]
 801312e:	71da      	strb	r2, [r3, #7]
 8013130:	2108      	movs	r1, #8
 8013132:	68a2      	ldr	r2, [r4, #8]
 8013134:	6923      	ldr	r3, [r4, #16]
 8013136:	440a      	add	r2, r1
 8013138:	7561      	strb	r1, [r4, #21]
 801313a:	440b      	add	r3, r1
 801313c:	60a2      	str	r2, [r4, #8]
 801313e:	6123      	str	r3, [r4, #16]
 8013140:	7da0      	ldrb	r0, [r4, #22]
 8013142:	f080 0001 	eor.w	r0, r0, #1
 8013146:	b003      	add	sp, #12
 8013148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801314c:	466b      	mov	r3, sp
 801314e:	68a2      	ldr	r2, [r4, #8]
 8013150:	cb03      	ldmia	r3!, {r0, r1}
 8013152:	6010      	str	r0, [r2, #0]
 8013154:	6051      	str	r1, [r2, #4]
 8013156:	e7eb      	b.n	8013130 <ucdr_serialize_endian_double+0x10c>
 8013158:	68a2      	ldr	r2, [r4, #8]
 801315a:	6923      	ldr	r3, [r4, #16]
 801315c:	7da0      	ldrb	r0, [r4, #22]
 801315e:	1b52      	subs	r2, r2, r5
 8013160:	1b5b      	subs	r3, r3, r5
 8013162:	f884 8015 	strb.w	r8, [r4, #21]
 8013166:	f080 0001 	eor.w	r0, r0, #1
 801316a:	60a2      	str	r2, [r4, #8]
 801316c:	6123      	str	r3, [r4, #16]
 801316e:	b003      	add	sp, #12
 8013170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013174:	68a3      	ldr	r3, [r4, #8]
 8013176:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801317a:	701a      	strb	r2, [r3, #0]
 801317c:	68a3      	ldr	r3, [r4, #8]
 801317e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013182:	701a      	strb	r2, [r3, #0]
 8013184:	68a3      	ldr	r3, [r4, #8]
 8013186:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801318a:	701a      	strb	r2, [r3, #0]
 801318c:	68a3      	ldr	r3, [r4, #8]
 801318e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013192:	701a      	strb	r2, [r3, #0]
 8013194:	68a3      	ldr	r3, [r4, #8]
 8013196:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801319a:	701a      	strb	r2, [r3, #0]
 801319c:	68a3      	ldr	r3, [r4, #8]
 801319e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80131a2:	701a      	strb	r2, [r3, #0]
 80131a4:	68a3      	ldr	r3, [r4, #8]
 80131a6:	f89d 2000 	ldrb.w	r2, [sp]
 80131aa:	701a      	strb	r2, [r3, #0]
 80131ac:	e78a      	b.n	80130c4 <ucdr_serialize_endian_double+0xa0>
 80131ae:	466e      	mov	r6, sp
 80131b0:	462a      	mov	r2, r5
 80131b2:	4638      	mov	r0, r7
 80131b4:	4631      	mov	r1, r6
 80131b6:	f009 ff20 	bl	801cffa <memcpy>
 80131ba:	464a      	mov	r2, r9
 80131bc:	1971      	adds	r1, r6, r5
 80131be:	68a0      	ldr	r0, [r4, #8]
 80131c0:	f009 ff1b 	bl	801cffa <memcpy>
 80131c4:	e77e      	b.n	80130c4 <ucdr_serialize_endian_double+0xa0>
 80131c6:	bf00      	nop

080131c8 <ucdr_deserialize_double>:
 80131c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131cc:	4604      	mov	r4, r0
 80131ce:	460d      	mov	r5, r1
 80131d0:	2108      	movs	r1, #8
 80131d2:	f000 f9ed 	bl	80135b0 <ucdr_buffer_alignment>
 80131d6:	4601      	mov	r1, r0
 80131d8:	4620      	mov	r0, r4
 80131da:	f894 8015 	ldrb.w	r8, [r4, #21]
 80131de:	f000 fa2f 	bl	8013640 <ucdr_advance_buffer>
 80131e2:	2108      	movs	r1, #8
 80131e4:	4620      	mov	r0, r4
 80131e6:	f000 f983 	bl	80134f0 <ucdr_check_buffer_available_for>
 80131ea:	2800      	cmp	r0, #0
 80131ec:	d151      	bne.n	8013292 <ucdr_deserialize_double+0xca>
 80131ee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80131f2:	42be      	cmp	r6, r7
 80131f4:	d948      	bls.n	8013288 <ucdr_deserialize_double+0xc0>
 80131f6:	6923      	ldr	r3, [r4, #16]
 80131f8:	4620      	mov	r0, r4
 80131fa:	60a6      	str	r6, [r4, #8]
 80131fc:	1bf6      	subs	r6, r6, r7
 80131fe:	4433      	add	r3, r6
 8013200:	f1c6 0908 	rsb	r9, r6, #8
 8013204:	6123      	str	r3, [r4, #16]
 8013206:	4649      	mov	r1, r9
 8013208:	f000 f97e 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801320c:	2800      	cmp	r0, #0
 801320e:	d06d      	beq.n	80132ec <ucdr_deserialize_double+0x124>
 8013210:	7d23      	ldrb	r3, [r4, #20]
 8013212:	2b01      	cmp	r3, #1
 8013214:	f000 8093 	beq.w	801333e <ucdr_deserialize_double+0x176>
 8013218:	79fb      	ldrb	r3, [r7, #7]
 801321a:	702b      	strb	r3, [r5, #0]
 801321c:	2e00      	cmp	r6, #0
 801321e:	d072      	beq.n	8013306 <ucdr_deserialize_double+0x13e>
 8013220:	79bb      	ldrb	r3, [r7, #6]
 8013222:	2e01      	cmp	r6, #1
 8013224:	706b      	strb	r3, [r5, #1]
 8013226:	f105 0302 	add.w	r3, r5, #2
 801322a:	d070      	beq.n	801330e <ucdr_deserialize_double+0x146>
 801322c:	797b      	ldrb	r3, [r7, #5]
 801322e:	2e02      	cmp	r6, #2
 8013230:	70ab      	strb	r3, [r5, #2]
 8013232:	f105 0303 	add.w	r3, r5, #3
 8013236:	d06e      	beq.n	8013316 <ucdr_deserialize_double+0x14e>
 8013238:	793b      	ldrb	r3, [r7, #4]
 801323a:	2e03      	cmp	r6, #3
 801323c:	70eb      	strb	r3, [r5, #3]
 801323e:	f105 0304 	add.w	r3, r5, #4
 8013242:	d06c      	beq.n	801331e <ucdr_deserialize_double+0x156>
 8013244:	78fb      	ldrb	r3, [r7, #3]
 8013246:	2e04      	cmp	r6, #4
 8013248:	712b      	strb	r3, [r5, #4]
 801324a:	f105 0305 	add.w	r3, r5, #5
 801324e:	d06a      	beq.n	8013326 <ucdr_deserialize_double+0x15e>
 8013250:	78bb      	ldrb	r3, [r7, #2]
 8013252:	2e05      	cmp	r6, #5
 8013254:	716b      	strb	r3, [r5, #5]
 8013256:	f105 0306 	add.w	r3, r5, #6
 801325a:	d068      	beq.n	801332e <ucdr_deserialize_double+0x166>
 801325c:	787b      	ldrb	r3, [r7, #1]
 801325e:	2e06      	cmp	r6, #6
 8013260:	71ab      	strb	r3, [r5, #6]
 8013262:	f105 0307 	add.w	r3, r5, #7
 8013266:	d066      	beq.n	8013336 <ucdr_deserialize_double+0x16e>
 8013268:	783b      	ldrb	r3, [r7, #0]
 801326a:	71eb      	strb	r3, [r5, #7]
 801326c:	6923      	ldr	r3, [r4, #16]
 801326e:	2108      	movs	r1, #8
 8013270:	68a2      	ldr	r2, [r4, #8]
 8013272:	3308      	adds	r3, #8
 8013274:	7da0      	ldrb	r0, [r4, #22]
 8013276:	444a      	add	r2, r9
 8013278:	7561      	strb	r1, [r4, #21]
 801327a:	1b9e      	subs	r6, r3, r6
 801327c:	f080 0001 	eor.w	r0, r0, #1
 8013280:	60a2      	str	r2, [r4, #8]
 8013282:	6126      	str	r6, [r4, #16]
 8013284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013288:	2108      	movs	r1, #8
 801328a:	4620      	mov	r0, r4
 801328c:	f000 f93c 	bl	8013508 <ucdr_check_final_buffer_behavior>
 8013290:	b310      	cbz	r0, 80132d8 <ucdr_deserialize_double+0x110>
 8013292:	7d23      	ldrb	r3, [r4, #20]
 8013294:	2b01      	cmp	r3, #1
 8013296:	68a3      	ldr	r3, [r4, #8]
 8013298:	d023      	beq.n	80132e2 <ucdr_deserialize_double+0x11a>
 801329a:	79db      	ldrb	r3, [r3, #7]
 801329c:	702b      	strb	r3, [r5, #0]
 801329e:	68a3      	ldr	r3, [r4, #8]
 80132a0:	799b      	ldrb	r3, [r3, #6]
 80132a2:	706b      	strb	r3, [r5, #1]
 80132a4:	68a3      	ldr	r3, [r4, #8]
 80132a6:	795b      	ldrb	r3, [r3, #5]
 80132a8:	70ab      	strb	r3, [r5, #2]
 80132aa:	68a3      	ldr	r3, [r4, #8]
 80132ac:	791b      	ldrb	r3, [r3, #4]
 80132ae:	70eb      	strb	r3, [r5, #3]
 80132b0:	68a3      	ldr	r3, [r4, #8]
 80132b2:	78db      	ldrb	r3, [r3, #3]
 80132b4:	712b      	strb	r3, [r5, #4]
 80132b6:	68a3      	ldr	r3, [r4, #8]
 80132b8:	789b      	ldrb	r3, [r3, #2]
 80132ba:	716b      	strb	r3, [r5, #5]
 80132bc:	68a3      	ldr	r3, [r4, #8]
 80132be:	785b      	ldrb	r3, [r3, #1]
 80132c0:	71ab      	strb	r3, [r5, #6]
 80132c2:	68a3      	ldr	r3, [r4, #8]
 80132c4:	781b      	ldrb	r3, [r3, #0]
 80132c6:	71eb      	strb	r3, [r5, #7]
 80132c8:	2108      	movs	r1, #8
 80132ca:	68a2      	ldr	r2, [r4, #8]
 80132cc:	6923      	ldr	r3, [r4, #16]
 80132ce:	440a      	add	r2, r1
 80132d0:	7561      	strb	r1, [r4, #21]
 80132d2:	440b      	add	r3, r1
 80132d4:	60a2      	str	r2, [r4, #8]
 80132d6:	6123      	str	r3, [r4, #16]
 80132d8:	7da0      	ldrb	r0, [r4, #22]
 80132da:	f080 0001 	eor.w	r0, r0, #1
 80132de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	685b      	ldr	r3, [r3, #4]
 80132e6:	602a      	str	r2, [r5, #0]
 80132e8:	606b      	str	r3, [r5, #4]
 80132ea:	e7ed      	b.n	80132c8 <ucdr_deserialize_double+0x100>
 80132ec:	68a2      	ldr	r2, [r4, #8]
 80132ee:	6923      	ldr	r3, [r4, #16]
 80132f0:	1b92      	subs	r2, r2, r6
 80132f2:	7da0      	ldrb	r0, [r4, #22]
 80132f4:	1b9b      	subs	r3, r3, r6
 80132f6:	f884 8015 	strb.w	r8, [r4, #21]
 80132fa:	f080 0001 	eor.w	r0, r0, #1
 80132fe:	60a2      	str	r2, [r4, #8]
 8013300:	6123      	str	r3, [r4, #16]
 8013302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013306:	68a3      	ldr	r3, [r4, #8]
 8013308:	799b      	ldrb	r3, [r3, #6]
 801330a:	706b      	strb	r3, [r5, #1]
 801330c:	1cab      	adds	r3, r5, #2
 801330e:	68a2      	ldr	r2, [r4, #8]
 8013310:	7952      	ldrb	r2, [r2, #5]
 8013312:	f803 2b01 	strb.w	r2, [r3], #1
 8013316:	68a2      	ldr	r2, [r4, #8]
 8013318:	7912      	ldrb	r2, [r2, #4]
 801331a:	f803 2b01 	strb.w	r2, [r3], #1
 801331e:	68a2      	ldr	r2, [r4, #8]
 8013320:	78d2      	ldrb	r2, [r2, #3]
 8013322:	f803 2b01 	strb.w	r2, [r3], #1
 8013326:	68a2      	ldr	r2, [r4, #8]
 8013328:	7892      	ldrb	r2, [r2, #2]
 801332a:	f803 2b01 	strb.w	r2, [r3], #1
 801332e:	68a2      	ldr	r2, [r4, #8]
 8013330:	7852      	ldrb	r2, [r2, #1]
 8013332:	f803 2b01 	strb.w	r2, [r3], #1
 8013336:	68a2      	ldr	r2, [r4, #8]
 8013338:	7812      	ldrb	r2, [r2, #0]
 801333a:	701a      	strb	r2, [r3, #0]
 801333c:	e796      	b.n	801326c <ucdr_deserialize_double+0xa4>
 801333e:	4639      	mov	r1, r7
 8013340:	4632      	mov	r2, r6
 8013342:	4628      	mov	r0, r5
 8013344:	f009 fe59 	bl	801cffa <memcpy>
 8013348:	464a      	mov	r2, r9
 801334a:	19a8      	adds	r0, r5, r6
 801334c:	68a1      	ldr	r1, [r4, #8]
 801334e:	f009 fe54 	bl	801cffa <memcpy>
 8013352:	e78b      	b.n	801326c <ucdr_deserialize_double+0xa4>

08013354 <ucdr_deserialize_endian_double>:
 8013354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013358:	4604      	mov	r4, r0
 801335a:	460f      	mov	r7, r1
 801335c:	2108      	movs	r1, #8
 801335e:	4615      	mov	r5, r2
 8013360:	f000 f926 	bl	80135b0 <ucdr_buffer_alignment>
 8013364:	4601      	mov	r1, r0
 8013366:	4620      	mov	r0, r4
 8013368:	f894 8015 	ldrb.w	r8, [r4, #21]
 801336c:	f000 f968 	bl	8013640 <ucdr_advance_buffer>
 8013370:	2108      	movs	r1, #8
 8013372:	4620      	mov	r0, r4
 8013374:	f000 f8bc 	bl	80134f0 <ucdr_check_buffer_available_for>
 8013378:	2800      	cmp	r0, #0
 801337a:	d159      	bne.n	8013430 <ucdr_deserialize_endian_double+0xdc>
 801337c:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 8013380:	454e      	cmp	r6, r9
 8013382:	d950      	bls.n	8013426 <ucdr_deserialize_endian_double+0xd2>
 8013384:	6923      	ldr	r3, [r4, #16]
 8013386:	4620      	mov	r0, r4
 8013388:	60a6      	str	r6, [r4, #8]
 801338a:	eba6 0609 	sub.w	r6, r6, r9
 801338e:	4433      	add	r3, r6
 8013390:	f1c6 0a08 	rsb	sl, r6, #8
 8013394:	6123      	str	r3, [r4, #16]
 8013396:	4651      	mov	r1, sl
 8013398:	f000 f8b6 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801339c:	2800      	cmp	r0, #0
 801339e:	d073      	beq.n	8013488 <ucdr_deserialize_endian_double+0x134>
 80133a0:	2f01      	cmp	r7, #1
 80133a2:	f000 809a 	beq.w	80134da <ucdr_deserialize_endian_double+0x186>
 80133a6:	f899 3007 	ldrb.w	r3, [r9, #7]
 80133aa:	702b      	strb	r3, [r5, #0]
 80133ac:	2e00      	cmp	r6, #0
 80133ae:	d078      	beq.n	80134a2 <ucdr_deserialize_endian_double+0x14e>
 80133b0:	f899 3006 	ldrb.w	r3, [r9, #6]
 80133b4:	2e01      	cmp	r6, #1
 80133b6:	706b      	strb	r3, [r5, #1]
 80133b8:	f105 0302 	add.w	r3, r5, #2
 80133bc:	d075      	beq.n	80134aa <ucdr_deserialize_endian_double+0x156>
 80133be:	f899 3005 	ldrb.w	r3, [r9, #5]
 80133c2:	2e02      	cmp	r6, #2
 80133c4:	70ab      	strb	r3, [r5, #2]
 80133c6:	f105 0303 	add.w	r3, r5, #3
 80133ca:	d072      	beq.n	80134b2 <ucdr_deserialize_endian_double+0x15e>
 80133cc:	f899 3004 	ldrb.w	r3, [r9, #4]
 80133d0:	2e03      	cmp	r6, #3
 80133d2:	70eb      	strb	r3, [r5, #3]
 80133d4:	f105 0304 	add.w	r3, r5, #4
 80133d8:	d06f      	beq.n	80134ba <ucdr_deserialize_endian_double+0x166>
 80133da:	f899 3003 	ldrb.w	r3, [r9, #3]
 80133de:	2e04      	cmp	r6, #4
 80133e0:	712b      	strb	r3, [r5, #4]
 80133e2:	f105 0305 	add.w	r3, r5, #5
 80133e6:	d06c      	beq.n	80134c2 <ucdr_deserialize_endian_double+0x16e>
 80133e8:	f899 3002 	ldrb.w	r3, [r9, #2]
 80133ec:	2e05      	cmp	r6, #5
 80133ee:	716b      	strb	r3, [r5, #5]
 80133f0:	f105 0306 	add.w	r3, r5, #6
 80133f4:	d069      	beq.n	80134ca <ucdr_deserialize_endian_double+0x176>
 80133f6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80133fa:	2e06      	cmp	r6, #6
 80133fc:	71ab      	strb	r3, [r5, #6]
 80133fe:	f105 0307 	add.w	r3, r5, #7
 8013402:	d066      	beq.n	80134d2 <ucdr_deserialize_endian_double+0x17e>
 8013404:	f899 3000 	ldrb.w	r3, [r9]
 8013408:	71eb      	strb	r3, [r5, #7]
 801340a:	6923      	ldr	r3, [r4, #16]
 801340c:	2108      	movs	r1, #8
 801340e:	68a2      	ldr	r2, [r4, #8]
 8013410:	3308      	adds	r3, #8
 8013412:	7da0      	ldrb	r0, [r4, #22]
 8013414:	4452      	add	r2, sl
 8013416:	7561      	strb	r1, [r4, #21]
 8013418:	1b9e      	subs	r6, r3, r6
 801341a:	f080 0001 	eor.w	r0, r0, #1
 801341e:	60a2      	str	r2, [r4, #8]
 8013420:	6126      	str	r6, [r4, #16]
 8013422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013426:	2108      	movs	r1, #8
 8013428:	4620      	mov	r0, r4
 801342a:	f000 f86d 	bl	8013508 <ucdr_check_final_buffer_behavior>
 801342e:	b308      	cbz	r0, 8013474 <ucdr_deserialize_endian_double+0x120>
 8013430:	2f01      	cmp	r7, #1
 8013432:	68a3      	ldr	r3, [r4, #8]
 8013434:	d023      	beq.n	801347e <ucdr_deserialize_endian_double+0x12a>
 8013436:	79db      	ldrb	r3, [r3, #7]
 8013438:	702b      	strb	r3, [r5, #0]
 801343a:	68a3      	ldr	r3, [r4, #8]
 801343c:	799b      	ldrb	r3, [r3, #6]
 801343e:	706b      	strb	r3, [r5, #1]
 8013440:	68a3      	ldr	r3, [r4, #8]
 8013442:	795b      	ldrb	r3, [r3, #5]
 8013444:	70ab      	strb	r3, [r5, #2]
 8013446:	68a3      	ldr	r3, [r4, #8]
 8013448:	791b      	ldrb	r3, [r3, #4]
 801344a:	70eb      	strb	r3, [r5, #3]
 801344c:	68a3      	ldr	r3, [r4, #8]
 801344e:	78db      	ldrb	r3, [r3, #3]
 8013450:	712b      	strb	r3, [r5, #4]
 8013452:	68a3      	ldr	r3, [r4, #8]
 8013454:	789b      	ldrb	r3, [r3, #2]
 8013456:	716b      	strb	r3, [r5, #5]
 8013458:	68a3      	ldr	r3, [r4, #8]
 801345a:	785b      	ldrb	r3, [r3, #1]
 801345c:	71ab      	strb	r3, [r5, #6]
 801345e:	68a3      	ldr	r3, [r4, #8]
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	71eb      	strb	r3, [r5, #7]
 8013464:	2108      	movs	r1, #8
 8013466:	68a2      	ldr	r2, [r4, #8]
 8013468:	6923      	ldr	r3, [r4, #16]
 801346a:	440a      	add	r2, r1
 801346c:	7561      	strb	r1, [r4, #21]
 801346e:	440b      	add	r3, r1
 8013470:	60a2      	str	r2, [r4, #8]
 8013472:	6123      	str	r3, [r4, #16]
 8013474:	7da0      	ldrb	r0, [r4, #22]
 8013476:	f080 0001 	eor.w	r0, r0, #1
 801347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	685b      	ldr	r3, [r3, #4]
 8013482:	602a      	str	r2, [r5, #0]
 8013484:	606b      	str	r3, [r5, #4]
 8013486:	e7ed      	b.n	8013464 <ucdr_deserialize_endian_double+0x110>
 8013488:	68a2      	ldr	r2, [r4, #8]
 801348a:	6923      	ldr	r3, [r4, #16]
 801348c:	1b92      	subs	r2, r2, r6
 801348e:	7da0      	ldrb	r0, [r4, #22]
 8013490:	1b9b      	subs	r3, r3, r6
 8013492:	f884 8015 	strb.w	r8, [r4, #21]
 8013496:	f080 0001 	eor.w	r0, r0, #1
 801349a:	60a2      	str	r2, [r4, #8]
 801349c:	6123      	str	r3, [r4, #16]
 801349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a2:	68a3      	ldr	r3, [r4, #8]
 80134a4:	799b      	ldrb	r3, [r3, #6]
 80134a6:	706b      	strb	r3, [r5, #1]
 80134a8:	1cab      	adds	r3, r5, #2
 80134aa:	68a2      	ldr	r2, [r4, #8]
 80134ac:	7952      	ldrb	r2, [r2, #5]
 80134ae:	f803 2b01 	strb.w	r2, [r3], #1
 80134b2:	68a2      	ldr	r2, [r4, #8]
 80134b4:	7912      	ldrb	r2, [r2, #4]
 80134b6:	f803 2b01 	strb.w	r2, [r3], #1
 80134ba:	68a2      	ldr	r2, [r4, #8]
 80134bc:	78d2      	ldrb	r2, [r2, #3]
 80134be:	f803 2b01 	strb.w	r2, [r3], #1
 80134c2:	68a2      	ldr	r2, [r4, #8]
 80134c4:	7892      	ldrb	r2, [r2, #2]
 80134c6:	f803 2b01 	strb.w	r2, [r3], #1
 80134ca:	68a2      	ldr	r2, [r4, #8]
 80134cc:	7852      	ldrb	r2, [r2, #1]
 80134ce:	f803 2b01 	strb.w	r2, [r3], #1
 80134d2:	68a2      	ldr	r2, [r4, #8]
 80134d4:	7812      	ldrb	r2, [r2, #0]
 80134d6:	701a      	strb	r2, [r3, #0]
 80134d8:	e797      	b.n	801340a <ucdr_deserialize_endian_double+0xb6>
 80134da:	4649      	mov	r1, r9
 80134dc:	4632      	mov	r2, r6
 80134de:	4628      	mov	r0, r5
 80134e0:	f009 fd8b 	bl	801cffa <memcpy>
 80134e4:	4652      	mov	r2, sl
 80134e6:	19a8      	adds	r0, r5, r6
 80134e8:	68a1      	ldr	r1, [r4, #8]
 80134ea:	f009 fd86 	bl	801cffa <memcpy>
 80134ee:	e78c      	b.n	801340a <ucdr_deserialize_endian_double+0xb6>

080134f0 <ucdr_check_buffer_available_for>:
 80134f0:	7d83      	ldrb	r3, [r0, #22]
 80134f2:	b93b      	cbnz	r3, 8013504 <ucdr_check_buffer_available_for+0x14>
 80134f4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80134f8:	4419      	add	r1, r3
 80134fa:	4288      	cmp	r0, r1
 80134fc:	bf34      	ite	cc
 80134fe:	2000      	movcc	r0, #0
 8013500:	2001      	movcs	r0, #1
 8013502:	4770      	bx	lr
 8013504:	2000      	movs	r0, #0
 8013506:	4770      	bx	lr

08013508 <ucdr_check_final_buffer_behavior>:
 8013508:	7d83      	ldrb	r3, [r0, #22]
 801350a:	b943      	cbnz	r3, 801351e <ucdr_check_final_buffer_behavior+0x16>
 801350c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013510:	b510      	push	{r4, lr}
 8013512:	4291      	cmp	r1, r2
 8013514:	4604      	mov	r4, r0
 8013516:	d205      	bcs.n	8013524 <ucdr_check_final_buffer_behavior+0x1c>
 8013518:	2301      	movs	r3, #1
 801351a:	4618      	mov	r0, r3
 801351c:	bd10      	pop	{r4, pc}
 801351e:	2300      	movs	r3, #0
 8013520:	4618      	mov	r0, r3
 8013522:	4770      	bx	lr
 8013524:	6982      	ldr	r2, [r0, #24]
 8013526:	b13a      	cbz	r2, 8013538 <ucdr_check_final_buffer_behavior+0x30>
 8013528:	69c1      	ldr	r1, [r0, #28]
 801352a:	4790      	blx	r2
 801352c:	f080 0301 	eor.w	r3, r0, #1
 8013530:	75a0      	strb	r0, [r4, #22]
 8013532:	b2db      	uxtb	r3, r3
 8013534:	4618      	mov	r0, r3
 8013536:	bd10      	pop	{r4, pc}
 8013538:	2001      	movs	r0, #1
 801353a:	75a0      	strb	r0, [r4, #22]
 801353c:	e7fa      	b.n	8013534 <ucdr_check_final_buffer_behavior+0x2c>
 801353e:	bf00      	nop

08013540 <ucdr_set_on_full_buffer_callback>:
 8013540:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013544:	4770      	bx	lr
 8013546:	bf00      	nop

08013548 <ucdr_init_buffer_origin_offset_endian>:
 8013548:	b410      	push	{r4}
 801354a:	9c01      	ldr	r4, [sp, #4]
 801354c:	440a      	add	r2, r1
 801354e:	6001      	str	r1, [r0, #0]
 8013550:	6042      	str	r2, [r0, #4]
 8013552:	190a      	adds	r2, r1, r4
 8013554:	441c      	add	r4, r3
 8013556:	6082      	str	r2, [r0, #8]
 8013558:	2200      	movs	r2, #0
 801355a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801355e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013562:	7542      	strb	r2, [r0, #21]
 8013564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013568:	7582      	strb	r2, [r0, #22]
 801356a:	7503      	strb	r3, [r0, #20]
 801356c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop

08013574 <ucdr_init_buffer_origin_offset>:
 8013574:	b510      	push	{r4, lr}
 8013576:	b082      	sub	sp, #8
 8013578:	9c04      	ldr	r4, [sp, #16]
 801357a:	9400      	str	r4, [sp, #0]
 801357c:	2401      	movs	r4, #1
 801357e:	9401      	str	r4, [sp, #4]
 8013580:	f7ff ffe2 	bl	8013548 <ucdr_init_buffer_origin_offset_endian>
 8013584:	b002      	add	sp, #8
 8013586:	bd10      	pop	{r4, pc}

08013588 <ucdr_init_buffer_origin>:
 8013588:	b510      	push	{r4, lr}
 801358a:	2400      	movs	r4, #0
 801358c:	b082      	sub	sp, #8
 801358e:	9400      	str	r4, [sp, #0]
 8013590:	f7ff fff0 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8013594:	b002      	add	sp, #8
 8013596:	bd10      	pop	{r4, pc}

08013598 <ucdr_init_buffer>:
 8013598:	2300      	movs	r3, #0
 801359a:	f7ff bff5 	b.w	8013588 <ucdr_init_buffer_origin>
 801359e:	bf00      	nop

080135a0 <ucdr_alignment>:
 80135a0:	fbb0 f2f1 	udiv	r2, r0, r1
 80135a4:	fb02 0011 	mls	r0, r2, r1, r0
 80135a8:	1e4b      	subs	r3, r1, #1
 80135aa:	1a08      	subs	r0, r1, r0
 80135ac:	4018      	ands	r0, r3
 80135ae:	4770      	bx	lr

080135b0 <ucdr_buffer_alignment>:
 80135b0:	7d43      	ldrb	r3, [r0, #21]
 80135b2:	428b      	cmp	r3, r1
 80135b4:	d209      	bcs.n	80135ca <ucdr_buffer_alignment+0x1a>
 80135b6:	6903      	ldr	r3, [r0, #16]
 80135b8:	1e4a      	subs	r2, r1, #1
 80135ba:	fbb3 f0f1 	udiv	r0, r3, r1
 80135be:	fb01 3010 	mls	r0, r1, r0, r3
 80135c2:	1a09      	subs	r1, r1, r0
 80135c4:	ea01 0002 	and.w	r0, r1, r2
 80135c8:	4770      	bx	lr
 80135ca:	2000      	movs	r0, #0
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop

080135d0 <ucdr_align_to>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	4604      	mov	r4, r0
 80135d4:	460d      	mov	r5, r1
 80135d6:	f7ff ffeb 	bl	80135b0 <ucdr_buffer_alignment>
 80135da:	68a3      	ldr	r3, [r4, #8]
 80135dc:	7565      	strb	r5, [r4, #21]
 80135de:	181a      	adds	r2, r3, r0
 80135e0:	6923      	ldr	r3, [r4, #16]
 80135e2:	4418      	add	r0, r3
 80135e4:	6863      	ldr	r3, [r4, #4]
 80135e6:	4293      	cmp	r3, r2
 80135e8:	6120      	str	r0, [r4, #16]
 80135ea:	bf28      	it	cs
 80135ec:	4613      	movcs	r3, r2
 80135ee:	60a3      	str	r3, [r4, #8]
 80135f0:	bd38      	pop	{r3, r4, r5, pc}
 80135f2:	bf00      	nop

080135f4 <ucdr_buffer_length>:
 80135f4:	6882      	ldr	r2, [r0, #8]
 80135f6:	6800      	ldr	r0, [r0, #0]
 80135f8:	1a10      	subs	r0, r2, r0
 80135fa:	4770      	bx	lr

080135fc <ucdr_buffer_remaining>:
 80135fc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013600:	1a10      	subs	r0, r2, r0
 8013602:	4770      	bx	lr

08013604 <ucdr_check_final_buffer_behavior_array>:
 8013604:	b538      	push	{r3, r4, r5, lr}
 8013606:	7d83      	ldrb	r3, [r0, #22]
 8013608:	b9a3      	cbnz	r3, 8013634 <ucdr_check_final_buffer_behavior_array+0x30>
 801360a:	4604      	mov	r4, r0
 801360c:	460d      	mov	r5, r1
 801360e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013612:	429a      	cmp	r2, r3
 8013614:	d300      	bcc.n	8013618 <ucdr_check_final_buffer_behavior_array+0x14>
 8013616:	b931      	cbnz	r1, 8013626 <ucdr_check_final_buffer_behavior_array+0x22>
 8013618:	4620      	mov	r0, r4
 801361a:	f7ff ffef 	bl	80135fc <ucdr_buffer_remaining>
 801361e:	42a8      	cmp	r0, r5
 8013620:	bf28      	it	cs
 8013622:	4628      	movcs	r0, r5
 8013624:	bd38      	pop	{r3, r4, r5, pc}
 8013626:	6983      	ldr	r3, [r0, #24]
 8013628:	b133      	cbz	r3, 8013638 <ucdr_check_final_buffer_behavior_array+0x34>
 801362a:	69c1      	ldr	r1, [r0, #28]
 801362c:	4798      	blx	r3
 801362e:	75a0      	strb	r0, [r4, #22]
 8013630:	2800      	cmp	r0, #0
 8013632:	d0f1      	beq.n	8013618 <ucdr_check_final_buffer_behavior_array+0x14>
 8013634:	2000      	movs	r0, #0
 8013636:	bd38      	pop	{r3, r4, r5, pc}
 8013638:	2301      	movs	r3, #1
 801363a:	7583      	strb	r3, [r0, #22]
 801363c:	e7fa      	b.n	8013634 <ucdr_check_final_buffer_behavior_array+0x30>
 801363e:	bf00      	nop

08013640 <ucdr_advance_buffer>:
 8013640:	b538      	push	{r3, r4, r5, lr}
 8013642:	4604      	mov	r4, r0
 8013644:	460d      	mov	r5, r1
 8013646:	f7ff ff53 	bl	80134f0 <ucdr_check_buffer_available_for>
 801364a:	b178      	cbz	r0, 801366c <ucdr_advance_buffer+0x2c>
 801364c:	6923      	ldr	r3, [r4, #16]
 801364e:	68a2      	ldr	r2, [r4, #8]
 8013650:	442b      	add	r3, r5
 8013652:	442a      	add	r2, r5
 8013654:	6123      	str	r3, [r4, #16]
 8013656:	2301      	movs	r3, #1
 8013658:	60a2      	str	r2, [r4, #8]
 801365a:	7563      	strb	r3, [r4, #21]
 801365c:	bd38      	pop	{r3, r4, r5, pc}
 801365e:	68a2      	ldr	r2, [r4, #8]
 8013660:	1a2d      	subs	r5, r5, r0
 8013662:	6923      	ldr	r3, [r4, #16]
 8013664:	4402      	add	r2, r0
 8013666:	4418      	add	r0, r3
 8013668:	60a2      	str	r2, [r4, #8]
 801366a:	6120      	str	r0, [r4, #16]
 801366c:	4629      	mov	r1, r5
 801366e:	2201      	movs	r2, #1
 8013670:	4620      	mov	r0, r4
 8013672:	f7ff ffc7 	bl	8013604 <ucdr_check_final_buffer_behavior_array>
 8013676:	2800      	cmp	r0, #0
 8013678:	d1f1      	bne.n	801365e <ucdr_advance_buffer+0x1e>
 801367a:	2301      	movs	r3, #1
 801367c:	7563      	strb	r3, [r4, #21]
 801367e:	bd38      	pop	{r3, r4, r5, pc}

08013680 <ucdr_serialize_sequence_char>:
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	4615      	mov	r5, r2
 8013684:	460e      	mov	r6, r1
 8013686:	7d01      	ldrb	r1, [r0, #20]
 8013688:	4604      	mov	r4, r0
 801368a:	f7fe ff51 	bl	8012530 <ucdr_serialize_endian_uint32_t>
 801368e:	b90d      	cbnz	r5, 8013694 <ucdr_serialize_sequence_char+0x14>
 8013690:	2001      	movs	r0, #1
 8013692:	bd70      	pop	{r4, r5, r6, pc}
 8013694:	462b      	mov	r3, r5
 8013696:	4632      	mov	r2, r6
 8013698:	7d21      	ldrb	r1, [r4, #20]
 801369a:	4620      	mov	r0, r4
 801369c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136a0:	f7fe ba90 	b.w	8011bc4 <ucdr_serialize_endian_array_char>

080136a4 <ucdr_deserialize_sequence_char>:
 80136a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136a8:	461d      	mov	r5, r3
 80136aa:	4616      	mov	r6, r2
 80136ac:	460f      	mov	r7, r1
 80136ae:	461a      	mov	r2, r3
 80136b0:	7d01      	ldrb	r1, [r0, #20]
 80136b2:	4604      	mov	r4, r0
 80136b4:	f7ff f864 	bl	8012780 <ucdr_deserialize_endian_uint32_t>
 80136b8:	682b      	ldr	r3, [r5, #0]
 80136ba:	429e      	cmp	r6, r3
 80136bc:	d201      	bcs.n	80136c2 <ucdr_deserialize_sequence_char+0x1e>
 80136be:	2201      	movs	r2, #1
 80136c0:	75a2      	strb	r2, [r4, #22]
 80136c2:	b913      	cbnz	r3, 80136ca <ucdr_deserialize_sequence_char+0x26>
 80136c4:	2001      	movs	r0, #1
 80136c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ca:	463a      	mov	r2, r7
 80136cc:	7d21      	ldrb	r1, [r4, #20]
 80136ce:	4620      	mov	r0, r4
 80136d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136d4:	f7fe baa8 	b.w	8011c28 <ucdr_deserialize_endian_array_char>

080136d8 <ucdr_serialize_sequence_uint8_t>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	4615      	mov	r5, r2
 80136dc:	460e      	mov	r6, r1
 80136de:	7d01      	ldrb	r1, [r0, #20]
 80136e0:	4604      	mov	r4, r0
 80136e2:	f7fe ff25 	bl	8012530 <ucdr_serialize_endian_uint32_t>
 80136e6:	b90d      	cbnz	r5, 80136ec <ucdr_serialize_sequence_uint8_t+0x14>
 80136e8:	2001      	movs	r0, #1
 80136ea:	bd70      	pop	{r4, r5, r6, pc}
 80136ec:	462b      	mov	r3, r5
 80136ee:	4632      	mov	r2, r6
 80136f0:	7d21      	ldrb	r1, [r4, #20]
 80136f2:	4620      	mov	r0, r4
 80136f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136f8:	f7fe bafc 	b.w	8011cf4 <ucdr_serialize_endian_array_uint8_t>

080136fc <ucdr_deserialize_sequence_uint8_t>:
 80136fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013700:	461d      	mov	r5, r3
 8013702:	4616      	mov	r6, r2
 8013704:	460f      	mov	r7, r1
 8013706:	461a      	mov	r2, r3
 8013708:	7d01      	ldrb	r1, [r0, #20]
 801370a:	4604      	mov	r4, r0
 801370c:	f7ff f838 	bl	8012780 <ucdr_deserialize_endian_uint32_t>
 8013710:	682b      	ldr	r3, [r5, #0]
 8013712:	429e      	cmp	r6, r3
 8013714:	d201      	bcs.n	801371a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8013716:	2201      	movs	r2, #1
 8013718:	75a2      	strb	r2, [r4, #22]
 801371a:	b913      	cbnz	r3, 8013722 <ucdr_deserialize_sequence_uint8_t+0x26>
 801371c:	2001      	movs	r0, #1
 801371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013722:	463a      	mov	r2, r7
 8013724:	7d21      	ldrb	r1, [r4, #20]
 8013726:	4620      	mov	r0, r4
 8013728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801372c:	f7fe bb48 	b.w	8011dc0 <ucdr_deserialize_endian_array_uint8_t>

08013730 <uxr_buffer_delete_entity>:
 8013730:	b510      	push	{r4, lr}
 8013732:	2300      	movs	r3, #0
 8013734:	b08e      	sub	sp, #56	@ 0x38
 8013736:	4604      	mov	r4, r0
 8013738:	9103      	str	r1, [sp, #12]
 801373a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801373e:	2303      	movs	r3, #3
 8013740:	2204      	movs	r2, #4
 8013742:	9300      	str	r3, [sp, #0]
 8013744:	ab06      	add	r3, sp, #24
 8013746:	f001 fab1 	bl	8014cac <uxr_prepare_stream_to_write_submessage>
 801374a:	b918      	cbnz	r0, 8013754 <uxr_buffer_delete_entity+0x24>
 801374c:	4604      	mov	r4, r0
 801374e:	4620      	mov	r0, r4
 8013750:	b00e      	add	sp, #56	@ 0x38
 8013752:	bd10      	pop	{r4, pc}
 8013754:	9902      	ldr	r1, [sp, #8]
 8013756:	aa05      	add	r2, sp, #20
 8013758:	4620      	mov	r0, r4
 801375a:	f001 fbe3 	bl	8014f24 <uxr_init_base_object_request>
 801375e:	4604      	mov	r4, r0
 8013760:	a905      	add	r1, sp, #20
 8013762:	a806      	add	r0, sp, #24
 8013764:	f003 f9c8 	bl	8016af8 <uxr_serialize_DELETE_Payload>
 8013768:	4620      	mov	r0, r4
 801376a:	b00e      	add	sp, #56	@ 0x38
 801376c:	bd10      	pop	{r4, pc}
 801376e:	bf00      	nop

08013770 <uxr_common_create_entity>:
 8013770:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013774:	b510      	push	{r4, lr}
 8013776:	f1bc 0f01 	cmp.w	ip, #1
 801377a:	b08c      	sub	sp, #48	@ 0x30
 801377c:	4604      	mov	r4, r0
 801377e:	9202      	str	r2, [sp, #8]
 8013780:	bf0c      	ite	eq
 8013782:	f003 0201 	andeq.w	r2, r3, #1
 8013786:	2200      	movne	r2, #0
 8013788:	330e      	adds	r3, #14
 801378a:	9103      	str	r1, [sp, #12]
 801378c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8013790:	441a      	add	r2, r3
 8013792:	ab04      	add	r3, sp, #16
 8013794:	9101      	str	r1, [sp, #4]
 8013796:	2101      	movs	r1, #1
 8013798:	b292      	uxth	r2, r2
 801379a:	9100      	str	r1, [sp, #0]
 801379c:	9903      	ldr	r1, [sp, #12]
 801379e:	f001 fa85 	bl	8014cac <uxr_prepare_stream_to_write_submessage>
 80137a2:	b918      	cbnz	r0, 80137ac <uxr_common_create_entity+0x3c>
 80137a4:	4604      	mov	r4, r0
 80137a6:	4620      	mov	r0, r4
 80137a8:	b00c      	add	sp, #48	@ 0x30
 80137aa:	bd10      	pop	{r4, pc}
 80137ac:	9902      	ldr	r1, [sp, #8]
 80137ae:	4620      	mov	r0, r4
 80137b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137b2:	f001 fbb7 	bl	8014f24 <uxr_init_base_object_request>
 80137b6:	4604      	mov	r4, r0
 80137b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80137ba:	a804      	add	r0, sp, #16
 80137bc:	f003 f8f6 	bl	80169ac <uxr_serialize_CREATE_Payload>
 80137c0:	4620      	mov	r0, r4
 80137c2:	b00c      	add	sp, #48	@ 0x30
 80137c4:	bd10      	pop	{r4, pc}
 80137c6:	bf00      	nop

080137c8 <uxr_buffer_create_participant_bin>:
 80137c8:	b570      	push	{r4, r5, r6, lr}
 80137ca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80137ce:	4605      	mov	r5, r0
 80137d0:	ac11      	add	r4, sp, #68	@ 0x44
 80137d2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80137d6:	2303      	movs	r3, #3
 80137d8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80137dc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80137e0:	7223      	strb	r3, [r4, #8]
 80137e2:	2300      	movs	r3, #0
 80137e4:	2201      	movs	r2, #1
 80137e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80137ea:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80137ec:	7122      	strb	r2, [r4, #4]
 80137ee:	b1cb      	cbz	r3, 8013824 <uxr_buffer_create_participant_bin+0x5c>
 80137f0:	f88d 201c 	strb.w	r2, [sp, #28]
 80137f4:	9308      	str	r3, [sp, #32]
 80137f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80137fa:	a915      	add	r1, sp, #84	@ 0x54
 80137fc:	a809      	add	r0, sp, #36	@ 0x24
 80137fe:	f7ff fecb 	bl	8013598 <ucdr_init_buffer>
 8013802:	a905      	add	r1, sp, #20
 8013804:	a809      	add	r0, sp, #36	@ 0x24
 8013806:	f002 fda7 	bl	8016358 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801380a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801380c:	9600      	str	r6, [sp, #0]
 801380e:	4628      	mov	r0, r5
 8013810:	9401      	str	r4, [sp, #4]
 8013812:	60e3      	str	r3, [r4, #12]
 8013814:	b29b      	uxth	r3, r3
 8013816:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801381a:	f7ff ffa9 	bl	8013770 <uxr_common_create_entity>
 801381e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8013822:	bd70      	pop	{r4, r5, r6, pc}
 8013824:	f88d 301c 	strb.w	r3, [sp, #28]
 8013828:	e7e5      	b.n	80137f6 <uxr_buffer_create_participant_bin+0x2e>
 801382a:	bf00      	nop

0801382c <uxr_buffer_create_topic_bin>:
 801382c:	b570      	push	{r4, r5, r6, lr}
 801382e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8013832:	4605      	mov	r5, r0
 8013834:	4618      	mov	r0, r3
 8013836:	9105      	str	r1, [sp, #20]
 8013838:	a997      	add	r1, sp, #604	@ 0x25c
 801383a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801383e:	ac13      	add	r4, sp, #76	@ 0x4c
 8013840:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013844:	2302      	movs	r3, #2
 8013846:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801384a:	f000 f9ab 	bl	8013ba4 <uxr_object_id_to_raw>
 801384e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8013850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013854:	a917      	add	r1, sp, #92	@ 0x5c
 8013856:	a80b      	add	r0, sp, #44	@ 0x2c
 8013858:	9306      	str	r3, [sp, #24]
 801385a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801385c:	930a      	str	r3, [sp, #40]	@ 0x28
 801385e:	2303      	movs	r3, #3
 8013860:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8013864:	2301      	movs	r3, #1
 8013866:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801386a:	2300      	movs	r3, #0
 801386c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013870:	f7ff fe92 	bl	8013598 <ucdr_init_buffer>
 8013874:	a906      	add	r1, sp, #24
 8013876:	a80b      	add	r0, sp, #44	@ 0x2c
 8013878:	f002 fd90 	bl	801639c <uxr_serialize_OBJK_Topic_Binary>
 801387c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801387e:	4628      	mov	r0, r5
 8013880:	9600      	str	r6, [sp, #0]
 8013882:	9316      	str	r3, [sp, #88]	@ 0x58
 8013884:	b29b      	uxth	r3, r3
 8013886:	9401      	str	r4, [sp, #4]
 8013888:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801388c:	f7ff ff70 	bl	8013770 <uxr_common_create_entity>
 8013890:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8013894:	bd70      	pop	{r4, r5, r6, pc}
 8013896:	bf00      	nop

08013898 <uxr_buffer_create_publisher_bin>:
 8013898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801389a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801389e:	2603      	movs	r6, #3
 80138a0:	4605      	mov	r5, r0
 80138a2:	4618      	mov	r0, r3
 80138a4:	9105      	str	r1, [sp, #20]
 80138a6:	a992      	add	r1, sp, #584	@ 0x248
 80138a8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80138ac:	ac0e      	add	r4, sp, #56	@ 0x38
 80138ae:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80138b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80138b6:	f000 f975 	bl	8013ba4 <uxr_object_id_to_raw>
 80138ba:	2300      	movs	r3, #0
 80138bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138c0:	a912      	add	r1, sp, #72	@ 0x48
 80138c2:	a806      	add	r0, sp, #24
 80138c4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80138c8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80138cc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80138d0:	f7ff fe62 	bl	8013598 <ucdr_init_buffer>
 80138d4:	a993      	add	r1, sp, #588	@ 0x24c
 80138d6:	a806      	add	r0, sp, #24
 80138d8:	f002 fe14 	bl	8016504 <uxr_serialize_OBJK_Publisher_Binary>
 80138dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138de:	4628      	mov	r0, r5
 80138e0:	9700      	str	r7, [sp, #0]
 80138e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	9401      	str	r4, [sp, #4]
 80138e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80138ec:	f7ff ff40 	bl	8013770 <uxr_common_create_entity>
 80138f0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80138f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138f6:	bf00      	nop

080138f8 <uxr_buffer_create_datawriter_bin>:
 80138f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138fc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013900:	4606      	mov	r6, r0
 8013902:	4618      	mov	r0, r3
 8013904:	2703      	movs	r7, #3
 8013906:	ac1d      	add	r4, sp, #116	@ 0x74
 8013908:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801390c:	9105      	str	r1, [sp, #20]
 801390e:	a9a1      	add	r1, sp, #644	@ 0x284
 8013910:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8013914:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013918:	2305      	movs	r3, #5
 801391a:	7123      	strb	r3, [r4, #4]
 801391c:	f000 f942 	bl	8013ba4 <uxr_object_id_to_raw>
 8013920:	a90e      	add	r1, sp, #56	@ 0x38
 8013922:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8013924:	7227      	strb	r7, [r4, #8]
 8013926:	f000 f93d 	bl	8013ba4 <uxr_object_id_to_raw>
 801392a:	2300      	movs	r3, #0
 801392c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013930:	3d00      	subs	r5, #0
 8013932:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8013936:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801393a:	bf18      	it	ne
 801393c:	2501      	movne	r5, #1
 801393e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8013942:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8013946:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801394a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801394e:	2301      	movs	r3, #1
 8013950:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8013954:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013958:	bb8a      	cbnz	r2, 80139be <uxr_buffer_create_datawriter_bin+0xc6>
 801395a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801395e:	f04f 0c13 	mov.w	ip, #19
 8013962:	250b      	movs	r5, #11
 8013964:	2221      	movs	r2, #33	@ 0x21
 8013966:	2111      	movs	r1, #17
 8013968:	2009      	movs	r0, #9
 801396a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801396e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8013972:	b923      	cbnz	r3, 801397e <uxr_buffer_create_datawriter_bin+0x86>
 8013974:	4672      	mov	r2, lr
 8013976:	4661      	mov	r1, ip
 8013978:	4628      	mov	r0, r5
 801397a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801397e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8013982:	2b01      	cmp	r3, #1
 8013984:	d025      	beq.n	80139d2 <uxr_buffer_create_datawriter_bin+0xda>
 8013986:	2b03      	cmp	r3, #3
 8013988:	d029      	beq.n	80139de <uxr_buffer_create_datawriter_bin+0xe6>
 801398a:	b32b      	cbz	r3, 80139d8 <uxr_buffer_create_datawriter_bin+0xe0>
 801398c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013990:	a921      	add	r1, sp, #132	@ 0x84
 8013992:	a806      	add	r0, sp, #24
 8013994:	f7ff fe00 	bl	8013598 <ucdr_init_buffer>
 8013998:	a90e      	add	r1, sp, #56	@ 0x38
 801399a:	a806      	add	r0, sp, #24
 801399c:	f002 fe28 	bl	80165f0 <uxr_serialize_OBJK_DataWriter_Binary>
 80139a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139a2:	f8cd 8000 	str.w	r8, [sp]
 80139a6:	4630      	mov	r0, r6
 80139a8:	9401      	str	r4, [sp, #4]
 80139aa:	60e3      	str	r3, [r4, #12]
 80139ac:	b29b      	uxth	r3, r3
 80139ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80139b2:	f7ff fedd 	bl	8013770 <uxr_common_create_entity>
 80139b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80139ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139be:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80139c2:	f04f 0c12 	mov.w	ip, #18
 80139c6:	250a      	movs	r5, #10
 80139c8:	2220      	movs	r2, #32
 80139ca:	2110      	movs	r1, #16
 80139cc:	2008      	movs	r0, #8
 80139ce:	2702      	movs	r7, #2
 80139d0:	e7cd      	b.n	801396e <uxr_buffer_create_datawriter_bin+0x76>
 80139d2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80139d6:	e7d9      	b.n	801398c <uxr_buffer_create_datawriter_bin+0x94>
 80139d8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80139dc:	e7d6      	b.n	801398c <uxr_buffer_create_datawriter_bin+0x94>
 80139de:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80139e2:	e7d3      	b.n	801398c <uxr_buffer_create_datawriter_bin+0x94>

080139e4 <get_custom_error>:
 80139e4:	4b01      	ldr	r3, [pc, #4]	@ (80139ec <get_custom_error+0x8>)
 80139e6:	7818      	ldrb	r0, [r3, #0]
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	2401389c 	.word	0x2401389c

080139f0 <recv_custom_msg>:
 80139f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f4:	4693      	mov	fp, r2
 80139f6:	b089      	sub	sp, #36	@ 0x24
 80139f8:	2200      	movs	r2, #0
 80139fa:	4604      	mov	r4, r0
 80139fc:	468a      	mov	sl, r1
 80139fe:	9305      	str	r3, [sp, #20]
 8013a00:	f88d 201e 	strb.w	r2, [sp, #30]
 8013a04:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013a08:	b322      	cbz	r2, 8013a54 <recv_custom_msg+0x64>
 8013a0a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013a0e:	f10d 081f 	add.w	r8, sp, #31
 8013a12:	af05      	add	r7, sp, #20
 8013a14:	f10d 061e 	add.w	r6, sp, #30
 8013a18:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013a1c:	e002      	b.n	8013a24 <recv_custom_msg+0x34>
 8013a1e:	9b05      	ldr	r3, [sp, #20]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	dd0f      	ble.n	8013a44 <recv_custom_msg+0x54>
 8013a24:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013a28:	4623      	mov	r3, r4
 8013a2a:	4622      	mov	r2, r4
 8013a2c:	4648      	mov	r0, r9
 8013a2e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013a32:	e9cd 5600 	strd	r5, r6, [sp]
 8013a36:	f001 fc8b 	bl	8015350 <uxr_read_framed_msg>
 8013a3a:	2800      	cmp	r0, #0
 8013a3c:	d0ef      	beq.n	8013a1e <recv_custom_msg+0x2e>
 8013a3e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013a42:	b1b3      	cbz	r3, 8013a72 <recv_custom_msg+0x82>
 8013a44:	4b0f      	ldr	r3, [pc, #60]	@ (8013a84 <recv_custom_msg+0x94>)
 8013a46:	2000      	movs	r0, #0
 8013a48:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013a4c:	701a      	strb	r2, [r3, #0]
 8013a4e:	b009      	add	sp, #36	@ 0x24
 8013a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a54:	f10d 021f 	add.w	r2, sp, #31
 8013a58:	4601      	mov	r1, r0
 8013a5a:	9200      	str	r2, [sp, #0]
 8013a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a60:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013a64:	47a8      	blx	r5
 8013a66:	2800      	cmp	r0, #0
 8013a68:	d0ec      	beq.n	8013a44 <recv_custom_msg+0x54>
 8013a6a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d1e8      	bne.n	8013a44 <recv_custom_msg+0x54>
 8013a72:	f8cb 0000 	str.w	r0, [fp]
 8013a76:	2001      	movs	r0, #1
 8013a78:	f8ca 4000 	str.w	r4, [sl]
 8013a7c:	b009      	add	sp, #36	@ 0x24
 8013a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a82:	bf00      	nop
 8013a84:	2401389c 	.word	0x2401389c

08013a88 <send_custom_msg>:
 8013a88:	b530      	push	{r4, r5, lr}
 8013a8a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8013a8e:	b087      	sub	sp, #28
 8013a90:	4614      	mov	r4, r2
 8013a92:	b995      	cbnz	r5, 8013aba <send_custom_msg+0x32>
 8013a94:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8013a98:	f10d 0317 	add.w	r3, sp, #23
 8013a9c:	47a8      	blx	r5
 8013a9e:	1e03      	subs	r3, r0, #0
 8013aa0:	bf18      	it	ne
 8013aa2:	2301      	movne	r3, #1
 8013aa4:	42a0      	cmp	r0, r4
 8013aa6:	bf18      	it	ne
 8013aa8:	2300      	movne	r3, #0
 8013aaa:	b91b      	cbnz	r3, 8013ab4 <send_custom_msg+0x2c>
 8013aac:	4a0a      	ldr	r2, [pc, #40]	@ (8013ad8 <send_custom_msg+0x50>)
 8013aae:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8013ab2:	7011      	strb	r1, [r2, #0]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	b007      	add	sp, #28
 8013ab8:	bd30      	pop	{r4, r5, pc}
 8013aba:	460b      	mov	r3, r1
 8013abc:	2200      	movs	r2, #0
 8013abe:	f10d 0117 	add.w	r1, sp, #23
 8013ac2:	9400      	str	r4, [sp, #0]
 8013ac4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013ac8:	4602      	mov	r2, r0
 8013aca:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013ace:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013ad2:	f001 fa5f 	bl	8014f94 <uxr_write_framed_msg>
 8013ad6:	e7e2      	b.n	8013a9e <send_custom_msg+0x16>
 8013ad8:	2401389c 	.word	0x2401389c

08013adc <uxr_set_custom_transport_callbacks>:
 8013adc:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013ae0:	9901      	ldr	r1, [sp, #4]
 8013ae2:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013ae6:	9b00      	ldr	r3, [sp, #0]
 8013ae8:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop

08013af0 <uxr_init_custom_transport>:
 8013af0:	b538      	push	{r3, r4, r5, lr}
 8013af2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013af6:	b303      	cbz	r3, 8013b3a <uxr_init_custom_transport+0x4a>
 8013af8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013afc:	4604      	mov	r4, r0
 8013afe:	b1e2      	cbz	r2, 8013b3a <uxr_init_custom_transport+0x4a>
 8013b00:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013b04:	b1ca      	cbz	r2, 8013b3a <uxr_init_custom_transport+0x4a>
 8013b06:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013b0a:	b1b2      	cbz	r2, 8013b3a <uxr_init_custom_transport+0x4a>
 8013b0c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013b10:	4798      	blx	r3
 8013b12:	4605      	mov	r5, r0
 8013b14:	b188      	cbz	r0, 8013b3a <uxr_init_custom_transport+0x4a>
 8013b16:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013b1a:	b98b      	cbnz	r3, 8013b40 <uxr_init_custom_transport+0x50>
 8013b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8013b4c <uxr_init_custom_transport+0x5c>)
 8013b1e:	4628      	mov	r0, r5
 8013b20:	490b      	ldr	r1, [pc, #44]	@ (8013b50 <uxr_init_custom_transport+0x60>)
 8013b22:	4a0c      	ldr	r2, [pc, #48]	@ (8013b54 <uxr_init_custom_transport+0x64>)
 8013b24:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013b28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b2c:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013b30:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013b34:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013b38:	bd38      	pop	{r3, r4, r5, pc}
 8013b3a:	2500      	movs	r5, #0
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	bd38      	pop	{r3, r4, r5, pc}
 8013b40:	2100      	movs	r1, #0
 8013b42:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013b46:	f001 fa1f 	bl	8014f88 <uxr_init_framing_io>
 8013b4a:	e7e7      	b.n	8013b1c <uxr_init_custom_transport+0x2c>
 8013b4c:	080139f1 	.word	0x080139f1
 8013b50:	08013a89 	.word	0x08013a89
 8013b54:	080139e5 	.word	0x080139e5

08013b58 <uxr_close_custom_transport>:
 8013b58:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013b5c:	4718      	bx	r3
 8013b5e:	bf00      	nop

08013b60 <uxr_object_id>:
 8013b60:	b082      	sub	sp, #8
 8013b62:	2300      	movs	r3, #0
 8013b64:	f88d 1006 	strb.w	r1, [sp, #6]
 8013b68:	f360 030f 	bfi	r3, r0, #0, #16
 8013b6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013b70:	f362 431f 	bfi	r3, r2, #16, #16
 8013b74:	4618      	mov	r0, r3
 8013b76:	b002      	add	sp, #8
 8013b78:	4770      	bx	lr
 8013b7a:	bf00      	nop

08013b7c <uxr_object_id_from_raw>:
 8013b7c:	7843      	ldrb	r3, [r0, #1]
 8013b7e:	b082      	sub	sp, #8
 8013b80:	7801      	ldrb	r1, [r0, #0]
 8013b82:	2000      	movs	r0, #0
 8013b84:	091a      	lsrs	r2, r3, #4
 8013b86:	f003 030f 	and.w	r3, r3, #15
 8013b8a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8013b8e:	f88d 3006 	strb.w	r3, [sp, #6]
 8013b92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013b96:	f362 000f 	bfi	r0, r2, #0, #16
 8013b9a:	f363 401f 	bfi	r0, r3, #16, #16
 8013b9e:	b002      	add	sp, #8
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop

08013ba4 <uxr_object_id_to_raw>:
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013baa:	b082      	sub	sp, #8
 8013bac:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013bb0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013bb4:	f881 c000 	strb.w	ip, [r1]
 8013bb8:	7048      	strb	r0, [r1, #1]
 8013bba:	b002      	add	sp, #8
 8013bbc:	4770      	bx	lr
 8013bbe:	bf00      	nop

08013bc0 <uxr_buffer_cancel_data>:
 8013bc0:	b510      	push	{r4, lr}
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	b094      	sub	sp, #80	@ 0x50
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	9205      	str	r2, [sp, #20]
 8013bca:	9301      	str	r3, [sp, #4]
 8013bcc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013bd0:	f88d 301e 	strb.w	r3, [sp, #30]
 8013bd4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013bd8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013bdc:	2308      	movs	r3, #8
 8013bde:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013be2:	2201      	movs	r2, #1
 8013be4:	9300      	str	r3, [sp, #0]
 8013be6:	ab0c      	add	r3, sp, #48	@ 0x30
 8013be8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013bec:	2210      	movs	r2, #16
 8013bee:	f001 f85d 	bl	8014cac <uxr_prepare_stream_to_write_submessage>
 8013bf2:	b918      	cbnz	r0, 8013bfc <uxr_buffer_cancel_data+0x3c>
 8013bf4:	4604      	mov	r4, r0
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	b014      	add	sp, #80	@ 0x50
 8013bfa:	bd10      	pop	{r4, pc}
 8013bfc:	9905      	ldr	r1, [sp, #20]
 8013bfe:	aa06      	add	r2, sp, #24
 8013c00:	4620      	mov	r0, r4
 8013c02:	f001 f98f 	bl	8014f24 <uxr_init_base_object_request>
 8013c06:	4604      	mov	r4, r0
 8013c08:	a906      	add	r1, sp, #24
 8013c0a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c0c:	f003 f81e 	bl	8016c4c <uxr_serialize_READ_DATA_Payload>
 8013c10:	4620      	mov	r0, r4
 8013c12:	b014      	add	sp, #80	@ 0x50
 8013c14:	bd10      	pop	{r4, pc}
 8013c16:	bf00      	nop

08013c18 <read_submessage_format>:
 8013c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c1c:	b095      	sub	sp, #84	@ 0x54
 8013c1e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8013c22:	b113      	cbz	r3, 8013c2a <read_submessage_format+0x12>
 8013c24:	b015      	add	sp, #84	@ 0x54
 8013c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c2a:	4606      	mov	r6, r0
 8013c2c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013c2e:	460c      	mov	r4, r1
 8013c30:	4615      	mov	r5, r2
 8013c32:	9004      	str	r0, [sp, #16]
 8013c34:	4699      	mov	r9, r3
 8013c36:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013c38:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8013c3c:	9005      	str	r0, [sp, #20]
 8013c3e:	a80c      	add	r0, sp, #48	@ 0x30
 8013c40:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013c44:	1a52      	subs	r2, r2, r1
 8013c46:	f7ff fca7 	bl	8013598 <ucdr_init_buffer>
 8013c4a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c4c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013c50:	f7ff fc76 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 8013c54:	69e2      	ldr	r2, [r4, #28]
 8013c56:	b19a      	cbz	r2, 8013c80 <read_submessage_format+0x68>
 8013c58:	f1b8 0f07 	cmp.w	r8, #7
 8013c5c:	f882 9014 	strb.w	r9, [r2, #20]
 8013c60:	d040      	beq.n	8013ce4 <read_submessage_format+0xcc>
 8013c62:	f1b8 0f08 	cmp.w	r8, #8
 8013c66:	d02e      	beq.n	8013cc6 <read_submessage_format+0xae>
 8013c68:	f1b8 0f06 	cmp.w	r8, #6
 8013c6c:	d011      	beq.n	8013c92 <read_submessage_format+0x7a>
 8013c6e:	2301      	movs	r3, #1
 8013c70:	7513      	strb	r3, [r2, #20]
 8013c72:	4629      	mov	r1, r5
 8013c74:	4620      	mov	r0, r4
 8013c76:	f7ff fce3 	bl	8013640 <ucdr_advance_buffer>
 8013c7a:	b015      	add	sp, #84	@ 0x54
 8013c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c80:	f1b8 0f07 	cmp.w	r8, #7
 8013c84:	d02e      	beq.n	8013ce4 <read_submessage_format+0xcc>
 8013c86:	f1b8 0f08 	cmp.w	r8, #8
 8013c8a:	d01c      	beq.n	8013cc6 <read_submessage_format+0xae>
 8013c8c:	f1b8 0f06 	cmp.w	r8, #6
 8013c90:	d1ef      	bne.n	8013c72 <read_submessage_format+0x5a>
 8013c92:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8013c96:	f1b8 0f00 	cmp.w	r8, #0
 8013c9a:	d011      	beq.n	8013cc0 <read_submessage_format+0xa8>
 8013c9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c9e:	9501      	str	r5, [sp, #4]
 8013ca0:	463a      	mov	r2, r7
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	9300      	str	r3, [sp, #0]
 8013ca6:	2306      	movs	r3, #6
 8013ca8:	f88d 3016 	strb.w	r3, [sp, #22]
 8013cac:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8013cb0:	9302      	str	r3, [sp, #8]
 8013cb2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013cb6:	47c0      	blx	r8
 8013cb8:	2301      	movs	r3, #1
 8013cba:	69e2      	ldr	r2, [r4, #28]
 8013cbc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013cc0:	2a00      	cmp	r2, #0
 8013cc2:	d1d4      	bne.n	8013c6e <read_submessage_format+0x56>
 8013cc4:	e7d5      	b.n	8013c72 <read_submessage_format+0x5a>
 8013cc6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d0f8      	beq.n	8013cc0 <read_submessage_format+0xa8>
 8013cce:	a80c      	add	r0, sp, #48	@ 0x30
 8013cd0:	a906      	add	r1, sp, #24
 8013cd2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013cd6:	f003 f893 	bl	8016e00 <uxr_deserialize_SampleIdentity>
 8013cda:	b9a0      	cbnz	r0, 8013d06 <read_submessage_format+0xee>
 8013cdc:	69e2      	ldr	r2, [r4, #28]
 8013cde:	2a00      	cmp	r2, #0
 8013ce0:	d1c5      	bne.n	8013c6e <read_submessage_format+0x56>
 8013ce2:	e7c6      	b.n	8013c72 <read_submessage_format+0x5a>
 8013ce4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8013ce8:	b13b      	cbz	r3, 8013cfa <read_submessage_format+0xe2>
 8013cea:	a906      	add	r1, sp, #24
 8013cec:	a80c      	add	r0, sp, #48	@ 0x30
 8013cee:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013cf2:	f002 fd4b 	bl	801678c <uxr_deserialize_BaseObjectRequest>
 8013cf6:	bb60      	cbnz	r0, 8013d52 <read_submessage_format+0x13a>
 8013cf8:	69e2      	ldr	r2, [r4, #28]
 8013cfa:	68a3      	ldr	r3, [r4, #8]
 8013cfc:	442b      	add	r3, r5
 8013cfe:	60a3      	str	r3, [r4, #8]
 8013d00:	2a00      	cmp	r2, #0
 8013d02:	d1b4      	bne.n	8013c6e <read_submessage_format+0x56>
 8013d04:	e7b5      	b.n	8013c72 <read_submessage_format+0x5a>
 8013d06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d08:	a80c      	add	r0, sp, #48	@ 0x30
 8013d0a:	eba8 0803 	sub.w	r8, r8, r3
 8013d0e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013d12:	44a8      	add	r8, r5
 8013d14:	1a52      	subs	r2, r2, r1
 8013d16:	f7ff fc3f 	bl	8013598 <ucdr_init_buffer>
 8013d1a:	a80c      	add	r0, sp, #48	@ 0x30
 8013d1c:	fa1f f888 	uxth.w	r8, r8
 8013d20:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d24:	f7ff fc0c 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 8013d28:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d2a:	2108      	movs	r1, #8
 8013d2c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d30:	9300      	str	r3, [sp, #0]
 8013d32:	463a      	mov	r2, r7
 8013d34:	f88d 1016 	strb.w	r1, [sp, #22]
 8013d38:	ab06      	add	r3, sp, #24
 8013d3a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8013d3e:	4630      	mov	r0, r6
 8013d40:	9102      	str	r1, [sp, #8]
 8013d42:	9905      	ldr	r1, [sp, #20]
 8013d44:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8013d48:	47b8      	blx	r7
 8013d4a:	2301      	movs	r3, #1
 8013d4c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013d50:	e7c4      	b.n	8013cdc <read_submessage_format+0xc4>
 8013d52:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013d56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d58:	a80c      	add	r0, sp, #48	@ 0x30
 8013d5a:	1a52      	subs	r2, r2, r1
 8013d5c:	eba8 0803 	sub.w	r8, r8, r3
 8013d60:	f7ff fc1a 	bl	8013598 <ucdr_init_buffer>
 8013d64:	a80c      	add	r0, sp, #48	@ 0x30
 8013d66:	44a8      	add	r8, r5
 8013d68:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d6c:	f7ff fbe8 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 8013d70:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d72:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013d76:	fa1f f888 	uxth.w	r8, r8
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	463a      	mov	r2, r7
 8013d7e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013d82:	4630      	mov	r0, r6
 8013d84:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d88:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013d8c:	2107      	movs	r1, #7
 8013d8e:	f88d 1016 	strb.w	r1, [sp, #22]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8013d98:	9102      	str	r1, [sp, #8]
 8013d9a:	9905      	ldr	r1, [sp, #20]
 8013d9c:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8013da0:	47b8      	blx	r7
 8013da2:	2301      	movs	r3, #1
 8013da4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013da8:	e7a6      	b.n	8013cf8 <read_submessage_format+0xe0>
 8013daa:	bf00      	nop

08013dac <on_get_fragmentation_info>:
 8013dac:	b500      	push	{lr}
 8013dae:	b08b      	sub	sp, #44	@ 0x2c
 8013db0:	4601      	mov	r1, r0
 8013db2:	2204      	movs	r2, #4
 8013db4:	a802      	add	r0, sp, #8
 8013db6:	f7ff fbef 	bl	8013598 <ucdr_init_buffer>
 8013dba:	f10d 0305 	add.w	r3, sp, #5
 8013dbe:	f10d 0206 	add.w	r2, sp, #6
 8013dc2:	a901      	add	r1, sp, #4
 8013dc4:	a802      	add	r0, sp, #8
 8013dc6:	f001 feb3 	bl	8015b30 <uxr_read_submessage_header>
 8013dca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013dce:	2b0d      	cmp	r3, #13
 8013dd0:	d003      	beq.n	8013dda <on_get_fragmentation_info+0x2e>
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	b00b      	add	sp, #44	@ 0x2c
 8013dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013dde:	f013 0f02 	tst.w	r3, #2
 8013de2:	bf14      	ite	ne
 8013de4:	2002      	movne	r0, #2
 8013de6:	2001      	moveq	r0, #1
 8013de8:	b00b      	add	sp, #44	@ 0x2c
 8013dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8013dee:	bf00      	nop

08013df0 <read_submessage_get_info>:
 8013df0:	b570      	push	{r4, r5, r6, lr}
 8013df2:	2500      	movs	r5, #0
 8013df4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013df8:	460e      	mov	r6, r1
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013e00:	4629      	mov	r1, r5
 8013e02:	a810      	add	r0, sp, #64	@ 0x40
 8013e04:	9503      	str	r5, [sp, #12]
 8013e06:	9504      	str	r5, [sp, #16]
 8013e08:	f009 f82e 	bl	801ce68 <memset>
 8013e0c:	a903      	add	r1, sp, #12
 8013e0e:	4630      	mov	r0, r6
 8013e10:	f002 fe5c 	bl	8016acc <uxr_deserialize_GET_INFO_Payload>
 8013e14:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013e18:	4620      	mov	r0, r4
 8013e1a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013e1e:	f001 f879 	bl	8014f14 <uxr_session_header_offset>
 8013e22:	462b      	mov	r3, r5
 8013e24:	220c      	movs	r2, #12
 8013e26:	a905      	add	r1, sp, #20
 8013e28:	9000      	str	r0, [sp, #0]
 8013e2a:	a808      	add	r0, sp, #32
 8013e2c:	f7ff fba2 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8013e30:	a910      	add	r1, sp, #64	@ 0x40
 8013e32:	a808      	add	r0, sp, #32
 8013e34:	f002 febe 	bl	8016bb4 <uxr_serialize_INFO_Payload>
 8013e38:	9b08      	ldr	r3, [sp, #32]
 8013e3a:	462a      	mov	r2, r5
 8013e3c:	4629      	mov	r1, r5
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f001 f814 	bl	8014e6c <uxr_stamp_session_header>
 8013e44:	a808      	add	r0, sp, #32
 8013e46:	f7ff fbd5 	bl	80135f4 <ucdr_buffer_length>
 8013e4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	a905      	add	r1, sp, #20
 8013e50:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013e54:	47a0      	blx	r4
 8013e56:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}

08013e5c <write_submessage_acknack.isra.0>:
 8013e5c:	b570      	push	{r4, r5, r6, lr}
 8013e5e:	b092      	sub	sp, #72	@ 0x48
 8013e60:	4605      	mov	r5, r0
 8013e62:	460e      	mov	r6, r1
 8013e64:	4614      	mov	r4, r2
 8013e66:	f001 f855 	bl	8014f14 <uxr_session_header_offset>
 8013e6a:	a905      	add	r1, sp, #20
 8013e6c:	9000      	str	r0, [sp, #0]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	a80a      	add	r0, sp, #40	@ 0x28
 8013e72:	2211      	movs	r2, #17
 8013e74:	f7ff fb7e 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8013e78:	2218      	movs	r2, #24
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	210a      	movs	r1, #10
 8013e7e:	fb02 5404 	mla	r4, r2, r4, r5
 8013e82:	a80a      	add	r0, sp, #40	@ 0x28
 8013e84:	2205      	movs	r2, #5
 8013e86:	3450      	adds	r4, #80	@ 0x50
 8013e88:	f001 fe38 	bl	8015afc <uxr_buffer_submessage_header>
 8013e8c:	a903      	add	r1, sp, #12
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f007 fb2e 	bl	801b4f0 <uxr_compute_acknack>
 8013e94:	ba40      	rev16	r0, r0
 8013e96:	a903      	add	r1, sp, #12
 8013e98:	f88d 6010 	strb.w	r6, [sp, #16]
 8013e9c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013ea0:	a80a      	add	r0, sp, #40	@ 0x28
 8013ea2:	f002 fef9 	bl	8016c98 <uxr_serialize_ACKNACK_Payload>
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eaa:	4628      	mov	r0, r5
 8013eac:	4611      	mov	r1, r2
 8013eae:	f000 ffdd 	bl	8014e6c <uxr_stamp_session_header>
 8013eb2:	a80a      	add	r0, sp, #40	@ 0x28
 8013eb4:	f7ff fb9e 	bl	80135f4 <ucdr_buffer_length>
 8013eb8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013eba:	4602      	mov	r2, r0
 8013ebc:	a905      	add	r1, sp, #20
 8013ebe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013ec2:	47a0      	blx	r4
 8013ec4:	b012      	add	sp, #72	@ 0x48
 8013ec6:	bd70      	pop	{r4, r5, r6, pc}

08013ec8 <uxr_init_session>:
 8013ec8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013f00 <uxr_init_session+0x38>
 8013ecc:	2300      	movs	r3, #0
 8013ece:	b510      	push	{r4, lr}
 8013ed0:	4604      	mov	r4, r0
 8013ed2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8013ed6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8013eda:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8013ede:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8013ee2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013ee6:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013eea:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8013eee:	2181      	movs	r1, #129	@ 0x81
 8013ef0:	f000 ff20 	bl	8014d34 <uxr_init_session_info>
 8013ef4:	f104 0008 	add.w	r0, r4, #8
 8013ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013efc:	f001 bd1a 	b.w	8015934 <uxr_init_stream_storage>
	...

08013f08 <uxr_set_status_callback>:
 8013f08:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013f0c:	4770      	bx	lr
 8013f0e:	bf00      	nop

08013f10 <uxr_set_topic_callback>:
 8013f10:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop

08013f18 <uxr_set_request_callback>:
 8013f18:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013f1c:	4770      	bx	lr
 8013f1e:	bf00      	nop

08013f20 <uxr_set_reply_callback>:
 8013f20:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8013f24:	4770      	bx	lr
 8013f26:	bf00      	nop

08013f28 <uxr_create_output_best_effort_stream>:
 8013f28:	b510      	push	{r4, lr}
 8013f2a:	4604      	mov	r4, r0
 8013f2c:	b084      	sub	sp, #16
 8013f2e:	e9cd 2100 	strd	r2, r1, [sp]
 8013f32:	f000 ffef 	bl	8014f14 <uxr_session_header_offset>
 8013f36:	4603      	mov	r3, r0
 8013f38:	f104 0008 	add.w	r0, r4, #8
 8013f3c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013f40:	b004      	add	sp, #16
 8013f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f46:	f001 bd3b 	b.w	80159c0 <uxr_add_output_best_effort_buffer>
 8013f4a:	bf00      	nop

08013f4c <uxr_create_output_reliable_stream>:
 8013f4c:	b530      	push	{r4, r5, lr}
 8013f4e:	b089      	sub	sp, #36	@ 0x24
 8013f50:	4604      	mov	r4, r0
 8013f52:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013f56:	9303      	str	r3, [sp, #12]
 8013f58:	f000 ffdc 	bl	8014f14 <uxr_session_header_offset>
 8013f5c:	4605      	mov	r5, r0
 8013f5e:	9905      	ldr	r1, [sp, #20]
 8013f60:	f104 0008 	add.w	r0, r4, #8
 8013f64:	9500      	str	r5, [sp, #0]
 8013f66:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013f6a:	f001 fd3d 	bl	80159e8 <uxr_add_output_reliable_buffer>
 8013f6e:	2200      	movs	r2, #0
 8013f70:	fa5f fc80 	uxtb.w	ip, r0
 8013f74:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8013f78:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013f7c:	0e03      	lsrs	r3, r0, #24
 8013f7e:	f36c 0207 	bfi	r2, ip, #0, #8
 8013f82:	f364 220f 	bfi	r2, r4, #8, #8
 8013f86:	f361 4217 	bfi	r2, r1, #16, #8
 8013f8a:	f363 621f 	bfi	r2, r3, #24, #8
 8013f8e:	4610      	mov	r0, r2
 8013f90:	b009      	add	sp, #36	@ 0x24
 8013f92:	bd30      	pop	{r4, r5, pc}

08013f94 <uxr_create_input_best_effort_stream>:
 8013f94:	b082      	sub	sp, #8
 8013f96:	3008      	adds	r0, #8
 8013f98:	b002      	add	sp, #8
 8013f9a:	f001 bd3f 	b.w	8015a1c <uxr_add_input_best_effort_buffer>
 8013f9e:	bf00      	nop

08013fa0 <uxr_create_input_reliable_stream>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8013fd4 <uxr_create_input_reliable_stream+0x34>)
 8013fa4:	b084      	sub	sp, #16
 8013fa6:	3008      	adds	r0, #8
 8013fa8:	9400      	str	r4, [sp, #0]
 8013faa:	f001 fd4d 	bl	8015a48 <uxr_add_input_reliable_buffer>
 8013fae:	2200      	movs	r2, #0
 8013fb0:	fa5f fe80 	uxtb.w	lr, r0
 8013fb4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8013fb8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013fbc:	0e03      	lsrs	r3, r0, #24
 8013fbe:	f36e 0207 	bfi	r2, lr, #0, #8
 8013fc2:	f36c 220f 	bfi	r2, ip, #8, #8
 8013fc6:	f361 4217 	bfi	r2, r1, #16, #8
 8013fca:	f363 621f 	bfi	r2, r3, #24, #8
 8013fce:	4610      	mov	r0, r2
 8013fd0:	b004      	add	sp, #16
 8013fd2:	bd10      	pop	{r4, pc}
 8013fd4:	08013dad 	.word	0x08013dad

08013fd8 <uxr_epoch_nanos>:
 8013fd8:	b510      	push	{r4, lr}
 8013fda:	4604      	mov	r4, r0
 8013fdc:	f001 fdf0 	bl	8015bc0 <uxr_nanos>
 8013fe0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013fe4:	1ac0      	subs	r0, r0, r3
 8013fe6:	eb61 0102 	sbc.w	r1, r1, r2
 8013fea:	bd10      	pop	{r4, pc}

08013fec <uxr_flash_output_streams>:
 8013fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ff0:	7e03      	ldrb	r3, [r0, #24]
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	b1fb      	cbz	r3, 8014038 <uxr_flash_output_streams+0x4c>
 8013ff8:	f04f 0900 	mov.w	r9, #0
 8013ffc:	f10d 0802 	add.w	r8, sp, #2
 8014000:	af03      	add	r7, sp, #12
 8014002:	ae02      	add	r6, sp, #8
 8014004:	4648      	mov	r0, r9
 8014006:	2201      	movs	r2, #1
 8014008:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801400c:	4611      	mov	r1, r2
 801400e:	3508      	adds	r5, #8
 8014010:	f001 fc36 	bl	8015880 <uxr_stream_id>
 8014014:	4684      	mov	ip, r0
 8014016:	4643      	mov	r3, r8
 8014018:	463a      	mov	r2, r7
 801401a:	4631      	mov	r1, r6
 801401c:	4628      	mov	r0, r5
 801401e:	f8cd c004 	str.w	ip, [sp, #4]
 8014022:	f007 faef 	bl	801b604 <uxr_prepare_best_effort_buffer_to_send>
 8014026:	2800      	cmp	r0, #0
 8014028:	d13d      	bne.n	80140a6 <uxr_flash_output_streams+0xba>
 801402a:	f109 0901 	add.w	r9, r9, #1
 801402e:	7e23      	ldrb	r3, [r4, #24]
 8014030:	fa5f f089 	uxtb.w	r0, r9
 8014034:	4283      	cmp	r3, r0
 8014036:	d8e6      	bhi.n	8014006 <uxr_flash_output_streams+0x1a>
 8014038:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801403c:	b383      	cbz	r3, 80140a0 <uxr_flash_output_streams+0xb4>
 801403e:	f04f 0900 	mov.w	r9, #0
 8014042:	f10d 0802 	add.w	r8, sp, #2
 8014046:	af03      	add	r7, sp, #12
 8014048:	ae02      	add	r6, sp, #8
 801404a:	4648      	mov	r0, r9
 801404c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014050:	2201      	movs	r2, #1
 8014052:	2102      	movs	r1, #2
 8014054:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014058:	f001 fc12 	bl	8015880 <uxr_stream_id>
 801405c:	9001      	str	r0, [sp, #4]
 801405e:	3520      	adds	r5, #32
 8014060:	e00c      	b.n	801407c <uxr_flash_output_streams+0x90>
 8014062:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014066:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801406a:	9b02      	ldr	r3, [sp, #8]
 801406c:	f000 fefe 	bl	8014e6c <uxr_stamp_session_header>
 8014070:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014072:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014076:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801407a:	47d0      	blx	sl
 801407c:	4643      	mov	r3, r8
 801407e:	463a      	mov	r2, r7
 8014080:	4631      	mov	r1, r6
 8014082:	4628      	mov	r0, r5
 8014084:	f007 fce0 	bl	801ba48 <uxr_prepare_next_reliable_buffer_to_send>
 8014088:	4603      	mov	r3, r0
 801408a:	4620      	mov	r0, r4
 801408c:	2b00      	cmp	r3, #0
 801408e:	d1e8      	bne.n	8014062 <uxr_flash_output_streams+0x76>
 8014090:	f109 0901 	add.w	r9, r9, #1
 8014094:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8014098:	fa5f f089 	uxtb.w	r0, r9
 801409c:	4283      	cmp	r3, r0
 801409e:	d8d5      	bhi.n	801404c <uxr_flash_output_streams+0x60>
 80140a0:	b004      	add	sp, #16
 80140a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140a6:	9b02      	ldr	r3, [sp, #8]
 80140a8:	4620      	mov	r0, r4
 80140aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80140ae:	f109 0901 	add.w	r9, r9, #1
 80140b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80140b6:	f000 fed9 	bl	8014e6c <uxr_stamp_session_header>
 80140ba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80140bc:	9a03      	ldr	r2, [sp, #12]
 80140be:	685d      	ldr	r5, [r3, #4]
 80140c0:	6818      	ldr	r0, [r3, #0]
 80140c2:	9902      	ldr	r1, [sp, #8]
 80140c4:	47a8      	blx	r5
 80140c6:	7e23      	ldrb	r3, [r4, #24]
 80140c8:	fa5f f089 	uxtb.w	r0, r9
 80140cc:	4283      	cmp	r3, r0
 80140ce:	d89a      	bhi.n	8014006 <uxr_flash_output_streams+0x1a>
 80140d0:	e7b2      	b.n	8014038 <uxr_flash_output_streams+0x4c>
 80140d2:	bf00      	nop

080140d4 <read_submessage_info>:
 80140d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140d8:	460d      	mov	r5, r1
 80140da:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80140de:	4606      	mov	r6, r0
 80140e0:	4669      	mov	r1, sp
 80140e2:	4628      	mov	r0, r5
 80140e4:	f002 fc04 	bl	80168f0 <uxr_deserialize_BaseObjectReply>
 80140e8:	4604      	mov	r4, r0
 80140ea:	a902      	add	r1, sp, #8
 80140ec:	4628      	mov	r0, r5
 80140ee:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80140f2:	f7fd ff57 	bl	8011fa4 <ucdr_deserialize_bool>
 80140f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80140fa:	4004      	ands	r4, r0
 80140fc:	b2e4      	uxtb	r4, r4
 80140fe:	b95b      	cbnz	r3, 8014118 <read_submessage_info+0x44>
 8014100:	a987      	add	r1, sp, #540	@ 0x21c
 8014102:	4628      	mov	r0, r5
 8014104:	f7fd ff4e 	bl	8011fa4 <ucdr_deserialize_bool>
 8014108:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801410c:	4680      	mov	r8, r0
 801410e:	b94b      	cbnz	r3, 8014124 <read_submessage_info+0x50>
 8014110:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8014114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014118:	a903      	add	r1, sp, #12
 801411a:	4628      	mov	r0, r5
 801411c:	f002 fa94 	bl	8016648 <uxr_deserialize_ObjectVariant>
 8014120:	4004      	ands	r4, r0
 8014122:	e7ed      	b.n	8014100 <read_submessage_info+0x2c>
 8014124:	a988      	add	r1, sp, #544	@ 0x220
 8014126:	4628      	mov	r0, r5
 8014128:	f7fd ff6a 	bl	8012000 <ucdr_deserialize_uint8_t>
 801412c:	ea14 0f08 	tst.w	r4, r8
 8014130:	d0ee      	beq.n	8014110 <read_submessage_info+0x3c>
 8014132:	2800      	cmp	r0, #0
 8014134:	d0ec      	beq.n	8014110 <read_submessage_info+0x3c>
 8014136:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801413a:	2b0d      	cmp	r3, #13
 801413c:	d1e8      	bne.n	8014110 <read_submessage_info+0x3c>
 801413e:	a98a      	add	r1, sp, #552	@ 0x228
 8014140:	4628      	mov	r0, r5
 8014142:	f7fe fd03 	bl	8012b4c <ucdr_deserialize_int16_t>
 8014146:	b138      	cbz	r0, 8014158 <read_submessage_info+0x84>
 8014148:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801414c:	2b00      	cmp	r3, #0
 801414e:	dd06      	ble.n	801415e <read_submessage_info+0x8a>
 8014150:	2f00      	cmp	r7, #0
 8014152:	bf14      	ite	ne
 8014154:	2001      	movne	r0, #1
 8014156:	2002      	moveq	r0, #2
 8014158:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801415c:	e7d8      	b.n	8014110 <read_submessage_info+0x3c>
 801415e:	2000      	movs	r0, #0
 8014160:	e7fa      	b.n	8014158 <read_submessage_info+0x84>
 8014162:	bf00      	nop

08014164 <read_submessage_list>:
 8014164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014168:	4604      	mov	r4, r0
 801416a:	b097      	sub	sp, #92	@ 0x5c
 801416c:	460d      	mov	r5, r1
 801416e:	4ec1      	ldr	r6, [pc, #772]	@ (8014474 <read_submessage_list+0x310>)
 8014170:	9209      	str	r2, [sp, #36]	@ 0x24
 8014172:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8014176:	aa0c      	add	r2, sp, #48	@ 0x30
 8014178:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 801417c:	4628      	mov	r0, r5
 801417e:	f001 fcd7 	bl	8015b30 <uxr_read_submessage_header>
 8014182:	2800      	cmp	r0, #0
 8014184:	f000 8142 	beq.w	801440c <read_submessage_list+0x2a8>
 8014188:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 801418c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8014190:	3b02      	subs	r3, #2
 8014192:	2b0d      	cmp	r3, #13
 8014194:	d8ed      	bhi.n	8014172 <read_submessage_list+0xe>
 8014196:	a101      	add	r1, pc, #4	@ (adr r1, 801419c <read_submessage_list+0x38>)
 8014198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801419c:	08014403 	.word	0x08014403
 80141a0:	08014173 	.word	0x08014173
 80141a4:	080143f3 	.word	0x080143f3
 80141a8:	08014391 	.word	0x08014391
 80141ac:	08014387 	.word	0x08014387
 80141b0:	08014173 	.word	0x08014173
 80141b4:	08014173 	.word	0x08014173
 80141b8:	080142dd 	.word	0x080142dd
 80141bc:	0801426f 	.word	0x0801426f
 80141c0:	0801422f 	.word	0x0801422f
 80141c4:	08014173 	.word	0x08014173
 80141c8:	08014173 	.word	0x08014173
 80141cc:	08014173 	.word	0x08014173
 80141d0:	080141d5 	.word	0x080141d5
 80141d4:	a910      	add	r1, sp, #64	@ 0x40
 80141d6:	4628      	mov	r0, r5
 80141d8:	f002 fdc0 	bl	8016d5c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80141dc:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 80141e0:	f1b8 0f00 	cmp.w	r8, #0
 80141e4:	f000 811a 	beq.w	801441c <read_submessage_list+0x2b8>
 80141e8:	f001 fcea 	bl	8015bc0 <uxr_nanos>
 80141ec:	4602      	mov	r2, r0
 80141ee:	460b      	mov	r3, r1
 80141f0:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 80141f4:	2100      	movs	r1, #0
 80141f6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80141f8:	9006      	str	r0, [sp, #24]
 80141fa:	468c      	mov	ip, r1
 80141fc:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80141fe:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014202:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014204:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014208:	468c      	mov	ip, r1
 801420a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801420c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014210:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014214:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8014218:	fbc7 0106 	smlal	r0, r1, r7, r6
 801421c:	e9cd 0100 	strd	r0, r1, [sp]
 8014220:	4620      	mov	r0, r4
 8014222:	47c0      	blx	r8
 8014224:	f04f 0301 	mov.w	r3, #1
 8014228:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801422c:	e7a1      	b.n	8014172 <read_submessage_list+0xe>
 801422e:	a910      	add	r1, sp, #64	@ 0x40
 8014230:	4628      	mov	r0, r5
 8014232:	f002 fd71 	bl	8016d18 <uxr_deserialize_HEARTBEAT_Payload>
 8014236:	2100      	movs	r1, #0
 8014238:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801423c:	f001 fb4e 	bl	80158dc <uxr_stream_id_from_raw>
 8014240:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014244:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014246:	f104 0008 	add.w	r0, r4, #8
 801424a:	4641      	mov	r1, r8
 801424c:	f001 fc34 	bl	8015ab8 <uxr_get_input_reliable_stream>
 8014250:	2800      	cmp	r0, #0
 8014252:	d08e      	beq.n	8014172 <read_submessage_list+0xe>
 8014254:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8014258:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801425c:	f007 f93c 	bl	801b4d8 <uxr_process_heartbeat>
 8014260:	4642      	mov	r2, r8
 8014262:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8014266:	4620      	mov	r0, r4
 8014268:	f7ff fdf8 	bl	8013e5c <write_submessage_acknack.isra.0>
 801426c:	e781      	b.n	8014172 <read_submessage_list+0xe>
 801426e:	a910      	add	r1, sp, #64	@ 0x40
 8014270:	4628      	mov	r0, r5
 8014272:	f002 fd29 	bl	8016cc8 <uxr_deserialize_ACKNACK_Payload>
 8014276:	2100      	movs	r1, #0
 8014278:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801427c:	f001 fb2e 	bl	80158dc <uxr_stream_id_from_raw>
 8014280:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8014284:	900d      	str	r0, [sp, #52]	@ 0x34
 8014286:	f104 0008 	add.w	r0, r4, #8
 801428a:	f001 fbff 	bl	8015a8c <uxr_get_output_reliable_stream>
 801428e:	4680      	mov	r8, r0
 8014290:	2800      	cmp	r0, #0
 8014292:	f43f af6e 	beq.w	8014172 <read_submessage_list+0xe>
 8014296:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801429a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801429e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80142a2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80142a6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80142aa:	b289      	uxth	r1, r1
 80142ac:	f007 fc74 	bl	801bb98 <uxr_process_acknack>
 80142b0:	4640      	mov	r0, r8
 80142b2:	f007 fc35 	bl	801bb20 <uxr_begin_output_nack_buffer_it>
 80142b6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80142ba:	e005      	b.n	80142c8 <read_submessage_list+0x164>
 80142bc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80142be:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80142c2:	e9d3 0900 	ldrd	r0, r9, [r3]
 80142c6:	47c8      	blx	r9
 80142c8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80142cc:	aa0f      	add	r2, sp, #60	@ 0x3c
 80142ce:	4651      	mov	r1, sl
 80142d0:	4640      	mov	r0, r8
 80142d2:	f007 fc27 	bl	801bb24 <uxr_next_reliable_nack_buffer_to_send>
 80142d6:	2800      	cmp	r0, #0
 80142d8:	d1f0      	bne.n	80142bc <read_submessage_list+0x158>
 80142da:	e74a      	b.n	8014172 <read_submessage_list+0xe>
 80142dc:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80142e0:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80142e4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 80142e8:	4628      	mov	r0, r5
 80142ea:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 80142ee:	4651      	mov	r1, sl
 80142f0:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80142f4:	f1a8 0804 	sub.w	r8, r8, #4
 80142f8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 80142fc:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8014300:	fa1f f888 	uxth.w	r8, r8
 8014304:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014308:	f009 090e 	and.w	r9, r9, #14
 801430c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8014310:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8014314:	f002 fa3a 	bl	801678c <uxr_deserialize_BaseObjectRequest>
 8014318:	4650      	mov	r0, sl
 801431a:	a90f      	add	r1, sp, #60	@ 0x3c
 801431c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8014320:	f000 fe20 	bl	8014f64 <uxr_parse_base_object_request>
 8014324:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014326:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801432a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801432e:	9110      	str	r1, [sp, #64]	@ 0x40
 8014330:	f1bb 0f00 	cmp.w	fp, #0
 8014334:	d006      	beq.n	8014344 <read_submessage_list+0x1e0>
 8014336:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801433a:	4652      	mov	r2, sl
 801433c:	4620      	mov	r0, r4
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	2300      	movs	r3, #0
 8014342:	47d8      	blx	fp
 8014344:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8014346:	b182      	cbz	r2, 801436a <read_submessage_list+0x206>
 8014348:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801434a:	f04f 0c00 	mov.w	ip, #0
 801434e:	3902      	subs	r1, #2
 8014350:	e003      	b.n	801435a <read_submessage_list+0x1f6>
 8014352:	f10c 0c01 	add.w	ip, ip, #1
 8014356:	4594      	cmp	ip, r2
 8014358:	d007      	beq.n	801436a <read_submessage_list+0x206>
 801435a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801435e:	4553      	cmp	r3, sl
 8014360:	d1f7      	bne.n	8014352 <read_submessage_list+0x1ee>
 8014362:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8014364:	2200      	movs	r2, #0
 8014366:	f803 200c 	strb.w	r2, [r3, ip]
 801436a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801436e:	464b      	mov	r3, r9
 8014370:	4642      	mov	r2, r8
 8014372:	4620      	mov	r0, r4
 8014374:	9102      	str	r1, [sp, #8]
 8014376:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014378:	9101      	str	r1, [sp, #4]
 801437a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801437c:	9100      	str	r1, [sp, #0]
 801437e:	4629      	mov	r1, r5
 8014380:	f7ff fc4a 	bl	8013c18 <read_submessage_format>
 8014384:	e6f5      	b.n	8014172 <read_submessage_list+0xe>
 8014386:	4629      	mov	r1, r5
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff fea3 	bl	80140d4 <read_submessage_info>
 801438e:	e6f0      	b.n	8014172 <read_submessage_list+0xe>
 8014390:	2a00      	cmp	r2, #0
 8014392:	d03e      	beq.n	8014412 <read_submessage_list+0x2ae>
 8014394:	a910      	add	r1, sp, #64	@ 0x40
 8014396:	4628      	mov	r0, r5
 8014398:	f002 fbee 	bl	8016b78 <uxr_deserialize_STATUS_Payload>
 801439c:	a90e      	add	r1, sp, #56	@ 0x38
 801439e:	aa0d      	add	r2, sp, #52	@ 0x34
 80143a0:	a810      	add	r0, sp, #64	@ 0x40
 80143a2:	f000 fddf 	bl	8014f64 <uxr_parse_base_object_request>
 80143a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80143a8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80143ac:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80143b0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80143b4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80143b6:	f1ba 0f00 	cmp.w	sl, #0
 80143ba:	d006      	beq.n	80143ca <read_submessage_list+0x266>
 80143bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80143c0:	4642      	mov	r2, r8
 80143c2:	4620      	mov	r0, r4
 80143c4:	9300      	str	r3, [sp, #0]
 80143c6:	464b      	mov	r3, r9
 80143c8:	47d0      	blx	sl
 80143ca:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80143cc:	2a00      	cmp	r2, #0
 80143ce:	f43f aed0 	beq.w	8014172 <read_submessage_list+0xe>
 80143d2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80143d4:	2100      	movs	r1, #0
 80143d6:	3802      	subs	r0, #2
 80143d8:	e003      	b.n	80143e2 <read_submessage_list+0x27e>
 80143da:	3101      	adds	r1, #1
 80143dc:	4291      	cmp	r1, r2
 80143de:	f43f aec8 	beq.w	8014172 <read_submessage_list+0xe>
 80143e2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80143e6:	4543      	cmp	r3, r8
 80143e8:	d1f7      	bne.n	80143da <read_submessage_list+0x276>
 80143ea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80143ec:	f803 9001 	strb.w	r9, [r3, r1]
 80143f0:	e6bf      	b.n	8014172 <read_submessage_list+0xe>
 80143f2:	2a00      	cmp	r2, #0
 80143f4:	f47f aebd 	bne.w	8014172 <read_submessage_list+0xe>
 80143f8:	4629      	mov	r1, r5
 80143fa:	4620      	mov	r0, r4
 80143fc:	f000 fcf6 	bl	8014dec <uxr_read_create_session_status>
 8014400:	e6b7      	b.n	8014172 <read_submessage_list+0xe>
 8014402:	4629      	mov	r1, r5
 8014404:	4620      	mov	r0, r4
 8014406:	f7ff fcf3 	bl	8013df0 <read_submessage_get_info>
 801440a:	e6b2      	b.n	8014172 <read_submessage_list+0xe>
 801440c:	b017      	add	sp, #92	@ 0x5c
 801440e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014412:	4629      	mov	r1, r5
 8014414:	4620      	mov	r0, r4
 8014416:	f000 fcf7 	bl	8014e08 <uxr_read_delete_session_status>
 801441a:	e6aa      	b.n	8014172 <read_submessage_list+0xe>
 801441c:	f001 fbd0 	bl	8015bc0 <uxr_nanos>
 8014420:	4642      	mov	r2, r8
 8014422:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014424:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014426:	fbc7 3206 	smlal	r3, r2, r7, r6
 801442a:	1818      	adds	r0, r3, r0
 801442c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801442e:	eb42 0101 	adc.w	r1, r2, r1
 8014432:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014434:	4642      	mov	r2, r8
 8014436:	fbc7 3206 	smlal	r3, r2, r7, r6
 801443a:	469c      	mov	ip, r3
 801443c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8014440:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014444:	4643      	mov	r3, r8
 8014446:	eb1c 0c07 	adds.w	ip, ip, r7
 801444a:	eb42 0203 	adc.w	r2, r2, r3
 801444e:	ebb0 030c 	subs.w	r3, r0, ip
 8014452:	eb61 0202 	sbc.w	r2, r1, r2
 8014456:	2a00      	cmp	r2, #0
 8014458:	db08      	blt.n	801446c <read_submessage_list+0x308>
 801445a:	085b      	lsrs	r3, r3, #1
 801445c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014460:	1052      	asrs	r2, r2, #1
 8014462:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8014466:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801446a:	e6db      	b.n	8014224 <read_submessage_list+0xc0>
 801446c:	3301      	adds	r3, #1
 801446e:	f142 0200 	adc.w	r2, r2, #0
 8014472:	e7f2      	b.n	801445a <read_submessage_list+0x2f6>
 8014474:	3b9aca00 	.word	0x3b9aca00

08014478 <listen_message_reliably>:
 8014478:	1e0b      	subs	r3, r1, #0
 801447a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801447e:	bfb8      	it	lt
 8014480:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8014484:	b09d      	sub	sp, #116	@ 0x74
 8014486:	4680      	mov	r8, r0
 8014488:	9305      	str	r3, [sp, #20]
 801448a:	f001 fb7d 	bl	8015b88 <uxr_millis>
 801448e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8014492:	4681      	mov	r9, r0
 8014494:	2a00      	cmp	r2, #0
 8014496:	f000 809a 	beq.w	80145ce <listen_message_reliably+0x156>
 801449a:	2600      	movs	r6, #0
 801449c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80144a4:	460f      	mov	r7, r1
 80144a6:	4630      	mov	r0, r6
 80144a8:	9303      	str	r3, [sp, #12]
 80144aa:	e00e      	b.n	80144ca <listen_message_reliably+0x52>
 80144ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80144ae:	3601      	adds	r6, #1
 80144b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80144b2:	455a      	cmp	r2, fp
 80144b4:	9903      	ldr	r1, [sp, #12]
 80144b6:	b2f0      	uxtb	r0, r6
 80144b8:	eb73 0101 	sbcs.w	r1, r3, r1
 80144bc:	da01      	bge.n	80144c2 <listen_message_reliably+0x4a>
 80144be:	4693      	mov	fp, r2
 80144c0:	9303      	str	r3, [sp, #12]
 80144c2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80144c6:	4283      	cmp	r3, r0
 80144c8:	d95f      	bls.n	801458a <listen_message_reliably+0x112>
 80144ca:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80144ce:	2102      	movs	r1, #2
 80144d0:	2201      	movs	r2, #1
 80144d2:	00e4      	lsls	r4, r4, #3
 80144d4:	f001 f9d4 	bl	8015880 <uxr_stream_id>
 80144d8:	4601      	mov	r1, r0
 80144da:	f104 0520 	add.w	r5, r4, #32
 80144de:	463b      	mov	r3, r7
 80144e0:	464a      	mov	r2, r9
 80144e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80144e4:	4445      	add	r5, r8
 80144e6:	4628      	mov	r0, r5
 80144e8:	f007 faee 	bl	801bac8 <uxr_update_output_stream_heartbeat_timestamp>
 80144ec:	eb08 0304 	add.w	r3, r8, r4
 80144f0:	2800      	cmp	r0, #0
 80144f2:	d0db      	beq.n	80144ac <listen_message_reliably+0x34>
 80144f4:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80144f8:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80144fc:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014500:	4640      	mov	r0, r8
 8014502:	3501      	adds	r5, #1
 8014504:	4444      	add	r4, r8
 8014506:	9304      	str	r3, [sp, #16]
 8014508:	f000 fd04 	bl	8014f14 <uxr_session_header_offset>
 801450c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014510:	2300      	movs	r3, #0
 8014512:	2211      	movs	r2, #17
 8014514:	a90c      	add	r1, sp, #48	@ 0x30
 8014516:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801451a:	9000      	str	r0, [sp, #0]
 801451c:	4650      	mov	r0, sl
 801451e:	3601      	adds	r6, #1
 8014520:	f7ff f828 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8014524:	2300      	movs	r3, #0
 8014526:	2205      	movs	r2, #5
 8014528:	210b      	movs	r1, #11
 801452a:	4650      	mov	r0, sl
 801452c:	f001 fae6 	bl	8015afc <uxr_buffer_submessage_header>
 8014530:	2101      	movs	r1, #1
 8014532:	8968      	ldrh	r0, [r5, #10]
 8014534:	f007 fb8c 	bl	801bc50 <uxr_seq_num_add>
 8014538:	892b      	ldrh	r3, [r5, #8]
 801453a:	4602      	mov	r2, r0
 801453c:	a90a      	add	r1, sp, #40	@ 0x28
 801453e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014542:	4650      	mov	r0, sl
 8014544:	9b04      	ldr	r3, [sp, #16]
 8014546:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801454a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801454e:	f002 fbcf 	bl	8016cf0 <uxr_serialize_HEARTBEAT_Payload>
 8014552:	2200      	movs	r2, #0
 8014554:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014556:	4640      	mov	r0, r8
 8014558:	4611      	mov	r1, r2
 801455a:	f000 fc87 	bl	8014e6c <uxr_stamp_session_header>
 801455e:	4650      	mov	r0, sl
 8014560:	f7ff f848 	bl	80135f4 <ucdr_buffer_length>
 8014564:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8014568:	4602      	mov	r2, r0
 801456a:	a90c      	add	r1, sp, #48	@ 0x30
 801456c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014570:	47a8      	blx	r5
 8014572:	9903      	ldr	r1, [sp, #12]
 8014574:	b2f0      	uxtb	r0, r6
 8014576:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801457a:	455a      	cmp	r2, fp
 801457c:	eb73 0101 	sbcs.w	r1, r3, r1
 8014580:	db9d      	blt.n	80144be <listen_message_reliably+0x46>
 8014582:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8014586:	4283      	cmp	r3, r0
 8014588:	d89f      	bhi.n	80144ca <listen_message_reliably+0x52>
 801458a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801458e:	9a03      	ldr	r2, [sp, #12]
 8014590:	429a      	cmp	r2, r3
 8014592:	bf08      	it	eq
 8014594:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8014598:	d019      	beq.n	80145ce <listen_message_reliably+0x156>
 801459a:	ebab 0309 	sub.w	r3, fp, r9
 801459e:	2b00      	cmp	r3, #0
 80145a0:	9d05      	ldr	r5, [sp, #20]
 80145a2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80145a6:	aa08      	add	r2, sp, #32
 80145a8:	bf08      	it	eq
 80145aa:	2301      	moveq	r3, #1
 80145ac:	a907      	add	r1, sp, #28
 80145ae:	6884      	ldr	r4, [r0, #8]
 80145b0:	429d      	cmp	r5, r3
 80145b2:	6800      	ldr	r0, [r0, #0]
 80145b4:	bfa8      	it	ge
 80145b6:	461d      	movge	r5, r3
 80145b8:	462b      	mov	r3, r5
 80145ba:	47a0      	blx	r4
 80145bc:	b948      	cbnz	r0, 80145d2 <listen_message_reliably+0x15a>
 80145be:	9b05      	ldr	r3, [sp, #20]
 80145c0:	1b5b      	subs	r3, r3, r5
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	9305      	str	r3, [sp, #20]
 80145c6:	f73f af60 	bgt.w	801448a <listen_message_reliably+0x12>
 80145ca:	4604      	mov	r4, r0
 80145cc:	e012      	b.n	80145f4 <listen_message_reliably+0x17c>
 80145ce:	9b05      	ldr	r3, [sp, #20]
 80145d0:	e7e5      	b.n	801459e <listen_message_reliably+0x126>
 80145d2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80145d6:	4604      	mov	r4, r0
 80145d8:	2500      	movs	r5, #0
 80145da:	a80c      	add	r0, sp, #48	@ 0x30
 80145dc:	f7fe ffdc 	bl	8013598 <ucdr_init_buffer>
 80145e0:	f10d 031a 	add.w	r3, sp, #26
 80145e4:	aa06      	add	r2, sp, #24
 80145e6:	a90c      	add	r1, sp, #48	@ 0x30
 80145e8:	4640      	mov	r0, r8
 80145ea:	f88d 5018 	strb.w	r5, [sp, #24]
 80145ee:	f000 fc51 	bl	8014e94 <uxr_read_session_header>
 80145f2:	b918      	cbnz	r0, 80145fc <listen_message_reliably+0x184>
 80145f4:	4620      	mov	r0, r4
 80145f6:	b01d      	add	sp, #116	@ 0x74
 80145f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145fc:	4629      	mov	r1, r5
 80145fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014602:	f001 f96b 	bl	80158dc <uxr_stream_id_from_raw>
 8014606:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801460a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801460e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014612:	2e01      	cmp	r6, #1
 8014614:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014618:	d04b      	beq.n	80146b2 <listen_message_reliably+0x23a>
 801461a:	2e02      	cmp	r6, #2
 801461c:	d00f      	beq.n	801463e <listen_message_reliably+0x1c6>
 801461e:	2e00      	cmp	r6, #0
 8014620:	d1e8      	bne.n	80145f4 <listen_message_reliably+0x17c>
 8014622:	4631      	mov	r1, r6
 8014624:	4630      	mov	r0, r6
 8014626:	f001 f959 	bl	80158dc <uxr_stream_id_from_raw>
 801462a:	4602      	mov	r2, r0
 801462c:	a90c      	add	r1, sp, #48	@ 0x30
 801462e:	4640      	mov	r0, r8
 8014630:	920a      	str	r2, [sp, #40]	@ 0x28
 8014632:	f7ff fd97 	bl	8014164 <read_submessage_list>
 8014636:	4620      	mov	r0, r4
 8014638:	b01d      	add	sp, #116	@ 0x74
 801463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463e:	4629      	mov	r1, r5
 8014640:	f108 0008 	add.w	r0, r8, #8
 8014644:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8014648:	f001 fa36 	bl	8015ab8 <uxr_get_input_reliable_stream>
 801464c:	4607      	mov	r7, r0
 801464e:	b338      	cbz	r0, 80146a0 <listen_message_reliably+0x228>
 8014650:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014652:	a80c      	add	r0, sp, #48	@ 0x30
 8014654:	9203      	str	r2, [sp, #12]
 8014656:	f7fe ffd1 	bl	80135fc <ucdr_buffer_remaining>
 801465a:	4603      	mov	r3, r0
 801465c:	f10d 0019 	add.w	r0, sp, #25
 8014660:	9a03      	ldr	r2, [sp, #12]
 8014662:	4651      	mov	r1, sl
 8014664:	9000      	str	r0, [sp, #0]
 8014666:	4638      	mov	r0, r7
 8014668:	f006 fe3a 	bl	801b2e0 <uxr_receive_reliable_message>
 801466c:	b1c0      	cbz	r0, 80146a0 <listen_message_reliably+0x228>
 801466e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014672:	b393      	cbz	r3, 80146da <listen_message_reliably+0x262>
 8014674:	ae14      	add	r6, sp, #80	@ 0x50
 8014676:	f04f 0a02 	mov.w	sl, #2
 801467a:	e00a      	b.n	8014692 <listen_message_reliably+0x21a>
 801467c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8014680:	4631      	mov	r1, r6
 8014682:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8014686:	4640      	mov	r0, r8
 8014688:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801468c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801468e:	f7ff fd69 	bl	8014164 <read_submessage_list>
 8014692:	2204      	movs	r2, #4
 8014694:	4631      	mov	r1, r6
 8014696:	4638      	mov	r0, r7
 8014698:	f006 fea4 	bl	801b3e4 <uxr_next_input_reliable_buffer_available>
 801469c:	2800      	cmp	r0, #0
 801469e:	d1ed      	bne.n	801467c <listen_message_reliably+0x204>
 80146a0:	4640      	mov	r0, r8
 80146a2:	462a      	mov	r2, r5
 80146a4:	4649      	mov	r1, r9
 80146a6:	f7ff fbd9 	bl	8013e5c <write_submessage_acknack.isra.0>
 80146aa:	4620      	mov	r0, r4
 80146ac:	b01d      	add	sp, #116	@ 0x74
 80146ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b2:	4629      	mov	r1, r5
 80146b4:	f108 0008 	add.w	r0, r8, #8
 80146b8:	f001 f9f4 	bl	8015aa4 <uxr_get_input_best_effort_stream>
 80146bc:	2800      	cmp	r0, #0
 80146be:	d099      	beq.n	80145f4 <listen_message_reliably+0x17c>
 80146c0:	4651      	mov	r1, sl
 80146c2:	f006 fd83 	bl	801b1cc <uxr_receive_best_effort_message>
 80146c6:	2800      	cmp	r0, #0
 80146c8:	d094      	beq.n	80145f4 <listen_message_reliably+0x17c>
 80146ca:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80146ce:	a90c      	add	r1, sp, #48	@ 0x30
 80146d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80146d2:	4640      	mov	r0, r8
 80146d4:	f7ff fd46 	bl	8014164 <read_submessage_list>
 80146d8:	e78c      	b.n	80145f4 <listen_message_reliably+0x17c>
 80146da:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80146de:	a90c      	add	r1, sp, #48	@ 0x30
 80146e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80146e2:	4640      	mov	r0, r8
 80146e4:	f7ff fd3e 	bl	8014164 <read_submessage_list>
 80146e8:	e7c4      	b.n	8014674 <listen_message_reliably+0x1fc>
 80146ea:	bf00      	nop

080146ec <uxr_run_session_timeout>:
 80146ec:	b570      	push	{r4, r5, r6, lr}
 80146ee:	4604      	mov	r4, r0
 80146f0:	460d      	mov	r5, r1
 80146f2:	f001 fa49 	bl	8015b88 <uxr_millis>
 80146f6:	4606      	mov	r6, r0
 80146f8:	4620      	mov	r0, r4
 80146fa:	f7ff fc77 	bl	8013fec <uxr_flash_output_streams>
 80146fe:	4629      	mov	r1, r5
 8014700:	4620      	mov	r0, r4
 8014702:	f7ff feb9 	bl	8014478 <listen_message_reliably>
 8014706:	f001 fa3f 	bl	8015b88 <uxr_millis>
 801470a:	1b83      	subs	r3, r0, r6
 801470c:	1ae9      	subs	r1, r5, r3
 801470e:	2900      	cmp	r1, #0
 8014710:	dcf6      	bgt.n	8014700 <uxr_run_session_timeout+0x14>
 8014712:	f104 0008 	add.w	r0, r4, #8
 8014716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801471a:	f001 b9d9 	b.w	8015ad0 <uxr_output_streams_confirmed>
 801471e:	bf00      	nop

08014720 <uxr_run_session_until_data>:
 8014720:	b570      	push	{r4, r5, r6, lr}
 8014722:	4604      	mov	r4, r0
 8014724:	460d      	mov	r5, r1
 8014726:	f001 fa2f 	bl	8015b88 <uxr_millis>
 801472a:	4606      	mov	r6, r0
 801472c:	4620      	mov	r0, r4
 801472e:	f7ff fc5d 	bl	8013fec <uxr_flash_output_streams>
 8014732:	2300      	movs	r3, #0
 8014734:	4629      	mov	r1, r5
 8014736:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801473a:	e005      	b.n	8014748 <uxr_run_session_until_data+0x28>
 801473c:	f001 fa24 	bl	8015b88 <uxr_millis>
 8014740:	1b83      	subs	r3, r0, r6
 8014742:	1ae9      	subs	r1, r5, r3
 8014744:	2900      	cmp	r1, #0
 8014746:	dd07      	ble.n	8014758 <uxr_run_session_until_data+0x38>
 8014748:	4620      	mov	r0, r4
 801474a:	f7ff fe95 	bl	8014478 <listen_message_reliably>
 801474e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8014752:	2800      	cmp	r0, #0
 8014754:	d0f2      	beq.n	801473c <uxr_run_session_until_data+0x1c>
 8014756:	bd70      	pop	{r4, r5, r6, pc}
 8014758:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801475c:	bd70      	pop	{r4, r5, r6, pc}
 801475e:	bf00      	nop

08014760 <uxr_run_session_until_confirm_delivery>:
 8014760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014764:	4606      	mov	r6, r0
 8014766:	460d      	mov	r5, r1
 8014768:	f001 fa0e 	bl	8015b88 <uxr_millis>
 801476c:	4607      	mov	r7, r0
 801476e:	4630      	mov	r0, r6
 8014770:	f106 0808 	add.w	r8, r6, #8
 8014774:	f7ff fc3a 	bl	8013fec <uxr_flash_output_streams>
 8014778:	2d00      	cmp	r5, #0
 801477a:	db10      	blt.n	801479e <uxr_run_session_until_confirm_delivery+0x3e>
 801477c:	462c      	mov	r4, r5
 801477e:	e006      	b.n	801478e <uxr_run_session_until_confirm_delivery+0x2e>
 8014780:	f7ff fe7a 	bl	8014478 <listen_message_reliably>
 8014784:	f001 fa00 	bl	8015b88 <uxr_millis>
 8014788:	1bc3      	subs	r3, r0, r7
 801478a:	1aec      	subs	r4, r5, r3
 801478c:	d407      	bmi.n	801479e <uxr_run_session_until_confirm_delivery+0x3e>
 801478e:	4640      	mov	r0, r8
 8014790:	f001 f99e 	bl	8015ad0 <uxr_output_streams_confirmed>
 8014794:	4603      	mov	r3, r0
 8014796:	4621      	mov	r1, r4
 8014798:	4630      	mov	r0, r6
 801479a:	2b00      	cmp	r3, #0
 801479c:	d0f0      	beq.n	8014780 <uxr_run_session_until_confirm_delivery+0x20>
 801479e:	4640      	mov	r0, r8
 80147a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147a4:	f001 b994 	b.w	8015ad0 <uxr_output_streams_confirmed>

080147a8 <uxr_run_session_until_all_status>:
 80147a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147ac:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80147b0:	4606      	mov	r6, r0
 80147b2:	4688      	mov	r8, r1
 80147b4:	4692      	mov	sl, r2
 80147b6:	461f      	mov	r7, r3
 80147b8:	f7ff fc18 	bl	8013fec <uxr_flash_output_streams>
 80147bc:	f1bb 0f00 	cmp.w	fp, #0
 80147c0:	d004      	beq.n	80147cc <uxr_run_session_until_all_status+0x24>
 80147c2:	465a      	mov	r2, fp
 80147c4:	21ff      	movs	r1, #255	@ 0xff
 80147c6:	4638      	mov	r0, r7
 80147c8:	f008 fb4e 	bl	801ce68 <memset>
 80147cc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80147d0:	1e7d      	subs	r5, r7, #1
 80147d2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80147d6:	f001 f9d7 	bl	8015b88 <uxr_millis>
 80147da:	4641      	mov	r1, r8
 80147dc:	4681      	mov	r9, r0
 80147de:	4630      	mov	r0, r6
 80147e0:	f7ff fe4a 	bl	8014478 <listen_message_reliably>
 80147e4:	f001 f9d0 	bl	8015b88 <uxr_millis>
 80147e8:	eba0 0009 	sub.w	r0, r0, r9
 80147ec:	eba8 0100 	sub.w	r1, r8, r0
 80147f0:	f1bb 0f00 	cmp.w	fp, #0
 80147f4:	d029      	beq.n	801484a <uxr_run_session_until_all_status+0xa2>
 80147f6:	46ae      	mov	lr, r5
 80147f8:	f04f 0c00 	mov.w	ip, #0
 80147fc:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8014800:	2cff      	cmp	r4, #255	@ 0xff
 8014802:	d015      	beq.n	8014830 <uxr_run_session_until_all_status+0x88>
 8014804:	f10c 0c01 	add.w	ip, ip, #1
 8014808:	45e3      	cmp	fp, ip
 801480a:	d8f7      	bhi.n	80147fc <uxr_run_session_until_all_status+0x54>
 801480c:	2300      	movs	r3, #0
 801480e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014810:	e000      	b.n	8014814 <uxr_run_session_until_all_status+0x6c>
 8014812:	b158      	cbz	r0, 801482c <uxr_run_session_until_all_status+0x84>
 8014814:	462b      	mov	r3, r5
 8014816:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801481a:	3302      	adds	r3, #2
 801481c:	2801      	cmp	r0, #1
 801481e:	eba3 0307 	sub.w	r3, r3, r7
 8014822:	bf8c      	ite	hi
 8014824:	2000      	movhi	r0, #0
 8014826:	2001      	movls	r0, #1
 8014828:	459b      	cmp	fp, r3
 801482a:	d8f2      	bhi.n	8014812 <uxr_run_session_until_all_status+0x6a>
 801482c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014830:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8014834:	f10c 0c01 	add.w	ip, ip, #1
 8014838:	45dc      	cmp	ip, fp
 801483a:	d201      	bcs.n	8014840 <uxr_run_session_until_all_status+0x98>
 801483c:	2b00      	cmp	r3, #0
 801483e:	d0dd      	beq.n	80147fc <uxr_run_session_until_all_status+0x54>
 8014840:	2900      	cmp	r1, #0
 8014842:	dde3      	ble.n	801480c <uxr_run_session_until_all_status+0x64>
 8014844:	2b00      	cmp	r3, #0
 8014846:	d1ca      	bne.n	80147de <uxr_run_session_until_all_status+0x36>
 8014848:	e7e0      	b.n	801480c <uxr_run_session_until_all_status+0x64>
 801484a:	2001      	movs	r0, #1
 801484c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8014850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014854:	0000      	movs	r0, r0
	...

08014858 <uxr_sync_session>:
 8014858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801485a:	b093      	sub	sp, #76	@ 0x4c
 801485c:	4604      	mov	r4, r0
 801485e:	460d      	mov	r5, r1
 8014860:	f000 fb58 	bl	8014f14 <uxr_session_header_offset>
 8014864:	2214      	movs	r2, #20
 8014866:	2300      	movs	r3, #0
 8014868:	9000      	str	r0, [sp, #0]
 801486a:	a80a      	add	r0, sp, #40	@ 0x28
 801486c:	eb0d 0102 	add.w	r1, sp, r2
 8014870:	f7fe fe80 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8014874:	2300      	movs	r3, #0
 8014876:	2208      	movs	r2, #8
 8014878:	210e      	movs	r1, #14
 801487a:	a80a      	add	r0, sp, #40	@ 0x28
 801487c:	f001 f93e 	bl	8015afc <uxr_buffer_submessage_header>
 8014880:	f001 f99e 	bl	8015bc0 <uxr_nanos>
 8014884:	460e      	mov	r6, r1
 8014886:	4607      	mov	r7, r0
 8014888:	a31b      	add	r3, pc, #108	@ (adr r3, 80148f8 <uxr_sync_session+0xa0>)
 801488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488e:	f7eb fd8f 	bl	80003b0 <__aeabi_ldivmod>
 8014892:	4631      	mov	r1, r6
 8014894:	9003      	str	r0, [sp, #12]
 8014896:	4638      	mov	r0, r7
 8014898:	a317      	add	r3, pc, #92	@ (adr r3, 80148f8 <uxr_sync_session+0xa0>)
 801489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489e:	f7eb fd87 	bl	80003b0 <__aeabi_ldivmod>
 80148a2:	a903      	add	r1, sp, #12
 80148a4:	a80a      	add	r0, sp, #40	@ 0x28
 80148a6:	9204      	str	r2, [sp, #16]
 80148a8:	f002 fa4a 	bl	8016d40 <uxr_serialize_TIMESTAMP_Payload>
 80148ac:	2200      	movs	r2, #0
 80148ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148b0:	4620      	mov	r0, r4
 80148b2:	4611      	mov	r1, r2
 80148b4:	f000 fada 	bl	8014e6c <uxr_stamp_session_header>
 80148b8:	a80a      	add	r0, sp, #40	@ 0x28
 80148ba:	f7fe fe9b 	bl	80135f4 <ucdr_buffer_length>
 80148be:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80148c0:	4602      	mov	r2, r0
 80148c2:	a905      	add	r1, sp, #20
 80148c4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80148c8:	47b0      	blx	r6
 80148ca:	f001 f95d 	bl	8015b88 <uxr_millis>
 80148ce:	2300      	movs	r3, #0
 80148d0:	4606      	mov	r6, r0
 80148d2:	4629      	mov	r1, r5
 80148d4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80148d8:	e000      	b.n	80148dc <uxr_sync_session+0x84>
 80148da:	b950      	cbnz	r0, 80148f2 <uxr_sync_session+0x9a>
 80148dc:	4620      	mov	r0, r4
 80148de:	f7ff fdcb 	bl	8014478 <listen_message_reliably>
 80148e2:	f001 f951 	bl	8015b88 <uxr_millis>
 80148e6:	1b83      	subs	r3, r0, r6
 80148e8:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80148ec:	1ae9      	subs	r1, r5, r3
 80148ee:	2900      	cmp	r1, #0
 80148f0:	dcf3      	bgt.n	80148da <uxr_sync_session+0x82>
 80148f2:	b013      	add	sp, #76	@ 0x4c
 80148f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f6:	bf00      	nop
 80148f8:	3b9aca00 	.word	0x3b9aca00
 80148fc:	00000000 	.word	0x00000000

08014900 <wait_session_status>:
 8014900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014904:	4604      	mov	r4, r0
 8014906:	b09d      	sub	sp, #116	@ 0x74
 8014908:	20ff      	movs	r0, #255	@ 0xff
 801490a:	9303      	str	r3, [sp, #12]
 801490c:	7160      	strb	r0, [r4, #5]
 801490e:	2b00      	cmp	r3, #0
 8014910:	f000 80b6 	beq.w	8014a80 <wait_session_status+0x180>
 8014914:	4689      	mov	r9, r1
 8014916:	4692      	mov	sl, r2
 8014918:	f04f 0b00 	mov.w	fp, #0
 801491c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801491e:	4652      	mov	r2, sl
 8014920:	4649      	mov	r1, r9
 8014922:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014926:	47a8      	blx	r5
 8014928:	f001 f92e 	bl	8015b88 <uxr_millis>
 801492c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014930:	4605      	mov	r5, r0
 8014932:	e009      	b.n	8014948 <wait_session_status+0x48>
 8014934:	f001 f928 	bl	8015b88 <uxr_millis>
 8014938:	1b40      	subs	r0, r0, r5
 801493a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801493e:	2b00      	cmp	r3, #0
 8014940:	dd40      	ble.n	80149c4 <wait_session_status+0xc4>
 8014942:	7960      	ldrb	r0, [r4, #5]
 8014944:	28ff      	cmp	r0, #255	@ 0xff
 8014946:	d145      	bne.n	80149d4 <wait_session_status+0xd4>
 8014948:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801494a:	a908      	add	r1, sp, #32
 801494c:	6896      	ldr	r6, [r2, #8]
 801494e:	6810      	ldr	r0, [r2, #0]
 8014950:	aa09      	add	r2, sp, #36	@ 0x24
 8014952:	47b0      	blx	r6
 8014954:	2800      	cmp	r0, #0
 8014956:	d0ed      	beq.n	8014934 <wait_session_status+0x34>
 8014958:	a80c      	add	r0, sp, #48	@ 0x30
 801495a:	2600      	movs	r6, #0
 801495c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014960:	f7fe fe1a 	bl	8013598 <ucdr_init_buffer>
 8014964:	f10d 031e 	add.w	r3, sp, #30
 8014968:	aa07      	add	r2, sp, #28
 801496a:	a90c      	add	r1, sp, #48	@ 0x30
 801496c:	4620      	mov	r0, r4
 801496e:	f88d 601c 	strb.w	r6, [sp, #28]
 8014972:	f000 fa8f 	bl	8014e94 <uxr_read_session_header>
 8014976:	2800      	cmp	r0, #0
 8014978:	d0dc      	beq.n	8014934 <wait_session_status+0x34>
 801497a:	4631      	mov	r1, r6
 801497c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014980:	f000 ffac 	bl	80158dc <uxr_stream_id_from_raw>
 8014984:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014988:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801498c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014990:	2f01      	cmp	r7, #1
 8014992:	9302      	str	r3, [sp, #8]
 8014994:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8014998:	d05c      	beq.n	8014a54 <wait_session_status+0x154>
 801499a:	2f02      	cmp	r7, #2
 801499c:	d020      	beq.n	80149e0 <wait_session_status+0xe0>
 801499e:	2f00      	cmp	r7, #0
 80149a0:	d1c8      	bne.n	8014934 <wait_session_status+0x34>
 80149a2:	4639      	mov	r1, r7
 80149a4:	4638      	mov	r0, r7
 80149a6:	f000 ff99 	bl	80158dc <uxr_stream_id_from_raw>
 80149aa:	a90c      	add	r1, sp, #48	@ 0x30
 80149ac:	4602      	mov	r2, r0
 80149ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 80149b0:	4620      	mov	r0, r4
 80149b2:	f7ff fbd7 	bl	8014164 <read_submessage_list>
 80149b6:	f001 f8e7 	bl	8015b88 <uxr_millis>
 80149ba:	1b40      	subs	r0, r0, r5
 80149bc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	dcbe      	bgt.n	8014942 <wait_session_status+0x42>
 80149c4:	f10b 0b01 	add.w	fp, fp, #1
 80149c8:	9b03      	ldr	r3, [sp, #12]
 80149ca:	7960      	ldrb	r0, [r4, #5]
 80149cc:	455b      	cmp	r3, fp
 80149ce:	d001      	beq.n	80149d4 <wait_session_status+0xd4>
 80149d0:	28ff      	cmp	r0, #255	@ 0xff
 80149d2:	d0a3      	beq.n	801491c <wait_session_status+0x1c>
 80149d4:	38ff      	subs	r0, #255	@ 0xff
 80149d6:	bf18      	it	ne
 80149d8:	2001      	movne	r0, #1
 80149da:	b01d      	add	sp, #116	@ 0x74
 80149dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80149e4:	4631      	mov	r1, r6
 80149e6:	f104 0008 	add.w	r0, r4, #8
 80149ea:	9304      	str	r3, [sp, #16]
 80149ec:	f001 f864 	bl	8015ab8 <uxr_get_input_reliable_stream>
 80149f0:	4680      	mov	r8, r0
 80149f2:	b348      	cbz	r0, 8014a48 <wait_session_status+0x148>
 80149f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80149f6:	a80c      	add	r0, sp, #48	@ 0x30
 80149f8:	9205      	str	r2, [sp, #20]
 80149fa:	f7fe fdff 	bl	80135fc <ucdr_buffer_remaining>
 80149fe:	4603      	mov	r3, r0
 8014a00:	f10d 001d 	add.w	r0, sp, #29
 8014a04:	9a05      	ldr	r2, [sp, #20]
 8014a06:	9000      	str	r0, [sp, #0]
 8014a08:	4640      	mov	r0, r8
 8014a0a:	9902      	ldr	r1, [sp, #8]
 8014a0c:	f006 fc68 	bl	801b2e0 <uxr_receive_reliable_message>
 8014a10:	b1d0      	cbz	r0, 8014a48 <wait_session_status+0x148>
 8014a12:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d03a      	beq.n	8014a90 <wait_session_status+0x190>
 8014a1a:	9f04      	ldr	r7, [sp, #16]
 8014a1c:	e00a      	b.n	8014a34 <wait_session_status+0x134>
 8014a1e:	f04f 0302 	mov.w	r3, #2
 8014a22:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8014a26:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8014a2a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8014a2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a30:	f7ff fb98 	bl	8014164 <read_submessage_list>
 8014a34:	a914      	add	r1, sp, #80	@ 0x50
 8014a36:	2204      	movs	r2, #4
 8014a38:	4640      	mov	r0, r8
 8014a3a:	f006 fcd3 	bl	801b3e4 <uxr_next_input_reliable_buffer_available>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	a914      	add	r1, sp, #80	@ 0x50
 8014a42:	4620      	mov	r0, r4
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d1ea      	bne.n	8014a1e <wait_session_status+0x11e>
 8014a48:	4632      	mov	r2, r6
 8014a4a:	9904      	ldr	r1, [sp, #16]
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	f7ff fa05 	bl	8013e5c <write_submessage_acknack.isra.0>
 8014a52:	e76f      	b.n	8014934 <wait_session_status+0x34>
 8014a54:	4631      	mov	r1, r6
 8014a56:	f104 0008 	add.w	r0, r4, #8
 8014a5a:	f001 f823 	bl	8015aa4 <uxr_get_input_best_effort_stream>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	f43f af68 	beq.w	8014934 <wait_session_status+0x34>
 8014a64:	9902      	ldr	r1, [sp, #8]
 8014a66:	f006 fbb1 	bl	801b1cc <uxr_receive_best_effort_message>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	f43f af62 	beq.w	8014934 <wait_session_status+0x34>
 8014a70:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014a74:	a90c      	add	r1, sp, #48	@ 0x30
 8014a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a78:	4620      	mov	r0, r4
 8014a7a:	f7ff fb73 	bl	8014164 <read_submessage_list>
 8014a7e:	e759      	b.n	8014934 <wait_session_status+0x34>
 8014a80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014a82:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014a86:	47a0      	blx	r4
 8014a88:	2001      	movs	r0, #1
 8014a8a:	b01d      	add	sp, #116	@ 0x74
 8014a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a90:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014a94:	a90c      	add	r1, sp, #48	@ 0x30
 8014a96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a98:	4620      	mov	r0, r4
 8014a9a:	f7ff fb63 	bl	8014164 <read_submessage_list>
 8014a9e:	e7bc      	b.n	8014a1a <wait_session_status+0x11a>

08014aa0 <uxr_delete_session_retries>:
 8014aa0:	b530      	push	{r4, r5, lr}
 8014aa2:	b08f      	sub	sp, #60	@ 0x3c
 8014aa4:	4604      	mov	r4, r0
 8014aa6:	460d      	mov	r5, r1
 8014aa8:	f000 fa34 	bl	8014f14 <uxr_session_header_offset>
 8014aac:	2300      	movs	r3, #0
 8014aae:	2210      	movs	r2, #16
 8014ab0:	a902      	add	r1, sp, #8
 8014ab2:	9000      	str	r0, [sp, #0]
 8014ab4:	a806      	add	r0, sp, #24
 8014ab6:	f7fe fd5d 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8014aba:	a906      	add	r1, sp, #24
 8014abc:	4620      	mov	r0, r4
 8014abe:	f000 f979 	bl	8014db4 <uxr_buffer_delete_session>
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	9b06      	ldr	r3, [sp, #24]
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	4611      	mov	r1, r2
 8014aca:	f000 f9cf 	bl	8014e6c <uxr_stamp_session_header>
 8014ace:	a806      	add	r0, sp, #24
 8014ad0:	f7fe fd90 	bl	80135f4 <ucdr_buffer_length>
 8014ad4:	462b      	mov	r3, r5
 8014ad6:	4602      	mov	r2, r0
 8014ad8:	a902      	add	r1, sp, #8
 8014ada:	4620      	mov	r0, r4
 8014adc:	f7ff ff10 	bl	8014900 <wait_session_status>
 8014ae0:	b118      	cbz	r0, 8014aea <uxr_delete_session_retries+0x4a>
 8014ae2:	7960      	ldrb	r0, [r4, #5]
 8014ae4:	fab0 f080 	clz	r0, r0
 8014ae8:	0940      	lsrs	r0, r0, #5
 8014aea:	b00f      	add	sp, #60	@ 0x3c
 8014aec:	bd30      	pop	{r4, r5, pc}
 8014aee:	bf00      	nop

08014af0 <uxr_create_session>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	f100 0b08 	add.w	fp, r0, #8
 8014af8:	4604      	mov	r4, r0
 8014afa:	b0ab      	sub	sp, #172	@ 0xac
 8014afc:	4658      	mov	r0, fp
 8014afe:	465e      	mov	r6, fp
 8014b00:	f000 ff22 	bl	8015948 <uxr_reset_stream_storage>
 8014b04:	4620      	mov	r0, r4
 8014b06:	f000 fa05 	bl	8014f14 <uxr_session_header_offset>
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	221c      	movs	r2, #28
 8014b0e:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b10:	9000      	str	r0, [sp, #0]
 8014b12:	a812      	add	r0, sp, #72	@ 0x48
 8014b14:	f7fe fd2e 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8014b18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014b1a:	a912      	add	r1, sp, #72	@ 0x48
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	8a1a      	ldrh	r2, [r3, #16]
 8014b20:	3a04      	subs	r2, #4
 8014b22:	b292      	uxth	r2, r2
 8014b24:	f000 f91c 	bl	8014d60 <uxr_buffer_create_session>
 8014b28:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	f000 f98a 	bl	8014e44 <uxr_stamp_create_session_header>
 8014b30:	a812      	add	r0, sp, #72	@ 0x48
 8014b32:	f7fe fd5f 	bl	80135f4 <ucdr_buffer_length>
 8014b36:	23ff      	movs	r3, #255	@ 0xff
 8014b38:	4681      	mov	r9, r0
 8014b3a:	7163      	strb	r3, [r4, #5]
 8014b3c:	230a      	movs	r3, #10
 8014b3e:	9303      	str	r3, [sp, #12]
 8014b40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014b42:	464a      	mov	r2, r9
 8014b44:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b46:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014b4a:	47a8      	blx	r5
 8014b4c:	f001 f81c 	bl	8015b88 <uxr_millis>
 8014b50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014b54:	4605      	mov	r5, r0
 8014b56:	e009      	b.n	8014b6c <uxr_create_session+0x7c>
 8014b58:	f001 f816 	bl	8015b88 <uxr_millis>
 8014b5c:	1b40      	subs	r0, r0, r5
 8014b5e:	7962      	ldrb	r2, [r4, #5]
 8014b60:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	dd38      	ble.n	8014bda <uxr_create_session+0xea>
 8014b68:	2aff      	cmp	r2, #255	@ 0xff
 8014b6a:	d13c      	bne.n	8014be6 <uxr_create_session+0xf6>
 8014b6c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014b6e:	a907      	add	r1, sp, #28
 8014b70:	6897      	ldr	r7, [r2, #8]
 8014b72:	6810      	ldr	r0, [r2, #0]
 8014b74:	aa08      	add	r2, sp, #32
 8014b76:	47b8      	blx	r7
 8014b78:	2800      	cmp	r0, #0
 8014b7a:	d0ed      	beq.n	8014b58 <uxr_create_session+0x68>
 8014b7c:	a81a      	add	r0, sp, #104	@ 0x68
 8014b7e:	2700      	movs	r7, #0
 8014b80:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014b84:	f7fe fd08 	bl	8013598 <ucdr_init_buffer>
 8014b88:	f10d 031a 	add.w	r3, sp, #26
 8014b8c:	aa06      	add	r2, sp, #24
 8014b8e:	a91a      	add	r1, sp, #104	@ 0x68
 8014b90:	4620      	mov	r0, r4
 8014b92:	f88d 7018 	strb.w	r7, [sp, #24]
 8014b96:	f000 f97d 	bl	8014e94 <uxr_read_session_header>
 8014b9a:	2800      	cmp	r0, #0
 8014b9c:	d0dc      	beq.n	8014b58 <uxr_create_session+0x68>
 8014b9e:	4639      	mov	r1, r7
 8014ba0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014ba4:	f000 fe9a 	bl	80158dc <uxr_stream_id_from_raw>
 8014ba8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014bac:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8014bb0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014bb4:	2f01      	cmp	r7, #1
 8014bb6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014bba:	d053      	beq.n	8014c64 <uxr_create_session+0x174>
 8014bbc:	2f02      	cmp	r7, #2
 8014bbe:	d018      	beq.n	8014bf2 <uxr_create_session+0x102>
 8014bc0:	2f00      	cmp	r7, #0
 8014bc2:	d1c9      	bne.n	8014b58 <uxr_create_session+0x68>
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	4638      	mov	r0, r7
 8014bc8:	f000 fe88 	bl	80158dc <uxr_stream_id_from_raw>
 8014bcc:	a91a      	add	r1, sp, #104	@ 0x68
 8014bce:	4602      	mov	r2, r0
 8014bd0:	900a      	str	r0, [sp, #40]	@ 0x28
 8014bd2:	4620      	mov	r0, r4
 8014bd4:	f7ff fac6 	bl	8014164 <read_submessage_list>
 8014bd8:	e7be      	b.n	8014b58 <uxr_create_session+0x68>
 8014bda:	9b03      	ldr	r3, [sp, #12]
 8014bdc:	3b01      	subs	r3, #1
 8014bde:	9303      	str	r3, [sp, #12]
 8014be0:	d001      	beq.n	8014be6 <uxr_create_session+0xf6>
 8014be2:	2aff      	cmp	r2, #255	@ 0xff
 8014be4:	d0ac      	beq.n	8014b40 <uxr_create_session+0x50>
 8014be6:	2a00      	cmp	r2, #0
 8014be8:	d051      	beq.n	8014c8e <uxr_create_session+0x19e>
 8014bea:	2000      	movs	r0, #0
 8014bec:	b02b      	add	sp, #172	@ 0xac
 8014bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014bf6:	4641      	mov	r1, r8
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	9304      	str	r3, [sp, #16]
 8014bfc:	f000 ff5c 	bl	8015ab8 <uxr_get_input_reliable_stream>
 8014c00:	4682      	mov	sl, r0
 8014c02:	b348      	cbz	r0, 8014c58 <uxr_create_session+0x168>
 8014c04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014c06:	a81a      	add	r0, sp, #104	@ 0x68
 8014c08:	9205      	str	r2, [sp, #20]
 8014c0a:	f7fe fcf7 	bl	80135fc <ucdr_buffer_remaining>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	f10d 0019 	add.w	r0, sp, #25
 8014c14:	9a05      	ldr	r2, [sp, #20]
 8014c16:	4659      	mov	r1, fp
 8014c18:	9000      	str	r0, [sp, #0]
 8014c1a:	4650      	mov	r0, sl
 8014c1c:	f006 fb60 	bl	801b2e0 <uxr_receive_reliable_message>
 8014c20:	b1d0      	cbz	r0, 8014c58 <uxr_create_session+0x168>
 8014c22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d038      	beq.n	8014c9c <uxr_create_session+0x1ac>
 8014c2a:	9f04      	ldr	r7, [sp, #16]
 8014c2c:	e00a      	b.n	8014c44 <uxr_create_session+0x154>
 8014c2e:	f04f 0302 	mov.w	r3, #2
 8014c32:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8014c36:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8014c3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c40:	f7ff fa90 	bl	8014164 <read_submessage_list>
 8014c44:	a922      	add	r1, sp, #136	@ 0x88
 8014c46:	2204      	movs	r2, #4
 8014c48:	4650      	mov	r0, sl
 8014c4a:	f006 fbcb 	bl	801b3e4 <uxr_next_input_reliable_buffer_available>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	a922      	add	r1, sp, #136	@ 0x88
 8014c52:	4620      	mov	r0, r4
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d1ea      	bne.n	8014c2e <uxr_create_session+0x13e>
 8014c58:	4642      	mov	r2, r8
 8014c5a:	9904      	ldr	r1, [sp, #16]
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f7ff f8fd 	bl	8013e5c <write_submessage_acknack.isra.0>
 8014c62:	e779      	b.n	8014b58 <uxr_create_session+0x68>
 8014c64:	4641      	mov	r1, r8
 8014c66:	4630      	mov	r0, r6
 8014c68:	f000 ff1c 	bl	8015aa4 <uxr_get_input_best_effort_stream>
 8014c6c:	2800      	cmp	r0, #0
 8014c6e:	f43f af73 	beq.w	8014b58 <uxr_create_session+0x68>
 8014c72:	4659      	mov	r1, fp
 8014c74:	f006 faaa 	bl	801b1cc <uxr_receive_best_effort_message>
 8014c78:	2800      	cmp	r0, #0
 8014c7a:	f43f af6d 	beq.w	8014b58 <uxr_create_session+0x68>
 8014c7e:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8014c82:	a91a      	add	r1, sp, #104	@ 0x68
 8014c84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c86:	4620      	mov	r0, r4
 8014c88:	f7ff fa6c 	bl	8014164 <read_submessage_list>
 8014c8c:	e764      	b.n	8014b58 <uxr_create_session+0x68>
 8014c8e:	4630      	mov	r0, r6
 8014c90:	f000 fe5a 	bl	8015948 <uxr_reset_stream_storage>
 8014c94:	2001      	movs	r0, #1
 8014c96:	b02b      	add	sp, #172	@ 0xac
 8014c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9c:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8014ca0:	a91a      	add	r1, sp, #104	@ 0x68
 8014ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	f7ff fa5d 	bl	8014164 <read_submessage_list>
 8014caa:	e7be      	b.n	8014c2a <uxr_create_session+0x13a>

08014cac <uxr_prepare_stream_to_write_submessage>:
 8014cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cb0:	b082      	sub	sp, #8
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	4610      	mov	r0, r2
 8014cb6:	4615      	mov	r5, r2
 8014cb8:	461e      	mov	r6, r3
 8014cba:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8014cbe:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8014cc2:	f105 0904 	add.w	r9, r5, #4
 8014cc6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8014cca:	9101      	str	r1, [sp, #4]
 8014ccc:	f000 ff56 	bl	8015b7c <uxr_submessage_padding>
 8014cd0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014cd4:	4481      	add	r9, r0
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d01d      	beq.n	8014d16 <uxr_prepare_stream_to_write_submessage+0x6a>
 8014cda:	2b02      	cmp	r3, #2
 8014cdc:	d116      	bne.n	8014d0c <uxr_prepare_stream_to_write_submessage+0x60>
 8014cde:	f104 0008 	add.w	r0, r4, #8
 8014ce2:	4651      	mov	r1, sl
 8014ce4:	f000 fed2 	bl	8015a8c <uxr_get_output_reliable_stream>
 8014ce8:	4604      	mov	r4, r0
 8014cea:	b158      	cbz	r0, 8014d04 <uxr_prepare_stream_to_write_submessage+0x58>
 8014cec:	4649      	mov	r1, r9
 8014cee:	4632      	mov	r2, r6
 8014cf0:	f006 fd3c 	bl	801b76c <uxr_prepare_reliable_buffer_to_write>
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	b12c      	cbz	r4, 8014d04 <uxr_prepare_stream_to_write_submessage+0x58>
 8014cf8:	4643      	mov	r3, r8
 8014cfa:	b2aa      	uxth	r2, r5
 8014cfc:	4639      	mov	r1, r7
 8014cfe:	4630      	mov	r0, r6
 8014d00:	f000 fefc 	bl	8015afc <uxr_buffer_submessage_header>
 8014d04:	4620      	mov	r0, r4
 8014d06:	b002      	add	sp, #8
 8014d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d0c:	2400      	movs	r4, #0
 8014d0e:	4620      	mov	r0, r4
 8014d10:	b002      	add	sp, #8
 8014d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d16:	f104 0008 	add.w	r0, r4, #8
 8014d1a:	4651      	mov	r1, sl
 8014d1c:	f000 feae 	bl	8015a7c <uxr_get_output_best_effort_stream>
 8014d20:	4604      	mov	r4, r0
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d0ee      	beq.n	8014d04 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d26:	4649      	mov	r1, r9
 8014d28:	4632      	mov	r2, r6
 8014d2a:	f006 fc4b 	bl	801b5c4 <uxr_prepare_best_effort_buffer_to_write>
 8014d2e:	4604      	mov	r4, r0
 8014d30:	e7e1      	b.n	8014cf6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8014d32:	bf00      	nop

08014d34 <uxr_init_session_info>:
 8014d34:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8014d38:	23ff      	movs	r3, #255	@ 0xff
 8014d3a:	7102      	strb	r2, [r0, #4]
 8014d3c:	f880 c001 	strb.w	ip, [r0, #1]
 8014d40:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014d44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014d48:	7001      	strb	r1, [r0, #0]
 8014d4a:	f880 c002 	strb.w	ip, [r0, #2]
 8014d4e:	7143      	strb	r3, [r0, #5]
 8014d50:	70c2      	strb	r2, [r0, #3]
 8014d52:	b500      	push	{lr}
 8014d54:	f04f 0e09 	mov.w	lr, #9
 8014d58:	f8a0 e006 	strh.w	lr, [r0, #6]
 8014d5c:	f85d fb04 	ldr.w	pc, [sp], #4

08014d60 <uxr_buffer_create_session>:
 8014d60:	b530      	push	{r4, r5, lr}
 8014d62:	2300      	movs	r3, #0
 8014d64:	b089      	sub	sp, #36	@ 0x24
 8014d66:	4d12      	ldr	r5, [pc, #72]	@ (8014db0 <uxr_buffer_create_session+0x50>)
 8014d68:	460c      	mov	r4, r1
 8014d6a:	9307      	str	r3, [sp, #28]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014d72:	2201      	movs	r2, #1
 8014d74:	9301      	str	r3, [sp, #4]
 8014d76:	80c2      	strh	r2, [r0, #6]
 8014d78:	f88d 2004 	strb.w	r2, [sp, #4]
 8014d7c:	682a      	ldr	r2, [r5, #0]
 8014d7e:	9303      	str	r3, [sp, #12]
 8014d80:	9200      	str	r2, [sp, #0]
 8014d82:	88aa      	ldrh	r2, [r5, #4]
 8014d84:	9306      	str	r3, [sp, #24]
 8014d86:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d8a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014d8e:	9202      	str	r2, [sp, #8]
 8014d90:	7802      	ldrb	r2, [r0, #0]
 8014d92:	4620      	mov	r0, r4
 8014d94:	f88d 200c 	strb.w	r2, [sp, #12]
 8014d98:	2210      	movs	r2, #16
 8014d9a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014d9e:	f000 fead 	bl	8015afc <uxr_buffer_submessage_header>
 8014da2:	4669      	mov	r1, sp
 8014da4:	4620      	mov	r0, r4
 8014da6:	f001 fdff 	bl	80169a8 <uxr_serialize_CREATE_CLIENT_Payload>
 8014daa:	b009      	add	sp, #36	@ 0x24
 8014dac:	bd30      	pop	{r4, r5, pc}
 8014dae:	bf00      	nop
 8014db0:	0801dd2c 	.word	0x0801dd2c

08014db4 <uxr_buffer_delete_session>:
 8014db4:	4a0c      	ldr	r2, [pc, #48]	@ (8014de8 <uxr_buffer_delete_session+0x34>)
 8014db6:	2302      	movs	r3, #2
 8014db8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8014dbc:	b510      	push	{r4, lr}
 8014dbe:	460c      	mov	r4, r1
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	8911      	ldrh	r1, [r2, #8]
 8014dc4:	2204      	movs	r2, #4
 8014dc6:	80c3      	strh	r3, [r0, #6]
 8014dc8:	2300      	movs	r3, #0
 8014dca:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014dce:	4620      	mov	r0, r4
 8014dd0:	2103      	movs	r1, #3
 8014dd2:	f8ad c004 	strh.w	ip, [sp, #4]
 8014dd6:	f000 fe91 	bl	8015afc <uxr_buffer_submessage_header>
 8014dda:	a901      	add	r1, sp, #4
 8014ddc:	4620      	mov	r0, r4
 8014dde:	f001 fe8b 	bl	8016af8 <uxr_serialize_DELETE_Payload>
 8014de2:	b002      	add	sp, #8
 8014de4:	bd10      	pop	{r4, pc}
 8014de6:	bf00      	nop
 8014de8:	0801dd2c 	.word	0x0801dd2c

08014dec <uxr_read_create_session_status>:
 8014dec:	b510      	push	{r4, lr}
 8014dee:	460b      	mov	r3, r1
 8014df0:	b088      	sub	sp, #32
 8014df2:	4604      	mov	r4, r0
 8014df4:	a901      	add	r1, sp, #4
 8014df6:	4618      	mov	r0, r3
 8014df8:	f001 fe8e 	bl	8016b18 <uxr_deserialize_STATUS_AGENT_Payload>
 8014dfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014e00:	7163      	strb	r3, [r4, #5]
 8014e02:	b008      	add	sp, #32
 8014e04:	bd10      	pop	{r4, pc}
 8014e06:	bf00      	nop

08014e08 <uxr_read_delete_session_status>:
 8014e08:	b510      	push	{r4, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	4604      	mov	r4, r0
 8014e0e:	4608      	mov	r0, r1
 8014e10:	a902      	add	r1, sp, #8
 8014e12:	f001 feb1 	bl	8016b78 <uxr_deserialize_STATUS_Payload>
 8014e16:	88e3      	ldrh	r3, [r4, #6]
 8014e18:	2b02      	cmp	r3, #2
 8014e1a:	d001      	beq.n	8014e20 <uxr_read_delete_session_status+0x18>
 8014e1c:	b004      	add	sp, #16
 8014e1e:	bd10      	pop	{r4, pc}
 8014e20:	f10d 000a 	add.w	r0, sp, #10
 8014e24:	f7fe feaa 	bl	8013b7c <uxr_object_id_from_raw>
 8014e28:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014e2c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014e30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	2b02      	cmp	r3, #2
 8014e38:	d1f0      	bne.n	8014e1c <uxr_read_delete_session_status+0x14>
 8014e3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014e3e:	7163      	strb	r3, [r4, #5]
 8014e40:	e7ec      	b.n	8014e1c <uxr_read_delete_session_status+0x14>
 8014e42:	bf00      	nop

08014e44 <uxr_stamp_create_session_header>:
 8014e44:	b510      	push	{r4, lr}
 8014e46:	2208      	movs	r2, #8
 8014e48:	b08a      	sub	sp, #40	@ 0x28
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	eb0d 0002 	add.w	r0, sp, r2
 8014e50:	f7fe fba2 	bl	8013598 <ucdr_init_buffer>
 8014e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e58:	2300      	movs	r3, #0
 8014e5a:	a802      	add	r0, sp, #8
 8014e5c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014e60:	9400      	str	r4, [sp, #0]
 8014e62:	461a      	mov	r2, r3
 8014e64:	f001 f846 	bl	8015ef4 <uxr_serialize_message_header>
 8014e68:	b00a      	add	sp, #40	@ 0x28
 8014e6a:	bd10      	pop	{r4, pc}

08014e6c <uxr_stamp_session_header>:
 8014e6c:	b530      	push	{r4, r5, lr}
 8014e6e:	b08d      	sub	sp, #52	@ 0x34
 8014e70:	4604      	mov	r4, r0
 8014e72:	460d      	mov	r5, r1
 8014e74:	4619      	mov	r1, r3
 8014e76:	a804      	add	r0, sp, #16
 8014e78:	9203      	str	r2, [sp, #12]
 8014e7a:	2208      	movs	r2, #8
 8014e7c:	f7fe fb8c 	bl	8013598 <ucdr_init_buffer>
 8014e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e84:	9b03      	ldr	r3, [sp, #12]
 8014e86:	462a      	mov	r2, r5
 8014e88:	a804      	add	r0, sp, #16
 8014e8a:	9400      	str	r4, [sp, #0]
 8014e8c:	f001 f832 	bl	8015ef4 <uxr_serialize_message_header>
 8014e90:	b00d      	add	sp, #52	@ 0x34
 8014e92:	bd30      	pop	{r4, r5, pc}

08014e94 <uxr_read_session_header>:
 8014e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e98:	4607      	mov	r7, r0
 8014e9a:	b084      	sub	sp, #16
 8014e9c:	4608      	mov	r0, r1
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	4615      	mov	r5, r2
 8014ea2:	461e      	mov	r6, r3
 8014ea4:	f7fe fbaa 	bl	80135fc <ucdr_buffer_remaining>
 8014ea8:	2808      	cmp	r0, #8
 8014eaa:	d803      	bhi.n	8014eb4 <uxr_read_session_header+0x20>
 8014eac:	2000      	movs	r0, #0
 8014eae:	b004      	add	sp, #16
 8014eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eb4:	f10d 080c 	add.w	r8, sp, #12
 8014eb8:	4633      	mov	r3, r6
 8014eba:	462a      	mov	r2, r5
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	f10d 010b 	add.w	r1, sp, #11
 8014ec2:	f8cd 8000 	str.w	r8, [sp]
 8014ec6:	f001 f833 	bl	8015f30 <uxr_deserialize_message_header>
 8014eca:	783a      	ldrb	r2, [r7, #0]
 8014ecc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014ed0:	4293      	cmp	r3, r2
 8014ed2:	d1eb      	bne.n	8014eac <uxr_read_session_header+0x18>
 8014ed4:	061b      	lsls	r3, r3, #24
 8014ed6:	d41b      	bmi.n	8014f10 <uxr_read_session_header+0x7c>
 8014ed8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014edc:	787b      	ldrb	r3, [r7, #1]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d003      	beq.n	8014eea <uxr_read_session_header+0x56>
 8014ee2:	2001      	movs	r0, #1
 8014ee4:	f080 0001 	eor.w	r0, r0, #1
 8014ee8:	e7e1      	b.n	8014eae <uxr_read_session_header+0x1a>
 8014eea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014eee:	1cb8      	adds	r0, r7, #2
 8014ef0:	78bb      	ldrb	r3, [r7, #2]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d1f5      	bne.n	8014ee2 <uxr_read_session_header+0x4e>
 8014ef6:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014efa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d1ef      	bne.n	8014ee2 <uxr_read_session_header+0x4e>
 8014f02:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014f06:	7843      	ldrb	r3, [r0, #1]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d1ea      	bne.n	8014ee2 <uxr_read_session_header+0x4e>
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	e7e9      	b.n	8014ee4 <uxr_read_session_header+0x50>
 8014f10:	2001      	movs	r0, #1
 8014f12:	e7cc      	b.n	8014eae <uxr_read_session_header+0x1a>

08014f14 <uxr_session_header_offset>:
 8014f14:	f990 3000 	ldrsb.w	r3, [r0]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	bfac      	ite	ge
 8014f1c:	2008      	movge	r0, #8
 8014f1e:	2004      	movlt	r0, #4
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop

08014f24 <uxr_init_base_object_request>:
 8014f24:	b510      	push	{r4, lr}
 8014f26:	b082      	sub	sp, #8
 8014f28:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014f2c:	9101      	str	r1, [sp, #4]
 8014f2e:	88c3      	ldrh	r3, [r0, #6]
 8014f30:	f1a3 010a 	sub.w	r1, r3, #10
 8014f34:	b289      	uxth	r1, r1
 8014f36:	42a1      	cmp	r1, r4
 8014f38:	d80f      	bhi.n	8014f5a <uxr_init_base_object_request+0x36>
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	b29c      	uxth	r4, r3
 8014f3e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8014f42:	b2db      	uxtb	r3, r3
 8014f44:	80c4      	strh	r4, [r0, #6]
 8014f46:	1c91      	adds	r1, r2, #2
 8014f48:	9801      	ldr	r0, [sp, #4]
 8014f4a:	f882 c000 	strb.w	ip, [r2]
 8014f4e:	7053      	strb	r3, [r2, #1]
 8014f50:	f7fe fe28 	bl	8013ba4 <uxr_object_id_to_raw>
 8014f54:	4620      	mov	r0, r4
 8014f56:	b002      	add	sp, #8
 8014f58:	bd10      	pop	{r4, pc}
 8014f5a:	230a      	movs	r3, #10
 8014f5c:	f04f 0c00 	mov.w	ip, #0
 8014f60:	461c      	mov	r4, r3
 8014f62:	e7ef      	b.n	8014f44 <uxr_init_base_object_request+0x20>

08014f64 <uxr_parse_base_object_request>:
 8014f64:	b570      	push	{r4, r5, r6, lr}
 8014f66:	4604      	mov	r4, r0
 8014f68:	3002      	adds	r0, #2
 8014f6a:	460d      	mov	r5, r1
 8014f6c:	4616      	mov	r6, r2
 8014f6e:	f7fe fe05 	bl	8013b7c <uxr_object_id_from_raw>
 8014f72:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014f76:	8028      	strh	r0, [r5, #0]
 8014f78:	806b      	strh	r3, [r5, #2]
 8014f7a:	7822      	ldrb	r2, [r4, #0]
 8014f7c:	7863      	ldrb	r3, [r4, #1]
 8014f7e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014f82:	8033      	strh	r3, [r6, #0]
 8014f84:	bd70      	pop	{r4, r5, r6, pc}
 8014f86:	bf00      	nop

08014f88 <uxr_init_framing_io>:
 8014f88:	2300      	movs	r3, #0
 8014f8a:	7041      	strb	r1, [r0, #1]
 8014f8c:	7003      	strb	r3, [r0, #0]
 8014f8e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop

08014f94 <uxr_write_framed_msg>:
 8014f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f98:	4617      	mov	r7, r2
 8014f9a:	7842      	ldrb	r2, [r0, #1]
 8014f9c:	460e      	mov	r6, r1
 8014f9e:	b083      	sub	sp, #12
 8014fa0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014fa4:	469b      	mov	fp, r3
 8014fa6:	237e      	movs	r3, #126	@ 0x7e
 8014fa8:	4604      	mov	r4, r0
 8014faa:	2901      	cmp	r1, #1
 8014fac:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8014fb0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014fb4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014fb8:	f240 8115 	bls.w	80151e6 <uxr_write_framed_msg+0x252>
 8014fbc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014fc0:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014fc4:	2202      	movs	r2, #2
 8014fc6:	2901      	cmp	r1, #1
 8014fc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014fcc:	d952      	bls.n	8015074 <uxr_write_framed_msg+0xe0>
 8014fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fd0:	2103      	movs	r1, #3
 8014fd2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014fd6:	b2dd      	uxtb	r5, r3
 8014fd8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014fdc:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8014fe0:	2a01      	cmp	r2, #1
 8014fe2:	d95c      	bls.n	801509e <uxr_write_framed_msg+0x10a>
 8014fe4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014fe6:	1862      	adds	r2, r4, r1
 8014fe8:	3101      	adds	r1, #1
 8014fea:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014fee:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8014ff2:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8014ff6:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8014ffa:	2a01      	cmp	r2, #1
 8014ffc:	d961      	bls.n	80150c2 <uxr_write_framed_msg+0x12e>
 8014ffe:	1c4a      	adds	r2, r1, #1
 8015000:	4421      	add	r1, r4
 8015002:	b2d2      	uxtb	r2, r2
 8015004:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015008:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801500c:	2b00      	cmp	r3, #0
 801500e:	d06a      	beq.n	80150e6 <uxr_write_framed_msg+0x152>
 8015010:	f04f 0800 	mov.w	r8, #0
 8015014:	46c1      	mov	r9, r8
 8015016:	e016      	b.n	8015046 <uxr_write_framed_msg+0xb2>
 8015018:	2a29      	cmp	r2, #41	@ 0x29
 801501a:	d868      	bhi.n	80150ee <uxr_write_framed_msg+0x15a>
 801501c:	18a0      	adds	r0, r4, r2
 801501e:	3201      	adds	r2, #1
 8015020:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015024:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015028:	ea88 0101 	eor.w	r1, r8, r1
 801502c:	4b7d      	ldr	r3, [pc, #500]	@ (8015224 <uxr_write_framed_msg+0x290>)
 801502e:	f109 0901 	add.w	r9, r9, #1
 8015032:	b2c9      	uxtb	r1, r1
 8015034:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015038:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801503c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801503e:	454b      	cmp	r3, r9
 8015040:	d969      	bls.n	8015116 <uxr_write_framed_msg+0x182>
 8015042:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015046:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801504a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801504e:	2801      	cmp	r0, #1
 8015050:	d8e2      	bhi.n	8015018 <uxr_write_framed_msg+0x84>
 8015052:	1c50      	adds	r0, r2, #1
 8015054:	b2c0      	uxtb	r0, r0
 8015056:	2829      	cmp	r0, #41	@ 0x29
 8015058:	d849      	bhi.n	80150ee <uxr_write_framed_msg+0x15a>
 801505a:	18a0      	adds	r0, r4, r2
 801505c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015060:	3202      	adds	r2, #2
 8015062:	f081 0520 	eor.w	r5, r1, #32
 8015066:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801506a:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801506e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015072:	e7d9      	b.n	8015028 <uxr_write_framed_msg+0x94>
 8015074:	2104      	movs	r1, #4
 8015076:	f04f 0c03 	mov.w	ip, #3
 801507a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801507c:	4422      	add	r2, r4
 801507e:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8015082:	44a4      	add	ip, r4
 8015084:	b2dd      	uxtb	r5, r3
 8015086:	f080 0020 	eor.w	r0, r0, #32
 801508a:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 801508e:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015092:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8015096:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801509a:	2a01      	cmp	r2, #1
 801509c:	d8a2      	bhi.n	8014fe4 <uxr_write_framed_msg+0x50>
 801509e:	1862      	adds	r2, r4, r1
 80150a0:	207d      	movs	r0, #125	@ 0x7d
 80150a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150a4:	f085 0520 	eor.w	r5, r5, #32
 80150a8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80150ac:	3102      	adds	r1, #2
 80150ae:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80150b2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80150b6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80150ba:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80150be:	2a01      	cmp	r2, #1
 80150c0:	d89d      	bhi.n	8014ffe <uxr_write_framed_msg+0x6a>
 80150c2:	1c4d      	adds	r5, r1, #1
 80150c4:	1c8a      	adds	r2, r1, #2
 80150c6:	f080 0020 	eor.w	r0, r0, #32
 80150ca:	4421      	add	r1, r4
 80150cc:	fa54 f585 	uxtab	r5, r4, r5
 80150d0:	b2d2      	uxtb	r2, r2
 80150d2:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80150d6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80150da:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80150de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d194      	bne.n	8015010 <uxr_write_framed_msg+0x7c>
 80150e6:	4619      	mov	r1, r3
 80150e8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80150ec:	e019      	b.n	8015122 <uxr_write_framed_msg+0x18e>
 80150ee:	2500      	movs	r5, #0
 80150f0:	e000      	b.n	80150f4 <uxr_write_framed_msg+0x160>
 80150f2:	b160      	cbz	r0, 801510e <uxr_write_framed_msg+0x17a>
 80150f4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80150f8:	1b52      	subs	r2, r2, r5
 80150fa:	4653      	mov	r3, sl
 80150fc:	4638      	mov	r0, r7
 80150fe:	4421      	add	r1, r4
 8015100:	47b0      	blx	r6
 8015102:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015106:	4405      	add	r5, r0
 8015108:	4295      	cmp	r5, r2
 801510a:	d3f2      	bcc.n	80150f2 <uxr_write_framed_msg+0x15e>
 801510c:	d066      	beq.n	80151dc <uxr_write_framed_msg+0x248>
 801510e:	2000      	movs	r0, #0
 8015110:	b003      	add	sp, #12
 8015112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015116:	fa5f f188 	uxtb.w	r1, r8
 801511a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801511e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015122:	f04f 0900 	mov.w	r9, #0
 8015126:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801512a:	46c8      	mov	r8, r9
 801512c:	e013      	b.n	8015156 <uxr_write_framed_msg+0x1c2>
 801512e:	2a29      	cmp	r2, #41	@ 0x29
 8015130:	d824      	bhi.n	801517c <uxr_write_framed_msg+0x1e8>
 8015132:	18a3      	adds	r3, r4, r2
 8015134:	3201      	adds	r2, #1
 8015136:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801513a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801513e:	f109 0901 	add.w	r9, r9, #1
 8015142:	f1b9 0f02 	cmp.w	r9, #2
 8015146:	d02d      	beq.n	80151a4 <uxr_write_framed_msg+0x210>
 8015148:	f109 0308 	add.w	r3, r9, #8
 801514c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015150:	446b      	add	r3, sp
 8015152:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015156:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801515a:	2b01      	cmp	r3, #1
 801515c:	d8e7      	bhi.n	801512e <uxr_write_framed_msg+0x19a>
 801515e:	1c53      	adds	r3, r2, #1
 8015160:	b2db      	uxtb	r3, r3
 8015162:	2b29      	cmp	r3, #41	@ 0x29
 8015164:	d80a      	bhi.n	801517c <uxr_write_framed_msg+0x1e8>
 8015166:	18a3      	adds	r3, r4, r2
 8015168:	f081 0120 	eor.w	r1, r1, #32
 801516c:	3202      	adds	r2, #2
 801516e:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8015172:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8015176:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801517a:	e7e0      	b.n	801513e <uxr_write_framed_msg+0x1aa>
 801517c:	2500      	movs	r5, #0
 801517e:	e001      	b.n	8015184 <uxr_write_framed_msg+0x1f0>
 8015180:	2800      	cmp	r0, #0
 8015182:	d0c4      	beq.n	801510e <uxr_write_framed_msg+0x17a>
 8015184:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015188:	1b52      	subs	r2, r2, r5
 801518a:	4653      	mov	r3, sl
 801518c:	4638      	mov	r0, r7
 801518e:	4421      	add	r1, r4
 8015190:	47b0      	blx	r6
 8015192:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015196:	4405      	add	r5, r0
 8015198:	4295      	cmp	r5, r2
 801519a:	d3f1      	bcc.n	8015180 <uxr_write_framed_msg+0x1ec>
 801519c:	d1b7      	bne.n	801510e <uxr_write_framed_msg+0x17a>
 801519e:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80151a2:	e7d1      	b.n	8015148 <uxr_write_framed_msg+0x1b4>
 80151a4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151a8:	b19a      	cbz	r2, 80151d2 <uxr_write_framed_msg+0x23e>
 80151aa:	2500      	movs	r5, #0
 80151ac:	e001      	b.n	80151b2 <uxr_write_framed_msg+0x21e>
 80151ae:	2800      	cmp	r0, #0
 80151b0:	d0ad      	beq.n	801510e <uxr_write_framed_msg+0x17a>
 80151b2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80151b6:	1b52      	subs	r2, r2, r5
 80151b8:	4653      	mov	r3, sl
 80151ba:	4638      	mov	r0, r7
 80151bc:	4421      	add	r1, r4
 80151be:	47b0      	blx	r6
 80151c0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151c4:	4405      	add	r5, r0
 80151c6:	4295      	cmp	r5, r2
 80151c8:	d3f1      	bcc.n	80151ae <uxr_write_framed_msg+0x21a>
 80151ca:	d1a0      	bne.n	801510e <uxr_write_framed_msg+0x17a>
 80151cc:	2300      	movs	r3, #0
 80151ce:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80151d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80151d4:	b298      	uxth	r0, r3
 80151d6:	b003      	add	sp, #12
 80151d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151dc:	f04f 0300 	mov.w	r3, #0
 80151e0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80151e4:	e72a      	b.n	801503c <uxr_write_framed_msg+0xa8>
 80151e6:	217d      	movs	r1, #125	@ 0x7d
 80151e8:	f082 0220 	eor.w	r2, r2, #32
 80151ec:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80151f0:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80151f4:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80151f8:	2203      	movs	r2, #3
 80151fa:	2901      	cmp	r1, #1
 80151fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015200:	d803      	bhi.n	801520a <uxr_write_framed_msg+0x276>
 8015202:	2105      	movs	r1, #5
 8015204:	f04f 0c04 	mov.w	ip, #4
 8015208:	e737      	b.n	801507a <uxr_write_framed_msg+0xe6>
 801520a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801520c:	2104      	movs	r1, #4
 801520e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015212:	b2dd      	uxtb	r5, r3
 8015214:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015218:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801521c:	2a01      	cmp	r2, #1
 801521e:	f63f aee1 	bhi.w	8014fe4 <uxr_write_framed_msg+0x50>
 8015222:	e73c      	b.n	801509e <uxr_write_framed_msg+0x10a>
 8015224:	0801e3a8 	.word	0x0801e3a8

08015228 <uxr_framing_read_transport>:
 8015228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	4604      	mov	r4, r0
 801522e:	b085      	sub	sp, #20
 8015230:	4692      	mov	sl, r2
 8015232:	4689      	mov	r9, r1
 8015234:	461d      	mov	r5, r3
 8015236:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8015238:	f000 fca6 	bl	8015b88 <uxr_millis>
 801523c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015240:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015244:	4680      	mov	r8, r0
 8015246:	42ba      	cmp	r2, r7
 8015248:	d05f      	beq.n	801530a <uxr_framing_read_transport+0xe2>
 801524a:	d817      	bhi.n	801527c <uxr_framing_read_transport+0x54>
 801524c:	3f01      	subs	r7, #1
 801524e:	1aba      	subs	r2, r7, r2
 8015250:	2700      	movs	r7, #0
 8015252:	b2d2      	uxtb	r2, r2
 8015254:	42b2      	cmp	r2, r6
 8015256:	d81a      	bhi.n	801528e <uxr_framing_read_transport+0x66>
 8015258:	19d3      	adds	r3, r2, r7
 801525a:	42b3      	cmp	r3, r6
 801525c:	d852      	bhi.n	8015304 <uxr_framing_read_transport+0xdc>
 801525e:	b9d2      	cbnz	r2, 8015296 <uxr_framing_read_transport+0x6e>
 8015260:	2600      	movs	r6, #0
 8015262:	f000 fc91 	bl	8015b88 <uxr_millis>
 8015266:	682b      	ldr	r3, [r5, #0]
 8015268:	eba0 0008 	sub.w	r0, r0, r8
 801526c:	1a1b      	subs	r3, r3, r0
 801526e:	4630      	mov	r0, r6
 8015270:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015274:	602b      	str	r3, [r5, #0]
 8015276:	b005      	add	sp, #20
 8015278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527c:	2f00      	cmp	r7, #0
 801527e:	d060      	beq.n	8015342 <uxr_framing_read_transport+0x11a>
 8015280:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8015284:	3f01      	subs	r7, #1
 8015286:	b2d2      	uxtb	r2, r2
 8015288:	b2ff      	uxtb	r7, r7
 801528a:	42b2      	cmp	r2, r6
 801528c:	d9e4      	bls.n	8015258 <uxr_framing_read_transport+0x30>
 801528e:	b2f2      	uxtb	r2, r6
 8015290:	2700      	movs	r7, #0
 8015292:	2a00      	cmp	r2, #0
 8015294:	d0e4      	beq.n	8015260 <uxr_framing_read_transport+0x38>
 8015296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015298:	4650      	mov	r0, sl
 801529a:	9203      	str	r2, [sp, #12]
 801529c:	9300      	str	r3, [sp, #0]
 801529e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80152a2:	682b      	ldr	r3, [r5, #0]
 80152a4:	3102      	adds	r1, #2
 80152a6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801534c <uxr_framing_read_transport+0x124>
 80152aa:	4421      	add	r1, r4
 80152ac:	47c8      	blx	r9
 80152ae:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80152b2:	4606      	mov	r6, r0
 80152b4:	4403      	add	r3, r0
 80152b6:	0859      	lsrs	r1, r3, #1
 80152b8:	fbab 2101 	umull	r2, r1, fp, r1
 80152bc:	222a      	movs	r2, #42	@ 0x2a
 80152be:	0889      	lsrs	r1, r1, #2
 80152c0:	fb02 3111 	mls	r1, r2, r1, r3
 80152c4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80152c8:	2800      	cmp	r0, #0
 80152ca:	d0c9      	beq.n	8015260 <uxr_framing_read_transport+0x38>
 80152cc:	9a03      	ldr	r2, [sp, #12]
 80152ce:	4290      	cmp	r0, r2
 80152d0:	d1c7      	bne.n	8015262 <uxr_framing_read_transport+0x3a>
 80152d2:	2f00      	cmp	r7, #0
 80152d4:	d0c5      	beq.n	8015262 <uxr_framing_read_transport+0x3a>
 80152d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152d8:	3102      	adds	r1, #2
 80152da:	463a      	mov	r2, r7
 80152dc:	4650      	mov	r0, sl
 80152de:	4421      	add	r1, r4
 80152e0:	9300      	str	r3, [sp, #0]
 80152e2:	2300      	movs	r3, #0
 80152e4:	47c8      	blx	r9
 80152e6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 80152ea:	4406      	add	r6, r0
 80152ec:	1813      	adds	r3, r2, r0
 80152ee:	085a      	lsrs	r2, r3, #1
 80152f0:	fbab 1b02 	umull	r1, fp, fp, r2
 80152f4:	222a      	movs	r2, #42	@ 0x2a
 80152f6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80152fa:	fb02 331b 	mls	r3, r2, fp, r3
 80152fe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015302:	e7ae      	b.n	8015262 <uxr_framing_read_transport+0x3a>
 8015304:	1ab6      	subs	r6, r6, r2
 8015306:	b2f7      	uxtb	r7, r6
 8015308:	e7a9      	b.n	801525e <uxr_framing_read_transport+0x36>
 801530a:	2300      	movs	r3, #0
 801530c:	2e28      	cmp	r6, #40	@ 0x28
 801530e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8015310:	d9bd      	bls.n	801528e <uxr_framing_read_transport+0x66>
 8015312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015314:	2229      	movs	r2, #41	@ 0x29
 8015316:	1ca1      	adds	r1, r4, #2
 8015318:	4650      	mov	r0, sl
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	682b      	ldr	r3, [r5, #0]
 801531e:	47c8      	blx	r9
 8015320:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015324:	4606      	mov	r6, r0
 8015326:	212a      	movs	r1, #42	@ 0x2a
 8015328:	4403      	add	r3, r0
 801532a:	4808      	ldr	r0, [pc, #32]	@ (801534c <uxr_framing_read_transport+0x124>)
 801532c:	085a      	lsrs	r2, r3, #1
 801532e:	fba0 0202 	umull	r0, r2, r0, r2
 8015332:	0892      	lsrs	r2, r2, #2
 8015334:	fb01 3312 	mls	r3, r1, r2, r3
 8015338:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801533c:	2e00      	cmp	r6, #0
 801533e:	d08f      	beq.n	8015260 <uxr_framing_read_transport+0x38>
 8015340:	e78f      	b.n	8015262 <uxr_framing_read_transport+0x3a>
 8015342:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8015346:	b2d2      	uxtb	r2, r2
 8015348:	e784      	b.n	8015254 <uxr_framing_read_transport+0x2c>
 801534a:	bf00      	nop
 801534c:	30c30c31 	.word	0x30c30c31

08015350 <uxr_read_framed_msg>:
 8015350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015354:	461e      	mov	r6, r3
 8015356:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801535a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801535e:	b083      	sub	sp, #12
 8015360:	4604      	mov	r4, r0
 8015362:	4688      	mov	r8, r1
 8015364:	429d      	cmp	r5, r3
 8015366:	4691      	mov	r9, r2
 8015368:	f000 818c 	beq.w	8015684 <uxr_read_framed_msg+0x334>
 801536c:	7823      	ldrb	r3, [r4, #0]
 801536e:	4dc3      	ldr	r5, [pc, #780]	@ (801567c <uxr_read_framed_msg+0x32c>)
 8015370:	4fc3      	ldr	r7, [pc, #780]	@ (8015680 <uxr_read_framed_msg+0x330>)
 8015372:	2b07      	cmp	r3, #7
 8015374:	d8fd      	bhi.n	8015372 <uxr_read_framed_msg+0x22>
 8015376:	e8df f013 	tbh	[pc, r3, lsl #1]
 801537a:	011c      	.short	0x011c
 801537c:	00d900fb 	.word	0x00d900fb
 8015380:	008f00ba 	.word	0x008f00ba
 8015384:	00320051 	.word	0x00320051
 8015388:	0008      	.short	0x0008
 801538a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801538e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015392:	4299      	cmp	r1, r3
 8015394:	f000 814d 	beq.w	8015632 <uxr_read_framed_msg+0x2e2>
 8015398:	18e2      	adds	r2, r4, r3
 801539a:	7892      	ldrb	r2, [r2, #2]
 801539c:	2a7d      	cmp	r2, #125	@ 0x7d
 801539e:	f000 81b8 	beq.w	8015712 <uxr_read_framed_msg+0x3c2>
 80153a2:	3301      	adds	r3, #1
 80153a4:	212a      	movs	r1, #42	@ 0x2a
 80153a6:	2a7e      	cmp	r2, #126	@ 0x7e
 80153a8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80153ac:	fba5 c000 	umull	ip, r0, r5, r0
 80153b0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80153b4:	fb01 3310 	mls	r3, r1, r0, r3
 80153b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80153bc:	f000 8257 	beq.w	801586e <uxr_read_framed_msg+0x51e>
 80153c0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80153c2:	2000      	movs	r0, #0
 80153c4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80153c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80153ca:	7020      	strb	r0, [r4, #0]
 80153cc:	b29b      	uxth	r3, r3
 80153ce:	4299      	cmp	r1, r3
 80153d0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80153d2:	f000 8178 	beq.w	80156c6 <uxr_read_framed_msg+0x376>
 80153d6:	2000      	movs	r0, #0
 80153d8:	b003      	add	sp, #12
 80153da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153de:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80153e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80153e6:	4298      	cmp	r0, r3
 80153e8:	f000 8132 	beq.w	8015650 <uxr_read_framed_msg+0x300>
 80153ec:	18e2      	adds	r2, r4, r3
 80153ee:	7891      	ldrb	r1, [r2, #2]
 80153f0:	297d      	cmp	r1, #125	@ 0x7d
 80153f2:	f000 8170 	beq.w	80156d6 <uxr_read_framed_msg+0x386>
 80153f6:	3301      	adds	r3, #1
 80153f8:	202a      	movs	r0, #42	@ 0x2a
 80153fa:	297e      	cmp	r1, #126	@ 0x7e
 80153fc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015400:	fba5 c202 	umull	ip, r2, r5, r2
 8015404:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015408:	fb00 3312 	mls	r3, r0, r2, r3
 801540c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015410:	f000 821d 	beq.w	801584e <uxr_read_framed_msg+0x4fe>
 8015414:	2307      	movs	r3, #7
 8015416:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8015418:	7023      	strb	r3, [r4, #0]
 801541a:	e7aa      	b.n	8015372 <uxr_read_framed_msg+0x22>
 801541c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801541e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015422:	459e      	cmp	lr, r3
 8015424:	d827      	bhi.n	8015476 <uxr_read_framed_msg+0x126>
 8015426:	e032      	b.n	801548e <uxr_read_framed_msg+0x13e>
 8015428:	fba5 b101 	umull	fp, r1, r5, r1
 801542c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015430:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015434:	0889      	lsrs	r1, r1, #2
 8015436:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801543a:	fb0b 0111 	mls	r1, fp, r1, r0
 801543e:	f000 80d4 	beq.w	80155ea <uxr_read_framed_msg+0x29a>
 8015442:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015446:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801544a:	f000 80cb 	beq.w	80155e4 <uxr_read_framed_msg+0x294>
 801544e:	f806 c003 	strb.w	ip, [r6, r3]
 8015452:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015454:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015456:	ea80 010c 	eor.w	r1, r0, ip
 801545a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801545e:	3301      	adds	r3, #1
 8015460:	b2c9      	uxtb	r1, r1
 8015462:	b29b      	uxth	r3, r3
 8015464:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015468:	4573      	cmp	r3, lr
 801546a:	8663      	strh	r3, [r4, #50]	@ 0x32
 801546c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015470:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8015472:	f080 811d 	bcs.w	80156b0 <uxr_read_framed_msg+0x360>
 8015476:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801547a:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801547e:	1c50      	adds	r0, r2, #1
 8015480:	eb04 0c02 	add.w	ip, r4, r2
 8015484:	4592      	cmp	sl, r2
 8015486:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801548a:	d1cd      	bne.n	8015428 <uxr_read_framed_msg+0xd8>
 801548c:	459e      	cmp	lr, r3
 801548e:	f040 8114 	bne.w	80156ba <uxr_read_framed_msg+0x36a>
 8015492:	2306      	movs	r3, #6
 8015494:	7023      	strb	r3, [r4, #0]
 8015496:	e76c      	b.n	8015372 <uxr_read_framed_msg+0x22>
 8015498:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801549c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80154a0:	4298      	cmp	r0, r3
 80154a2:	f000 80c6 	beq.w	8015632 <uxr_read_framed_msg+0x2e2>
 80154a6:	18e2      	adds	r2, r4, r3
 80154a8:	7891      	ldrb	r1, [r2, #2]
 80154aa:	297d      	cmp	r1, #125	@ 0x7d
 80154ac:	f000 8193 	beq.w	80157d6 <uxr_read_framed_msg+0x486>
 80154b0:	3301      	adds	r3, #1
 80154b2:	202a      	movs	r0, #42	@ 0x2a
 80154b4:	297e      	cmp	r1, #126	@ 0x7e
 80154b6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80154ba:	fba5 c202 	umull	ip, r2, r5, r2
 80154be:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80154c2:	fb00 3312 	mls	r3, r0, r2, r3
 80154c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154ca:	f000 81d0 	beq.w	801586e <uxr_read_framed_msg+0x51e>
 80154ce:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80154d0:	2000      	movs	r0, #0
 80154d2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80154d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80154d8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80154da:	b29b      	uxth	r3, r3
 80154dc:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80154de:	428b      	cmp	r3, r1
 80154e0:	8623      	strh	r3, [r4, #48]	@ 0x30
 80154e2:	f240 80e2 	bls.w	80156aa <uxr_read_framed_msg+0x35a>
 80154e6:	7020      	strb	r0, [r4, #0]
 80154e8:	b003      	add	sp, #12
 80154ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80154f2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80154f6:	4298      	cmp	r0, r3
 80154f8:	f000 80aa 	beq.w	8015650 <uxr_read_framed_msg+0x300>
 80154fc:	18e2      	adds	r2, r4, r3
 80154fe:	7891      	ldrb	r1, [r2, #2]
 8015500:	297d      	cmp	r1, #125	@ 0x7d
 8015502:	f000 8186 	beq.w	8015812 <uxr_read_framed_msg+0x4c2>
 8015506:	3301      	adds	r3, #1
 8015508:	202a      	movs	r0, #42	@ 0x2a
 801550a:	297e      	cmp	r1, #126	@ 0x7e
 801550c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015510:	fba5 c202 	umull	ip, r2, r5, r2
 8015514:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015518:	fb00 3312 	mls	r3, r0, r2, r3
 801551c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015520:	f000 8195 	beq.w	801584e <uxr_read_framed_msg+0x4fe>
 8015524:	2304      	movs	r3, #4
 8015526:	8621      	strh	r1, [r4, #48]	@ 0x30
 8015528:	7023      	strb	r3, [r4, #0]
 801552a:	e722      	b.n	8015372 <uxr_read_framed_msg+0x22>
 801552c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015530:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015534:	4290      	cmp	r0, r2
 8015536:	f000 80b4 	beq.w	80156a2 <uxr_read_framed_msg+0x352>
 801553a:	18a3      	adds	r3, r4, r2
 801553c:	7899      	ldrb	r1, [r3, #2]
 801553e:	297d      	cmp	r1, #125	@ 0x7d
 8015540:	f000 8107 	beq.w	8015752 <uxr_read_framed_msg+0x402>
 8015544:	3201      	adds	r2, #1
 8015546:	232a      	movs	r3, #42	@ 0x2a
 8015548:	297e      	cmp	r1, #126	@ 0x7e
 801554a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801554e:	fba5 c000 	umull	ip, r0, r5, r0
 8015552:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015556:	fb03 2210 	mls	r2, r3, r0, r2
 801555a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801555e:	f000 818a 	beq.w	8015876 <uxr_read_framed_msg+0x526>
 8015562:	7863      	ldrb	r3, [r4, #1]
 8015564:	428b      	cmp	r3, r1
 8015566:	bf0c      	ite	eq
 8015568:	2303      	moveq	r3, #3
 801556a:	2300      	movne	r3, #0
 801556c:	7023      	strb	r3, [r4, #0]
 801556e:	e700      	b.n	8015372 <uxr_read_framed_msg+0x22>
 8015570:	2300      	movs	r3, #0
 8015572:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015576:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 801557a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801557e:	4299      	cmp	r1, r3
 8015580:	d06a      	beq.n	8015658 <uxr_read_framed_msg+0x308>
 8015582:	18e2      	adds	r2, r4, r3
 8015584:	7890      	ldrb	r0, [r2, #2]
 8015586:	287d      	cmp	r0, #125	@ 0x7d
 8015588:	f000 8100 	beq.w	801578c <uxr_read_framed_msg+0x43c>
 801558c:	3301      	adds	r3, #1
 801558e:	212a      	movs	r1, #42	@ 0x2a
 8015590:	287e      	cmp	r0, #126	@ 0x7e
 8015592:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015596:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801559a:	fba5 c202 	umull	ip, r2, r5, r2
 801559e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80155a2:	fb01 3312 	mls	r3, r1, r2, r3
 80155a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155aa:	d055      	beq.n	8015658 <uxr_read_framed_msg+0x308>
 80155ac:	2302      	movs	r3, #2
 80155ae:	7023      	strb	r3, [r4, #0]
 80155b0:	e6df      	b.n	8015372 <uxr_read_framed_msg+0x22>
 80155b2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 80155b6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80155ba:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80155be:	1c5a      	adds	r2, r3, #1
 80155c0:	459c      	cmp	ip, r3
 80155c2:	eb04 0103 	add.w	r1, r4, r3
 80155c6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80155ca:	f43f af04 	beq.w	80153d6 <uxr_read_framed_msg+0x86>
 80155ce:	fba5 0303 	umull	r0, r3, r5, r3
 80155d2:	7889      	ldrb	r1, [r1, #2]
 80155d4:	089b      	lsrs	r3, r3, #2
 80155d6:	297e      	cmp	r1, #126	@ 0x7e
 80155d8:	fb0e 2313 	mls	r3, lr, r3, r2
 80155dc:	b2db      	uxtb	r3, r3
 80155de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155e2:	d1ec      	bne.n	80155be <uxr_read_framed_msg+0x26e>
 80155e4:	2301      	movs	r3, #1
 80155e6:	7023      	strb	r3, [r4, #0]
 80155e8:	e6c3      	b.n	8015372 <uxr_read_framed_msg+0x22>
 80155ea:	1c50      	adds	r0, r2, #1
 80155ec:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 80155f0:	3202      	adds	r2, #2
 80155f2:	0841      	lsrs	r1, r0, #1
 80155f4:	fba5 c101 	umull	ip, r1, r5, r1
 80155f8:	0889      	lsrs	r1, r1, #2
 80155fa:	fb0b 0111 	mls	r1, fp, r1, r0
 80155fe:	1860      	adds	r0, r4, r1
 8015600:	b2c9      	uxtb	r1, r1
 8015602:	458a      	cmp	sl, r1
 8015604:	f43f af42 	beq.w	801548c <uxr_read_framed_msg+0x13c>
 8015608:	0851      	lsrs	r1, r2, #1
 801560a:	7880      	ldrb	r0, [r0, #2]
 801560c:	fba5 a101 	umull	sl, r1, r5, r1
 8015610:	287e      	cmp	r0, #126	@ 0x7e
 8015612:	f080 0c20 	eor.w	ip, r0, #32
 8015616:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801561a:	fb0b 2211 	mls	r2, fp, r1, r2
 801561e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015622:	f47f af14 	bne.w	801544e <uxr_read_framed_msg+0xfe>
 8015626:	459e      	cmp	lr, r3
 8015628:	f43f af33 	beq.w	8015492 <uxr_read_framed_msg+0x142>
 801562c:	2301      	movs	r3, #1
 801562e:	7023      	strb	r3, [r4, #0]
 8015630:	e69f      	b.n	8015372 <uxr_read_framed_msg+0x22>
 8015632:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	2301      	movs	r3, #1
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	464a      	mov	r2, r9
 801563c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801563e:	4641      	mov	r1, r8
 8015640:	4620      	mov	r0, r4
 8015642:	f7ff fdf1 	bl	8015228 <uxr_framing_read_transport>
 8015646:	2800      	cmp	r0, #0
 8015648:	f43f aec5 	beq.w	80153d6 <uxr_read_framed_msg+0x86>
 801564c:	7823      	ldrb	r3, [r4, #0]
 801564e:	e690      	b.n	8015372 <uxr_read_framed_msg+0x22>
 8015650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015652:	9300      	str	r3, [sp, #0]
 8015654:	2302      	movs	r3, #2
 8015656:	e7ef      	b.n	8015638 <uxr_read_framed_msg+0x2e8>
 8015658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801565a:	464a      	mov	r2, r9
 801565c:	4641      	mov	r1, r8
 801565e:	4620      	mov	r0, r4
 8015660:	9300      	str	r3, [sp, #0]
 8015662:	2304      	movs	r3, #4
 8015664:	9301      	str	r3, [sp, #4]
 8015666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015668:	f7ff fdde 	bl	8015228 <uxr_framing_read_transport>
 801566c:	2800      	cmp	r0, #0
 801566e:	d1ed      	bne.n	801564c <uxr_read_framed_msg+0x2fc>
 8015670:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015674:	2b7e      	cmp	r3, #126	@ 0x7e
 8015676:	d0e9      	beq.n	801564c <uxr_read_framed_msg+0x2fc>
 8015678:	e6ad      	b.n	80153d6 <uxr_read_framed_msg+0x86>
 801567a:	bf00      	nop
 801567c:	30c30c31 	.word	0x30c30c31
 8015680:	0801e3a8 	.word	0x0801e3a8
 8015684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	2305      	movs	r3, #5
 801568a:	9301      	str	r3, [sp, #4]
 801568c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801568e:	f7ff fdcb 	bl	8015228 <uxr_framing_read_transport>
 8015692:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015696:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801569a:	429a      	cmp	r2, r3
 801569c:	f43f ae9b 	beq.w	80153d6 <uxr_read_framed_msg+0x86>
 80156a0:	e664      	b.n	801536c <uxr_read_framed_msg+0x1c>
 80156a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	2303      	movs	r3, #3
 80156a8:	e7c6      	b.n	8015638 <uxr_read_framed_msg+0x2e8>
 80156aa:	2305      	movs	r3, #5
 80156ac:	7023      	strb	r3, [r4, #0]
 80156ae:	e660      	b.n	8015372 <uxr_read_framed_msg+0x22>
 80156b0:	f43f aeef 	beq.w	8015492 <uxr_read_framed_msg+0x142>
 80156b4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80156b8:	d094      	beq.n	80155e4 <uxr_read_framed_msg+0x294>
 80156ba:	ebae 0303 	sub.w	r3, lr, r3
 80156be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80156c0:	3302      	adds	r3, #2
 80156c2:	9200      	str	r2, [sp, #0]
 80156c4:	e7b8      	b.n	8015638 <uxr_read_framed_msg+0x2e8>
 80156c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80156ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80156cc:	7013      	strb	r3, [r2, #0]
 80156ce:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80156d0:	b003      	add	sp, #12
 80156d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156d6:	1c59      	adds	r1, r3, #1
 80156d8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80156dc:	084a      	lsrs	r2, r1, #1
 80156de:	fba5 e202 	umull	lr, r2, r5, r2
 80156e2:	0892      	lsrs	r2, r2, #2
 80156e4:	fb0c 1212 	mls	r2, ip, r2, r1
 80156e8:	b2d1      	uxtb	r1, r2
 80156ea:	4288      	cmp	r0, r1
 80156ec:	d0b0      	beq.n	8015650 <uxr_read_framed_msg+0x300>
 80156ee:	3302      	adds	r3, #2
 80156f0:	4422      	add	r2, r4
 80156f2:	7891      	ldrb	r1, [r2, #2]
 80156f4:	085a      	lsrs	r2, r3, #1
 80156f6:	fba5 0202 	umull	r0, r2, r5, r2
 80156fa:	297e      	cmp	r1, #126	@ 0x7e
 80156fc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015700:	fb0c 3312 	mls	r3, ip, r2, r3
 8015704:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015708:	f000 80a1 	beq.w	801584e <uxr_read_framed_msg+0x4fe>
 801570c:	f081 0120 	eor.w	r1, r1, #32
 8015710:	e680      	b.n	8015414 <uxr_read_framed_msg+0xc4>
 8015712:	f103 0c01 	add.w	ip, r3, #1
 8015716:	202a      	movs	r0, #42	@ 0x2a
 8015718:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801571c:	fba5 e202 	umull	lr, r2, r5, r2
 8015720:	0892      	lsrs	r2, r2, #2
 8015722:	fb00 c212 	mls	r2, r0, r2, ip
 8015726:	fa5f fc82 	uxtb.w	ip, r2
 801572a:	4561      	cmp	r1, ip
 801572c:	d081      	beq.n	8015632 <uxr_read_framed_msg+0x2e2>
 801572e:	3302      	adds	r3, #2
 8015730:	4422      	add	r2, r4
 8015732:	0859      	lsrs	r1, r3, #1
 8015734:	7892      	ldrb	r2, [r2, #2]
 8015736:	fba5 c101 	umull	ip, r1, r5, r1
 801573a:	2a7e      	cmp	r2, #126	@ 0x7e
 801573c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015740:	fb00 3311 	mls	r3, r0, r1, r3
 8015744:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015748:	f000 8091 	beq.w	801586e <uxr_read_framed_msg+0x51e>
 801574c:	f082 0220 	eor.w	r2, r2, #32
 8015750:	e636      	b.n	80153c0 <uxr_read_framed_msg+0x70>
 8015752:	1c51      	adds	r1, r2, #1
 8015754:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015758:	084b      	lsrs	r3, r1, #1
 801575a:	fba5 e303 	umull	lr, r3, r5, r3
 801575e:	089b      	lsrs	r3, r3, #2
 8015760:	fb0c 1313 	mls	r3, ip, r3, r1
 8015764:	b2d9      	uxtb	r1, r3
 8015766:	4288      	cmp	r0, r1
 8015768:	d09b      	beq.n	80156a2 <uxr_read_framed_msg+0x352>
 801576a:	3202      	adds	r2, #2
 801576c:	4423      	add	r3, r4
 801576e:	0850      	lsrs	r0, r2, #1
 8015770:	789b      	ldrb	r3, [r3, #2]
 8015772:	fba5 1000 	umull	r1, r0, r5, r0
 8015776:	2b7e      	cmp	r3, #126	@ 0x7e
 8015778:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801577c:	fb0c 2210 	mls	r2, ip, r0, r2
 8015780:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015784:	d077      	beq.n	8015876 <uxr_read_framed_msg+0x526>
 8015786:	f083 0120 	eor.w	r1, r3, #32
 801578a:	e6ea      	b.n	8015562 <uxr_read_framed_msg+0x212>
 801578c:	f103 0c01 	add.w	ip, r3, #1
 8015790:	202a      	movs	r0, #42	@ 0x2a
 8015792:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015796:	fba5 e202 	umull	lr, r2, r5, r2
 801579a:	0892      	lsrs	r2, r2, #2
 801579c:	fb00 c212 	mls	r2, r0, r2, ip
 80157a0:	fa5f fc82 	uxtb.w	ip, r2
 80157a4:	4561      	cmp	r1, ip
 80157a6:	f43f af57 	beq.w	8015658 <uxr_read_framed_msg+0x308>
 80157aa:	3302      	adds	r3, #2
 80157ac:	4422      	add	r2, r4
 80157ae:	7891      	ldrb	r1, [r2, #2]
 80157b0:	085a      	lsrs	r2, r3, #1
 80157b2:	fba5 c202 	umull	ip, r2, r5, r2
 80157b6:	297e      	cmp	r1, #126	@ 0x7e
 80157b8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157bc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80157c0:	fb00 3312 	mls	r3, r0, r2, r3
 80157c4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157c8:	f43f af46 	beq.w	8015658 <uxr_read_framed_msg+0x308>
 80157cc:	f081 0120 	eor.w	r1, r1, #32
 80157d0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157d4:	e6ea      	b.n	80155ac <uxr_read_framed_msg+0x25c>
 80157d6:	1c59      	adds	r1, r3, #1
 80157d8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80157dc:	084a      	lsrs	r2, r1, #1
 80157de:	fba5 e202 	umull	lr, r2, r5, r2
 80157e2:	0892      	lsrs	r2, r2, #2
 80157e4:	fb0c 1212 	mls	r2, ip, r2, r1
 80157e8:	b2d1      	uxtb	r1, r2
 80157ea:	4288      	cmp	r0, r1
 80157ec:	f43f af21 	beq.w	8015632 <uxr_read_framed_msg+0x2e2>
 80157f0:	3302      	adds	r3, #2
 80157f2:	4422      	add	r2, r4
 80157f4:	7891      	ldrb	r1, [r2, #2]
 80157f6:	085a      	lsrs	r2, r3, #1
 80157f8:	fba5 0202 	umull	r0, r2, r5, r2
 80157fc:	297e      	cmp	r1, #126	@ 0x7e
 80157fe:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015802:	fb0c 3312 	mls	r3, ip, r2, r3
 8015806:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801580a:	d030      	beq.n	801586e <uxr_read_framed_msg+0x51e>
 801580c:	f081 0120 	eor.w	r1, r1, #32
 8015810:	e65d      	b.n	80154ce <uxr_read_framed_msg+0x17e>
 8015812:	1c59      	adds	r1, r3, #1
 8015814:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015818:	084a      	lsrs	r2, r1, #1
 801581a:	fba5 e202 	umull	lr, r2, r5, r2
 801581e:	0892      	lsrs	r2, r2, #2
 8015820:	fb0c 1212 	mls	r2, ip, r2, r1
 8015824:	b2d1      	uxtb	r1, r2
 8015826:	4288      	cmp	r0, r1
 8015828:	f43f af12 	beq.w	8015650 <uxr_read_framed_msg+0x300>
 801582c:	3302      	adds	r3, #2
 801582e:	4422      	add	r2, r4
 8015830:	7891      	ldrb	r1, [r2, #2]
 8015832:	085a      	lsrs	r2, r3, #1
 8015834:	fba5 0202 	umull	r0, r2, r5, r2
 8015838:	297e      	cmp	r1, #126	@ 0x7e
 801583a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801583e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015842:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015846:	d002      	beq.n	801584e <uxr_read_framed_msg+0x4fe>
 8015848:	f081 0120 	eor.w	r1, r1, #32
 801584c:	e66a      	b.n	8015524 <uxr_read_framed_msg+0x1d4>
 801584e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	2302      	movs	r3, #2
 8015854:	9301      	str	r3, [sp, #4]
 8015856:	464a      	mov	r2, r9
 8015858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801585a:	4641      	mov	r1, r8
 801585c:	4620      	mov	r0, r4
 801585e:	f7ff fce3 	bl	8015228 <uxr_framing_read_transport>
 8015862:	2800      	cmp	r0, #0
 8015864:	f47f aef2 	bne.w	801564c <uxr_read_framed_msg+0x2fc>
 8015868:	2301      	movs	r3, #1
 801586a:	7023      	strb	r3, [r4, #0]
 801586c:	e581      	b.n	8015372 <uxr_read_framed_msg+0x22>
 801586e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015870:	9300      	str	r3, [sp, #0]
 8015872:	2301      	movs	r3, #1
 8015874:	e7ee      	b.n	8015854 <uxr_read_framed_msg+0x504>
 8015876:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015878:	9300      	str	r3, [sp, #0]
 801587a:	2303      	movs	r3, #3
 801587c:	e7ea      	b.n	8015854 <uxr_read_framed_msg+0x504>
 801587e:	bf00      	nop

08015880 <uxr_stream_id>:
 8015880:	2901      	cmp	r1, #1
 8015882:	4684      	mov	ip, r0
 8015884:	b500      	push	{lr}
 8015886:	b083      	sub	sp, #12
 8015888:	d01f      	beq.n	80158ca <uxr_stream_id+0x4a>
 801588a:	2902      	cmp	r1, #2
 801588c:	f04f 0e00 	mov.w	lr, #0
 8015890:	d020      	beq.n	80158d4 <uxr_stream_id+0x54>
 8015892:	2300      	movs	r3, #0
 8015894:	2000      	movs	r0, #0
 8015896:	f36e 0307 	bfi	r3, lr, #0, #8
 801589a:	f36c 230f 	bfi	r3, ip, #8, #8
 801589e:	f361 4317 	bfi	r3, r1, #16, #8
 80158a2:	f362 631f 	bfi	r3, r2, #24, #8
 80158a6:	fa5f fc83 	uxtb.w	ip, r3
 80158aa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80158ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80158b2:	0e1b      	lsrs	r3, r3, #24
 80158b4:	f36c 0007 	bfi	r0, ip, #0, #8
 80158b8:	f361 200f 	bfi	r0, r1, #8, #8
 80158bc:	f362 4017 	bfi	r0, r2, #16, #8
 80158c0:	f363 601f 	bfi	r0, r3, #24, #8
 80158c4:	b003      	add	sp, #12
 80158c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80158ca:	f100 0e01 	add.w	lr, r0, #1
 80158ce:	fa5f fe8e 	uxtb.w	lr, lr
 80158d2:	e7de      	b.n	8015892 <uxr_stream_id+0x12>
 80158d4:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80158d8:	e7db      	b.n	8015892 <uxr_stream_id+0x12>
 80158da:	bf00      	nop

080158dc <uxr_stream_id_from_raw>:
 80158dc:	b082      	sub	sp, #8
 80158de:	b130      	cbz	r0, 80158ee <uxr_stream_id_from_raw+0x12>
 80158e0:	0603      	lsls	r3, r0, #24
 80158e2:	d421      	bmi.n	8015928 <uxr_stream_id_from_raw+0x4c>
 80158e4:	1e42      	subs	r2, r0, #1
 80158e6:	f04f 0c01 	mov.w	ip, #1
 80158ea:	b2d2      	uxtb	r2, r2
 80158ec:	e001      	b.n	80158f2 <uxr_stream_id_from_raw+0x16>
 80158ee:	4684      	mov	ip, r0
 80158f0:	4602      	mov	r2, r0
 80158f2:	2300      	movs	r3, #0
 80158f4:	f360 0307 	bfi	r3, r0, #0, #8
 80158f8:	2000      	movs	r0, #0
 80158fa:	f362 230f 	bfi	r3, r2, #8, #8
 80158fe:	f36c 4317 	bfi	r3, ip, #16, #8
 8015902:	f361 631f 	bfi	r3, r1, #24, #8
 8015906:	fa5f fc83 	uxtb.w	ip, r3
 801590a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801590e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015912:	0e1b      	lsrs	r3, r3, #24
 8015914:	f36c 0007 	bfi	r0, ip, #0, #8
 8015918:	f361 200f 	bfi	r0, r1, #8, #8
 801591c:	f362 4017 	bfi	r0, r2, #16, #8
 8015920:	f363 601f 	bfi	r0, r3, #24, #8
 8015924:	b002      	add	sp, #8
 8015926:	4770      	bx	lr
 8015928:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801592c:	f04f 0c02 	mov.w	ip, #2
 8015930:	e7df      	b.n	80158f2 <uxr_stream_id_from_raw+0x16>
 8015932:	bf00      	nop

08015934 <uxr_init_stream_storage>:
 8015934:	2300      	movs	r3, #0
 8015936:	7403      	strb	r3, [r0, #16]
 8015938:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801593c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8015940:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015944:	4770      	bx	lr
 8015946:	bf00      	nop

08015948 <uxr_reset_stream_storage>:
 8015948:	b570      	push	{r4, r5, r6, lr}
 801594a:	7c03      	ldrb	r3, [r0, #16]
 801594c:	4604      	mov	r4, r0
 801594e:	b14b      	cbz	r3, 8015964 <uxr_reset_stream_storage+0x1c>
 8015950:	4606      	mov	r6, r0
 8015952:	2500      	movs	r5, #0
 8015954:	4630      	mov	r0, r6
 8015956:	3501      	adds	r5, #1
 8015958:	f005 fe2e 	bl	801b5b8 <uxr_reset_output_best_effort_stream>
 801595c:	7c23      	ldrb	r3, [r4, #16]
 801595e:	3610      	adds	r6, #16
 8015960:	42ab      	cmp	r3, r5
 8015962:	d8f7      	bhi.n	8015954 <uxr_reset_stream_storage+0xc>
 8015964:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015968:	b15b      	cbz	r3, 8015982 <uxr_reset_stream_storage+0x3a>
 801596a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801596e:	2500      	movs	r5, #0
 8015970:	4630      	mov	r0, r6
 8015972:	3501      	adds	r5, #1
 8015974:	f005 fc26 	bl	801b1c4 <uxr_reset_input_best_effort_stream>
 8015978:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801597c:	3602      	adds	r6, #2
 801597e:	42ab      	cmp	r3, r5
 8015980:	d8f6      	bhi.n	8015970 <uxr_reset_stream_storage+0x28>
 8015982:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015986:	b15b      	cbz	r3, 80159a0 <uxr_reset_stream_storage+0x58>
 8015988:	f104 0618 	add.w	r6, r4, #24
 801598c:	2500      	movs	r5, #0
 801598e:	4630      	mov	r0, r6
 8015990:	3501      	adds	r5, #1
 8015992:	f005 febd 	bl	801b710 <uxr_reset_output_reliable_stream>
 8015996:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801599a:	3628      	adds	r6, #40	@ 0x28
 801599c:	42ab      	cmp	r3, r5
 801599e:	d8f6      	bhi.n	801598e <uxr_reset_stream_storage+0x46>
 80159a0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80159a4:	b15b      	cbz	r3, 80159be <uxr_reset_stream_storage+0x76>
 80159a6:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80159aa:	2500      	movs	r5, #0
 80159ac:	4630      	mov	r0, r6
 80159ae:	3501      	adds	r5, #1
 80159b0:	f005 fc74 	bl	801b29c <uxr_reset_input_reliable_stream>
 80159b4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80159b8:	3618      	adds	r6, #24
 80159ba:	42ab      	cmp	r3, r5
 80159bc:	d8f6      	bhi.n	80159ac <uxr_reset_stream_storage+0x64>
 80159be:	bd70      	pop	{r4, r5, r6, pc}

080159c0 <uxr_add_output_best_effort_buffer>:
 80159c0:	b510      	push	{r4, lr}
 80159c2:	7c04      	ldrb	r4, [r0, #16]
 80159c4:	b082      	sub	sp, #8
 80159c6:	f104 0c01 	add.w	ip, r4, #1
 80159ca:	f880 c010 	strb.w	ip, [r0, #16]
 80159ce:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80159d2:	f005 fde7 	bl	801b5a4 <uxr_init_output_best_effort_stream>
 80159d6:	2201      	movs	r2, #1
 80159d8:	4620      	mov	r0, r4
 80159da:	4611      	mov	r1, r2
 80159dc:	b002      	add	sp, #8
 80159de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159e2:	f7ff bf4d 	b.w	8015880 <uxr_stream_id>
 80159e6:	bf00      	nop

080159e8 <uxr_add_output_reliable_buffer>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	b084      	sub	sp, #16
 80159ec:	4684      	mov	ip, r0
 80159ee:	2028      	movs	r0, #40	@ 0x28
 80159f0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80159f4:	9400      	str	r4, [sp, #0]
 80159f6:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80159fa:	fb00 c004 	mla	r0, r0, r4, ip
 80159fe:	f104 0e01 	add.w	lr, r4, #1
 8015a02:	3018      	adds	r0, #24
 8015a04:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8015a08:	f005 fe4c 	bl	801b6a4 <uxr_init_output_reliable_stream>
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	2102      	movs	r1, #2
 8015a10:	4620      	mov	r0, r4
 8015a12:	b004      	add	sp, #16
 8015a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a18:	f7ff bf32 	b.w	8015880 <uxr_stream_id>

08015a1c <uxr_add_input_best_effort_buffer>:
 8015a1c:	b510      	push	{r4, lr}
 8015a1e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8015a22:	b082      	sub	sp, #8
 8015a24:	1c62      	adds	r2, r4, #1
 8015a26:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8015a2a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8015a2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015a32:	f005 fbc3 	bl	801b1bc <uxr_init_input_best_effort_stream>
 8015a36:	2200      	movs	r2, #0
 8015a38:	2101      	movs	r1, #1
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	b002      	add	sp, #8
 8015a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a42:	f7ff bf1d 	b.w	8015880 <uxr_stream_id>
 8015a46:	bf00      	nop

08015a48 <uxr_add_input_reliable_buffer>:
 8015a48:	b510      	push	{r4, lr}
 8015a4a:	b084      	sub	sp, #16
 8015a4c:	4684      	mov	ip, r0
 8015a4e:	2018      	movs	r0, #24
 8015a50:	9c06      	ldr	r4, [sp, #24]
 8015a52:	9400      	str	r4, [sp, #0]
 8015a54:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8015a58:	fb00 c004 	mla	r0, r0, r4, ip
 8015a5c:	f104 0e01 	add.w	lr, r4, #1
 8015a60:	3048      	adds	r0, #72	@ 0x48
 8015a62:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8015a66:	f005 fbf3 	bl	801b250 <uxr_init_input_reliable_stream>
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	2102      	movs	r1, #2
 8015a6e:	4620      	mov	r0, r4
 8015a70:	b004      	add	sp, #16
 8015a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a76:	f7ff bf03 	b.w	8015880 <uxr_stream_id>
 8015a7a:	bf00      	nop

08015a7c <uxr_get_output_best_effort_stream>:
 8015a7c:	7c03      	ldrb	r3, [r0, #16]
 8015a7e:	428b      	cmp	r3, r1
 8015a80:	bf8c      	ite	hi
 8015a82:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8015a86:	2000      	movls	r0, #0
 8015a88:	4770      	bx	lr
 8015a8a:	bf00      	nop

08015a8c <uxr_get_output_reliable_stream>:
 8015a8c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015a90:	428b      	cmp	r3, r1
 8015a92:	d904      	bls.n	8015a9e <uxr_get_output_reliable_stream+0x12>
 8015a94:	2328      	movs	r3, #40	@ 0x28
 8015a96:	fb03 0001 	mla	r0, r3, r1, r0
 8015a9a:	3018      	adds	r0, #24
 8015a9c:	4770      	bx	lr
 8015a9e:	2000      	movs	r0, #0
 8015aa0:	4770      	bx	lr
 8015aa2:	bf00      	nop

08015aa4 <uxr_get_input_best_effort_stream>:
 8015aa4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8015aa8:	428b      	cmp	r3, r1
 8015aaa:	d903      	bls.n	8015ab4 <uxr_get_input_best_effort_stream+0x10>
 8015aac:	3121      	adds	r1, #33	@ 0x21
 8015aae:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8015ab2:	4770      	bx	lr
 8015ab4:	2000      	movs	r0, #0
 8015ab6:	4770      	bx	lr

08015ab8 <uxr_get_input_reliable_stream>:
 8015ab8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8015abc:	428b      	cmp	r3, r1
 8015abe:	d904      	bls.n	8015aca <uxr_get_input_reliable_stream+0x12>
 8015ac0:	2318      	movs	r3, #24
 8015ac2:	fb03 0001 	mla	r0, r3, r1, r0
 8015ac6:	3048      	adds	r0, #72	@ 0x48
 8015ac8:	4770      	bx	lr
 8015aca:	2000      	movs	r0, #0
 8015acc:	4770      	bx	lr
 8015ace:	bf00      	nop

08015ad0 <uxr_output_streams_confirmed>:
 8015ad0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015ad4:	b183      	cbz	r3, 8015af8 <uxr_output_streams_confirmed+0x28>
 8015ad6:	b570      	push	{r4, r5, r6, lr}
 8015ad8:	4606      	mov	r6, r0
 8015ada:	f100 0518 	add.w	r5, r0, #24
 8015ade:	2400      	movs	r4, #0
 8015ae0:	e000      	b.n	8015ae4 <uxr_output_streams_confirmed+0x14>
 8015ae2:	b140      	cbz	r0, 8015af6 <uxr_output_streams_confirmed+0x26>
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	3401      	adds	r4, #1
 8015ae8:	f006 f886 	bl	801bbf8 <uxr_is_output_up_to_date>
 8015aec:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8015af0:	3528      	adds	r5, #40	@ 0x28
 8015af2:	42a3      	cmp	r3, r4
 8015af4:	d8f5      	bhi.n	8015ae2 <uxr_output_streams_confirmed+0x12>
 8015af6:	bd70      	pop	{r4, r5, r6, pc}
 8015af8:	2001      	movs	r0, #1
 8015afa:	4770      	bx	lr

08015afc <uxr_buffer_submessage_header>:
 8015afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afe:	460e      	mov	r6, r1
 8015b00:	2104      	movs	r1, #4
 8015b02:	4604      	mov	r4, r0
 8015b04:	4615      	mov	r5, r2
 8015b06:	461f      	mov	r7, r3
 8015b08:	f7fd fd62 	bl	80135d0 <ucdr_align_to>
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	4631      	mov	r1, r6
 8015b10:	4620      	mov	r0, r4
 8015b12:	ea47 0203 	orr.w	r2, r7, r3
 8015b16:	7523      	strb	r3, [r4, #20]
 8015b18:	462b      	mov	r3, r5
 8015b1a:	f000 fa29 	bl	8015f70 <uxr_serialize_submessage_header>
 8015b1e:	4620      	mov	r0, r4
 8015b20:	f7fd fd6c 	bl	80135fc <ucdr_buffer_remaining>
 8015b24:	42a8      	cmp	r0, r5
 8015b26:	bf34      	ite	cc
 8015b28:	2000      	movcc	r0, #0
 8015b2a:	2001      	movcs	r0, #1
 8015b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b2e:	bf00      	nop

08015b30 <uxr_read_submessage_header>:
 8015b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b34:	4604      	mov	r4, r0
 8015b36:	460d      	mov	r5, r1
 8015b38:	2104      	movs	r1, #4
 8015b3a:	4616      	mov	r6, r2
 8015b3c:	4698      	mov	r8, r3
 8015b3e:	f7fd fd47 	bl	80135d0 <ucdr_align_to>
 8015b42:	4620      	mov	r0, r4
 8015b44:	f7fd fd5a 	bl	80135fc <ucdr_buffer_remaining>
 8015b48:	2803      	cmp	r0, #3
 8015b4a:	bf8c      	ite	hi
 8015b4c:	2701      	movhi	r7, #1
 8015b4e:	2700      	movls	r7, #0
 8015b50:	d802      	bhi.n	8015b58 <uxr_read_submessage_header+0x28>
 8015b52:	4638      	mov	r0, r7
 8015b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b58:	4633      	mov	r3, r6
 8015b5a:	4642      	mov	r2, r8
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	4629      	mov	r1, r5
 8015b60:	f000 fa1a 	bl	8015f98 <uxr_deserialize_submessage_header>
 8015b64:	f898 3000 	ldrb.w	r3, [r8]
 8015b68:	4638      	mov	r0, r7
 8015b6a:	f003 0201 	and.w	r2, r3, #1
 8015b6e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015b72:	f888 3000 	strb.w	r3, [r8]
 8015b76:	7522      	strb	r2, [r4, #20]
 8015b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b7c <uxr_submessage_padding>:
 8015b7c:	f010 0003 	ands.w	r0, r0, #3
 8015b80:	bf18      	it	ne
 8015b82:	f1c0 0004 	rsbne	r0, r0, #4
 8015b86:	4770      	bx	lr

08015b88 <uxr_millis>:
 8015b88:	b510      	push	{r4, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	2001      	movs	r0, #1
 8015b8e:	4669      	mov	r1, sp
 8015b90:	f7eb fffe 	bl	8001b90 <clock_gettime>
 8015b94:	4908      	ldr	r1, [pc, #32]	@ (8015bb8 <uxr_millis+0x30>)
 8015b96:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015b9a:	fba0 0301 	umull	r0, r3, r0, r1
 8015b9e:	1900      	adds	r0, r0, r4
 8015ba0:	fb01 3102 	mla	r1, r1, r2, r3
 8015ba4:	4a05      	ldr	r2, [pc, #20]	@ (8015bbc <uxr_millis+0x34>)
 8015ba6:	f04f 0300 	mov.w	r3, #0
 8015baa:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015bae:	f7ea fbff 	bl	80003b0 <__aeabi_ldivmod>
 8015bb2:	b004      	add	sp, #16
 8015bb4:	bd10      	pop	{r4, pc}
 8015bb6:	bf00      	nop
 8015bb8:	3b9aca00 	.word	0x3b9aca00
 8015bbc:	000f4240 	.word	0x000f4240

08015bc0 <uxr_nanos>:
 8015bc0:	b510      	push	{r4, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	2001      	movs	r0, #1
 8015bc6:	4669      	mov	r1, sp
 8015bc8:	f7eb ffe2 	bl	8001b90 <clock_gettime>
 8015bcc:	4a06      	ldr	r2, [pc, #24]	@ (8015be8 <uxr_nanos+0x28>)
 8015bce:	9800      	ldr	r0, [sp, #0]
 8015bd0:	9902      	ldr	r1, [sp, #8]
 8015bd2:	fba0 0302 	umull	r0, r3, r0, r2
 8015bd6:	9c01      	ldr	r4, [sp, #4]
 8015bd8:	1840      	adds	r0, r0, r1
 8015bda:	fb02 3304 	mla	r3, r2, r4, r3
 8015bde:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8015be2:	b004      	add	sp, #16
 8015be4:	bd10      	pop	{r4, pc}
 8015be6:	bf00      	nop
 8015be8:	3b9aca00 	.word	0x3b9aca00

08015bec <on_full_output_buffer_fragmented>:
 8015bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bf0:	460c      	mov	r4, r1
 8015bf2:	b08a      	sub	sp, #40	@ 0x28
 8015bf4:	4606      	mov	r6, r0
 8015bf6:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8015bfa:	f104 0008 	add.w	r0, r4, #8
 8015bfe:	f7ff ff45 	bl	8015a8c <uxr_get_output_reliable_stream>
 8015c02:	4605      	mov	r5, r0
 8015c04:	f006 f802 	bl	801bc0c <get_available_free_slots>
 8015c08:	b968      	cbnz	r0, 8015c26 <on_full_output_buffer_fragmented+0x3a>
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8015c10:	4798      	blx	r3
 8015c12:	b918      	cbnz	r0, 8015c1c <on_full_output_buffer_fragmented+0x30>
 8015c14:	2001      	movs	r0, #1
 8015c16:	b00a      	add	sp, #40	@ 0x28
 8015c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	f005 fff5 	bl	801bc0c <get_available_free_slots>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d0f6      	beq.n	8015c14 <on_full_output_buffer_fragmented+0x28>
 8015c26:	8929      	ldrh	r1, [r5, #8]
 8015c28:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8015c2c:	89eb      	ldrh	r3, [r5, #14]
 8015c2e:	7b28      	ldrb	r0, [r5, #12]
 8015c30:	686f      	ldr	r7, [r5, #4]
 8015c32:	1a12      	subs	r2, r2, r0
 8015c34:	fbb3 f0f1 	udiv	r0, r3, r1
 8015c38:	fbb7 f7f1 	udiv	r7, r7, r1
 8015c3c:	fb01 3110 	mls	r1, r1, r0, r3
 8015c40:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8015c44:	b289      	uxth	r1, r1
 8015c46:	fb07 f101 	mul.w	r1, r7, r1
 8015c4a:	3f04      	subs	r7, #4
 8015c4c:	443a      	add	r2, r7
 8015c4e:	3104      	adds	r1, #4
 8015c50:	fa1f f882 	uxth.w	r8, r2
 8015c54:	463a      	mov	r2, r7
 8015c56:	eba3 0308 	sub.w	r3, r3, r8
 8015c5a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015c5e:	682b      	ldr	r3, [r5, #0]
 8015c60:	4419      	add	r1, r3
 8015c62:	2300      	movs	r3, #0
 8015c64:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015c68:	9000      	str	r0, [sp, #0]
 8015c6a:	a802      	add	r0, sp, #8
 8015c6c:	f7fd fc82 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8015c70:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015c74:	f102 0308 	add.w	r3, r2, #8
 8015c78:	42bb      	cmp	r3, r7
 8015c7a:	d927      	bls.n	8015ccc <on_full_output_buffer_fragmented+0xe0>
 8015c7c:	4642      	mov	r2, r8
 8015c7e:	2300      	movs	r3, #0
 8015c80:	210d      	movs	r1, #13
 8015c82:	a802      	add	r0, sp, #8
 8015c84:	f7ff ff3a 	bl	8015afc <uxr_buffer_submessage_header>
 8015c88:	8929      	ldrh	r1, [r5, #8]
 8015c8a:	89eb      	ldrh	r3, [r5, #14]
 8015c8c:	686a      	ldr	r2, [r5, #4]
 8015c8e:	fbb3 f0f1 	udiv	r0, r3, r1
 8015c92:	fbb2 f2f1 	udiv	r2, r2, r1
 8015c96:	fb01 3310 	mls	r3, r1, r0, r3
 8015c9a:	b29b      	uxth	r3, r3
 8015c9c:	fb02 f303 	mul.w	r3, r2, r3
 8015ca0:	682a      	ldr	r2, [r5, #0]
 8015ca2:	50d7      	str	r7, [r2, r3]
 8015ca4:	2101      	movs	r1, #1
 8015ca6:	89e8      	ldrh	r0, [r5, #14]
 8015ca8:	f005 ffd2 	bl	801bc50 <uxr_seq_num_add>
 8015cac:	9904      	ldr	r1, [sp, #16]
 8015cae:	9a03      	ldr	r2, [sp, #12]
 8015cb0:	81e8      	strh	r0, [r5, #14]
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	1a52      	subs	r2, r2, r1
 8015cb6:	f7fd fc6f 	bl	8013598 <ucdr_init_buffer>
 8015cba:	4630      	mov	r0, r6
 8015cbc:	4622      	mov	r2, r4
 8015cbe:	490f      	ldr	r1, [pc, #60]	@ (8015cfc <on_full_output_buffer_fragmented+0x110>)
 8015cc0:	f7fd fc3e 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	b00a      	add	sp, #40	@ 0x28
 8015cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ccc:	b292      	uxth	r2, r2
 8015cce:	2302      	movs	r3, #2
 8015cd0:	210d      	movs	r1, #13
 8015cd2:	a802      	add	r0, sp, #8
 8015cd4:	f7ff ff12 	bl	8015afc <uxr_buffer_submessage_header>
 8015cd8:	8928      	ldrh	r0, [r5, #8]
 8015cda:	89eb      	ldrh	r3, [r5, #14]
 8015cdc:	6869      	ldr	r1, [r5, #4]
 8015cde:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015ce2:	fbb3 f7f0 	udiv	r7, r3, r0
 8015ce6:	fbb1 f1f0 	udiv	r1, r1, r0
 8015cea:	fb00 3317 	mls	r3, r0, r7, r3
 8015cee:	3208      	adds	r2, #8
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	fb01 f303 	mul.w	r3, r1, r3
 8015cf6:	6829      	ldr	r1, [r5, #0]
 8015cf8:	50ca      	str	r2, [r1, r3]
 8015cfa:	e7d3      	b.n	8015ca4 <on_full_output_buffer_fragmented+0xb8>
 8015cfc:	08015bed 	.word	0x08015bed

08015d00 <uxr_prepare_output_stream>:
 8015d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d02:	b087      	sub	sp, #28
 8015d04:	2707      	movs	r7, #7
 8015d06:	2500      	movs	r5, #0
 8015d08:	461c      	mov	r4, r3
 8015d0a:	4606      	mov	r6, r0
 8015d0c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015d10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015d12:	e9cd 7500 	strd	r7, r5, [sp]
 8015d16:	3204      	adds	r2, #4
 8015d18:	f7fe ffc8 	bl	8014cac <uxr_prepare_stream_to_write_submessage>
 8015d1c:	f080 0201 	eor.w	r2, r0, #1
 8015d20:	b2d2      	uxtb	r2, r2
 8015d22:	75a2      	strb	r2, [r4, #22]
 8015d24:	b112      	cbz	r2, 8015d2c <uxr_prepare_output_stream+0x2c>
 8015d26:	4628      	mov	r0, r5
 8015d28:	b007      	add	sp, #28
 8015d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d2c:	aa05      	add	r2, sp, #20
 8015d2e:	9902      	ldr	r1, [sp, #8]
 8015d30:	4630      	mov	r0, r6
 8015d32:	f7ff f8f7 	bl	8014f24 <uxr_init_base_object_request>
 8015d36:	a905      	add	r1, sp, #20
 8015d38:	4605      	mov	r5, r0
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	f000 ff9c 	bl	8016c78 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015d40:	69a6      	ldr	r6, [r4, #24]
 8015d42:	69e7      	ldr	r7, [r4, #28]
 8015d44:	4620      	mov	r0, r4
 8015d46:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015d4a:	1a52      	subs	r2, r2, r1
 8015d4c:	f7fd fc24 	bl	8013598 <ucdr_init_buffer>
 8015d50:	4620      	mov	r0, r4
 8015d52:	463a      	mov	r2, r7
 8015d54:	4631      	mov	r1, r6
 8015d56:	f7fd fbf3 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	b007      	add	sp, #28
 8015d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d60 <uxr_prepare_output_stream_fragmented>:
 8015d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d64:	b091      	sub	sp, #68	@ 0x44
 8015d66:	4605      	mov	r5, r0
 8015d68:	3008      	adds	r0, #8
 8015d6a:	461e      	mov	r6, r3
 8015d6c:	9105      	str	r1, [sp, #20]
 8015d6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015d72:	9204      	str	r2, [sp, #16]
 8015d74:	f7ff fe8a 	bl	8015a8c <uxr_get_output_reliable_stream>
 8015d78:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015d7c:	2b01      	cmp	r3, #1
 8015d7e:	f000 8093 	beq.w	8015ea8 <uxr_prepare_output_stream_fragmented+0x148>
 8015d82:	4604      	mov	r4, r0
 8015d84:	2800      	cmp	r0, #0
 8015d86:	f000 808f 	beq.w	8015ea8 <uxr_prepare_output_stream_fragmented+0x148>
 8015d8a:	f005 ff3f 	bl	801bc0c <get_available_free_slots>
 8015d8e:	2800      	cmp	r0, #0
 8015d90:	f000 8085 	beq.w	8015e9e <uxr_prepare_output_stream_fragmented+0x13e>
 8015d94:	8923      	ldrh	r3, [r4, #8]
 8015d96:	89e7      	ldrh	r7, [r4, #14]
 8015d98:	6862      	ldr	r2, [r4, #4]
 8015d9a:	fbb7 f9f3 	udiv	r9, r7, r3
 8015d9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8015da2:	fb03 7919 	mls	r9, r3, r9, r7
 8015da6:	6823      	ldr	r3, [r4, #0]
 8015da8:	f1a2 0b04 	sub.w	fp, r2, #4
 8015dac:	9203      	str	r2, [sp, #12]
 8015dae:	fa1f f989 	uxth.w	r9, r9
 8015db2:	fb02 f909 	mul.w	r9, r2, r9
 8015db6:	f109 0904 	add.w	r9, r9, #4
 8015dba:	4499      	add	r9, r3
 8015dbc:	7b23      	ldrb	r3, [r4, #12]
 8015dbe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015dc2:	4543      	cmp	r3, r8
 8015dc4:	d37c      	bcc.n	8015ec0 <uxr_prepare_output_stream_fragmented+0x160>
 8015dc6:	f1ab 0a04 	sub.w	sl, fp, #4
 8015dca:	465a      	mov	r2, fp
 8015dcc:	4649      	mov	r1, r9
 8015dce:	a808      	add	r0, sp, #32
 8015dd0:	ebaa 0a03 	sub.w	sl, sl, r3
 8015dd4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015dd6:	f8cd 8000 	str.w	r8, [sp]
 8015dda:	3308      	adds	r3, #8
 8015ddc:	fa1f fa8a 	uxth.w	sl, sl
 8015de0:	9302      	str	r3, [sp, #8]
 8015de2:	2300      	movs	r3, #0
 8015de4:	f7fd fbc6 	bl	8013574 <ucdr_init_buffer_origin_offset>
 8015de8:	9b02      	ldr	r3, [sp, #8]
 8015dea:	4652      	mov	r2, sl
 8015dec:	210d      	movs	r1, #13
 8015dee:	455b      	cmp	r3, fp
 8015df0:	bf34      	ite	cc
 8015df2:	2302      	movcc	r3, #2
 8015df4:	2300      	movcs	r3, #0
 8015df6:	a808      	add	r0, sp, #32
 8015df8:	f7ff fe80 	bl	8015afc <uxr_buffer_submessage_header>
 8015dfc:	8921      	ldrh	r1, [r4, #8]
 8015dfe:	6863      	ldr	r3, [r4, #4]
 8015e00:	4638      	mov	r0, r7
 8015e02:	fbb7 f2f1 	udiv	r2, r7, r1
 8015e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e0a:	fb01 7212 	mls	r2, r1, r2, r7
 8015e0e:	2101      	movs	r1, #1
 8015e10:	b292      	uxth	r2, r2
 8015e12:	fb02 f303 	mul.w	r3, r2, r3
 8015e16:	6822      	ldr	r2, [r4, #0]
 8015e18:	f842 b003 	str.w	fp, [r2, r3]
 8015e1c:	f005 ff18 	bl	801bc50 <uxr_seq_num_add>
 8015e20:	9b03      	ldr	r3, [sp, #12]
 8015e22:	f108 0104 	add.w	r1, r8, #4
 8015e26:	4607      	mov	r7, r0
 8015e28:	f1a3 0208 	sub.w	r2, r3, #8
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	4449      	add	r1, r9
 8015e30:	eba2 0208 	sub.w	r2, r2, r8
 8015e34:	f7fd fbb0 	bl	8013598 <ucdr_init_buffer>
 8015e38:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015e3a:	2107      	movs	r1, #7
 8015e3c:	81e7      	strh	r7, [r4, #14]
 8015e3e:	1d1a      	adds	r2, r3, #4
 8015e40:	2300      	movs	r3, #0
 8015e42:	4630      	mov	r0, r6
 8015e44:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015e48:	bf28      	it	cs
 8015e4a:	461a      	movcs	r2, r3
 8015e4c:	b292      	uxth	r2, r2
 8015e4e:	f7ff fe55 	bl	8015afc <uxr_buffer_submessage_header>
 8015e52:	aa07      	add	r2, sp, #28
 8015e54:	9904      	ldr	r1, [sp, #16]
 8015e56:	4628      	mov	r0, r5
 8015e58:	f7ff f864 	bl	8014f24 <uxr_init_base_object_request>
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	b320      	cbz	r0, 8015eaa <uxr_prepare_output_stream_fragmented+0x14a>
 8015e60:	a907      	add	r1, sp, #28
 8015e62:	4630      	mov	r0, r6
 8015e64:	f000 ff08 	bl	8016c78 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015e68:	4630      	mov	r0, r6
 8015e6a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015e6e:	1a52      	subs	r2, r2, r1
 8015e70:	f7fd fb92 	bl	8013598 <ucdr_init_buffer>
 8015e74:	9b05      	ldr	r3, [sp, #20]
 8015e76:	9a02      	ldr	r2, [sp, #8]
 8015e78:	4630      	mov	r0, r6
 8015e7a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015e7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015e80:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8015e84:	462a      	mov	r2, r5
 8015e86:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8015e8a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015e8c:	4918      	ldr	r1, [pc, #96]	@ (8015ef0 <uxr_prepare_output_stream_fragmented+0x190>)
 8015e8e:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015e92:	f7fd fb55 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 8015e96:	4620      	mov	r0, r4
 8015e98:	b011      	add	sp, #68	@ 0x44
 8015e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e9e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015ea0:	4628      	mov	r0, r5
 8015ea2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015ea4:	4798      	blx	r3
 8015ea6:	b920      	cbnz	r0, 8015eb2 <uxr_prepare_output_stream_fragmented+0x152>
 8015ea8:	2400      	movs	r4, #0
 8015eaa:	4620      	mov	r0, r4
 8015eac:	b011      	add	sp, #68	@ 0x44
 8015eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	f005 feaa 	bl	801bc0c <get_available_free_slots>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	f47f af6b 	bne.w	8015d94 <uxr_prepare_output_stream_fragmented+0x34>
 8015ebe:	e7f3      	b.n	8015ea8 <uxr_prepare_output_stream_fragmented+0x148>
 8015ec0:	4638      	mov	r0, r7
 8015ec2:	2101      	movs	r1, #1
 8015ec4:	f005 fec4 	bl	801bc50 <uxr_seq_num_add>
 8015ec8:	8922      	ldrh	r2, [r4, #8]
 8015eca:	6863      	ldr	r3, [r4, #4]
 8015ecc:	4607      	mov	r7, r0
 8015ece:	fbb3 f9f2 	udiv	r9, r3, r2
 8015ed2:	fbb0 f3f2 	udiv	r3, r0, r2
 8015ed6:	fb02 0313 	mls	r3, r2, r3, r0
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	fb03 f909 	mul.w	r9, r3, r9
 8015ee0:	6823      	ldr	r3, [r4, #0]
 8015ee2:	f109 0904 	add.w	r9, r9, #4
 8015ee6:	4499      	add	r9, r3
 8015ee8:	7b23      	ldrb	r3, [r4, #12]
 8015eea:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015eee:	e76a      	b.n	8015dc6 <uxr_prepare_output_stream_fragmented+0x66>
 8015ef0:	08015bed 	.word	0x08015bed

08015ef4 <uxr_serialize_message_header>:
 8015ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ef6:	4616      	mov	r6, r2
 8015ef8:	b083      	sub	sp, #12
 8015efa:	4604      	mov	r4, r0
 8015efc:	460d      	mov	r5, r1
 8015efe:	9301      	str	r3, [sp, #4]
 8015f00:	9f08      	ldr	r7, [sp, #32]
 8015f02:	f7fc f867 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8015f06:	4631      	mov	r1, r6
 8015f08:	4620      	mov	r0, r4
 8015f0a:	f7fc f863 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8015f0e:	9a01      	ldr	r2, [sp, #4]
 8015f10:	2101      	movs	r1, #1
 8015f12:	4620      	mov	r0, r4
 8015f14:	f7fc f90a 	bl	801212c <ucdr_serialize_endian_uint16_t>
 8015f18:	062b      	lsls	r3, r5, #24
 8015f1a:	d501      	bpl.n	8015f20 <uxr_serialize_message_header+0x2c>
 8015f1c:	b003      	add	sp, #12
 8015f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f20:	2204      	movs	r2, #4
 8015f22:	4639      	mov	r1, r7
 8015f24:	4620      	mov	r0, r4
 8015f26:	b003      	add	sp, #12
 8015f28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f2c:	f7fb beb0 	b.w	8011c90 <ucdr_serialize_array_uint8_t>

08015f30 <uxr_deserialize_message_header>:
 8015f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f32:	4616      	mov	r6, r2
 8015f34:	b083      	sub	sp, #12
 8015f36:	4604      	mov	r4, r0
 8015f38:	460d      	mov	r5, r1
 8015f3a:	9301      	str	r3, [sp, #4]
 8015f3c:	9f08      	ldr	r7, [sp, #32]
 8015f3e:	f7fc f85f 	bl	8012000 <ucdr_deserialize_uint8_t>
 8015f42:	4631      	mov	r1, r6
 8015f44:	4620      	mov	r0, r4
 8015f46:	f7fc f85b 	bl	8012000 <ucdr_deserialize_uint8_t>
 8015f4a:	9a01      	ldr	r2, [sp, #4]
 8015f4c:	2101      	movs	r1, #1
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f7fc f9e0 	bl	8012314 <ucdr_deserialize_endian_uint16_t>
 8015f54:	f995 3000 	ldrsb.w	r3, [r5]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	da01      	bge.n	8015f60 <uxr_deserialize_message_header+0x30>
 8015f5c:	b003      	add	sp, #12
 8015f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f60:	2204      	movs	r2, #4
 8015f62:	4639      	mov	r1, r7
 8015f64:	4620      	mov	r0, r4
 8015f66:	b003      	add	sp, #12
 8015f68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f6c:	f7fb bef4 	b.w	8011d58 <ucdr_deserialize_array_uint8_t>

08015f70 <uxr_serialize_submessage_header>:
 8015f70:	b530      	push	{r4, r5, lr}
 8015f72:	4615      	mov	r5, r2
 8015f74:	b083      	sub	sp, #12
 8015f76:	4604      	mov	r4, r0
 8015f78:	9301      	str	r3, [sp, #4]
 8015f7a:	f7fc f82b 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8015f7e:	4629      	mov	r1, r5
 8015f80:	4620      	mov	r0, r4
 8015f82:	f7fc f827 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8015f86:	9a01      	ldr	r2, [sp, #4]
 8015f88:	2101      	movs	r1, #1
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	b003      	add	sp, #12
 8015f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f92:	f7fc b8cb 	b.w	801212c <ucdr_serialize_endian_uint16_t>
 8015f96:	bf00      	nop

08015f98 <uxr_deserialize_submessage_header>:
 8015f98:	b530      	push	{r4, r5, lr}
 8015f9a:	4615      	mov	r5, r2
 8015f9c:	b083      	sub	sp, #12
 8015f9e:	4604      	mov	r4, r0
 8015fa0:	9301      	str	r3, [sp, #4]
 8015fa2:	f7fc f82d 	bl	8012000 <ucdr_deserialize_uint8_t>
 8015fa6:	4629      	mov	r1, r5
 8015fa8:	4620      	mov	r0, r4
 8015faa:	f7fc f829 	bl	8012000 <ucdr_deserialize_uint8_t>
 8015fae:	9a01      	ldr	r2, [sp, #4]
 8015fb0:	2101      	movs	r1, #1
 8015fb2:	4620      	mov	r0, r4
 8015fb4:	b003      	add	sp, #12
 8015fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fba:	f7fc b9ab 	b.w	8012314 <ucdr_deserialize_endian_uint16_t>
 8015fbe:	bf00      	nop

08015fc0 <uxr_serialize_CLIENT_Representation>:
 8015fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	2204      	movs	r2, #4
 8015fc6:	460e      	mov	r6, r1
 8015fc8:	4605      	mov	r5, r0
 8015fca:	f7fb fe61 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8015fce:	4607      	mov	r7, r0
 8015fd0:	2202      	movs	r2, #2
 8015fd2:	1d31      	adds	r1, r6, #4
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	f7fb fe5b 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8015fda:	4038      	ands	r0, r7
 8015fdc:	2202      	movs	r2, #2
 8015fde:	1db1      	adds	r1, r6, #6
 8015fe0:	b2c7      	uxtb	r7, r0
 8015fe2:	4628      	mov	r0, r5
 8015fe4:	f7fb fe54 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8015fe8:	2204      	movs	r2, #4
 8015fea:	4007      	ands	r7, r0
 8015fec:	f106 0108 	add.w	r1, r6, #8
 8015ff0:	4628      	mov	r0, r5
 8015ff2:	f7fb fe4d 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8015ff6:	4007      	ands	r7, r0
 8015ff8:	7b31      	ldrb	r1, [r6, #12]
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	f7fb ffea 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016000:	7b71      	ldrb	r1, [r6, #13]
 8016002:	4007      	ands	r7, r0
 8016004:	4628      	mov	r0, r5
 8016006:	f7fb ffb7 	bl	8011f78 <ucdr_serialize_bool>
 801600a:	7b73      	ldrb	r3, [r6, #13]
 801600c:	ea07 0800 	and.w	r8, r7, r0
 8016010:	b93b      	cbnz	r3, 8016022 <uxr_serialize_CLIENT_Representation+0x62>
 8016012:	8bb1      	ldrh	r1, [r6, #28]
 8016014:	4628      	mov	r0, r5
 8016016:	f7fc f809 	bl	801202c <ucdr_serialize_uint16_t>
 801601a:	ea08 0000 	and.w	r0, r8, r0
 801601e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016022:	6931      	ldr	r1, [r6, #16]
 8016024:	4628      	mov	r0, r5
 8016026:	f7fc f9eb 	bl	8012400 <ucdr_serialize_uint32_t>
 801602a:	6933      	ldr	r3, [r6, #16]
 801602c:	b1e3      	cbz	r3, 8016068 <uxr_serialize_CLIENT_Representation+0xa8>
 801602e:	b1c0      	cbz	r0, 8016062 <uxr_serialize_CLIENT_Representation+0xa2>
 8016030:	4637      	mov	r7, r6
 8016032:	f04f 0900 	mov.w	r9, #0
 8016036:	e000      	b.n	801603a <uxr_serialize_CLIENT_Representation+0x7a>
 8016038:	b19c      	cbz	r4, 8016062 <uxr_serialize_CLIENT_Representation+0xa2>
 801603a:	6979      	ldr	r1, [r7, #20]
 801603c:	4628      	mov	r0, r5
 801603e:	f005 f8a5 	bl	801b18c <ucdr_serialize_string>
 8016042:	69b9      	ldr	r1, [r7, #24]
 8016044:	4604      	mov	r4, r0
 8016046:	4628      	mov	r0, r5
 8016048:	f005 f8a0 	bl	801b18c <ucdr_serialize_string>
 801604c:	f109 0901 	add.w	r9, r9, #1
 8016050:	6933      	ldr	r3, [r6, #16]
 8016052:	4004      	ands	r4, r0
 8016054:	3708      	adds	r7, #8
 8016056:	4599      	cmp	r9, r3
 8016058:	b2e4      	uxtb	r4, r4
 801605a:	d3ed      	bcc.n	8016038 <uxr_serialize_CLIENT_Representation+0x78>
 801605c:	ea08 0804 	and.w	r8, r8, r4
 8016060:	e7d7      	b.n	8016012 <uxr_serialize_CLIENT_Representation+0x52>
 8016062:	f04f 0800 	mov.w	r8, #0
 8016066:	e7d4      	b.n	8016012 <uxr_serialize_CLIENT_Representation+0x52>
 8016068:	ea08 0800 	and.w	r8, r8, r0
 801606c:	e7d1      	b.n	8016012 <uxr_serialize_CLIENT_Representation+0x52>
 801606e:	bf00      	nop

08016070 <uxr_deserialize_CLIENT_Representation>:
 8016070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016074:	2204      	movs	r2, #4
 8016076:	460c      	mov	r4, r1
 8016078:	4605      	mov	r5, r0
 801607a:	f7fb fe6d 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801607e:	4607      	mov	r7, r0
 8016080:	2202      	movs	r2, #2
 8016082:	1d21      	adds	r1, r4, #4
 8016084:	4628      	mov	r0, r5
 8016086:	f7fb fe67 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801608a:	4038      	ands	r0, r7
 801608c:	2202      	movs	r2, #2
 801608e:	1da1      	adds	r1, r4, #6
 8016090:	b2c6      	uxtb	r6, r0
 8016092:	4628      	mov	r0, r5
 8016094:	f7fb fe60 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016098:	2204      	movs	r2, #4
 801609a:	4006      	ands	r6, r0
 801609c:	f104 0108 	add.w	r1, r4, #8
 80160a0:	4628      	mov	r0, r5
 80160a2:	f7fb fe59 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 80160a6:	4006      	ands	r6, r0
 80160a8:	f104 010c 	add.w	r1, r4, #12
 80160ac:	4628      	mov	r0, r5
 80160ae:	f7fb ffa7 	bl	8012000 <ucdr_deserialize_uint8_t>
 80160b2:	f104 010d 	add.w	r1, r4, #13
 80160b6:	ea06 0700 	and.w	r7, r6, r0
 80160ba:	4628      	mov	r0, r5
 80160bc:	f7fb ff72 	bl	8011fa4 <ucdr_deserialize_bool>
 80160c0:	7b63      	ldrb	r3, [r4, #13]
 80160c2:	4007      	ands	r7, r0
 80160c4:	b93b      	cbnz	r3, 80160d6 <uxr_deserialize_CLIENT_Representation+0x66>
 80160c6:	f104 011c 	add.w	r1, r4, #28
 80160ca:	4628      	mov	r0, r5
 80160cc:	f7fc f8ae 	bl	801222c <ucdr_deserialize_uint16_t>
 80160d0:	4038      	ands	r0, r7
 80160d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160d6:	f104 0110 	add.w	r1, r4, #16
 80160da:	4628      	mov	r0, r5
 80160dc:	f7fc fac0 	bl	8012660 <ucdr_deserialize_uint32_t>
 80160e0:	6923      	ldr	r3, [r4, #16]
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d903      	bls.n	80160ee <uxr_deserialize_CLIENT_Representation+0x7e>
 80160e6:	2301      	movs	r3, #1
 80160e8:	2700      	movs	r7, #0
 80160ea:	75ab      	strb	r3, [r5, #22]
 80160ec:	e7eb      	b.n	80160c6 <uxr_deserialize_CLIENT_Representation+0x56>
 80160ee:	b30b      	cbz	r3, 8016134 <uxr_deserialize_CLIENT_Representation+0xc4>
 80160f0:	b1f0      	cbz	r0, 8016130 <uxr_deserialize_CLIENT_Representation+0xc0>
 80160f2:	46a0      	mov	r8, r4
 80160f4:	f04f 0900 	mov.w	r9, #0
 80160f8:	e000      	b.n	80160fc <uxr_deserialize_CLIENT_Representation+0x8c>
 80160fa:	b1ce      	cbz	r6, 8016130 <uxr_deserialize_CLIENT_Representation+0xc0>
 80160fc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016100:	f108 0808 	add.w	r8, r8, #8
 8016104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016108:	4628      	mov	r0, r5
 801610a:	f005 f84f 	bl	801b1ac <ucdr_deserialize_string>
 801610e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016112:	4606      	mov	r6, r0
 8016114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016118:	4628      	mov	r0, r5
 801611a:	f109 0901 	add.w	r9, r9, #1
 801611e:	f005 f845 	bl	801b1ac <ucdr_deserialize_string>
 8016122:	6923      	ldr	r3, [r4, #16]
 8016124:	4006      	ands	r6, r0
 8016126:	4599      	cmp	r9, r3
 8016128:	b2f6      	uxtb	r6, r6
 801612a:	d3e6      	bcc.n	80160fa <uxr_deserialize_CLIENT_Representation+0x8a>
 801612c:	4037      	ands	r7, r6
 801612e:	e7ca      	b.n	80160c6 <uxr_deserialize_CLIENT_Representation+0x56>
 8016130:	2700      	movs	r7, #0
 8016132:	e7c8      	b.n	80160c6 <uxr_deserialize_CLIENT_Representation+0x56>
 8016134:	4007      	ands	r7, r0
 8016136:	e7c6      	b.n	80160c6 <uxr_deserialize_CLIENT_Representation+0x56>

08016138 <uxr_serialize_AGENT_Representation>:
 8016138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801613c:	2204      	movs	r2, #4
 801613e:	460f      	mov	r7, r1
 8016140:	4605      	mov	r5, r0
 8016142:	f7fb fda5 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016146:	4604      	mov	r4, r0
 8016148:	2202      	movs	r2, #2
 801614a:	1d39      	adds	r1, r7, #4
 801614c:	4628      	mov	r0, r5
 801614e:	f7fb fd9f 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016152:	4020      	ands	r0, r4
 8016154:	2202      	movs	r2, #2
 8016156:	1db9      	adds	r1, r7, #6
 8016158:	b2c4      	uxtb	r4, r0
 801615a:	4628      	mov	r0, r5
 801615c:	f7fb fd98 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016160:	7a39      	ldrb	r1, [r7, #8]
 8016162:	4004      	ands	r4, r0
 8016164:	4628      	mov	r0, r5
 8016166:	f7fb ff07 	bl	8011f78 <ucdr_serialize_bool>
 801616a:	7a3b      	ldrb	r3, [r7, #8]
 801616c:	ea00 0804 	and.w	r8, r0, r4
 8016170:	b913      	cbnz	r3, 8016178 <uxr_serialize_AGENT_Representation+0x40>
 8016172:	4640      	mov	r0, r8
 8016174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016178:	68f9      	ldr	r1, [r7, #12]
 801617a:	4628      	mov	r0, r5
 801617c:	f7fc f940 	bl	8012400 <ucdr_serialize_uint32_t>
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	b303      	cbz	r3, 80161c6 <uxr_serialize_AGENT_Representation+0x8e>
 8016184:	b1d0      	cbz	r0, 80161bc <uxr_serialize_AGENT_Representation+0x84>
 8016186:	463e      	mov	r6, r7
 8016188:	f04f 0900 	mov.w	r9, #0
 801618c:	e000      	b.n	8016190 <uxr_serialize_AGENT_Representation+0x58>
 801618e:	b1ac      	cbz	r4, 80161bc <uxr_serialize_AGENT_Representation+0x84>
 8016190:	6931      	ldr	r1, [r6, #16]
 8016192:	4628      	mov	r0, r5
 8016194:	f004 fffa 	bl	801b18c <ucdr_serialize_string>
 8016198:	6971      	ldr	r1, [r6, #20]
 801619a:	4604      	mov	r4, r0
 801619c:	4628      	mov	r0, r5
 801619e:	f004 fff5 	bl	801b18c <ucdr_serialize_string>
 80161a2:	f109 0901 	add.w	r9, r9, #1
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	4004      	ands	r4, r0
 80161aa:	3608      	adds	r6, #8
 80161ac:	4599      	cmp	r9, r3
 80161ae:	b2e4      	uxtb	r4, r4
 80161b0:	d3ed      	bcc.n	801618e <uxr_serialize_AGENT_Representation+0x56>
 80161b2:	ea08 0804 	and.w	r8, r8, r4
 80161b6:	4640      	mov	r0, r8
 80161b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161bc:	f04f 0800 	mov.w	r8, #0
 80161c0:	4640      	mov	r0, r8
 80161c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161c6:	ea08 0800 	and.w	r8, r8, r0
 80161ca:	e7d2      	b.n	8016172 <uxr_serialize_AGENT_Representation+0x3a>

080161cc <uxr_serialize_DATAWRITER_Representation>:
 80161cc:	b570      	push	{r4, r5, r6, lr}
 80161ce:	460d      	mov	r5, r1
 80161d0:	7809      	ldrb	r1, [r1, #0]
 80161d2:	4606      	mov	r6, r0
 80161d4:	f7fb fefe 	bl	8011fd4 <ucdr_serialize_uint8_t>
 80161d8:	4604      	mov	r4, r0
 80161da:	b130      	cbz	r0, 80161ea <uxr_serialize_DATAWRITER_Representation+0x1e>
 80161dc:	782b      	ldrb	r3, [r5, #0]
 80161de:	2b02      	cmp	r3, #2
 80161e0:	d00c      	beq.n	80161fc <uxr_serialize_DATAWRITER_Representation+0x30>
 80161e2:	2b03      	cmp	r3, #3
 80161e4:	d010      	beq.n	8016208 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d008      	beq.n	80161fc <uxr_serialize_DATAWRITER_Representation+0x30>
 80161ea:	2202      	movs	r2, #2
 80161ec:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80161f0:	4630      	mov	r0, r6
 80161f2:	f7fb fd4d 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 80161f6:	4020      	ands	r0, r4
 80161f8:	b2c0      	uxtb	r0, r0
 80161fa:	bd70      	pop	{r4, r5, r6, pc}
 80161fc:	6869      	ldr	r1, [r5, #4]
 80161fe:	4630      	mov	r0, r6
 8016200:	f004 ffc4 	bl	801b18c <ucdr_serialize_string>
 8016204:	4604      	mov	r4, r0
 8016206:	e7f0      	b.n	80161ea <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016208:	4629      	mov	r1, r5
 801620a:	4630      	mov	r0, r6
 801620c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016210:	3104      	adds	r1, #4
 8016212:	f7fd fa61 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 8016216:	4604      	mov	r4, r0
 8016218:	e7e7      	b.n	80161ea <uxr_serialize_DATAWRITER_Representation+0x1e>
 801621a:	bf00      	nop

0801621c <uxr_serialize_ObjectVariant.part.0>:
 801621c:	b570      	push	{r4, r5, r6, lr}
 801621e:	780b      	ldrb	r3, [r1, #0]
 8016220:	460c      	mov	r4, r1
 8016222:	4605      	mov	r5, r0
 8016224:	3b01      	subs	r3, #1
 8016226:	2b0d      	cmp	r3, #13
 8016228:	d854      	bhi.n	80162d4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801622a:	e8df f003 	tbb	[pc, r3]
 801622e:	0730      	.short	0x0730
 8016230:	07071b1b 	.word	0x07071b1b
 8016234:	0c530707 	.word	0x0c530707
 8016238:	494e0c0c 	.word	0x494e0c0c
 801623c:	3104      	adds	r1, #4
 801623e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016242:	f7ff bfc3 	b.w	80161cc <uxr_serialize_DATAWRITER_Representation>
 8016246:	7909      	ldrb	r1, [r1, #4]
 8016248:	f7fb fec4 	bl	8011fd4 <ucdr_serialize_uint8_t>
 801624c:	b1e8      	cbz	r0, 801628a <uxr_serialize_ObjectVariant.part.0+0x6e>
 801624e:	7923      	ldrb	r3, [r4, #4]
 8016250:	2b01      	cmp	r3, #1
 8016252:	d001      	beq.n	8016258 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016254:	2b02      	cmp	r3, #2
 8016256:	d13d      	bne.n	80162d4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016258:	68a1      	ldr	r1, [r4, #8]
 801625a:	4628      	mov	r0, r5
 801625c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016260:	f004 bf94 	b.w	801b18c <ucdr_serialize_string>
 8016264:	7909      	ldrb	r1, [r1, #4]
 8016266:	f7fb feb5 	bl	8011fd4 <ucdr_serialize_uint8_t>
 801626a:	4606      	mov	r6, r0
 801626c:	b120      	cbz	r0, 8016278 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801626e:	7923      	ldrb	r3, [r4, #4]
 8016270:	2b02      	cmp	r3, #2
 8016272:	d039      	beq.n	80162e8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016274:	2b03      	cmp	r3, #3
 8016276:	d02f      	beq.n	80162d8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8016278:	2202      	movs	r2, #2
 801627a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801627e:	4628      	mov	r0, r5
 8016280:	f7fb fd06 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016284:	4030      	ands	r0, r6
 8016286:	b2c0      	uxtb	r0, r0
 8016288:	bd70      	pop	{r4, r5, r6, pc}
 801628a:	2000      	movs	r0, #0
 801628c:	bd70      	pop	{r4, r5, r6, pc}
 801628e:	7909      	ldrb	r1, [r1, #4]
 8016290:	f7fb fea0 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016294:	4606      	mov	r6, r0
 8016296:	b158      	cbz	r0, 80162b0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8016298:	7923      	ldrb	r3, [r4, #4]
 801629a:	2b02      	cmp	r3, #2
 801629c:	d003      	beq.n	80162a6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801629e:	2b03      	cmp	r3, #3
 80162a0:	d028      	beq.n	80162f4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80162a2:	2b01      	cmp	r3, #1
 80162a4:	d104      	bne.n	80162b0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80162a6:	68a1      	ldr	r1, [r4, #8]
 80162a8:	4628      	mov	r0, r5
 80162aa:	f004 ff6f 	bl	801b18c <ucdr_serialize_string>
 80162ae:	4606      	mov	r6, r0
 80162b0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80162b4:	4628      	mov	r0, r5
 80162b6:	f7fc fbc9 	bl	8012a4c <ucdr_serialize_int16_t>
 80162ba:	4030      	ands	r0, r6
 80162bc:	b2c0      	uxtb	r0, r0
 80162be:	bd70      	pop	{r4, r5, r6, pc}
 80162c0:	3104      	adds	r1, #4
 80162c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162c6:	f7ff be7b 	b.w	8015fc0 <uxr_serialize_CLIENT_Representation>
 80162ca:	3104      	adds	r1, #4
 80162cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162d0:	f7ff bf32 	b.w	8016138 <uxr_serialize_AGENT_Representation>
 80162d4:	2001      	movs	r0, #1
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	68a2      	ldr	r2, [r4, #8]
 80162da:	f104 010c 	add.w	r1, r4, #12
 80162de:	4628      	mov	r0, r5
 80162e0:	f7fd f9fa 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 80162e4:	4606      	mov	r6, r0
 80162e6:	e7c7      	b.n	8016278 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80162e8:	68a1      	ldr	r1, [r4, #8]
 80162ea:	4628      	mov	r0, r5
 80162ec:	f004 ff4e 	bl	801b18c <ucdr_serialize_string>
 80162f0:	4606      	mov	r6, r0
 80162f2:	e7c1      	b.n	8016278 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80162f4:	68a2      	ldr	r2, [r4, #8]
 80162f6:	f104 010c 	add.w	r1, r4, #12
 80162fa:	4628      	mov	r0, r5
 80162fc:	f7fd f9ec 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 8016300:	4606      	mov	r6, r0
 8016302:	e7d5      	b.n	80162b0 <uxr_serialize_ObjectVariant.part.0+0x94>

08016304 <uxr_deserialize_DATAWRITER_Representation>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	4606      	mov	r6, r0
 8016308:	460d      	mov	r5, r1
 801630a:	f7fb fe79 	bl	8012000 <ucdr_deserialize_uint8_t>
 801630e:	4604      	mov	r4, r0
 8016310:	b130      	cbz	r0, 8016320 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016312:	782b      	ldrb	r3, [r5, #0]
 8016314:	2b02      	cmp	r3, #2
 8016316:	d00c      	beq.n	8016332 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016318:	2b03      	cmp	r3, #3
 801631a:	d012      	beq.n	8016342 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801631c:	2b01      	cmp	r3, #1
 801631e:	d008      	beq.n	8016332 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016320:	2202      	movs	r2, #2
 8016322:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8016326:	4630      	mov	r0, r6
 8016328:	f7fb fd16 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801632c:	4020      	ands	r0, r4
 801632e:	b2c0      	uxtb	r0, r0
 8016330:	bd70      	pop	{r4, r5, r6, pc}
 8016332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016336:	6869      	ldr	r1, [r5, #4]
 8016338:	4630      	mov	r0, r6
 801633a:	f004 ff37 	bl	801b1ac <ucdr_deserialize_string>
 801633e:	4604      	mov	r4, r0
 8016340:	e7ee      	b.n	8016320 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016342:	1d2b      	adds	r3, r5, #4
 8016344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016348:	f105 0108 	add.w	r1, r5, #8
 801634c:	4630      	mov	r0, r6
 801634e:	f7fd f9d5 	bl	80136fc <ucdr_deserialize_sequence_uint8_t>
 8016352:	4604      	mov	r4, r0
 8016354:	e7e4      	b.n	8016320 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016356:	bf00      	nop

08016358 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016358:	b570      	push	{r4, r5, r6, lr}
 801635a:	460d      	mov	r5, r1
 801635c:	7809      	ldrb	r1, [r1, #0]
 801635e:	4606      	mov	r6, r0
 8016360:	f7fb fe0a 	bl	8011f78 <ucdr_serialize_bool>
 8016364:	782b      	ldrb	r3, [r5, #0]
 8016366:	4604      	mov	r4, r0
 8016368:	b94b      	cbnz	r3, 801637e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801636a:	7a29      	ldrb	r1, [r5, #8]
 801636c:	4630      	mov	r0, r6
 801636e:	f7fb fe03 	bl	8011f78 <ucdr_serialize_bool>
 8016372:	7a2b      	ldrb	r3, [r5, #8]
 8016374:	4004      	ands	r4, r0
 8016376:	b2e4      	uxtb	r4, r4
 8016378:	b943      	cbnz	r3, 801638c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801637a:	4620      	mov	r0, r4
 801637c:	bd70      	pop	{r4, r5, r6, pc}
 801637e:	6869      	ldr	r1, [r5, #4]
 8016380:	4630      	mov	r0, r6
 8016382:	f004 ff03 	bl	801b18c <ucdr_serialize_string>
 8016386:	4004      	ands	r4, r0
 8016388:	b2e4      	uxtb	r4, r4
 801638a:	e7ee      	b.n	801636a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 801638c:	68e9      	ldr	r1, [r5, #12]
 801638e:	4630      	mov	r0, r6
 8016390:	f004 fefc 	bl	801b18c <ucdr_serialize_string>
 8016394:	4004      	ands	r4, r0
 8016396:	4620      	mov	r0, r4
 8016398:	bd70      	pop	{r4, r5, r6, pc}
 801639a:	bf00      	nop

0801639c <uxr_serialize_OBJK_Topic_Binary>:
 801639c:	b570      	push	{r4, r5, r6, lr}
 801639e:	460d      	mov	r5, r1
 80163a0:	4606      	mov	r6, r0
 80163a2:	6809      	ldr	r1, [r1, #0]
 80163a4:	f004 fef2 	bl	801b18c <ucdr_serialize_string>
 80163a8:	4604      	mov	r4, r0
 80163aa:	7929      	ldrb	r1, [r5, #4]
 80163ac:	4630      	mov	r0, r6
 80163ae:	f7fb fde3 	bl	8011f78 <ucdr_serialize_bool>
 80163b2:	792b      	ldrb	r3, [r5, #4]
 80163b4:	4004      	ands	r4, r0
 80163b6:	b2e4      	uxtb	r4, r4
 80163b8:	b943      	cbnz	r3, 80163cc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80163ba:	7b29      	ldrb	r1, [r5, #12]
 80163bc:	4630      	mov	r0, r6
 80163be:	f7fb fddb 	bl	8011f78 <ucdr_serialize_bool>
 80163c2:	7b2b      	ldrb	r3, [r5, #12]
 80163c4:	4004      	ands	r4, r0
 80163c6:	b93b      	cbnz	r3, 80163d8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80163c8:	4620      	mov	r0, r4
 80163ca:	bd70      	pop	{r4, r5, r6, pc}
 80163cc:	68a9      	ldr	r1, [r5, #8]
 80163ce:	4630      	mov	r0, r6
 80163d0:	f004 fedc 	bl	801b18c <ucdr_serialize_string>
 80163d4:	4004      	ands	r4, r0
 80163d6:	e7f0      	b.n	80163ba <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80163d8:	6929      	ldr	r1, [r5, #16]
 80163da:	4630      	mov	r0, r6
 80163dc:	f004 fed6 	bl	801b18c <ucdr_serialize_string>
 80163e0:	4004      	ands	r4, r0
 80163e2:	b2e4      	uxtb	r4, r4
 80163e4:	4620      	mov	r0, r4
 80163e6:	bd70      	pop	{r4, r5, r6, pc}

080163e8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80163e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ec:	460c      	mov	r4, r1
 80163ee:	7809      	ldrb	r1, [r1, #0]
 80163f0:	4606      	mov	r6, r0
 80163f2:	f7fb fdc1 	bl	8011f78 <ucdr_serialize_bool>
 80163f6:	7823      	ldrb	r3, [r4, #0]
 80163f8:	4605      	mov	r5, r0
 80163fa:	b96b      	cbnz	r3, 8016418 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80163fc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8016400:	4630      	mov	r0, r6
 8016402:	f7fb fdb9 	bl	8011f78 <ucdr_serialize_bool>
 8016406:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801640a:	4005      	ands	r5, r0
 801640c:	b2ed      	uxtb	r5, r5
 801640e:	2b00      	cmp	r3, #0
 8016410:	d169      	bne.n	80164e6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8016412:	4628      	mov	r0, r5
 8016414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016418:	6861      	ldr	r1, [r4, #4]
 801641a:	4630      	mov	r0, r6
 801641c:	f7fb fff0 	bl	8012400 <ucdr_serialize_uint32_t>
 8016420:	6863      	ldr	r3, [r4, #4]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d06b      	beq.n	80164fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8016426:	2800      	cmp	r0, #0
 8016428:	d067      	beq.n	80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801642a:	68a1      	ldr	r1, [r4, #8]
 801642c:	4630      	mov	r0, r6
 801642e:	f004 fead 	bl	801b18c <ucdr_serialize_string>
 8016432:	6863      	ldr	r3, [r4, #4]
 8016434:	2b01      	cmp	r3, #1
 8016436:	d953      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016438:	2800      	cmp	r0, #0
 801643a:	d05e      	beq.n	80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801643c:	68e1      	ldr	r1, [r4, #12]
 801643e:	4630      	mov	r0, r6
 8016440:	f004 fea4 	bl	801b18c <ucdr_serialize_string>
 8016444:	6863      	ldr	r3, [r4, #4]
 8016446:	2b02      	cmp	r3, #2
 8016448:	d94a      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801644a:	2800      	cmp	r0, #0
 801644c:	d055      	beq.n	80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801644e:	6921      	ldr	r1, [r4, #16]
 8016450:	4630      	mov	r0, r6
 8016452:	f004 fe9b 	bl	801b18c <ucdr_serialize_string>
 8016456:	6863      	ldr	r3, [r4, #4]
 8016458:	2b03      	cmp	r3, #3
 801645a:	d941      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801645c:	2800      	cmp	r0, #0
 801645e:	d04c      	beq.n	80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016460:	6961      	ldr	r1, [r4, #20]
 8016462:	4630      	mov	r0, r6
 8016464:	f004 fe92 	bl	801b18c <ucdr_serialize_string>
 8016468:	6863      	ldr	r3, [r4, #4]
 801646a:	2b04      	cmp	r3, #4
 801646c:	d938      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801646e:	2800      	cmp	r0, #0
 8016470:	d043      	beq.n	80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016472:	69a1      	ldr	r1, [r4, #24]
 8016474:	4630      	mov	r0, r6
 8016476:	f004 fe89 	bl	801b18c <ucdr_serialize_string>
 801647a:	6863      	ldr	r3, [r4, #4]
 801647c:	2b05      	cmp	r3, #5
 801647e:	d92f      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016480:	2800      	cmp	r0, #0
 8016482:	d03a      	beq.n	80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016484:	69e1      	ldr	r1, [r4, #28]
 8016486:	4630      	mov	r0, r6
 8016488:	f004 fe80 	bl	801b18c <ucdr_serialize_string>
 801648c:	6863      	ldr	r3, [r4, #4]
 801648e:	2b06      	cmp	r3, #6
 8016490:	d926      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016492:	b390      	cbz	r0, 80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016494:	6a21      	ldr	r1, [r4, #32]
 8016496:	4630      	mov	r0, r6
 8016498:	f004 fe78 	bl	801b18c <ucdr_serialize_string>
 801649c:	6863      	ldr	r3, [r4, #4]
 801649e:	2b07      	cmp	r3, #7
 80164a0:	d91e      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164a2:	b350      	cbz	r0, 80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80164a6:	4630      	mov	r0, r6
 80164a8:	f004 fe70 	bl	801b18c <ucdr_serialize_string>
 80164ac:	6863      	ldr	r3, [r4, #4]
 80164ae:	2b08      	cmp	r3, #8
 80164b0:	d916      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164b2:	b310      	cbz	r0, 80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164b4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80164b6:	4630      	mov	r0, r6
 80164b8:	f004 fe68 	bl	801b18c <ucdr_serialize_string>
 80164bc:	6863      	ldr	r3, [r4, #4]
 80164be:	2b09      	cmp	r3, #9
 80164c0:	d90e      	bls.n	80164e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164c2:	b1d0      	cbz	r0, 80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164c4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80164c8:	2709      	movs	r7, #9
 80164ca:	e000      	b.n	80164ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80164cc:	b1a8      	cbz	r0, 80164fa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164ce:	f858 1b04 	ldr.w	r1, [r8], #4
 80164d2:	4630      	mov	r0, r6
 80164d4:	f004 fe5a 	bl	801b18c <ucdr_serialize_string>
 80164d8:	3701      	adds	r7, #1
 80164da:	6862      	ldr	r2, [r4, #4]
 80164dc:	4297      	cmp	r7, r2
 80164de:	d3f5      	bcc.n	80164cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80164e0:	4005      	ands	r5, r0
 80164e2:	b2ed      	uxtb	r5, r5
 80164e4:	e78a      	b.n	80163fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80164e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80164e8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80164ec:	4630      	mov	r0, r6
 80164ee:	f7fd f8f3 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 80164f2:	4005      	ands	r5, r0
 80164f4:	4628      	mov	r0, r5
 80164f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164fa:	2500      	movs	r5, #0
 80164fc:	e77e      	b.n	80163fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80164fe:	4028      	ands	r0, r5
 8016500:	b2c5      	uxtb	r5, r0
 8016502:	e77b      	b.n	80163fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08016504 <uxr_serialize_OBJK_Publisher_Binary>:
 8016504:	b570      	push	{r4, r5, r6, lr}
 8016506:	460d      	mov	r5, r1
 8016508:	7809      	ldrb	r1, [r1, #0]
 801650a:	4606      	mov	r6, r0
 801650c:	f7fb fd34 	bl	8011f78 <ucdr_serialize_bool>
 8016510:	782b      	ldrb	r3, [r5, #0]
 8016512:	4604      	mov	r4, r0
 8016514:	b94b      	cbnz	r3, 801652a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8016516:	7a29      	ldrb	r1, [r5, #8]
 8016518:	4630      	mov	r0, r6
 801651a:	f7fb fd2d 	bl	8011f78 <ucdr_serialize_bool>
 801651e:	7a2b      	ldrb	r3, [r5, #8]
 8016520:	4004      	ands	r4, r0
 8016522:	b2e4      	uxtb	r4, r4
 8016524:	b943      	cbnz	r3, 8016538 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8016526:	4620      	mov	r0, r4
 8016528:	bd70      	pop	{r4, r5, r6, pc}
 801652a:	6869      	ldr	r1, [r5, #4]
 801652c:	4630      	mov	r0, r6
 801652e:	f004 fe2d 	bl	801b18c <ucdr_serialize_string>
 8016532:	4004      	ands	r4, r0
 8016534:	b2e4      	uxtb	r4, r4
 8016536:	e7ee      	b.n	8016516 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8016538:	f105 010c 	add.w	r1, r5, #12
 801653c:	4630      	mov	r0, r6
 801653e:	f7ff ff53 	bl	80163e8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8016542:	4004      	ands	r4, r0
 8016544:	4620      	mov	r0, r4
 8016546:	bd70      	pop	{r4, r5, r6, pc}

08016548 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8016548:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801654c:	4688      	mov	r8, r1
 801654e:	4681      	mov	r9, r0
 8016550:	8809      	ldrh	r1, [r1, #0]
 8016552:	f7fb fd6b 	bl	801202c <ucdr_serialize_uint16_t>
 8016556:	4606      	mov	r6, r0
 8016558:	f898 1002 	ldrb.w	r1, [r8, #2]
 801655c:	4648      	mov	r0, r9
 801655e:	f7fb fd0b 	bl	8011f78 <ucdr_serialize_bool>
 8016562:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016566:	4006      	ands	r6, r0
 8016568:	b2f5      	uxtb	r5, r6
 801656a:	b9eb      	cbnz	r3, 80165a8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801656c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016570:	4648      	mov	r0, r9
 8016572:	f7fb fd01 	bl	8011f78 <ucdr_serialize_bool>
 8016576:	f898 3006 	ldrb.w	r3, [r8, #6]
 801657a:	4005      	ands	r5, r0
 801657c:	bb7b      	cbnz	r3, 80165de <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801657e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8016582:	4648      	mov	r0, r9
 8016584:	f7fb fcf8 	bl	8011f78 <ucdr_serialize_bool>
 8016588:	f898 300c 	ldrb.w	r3, [r8, #12]
 801658c:	4005      	ands	r5, r0
 801658e:	b9f3      	cbnz	r3, 80165ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8016590:	f898 1014 	ldrb.w	r1, [r8, #20]
 8016594:	4648      	mov	r0, r9
 8016596:	f7fb fcef 	bl	8011f78 <ucdr_serialize_bool>
 801659a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801659e:	4005      	ands	r5, r0
 80165a0:	b94b      	cbnz	r3, 80165b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80165a2:	4628      	mov	r0, r5
 80165a4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80165a8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80165ac:	4648      	mov	r0, r9
 80165ae:	f7fb fd3d 	bl	801202c <ucdr_serialize_uint16_t>
 80165b2:	4005      	ands	r5, r0
 80165b4:	e7da      	b.n	801656c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80165b6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80165ba:	f108 011c 	add.w	r1, r8, #28
 80165be:	4648      	mov	r0, r9
 80165c0:	f7fd f88a 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 80165c4:	4028      	ands	r0, r5
 80165c6:	b2c5      	uxtb	r5, r0
 80165c8:	4628      	mov	r0, r5
 80165ca:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80165ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80165d2:	4648      	mov	r0, r9
 80165d4:	f7fb ff14 	bl	8012400 <ucdr_serialize_uint32_t>
 80165d8:	4028      	ands	r0, r5
 80165da:	b2c5      	uxtb	r5, r0
 80165dc:	e7d8      	b.n	8016590 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80165de:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80165e2:	4648      	mov	r0, r9
 80165e4:	f7fb ff0c 	bl	8012400 <ucdr_serialize_uint32_t>
 80165e8:	4028      	ands	r0, r5
 80165ea:	b2c5      	uxtb	r5, r0
 80165ec:	e7c7      	b.n	801657e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80165ee:	bf00      	nop

080165f0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80165f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165f2:	2202      	movs	r2, #2
 80165f4:	460d      	mov	r5, r1
 80165f6:	4606      	mov	r6, r0
 80165f8:	f7fb fb4a 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 80165fc:	4604      	mov	r4, r0
 80165fe:	78a9      	ldrb	r1, [r5, #2]
 8016600:	4630      	mov	r0, r6
 8016602:	f7fb fcb9 	bl	8011f78 <ucdr_serialize_bool>
 8016606:	78ab      	ldrb	r3, [r5, #2]
 8016608:	4004      	ands	r4, r0
 801660a:	b2e4      	uxtb	r4, r4
 801660c:	b90b      	cbnz	r3, 8016612 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801660e:	4620      	mov	r0, r4
 8016610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016612:	f105 0108 	add.w	r1, r5, #8
 8016616:	4630      	mov	r0, r6
 8016618:	f7ff ff96 	bl	8016548 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801661c:	4607      	mov	r7, r0
 801661e:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8016622:	4630      	mov	r0, r6
 8016624:	f7fb fca8 	bl	8011f78 <ucdr_serialize_bool>
 8016628:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801662c:	4038      	ands	r0, r7
 801662e:	b2c7      	uxtb	r7, r0
 8016630:	b913      	cbnz	r3, 8016638 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8016632:	403c      	ands	r4, r7
 8016634:	4620      	mov	r0, r4
 8016636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016638:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801663c:	4630      	mov	r0, r6
 801663e:	f7fc f935 	bl	80128ac <ucdr_serialize_uint64_t>
 8016642:	4007      	ands	r7, r0
 8016644:	e7f5      	b.n	8016632 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8016646:	bf00      	nop

08016648 <uxr_deserialize_ObjectVariant>:
 8016648:	b570      	push	{r4, r5, r6, lr}
 801664a:	4605      	mov	r5, r0
 801664c:	460e      	mov	r6, r1
 801664e:	f7fb fcd7 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016652:	b168      	cbz	r0, 8016670 <uxr_deserialize_ObjectVariant+0x28>
 8016654:	7833      	ldrb	r3, [r6, #0]
 8016656:	4604      	mov	r4, r0
 8016658:	3b01      	subs	r3, #1
 801665a:	2b0d      	cmp	r3, #13
 801665c:	d809      	bhi.n	8016672 <uxr_deserialize_ObjectVariant+0x2a>
 801665e:	e8df f003 	tbb	[pc, r3]
 8016662:	0a41      	.short	0x0a41
 8016664:	0a0a2323 	.word	0x0a0a2323
 8016668:	10080a0a 	.word	0x10080a0a
 801666c:	565c1010 	.word	0x565c1010
 8016670:	2400      	movs	r4, #0
 8016672:	4620      	mov	r0, r4
 8016674:	bd70      	pop	{r4, r5, r6, pc}
 8016676:	1d31      	adds	r1, r6, #4
 8016678:	4628      	mov	r0, r5
 801667a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801667e:	f7ff be41 	b.w	8016304 <uxr_deserialize_DATAWRITER_Representation>
 8016682:	1d31      	adds	r1, r6, #4
 8016684:	4628      	mov	r0, r5
 8016686:	f7fb fcbb 	bl	8012000 <ucdr_deserialize_uint8_t>
 801668a:	2800      	cmp	r0, #0
 801668c:	d0f0      	beq.n	8016670 <uxr_deserialize_ObjectVariant+0x28>
 801668e:	7933      	ldrb	r3, [r6, #4]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d001      	beq.n	8016698 <uxr_deserialize_ObjectVariant+0x50>
 8016694:	2b02      	cmp	r3, #2
 8016696:	d1ec      	bne.n	8016672 <uxr_deserialize_ObjectVariant+0x2a>
 8016698:	68b1      	ldr	r1, [r6, #8]
 801669a:	4628      	mov	r0, r5
 801669c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166a4:	f004 bd82 	b.w	801b1ac <ucdr_deserialize_string>
 80166a8:	1d31      	adds	r1, r6, #4
 80166aa:	4628      	mov	r0, r5
 80166ac:	f7fb fca8 	bl	8012000 <ucdr_deserialize_uint8_t>
 80166b0:	4604      	mov	r4, r0
 80166b2:	b170      	cbz	r0, 80166d2 <uxr_deserialize_ObjectVariant+0x8a>
 80166b4:	7933      	ldrb	r3, [r6, #4]
 80166b6:	2b02      	cmp	r3, #2
 80166b8:	d04c      	beq.n	8016754 <uxr_deserialize_ObjectVariant+0x10c>
 80166ba:	2b03      	cmp	r3, #3
 80166bc:	d109      	bne.n	80166d2 <uxr_deserialize_ObjectVariant+0x8a>
 80166be:	f106 0308 	add.w	r3, r6, #8
 80166c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166c6:	f106 010c 	add.w	r1, r6, #12
 80166ca:	4628      	mov	r0, r5
 80166cc:	f7fd f816 	bl	80136fc <ucdr_deserialize_sequence_uint8_t>
 80166d0:	4604      	mov	r4, r0
 80166d2:	2202      	movs	r2, #2
 80166d4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80166d8:	4628      	mov	r0, r5
 80166da:	f7fb fb3d 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 80166de:	4020      	ands	r0, r4
 80166e0:	b2c4      	uxtb	r4, r0
 80166e2:	e7c6      	b.n	8016672 <uxr_deserialize_ObjectVariant+0x2a>
 80166e4:	1d31      	adds	r1, r6, #4
 80166e6:	4628      	mov	r0, r5
 80166e8:	f7fb fc8a 	bl	8012000 <ucdr_deserialize_uint8_t>
 80166ec:	4604      	mov	r4, r0
 80166ee:	b130      	cbz	r0, 80166fe <uxr_deserialize_ObjectVariant+0xb6>
 80166f0:	7933      	ldrb	r3, [r6, #4]
 80166f2:	2b02      	cmp	r3, #2
 80166f4:	d036      	beq.n	8016764 <uxr_deserialize_ObjectVariant+0x11c>
 80166f6:	2b03      	cmp	r3, #3
 80166f8:	d03c      	beq.n	8016774 <uxr_deserialize_ObjectVariant+0x12c>
 80166fa:	2b01      	cmp	r3, #1
 80166fc:	d032      	beq.n	8016764 <uxr_deserialize_ObjectVariant+0x11c>
 80166fe:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8016702:	4628      	mov	r0, r5
 8016704:	f7fc fa22 	bl	8012b4c <ucdr_deserialize_int16_t>
 8016708:	4020      	ands	r0, r4
 801670a:	b2c4      	uxtb	r4, r0
 801670c:	e7b1      	b.n	8016672 <uxr_deserialize_ObjectVariant+0x2a>
 801670e:	1d31      	adds	r1, r6, #4
 8016710:	4628      	mov	r0, r5
 8016712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016716:	f7ff bcab 	b.w	8016070 <uxr_deserialize_CLIENT_Representation>
 801671a:	2204      	movs	r2, #4
 801671c:	4628      	mov	r0, r5
 801671e:	18b1      	adds	r1, r6, r2
 8016720:	f7fb fb1a 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016724:	4604      	mov	r4, r0
 8016726:	2202      	movs	r2, #2
 8016728:	f106 0108 	add.w	r1, r6, #8
 801672c:	4628      	mov	r0, r5
 801672e:	f7fb fb13 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016732:	4004      	ands	r4, r0
 8016734:	2202      	movs	r2, #2
 8016736:	f106 010a 	add.w	r1, r6, #10
 801673a:	4628      	mov	r0, r5
 801673c:	b2e4      	uxtb	r4, r4
 801673e:	f7fb fb0b 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016742:	4603      	mov	r3, r0
 8016744:	f106 010c 	add.w	r1, r6, #12
 8016748:	4628      	mov	r0, r5
 801674a:	401c      	ands	r4, r3
 801674c:	f7fb fc2a 	bl	8011fa4 <ucdr_deserialize_bool>
 8016750:	4004      	ands	r4, r0
 8016752:	e78e      	b.n	8016672 <uxr_deserialize_ObjectVariant+0x2a>
 8016754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016758:	68b1      	ldr	r1, [r6, #8]
 801675a:	4628      	mov	r0, r5
 801675c:	f004 fd26 	bl	801b1ac <ucdr_deserialize_string>
 8016760:	4604      	mov	r4, r0
 8016762:	e7b6      	b.n	80166d2 <uxr_deserialize_ObjectVariant+0x8a>
 8016764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016768:	68b1      	ldr	r1, [r6, #8]
 801676a:	4628      	mov	r0, r5
 801676c:	f004 fd1e 	bl	801b1ac <ucdr_deserialize_string>
 8016770:	4604      	mov	r4, r0
 8016772:	e7c4      	b.n	80166fe <uxr_deserialize_ObjectVariant+0xb6>
 8016774:	f106 0308 	add.w	r3, r6, #8
 8016778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801677c:	f106 010c 	add.w	r1, r6, #12
 8016780:	4628      	mov	r0, r5
 8016782:	f7fc ffbb 	bl	80136fc <ucdr_deserialize_sequence_uint8_t>
 8016786:	4604      	mov	r4, r0
 8016788:	e7b9      	b.n	80166fe <uxr_deserialize_ObjectVariant+0xb6>
 801678a:	bf00      	nop

0801678c <uxr_deserialize_BaseObjectRequest>:
 801678c:	b570      	push	{r4, r5, r6, lr}
 801678e:	2202      	movs	r2, #2
 8016790:	4605      	mov	r5, r0
 8016792:	460e      	mov	r6, r1
 8016794:	f7fb fae0 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016798:	2202      	movs	r2, #2
 801679a:	4604      	mov	r4, r0
 801679c:	4628      	mov	r0, r5
 801679e:	18b1      	adds	r1, r6, r2
 80167a0:	f7fb fada 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 80167a4:	4020      	ands	r0, r4
 80167a6:	b2c0      	uxtb	r0, r0
 80167a8:	bd70      	pop	{r4, r5, r6, pc}
 80167aa:	bf00      	nop

080167ac <uxr_serialize_ActivityInfoVariant>:
 80167ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167b0:	460e      	mov	r6, r1
 80167b2:	7809      	ldrb	r1, [r1, #0]
 80167b4:	4680      	mov	r8, r0
 80167b6:	f7fb fc0d 	bl	8011fd4 <ucdr_serialize_uint8_t>
 80167ba:	4607      	mov	r7, r0
 80167bc:	b138      	cbz	r0, 80167ce <uxr_serialize_ActivityInfoVariant+0x22>
 80167be:	7833      	ldrb	r3, [r6, #0]
 80167c0:	2b06      	cmp	r3, #6
 80167c2:	f000 8081 	beq.w	80168c8 <uxr_serialize_ActivityInfoVariant+0x11c>
 80167c6:	2b0d      	cmp	r3, #13
 80167c8:	d014      	beq.n	80167f4 <uxr_serialize_ActivityInfoVariant+0x48>
 80167ca:	2b05      	cmp	r3, #5
 80167cc:	d002      	beq.n	80167d4 <uxr_serialize_ActivityInfoVariant+0x28>
 80167ce:	4638      	mov	r0, r7
 80167d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167d4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80167d8:	4640      	mov	r0, r8
 80167da:	f7fc f937 	bl	8012a4c <ucdr_serialize_int16_t>
 80167de:	4607      	mov	r7, r0
 80167e0:	4640      	mov	r0, r8
 80167e2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80167e6:	f7fc f861 	bl	80128ac <ucdr_serialize_uint64_t>
 80167ea:	4038      	ands	r0, r7
 80167ec:	b2c7      	uxtb	r7, r0
 80167ee:	4638      	mov	r0, r7
 80167f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167f4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80167f8:	4640      	mov	r0, r8
 80167fa:	f7fc f927 	bl	8012a4c <ucdr_serialize_int16_t>
 80167fe:	68f1      	ldr	r1, [r6, #12]
 8016800:	4607      	mov	r7, r0
 8016802:	4640      	mov	r0, r8
 8016804:	f7fb fdfc 	bl	8012400 <ucdr_serialize_uint32_t>
 8016808:	68f3      	ldr	r3, [r6, #12]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d0ed      	beq.n	80167ea <uxr_serialize_ActivityInfoVariant+0x3e>
 801680e:	b318      	cbz	r0, 8016858 <uxr_serialize_ActivityInfoVariant+0xac>
 8016810:	f106 090c 	add.w	r9, r6, #12
 8016814:	2400      	movs	r4, #0
 8016816:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801681a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801681e:	7c29      	ldrb	r1, [r5, #16]
 8016820:	4640      	mov	r0, r8
 8016822:	f7fb fbd7 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016826:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801682a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801682e:	2800      	cmp	r0, #0
 8016830:	d051      	beq.n	80168d6 <uxr_serialize_ActivityInfoVariant+0x12a>
 8016832:	7c2b      	ldrb	r3, [r5, #16]
 8016834:	00c9      	lsls	r1, r1, #3
 8016836:	2b03      	cmp	r3, #3
 8016838:	d854      	bhi.n	80168e4 <uxr_serialize_ActivityInfoVariant+0x138>
 801683a:	e8df f003 	tbb	[pc, r3]
 801683e:	2133      	.short	0x2133
 8016840:	020f      	.short	0x020f
 8016842:	4449      	add	r1, r9
 8016844:	4640      	mov	r0, r8
 8016846:	6889      	ldr	r1, [r1, #8]
 8016848:	f004 fca0 	bl	801b18c <ucdr_serialize_string>
 801684c:	3401      	adds	r4, #1
 801684e:	68f2      	ldr	r2, [r6, #12]
 8016850:	4294      	cmp	r4, r2
 8016852:	d244      	bcs.n	80168de <uxr_serialize_ActivityInfoVariant+0x132>
 8016854:	2800      	cmp	r0, #0
 8016856:	d1de      	bne.n	8016816 <uxr_serialize_ActivityInfoVariant+0x6a>
 8016858:	2700      	movs	r7, #0
 801685a:	e7b8      	b.n	80167ce <uxr_serialize_ActivityInfoVariant+0x22>
 801685c:	3108      	adds	r1, #8
 801685e:	44a2      	add	sl, r4
 8016860:	2210      	movs	r2, #16
 8016862:	4640      	mov	r0, r8
 8016864:	4449      	add	r1, r9
 8016866:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801686a:	f7fb fa11 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 801686e:	4605      	mov	r5, r0
 8016870:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8016874:	4640      	mov	r0, r8
 8016876:	f7fb fdc3 	bl	8012400 <ucdr_serialize_uint32_t>
 801687a:	4028      	ands	r0, r5
 801687c:	b2c0      	uxtb	r0, r0
 801687e:	e7e5      	b.n	801684c <uxr_serialize_ActivityInfoVariant+0xa0>
 8016880:	3108      	adds	r1, #8
 8016882:	44a2      	add	sl, r4
 8016884:	2204      	movs	r2, #4
 8016886:	4640      	mov	r0, r8
 8016888:	4449      	add	r1, r9
 801688a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801688e:	f7fb f9ff 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016892:	4605      	mov	r5, r0
 8016894:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8016898:	4640      	mov	r0, r8
 801689a:	f7fb fbc7 	bl	801202c <ucdr_serialize_uint16_t>
 801689e:	4028      	ands	r0, r5
 80168a0:	b2c0      	uxtb	r0, r0
 80168a2:	e7d3      	b.n	801684c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168a4:	3108      	adds	r1, #8
 80168a6:	44a2      	add	sl, r4
 80168a8:	2202      	movs	r2, #2
 80168aa:	4640      	mov	r0, r8
 80168ac:	4449      	add	r1, r9
 80168ae:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80168b2:	f7fb f9ed 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 80168b6:	4605      	mov	r5, r0
 80168b8:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80168bc:	4640      	mov	r0, r8
 80168be:	f7fb fb89 	bl	8011fd4 <ucdr_serialize_uint8_t>
 80168c2:	4028      	ands	r0, r5
 80168c4:	b2c0      	uxtb	r0, r0
 80168c6:	e7c1      	b.n	801684c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168c8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80168cc:	4640      	mov	r0, r8
 80168ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168d2:	f7fc b8bb 	b.w	8012a4c <ucdr_serialize_int16_t>
 80168d6:	3401      	adds	r4, #1
 80168d8:	68f2      	ldr	r2, [r6, #12]
 80168da:	42a2      	cmp	r2, r4
 80168dc:	d8bc      	bhi.n	8016858 <uxr_serialize_ActivityInfoVariant+0xac>
 80168de:	4007      	ands	r7, r0
 80168e0:	b2ff      	uxtb	r7, r7
 80168e2:	e774      	b.n	80167ce <uxr_serialize_ActivityInfoVariant+0x22>
 80168e4:	3401      	adds	r4, #1
 80168e6:	68f3      	ldr	r3, [r6, #12]
 80168e8:	3518      	adds	r5, #24
 80168ea:	429c      	cmp	r4, r3
 80168ec:	d397      	bcc.n	801681e <uxr_serialize_ActivityInfoVariant+0x72>
 80168ee:	e76e      	b.n	80167ce <uxr_serialize_ActivityInfoVariant+0x22>

080168f0 <uxr_deserialize_BaseObjectReply>:
 80168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f4:	2202      	movs	r2, #2
 80168f6:	4606      	mov	r6, r0
 80168f8:	460f      	mov	r7, r1
 80168fa:	f7fb fa2d 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 80168fe:	2202      	movs	r2, #2
 8016900:	4605      	mov	r5, r0
 8016902:	4630      	mov	r0, r6
 8016904:	18b9      	adds	r1, r7, r2
 8016906:	f7fb fa27 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801690a:	4680      	mov	r8, r0
 801690c:	1d39      	adds	r1, r7, #4
 801690e:	4630      	mov	r0, r6
 8016910:	f7fb fb76 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016914:	ea05 0508 	and.w	r5, r5, r8
 8016918:	4604      	mov	r4, r0
 801691a:	1d79      	adds	r1, r7, #5
 801691c:	4630      	mov	r0, r6
 801691e:	402c      	ands	r4, r5
 8016920:	f7fb fb6e 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016924:	4020      	ands	r0, r4
 8016926:	b2c0      	uxtb	r0, r0
 8016928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801692c <uxr_serialize_ReadSpecification>:
 801692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801692e:	460e      	mov	r6, r1
 8016930:	4607      	mov	r7, r0
 8016932:	7809      	ldrb	r1, [r1, #0]
 8016934:	f7fb fb4e 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016938:	4604      	mov	r4, r0
 801693a:	7871      	ldrb	r1, [r6, #1]
 801693c:	4638      	mov	r0, r7
 801693e:	f7fb fb49 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016942:	4004      	ands	r4, r0
 8016944:	78b1      	ldrb	r1, [r6, #2]
 8016946:	4638      	mov	r0, r7
 8016948:	f7fb fb16 	bl	8011f78 <ucdr_serialize_bool>
 801694c:	78b3      	ldrb	r3, [r6, #2]
 801694e:	b2e4      	uxtb	r4, r4
 8016950:	4004      	ands	r4, r0
 8016952:	b943      	cbnz	r3, 8016966 <uxr_serialize_ReadSpecification+0x3a>
 8016954:	7a31      	ldrb	r1, [r6, #8]
 8016956:	4638      	mov	r0, r7
 8016958:	f7fb fb0e 	bl	8011f78 <ucdr_serialize_bool>
 801695c:	7a33      	ldrb	r3, [r6, #8]
 801695e:	4004      	ands	r4, r0
 8016960:	b93b      	cbnz	r3, 8016972 <uxr_serialize_ReadSpecification+0x46>
 8016962:	4620      	mov	r0, r4
 8016964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016966:	6871      	ldr	r1, [r6, #4]
 8016968:	4638      	mov	r0, r7
 801696a:	f004 fc0f 	bl	801b18c <ucdr_serialize_string>
 801696e:	4004      	ands	r4, r0
 8016970:	e7f0      	b.n	8016954 <uxr_serialize_ReadSpecification+0x28>
 8016972:	8971      	ldrh	r1, [r6, #10]
 8016974:	4638      	mov	r0, r7
 8016976:	f7fb fb59 	bl	801202c <ucdr_serialize_uint16_t>
 801697a:	4605      	mov	r5, r0
 801697c:	89b1      	ldrh	r1, [r6, #12]
 801697e:	4638      	mov	r0, r7
 8016980:	f7fb fb54 	bl	801202c <ucdr_serialize_uint16_t>
 8016984:	4005      	ands	r5, r0
 8016986:	89f1      	ldrh	r1, [r6, #14]
 8016988:	4638      	mov	r0, r7
 801698a:	b2ed      	uxtb	r5, r5
 801698c:	f7fb fb4e 	bl	801202c <ucdr_serialize_uint16_t>
 8016990:	8a31      	ldrh	r1, [r6, #16]
 8016992:	4025      	ands	r5, r4
 8016994:	4604      	mov	r4, r0
 8016996:	4638      	mov	r0, r7
 8016998:	4025      	ands	r5, r4
 801699a:	f7fb fb47 	bl	801202c <ucdr_serialize_uint16_t>
 801699e:	ea00 0405 	and.w	r4, r0, r5
 80169a2:	4620      	mov	r0, r4
 80169a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169a6:	bf00      	nop

080169a8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80169a8:	f7ff bb0a 	b.w	8015fc0 <uxr_serialize_CLIENT_Representation>

080169ac <uxr_serialize_CREATE_Payload>:
 80169ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ae:	2202      	movs	r2, #2
 80169b0:	4607      	mov	r7, r0
 80169b2:	460e      	mov	r6, r1
 80169b4:	f7fb f96c 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 80169b8:	2202      	movs	r2, #2
 80169ba:	4605      	mov	r5, r0
 80169bc:	4638      	mov	r0, r7
 80169be:	18b1      	adds	r1, r6, r2
 80169c0:	f7fb f966 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 80169c4:	7931      	ldrb	r1, [r6, #4]
 80169c6:	4604      	mov	r4, r0
 80169c8:	4638      	mov	r0, r7
 80169ca:	f7fb fb03 	bl	8011fd4 <ucdr_serialize_uint8_t>
 80169ce:	b170      	cbz	r0, 80169ee <uxr_serialize_CREATE_Payload+0x42>
 80169d0:	7933      	ldrb	r3, [r6, #4]
 80169d2:	402c      	ands	r4, r5
 80169d4:	3b01      	subs	r3, #1
 80169d6:	b2e4      	uxtb	r4, r4
 80169d8:	2b0d      	cmp	r3, #13
 80169da:	d809      	bhi.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 80169dc:	e8df f003 	tbb	[pc, r3]
 80169e0:	23230a4c 	.word	0x23230a4c
 80169e4:	0a0a0a0a 	.word	0x0a0a0a0a
 80169e8:	12121208 	.word	0x12121208
 80169ec:	3e45      	.short	0x3e45
 80169ee:	2400      	movs	r4, #0
 80169f0:	4620      	mov	r0, r4
 80169f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169f4:	f106 0108 	add.w	r1, r6, #8
 80169f8:	4638      	mov	r0, r7
 80169fa:	f7ff fbe7 	bl	80161cc <uxr_serialize_DATAWRITER_Representation>
 80169fe:	4004      	ands	r4, r0
 8016a00:	4620      	mov	r0, r4
 8016a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a04:	7a31      	ldrb	r1, [r6, #8]
 8016a06:	4638      	mov	r0, r7
 8016a08:	f7fb fae4 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	d0ee      	beq.n	80169ee <uxr_serialize_CREATE_Payload+0x42>
 8016a10:	7a33      	ldrb	r3, [r6, #8]
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	d001      	beq.n	8016a1a <uxr_serialize_CREATE_Payload+0x6e>
 8016a16:	2b02      	cmp	r3, #2
 8016a18:	d1ea      	bne.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 8016a1a:	68f1      	ldr	r1, [r6, #12]
 8016a1c:	4638      	mov	r0, r7
 8016a1e:	f004 fbb5 	bl	801b18c <ucdr_serialize_string>
 8016a22:	4004      	ands	r4, r0
 8016a24:	e7e4      	b.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 8016a26:	7a31      	ldrb	r1, [r6, #8]
 8016a28:	4638      	mov	r0, r7
 8016a2a:	f7fb fad3 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016a2e:	4605      	mov	r5, r0
 8016a30:	b158      	cbz	r0, 8016a4a <uxr_serialize_CREATE_Payload+0x9e>
 8016a32:	7a33      	ldrb	r3, [r6, #8]
 8016a34:	2b02      	cmp	r3, #2
 8016a36:	d034      	beq.n	8016aa2 <uxr_serialize_CREATE_Payload+0xf6>
 8016a38:	2b03      	cmp	r3, #3
 8016a3a:	d106      	bne.n	8016a4a <uxr_serialize_CREATE_Payload+0x9e>
 8016a3c:	68f2      	ldr	r2, [r6, #12]
 8016a3e:	f106 0110 	add.w	r1, r6, #16
 8016a42:	4638      	mov	r0, r7
 8016a44:	f7fc fe48 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 8016a48:	4605      	mov	r5, r0
 8016a4a:	2202      	movs	r2, #2
 8016a4c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016a50:	4638      	mov	r0, r7
 8016a52:	f7fb f91d 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016a56:	4028      	ands	r0, r5
 8016a58:	4004      	ands	r4, r0
 8016a5a:	e7c9      	b.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 8016a5c:	f106 0108 	add.w	r1, r6, #8
 8016a60:	4638      	mov	r0, r7
 8016a62:	f7ff faad 	bl	8015fc0 <uxr_serialize_CLIENT_Representation>
 8016a66:	4004      	ands	r4, r0
 8016a68:	e7c2      	b.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 8016a6a:	f106 0108 	add.w	r1, r6, #8
 8016a6e:	4638      	mov	r0, r7
 8016a70:	f7ff fb62 	bl	8016138 <uxr_serialize_AGENT_Representation>
 8016a74:	4004      	ands	r4, r0
 8016a76:	e7bb      	b.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 8016a78:	7a31      	ldrb	r1, [r6, #8]
 8016a7a:	4638      	mov	r0, r7
 8016a7c:	f7fb faaa 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016a80:	4605      	mov	r5, r0
 8016a82:	b130      	cbz	r0, 8016a92 <uxr_serialize_CREATE_Payload+0xe6>
 8016a84:	7a33      	ldrb	r3, [r6, #8]
 8016a86:	2b02      	cmp	r3, #2
 8016a88:	d011      	beq.n	8016aae <uxr_serialize_CREATE_Payload+0x102>
 8016a8a:	2b03      	cmp	r3, #3
 8016a8c:	d015      	beq.n	8016aba <uxr_serialize_CREATE_Payload+0x10e>
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d00d      	beq.n	8016aae <uxr_serialize_CREATE_Payload+0x102>
 8016a92:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8016a96:	4638      	mov	r0, r7
 8016a98:	f7fb ffd8 	bl	8012a4c <ucdr_serialize_int16_t>
 8016a9c:	4028      	ands	r0, r5
 8016a9e:	4004      	ands	r4, r0
 8016aa0:	e7a6      	b.n	80169f0 <uxr_serialize_CREATE_Payload+0x44>
 8016aa2:	68f1      	ldr	r1, [r6, #12]
 8016aa4:	4638      	mov	r0, r7
 8016aa6:	f004 fb71 	bl	801b18c <ucdr_serialize_string>
 8016aaa:	4605      	mov	r5, r0
 8016aac:	e7cd      	b.n	8016a4a <uxr_serialize_CREATE_Payload+0x9e>
 8016aae:	68f1      	ldr	r1, [r6, #12]
 8016ab0:	4638      	mov	r0, r7
 8016ab2:	f004 fb6b 	bl	801b18c <ucdr_serialize_string>
 8016ab6:	4605      	mov	r5, r0
 8016ab8:	e7eb      	b.n	8016a92 <uxr_serialize_CREATE_Payload+0xe6>
 8016aba:	68f2      	ldr	r2, [r6, #12]
 8016abc:	f106 0110 	add.w	r1, r6, #16
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f7fc fe09 	bl	80136d8 <ucdr_serialize_sequence_uint8_t>
 8016ac6:	4605      	mov	r5, r0
 8016ac8:	e7e3      	b.n	8016a92 <uxr_serialize_CREATE_Payload+0xe6>
 8016aca:	bf00      	nop

08016acc <uxr_deserialize_GET_INFO_Payload>:
 8016acc:	b570      	push	{r4, r5, r6, lr}
 8016ace:	2202      	movs	r2, #2
 8016ad0:	4605      	mov	r5, r0
 8016ad2:	460e      	mov	r6, r1
 8016ad4:	f7fb f940 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016ad8:	2202      	movs	r2, #2
 8016ada:	4604      	mov	r4, r0
 8016adc:	4628      	mov	r0, r5
 8016ade:	18b1      	adds	r1, r6, r2
 8016ae0:	f7fb f93a 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016ae4:	4603      	mov	r3, r0
 8016ae6:	1d31      	adds	r1, r6, #4
 8016ae8:	4628      	mov	r0, r5
 8016aea:	401c      	ands	r4, r3
 8016aec:	f7fb fdb8 	bl	8012660 <ucdr_deserialize_uint32_t>
 8016af0:	b2e4      	uxtb	r4, r4
 8016af2:	4020      	ands	r0, r4
 8016af4:	bd70      	pop	{r4, r5, r6, pc}
 8016af6:	bf00      	nop

08016af8 <uxr_serialize_DELETE_Payload>:
 8016af8:	b570      	push	{r4, r5, r6, lr}
 8016afa:	2202      	movs	r2, #2
 8016afc:	4605      	mov	r5, r0
 8016afe:	460e      	mov	r6, r1
 8016b00:	f7fb f8c6 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016b04:	2202      	movs	r2, #2
 8016b06:	4604      	mov	r4, r0
 8016b08:	4628      	mov	r0, r5
 8016b0a:	18b1      	adds	r1, r6, r2
 8016b0c:	f7fb f8c0 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016b10:	4020      	ands	r0, r4
 8016b12:	b2c0      	uxtb	r0, r0
 8016b14:	bd70      	pop	{r4, r5, r6, pc}
 8016b16:	bf00      	nop

08016b18 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b1c:	460e      	mov	r6, r1
 8016b1e:	4605      	mov	r5, r0
 8016b20:	f7fb fa6e 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016b24:	4604      	mov	r4, r0
 8016b26:	1c71      	adds	r1, r6, #1
 8016b28:	4628      	mov	r0, r5
 8016b2a:	f7fb fa69 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016b2e:	2204      	movs	r2, #4
 8016b30:	4681      	mov	r9, r0
 8016b32:	4628      	mov	r0, r5
 8016b34:	18b1      	adds	r1, r6, r2
 8016b36:	f7fb f90f 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016b3a:	f106 0108 	add.w	r1, r6, #8
 8016b3e:	4680      	mov	r8, r0
 8016b40:	2202      	movs	r2, #2
 8016b42:	4628      	mov	r0, r5
 8016b44:	f7fb f908 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016b48:	ea04 0309 	and.w	r3, r4, r9
 8016b4c:	4607      	mov	r7, r0
 8016b4e:	2202      	movs	r2, #2
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	f106 010a 	add.w	r1, r6, #10
 8016b56:	4628      	mov	r0, r5
 8016b58:	ea03 0408 	and.w	r4, r3, r8
 8016b5c:	f7fb f8fc 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016b60:	4603      	mov	r3, r0
 8016b62:	4628      	mov	r0, r5
 8016b64:	403c      	ands	r4, r7
 8016b66:	f106 010c 	add.w	r1, r6, #12
 8016b6a:	461d      	mov	r5, r3
 8016b6c:	f7fb fa1a 	bl	8011fa4 <ucdr_deserialize_bool>
 8016b70:	4025      	ands	r5, r4
 8016b72:	4028      	ands	r0, r5
 8016b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016b78 <uxr_deserialize_STATUS_Payload>:
 8016b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b7c:	2202      	movs	r2, #2
 8016b7e:	4606      	mov	r6, r0
 8016b80:	460f      	mov	r7, r1
 8016b82:	f7fb f8e9 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016b86:	2202      	movs	r2, #2
 8016b88:	4605      	mov	r5, r0
 8016b8a:	4630      	mov	r0, r6
 8016b8c:	18b9      	adds	r1, r7, r2
 8016b8e:	f7fb f8e3 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016b92:	4680      	mov	r8, r0
 8016b94:	1d39      	adds	r1, r7, #4
 8016b96:	4630      	mov	r0, r6
 8016b98:	f7fb fa32 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016b9c:	ea05 0508 	and.w	r5, r5, r8
 8016ba0:	4604      	mov	r4, r0
 8016ba2:	1d79      	adds	r1, r7, #5
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	402c      	ands	r4, r5
 8016ba8:	f7fb fa2a 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016bac:	4020      	ands	r0, r4
 8016bae:	b2c0      	uxtb	r0, r0
 8016bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016bb4 <uxr_serialize_INFO_Payload>:
 8016bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb8:	2202      	movs	r2, #2
 8016bba:	460c      	mov	r4, r1
 8016bbc:	4605      	mov	r5, r0
 8016bbe:	f7fb f867 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016bc2:	2202      	movs	r2, #2
 8016bc4:	4680      	mov	r8, r0
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	18a1      	adds	r1, r4, r2
 8016bca:	f7fb f861 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016bce:	4607      	mov	r7, r0
 8016bd0:	7921      	ldrb	r1, [r4, #4]
 8016bd2:	4628      	mov	r0, r5
 8016bd4:	f7fb f9fe 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016bd8:	ea08 0807 	and.w	r8, r8, r7
 8016bdc:	4606      	mov	r6, r0
 8016bde:	7961      	ldrb	r1, [r4, #5]
 8016be0:	4628      	mov	r0, r5
 8016be2:	ea06 0608 	and.w	r6, r6, r8
 8016be6:	f7fb f9f5 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016bea:	7a21      	ldrb	r1, [r4, #8]
 8016bec:	4030      	ands	r0, r6
 8016bee:	b2c7      	uxtb	r7, r0
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	f7fb f9c1 	bl	8011f78 <ucdr_serialize_bool>
 8016bf6:	7a23      	ldrb	r3, [r4, #8]
 8016bf8:	4606      	mov	r6, r0
 8016bfa:	b96b      	cbnz	r3, 8016c18 <uxr_serialize_INFO_Payload+0x64>
 8016bfc:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8016c00:	4628      	mov	r0, r5
 8016c02:	f7fb f9b9 	bl	8011f78 <ucdr_serialize_bool>
 8016c06:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8016c0a:	4030      	ands	r0, r6
 8016c0c:	b2c6      	uxtb	r6, r0
 8016c0e:	b983      	cbnz	r3, 8016c32 <uxr_serialize_INFO_Payload+0x7e>
 8016c10:	ea06 0007 	and.w	r0, r6, r7
 8016c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c18:	7b21      	ldrb	r1, [r4, #12]
 8016c1a:	4628      	mov	r0, r5
 8016c1c:	f7fb f9da 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016c20:	b188      	cbz	r0, 8016c46 <uxr_serialize_INFO_Payload+0x92>
 8016c22:	f104 010c 	add.w	r1, r4, #12
 8016c26:	4628      	mov	r0, r5
 8016c28:	f7ff faf8 	bl	801621c <uxr_serialize_ObjectVariant.part.0>
 8016c2c:	4030      	ands	r0, r6
 8016c2e:	b2c6      	uxtb	r6, r0
 8016c30:	e7e4      	b.n	8016bfc <uxr_serialize_INFO_Payload+0x48>
 8016c32:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016c36:	4628      	mov	r0, r5
 8016c38:	f7ff fdb8 	bl	80167ac <uxr_serialize_ActivityInfoVariant>
 8016c3c:	4006      	ands	r6, r0
 8016c3e:	ea06 0007 	and.w	r0, r6, r7
 8016c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c46:	4606      	mov	r6, r0
 8016c48:	e7d8      	b.n	8016bfc <uxr_serialize_INFO_Payload+0x48>
 8016c4a:	bf00      	nop

08016c4c <uxr_serialize_READ_DATA_Payload>:
 8016c4c:	b570      	push	{r4, r5, r6, lr}
 8016c4e:	2202      	movs	r2, #2
 8016c50:	4605      	mov	r5, r0
 8016c52:	460e      	mov	r6, r1
 8016c54:	f7fb f81c 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016c58:	2202      	movs	r2, #2
 8016c5a:	4604      	mov	r4, r0
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	18b1      	adds	r1, r6, r2
 8016c60:	f7fb f816 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016c64:	4603      	mov	r3, r0
 8016c66:	1d31      	adds	r1, r6, #4
 8016c68:	4628      	mov	r0, r5
 8016c6a:	401c      	ands	r4, r3
 8016c6c:	f7ff fe5e 	bl	801692c <uxr_serialize_ReadSpecification>
 8016c70:	b2e4      	uxtb	r4, r4
 8016c72:	4020      	ands	r0, r4
 8016c74:	bd70      	pop	{r4, r5, r6, pc}
 8016c76:	bf00      	nop

08016c78 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016c78:	b570      	push	{r4, r5, r6, lr}
 8016c7a:	2202      	movs	r2, #2
 8016c7c:	4605      	mov	r5, r0
 8016c7e:	460e      	mov	r6, r1
 8016c80:	f7fb f806 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016c84:	2202      	movs	r2, #2
 8016c86:	4604      	mov	r4, r0
 8016c88:	4628      	mov	r0, r5
 8016c8a:	18b1      	adds	r1, r6, r2
 8016c8c:	f7fb f800 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016c90:	4020      	ands	r0, r4
 8016c92:	b2c0      	uxtb	r0, r0
 8016c94:	bd70      	pop	{r4, r5, r6, pc}
 8016c96:	bf00      	nop

08016c98 <uxr_serialize_ACKNACK_Payload>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	460c      	mov	r4, r1
 8016c9c:	4605      	mov	r5, r0
 8016c9e:	460e      	mov	r6, r1
 8016ca0:	f834 1b02 	ldrh.w	r1, [r4], #2
 8016ca4:	f7fb f9c2 	bl	801202c <ucdr_serialize_uint16_t>
 8016ca8:	2202      	movs	r2, #2
 8016caa:	4621      	mov	r1, r4
 8016cac:	4604      	mov	r4, r0
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f7fa ffee 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	7931      	ldrb	r1, [r6, #4]
 8016cb8:	4628      	mov	r0, r5
 8016cba:	401c      	ands	r4, r3
 8016cbc:	f7fb f98a 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016cc0:	b2e4      	uxtb	r4, r4
 8016cc2:	4020      	ands	r0, r4
 8016cc4:	bd70      	pop	{r4, r5, r6, pc}
 8016cc6:	bf00      	nop

08016cc8 <uxr_deserialize_ACKNACK_Payload>:
 8016cc8:	b570      	push	{r4, r5, r6, lr}
 8016cca:	460e      	mov	r6, r1
 8016ccc:	4605      	mov	r5, r0
 8016cce:	f7fb faad 	bl	801222c <ucdr_deserialize_uint16_t>
 8016cd2:	2202      	movs	r2, #2
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	18b1      	adds	r1, r6, r2
 8016cda:	f7fb f83d 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	1d31      	adds	r1, r6, #4
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	401c      	ands	r4, r3
 8016ce6:	f7fb f98b 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016cea:	b2e4      	uxtb	r4, r4
 8016cec:	4020      	ands	r0, r4
 8016cee:	bd70      	pop	{r4, r5, r6, pc}

08016cf0 <uxr_serialize_HEARTBEAT_Payload>:
 8016cf0:	b570      	push	{r4, r5, r6, lr}
 8016cf2:	460d      	mov	r5, r1
 8016cf4:	4606      	mov	r6, r0
 8016cf6:	8809      	ldrh	r1, [r1, #0]
 8016cf8:	f7fb f998 	bl	801202c <ucdr_serialize_uint16_t>
 8016cfc:	8869      	ldrh	r1, [r5, #2]
 8016cfe:	4604      	mov	r4, r0
 8016d00:	4630      	mov	r0, r6
 8016d02:	f7fb f993 	bl	801202c <ucdr_serialize_uint16_t>
 8016d06:	4603      	mov	r3, r0
 8016d08:	7929      	ldrb	r1, [r5, #4]
 8016d0a:	4630      	mov	r0, r6
 8016d0c:	401c      	ands	r4, r3
 8016d0e:	f7fb f961 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016d12:	b2e4      	uxtb	r4, r4
 8016d14:	4020      	ands	r0, r4
 8016d16:	bd70      	pop	{r4, r5, r6, pc}

08016d18 <uxr_deserialize_HEARTBEAT_Payload>:
 8016d18:	b570      	push	{r4, r5, r6, lr}
 8016d1a:	460e      	mov	r6, r1
 8016d1c:	4605      	mov	r5, r0
 8016d1e:	f7fb fa85 	bl	801222c <ucdr_deserialize_uint16_t>
 8016d22:	4604      	mov	r4, r0
 8016d24:	1cb1      	adds	r1, r6, #2
 8016d26:	4628      	mov	r0, r5
 8016d28:	f7fb fa80 	bl	801222c <ucdr_deserialize_uint16_t>
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	1d31      	adds	r1, r6, #4
 8016d30:	4628      	mov	r0, r5
 8016d32:	401c      	ands	r4, r3
 8016d34:	f7fb f964 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016d38:	b2e4      	uxtb	r4, r4
 8016d3a:	4020      	ands	r0, r4
 8016d3c:	bd70      	pop	{r4, r5, r6, pc}
 8016d3e:	bf00      	nop

08016d40 <uxr_serialize_TIMESTAMP_Payload>:
 8016d40:	b570      	push	{r4, r5, r6, lr}
 8016d42:	460d      	mov	r5, r1
 8016d44:	4606      	mov	r6, r0
 8016d46:	6809      	ldr	r1, [r1, #0]
 8016d48:	f7fb ff74 	bl	8012c34 <ucdr_serialize_int32_t>
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	6869      	ldr	r1, [r5, #4]
 8016d50:	4630      	mov	r0, r6
 8016d52:	f7fb fb55 	bl	8012400 <ucdr_serialize_uint32_t>
 8016d56:	4020      	ands	r0, r4
 8016d58:	b2c0      	uxtb	r0, r0
 8016d5a:	bd70      	pop	{r4, r5, r6, pc}

08016d5c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d60:	460e      	mov	r6, r1
 8016d62:	4605      	mov	r5, r0
 8016d64:	f7fb fffe 	bl	8012d64 <ucdr_deserialize_int32_t>
 8016d68:	4607      	mov	r7, r0
 8016d6a:	1d31      	adds	r1, r6, #4
 8016d6c:	4628      	mov	r0, r5
 8016d6e:	f7fb fc77 	bl	8012660 <ucdr_deserialize_uint32_t>
 8016d72:	4680      	mov	r8, r0
 8016d74:	f106 0108 	add.w	r1, r6, #8
 8016d78:	4628      	mov	r0, r5
 8016d7a:	f7fb fff3 	bl	8012d64 <ucdr_deserialize_int32_t>
 8016d7e:	ea07 0708 	and.w	r7, r7, r8
 8016d82:	4604      	mov	r4, r0
 8016d84:	f106 010c 	add.w	r1, r6, #12
 8016d88:	4628      	mov	r0, r5
 8016d8a:	403c      	ands	r4, r7
 8016d8c:	f7fb fc68 	bl	8012660 <ucdr_deserialize_uint32_t>
 8016d90:	f106 0110 	add.w	r1, r6, #16
 8016d94:	4004      	ands	r4, r0
 8016d96:	4628      	mov	r0, r5
 8016d98:	f7fb ffe4 	bl	8012d64 <ucdr_deserialize_int32_t>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	b2e4      	uxtb	r4, r4
 8016da0:	4628      	mov	r0, r5
 8016da2:	461d      	mov	r5, r3
 8016da4:	f106 0114 	add.w	r1, r6, #20
 8016da8:	f7fb fc5a 	bl	8012660 <ucdr_deserialize_uint32_t>
 8016dac:	402c      	ands	r4, r5
 8016dae:	4020      	ands	r0, r4
 8016db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016db4 <uxr_serialize_SampleIdentity>:
 8016db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016db8:	4604      	mov	r4, r0
 8016dba:	460d      	mov	r5, r1
 8016dbc:	220c      	movs	r2, #12
 8016dbe:	f7fa ff67 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016dc2:	2203      	movs	r2, #3
 8016dc4:	f105 010c 	add.w	r1, r5, #12
 8016dc8:	4607      	mov	r7, r0
 8016dca:	4620      	mov	r0, r4
 8016dcc:	f7fa ff60 	bl	8011c90 <ucdr_serialize_array_uint8_t>
 8016dd0:	7be9      	ldrb	r1, [r5, #15]
 8016dd2:	4680      	mov	r8, r0
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f7fb f8fd 	bl	8011fd4 <ucdr_serialize_uint8_t>
 8016dda:	6929      	ldr	r1, [r5, #16]
 8016ddc:	4606      	mov	r6, r0
 8016dde:	4620      	mov	r0, r4
 8016de0:	f7fb ff28 	bl	8012c34 <ucdr_serialize_int32_t>
 8016de4:	ea07 0708 	and.w	r7, r7, r8
 8016de8:	4603      	mov	r3, r0
 8016dea:	4620      	mov	r0, r4
 8016dec:	403e      	ands	r6, r7
 8016dee:	6969      	ldr	r1, [r5, #20]
 8016df0:	461c      	mov	r4, r3
 8016df2:	f7fb fb05 	bl	8012400 <ucdr_serialize_uint32_t>
 8016df6:	4034      	ands	r4, r6
 8016df8:	4020      	ands	r0, r4
 8016dfa:	b2c0      	uxtb	r0, r0
 8016dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e00 <uxr_deserialize_SampleIdentity>:
 8016e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e04:	4604      	mov	r4, r0
 8016e06:	460d      	mov	r5, r1
 8016e08:	220c      	movs	r2, #12
 8016e0a:	f7fa ffa5 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016e0e:	2203      	movs	r2, #3
 8016e10:	f105 010c 	add.w	r1, r5, #12
 8016e14:	4607      	mov	r7, r0
 8016e16:	4620      	mov	r0, r4
 8016e18:	f7fa ff9e 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 8016e1c:	f105 010f 	add.w	r1, r5, #15
 8016e20:	4680      	mov	r8, r0
 8016e22:	4620      	mov	r0, r4
 8016e24:	f7fb f8ec 	bl	8012000 <ucdr_deserialize_uint8_t>
 8016e28:	f105 0110 	add.w	r1, r5, #16
 8016e2c:	4606      	mov	r6, r0
 8016e2e:	4620      	mov	r0, r4
 8016e30:	f7fb ff98 	bl	8012d64 <ucdr_deserialize_int32_t>
 8016e34:	ea07 0708 	and.w	r7, r7, r8
 8016e38:	4603      	mov	r3, r0
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	403e      	ands	r6, r7
 8016e3e:	f105 0114 	add.w	r1, r5, #20
 8016e42:	461c      	mov	r4, r3
 8016e44:	f7fb fc0c 	bl	8012660 <ucdr_deserialize_uint32_t>
 8016e48:	4034      	ands	r4, r6
 8016e4a:	4020      	ands	r0, r4
 8016e4c:	b2c0      	uxtb	r0, r0
 8016e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e52:	bf00      	nop

08016e54 <rcl_client_get_rmw_handle>:
 8016e54:	b118      	cbz	r0, 8016e5e <rcl_client_get_rmw_handle+0xa>
 8016e56:	6800      	ldr	r0, [r0, #0]
 8016e58:	b108      	cbz	r0, 8016e5e <rcl_client_get_rmw_handle+0xa>
 8016e5a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e5e:	4770      	bx	lr

08016e60 <rcl_send_request>:
 8016e60:	b570      	push	{r4, r5, r6, lr}
 8016e62:	b082      	sub	sp, #8
 8016e64:	b1f8      	cbz	r0, 8016ea6 <rcl_send_request+0x46>
 8016e66:	4604      	mov	r4, r0
 8016e68:	6800      	ldr	r0, [r0, #0]
 8016e6a:	b1e0      	cbz	r0, 8016ea6 <rcl_send_request+0x46>
 8016e6c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016e70:	b1cb      	cbz	r3, 8016ea6 <rcl_send_request+0x46>
 8016e72:	460e      	mov	r6, r1
 8016e74:	b1e1      	cbz	r1, 8016eb0 <rcl_send_request+0x50>
 8016e76:	4615      	mov	r5, r2
 8016e78:	b1d2      	cbz	r2, 8016eb0 <rcl_send_request+0x50>
 8016e7a:	2105      	movs	r1, #5
 8016e7c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016e80:	f002 fe1a 	bl	8019ab8 <__atomic_load_8>
 8016e84:	4602      	mov	r2, r0
 8016e86:	460b      	mov	r3, r1
 8016e88:	4631      	mov	r1, r6
 8016e8a:	e9c5 2300 	strd	r2, r3, [r5]
 8016e8e:	6823      	ldr	r3, [r4, #0]
 8016e90:	462a      	mov	r2, r5
 8016e92:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016e96:	f003 fd3d 	bl	801a914 <rmw_send_request>
 8016e9a:	4606      	mov	r6, r0
 8016e9c:	b160      	cbz	r0, 8016eb8 <rcl_send_request+0x58>
 8016e9e:	2601      	movs	r6, #1
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	b002      	add	sp, #8
 8016ea4:	bd70      	pop	{r4, r5, r6, pc}
 8016ea6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8016eaa:	4630      	mov	r0, r6
 8016eac:	b002      	add	sp, #8
 8016eae:	bd70      	pop	{r4, r5, r6, pc}
 8016eb0:	260b      	movs	r6, #11
 8016eb2:	4630      	mov	r0, r6
 8016eb4:	b002      	add	sp, #8
 8016eb6:	bd70      	pop	{r4, r5, r6, pc}
 8016eb8:	6820      	ldr	r0, [r4, #0]
 8016eba:	2105      	movs	r1, #5
 8016ebc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ec0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016ec4:	9100      	str	r1, [sp, #0]
 8016ec6:	f002 fe63 	bl	8019b90 <__atomic_exchange_8>
 8016eca:	4630      	mov	r0, r6
 8016ecc:	b002      	add	sp, #8
 8016ece:	bd70      	pop	{r4, r5, r6, pc}

08016ed0 <rcl_take_response>:
 8016ed0:	b570      	push	{r4, r5, r6, lr}
 8016ed2:	468e      	mov	lr, r1
 8016ed4:	b08c      	sub	sp, #48	@ 0x30
 8016ed6:	460c      	mov	r4, r1
 8016ed8:	4616      	mov	r6, r2
 8016eda:	f10d 0c18 	add.w	ip, sp, #24
 8016ede:	4605      	mov	r5, r0
 8016ee0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ee4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ee8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016eec:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ef0:	b35d      	cbz	r5, 8016f4a <rcl_take_response+0x7a>
 8016ef2:	682b      	ldr	r3, [r5, #0]
 8016ef4:	b34b      	cbz	r3, 8016f4a <rcl_take_response+0x7a>
 8016ef6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016efa:	b330      	cbz	r0, 8016f4a <rcl_take_response+0x7a>
 8016efc:	b346      	cbz	r6, 8016f50 <rcl_take_response+0x80>
 8016efe:	2300      	movs	r3, #0
 8016f00:	4632      	mov	r2, r6
 8016f02:	a902      	add	r1, sp, #8
 8016f04:	f88d 3007 	strb.w	r3, [sp, #7]
 8016f08:	f10d 0307 	add.w	r3, sp, #7
 8016f0c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016f58 <rcl_take_response+0x88>
 8016f10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016f18:	f003 fe04 	bl	801ab24 <rmw_take_response>
 8016f1c:	4605      	mov	r5, r0
 8016f1e:	b9c8      	cbnz	r0, 8016f54 <rcl_take_response+0x84>
 8016f20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016f24:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016f28:	2a00      	cmp	r2, #0
 8016f2a:	bf08      	it	eq
 8016f2c:	461d      	moveq	r5, r3
 8016f2e:	f10d 0e18 	add.w	lr, sp, #24
 8016f32:	46a4      	mov	ip, r4
 8016f34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f3c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016f40:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f44:	4628      	mov	r0, r5
 8016f46:	b00c      	add	sp, #48	@ 0x30
 8016f48:	bd70      	pop	{r4, r5, r6, pc}
 8016f4a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8016f4e:	e7ee      	b.n	8016f2e <rcl_take_response+0x5e>
 8016f50:	250b      	movs	r5, #11
 8016f52:	e7ec      	b.n	8016f2e <rcl_take_response+0x5e>
 8016f54:	2501      	movs	r5, #1
 8016f56:	e7ea      	b.n	8016f2e <rcl_take_response+0x5e>
	...

08016f60 <rcl_client_is_valid>:
 8016f60:	b130      	cbz	r0, 8016f70 <rcl_client_is_valid+0x10>
 8016f62:	6800      	ldr	r0, [r0, #0]
 8016f64:	b120      	cbz	r0, 8016f70 <rcl_client_is_valid+0x10>
 8016f66:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016f6a:	3800      	subs	r0, #0
 8016f6c:	bf18      	it	ne
 8016f6e:	2001      	movne	r0, #1
 8016f70:	4770      	bx	lr
 8016f72:	bf00      	nop

08016f74 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016f74:	280b      	cmp	r0, #11
 8016f76:	dc0d      	bgt.n	8016f94 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	db09      	blt.n	8016f90 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016f7c:	280b      	cmp	r0, #11
 8016f7e:	d807      	bhi.n	8016f90 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016f80:	e8df f000 	tbb	[pc, r0]
 8016f84:	07060607 	.word	0x07060607
 8016f88:	06060606 	.word	0x06060606
 8016f8c:	07070606 	.word	0x07070606
 8016f90:	2001      	movs	r0, #1
 8016f92:	4770      	bx	lr
 8016f94:	28cb      	cmp	r0, #203	@ 0xcb
 8016f96:	bf18      	it	ne
 8016f98:	2001      	movne	r0, #1
 8016f9a:	4770      	bx	lr

08016f9c <rcl_get_zero_initialized_context>:
 8016f9c:	4a03      	ldr	r2, [pc, #12]	@ (8016fac <rcl_get_zero_initialized_context+0x10>)
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	4770      	bx	lr
 8016fac:	0801e5a8 	.word	0x0801e5a8

08016fb0 <rcl_context_is_valid>:
 8016fb0:	b118      	cbz	r0, 8016fba <rcl_context_is_valid+0xa>
 8016fb2:	6840      	ldr	r0, [r0, #4]
 8016fb4:	3800      	subs	r0, #0
 8016fb6:	bf18      	it	ne
 8016fb8:	2001      	movne	r0, #1
 8016fba:	4770      	bx	lr

08016fbc <__cleanup_context>:
 8016fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fc0:	4606      	mov	r6, r0
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	6800      	ldr	r0, [r0, #0]
 8016fc6:	6073      	str	r3, [r6, #4]
 8016fc8:	2800      	cmp	r0, #0
 8016fca:	d049      	beq.n	8017060 <__cleanup_context+0xa4>
 8016fcc:	6947      	ldr	r7, [r0, #20]
 8016fce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016fd2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8016fd6:	b137      	cbz	r7, 8016fe6 <__cleanup_context+0x2a>
 8016fd8:	3014      	adds	r0, #20
 8016fda:	f7f7 fdd3 	bl	800eb84 <rcl_init_options_fini>
 8016fde:	4607      	mov	r7, r0
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	d144      	bne.n	801706e <__cleanup_context+0xb2>
 8016fe4:	6830      	ldr	r0, [r6, #0]
 8016fe6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016fe8:	b143      	cbz	r3, 8016ffc <__cleanup_context+0x40>
 8016fea:	3028      	adds	r0, #40	@ 0x28
 8016fec:	f7f9 f9ba 	bl	8010364 <rmw_context_fini>
 8016ff0:	b118      	cbz	r0, 8016ffa <__cleanup_context+0x3e>
 8016ff2:	2f00      	cmp	r7, #0
 8016ff4:	d03e      	beq.n	8017074 <__cleanup_context+0xb8>
 8016ff6:	f7f8 feeb 	bl	800fdd0 <rcutils_reset_error>
 8016ffa:	6830      	ldr	r0, [r6, #0]
 8016ffc:	6a03      	ldr	r3, [r0, #32]
 8016ffe:	b1db      	cbz	r3, 8017038 <__cleanup_context+0x7c>
 8017000:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8017004:	2a01      	cmp	r2, #1
 8017006:	f17c 0100 	sbcs.w	r1, ip, #0
 801700a:	db11      	blt.n	8017030 <__cleanup_context+0x74>
 801700c:	2400      	movs	r4, #0
 801700e:	4625      	mov	r5, r4
 8017010:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017014:	4649      	mov	r1, r9
 8017016:	b1b8      	cbz	r0, 8017048 <__cleanup_context+0x8c>
 8017018:	47c0      	blx	r8
 801701a:	6833      	ldr	r3, [r6, #0]
 801701c:	3401      	adds	r4, #1
 801701e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8017022:	f145 0500 	adc.w	r5, r5, #0
 8017026:	6a1b      	ldr	r3, [r3, #32]
 8017028:	4294      	cmp	r4, r2
 801702a:	eb75 010c 	sbcs.w	r1, r5, ip
 801702e:	dbef      	blt.n	8017010 <__cleanup_context+0x54>
 8017030:	4618      	mov	r0, r3
 8017032:	4649      	mov	r1, r9
 8017034:	47c0      	blx	r8
 8017036:	6830      	ldr	r0, [r6, #0]
 8017038:	4649      	mov	r1, r9
 801703a:	47c0      	blx	r8
 801703c:	2300      	movs	r3, #0
 801703e:	4638      	mov	r0, r7
 8017040:	e9c6 3300 	strd	r3, r3, [r6]
 8017044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017048:	3401      	adds	r4, #1
 801704a:	f145 0500 	adc.w	r5, r5, #0
 801704e:	4294      	cmp	r4, r2
 8017050:	eb75 010c 	sbcs.w	r1, r5, ip
 8017054:	dbdc      	blt.n	8017010 <__cleanup_context+0x54>
 8017056:	4618      	mov	r0, r3
 8017058:	4649      	mov	r1, r9
 801705a:	47c0      	blx	r8
 801705c:	6830      	ldr	r0, [r6, #0]
 801705e:	e7eb      	b.n	8017038 <__cleanup_context+0x7c>
 8017060:	4607      	mov	r7, r0
 8017062:	2300      	movs	r3, #0
 8017064:	4638      	mov	r0, r7
 8017066:	e9c6 3300 	strd	r3, r3, [r6]
 801706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801706e:	f7f8 feaf 	bl	800fdd0 <rcutils_reset_error>
 8017072:	e7b7      	b.n	8016fe4 <__cleanup_context+0x28>
 8017074:	f7ff ff7e 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 8017078:	4607      	mov	r7, r0
 801707a:	e7bc      	b.n	8016ff6 <__cleanup_context+0x3a>

0801707c <rcl_init>:
 801707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017080:	1e05      	subs	r5, r0, #0
 8017082:	b09e      	sub	sp, #120	@ 0x78
 8017084:	460e      	mov	r6, r1
 8017086:	4690      	mov	r8, r2
 8017088:	461f      	mov	r7, r3
 801708a:	f340 809f 	ble.w	80171cc <rcl_init+0x150>
 801708e:	2900      	cmp	r1, #0
 8017090:	f000 809f 	beq.w	80171d2 <rcl_init+0x156>
 8017094:	f1a1 0e04 	sub.w	lr, r1, #4
 8017098:	f04f 0c00 	mov.w	ip, #0
 801709c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80170a0:	f10c 0c01 	add.w	ip, ip, #1
 80170a4:	2c00      	cmp	r4, #0
 80170a6:	f000 8094 	beq.w	80171d2 <rcl_init+0x156>
 80170aa:	4565      	cmp	r5, ip
 80170ac:	d1f6      	bne.n	801709c <rcl_init+0x20>
 80170ae:	f1b8 0f00 	cmp.w	r8, #0
 80170b2:	f000 808e 	beq.w	80171d2 <rcl_init+0x156>
 80170b6:	f8d8 4000 	ldr.w	r4, [r8]
 80170ba:	2c00      	cmp	r4, #0
 80170bc:	f000 8089 	beq.w	80171d2 <rcl_init+0x156>
 80170c0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80170c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170ca:	6823      	ldr	r3, [r4, #0]
 80170cc:	a819      	add	r0, sp, #100	@ 0x64
 80170ce:	f8cc 3000 	str.w	r3, [ip]
 80170d2:	f7f8 fe59 	bl	800fd88 <rcutils_allocator_is_valid>
 80170d6:	f080 0001 	eor.w	r0, r0, #1
 80170da:	b2c0      	uxtb	r0, r0
 80170dc:	2800      	cmp	r0, #0
 80170de:	d178      	bne.n	80171d2 <rcl_init+0x156>
 80170e0:	2f00      	cmp	r7, #0
 80170e2:	d076      	beq.n	80171d2 <rcl_init+0x156>
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d178      	bne.n	80171dc <rcl_init+0x160>
 80170ea:	2178      	movs	r1, #120	@ 0x78
 80170ec:	2001      	movs	r0, #1
 80170ee:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80170f2:	4798      	blx	r3
 80170f4:	4604      	mov	r4, r0
 80170f6:	6038      	str	r0, [r7, #0]
 80170f8:	2800      	cmp	r0, #0
 80170fa:	f000 80b6 	beq.w	801726a <rcl_init+0x1ee>
 80170fe:	a802      	add	r0, sp, #8
 8017100:	f003 f84e 	bl	801a1a0 <rmw_get_zero_initialized_context>
 8017104:	a902      	add	r1, sp, #8
 8017106:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801710a:	2250      	movs	r2, #80	@ 0x50
 801710c:	f005 ff75 	bl	801cffa <memcpy>
 8017110:	ac19      	add	r4, sp, #100	@ 0x64
 8017112:	f8d7 e000 	ldr.w	lr, [r7]
 8017116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017118:	46f4      	mov	ip, lr
 801711a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801711e:	6823      	ldr	r3, [r4, #0]
 8017120:	f10e 0114 	add.w	r1, lr, #20
 8017124:	4640      	mov	r0, r8
 8017126:	f8cc 3000 	str.w	r3, [ip]
 801712a:	f7f7 fd55 	bl	800ebd8 <rcl_init_options_copy>
 801712e:	4604      	mov	r4, r0
 8017130:	2800      	cmp	r0, #0
 8017132:	d144      	bne.n	80171be <rcl_init+0x142>
 8017134:	f8d7 9000 	ldr.w	r9, [r7]
 8017138:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801713c:	f8c9 0020 	str.w	r0, [r9, #32]
 8017140:	f8c9 5018 	str.w	r5, [r9, #24]
 8017144:	f8c9 801c 	str.w	r8, [r9, #28]
 8017148:	2d00      	cmp	r5, #0
 801714a:	d04e      	beq.n	80171ea <rcl_init+0x16e>
 801714c:	2e00      	cmp	r6, #0
 801714e:	d04c      	beq.n	80171ea <rcl_init+0x16e>
 8017150:	2104      	movs	r1, #4
 8017152:	4628      	mov	r0, r5
 8017154:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017158:	4798      	blx	r3
 801715a:	f8c9 0020 	str.w	r0, [r9, #32]
 801715e:	f8d7 9000 	ldr.w	r9, [r7]
 8017162:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8017166:	46ca      	mov	sl, r9
 8017168:	b343      	cbz	r3, 80171bc <rcl_init+0x140>
 801716a:	2d01      	cmp	r5, #1
 801716c:	f178 0300 	sbcs.w	r3, r8, #0
 8017170:	db3b      	blt.n	80171ea <rcl_init+0x16e>
 8017172:	2400      	movs	r4, #0
 8017174:	3e04      	subs	r6, #4
 8017176:	46a1      	mov	r9, r4
 8017178:	e00b      	b.n	8017192 <rcl_init+0x116>
 801717a:	6831      	ldr	r1, [r6, #0]
 801717c:	f005 ff3d 	bl	801cffa <memcpy>
 8017180:	3401      	adds	r4, #1
 8017182:	f149 0900 	adc.w	r9, r9, #0
 8017186:	45c8      	cmp	r8, r9
 8017188:	bf08      	it	eq
 801718a:	42a5      	cmpeq	r5, r4
 801718c:	d02b      	beq.n	80171e6 <rcl_init+0x16a>
 801718e:	f8d7 a000 	ldr.w	sl, [r7]
 8017192:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8017196:	f7e9 f8ad 	bl	80002f4 <strlen>
 801719a:	1c42      	adds	r2, r0, #1
 801719c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801719e:	4610      	mov	r0, r2
 80171a0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80171a2:	f8da a020 	ldr.w	sl, [sl, #32]
 80171a6:	9201      	str	r2, [sp, #4]
 80171a8:	4798      	blx	r3
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80171b0:	6a1b      	ldr	r3, [r3, #32]
 80171b2:	9a01      	ldr	r2, [sp, #4]
 80171b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d1de      	bne.n	801717a <rcl_init+0xfe>
 80171bc:	240a      	movs	r4, #10
 80171be:	4638      	mov	r0, r7
 80171c0:	f7ff fefc 	bl	8016fbc <__cleanup_context>
 80171c4:	4620      	mov	r0, r4
 80171c6:	b01e      	add	sp, #120	@ 0x78
 80171c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171cc:	2900      	cmp	r1, #0
 80171ce:	f43f af6e 	beq.w	80170ae <rcl_init+0x32>
 80171d2:	240b      	movs	r4, #11
 80171d4:	4620      	mov	r0, r4
 80171d6:	b01e      	add	sp, #120	@ 0x78
 80171d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171dc:	2464      	movs	r4, #100	@ 0x64
 80171de:	4620      	mov	r0, r4
 80171e0:	b01e      	add	sp, #120	@ 0x78
 80171e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e6:	f8d7 9000 	ldr.w	r9, [r7]
 80171ea:	4926      	ldr	r1, [pc, #152]	@ (8017284 <rcl_init+0x208>)
 80171ec:	680b      	ldr	r3, [r1, #0]
 80171ee:	3301      	adds	r3, #1
 80171f0:	d036      	beq.n	8017260 <rcl_init+0x1e4>
 80171f2:	461a      	mov	r2, r3
 80171f4:	2400      	movs	r4, #0
 80171f6:	600b      	str	r3, [r1, #0]
 80171f8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80171fc:	607b      	str	r3, [r7, #4]
 80171fe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017200:	3301      	adds	r3, #1
 8017202:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8017206:	d034      	beq.n	8017272 <rcl_init+0x1f6>
 8017208:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801720c:	b93b      	cbnz	r3, 801721e <rcl_init+0x1a2>
 801720e:	3030      	adds	r0, #48	@ 0x30
 8017210:	f000 f83a 	bl	8017288 <rcl_get_localhost_only>
 8017214:	4604      	mov	r4, r0
 8017216:	2800      	cmp	r0, #0
 8017218:	d1d1      	bne.n	80171be <rcl_init+0x142>
 801721a:	683b      	ldr	r3, [r7, #0]
 801721c:	6958      	ldr	r0, [r3, #20]
 801721e:	aa18      	add	r2, sp, #96	@ 0x60
 8017220:	a917      	add	r1, sp, #92	@ 0x5c
 8017222:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8017224:	f001 f8d2 	bl	80183cc <rcl_validate_enclave_name>
 8017228:	4604      	mov	r4, r0
 801722a:	2800      	cmp	r0, #0
 801722c:	d1c7      	bne.n	80171be <rcl_init+0x142>
 801722e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017230:	b9eb      	cbnz	r3, 801726e <rcl_init+0x1f2>
 8017232:	6839      	ldr	r1, [r7, #0]
 8017234:	694b      	ldr	r3, [r1, #20]
 8017236:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801723a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801723c:	f000 fb72 	bl	8017924 <rcl_get_security_options_from_environment>
 8017240:	4604      	mov	r4, r0
 8017242:	2800      	cmp	r0, #0
 8017244:	d1bb      	bne.n	80171be <rcl_init+0x142>
 8017246:	6839      	ldr	r1, [r7, #0]
 8017248:	6948      	ldr	r0, [r1, #20]
 801724a:	3128      	adds	r1, #40	@ 0x28
 801724c:	3018      	adds	r0, #24
 801724e:	f7f8 ff53 	bl	80100f8 <rmw_init>
 8017252:	4604      	mov	r4, r0
 8017254:	2800      	cmp	r0, #0
 8017256:	d0bd      	beq.n	80171d4 <rcl_init+0x158>
 8017258:	f7ff fe8c 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 801725c:	4604      	mov	r4, r0
 801725e:	e7ae      	b.n	80171be <rcl_init+0x142>
 8017260:	2201      	movs	r2, #1
 8017262:	461c      	mov	r4, r3
 8017264:	600a      	str	r2, [r1, #0]
 8017266:	4613      	mov	r3, r2
 8017268:	e7c6      	b.n	80171f8 <rcl_init+0x17c>
 801726a:	240a      	movs	r4, #10
 801726c:	e7b2      	b.n	80171d4 <rcl_init+0x158>
 801726e:	2401      	movs	r4, #1
 8017270:	e7a5      	b.n	80171be <rcl_init+0x142>
 8017272:	3024      	adds	r0, #36	@ 0x24
 8017274:	f004 fd0c 	bl	801bc90 <rcl_get_default_domain_id>
 8017278:	4604      	mov	r4, r0
 801727a:	2800      	cmp	r0, #0
 801727c:	d19f      	bne.n	80171be <rcl_init+0x142>
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	6958      	ldr	r0, [r3, #20]
 8017282:	e7c1      	b.n	8017208 <rcl_init+0x18c>
 8017284:	240138a0 	.word	0x240138a0

08017288 <rcl_get_localhost_only>:
 8017288:	b510      	push	{r4, lr}
 801728a:	2300      	movs	r3, #0
 801728c:	b082      	sub	sp, #8
 801728e:	9301      	str	r3, [sp, #4]
 8017290:	b1b8      	cbz	r0, 80172c2 <rcl_get_localhost_only+0x3a>
 8017292:	4604      	mov	r4, r0
 8017294:	a901      	add	r1, sp, #4
 8017296:	480c      	ldr	r0, [pc, #48]	@ (80172c8 <rcl_get_localhost_only+0x40>)
 8017298:	f002 fcb2 	bl	8019c00 <rcutils_get_env>
 801729c:	b110      	cbz	r0, 80172a4 <rcl_get_localhost_only+0x1c>
 801729e:	2001      	movs	r0, #1
 80172a0:	b002      	add	sp, #8
 80172a2:	bd10      	pop	{r4, pc}
 80172a4:	9b01      	ldr	r3, [sp, #4]
 80172a6:	b113      	cbz	r3, 80172ae <rcl_get_localhost_only+0x26>
 80172a8:	781a      	ldrb	r2, [r3, #0]
 80172aa:	2a31      	cmp	r2, #49	@ 0x31
 80172ac:	d004      	beq.n	80172b8 <rcl_get_localhost_only+0x30>
 80172ae:	2302      	movs	r3, #2
 80172b0:	2000      	movs	r0, #0
 80172b2:	7023      	strb	r3, [r4, #0]
 80172b4:	b002      	add	sp, #8
 80172b6:	bd10      	pop	{r4, pc}
 80172b8:	785b      	ldrb	r3, [r3, #1]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d1f7      	bne.n	80172ae <rcl_get_localhost_only+0x26>
 80172be:	2301      	movs	r3, #1
 80172c0:	e7f6      	b.n	80172b0 <rcl_get_localhost_only+0x28>
 80172c2:	200b      	movs	r0, #11
 80172c4:	b002      	add	sp, #8
 80172c6:	bd10      	pop	{r4, pc}
 80172c8:	0801e5b0 	.word	0x0801e5b0

080172cc <rcl_get_zero_initialized_node>:
 80172cc:	4a03      	ldr	r2, [pc, #12]	@ (80172dc <rcl_get_zero_initialized_node+0x10>)
 80172ce:	4603      	mov	r3, r0
 80172d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80172d8:	4618      	mov	r0, r3
 80172da:	4770      	bx	lr
 80172dc:	0801e5cc 	.word	0x0801e5cc

080172e0 <rcl_node_init>:
 80172e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172e4:	b0a9      	sub	sp, #164	@ 0xa4
 80172e6:	4604      	mov	r4, r0
 80172e8:	460e      	mov	r6, r1
 80172ea:	4615      	mov	r5, r2
 80172ec:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80172f0:	a823      	add	r0, sp, #140	@ 0x8c
 80172f2:	461f      	mov	r7, r3
 80172f4:	f004 ff40 	bl	801c178 <rcl_guard_condition_get_default_options>
 80172f8:	f1b8 0f00 	cmp.w	r8, #0
 80172fc:	f000 80f3 	beq.w	80174e6 <rcl_node_init+0x206>
 8017300:	4640      	mov	r0, r8
 8017302:	f7f8 fd41 	bl	800fd88 <rcutils_allocator_is_valid>
 8017306:	2d00      	cmp	r5, #0
 8017308:	bf18      	it	ne
 801730a:	2c00      	cmpne	r4, #0
 801730c:	f080 0001 	eor.w	r0, r0, #1
 8017310:	bf0c      	ite	eq
 8017312:	f04f 0c01 	moveq.w	ip, #1
 8017316:	f04f 0c00 	movne.w	ip, #0
 801731a:	2e00      	cmp	r6, #0
 801731c:	bf08      	it	eq
 801731e:	f04c 0c01 	orreq.w	ip, ip, #1
 8017322:	ea4c 0c00 	orr.w	ip, ip, r0
 8017326:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801732a:	f040 80dc 	bne.w	80174e6 <rcl_node_init+0x206>
 801732e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8017332:	f1ba 0f00 	cmp.w	sl, #0
 8017336:	f040 80fc 	bne.w	8017532 <rcl_node_init+0x252>
 801733a:	2f00      	cmp	r7, #0
 801733c:	f000 80d3 	beq.w	80174e6 <rcl_node_init+0x206>
 8017340:	4638      	mov	r0, r7
 8017342:	f7ff fe35 	bl	8016fb0 <rcl_context_is_valid>
 8017346:	4683      	mov	fp, r0
 8017348:	2800      	cmp	r0, #0
 801734a:	f000 80d2 	beq.w	80174f2 <rcl_node_init+0x212>
 801734e:	4652      	mov	r2, sl
 8017350:	4630      	mov	r0, r6
 8017352:	a922      	add	r1, sp, #136	@ 0x88
 8017354:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8017358:	f003 f8b4 	bl	801a4c4 <rmw_validate_node_name>
 801735c:	4682      	mov	sl, r0
 801735e:	2800      	cmp	r0, #0
 8017360:	f040 80c3 	bne.w	80174ea <rcl_node_init+0x20a>
 8017364:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8017366:	2800      	cmp	r0, #0
 8017368:	f040 80f1 	bne.w	801754e <rcl_node_init+0x26e>
 801736c:	4628      	mov	r0, r5
 801736e:	f7e8 ffc1 	bl	80002f4 <strlen>
 8017372:	2800      	cmp	r0, #0
 8017374:	f040 80c0 	bne.w	80174f8 <rcl_node_init+0x218>
 8017378:	4d79      	ldr	r5, [pc, #484]	@ (8017560 <rcl_node_init+0x280>)
 801737a:	a922      	add	r1, sp, #136	@ 0x88
 801737c:	2200      	movs	r2, #0
 801737e:	4628      	mov	r0, r5
 8017380:	f003 f882 	bl	801a488 <rmw_validate_namespace>
 8017384:	4682      	mov	sl, r0
 8017386:	2800      	cmp	r0, #0
 8017388:	f040 80af 	bne.w	80174ea <rcl_node_init+0x20a>
 801738c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801738e:	2800      	cmp	r0, #0
 8017390:	f040 80d5 	bne.w	801753e <rcl_node_init+0x25e>
 8017394:	f8d8 3000 	ldr.w	r3, [r8]
 8017398:	2078      	movs	r0, #120	@ 0x78
 801739a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801739e:	4798      	blx	r3
 80173a0:	4682      	mov	sl, r0
 80173a2:	6060      	str	r0, [r4, #4]
 80173a4:	2800      	cmp	r0, #0
 80173a6:	f000 80cf 	beq.w	8017548 <rcl_node_init+0x268>
 80173aa:	2200      	movs	r2, #0
 80173ac:	2300      	movs	r3, #0
 80173ae:	a808      	add	r0, sp, #32
 80173b0:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80173b4:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80173b8:	f000 f902 	bl	80175c0 <rcl_node_get_default_options>
 80173bc:	a908      	add	r1, sp, #32
 80173be:	4650      	mov	r0, sl
 80173c0:	2268      	movs	r2, #104	@ 0x68
 80173c2:	f005 fe1a 	bl	801cffa <memcpy>
 80173c6:	6861      	ldr	r1, [r4, #4]
 80173c8:	4640      	mov	r0, r8
 80173ca:	6027      	str	r7, [r4, #0]
 80173cc:	f000 f906 	bl	80175dc <rcl_node_options_copy>
 80173d0:	2800      	cmp	r0, #0
 80173d2:	d158      	bne.n	8017486 <rcl_node_init+0x1a6>
 80173d4:	4628      	mov	r0, r5
 80173d6:	f7e8 ff8d 	bl	80002f4 <strlen>
 80173da:	4428      	add	r0, r5
 80173dc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80173e0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80173e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80173e6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	bf0c      	ite	eq
 80173ee:	4b5d      	ldreq	r3, [pc, #372]	@ (8017564 <rcl_node_init+0x284>)
 80173f0:	4b5d      	ldrne	r3, [pc, #372]	@ (8017568 <rcl_node_init+0x288>)
 80173f2:	9302      	str	r3, [sp, #8]
 80173f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80173f8:	9301      	str	r3, [sp, #4]
 80173fa:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80173fe:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017402:	f002 fc25 	bl	8019c50 <rcutils_format_string_limit>
 8017406:	6823      	ldr	r3, [r4, #0]
 8017408:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801740c:	4631      	mov	r1, r6
 801740e:	6818      	ldr	r0, [r3, #0]
 8017410:	462a      	mov	r2, r5
 8017412:	6866      	ldr	r6, [r4, #4]
 8017414:	3028      	adds	r0, #40	@ 0x28
 8017416:	f7f9 f857 	bl	80104c8 <rmw_create_node>
 801741a:	6863      	ldr	r3, [r4, #4]
 801741c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801741e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8017420:	2800      	cmp	r0, #0
 8017422:	d032      	beq.n	801748a <rcl_node_init+0x1aa>
 8017424:	f7f9 f8e0 	bl	80105e8 <rmw_node_get_graph_guard_condition>
 8017428:	4682      	mov	sl, r0
 801742a:	b360      	cbz	r0, 8017486 <rcl_node_init+0x1a6>
 801742c:	f8d8 3000 	ldr.w	r3, [r8]
 8017430:	2008      	movs	r0, #8
 8017432:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8017436:	6866      	ldr	r6, [r4, #4]
 8017438:	4798      	blx	r3
 801743a:	6863      	ldr	r3, [r4, #4]
 801743c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801743e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8017442:	f1bb 0f00 	cmp.w	fp, #0
 8017446:	d020      	beq.n	801748a <rcl_node_init+0x1aa>
 8017448:	a806      	add	r0, sp, #24
 801744a:	ae23      	add	r6, sp, #140	@ 0x8c
 801744c:	f004 fdba 	bl	801bfc4 <rcl_get_zero_initialized_guard_condition>
 8017450:	a806      	add	r0, sp, #24
 8017452:	6863      	ldr	r3, [r4, #4]
 8017454:	46c4      	mov	ip, r8
 8017456:	c803      	ldmia	r0, {r0, r1}
 8017458:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801745c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8017460:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017464:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017466:	f8dc 3000 	ldr.w	r3, [ip]
 801746a:	6033      	str	r3, [r6, #0]
 801746c:	ab28      	add	r3, sp, #160	@ 0xa0
 801746e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8017472:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017476:	4651      	mov	r1, sl
 8017478:	463a      	mov	r2, r7
 801747a:	4670      	mov	r0, lr
 801747c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801747e:	f004 fdf9 	bl	801c074 <rcl_guard_condition_init_from_rmw>
 8017482:	4682      	mov	sl, r0
 8017484:	b328      	cbz	r0, 80174d2 <rcl_node_init+0x1f2>
 8017486:	6863      	ldr	r3, [r4, #4]
 8017488:	b1f3      	cbz	r3, 80174c8 <rcl_node_init+0x1e8>
 801748a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801748c:	b128      	cbz	r0, 801749a <rcl_node_init+0x1ba>
 801748e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017492:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8017496:	4798      	blx	r3
 8017498:	6863      	ldr	r3, [r4, #4]
 801749a:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801749c:	b110      	cbz	r0, 80174a4 <rcl_node_init+0x1c4>
 801749e:	f7f9 f825 	bl	80104ec <rmw_destroy_node>
 80174a2:	6863      	ldr	r3, [r4, #4]
 80174a4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80174a6:	b148      	cbz	r0, 80174bc <rcl_node_init+0x1dc>
 80174a8:	f004 fe40 	bl	801c12c <rcl_guard_condition_fini>
 80174ac:	6863      	ldr	r3, [r4, #4]
 80174ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174b2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80174b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174b8:	4798      	blx	r3
 80174ba:	6863      	ldr	r3, [r4, #4]
 80174bc:	4618      	mov	r0, r3
 80174be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174c6:	4798      	blx	r3
 80174c8:	2300      	movs	r3, #0
 80174ca:	f04f 0a01 	mov.w	sl, #1
 80174ce:	e9c4 3300 	strd	r3, r3, [r4]
 80174d2:	f1b9 0f00 	cmp.w	r9, #0
 80174d6:	d008      	beq.n	80174ea <rcl_node_init+0x20a>
 80174d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174dc:	4628      	mov	r0, r5
 80174de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174e2:	4798      	blx	r3
 80174e4:	e001      	b.n	80174ea <rcl_node_init+0x20a>
 80174e6:	f04f 0a0b 	mov.w	sl, #11
 80174ea:	4650      	mov	r0, sl
 80174ec:	b029      	add	sp, #164	@ 0xa4
 80174ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f2:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 80174f6:	e7f8      	b.n	80174ea <rcl_node_init+0x20a>
 80174f8:	782b      	ldrb	r3, [r5, #0]
 80174fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80174fc:	f43f af3d 	beq.w	801737a <rcl_node_init+0x9a>
 8017500:	9503      	str	r5, [sp, #12]
 8017502:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	4b18      	ldr	r3, [pc, #96]	@ (801756c <rcl_node_init+0x28c>)
 801750a:	9302      	str	r3, [sp, #8]
 801750c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017510:	9301      	str	r3, [sp, #4]
 8017512:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017516:	f002 fb9b 	bl	8019c50 <rcutils_format_string_limit>
 801751a:	4605      	mov	r5, r0
 801751c:	b1e0      	cbz	r0, 8017558 <rcl_node_init+0x278>
 801751e:	2200      	movs	r2, #0
 8017520:	a922      	add	r1, sp, #136	@ 0x88
 8017522:	9222      	str	r2, [sp, #136]	@ 0x88
 8017524:	f002 ffb0 	bl	801a488 <rmw_validate_namespace>
 8017528:	4682      	mov	sl, r0
 801752a:	2800      	cmp	r0, #0
 801752c:	d1d4      	bne.n	80174d8 <rcl_node_init+0x1f8>
 801752e:	46d9      	mov	r9, fp
 8017530:	e72c      	b.n	801738c <rcl_node_init+0xac>
 8017532:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8017536:	4650      	mov	r0, sl
 8017538:	b029      	add	sp, #164	@ 0xa4
 801753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801753e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8017542:	f002 ffb3 	bl	801a4ac <rmw_namespace_validation_result_string>
 8017546:	e7c4      	b.n	80174d2 <rcl_node_init+0x1f2>
 8017548:	f04f 0a0a 	mov.w	sl, #10
 801754c:	e7c1      	b.n	80174d2 <rcl_node_init+0x1f2>
 801754e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8017552:	f003 f80b 	bl	801a56c <rmw_node_name_validation_result_string>
 8017556:	e7c8      	b.n	80174ea <rcl_node_init+0x20a>
 8017558:	f04f 0a0a 	mov.w	sl, #10
 801755c:	e7c5      	b.n	80174ea <rcl_node_init+0x20a>
 801755e:	bf00      	nop
 8017560:	0801deec 	.word	0x0801deec
 8017564:	0801df38 	.word	0x0801df38
 8017568:	0801def0 	.word	0x0801def0
 801756c:	0801e5c8 	.word	0x0801e5c8

08017570 <rcl_node_is_valid>:
 8017570:	b130      	cbz	r0, 8017580 <rcl_node_is_valid+0x10>
 8017572:	6843      	ldr	r3, [r0, #4]
 8017574:	b123      	cbz	r3, 8017580 <rcl_node_is_valid+0x10>
 8017576:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017578:	b113      	cbz	r3, 8017580 <rcl_node_is_valid+0x10>
 801757a:	6800      	ldr	r0, [r0, #0]
 801757c:	f7ff bd18 	b.w	8016fb0 <rcl_context_is_valid>
 8017580:	2000      	movs	r0, #0
 8017582:	4770      	bx	lr

08017584 <rcl_node_get_name>:
 8017584:	b120      	cbz	r0, 8017590 <rcl_node_get_name+0xc>
 8017586:	6840      	ldr	r0, [r0, #4]
 8017588:	b110      	cbz	r0, 8017590 <rcl_node_get_name+0xc>
 801758a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801758c:	b100      	cbz	r0, 8017590 <rcl_node_get_name+0xc>
 801758e:	6880      	ldr	r0, [r0, #8]
 8017590:	4770      	bx	lr
 8017592:	bf00      	nop

08017594 <rcl_node_get_namespace>:
 8017594:	b120      	cbz	r0, 80175a0 <rcl_node_get_namespace+0xc>
 8017596:	6840      	ldr	r0, [r0, #4]
 8017598:	b110      	cbz	r0, 80175a0 <rcl_node_get_namespace+0xc>
 801759a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801759c:	b100      	cbz	r0, 80175a0 <rcl_node_get_namespace+0xc>
 801759e:	68c0      	ldr	r0, [r0, #12]
 80175a0:	4770      	bx	lr
 80175a2:	bf00      	nop

080175a4 <rcl_node_get_options>:
 80175a4:	b128      	cbz	r0, 80175b2 <rcl_node_get_options+0xe>
 80175a6:	6840      	ldr	r0, [r0, #4]
 80175a8:	b118      	cbz	r0, 80175b2 <rcl_node_get_options+0xe>
 80175aa:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	bf08      	it	eq
 80175b0:	2000      	moveq	r0, #0
 80175b2:	4770      	bx	lr

080175b4 <rcl_node_get_rmw_handle>:
 80175b4:	b110      	cbz	r0, 80175bc <rcl_node_get_rmw_handle+0x8>
 80175b6:	6840      	ldr	r0, [r0, #4]
 80175b8:	b100      	cbz	r0, 80175bc <rcl_node_get_rmw_handle+0x8>
 80175ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80175bc:	4770      	bx	lr
 80175be:	bf00      	nop

080175c0 <rcl_node_get_default_options>:
 80175c0:	b510      	push	{r4, lr}
 80175c2:	4604      	mov	r4, r0
 80175c4:	2268      	movs	r2, #104	@ 0x68
 80175c6:	2100      	movs	r1, #0
 80175c8:	f005 fc4e 	bl	801ce68 <memset>
 80175cc:	4620      	mov	r0, r4
 80175ce:	f7f8 fbcd 	bl	800fd6c <rcutils_get_default_allocator>
 80175d2:	2301      	movs	r3, #1
 80175d4:	4620      	mov	r0, r4
 80175d6:	7523      	strb	r3, [r4, #20]
 80175d8:	bd10      	pop	{r4, pc}
 80175da:	bf00      	nop

080175dc <rcl_node_options_copy>:
 80175dc:	2800      	cmp	r0, #0
 80175de:	bf18      	it	ne
 80175e0:	4288      	cmpne	r0, r1
 80175e2:	d01b      	beq.n	801761c <rcl_node_options_copy+0x40>
 80175e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e6:	fab1 f681 	clz	r6, r1
 80175ea:	460c      	mov	r4, r1
 80175ec:	0976      	lsrs	r6, r6, #5
 80175ee:	b199      	cbz	r1, 8017618 <rcl_node_options_copy+0x3c>
 80175f0:	4605      	mov	r5, r0
 80175f2:	8a87      	ldrh	r7, [r0, #20]
 80175f4:	4684      	mov	ip, r0
 80175f6:	468e      	mov	lr, r1
 80175f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80175fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80175fe:	682b      	ldr	r3, [r5, #0]
 8017600:	2250      	movs	r2, #80	@ 0x50
 8017602:	f10c 0118 	add.w	r1, ip, #24
 8017606:	f104 0018 	add.w	r0, r4, #24
 801760a:	f8ce 3000 	str.w	r3, [lr]
 801760e:	82a7      	strh	r7, [r4, #20]
 8017610:	f005 fcf3 	bl	801cffa <memcpy>
 8017614:	4630      	mov	r0, r6
 8017616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017618:	200b      	movs	r0, #11
 801761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801761c:	200b      	movs	r0, #11
 801761e:	4770      	bx	lr

08017620 <rcl_node_resolve_name>:
 8017620:	b082      	sub	sp, #8
 8017622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017626:	b091      	sub	sp, #68	@ 0x44
 8017628:	ac1a      	add	r4, sp, #104	@ 0x68
 801762a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801762e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017632:	2800      	cmp	r0, #0
 8017634:	d03d      	beq.n	80176b2 <rcl_node_resolve_name+0x92>
 8017636:	460c      	mov	r4, r1
 8017638:	4605      	mov	r5, r0
 801763a:	f7ff ffb3 	bl	80175a4 <rcl_node_get_options>
 801763e:	2800      	cmp	r0, #0
 8017640:	d03a      	beq.n	80176b8 <rcl_node_resolve_name+0x98>
 8017642:	4628      	mov	r0, r5
 8017644:	f7ff ff9e 	bl	8017584 <rcl_node_get_name>
 8017648:	4606      	mov	r6, r0
 801764a:	4628      	mov	r0, r5
 801764c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801764e:	f7ff ffa1 	bl	8017594 <rcl_node_get_namespace>
 8017652:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8017656:	4607      	mov	r7, r0
 8017658:	46ac      	mov	ip, r5
 801765a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801765e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017662:	f8de 3000 	ldr.w	r3, [lr]
 8017666:	f8cc 3000 	str.w	r3, [ip]
 801766a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801766c:	b30b      	cbz	r3, 80176b2 <rcl_node_resolve_name+0x92>
 801766e:	4689      	mov	r9, r1
 8017670:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8017674:	f002 fc64 	bl	8019f40 <rcutils_get_zero_initialized_string_map>
 8017678:	ab10      	add	r3, sp, #64	@ 0x40
 801767a:	9008      	str	r0, [sp, #32]
 801767c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8017680:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017684:	2100      	movs	r1, #0
 8017686:	a808      	add	r0, sp, #32
 8017688:	e895 000c 	ldmia.w	r5, {r2, r3}
 801768c:	f002 fcce 	bl	801a02c <rcutils_string_map_init>
 8017690:	4683      	mov	fp, r0
 8017692:	b1a0      	cbz	r0, 80176be <rcl_node_resolve_name+0x9e>
 8017694:	f7f8 fb86 	bl	800fda4 <rcutils_get_error_string>
 8017698:	f7f8 fb9a 	bl	800fdd0 <rcutils_reset_error>
 801769c:	f1bb 0f0a 	cmp.w	fp, #10
 80176a0:	bf18      	it	ne
 80176a2:	f04f 0b01 	movne.w	fp, #1
 80176a6:	4658      	mov	r0, fp
 80176a8:	b011      	add	sp, #68	@ 0x44
 80176aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ae:	b002      	add	sp, #8
 80176b0:	4770      	bx	lr
 80176b2:	f04f 0b0b 	mov.w	fp, #11
 80176b6:	e7f6      	b.n	80176a6 <rcl_node_resolve_name+0x86>
 80176b8:	f04f 0b01 	mov.w	fp, #1
 80176bc:	e7f3      	b.n	80176a6 <rcl_node_resolve_name+0x86>
 80176be:	9009      	str	r0, [sp, #36]	@ 0x24
 80176c0:	9007      	str	r0, [sp, #28]
 80176c2:	a808      	add	r0, sp, #32
 80176c4:	f004 fc78 	bl	801bfb8 <rcl_get_default_topic_name_substitutions>
 80176c8:	4683      	mov	fp, r0
 80176ca:	b180      	cbz	r0, 80176ee <rcl_node_resolve_name+0xce>
 80176cc:	280a      	cmp	r0, #10
 80176ce:	a808      	add	r0, sp, #32
 80176d0:	bf18      	it	ne
 80176d2:	f04f 0b01 	movne.w	fp, #1
 80176d6:	f002 fce9 	bl	801a0ac <rcutils_string_map_fini>
 80176da:	4604      	mov	r4, r0
 80176dc:	2800      	cmp	r0, #0
 80176de:	d15b      	bne.n	8017798 <rcl_node_resolve_name+0x178>
 80176e0:	4651      	mov	r1, sl
 80176e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176e4:	47c8      	blx	r9
 80176e6:	4651      	mov	r1, sl
 80176e8:	4620      	mov	r0, r4
 80176ea:	47c8      	blx	r9
 80176ec:	e7db      	b.n	80176a6 <rcl_node_resolve_name+0x86>
 80176ee:	ab09      	add	r3, sp, #36	@ 0x24
 80176f0:	46ec      	mov	ip, sp
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80176f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80176fa:	682b      	ldr	r3, [r5, #0]
 80176fc:	463a      	mov	r2, r7
 80176fe:	4631      	mov	r1, r6
 8017700:	4620      	mov	r0, r4
 8017702:	f8cc 3000 	str.w	r3, [ip]
 8017706:	ab08      	add	r3, sp, #32
 8017708:	f004 faf6 	bl	801bcf8 <rcl_expand_topic_name>
 801770c:	4683      	mov	fp, r0
 801770e:	b9d8      	cbnz	r0, 8017748 <rcl_node_resolve_name+0x128>
 8017710:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017712:	4602      	mov	r2, r0
 8017714:	9009      	str	r0, [sp, #36]	@ 0x24
 8017716:	a90a      	add	r1, sp, #40	@ 0x28
 8017718:	4620      	mov	r0, r4
 801771a:	f002 fde5 	bl	801a2e8 <rmw_validate_full_topic_name>
 801771e:	bb50      	cbnz	r0, 8017776 <rcl_node_resolve_name+0x156>
 8017720:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017722:	2d00      	cmp	r5, #0
 8017724:	d140      	bne.n	80177a8 <rcl_node_resolve_name+0x188>
 8017726:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017728:	a808      	add	r0, sp, #32
 801772a:	601c      	str	r4, [r3, #0]
 801772c:	f002 fcbe 	bl	801a0ac <rcutils_string_map_fini>
 8017730:	4683      	mov	fp, r0
 8017732:	2800      	cmp	r0, #0
 8017734:	d043      	beq.n	80177be <rcl_node_resolve_name+0x19e>
 8017736:	f7f8 fb35 	bl	800fda4 <rcutils_get_error_string>
 801773a:	46a8      	mov	r8, r5
 801773c:	f04f 0b01 	mov.w	fp, #1
 8017740:	462c      	mov	r4, r5
 8017742:	f7f8 fb45 	bl	800fdd0 <rcutils_reset_error>
 8017746:	e00a      	b.n	801775e <rcl_node_resolve_name+0x13e>
 8017748:	2867      	cmp	r0, #103	@ 0x67
 801774a:	bf14      	ite	ne
 801774c:	f04f 0800 	movne.w	r8, #0
 8017750:	f008 0801 	andeq.w	r8, r8, #1
 8017754:	9c07      	ldr	r4, [sp, #28]
 8017756:	a808      	add	r0, sp, #32
 8017758:	f002 fca8 	bl	801a0ac <rcutils_string_map_fini>
 801775c:	bb50      	cbnz	r0, 80177b4 <rcl_node_resolve_name+0x194>
 801775e:	4651      	mov	r1, sl
 8017760:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017762:	47c8      	blx	r9
 8017764:	4651      	mov	r1, sl
 8017766:	4620      	mov	r0, r4
 8017768:	47c8      	blx	r9
 801776a:	f1b8 0f00 	cmp.w	r8, #0
 801776e:	bf18      	it	ne
 8017770:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8017774:	e797      	b.n	80176a6 <rcl_node_resolve_name+0x86>
 8017776:	f7f8 fb15 	bl	800fda4 <rcutils_get_error_string>
 801777a:	f7f8 fb29 	bl	800fdd0 <rcutils_reset_error>
 801777e:	a808      	add	r0, sp, #32
 8017780:	f002 fc94 	bl	801a0ac <rcutils_string_map_fini>
 8017784:	b998      	cbnz	r0, 80177ae <rcl_node_resolve_name+0x18e>
 8017786:	4651      	mov	r1, sl
 8017788:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801778a:	47c8      	blx	r9
 801778c:	4651      	mov	r1, sl
 801778e:	4620      	mov	r0, r4
 8017790:	f04f 0b01 	mov.w	fp, #1
 8017794:	47c8      	blx	r9
 8017796:	e786      	b.n	80176a6 <rcl_node_resolve_name+0x86>
 8017798:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801779c:	f7f8 fb02 	bl	800fda4 <rcutils_get_error_string>
 80177a0:	f7f8 fb16 	bl	800fdd0 <rcutils_reset_error>
 80177a4:	4644      	mov	r4, r8
 80177a6:	e7da      	b.n	801775e <rcl_node_resolve_name+0x13e>
 80177a8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80177ac:	e7d3      	b.n	8017756 <rcl_node_resolve_name+0x136>
 80177ae:	46d8      	mov	r8, fp
 80177b0:	f04f 0b01 	mov.w	fp, #1
 80177b4:	f7f8 faf6 	bl	800fda4 <rcutils_get_error_string>
 80177b8:	f7f8 fb0a 	bl	800fdd0 <rcutils_reset_error>
 80177bc:	e7cf      	b.n	801775e <rcl_node_resolve_name+0x13e>
 80177be:	4651      	mov	r1, sl
 80177c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177c2:	47c8      	blx	r9
 80177c4:	4651      	mov	r1, sl
 80177c6:	4658      	mov	r0, fp
 80177c8:	47c8      	blx	r9
 80177ca:	e76c      	b.n	80176a6 <rcl_node_resolve_name+0x86>

080177cc <exact_match_lookup>:
 80177cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177ce:	f102 0708 	add.w	r7, r2, #8
 80177d2:	460b      	mov	r3, r1
 80177d4:	b085      	sub	sp, #20
 80177d6:	4614      	mov	r4, r2
 80177d8:	4606      	mov	r6, r0
 80177da:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80177de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80177e2:	4618      	mov	r0, r3
 80177e4:	4919      	ldr	r1, [pc, #100]	@ (801784c <exact_match_lookup+0x80>)
 80177e6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80177ea:	f002 fa23 	bl	8019c34 <rcutils_join_path>
 80177ee:	7833      	ldrb	r3, [r6, #0]
 80177f0:	4605      	mov	r5, r0
 80177f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80177f4:	d023      	beq.n	801783e <exact_match_lookup+0x72>
 80177f6:	f104 030c 	add.w	r3, r4, #12
 80177fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80177fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017802:	1c70      	adds	r0, r6, #1
 8017804:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017808:	f002 fa1a 	bl	8019c40 <rcutils_to_native_path>
 801780c:	4606      	mov	r6, r0
 801780e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017812:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017816:	4631      	mov	r1, r6
 8017818:	4628      	mov	r0, r5
 801781a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801781e:	f002 fa09 	bl	8019c34 <rcutils_join_path>
 8017822:	4603      	mov	r3, r0
 8017824:	4630      	mov	r0, r6
 8017826:	6862      	ldr	r2, [r4, #4]
 8017828:	461e      	mov	r6, r3
 801782a:	6921      	ldr	r1, [r4, #16]
 801782c:	4790      	blx	r2
 801782e:	4628      	mov	r0, r5
 8017830:	4635      	mov	r5, r6
 8017832:	6863      	ldr	r3, [r4, #4]
 8017834:	6921      	ldr	r1, [r4, #16]
 8017836:	4798      	blx	r3
 8017838:	4628      	mov	r0, r5
 801783a:	b005      	add	sp, #20
 801783c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801783e:	7873      	ldrb	r3, [r6, #1]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d1d8      	bne.n	80177f6 <exact_match_lookup+0x2a>
 8017844:	4628      	mov	r0, r5
 8017846:	b005      	add	sp, #20
 8017848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801784a:	bf00      	nop
 801784c:	0801e610 	.word	0x0801e610

08017850 <rcl_get_secure_root>:
 8017850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017854:	b085      	sub	sp, #20
 8017856:	b168      	cbz	r0, 8017874 <rcl_get_secure_root+0x24>
 8017858:	4607      	mov	r7, r0
 801785a:	4608      	mov	r0, r1
 801785c:	460c      	mov	r4, r1
 801785e:	f7f8 fa93 	bl	800fd88 <rcutils_allocator_is_valid>
 8017862:	b138      	cbz	r0, 8017874 <rcl_get_secure_root+0x24>
 8017864:	2300      	movs	r3, #0
 8017866:	482d      	ldr	r0, [pc, #180]	@ (801791c <rcl_get_secure_root+0xcc>)
 8017868:	a903      	add	r1, sp, #12
 801786a:	9303      	str	r3, [sp, #12]
 801786c:	f002 f9c8 	bl	8019c00 <rcutils_get_env>
 8017870:	4605      	mov	r5, r0
 8017872:	b120      	cbz	r0, 801787e <rcl_get_secure_root+0x2e>
 8017874:	2500      	movs	r5, #0
 8017876:	4628      	mov	r0, r5
 8017878:	b005      	add	sp, #20
 801787a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801787e:	9b03      	ldr	r3, [sp, #12]
 8017880:	781a      	ldrb	r2, [r3, #0]
 8017882:	2a00      	cmp	r2, #0
 8017884:	d0f6      	beq.n	8017874 <rcl_get_secure_root+0x24>
 8017886:	f104 090c 	add.w	r9, r4, #12
 801788a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801788e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017892:	4618      	mov	r0, r3
 8017894:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017898:	f002 fb14 	bl	8019ec4 <rcutils_strdup>
 801789c:	4680      	mov	r8, r0
 801789e:	2800      	cmp	r0, #0
 80178a0:	d0e8      	beq.n	8017874 <rcl_get_secure_root+0x24>
 80178a2:	a903      	add	r1, sp, #12
 80178a4:	481e      	ldr	r0, [pc, #120]	@ (8017920 <rcl_get_secure_root+0xd0>)
 80178a6:	9503      	str	r5, [sp, #12]
 80178a8:	f002 f9aa 	bl	8019c00 <rcutils_get_env>
 80178ac:	b160      	cbz	r0, 80178c8 <rcl_get_secure_root+0x78>
 80178ae:	2600      	movs	r6, #0
 80178b0:	4630      	mov	r0, r6
 80178b2:	6863      	ldr	r3, [r4, #4]
 80178b4:	6921      	ldr	r1, [r4, #16]
 80178b6:	4798      	blx	r3
 80178b8:	4640      	mov	r0, r8
 80178ba:	6863      	ldr	r3, [r4, #4]
 80178bc:	6921      	ldr	r1, [r4, #16]
 80178be:	4798      	blx	r3
 80178c0:	4628      	mov	r0, r5
 80178c2:	b005      	add	sp, #20
 80178c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178c8:	9b03      	ldr	r3, [sp, #12]
 80178ca:	781e      	ldrb	r6, [r3, #0]
 80178cc:	b1f6      	cbz	r6, 801790c <rcl_get_secure_root+0xbc>
 80178ce:	e899 0003 	ldmia.w	r9, {r0, r1}
 80178d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80178d6:	4618      	mov	r0, r3
 80178d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80178dc:	f002 faf2 	bl	8019ec4 <rcutils_strdup>
 80178e0:	4606      	mov	r6, r0
 80178e2:	2800      	cmp	r0, #0
 80178e4:	d0e3      	beq.n	80178ae <rcl_get_secure_root+0x5e>
 80178e6:	4622      	mov	r2, r4
 80178e8:	4641      	mov	r1, r8
 80178ea:	f7ff ff6f 	bl	80177cc <exact_match_lookup>
 80178ee:	4605      	mov	r5, r0
 80178f0:	2d00      	cmp	r5, #0
 80178f2:	d0dd      	beq.n	80178b0 <rcl_get_secure_root+0x60>
 80178f4:	4628      	mov	r0, r5
 80178f6:	f002 f99b 	bl	8019c30 <rcutils_is_directory>
 80178fa:	4603      	mov	r3, r0
 80178fc:	2800      	cmp	r0, #0
 80178fe:	d1d7      	bne.n	80178b0 <rcl_get_secure_root+0x60>
 8017900:	4628      	mov	r0, r5
 8017902:	6921      	ldr	r1, [r4, #16]
 8017904:	461d      	mov	r5, r3
 8017906:	6863      	ldr	r3, [r4, #4]
 8017908:	4798      	blx	r3
 801790a:	e7d1      	b.n	80178b0 <rcl_get_secure_root+0x60>
 801790c:	4622      	mov	r2, r4
 801790e:	4638      	mov	r0, r7
 8017910:	4641      	mov	r1, r8
 8017912:	f7ff ff5b 	bl	80177cc <exact_match_lookup>
 8017916:	4605      	mov	r5, r0
 8017918:	e7ea      	b.n	80178f0 <rcl_get_secure_root+0xa0>
 801791a:	bf00      	nop
 801791c:	0801e61c 	.word	0x0801e61c
 8017920:	0801e634 	.word	0x0801e634

08017924 <rcl_get_security_options_from_environment>:
 8017924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017928:	b082      	sub	sp, #8
 801792a:	2300      	movs	r3, #0
 801792c:	4606      	mov	r6, r0
 801792e:	460f      	mov	r7, r1
 8017930:	4821      	ldr	r0, [pc, #132]	@ (80179b8 <rcl_get_security_options_from_environment+0x94>)
 8017932:	a901      	add	r1, sp, #4
 8017934:	4690      	mov	r8, r2
 8017936:	9301      	str	r3, [sp, #4]
 8017938:	f002 f962 	bl	8019c00 <rcutils_get_env>
 801793c:	b120      	cbz	r0, 8017948 <rcl_get_security_options_from_environment+0x24>
 801793e:	2501      	movs	r5, #1
 8017940:	4628      	mov	r0, r5
 8017942:	b002      	add	sp, #8
 8017944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017948:	4604      	mov	r4, r0
 801794a:	491c      	ldr	r1, [pc, #112]	@ (80179bc <rcl_get_security_options_from_environment+0x98>)
 801794c:	9801      	ldr	r0, [sp, #4]
 801794e:	f7e8 fcc7 	bl	80002e0 <strcmp>
 8017952:	4605      	mov	r5, r0
 8017954:	b9f0      	cbnz	r0, 8017994 <rcl_get_security_options_from_environment+0x70>
 8017956:	9001      	str	r0, [sp, #4]
 8017958:	f1b8 0f00 	cmp.w	r8, #0
 801795c:	d021      	beq.n	80179a2 <rcl_get_security_options_from_environment+0x7e>
 801795e:	a901      	add	r1, sp, #4
 8017960:	4817      	ldr	r0, [pc, #92]	@ (80179c0 <rcl_get_security_options_from_environment+0x9c>)
 8017962:	f002 f94d 	bl	8019c00 <rcutils_get_env>
 8017966:	2800      	cmp	r0, #0
 8017968:	d1e9      	bne.n	801793e <rcl_get_security_options_from_environment+0x1a>
 801796a:	4916      	ldr	r1, [pc, #88]	@ (80179c4 <rcl_get_security_options_from_environment+0xa0>)
 801796c:	9801      	ldr	r0, [sp, #4]
 801796e:	f7e8 fcb7 	bl	80002e0 <strcmp>
 8017972:	4603      	mov	r3, r0
 8017974:	4639      	mov	r1, r7
 8017976:	4630      	mov	r0, r6
 8017978:	fab3 f383 	clz	r3, r3
 801797c:	095b      	lsrs	r3, r3, #5
 801797e:	f888 3000 	strb.w	r3, [r8]
 8017982:	f7ff ff65 	bl	8017850 <rcl_get_secure_root>
 8017986:	b170      	cbz	r0, 80179a6 <rcl_get_security_options_from_environment+0x82>
 8017988:	f8c8 0004 	str.w	r0, [r8, #4]
 801798c:	4628      	mov	r0, r5
 801798e:	b002      	add	sp, #8
 8017990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017994:	4625      	mov	r5, r4
 8017996:	f888 4000 	strb.w	r4, [r8]
 801799a:	4628      	mov	r0, r5
 801799c:	b002      	add	sp, #8
 801799e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a2:	250b      	movs	r5, #11
 80179a4:	e7cc      	b.n	8017940 <rcl_get_security_options_from_environment+0x1c>
 80179a6:	f898 5000 	ldrb.w	r5, [r8]
 80179aa:	f1a5 0501 	sub.w	r5, r5, #1
 80179ae:	fab5 f585 	clz	r5, r5
 80179b2:	096d      	lsrs	r5, r5, #5
 80179b4:	e7c4      	b.n	8017940 <rcl_get_security_options_from_environment+0x1c>
 80179b6:	bf00      	nop
 80179b8:	0801e5d4 	.word	0x0801e5d4
 80179bc:	0801e5e8 	.word	0x0801e5e8
 80179c0:	0801e5f0 	.word	0x0801e5f0
 80179c4:	0801e608 	.word	0x0801e608

080179c8 <rcl_service_get_rmw_handle>:
 80179c8:	b118      	cbz	r0, 80179d2 <rcl_service_get_rmw_handle+0xa>
 80179ca:	6800      	ldr	r0, [r0, #0]
 80179cc:	b108      	cbz	r0, 80179d2 <rcl_service_get_rmw_handle+0xa>
 80179ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80179d2:	4770      	bx	lr

080179d4 <rcl_take_request>:
 80179d4:	b570      	push	{r4, r5, r6, lr}
 80179d6:	468e      	mov	lr, r1
 80179d8:	b08c      	sub	sp, #48	@ 0x30
 80179da:	460c      	mov	r4, r1
 80179dc:	4616      	mov	r6, r2
 80179de:	f10d 0c18 	add.w	ip, sp, #24
 80179e2:	4605      	mov	r5, r0
 80179e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80179e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179ec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80179f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80179f4:	b30d      	cbz	r5, 8017a3a <rcl_take_request+0x66>
 80179f6:	682b      	ldr	r3, [r5, #0]
 80179f8:	b1fb      	cbz	r3, 8017a3a <rcl_take_request+0x66>
 80179fa:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80179fe:	b1e0      	cbz	r0, 8017a3a <rcl_take_request+0x66>
 8017a00:	b336      	cbz	r6, 8017a50 <rcl_take_request+0x7c>
 8017a02:	2300      	movs	r3, #0
 8017a04:	4632      	mov	r2, r6
 8017a06:	a902      	add	r1, sp, #8
 8017a08:	f88d 3007 	strb.w	r3, [sp, #7]
 8017a0c:	f10d 0307 	add.w	r3, sp, #7
 8017a10:	f002 ffce 	bl	801a9b0 <rmw_take_request>
 8017a14:	4605      	mov	r5, r0
 8017a16:	b198      	cbz	r0, 8017a40 <rcl_take_request+0x6c>
 8017a18:	280a      	cmp	r0, #10
 8017a1a:	bf18      	it	ne
 8017a1c:	2501      	movne	r5, #1
 8017a1e:	f10d 0e18 	add.w	lr, sp, #24
 8017a22:	46a4      	mov	ip, r4
 8017a24:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a2c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017a30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017a34:	4628      	mov	r0, r5
 8017a36:	b00c      	add	sp, #48	@ 0x30
 8017a38:	bd70      	pop	{r4, r5, r6, pc}
 8017a3a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8017a3e:	e7ee      	b.n	8017a1e <rcl_take_request+0x4a>
 8017a40:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017a44:	f240 2359 	movw	r3, #601	@ 0x259
 8017a48:	2a00      	cmp	r2, #0
 8017a4a:	bf08      	it	eq
 8017a4c:	461d      	moveq	r5, r3
 8017a4e:	e7e6      	b.n	8017a1e <rcl_take_request+0x4a>
 8017a50:	250b      	movs	r5, #11
 8017a52:	e7e4      	b.n	8017a1e <rcl_take_request+0x4a>

08017a54 <rcl_send_response>:
 8017a54:	b170      	cbz	r0, 8017a74 <rcl_send_response+0x20>
 8017a56:	6800      	ldr	r0, [r0, #0]
 8017a58:	b160      	cbz	r0, 8017a74 <rcl_send_response+0x20>
 8017a5a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017a5e:	b148      	cbz	r0, 8017a74 <rcl_send_response+0x20>
 8017a60:	b169      	cbz	r1, 8017a7e <rcl_send_response+0x2a>
 8017a62:	b510      	push	{r4, lr}
 8017a64:	b14a      	cbz	r2, 8017a7a <rcl_send_response+0x26>
 8017a66:	f003 f801 	bl	801aa6c <rmw_send_response>
 8017a6a:	b110      	cbz	r0, 8017a72 <rcl_send_response+0x1e>
 8017a6c:	2802      	cmp	r0, #2
 8017a6e:	bf18      	it	ne
 8017a70:	2001      	movne	r0, #1
 8017a72:	bd10      	pop	{r4, pc}
 8017a74:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8017a78:	4770      	bx	lr
 8017a7a:	200b      	movs	r0, #11
 8017a7c:	bd10      	pop	{r4, pc}
 8017a7e:	200b      	movs	r0, #11
 8017a80:	4770      	bx	lr
 8017a82:	bf00      	nop

08017a84 <rcl_service_is_valid>:
 8017a84:	b130      	cbz	r0, 8017a94 <rcl_service_is_valid+0x10>
 8017a86:	6800      	ldr	r0, [r0, #0]
 8017a88:	b120      	cbz	r0, 8017a94 <rcl_service_is_valid+0x10>
 8017a8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017a8e:	3800      	subs	r0, #0
 8017a90:	bf18      	it	ne
 8017a92:	2001      	movne	r0, #1
 8017a94:	4770      	bx	lr
 8017a96:	bf00      	nop

08017a98 <rcl_take>:
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	d049      	beq.n	8017b30 <rcl_take+0x98>
 8017a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aa0:	4615      	mov	r5, r2
 8017aa2:	6802      	ldr	r2, [r0, #0]
 8017aa4:	b0a4      	sub	sp, #144	@ 0x90
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	2a00      	cmp	r2, #0
 8017aaa:	d039      	beq.n	8017b20 <rcl_take+0x88>
 8017aac:	461f      	mov	r7, r3
 8017aae:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8017ab2:	b3ab      	cbz	r3, 8017b20 <rcl_take+0x88>
 8017ab4:	460e      	mov	r6, r1
 8017ab6:	2900      	cmp	r1, #0
 8017ab8:	d038      	beq.n	8017b2c <rcl_take+0x94>
 8017aba:	2d00      	cmp	r5, #0
 8017abc:	d03c      	beq.n	8017b38 <rcl_take+0xa0>
 8017abe:	a802      	add	r0, sp, #8
 8017ac0:	f04f 0800 	mov.w	r8, #0
 8017ac4:	f002 fc08 	bl	801a2d8 <rmw_get_zero_initialized_message_info>
 8017ac8:	f10d 0c08 	add.w	ip, sp, #8
 8017acc:	46ae      	mov	lr, r5
 8017ace:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ad2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017ad6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ada:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017ade:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017ae2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017ae6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017aea:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017aee:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8017af2:	462b      	mov	r3, r5
 8017af4:	6820      	ldr	r0, [r4, #0]
 8017af6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8017afa:	4631      	mov	r1, r6
 8017afc:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b00:	9700      	str	r7, [sp, #0]
 8017b02:	f003 f857 	bl	801abb4 <rmw_take_with_info>
 8017b06:	4603      	mov	r3, r0
 8017b08:	b9c0      	cbnz	r0, 8017b3c <rcl_take+0xa4>
 8017b0a:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8017b0e:	f240 1291 	movw	r2, #401	@ 0x191
 8017b12:	2900      	cmp	r1, #0
 8017b14:	bf08      	it	eq
 8017b16:	4613      	moveq	r3, r2
 8017b18:	4618      	mov	r0, r3
 8017b1a:	b024      	add	sp, #144	@ 0x90
 8017b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b20:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017b24:	4618      	mov	r0, r3
 8017b26:	b024      	add	sp, #144	@ 0x90
 8017b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b2c:	230b      	movs	r3, #11
 8017b2e:	e7f3      	b.n	8017b18 <rcl_take+0x80>
 8017b30:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017b34:	4618      	mov	r0, r3
 8017b36:	4770      	bx	lr
 8017b38:	ad14      	add	r5, sp, #80	@ 0x50
 8017b3a:	e7c0      	b.n	8017abe <rcl_take+0x26>
 8017b3c:	f7ff fa1a 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 8017b40:	4603      	mov	r3, r0
 8017b42:	e7e9      	b.n	8017b18 <rcl_take+0x80>

08017b44 <rcl_subscription_get_rmw_handle>:
 8017b44:	b118      	cbz	r0, 8017b4e <rcl_subscription_get_rmw_handle+0xa>
 8017b46:	6800      	ldr	r0, [r0, #0]
 8017b48:	b108      	cbz	r0, 8017b4e <rcl_subscription_get_rmw_handle+0xa>
 8017b4a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b4e:	4770      	bx	lr

08017b50 <rcl_subscription_is_valid>:
 8017b50:	b130      	cbz	r0, 8017b60 <rcl_subscription_is_valid+0x10>
 8017b52:	6800      	ldr	r0, [r0, #0]
 8017b54:	b120      	cbz	r0, 8017b60 <rcl_subscription_is_valid+0x10>
 8017b56:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b5a:	3800      	subs	r0, #0
 8017b5c:	bf18      	it	ne
 8017b5e:	2001      	movne	r0, #1
 8017b60:	4770      	bx	lr
 8017b62:	bf00      	nop

08017b64 <rcl_get_system_time>:
 8017b64:	4608      	mov	r0, r1
 8017b66:	f7f8 b94f 	b.w	800fe08 <rcutils_system_time_now>
 8017b6a:	bf00      	nop

08017b6c <rcl_get_steady_time>:
 8017b6c:	4608      	mov	r0, r1
 8017b6e:	f7f8 b971 	b.w	800fe54 <rcutils_steady_time_now>
 8017b72:	bf00      	nop

08017b74 <rcl_get_ros_time>:
 8017b74:	7a03      	ldrb	r3, [r0, #8]
 8017b76:	b510      	push	{r4, lr}
 8017b78:	460c      	mov	r4, r1
 8017b7a:	b143      	cbz	r3, 8017b8e <rcl_get_ros_time+0x1a>
 8017b7c:	2105      	movs	r1, #5
 8017b7e:	f001 ff9b 	bl	8019ab8 <__atomic_load_8>
 8017b82:	4602      	mov	r2, r0
 8017b84:	460b      	mov	r3, r1
 8017b86:	2000      	movs	r0, #0
 8017b88:	e9c4 2300 	strd	r2, r3, [r4]
 8017b8c:	bd10      	pop	{r4, pc}
 8017b8e:	4608      	mov	r0, r1
 8017b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b94:	f7f8 b938 	b.w	800fe08 <rcutils_system_time_now>

08017b98 <rcl_clock_init>:
 8017b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b9a:	4605      	mov	r5, r0
 8017b9c:	4610      	mov	r0, r2
 8017b9e:	4614      	mov	r4, r2
 8017ba0:	460e      	mov	r6, r1
 8017ba2:	f7f8 f8f1 	bl	800fd88 <rcutils_allocator_is_valid>
 8017ba6:	b128      	cbz	r0, 8017bb4 <rcl_clock_init+0x1c>
 8017ba8:	2d03      	cmp	r5, #3
 8017baa:	d803      	bhi.n	8017bb4 <rcl_clock_init+0x1c>
 8017bac:	e8df f005 	tbb	[pc, r5]
 8017bb0:	0659301f 	.word	0x0659301f
 8017bb4:	f04f 0c0b 	mov.w	ip, #11
 8017bb8:	4660      	mov	r0, ip
 8017bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bbc:	2c00      	cmp	r4, #0
 8017bbe:	d0f9      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017bc0:	fab6 f386 	clz	r3, r6
 8017bc4:	095b      	lsrs	r3, r3, #5
 8017bc6:	2e00      	cmp	r6, #0
 8017bc8:	d0f4      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017bca:	6133      	str	r3, [r6, #16]
 8017bcc:	469c      	mov	ip, r3
 8017bce:	f106 0514 	add.w	r5, r6, #20
 8017bd2:	4f32      	ldr	r7, [pc, #200]	@ (8017c9c <rcl_clock_init+0x104>)
 8017bd4:	f04f 0e03 	mov.w	lr, #3
 8017bd8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017be0:	6823      	ldr	r3, [r4, #0]
 8017be2:	4660      	mov	r0, ip
 8017be4:	602b      	str	r3, [r5, #0]
 8017be6:	60f7      	str	r7, [r6, #12]
 8017be8:	f886 e000 	strb.w	lr, [r6]
 8017bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bee:	2e00      	cmp	r6, #0
 8017bf0:	d0e0      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	f106 0514 	add.w	r5, r6, #20
 8017bf8:	7033      	strb	r3, [r6, #0]
 8017bfa:	469c      	mov	ip, r3
 8017bfc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017c00:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c08:	6823      	ldr	r3, [r4, #0]
 8017c0a:	4660      	mov	r0, ip
 8017c0c:	602b      	str	r3, [r5, #0]
 8017c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c10:	2c00      	cmp	r4, #0
 8017c12:	d0cf      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017c14:	fab6 f586 	clz	r5, r6
 8017c18:	096d      	lsrs	r5, r5, #5
 8017c1a:	2e00      	cmp	r6, #0
 8017c1c:	d0ca      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017c1e:	46a6      	mov	lr, r4
 8017c20:	7035      	strb	r5, [r6, #0]
 8017c22:	f106 0c14 	add.w	ip, r6, #20
 8017c26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017c2a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017c2e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8017c32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c36:	f8de 3000 	ldr.w	r3, [lr]
 8017c3a:	2010      	movs	r0, #16
 8017c3c:	f8cc 3000 	str.w	r3, [ip]
 8017c40:	6823      	ldr	r3, [r4, #0]
 8017c42:	6921      	ldr	r1, [r4, #16]
 8017c44:	4798      	blx	r3
 8017c46:	6130      	str	r0, [r6, #16]
 8017c48:	b320      	cbz	r0, 8017c94 <rcl_clock_init+0xfc>
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	46ac      	mov	ip, r5
 8017c50:	7205      	strb	r5, [r0, #8]
 8017c52:	e9c0 2300 	strd	r2, r3, [r0]
 8017c56:	4a12      	ldr	r2, [pc, #72]	@ (8017ca0 <rcl_clock_init+0x108>)
 8017c58:	2301      	movs	r3, #1
 8017c5a:	4660      	mov	r0, ip
 8017c5c:	60f2      	str	r2, [r6, #12]
 8017c5e:	7033      	strb	r3, [r6, #0]
 8017c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c62:	2c00      	cmp	r4, #0
 8017c64:	d0a6      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017c66:	fab6 f386 	clz	r3, r6
 8017c6a:	095b      	lsrs	r3, r3, #5
 8017c6c:	2e00      	cmp	r6, #0
 8017c6e:	d0a1      	beq.n	8017bb4 <rcl_clock_init+0x1c>
 8017c70:	6133      	str	r3, [r6, #16]
 8017c72:	469c      	mov	ip, r3
 8017c74:	f106 0514 	add.w	r5, r6, #20
 8017c78:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8017ca4 <rcl_clock_init+0x10c>
 8017c7c:	2702      	movs	r7, #2
 8017c7e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c86:	6823      	ldr	r3, [r4, #0]
 8017c88:	4660      	mov	r0, ip
 8017c8a:	602b      	str	r3, [r5, #0]
 8017c8c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017c90:	7037      	strb	r7, [r6, #0]
 8017c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c94:	f04f 0c0a 	mov.w	ip, #10
 8017c98:	e78e      	b.n	8017bb8 <rcl_clock_init+0x20>
 8017c9a:	bf00      	nop
 8017c9c:	08017b6d 	.word	0x08017b6d
 8017ca0:	08017b75 	.word	0x08017b75
 8017ca4:	08017b65 	.word	0x08017b65

08017ca8 <rcl_clock_get_now>:
 8017ca8:	b140      	cbz	r0, 8017cbc <rcl_clock_get_now+0x14>
 8017caa:	b139      	cbz	r1, 8017cbc <rcl_clock_get_now+0x14>
 8017cac:	7803      	ldrb	r3, [r0, #0]
 8017cae:	b11b      	cbz	r3, 8017cb8 <rcl_clock_get_now+0x10>
 8017cb0:	68c3      	ldr	r3, [r0, #12]
 8017cb2:	b10b      	cbz	r3, 8017cb8 <rcl_clock_get_now+0x10>
 8017cb4:	6900      	ldr	r0, [r0, #16]
 8017cb6:	4718      	bx	r3
 8017cb8:	2001      	movs	r0, #1
 8017cba:	4770      	bx	lr
 8017cbc:	200b      	movs	r0, #11
 8017cbe:	4770      	bx	lr

08017cc0 <rcl_clock_add_jump_callback>:
 8017cc0:	b082      	sub	sp, #8
 8017cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc6:	a906      	add	r1, sp, #24
 8017cc8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 8017ccc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017cd0:	b330      	cbz	r0, 8017d20 <rcl_clock_add_jump_callback+0x60>
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	3014      	adds	r0, #20
 8017cd6:	f7f8 f857 	bl	800fd88 <rcutils_allocator_is_valid>
 8017cda:	b30d      	cbz	r5, 8017d20 <rcl_clock_add_jump_callback+0x60>
 8017cdc:	f080 0301 	eor.w	r3, r0, #1
 8017ce0:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8017ce4:	d11c      	bne.n	8017d20 <rcl_clock_add_jump_callback+0x60>
 8017ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ce8:	2a00      	cmp	r2, #0
 8017cea:	db19      	blt.n	8017d20 <rcl_clock_add_jump_callback+0x60>
 8017cec:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8017cf0:	2901      	cmp	r1, #1
 8017cf2:	f172 0200 	sbcs.w	r2, r2, #0
 8017cf6:	da13      	bge.n	8017d20 <rcl_clock_add_jump_callback+0x60>
 8017cf8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8017cfc:	2f00      	cmp	r7, #0
 8017cfe:	d040      	beq.n	8017d82 <rcl_clock_add_jump_callback+0xc2>
 8017d00:	4602      	mov	r2, r0
 8017d02:	e003      	b.n	8017d0c <rcl_clock_add_jump_callback+0x4c>
 8017d04:	42bb      	cmp	r3, r7
 8017d06:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8017d0a:	d010      	beq.n	8017d2e <rcl_clock_add_jump_callback+0x6e>
 8017d0c:	6811      	ldr	r1, [r2, #0]
 8017d0e:	3301      	adds	r3, #1
 8017d10:	42a9      	cmp	r1, r5
 8017d12:	d1f7      	bne.n	8017d04 <rcl_clock_add_jump_callback+0x44>
 8017d14:	6a11      	ldr	r1, [r2, #32]
 8017d16:	42b1      	cmp	r1, r6
 8017d18:	d1f4      	bne.n	8017d04 <rcl_clock_add_jump_callback+0x44>
 8017d1a:	f04f 0e01 	mov.w	lr, #1
 8017d1e:	e001      	b.n	8017d24 <rcl_clock_add_jump_callback+0x64>
 8017d20:	f04f 0e0b 	mov.w	lr, #11
 8017d24:	4670      	mov	r0, lr
 8017d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d2a:	b002      	add	sp, #8
 8017d2c:	4770      	bx	lr
 8017d2e:	3301      	adds	r3, #1
 8017d30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017d34:	00d9      	lsls	r1, r3, #3
 8017d36:	69e3      	ldr	r3, [r4, #28]
 8017d38:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017d3a:	4798      	blx	r3
 8017d3c:	b1f0      	cbz	r0, 8017d7c <rcl_clock_add_jump_callback+0xbc>
 8017d3e:	68a3      	ldr	r3, [r4, #8]
 8017d40:	f10d 0c18 	add.w	ip, sp, #24
 8017d44:	6060      	str	r0, [r4, #4]
 8017d46:	f04f 0e00 	mov.w	lr, #0
 8017d4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8017d4e:	f103 0801 	add.w	r8, r3, #1
 8017d52:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8017d56:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017d5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017d5e:	f105 0708 	add.w	r7, r5, #8
 8017d62:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017d64:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017d68:	e887 0003 	stmia.w	r7, {r0, r1}
 8017d6c:	4670      	mov	r0, lr
 8017d6e:	622e      	str	r6, [r5, #32]
 8017d70:	f8c4 8008 	str.w	r8, [r4, #8]
 8017d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d78:	b002      	add	sp, #8
 8017d7a:	4770      	bx	lr
 8017d7c:	f04f 0e0a 	mov.w	lr, #10
 8017d80:	e7d0      	b.n	8017d24 <rcl_clock_add_jump_callback+0x64>
 8017d82:	2128      	movs	r1, #40	@ 0x28
 8017d84:	e7d7      	b.n	8017d36 <rcl_clock_add_jump_callback+0x76>
 8017d86:	bf00      	nop

08017d88 <rcl_clock_remove_jump_callback>:
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	d05f      	beq.n	8017e4c <rcl_clock_remove_jump_callback+0xc4>
 8017d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d90:	4605      	mov	r5, r0
 8017d92:	3014      	adds	r0, #20
 8017d94:	460f      	mov	r7, r1
 8017d96:	4692      	mov	sl, r2
 8017d98:	f7f7 fff6 	bl	800fd88 <rcutils_allocator_is_valid>
 8017d9c:	f080 0001 	eor.w	r0, r0, #1
 8017da0:	b2c0      	uxtb	r0, r0
 8017da2:	2800      	cmp	r0, #0
 8017da4:	d13f      	bne.n	8017e26 <rcl_clock_remove_jump_callback+0x9e>
 8017da6:	2f00      	cmp	r7, #0
 8017da8:	d03d      	beq.n	8017e26 <rcl_clock_remove_jump_callback+0x9e>
 8017daa:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8017dae:	f1b8 0f00 	cmp.w	r8, #0
 8017db2:	d00c      	beq.n	8017dce <rcl_clock_remove_jump_callback+0x46>
 8017db4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017db8:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8017dbc:	464c      	mov	r4, r9
 8017dbe:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8017dc2:	6823      	ldr	r3, [r4, #0]
 8017dc4:	42bb      	cmp	r3, r7
 8017dc6:	d005      	beq.n	8017dd4 <rcl_clock_remove_jump_callback+0x4c>
 8017dc8:	3428      	adds	r4, #40	@ 0x28
 8017dca:	42a6      	cmp	r6, r4
 8017dcc:	d1f9      	bne.n	8017dc2 <rcl_clock_remove_jump_callback+0x3a>
 8017dce:	2001      	movs	r0, #1
 8017dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dd4:	6a23      	ldr	r3, [r4, #32]
 8017dd6:	3428      	adds	r4, #40	@ 0x28
 8017dd8:	42a6      	cmp	r6, r4
 8017dda:	d02f      	beq.n	8017e3c <rcl_clock_remove_jump_callback+0xb4>
 8017ddc:	4553      	cmp	r3, sl
 8017dde:	d1f0      	bne.n	8017dc2 <rcl_clock_remove_jump_callback+0x3a>
 8017de0:	46a6      	mov	lr, r4
 8017de2:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8017de6:	3428      	adds	r4, #40	@ 0x28
 8017de8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017dec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017df0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017df4:	42a6      	cmp	r6, r4
 8017df6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017dfa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017dfe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e02:	d1ed      	bne.n	8017de0 <rcl_clock_remove_jump_callback+0x58>
 8017e04:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017e08:	60ac      	str	r4, [r5, #8]
 8017e0a:	b17c      	cbz	r4, 8017e2c <rcl_clock_remove_jump_callback+0xa4>
 8017e0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017e10:	69eb      	ldr	r3, [r5, #28]
 8017e12:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017e14:	4648      	mov	r0, r9
 8017e16:	00e1      	lsls	r1, r4, #3
 8017e18:	4798      	blx	r3
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	b1c0      	cbz	r0, 8017e50 <rcl_clock_remove_jump_callback+0xc8>
 8017e1e:	2000      	movs	r0, #0
 8017e20:	606b      	str	r3, [r5, #4]
 8017e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e26:	200b      	movs	r0, #11
 8017e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e2c:	4648      	mov	r0, r9
 8017e2e:	69ab      	ldr	r3, [r5, #24]
 8017e30:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8017e32:	4798      	blx	r3
 8017e34:	4620      	mov	r0, r4
 8017e36:	606c      	str	r4, [r5, #4]
 8017e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e3c:	4553      	cmp	r3, sl
 8017e3e:	d1c6      	bne.n	8017dce <rcl_clock_remove_jump_callback+0x46>
 8017e40:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017e44:	60ac      	str	r4, [r5, #8]
 8017e46:	2c00      	cmp	r4, #0
 8017e48:	d1e0      	bne.n	8017e0c <rcl_clock_remove_jump_callback+0x84>
 8017e4a:	e7ef      	b.n	8017e2c <rcl_clock_remove_jump_callback+0xa4>
 8017e4c:	200b      	movs	r0, #11
 8017e4e:	4770      	bx	lr
 8017e50:	200a      	movs	r0, #10
 8017e52:	e7e9      	b.n	8017e28 <rcl_clock_remove_jump_callback+0xa0>

08017e54 <_rcl_timer_time_jump>:
 8017e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e58:	4605      	mov	r5, r0
 8017e5a:	b084      	sub	sp, #16
 8017e5c:	4614      	mov	r4, r2
 8017e5e:	b131      	cbz	r1, 8017e6e <_rcl_timer_time_jump+0x1a>
 8017e60:	7803      	ldrb	r3, [r0, #0]
 8017e62:	3b02      	subs	r3, #2
 8017e64:	2b01      	cmp	r3, #1
 8017e66:	d93f      	bls.n	8017ee8 <_rcl_timer_time_jump+0x94>
 8017e68:	b004      	add	sp, #16
 8017e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e6e:	6813      	ldr	r3, [r2, #0]
 8017e70:	a902      	add	r1, sp, #8
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	f7ff ff18 	bl	8017ca8 <rcl_clock_get_now>
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d1f5      	bne.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017e7c:	6820      	ldr	r0, [r4, #0]
 8017e7e:	2105      	movs	r1, #5
 8017e80:	3020      	adds	r0, #32
 8017e82:	f001 fe19 	bl	8019ab8 <__atomic_load_8>
 8017e86:	6823      	ldr	r3, [r4, #0]
 8017e88:	4681      	mov	r9, r0
 8017e8a:	4688      	mov	r8, r1
 8017e8c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8017e90:	2105      	movs	r1, #5
 8017e92:	f001 fe11 	bl	8019ab8 <__atomic_load_8>
 8017e96:	4607      	mov	r7, r0
 8017e98:	6820      	ldr	r0, [r4, #0]
 8017e9a:	460e      	mov	r6, r1
 8017e9c:	2105      	movs	r1, #5
 8017e9e:	3018      	adds	r0, #24
 8017ea0:	f001 fe0a 	bl	8019ab8 <__atomic_load_8>
 8017ea4:	782b      	ldrb	r3, [r5, #0]
 8017ea6:	4682      	mov	sl, r0
 8017ea8:	460d      	mov	r5, r1
 8017eaa:	3b02      	subs	r3, #2
 8017eac:	9a02      	ldr	r2, [sp, #8]
 8017eae:	2b01      	cmp	r3, #1
 8017eb0:	9b03      	ldr	r3, [sp, #12]
 8017eb2:	d937      	bls.n	8017f24 <_rcl_timer_time_jump+0xd0>
 8017eb4:	42ba      	cmp	r2, r7
 8017eb6:	eb73 0106 	sbcs.w	r1, r3, r6
 8017eba:	da60      	bge.n	8017f7e <_rcl_timer_time_jump+0x12a>
 8017ebc:	454a      	cmp	r2, r9
 8017ebe:	eb73 0108 	sbcs.w	r1, r3, r8
 8017ec2:	dad1      	bge.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017ec4:	eb1a 0202 	adds.w	r2, sl, r2
 8017ec8:	6820      	ldr	r0, [r4, #0]
 8017eca:	eb43 0305 	adc.w	r3, r3, r5
 8017ece:	2505      	movs	r5, #5
 8017ed0:	3028      	adds	r0, #40	@ 0x28
 8017ed2:	9500      	str	r5, [sp, #0]
 8017ed4:	f001 fe26 	bl	8019b24 <__atomic_store_8>
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	9500      	str	r5, [sp, #0]
 8017edc:	3020      	adds	r0, #32
 8017ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ee2:	f001 fe1f 	bl	8019b24 <__atomic_store_8>
 8017ee6:	e7bf      	b.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017ee8:	6813      	ldr	r3, [r2, #0]
 8017eea:	a902      	add	r1, sp, #8
 8017eec:	6818      	ldr	r0, [r3, #0]
 8017eee:	f7ff fedb 	bl	8017ca8 <rcl_clock_get_now>
 8017ef2:	2800      	cmp	r0, #0
 8017ef4:	d1b8      	bne.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017efa:	4313      	orrs	r3, r2
 8017efc:	d0b4      	beq.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017efe:	6820      	ldr	r0, [r4, #0]
 8017f00:	2105      	movs	r1, #5
 8017f02:	3028      	adds	r0, #40	@ 0x28
 8017f04:	f001 fdd8 	bl	8019ab8 <__atomic_load_8>
 8017f08:	9d02      	ldr	r5, [sp, #8]
 8017f0a:	4602      	mov	r2, r0
 8017f0c:	9b03      	ldr	r3, [sp, #12]
 8017f0e:	6820      	ldr	r0, [r4, #0]
 8017f10:	1b52      	subs	r2, r2, r5
 8017f12:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8017f16:	eb61 0303 	sbc.w	r3, r1, r3
 8017f1a:	2105      	movs	r1, #5
 8017f1c:	9100      	str	r1, [sp, #0]
 8017f1e:	f001 fe01 	bl	8019b24 <__atomic_store_8>
 8017f22:	e7a1      	b.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017f24:	4313      	orrs	r3, r2
 8017f26:	d09f      	beq.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017f28:	6820      	ldr	r0, [r4, #0]
 8017f2a:	f04f 0805 	mov.w	r8, #5
 8017f2e:	2300      	movs	r3, #0
 8017f30:	2200      	movs	r2, #0
 8017f32:	3030      	adds	r0, #48	@ 0x30
 8017f34:	f8cd 8000 	str.w	r8, [sp]
 8017f38:	f001 fe2a 	bl	8019b90 <__atomic_exchange_8>
 8017f3c:	ea51 0300 	orrs.w	r3, r1, r0
 8017f40:	4606      	mov	r6, r0
 8017f42:	460f      	mov	r7, r1
 8017f44:	d090      	beq.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017f46:	9a02      	ldr	r2, [sp, #8]
 8017f48:	9b03      	ldr	r3, [sp, #12]
 8017f4a:	1a12      	subs	r2, r2, r0
 8017f4c:	f8cd 8000 	str.w	r8, [sp]
 8017f50:	6820      	ldr	r0, [r4, #0]
 8017f52:	eb63 0301 	sbc.w	r3, r3, r1
 8017f56:	eb12 020a 	adds.w	r2, r2, sl
 8017f5a:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8017f5e:	eb43 0305 	adc.w	r3, r3, r5
 8017f62:	f001 fddf 	bl	8019b24 <__atomic_store_8>
 8017f66:	f8cd 8000 	str.w	r8, [sp]
 8017f6a:	6820      	ldr	r0, [r4, #0]
 8017f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f70:	3020      	adds	r0, #32
 8017f72:	1b92      	subs	r2, r2, r6
 8017f74:	eb63 0307 	sbc.w	r3, r3, r7
 8017f78:	f001 fdd4 	bl	8019b24 <__atomic_store_8>
 8017f7c:	e774      	b.n	8017e68 <_rcl_timer_time_jump+0x14>
 8017f7e:	6820      	ldr	r0, [r4, #0]
 8017f80:	3008      	adds	r0, #8
 8017f82:	f004 f915 	bl	801c1b0 <rcl_trigger_guard_condition>
 8017f86:	e76f      	b.n	8017e68 <_rcl_timer_time_jump+0x14>

08017f88 <rcl_get_zero_initialized_timer>:
 8017f88:	4b01      	ldr	r3, [pc, #4]	@ (8017f90 <rcl_get_zero_initialized_timer+0x8>)
 8017f8a:	6818      	ldr	r0, [r3, #0]
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop
 8017f90:	0801e654 	.word	0x0801e654
 8017f94:	00000000 	.word	0x00000000

08017f98 <rcl_timer_init>:
 8017f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f9c:	b0ab      	sub	sp, #172	@ 0xac
 8017f9e:	460d      	mov	r5, r1
 8017fa0:	4604      	mov	r4, r0
 8017fa2:	4692      	mov	sl, r2
 8017fa4:	a837      	add	r0, sp, #220	@ 0xdc
 8017fa6:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8017fa8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8017fac:	f7f7 feec 	bl	800fd88 <rcutils_allocator_is_valid>
 8017fb0:	fab5 f385 	clz	r3, r5
 8017fb4:	095b      	lsrs	r3, r3, #5
 8017fb6:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 8017fba:	2c00      	cmp	r4, #0
 8017fbc:	bf08      	it	eq
 8017fbe:	f043 0301 	orreq.w	r3, r3, #1
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d164      	bne.n	8018090 <rcl_timer_init+0xf8>
 8017fc6:	f080 0001 	eor.w	r0, r0, #1
 8017fca:	b2c0      	uxtb	r0, r0
 8017fcc:	2800      	cmp	r0, #0
 8017fce:	d15f      	bne.n	8018090 <rcl_timer_init+0xf8>
 8017fd0:	6823      	ldr	r3, [r4, #0]
 8017fd2:	b123      	cbz	r3, 8017fde <rcl_timer_init+0x46>
 8017fd4:	2664      	movs	r6, #100	@ 0x64
 8017fd6:	4630      	mov	r0, r6
 8017fd8:	b02b      	add	sp, #172	@ 0xac
 8017fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fde:	a908      	add	r1, sp, #32
 8017fe0:	4628      	mov	r0, r5
 8017fe2:	f7ff fe61 	bl	8017ca8 <rcl_clock_get_now>
 8017fe6:	4606      	mov	r6, r0
 8017fe8:	2800      	cmp	r0, #0
 8017fea:	d1f4      	bne.n	8017fd6 <rcl_timer_init+0x3e>
 8017fec:	f10d 0b18 	add.w	fp, sp, #24
 8017ff0:	ae0b      	add	r6, sp, #44	@ 0x2c
 8017ff2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8017ff6:	4658      	mov	r0, fp
 8017ff8:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8017ffc:	f003 ffe2 	bl	801bfc4 <rcl_get_zero_initialized_guard_condition>
 8018000:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8018004:	e889 0003 	stmia.w	r9, {r0, r1}
 8018008:	4630      	mov	r0, r6
 801800a:	f004 f8b5 	bl	801c178 <rcl_guard_condition_get_default_options>
 801800e:	ab0d      	add	r3, sp, #52	@ 0x34
 8018010:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018014:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018018:	4651      	mov	r1, sl
 801801a:	4648      	mov	r0, r9
 801801c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018020:	f003 ffda 	bl	801bfd8 <rcl_guard_condition_init>
 8018024:	4606      	mov	r6, r0
 8018026:	2800      	cmp	r0, #0
 8018028:	d1d5      	bne.n	8017fd6 <rcl_timer_init+0x3e>
 801802a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	2b01      	cmp	r3, #1
 8018030:	d033      	beq.n	801809a <rcl_timer_init+0x102>
 8018032:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8018034:	4642      	mov	r2, r8
 8018036:	463b      	mov	r3, r7
 8018038:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801803c:	911a      	str	r1, [sp, #104]	@ 0x68
 801803e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8018042:	f04f 0a00 	mov.w	sl, #0
 8018046:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801804a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801804e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80180f8 <rcl_timer_init+0x160>
 8018052:	eb12 0008 	adds.w	r0, r2, r8
 8018056:	eb47 0103 	adc.w	r1, r7, r3
 801805a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801805e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8018062:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8018066:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801806a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801806e:	f8de 3000 	ldr.w	r3, [lr]
 8018072:	2050      	movs	r0, #80	@ 0x50
 8018074:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8018078:	4619      	mov	r1, r3
 801807a:	f8cc 3000 	str.w	r3, [ip]
 801807e:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8018080:	4798      	blx	r3
 8018082:	6020      	str	r0, [r4, #0]
 8018084:	b358      	cbz	r0, 80180de <rcl_timer_init+0x146>
 8018086:	2250      	movs	r2, #80	@ 0x50
 8018088:	a916      	add	r1, sp, #88	@ 0x58
 801808a:	f004 ffb6 	bl	801cffa <memcpy>
 801808e:	e7a2      	b.n	8017fd6 <rcl_timer_init+0x3e>
 8018090:	260b      	movs	r6, #11
 8018092:	4630      	mov	r0, r6
 8018094:	b02b      	add	sp, #172	@ 0xac
 8018096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801809a:	2001      	movs	r0, #1
 801809c:	2100      	movs	r1, #0
 801809e:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80180a2:	ab12      	add	r3, sp, #72	@ 0x48
 80180a4:	4a16      	ldr	r2, [pc, #88]	@ (8018100 <rcl_timer_init+0x168>)
 80180a6:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80180aa:	9405      	str	r4, [sp, #20]
 80180ac:	9204      	str	r2, [sp, #16]
 80180ae:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80180b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80180ba:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80180be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80180c4:	4628      	mov	r0, r5
 80180c6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80180ca:	f7ff fdf9 	bl	8017cc0 <rcl_clock_add_jump_callback>
 80180ce:	4603      	mov	r3, r0
 80180d0:	2800      	cmp	r0, #0
 80180d2:	d0ae      	beq.n	8018032 <rcl_timer_init+0x9a>
 80180d4:	4648      	mov	r0, r9
 80180d6:	461e      	mov	r6, r3
 80180d8:	f004 f828 	bl	801c12c <rcl_guard_condition_fini>
 80180dc:	e77b      	b.n	8017fd6 <rcl_timer_init+0x3e>
 80180de:	4648      	mov	r0, r9
 80180e0:	260a      	movs	r6, #10
 80180e2:	f004 f823 	bl	801c12c <rcl_guard_condition_fini>
 80180e6:	4622      	mov	r2, r4
 80180e8:	4905      	ldr	r1, [pc, #20]	@ (8018100 <rcl_timer_init+0x168>)
 80180ea:	4628      	mov	r0, r5
 80180ec:	f7ff fe4c 	bl	8017d88 <rcl_clock_remove_jump_callback>
 80180f0:	e771      	b.n	8017fd6 <rcl_timer_init+0x3e>
 80180f2:	bf00      	nop
 80180f4:	f3af 8000 	nop.w
	...
 8018100:	08017e55 	.word	0x08017e55

08018104 <rcl_timer_call>:
 8018104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018108:	b087      	sub	sp, #28
 801810a:	2800      	cmp	r0, #0
 801810c:	d06c      	beq.n	80181e8 <rcl_timer_call+0xe4>
 801810e:	6803      	ldr	r3, [r0, #0]
 8018110:	4604      	mov	r4, r0
 8018112:	2b00      	cmp	r3, #0
 8018114:	d062      	beq.n	80181dc <rcl_timer_call+0xd8>
 8018116:	f3bf 8f5b 	dmb	ish
 801811a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801811e:	f3bf 8f5b 	dmb	ish
 8018122:	2b00      	cmp	r3, #0
 8018124:	d14f      	bne.n	80181c6 <rcl_timer_call+0xc2>
 8018126:	6803      	ldr	r3, [r0, #0]
 8018128:	a904      	add	r1, sp, #16
 801812a:	6818      	ldr	r0, [r3, #0]
 801812c:	f7ff fdbc 	bl	8017ca8 <rcl_clock_get_now>
 8018130:	4605      	mov	r5, r0
 8018132:	2800      	cmp	r0, #0
 8018134:	d149      	bne.n	80181ca <rcl_timer_call+0xc6>
 8018136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801813a:	2b00      	cmp	r3, #0
 801813c:	db49      	blt.n	80181d2 <rcl_timer_call+0xce>
 801813e:	2605      	movs	r6, #5
 8018140:	6820      	ldr	r0, [r4, #0]
 8018142:	9600      	str	r6, [sp, #0]
 8018144:	3020      	adds	r0, #32
 8018146:	f001 fd23 	bl	8019b90 <__atomic_exchange_8>
 801814a:	6823      	ldr	r3, [r4, #0]
 801814c:	4680      	mov	r8, r0
 801814e:	f3bf 8f5b 	dmb	ish
 8018152:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8018156:	f3bf 8f5b 	dmb	ish
 801815a:	6820      	ldr	r0, [r4, #0]
 801815c:	4689      	mov	r9, r1
 801815e:	4631      	mov	r1, r6
 8018160:	3028      	adds	r0, #40	@ 0x28
 8018162:	f001 fca9 	bl	8019ab8 <__atomic_load_8>
 8018166:	460f      	mov	r7, r1
 8018168:	4631      	mov	r1, r6
 801816a:	4606      	mov	r6, r0
 801816c:	6820      	ldr	r0, [r4, #0]
 801816e:	3018      	adds	r0, #24
 8018170:	f001 fca2 	bl	8019ab8 <__atomic_load_8>
 8018174:	4602      	mov	r2, r0
 8018176:	9804      	ldr	r0, [sp, #16]
 8018178:	460b      	mov	r3, r1
 801817a:	18b6      	adds	r6, r6, r2
 801817c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8018180:	4692      	mov	sl, r2
 8018182:	eb47 0701 	adc.w	r7, r7, r1
 8018186:	4286      	cmp	r6, r0
 8018188:	eb77 010c 	sbcs.w	r1, r7, ip
 801818c:	da04      	bge.n	8018198 <rcl_timer_call+0x94>
 801818e:	ea53 0102 	orrs.w	r1, r3, r2
 8018192:	d12e      	bne.n	80181f2 <rcl_timer_call+0xee>
 8018194:	4606      	mov	r6, r0
 8018196:	4667      	mov	r7, ip
 8018198:	6820      	ldr	r0, [r4, #0]
 801819a:	2105      	movs	r1, #5
 801819c:	4632      	mov	r2, r6
 801819e:	463b      	mov	r3, r7
 80181a0:	3028      	adds	r0, #40	@ 0x28
 80181a2:	9100      	str	r1, [sp, #0]
 80181a4:	f001 fcbe 	bl	8019b24 <__atomic_store_8>
 80181a8:	f1bb 0f00 	cmp.w	fp, #0
 80181ac:	d00d      	beq.n	80181ca <rcl_timer_call+0xc6>
 80181ae:	9a04      	ldr	r2, [sp, #16]
 80181b0:	4620      	mov	r0, r4
 80181b2:	9b05      	ldr	r3, [sp, #20]
 80181b4:	ebb2 0208 	subs.w	r2, r2, r8
 80181b8:	eb63 0309 	sbc.w	r3, r3, r9
 80181bc:	47d8      	blx	fp
 80181be:	4628      	mov	r0, r5
 80181c0:	b007      	add	sp, #28
 80181c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181c6:	f240 3521 	movw	r5, #801	@ 0x321
 80181ca:	4628      	mov	r0, r5
 80181cc:	b007      	add	sp, #28
 80181ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d2:	2501      	movs	r5, #1
 80181d4:	4628      	mov	r0, r5
 80181d6:	b007      	add	sp, #28
 80181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181dc:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80181e0:	4628      	mov	r0, r5
 80181e2:	b007      	add	sp, #28
 80181e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e8:	250b      	movs	r5, #11
 80181ea:	4628      	mov	r0, r5
 80181ec:	b007      	add	sp, #28
 80181ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f2:	1b80      	subs	r0, r0, r6
 80181f4:	eb6c 0107 	sbc.w	r1, ip, r7
 80181f8:	3801      	subs	r0, #1
 80181fa:	f161 0100 	sbc.w	r1, r1, #0
 80181fe:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018202:	f7e8 f8d5 	bl	80003b0 <__aeabi_ldivmod>
 8018206:	9b02      	ldr	r3, [sp, #8]
 8018208:	3001      	adds	r0, #1
 801820a:	f141 0100 	adc.w	r1, r1, #0
 801820e:	fb00 f303 	mul.w	r3, r0, r3
 8018212:	fb01 330a 	mla	r3, r1, sl, r3
 8018216:	fba0 0a0a 	umull	r0, sl, r0, sl
 801821a:	1986      	adds	r6, r0, r6
 801821c:	4453      	add	r3, sl
 801821e:	eb43 0707 	adc.w	r7, r3, r7
 8018222:	e7b9      	b.n	8018198 <rcl_timer_call+0x94>

08018224 <rcl_timer_is_ready>:
 8018224:	b570      	push	{r4, r5, r6, lr}
 8018226:	b082      	sub	sp, #8
 8018228:	b380      	cbz	r0, 801828c <rcl_timer_is_ready+0x68>
 801822a:	6803      	ldr	r3, [r0, #0]
 801822c:	4604      	mov	r4, r0
 801822e:	b38b      	cbz	r3, 8018294 <rcl_timer_is_ready+0x70>
 8018230:	460d      	mov	r5, r1
 8018232:	b359      	cbz	r1, 801828c <rcl_timer_is_ready+0x68>
 8018234:	f3bf 8f5b 	dmb	ish
 8018238:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801823c:	f3bf 8f5b 	dmb	ish
 8018240:	b953      	cbnz	r3, 8018258 <rcl_timer_is_ready+0x34>
 8018242:	6803      	ldr	r3, [r0, #0]
 8018244:	4669      	mov	r1, sp
 8018246:	6818      	ldr	r0, [r3, #0]
 8018248:	f7ff fd2e 	bl	8017ca8 <rcl_clock_get_now>
 801824c:	4606      	mov	r6, r0
 801824e:	b148      	cbz	r0, 8018264 <rcl_timer_is_ready+0x40>
 8018250:	f240 3321 	movw	r3, #801	@ 0x321
 8018254:	4298      	cmp	r0, r3
 8018256:	d102      	bne.n	801825e <rcl_timer_is_ready+0x3a>
 8018258:	2300      	movs	r3, #0
 801825a:	461e      	mov	r6, r3
 801825c:	702b      	strb	r3, [r5, #0]
 801825e:	4630      	mov	r0, r6
 8018260:	b002      	add	sp, #8
 8018262:	bd70      	pop	{r4, r5, r6, pc}
 8018264:	6820      	ldr	r0, [r4, #0]
 8018266:	2105      	movs	r1, #5
 8018268:	3028      	adds	r0, #40	@ 0x28
 801826a:	f001 fc25 	bl	8019ab8 <__atomic_load_8>
 801826e:	9b00      	ldr	r3, [sp, #0]
 8018270:	1ac0      	subs	r0, r0, r3
 8018272:	9b01      	ldr	r3, [sp, #4]
 8018274:	eb61 0103 	sbc.w	r1, r1, r3
 8018278:	2801      	cmp	r0, #1
 801827a:	4630      	mov	r0, r6
 801827c:	f171 0300 	sbcs.w	r3, r1, #0
 8018280:	bfb4      	ite	lt
 8018282:	2301      	movlt	r3, #1
 8018284:	2300      	movge	r3, #0
 8018286:	702b      	strb	r3, [r5, #0]
 8018288:	b002      	add	sp, #8
 801828a:	bd70      	pop	{r4, r5, r6, pc}
 801828c:	260b      	movs	r6, #11
 801828e:	4630      	mov	r0, r6
 8018290:	b002      	add	sp, #8
 8018292:	bd70      	pop	{r4, r5, r6, pc}
 8018294:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8018298:	e7e1      	b.n	801825e <rcl_timer_is_ready+0x3a>
 801829a:	bf00      	nop

0801829c <rcl_timer_get_time_until_next_call>:
 801829c:	b570      	push	{r4, r5, r6, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	b330      	cbz	r0, 80182f0 <rcl_timer_get_time_until_next_call+0x54>
 80182a2:	6803      	ldr	r3, [r0, #0]
 80182a4:	4604      	mov	r4, r0
 80182a6:	b33b      	cbz	r3, 80182f8 <rcl_timer_get_time_until_next_call+0x5c>
 80182a8:	460d      	mov	r5, r1
 80182aa:	b309      	cbz	r1, 80182f0 <rcl_timer_get_time_until_next_call+0x54>
 80182ac:	f3bf 8f5b 	dmb	ish
 80182b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80182b4:	f3bf 8f5b 	dmb	ish
 80182b8:	b9ab      	cbnz	r3, 80182e6 <rcl_timer_get_time_until_next_call+0x4a>
 80182ba:	6803      	ldr	r3, [r0, #0]
 80182bc:	4669      	mov	r1, sp
 80182be:	6818      	ldr	r0, [r3, #0]
 80182c0:	f7ff fcf2 	bl	8017ca8 <rcl_clock_get_now>
 80182c4:	4606      	mov	r6, r0
 80182c6:	b958      	cbnz	r0, 80182e0 <rcl_timer_get_time_until_next_call+0x44>
 80182c8:	6820      	ldr	r0, [r4, #0]
 80182ca:	2105      	movs	r1, #5
 80182cc:	3028      	adds	r0, #40	@ 0x28
 80182ce:	f001 fbf3 	bl	8019ab8 <__atomic_load_8>
 80182d2:	9b00      	ldr	r3, [sp, #0]
 80182d4:	1ac0      	subs	r0, r0, r3
 80182d6:	9b01      	ldr	r3, [sp, #4]
 80182d8:	eb61 0103 	sbc.w	r1, r1, r3
 80182dc:	6028      	str	r0, [r5, #0]
 80182de:	6069      	str	r1, [r5, #4]
 80182e0:	4630      	mov	r0, r6
 80182e2:	b002      	add	sp, #8
 80182e4:	bd70      	pop	{r4, r5, r6, pc}
 80182e6:	f240 3621 	movw	r6, #801	@ 0x321
 80182ea:	4630      	mov	r0, r6
 80182ec:	b002      	add	sp, #8
 80182ee:	bd70      	pop	{r4, r5, r6, pc}
 80182f0:	260b      	movs	r6, #11
 80182f2:	4630      	mov	r0, r6
 80182f4:	b002      	add	sp, #8
 80182f6:	bd70      	pop	{r4, r5, r6, pc}
 80182f8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80182fc:	e7f0      	b.n	80182e0 <rcl_timer_get_time_until_next_call+0x44>
 80182fe:	bf00      	nop

08018300 <rcl_timer_get_guard_condition>:
 8018300:	b130      	cbz	r0, 8018310 <rcl_timer_get_guard_condition+0x10>
 8018302:	6800      	ldr	r0, [r0, #0]
 8018304:	b120      	cbz	r0, 8018310 <rcl_timer_get_guard_condition+0x10>
 8018306:	68c3      	ldr	r3, [r0, #12]
 8018308:	b10b      	cbz	r3, 801830e <rcl_timer_get_guard_condition+0xe>
 801830a:	3008      	adds	r0, #8
 801830c:	4770      	bx	lr
 801830e:	4618      	mov	r0, r3
 8018310:	4770      	bx	lr
 8018312:	bf00      	nop

08018314 <rcl_validate_enclave_name_with_size>:
 8018314:	2800      	cmp	r0, #0
 8018316:	d049      	beq.n	80183ac <rcl_validate_enclave_name_with_size+0x98>
 8018318:	b570      	push	{r4, r5, r6, lr}
 801831a:	4615      	mov	r5, r2
 801831c:	b0c2      	sub	sp, #264	@ 0x108
 801831e:	b19a      	cbz	r2, 8018348 <rcl_validate_enclave_name_with_size+0x34>
 8018320:	461e      	mov	r6, r3
 8018322:	466a      	mov	r2, sp
 8018324:	ab01      	add	r3, sp, #4
 8018326:	460c      	mov	r4, r1
 8018328:	f002 f85a 	bl	801a3e0 <rmw_validate_namespace_with_size>
 801832c:	4684      	mov	ip, r0
 801832e:	b9b8      	cbnz	r0, 8018360 <rcl_validate_enclave_name_with_size+0x4c>
 8018330:	9900      	ldr	r1, [sp, #0]
 8018332:	b171      	cbz	r1, 8018352 <rcl_validate_enclave_name_with_size+0x3e>
 8018334:	2907      	cmp	r1, #7
 8018336:	d019      	beq.n	801836c <rcl_validate_enclave_name_with_size+0x58>
 8018338:	1e4b      	subs	r3, r1, #1
 801833a:	2b05      	cmp	r3, #5
 801833c:	d83a      	bhi.n	80183b4 <rcl_validate_enclave_name_with_size+0xa0>
 801833e:	e8df f003 	tbb	[pc, r3]
 8018342:	2926      	.short	0x2926
 8018344:	1d322f2c 	.word	0x1d322f2c
 8018348:	f04f 0c0b 	mov.w	ip, #11
 801834c:	4660      	mov	r0, ip
 801834e:	b042      	add	sp, #264	@ 0x108
 8018350:	bd70      	pop	{r4, r5, r6, pc}
 8018352:	2907      	cmp	r1, #7
 8018354:	d00a      	beq.n	801836c <rcl_validate_enclave_name_with_size+0x58>
 8018356:	2300      	movs	r3, #0
 8018358:	4660      	mov	r0, ip
 801835a:	602b      	str	r3, [r5, #0]
 801835c:	b042      	add	sp, #264	@ 0x108
 801835e:	bd70      	pop	{r4, r5, r6, pc}
 8018360:	f7fe fe08 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 8018364:	4684      	mov	ip, r0
 8018366:	4660      	mov	r0, ip
 8018368:	b042      	add	sp, #264	@ 0x108
 801836a:	bd70      	pop	{r4, r5, r6, pc}
 801836c:	2cff      	cmp	r4, #255	@ 0xff
 801836e:	d9f2      	bls.n	8018356 <rcl_validate_enclave_name_with_size+0x42>
 8018370:	6029      	str	r1, [r5, #0]
 8018372:	2e00      	cmp	r6, #0
 8018374:	d0ea      	beq.n	801834c <rcl_validate_enclave_name_with_size+0x38>
 8018376:	23fe      	movs	r3, #254	@ 0xfe
 8018378:	6033      	str	r3, [r6, #0]
 801837a:	e7e7      	b.n	801834c <rcl_validate_enclave_name_with_size+0x38>
 801837c:	2306      	movs	r3, #6
 801837e:	602b      	str	r3, [r5, #0]
 8018380:	2e00      	cmp	r6, #0
 8018382:	d0e3      	beq.n	801834c <rcl_validate_enclave_name_with_size+0x38>
 8018384:	9b01      	ldr	r3, [sp, #4]
 8018386:	4660      	mov	r0, ip
 8018388:	6033      	str	r3, [r6, #0]
 801838a:	b042      	add	sp, #264	@ 0x108
 801838c:	bd70      	pop	{r4, r5, r6, pc}
 801838e:	2301      	movs	r3, #1
 8018390:	602b      	str	r3, [r5, #0]
 8018392:	e7f5      	b.n	8018380 <rcl_validate_enclave_name_with_size+0x6c>
 8018394:	2302      	movs	r3, #2
 8018396:	602b      	str	r3, [r5, #0]
 8018398:	e7f2      	b.n	8018380 <rcl_validate_enclave_name_with_size+0x6c>
 801839a:	2303      	movs	r3, #3
 801839c:	602b      	str	r3, [r5, #0]
 801839e:	e7ef      	b.n	8018380 <rcl_validate_enclave_name_with_size+0x6c>
 80183a0:	2304      	movs	r3, #4
 80183a2:	602b      	str	r3, [r5, #0]
 80183a4:	e7ec      	b.n	8018380 <rcl_validate_enclave_name_with_size+0x6c>
 80183a6:	2305      	movs	r3, #5
 80183a8:	602b      	str	r3, [r5, #0]
 80183aa:	e7e9      	b.n	8018380 <rcl_validate_enclave_name_with_size+0x6c>
 80183ac:	f04f 0c0b 	mov.w	ip, #11
 80183b0:	4660      	mov	r0, ip
 80183b2:	4770      	bx	lr
 80183b4:	460b      	mov	r3, r1
 80183b6:	4a04      	ldr	r2, [pc, #16]	@ (80183c8 <rcl_validate_enclave_name_with_size+0xb4>)
 80183b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80183bc:	a802      	add	r0, sp, #8
 80183be:	f001 fd33 	bl	8019e28 <rcutils_snprintf>
 80183c2:	f04f 0c01 	mov.w	ip, #1
 80183c6:	e7c1      	b.n	801834c <rcl_validate_enclave_name_with_size+0x38>
 80183c8:	0801e658 	.word	0x0801e658

080183cc <rcl_validate_enclave_name>:
 80183cc:	b168      	cbz	r0, 80183ea <rcl_validate_enclave_name+0x1e>
 80183ce:	b570      	push	{r4, r5, r6, lr}
 80183d0:	460d      	mov	r5, r1
 80183d2:	4616      	mov	r6, r2
 80183d4:	4604      	mov	r4, r0
 80183d6:	f7e7 ff8d 	bl	80002f4 <strlen>
 80183da:	4633      	mov	r3, r6
 80183dc:	4601      	mov	r1, r0
 80183de:	462a      	mov	r2, r5
 80183e0:	4620      	mov	r0, r4
 80183e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183e6:	f7ff bf95 	b.w	8018314 <rcl_validate_enclave_name_with_size>
 80183ea:	200b      	movs	r0, #11
 80183ec:	4770      	bx	lr
 80183ee:	bf00      	nop

080183f0 <rcl_get_zero_initialized_wait_set>:
 80183f0:	b510      	push	{r4, lr}
 80183f2:	4c08      	ldr	r4, [pc, #32]	@ (8018414 <rcl_get_zero_initialized_wait_set+0x24>)
 80183f4:	4686      	mov	lr, r0
 80183f6:	4684      	mov	ip, r0
 80183f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018406:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801840a:	6823      	ldr	r3, [r4, #0]
 801840c:	4670      	mov	r0, lr
 801840e:	f8cc 3000 	str.w	r3, [ip]
 8018412:	bd10      	pop	{r4, pc}
 8018414:	0801e6b8 	.word	0x0801e6b8

08018418 <rcl_wait_set_is_valid>:
 8018418:	b118      	cbz	r0, 8018422 <rcl_wait_set_is_valid+0xa>
 801841a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801841c:	3800      	subs	r0, #0
 801841e:	bf18      	it	ne
 8018420:	2001      	movne	r0, #1
 8018422:	4770      	bx	lr

08018424 <rcl_wait_set_fini>:
 8018424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018428:	b082      	sub	sp, #8
 801842a:	2800      	cmp	r0, #0
 801842c:	f000 8095 	beq.w	801855a <rcl_wait_set_fini+0x136>
 8018430:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018432:	4604      	mov	r4, r0
 8018434:	2e00      	cmp	r6, #0
 8018436:	f000 808c 	beq.w	8018552 <rcl_wait_set_fini+0x12e>
 801843a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801843c:	f002 fd7c 	bl	801af38 <rmw_destroy_wait_set>
 8018440:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018442:	1e06      	subs	r6, r0, #0
 8018444:	bf18      	it	ne
 8018446:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801844a:	2d00      	cmp	r5, #0
 801844c:	f000 8081 	beq.w	8018552 <rcl_wait_set_fini+0x12e>
 8018450:	2700      	movs	r7, #0
 8018452:	6820      	ldr	r0, [r4, #0]
 8018454:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8018458:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801845a:	6067      	str	r7, [r4, #4]
 801845c:	602f      	str	r7, [r5, #0]
 801845e:	b120      	cbz	r0, 801846a <rcl_wait_set_fini+0x46>
 8018460:	9101      	str	r1, [sp, #4]
 8018462:	47c0      	blx	r8
 8018464:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018466:	9901      	ldr	r1, [sp, #4]
 8018468:	6027      	str	r7, [r4, #0]
 801846a:	68a8      	ldr	r0, [r5, #8]
 801846c:	b120      	cbz	r0, 8018478 <rcl_wait_set_fini+0x54>
 801846e:	47c0      	blx	r8
 8018470:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018472:	2300      	movs	r3, #0
 8018474:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8018478:	f04f 0800 	mov.w	r8, #0
 801847c:	68a0      	ldr	r0, [r4, #8]
 801847e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8018480:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018482:	f8c4 800c 	str.w	r8, [r4, #12]
 8018486:	f8c5 800c 	str.w	r8, [r5, #12]
 801848a:	b128      	cbz	r0, 8018498 <rcl_wait_set_fini+0x74>
 801848c:	47b8      	blx	r7
 801848e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018490:	f8c4 8008 	str.w	r8, [r4, #8]
 8018494:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8018496:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018498:	f04f 0800 	mov.w	r8, #0
 801849c:	6968      	ldr	r0, [r5, #20]
 801849e:	f8c5 8010 	str.w	r8, [r5, #16]
 80184a2:	b128      	cbz	r0, 80184b0 <rcl_wait_set_fini+0x8c>
 80184a4:	47b8      	blx	r7
 80184a6:	f8c5 8014 	str.w	r8, [r5, #20]
 80184aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184ac:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184b0:	f04f 0800 	mov.w	r8, #0
 80184b4:	6920      	ldr	r0, [r4, #16]
 80184b6:	f8c4 8014 	str.w	r8, [r4, #20]
 80184ba:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80184be:	b128      	cbz	r0, 80184cc <rcl_wait_set_fini+0xa8>
 80184c0:	47b8      	blx	r7
 80184c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184c4:	f8c4 8010 	str.w	r8, [r4, #16]
 80184c8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184ca:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184cc:	f04f 0800 	mov.w	r8, #0
 80184d0:	69a0      	ldr	r0, [r4, #24]
 80184d2:	f8c4 801c 	str.w	r8, [r4, #28]
 80184d6:	f8c5 8018 	str.w	r8, [r5, #24]
 80184da:	b128      	cbz	r0, 80184e8 <rcl_wait_set_fini+0xc4>
 80184dc:	9101      	str	r1, [sp, #4]
 80184de:	47b8      	blx	r7
 80184e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184e2:	9901      	ldr	r1, [sp, #4]
 80184e4:	f8c4 8018 	str.w	r8, [r4, #24]
 80184e8:	6a28      	ldr	r0, [r5, #32]
 80184ea:	b120      	cbz	r0, 80184f6 <rcl_wait_set_fini+0xd2>
 80184ec:	47b8      	blx	r7
 80184ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184f0:	2300      	movs	r3, #0
 80184f2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80184f6:	2700      	movs	r7, #0
 80184f8:	6a20      	ldr	r0, [r4, #32]
 80184fa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80184fe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018500:	6267      	str	r7, [r4, #36]	@ 0x24
 8018502:	626f      	str	r7, [r5, #36]	@ 0x24
 8018504:	b120      	cbz	r0, 8018510 <rcl_wait_set_fini+0xec>
 8018506:	9101      	str	r1, [sp, #4]
 8018508:	47c0      	blx	r8
 801850a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801850c:	9901      	ldr	r1, [sp, #4]
 801850e:	6227      	str	r7, [r4, #32]
 8018510:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8018512:	b120      	cbz	r0, 801851e <rcl_wait_set_fini+0xfa>
 8018514:	47c0      	blx	r8
 8018516:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018518:	2300      	movs	r3, #0
 801851a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801851e:	2700      	movs	r7, #0
 8018520:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8018522:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8018526:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018528:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801852a:	632f      	str	r7, [r5, #48]	@ 0x30
 801852c:	b120      	cbz	r0, 8018538 <rcl_wait_set_fini+0x114>
 801852e:	9101      	str	r1, [sp, #4]
 8018530:	47c0      	blx	r8
 8018532:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018534:	9901      	ldr	r1, [sp, #4]
 8018536:	62a7      	str	r7, [r4, #40]	@ 0x28
 8018538:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801853a:	b120      	cbz	r0, 8018546 <rcl_wait_set_fini+0x122>
 801853c:	47c0      	blx	r8
 801853e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018540:	2300      	movs	r3, #0
 8018542:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8018546:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8018548:	4628      	mov	r0, r5
 801854a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801854c:	4798      	blx	r3
 801854e:	2300      	movs	r3, #0
 8018550:	6323      	str	r3, [r4, #48]	@ 0x30
 8018552:	4630      	mov	r0, r6
 8018554:	b002      	add	sp, #8
 8018556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801855a:	260b      	movs	r6, #11
 801855c:	4630      	mov	r0, r6
 801855e:	b002      	add	sp, #8
 8018560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018564 <rcl_wait_set_add_subscription>:
 8018564:	b318      	cbz	r0, 80185ae <rcl_wait_set_add_subscription+0x4a>
 8018566:	b538      	push	{r3, r4, r5, lr}
 8018568:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801856a:	4604      	mov	r4, r0
 801856c:	b30b      	cbz	r3, 80185b2 <rcl_wait_set_add_subscription+0x4e>
 801856e:	b319      	cbz	r1, 80185b8 <rcl_wait_set_add_subscription+0x54>
 8018570:	681d      	ldr	r5, [r3, #0]
 8018572:	6840      	ldr	r0, [r0, #4]
 8018574:	4285      	cmp	r5, r0
 8018576:	d217      	bcs.n	80185a8 <rcl_wait_set_add_subscription+0x44>
 8018578:	1c68      	adds	r0, r5, #1
 801857a:	6018      	str	r0, [r3, #0]
 801857c:	6823      	ldr	r3, [r4, #0]
 801857e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018582:	b102      	cbz	r2, 8018586 <rcl_wait_set_add_subscription+0x22>
 8018584:	6015      	str	r5, [r2, #0]
 8018586:	4608      	mov	r0, r1
 8018588:	f7ff fadc 	bl	8017b44 <rcl_subscription_get_rmw_handle>
 801858c:	b150      	cbz	r0, 80185a4 <rcl_wait_set_add_subscription+0x40>
 801858e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018590:	6842      	ldr	r2, [r0, #4]
 8018592:	2000      	movs	r0, #0
 8018594:	689b      	ldr	r3, [r3, #8]
 8018596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801859a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801859c:	6853      	ldr	r3, [r2, #4]
 801859e:	3301      	adds	r3, #1
 80185a0:	6053      	str	r3, [r2, #4]
 80185a2:	bd38      	pop	{r3, r4, r5, pc}
 80185a4:	2001      	movs	r0, #1
 80185a6:	bd38      	pop	{r3, r4, r5, pc}
 80185a8:	f240 3086 	movw	r0, #902	@ 0x386
 80185ac:	bd38      	pop	{r3, r4, r5, pc}
 80185ae:	200b      	movs	r0, #11
 80185b0:	4770      	bx	lr
 80185b2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80185b6:	bd38      	pop	{r3, r4, r5, pc}
 80185b8:	200b      	movs	r0, #11
 80185ba:	bd38      	pop	{r3, r4, r5, pc}

080185bc <rcl_wait_set_clear>:
 80185bc:	2800      	cmp	r0, #0
 80185be:	d074      	beq.n	80186aa <rcl_wait_set_clear+0xee>
 80185c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80185c2:	b510      	push	{r4, lr}
 80185c4:	4604      	mov	r4, r0
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d071      	beq.n	80186ae <rcl_wait_set_clear+0xf2>
 80185ca:	6800      	ldr	r0, [r0, #0]
 80185cc:	b138      	cbz	r0, 80185de <rcl_wait_set_clear+0x22>
 80185ce:	6862      	ldr	r2, [r4, #4]
 80185d0:	2100      	movs	r1, #0
 80185d2:	0092      	lsls	r2, r2, #2
 80185d4:	f004 fc48 	bl	801ce68 <memset>
 80185d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185da:	2200      	movs	r2, #0
 80185dc:	601a      	str	r2, [r3, #0]
 80185de:	68a0      	ldr	r0, [r4, #8]
 80185e0:	b138      	cbz	r0, 80185f2 <rcl_wait_set_clear+0x36>
 80185e2:	68e2      	ldr	r2, [r4, #12]
 80185e4:	2100      	movs	r1, #0
 80185e6:	0092      	lsls	r2, r2, #2
 80185e8:	f004 fc3e 	bl	801ce68 <memset>
 80185ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185ee:	2200      	movs	r2, #0
 80185f0:	60da      	str	r2, [r3, #12]
 80185f2:	69a0      	ldr	r0, [r4, #24]
 80185f4:	b138      	cbz	r0, 8018606 <rcl_wait_set_clear+0x4a>
 80185f6:	69e2      	ldr	r2, [r4, #28]
 80185f8:	2100      	movs	r1, #0
 80185fa:	0092      	lsls	r2, r2, #2
 80185fc:	f004 fc34 	bl	801ce68 <memset>
 8018600:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018602:	2200      	movs	r2, #0
 8018604:	619a      	str	r2, [r3, #24]
 8018606:	6a20      	ldr	r0, [r4, #32]
 8018608:	b138      	cbz	r0, 801861a <rcl_wait_set_clear+0x5e>
 801860a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801860c:	2100      	movs	r1, #0
 801860e:	0092      	lsls	r2, r2, #2
 8018610:	f004 fc2a 	bl	801ce68 <memset>
 8018614:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018616:	2200      	movs	r2, #0
 8018618:	625a      	str	r2, [r3, #36]	@ 0x24
 801861a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801861c:	b138      	cbz	r0, 801862e <rcl_wait_set_clear+0x72>
 801861e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018620:	2100      	movs	r1, #0
 8018622:	0092      	lsls	r2, r2, #2
 8018624:	f004 fc20 	bl	801ce68 <memset>
 8018628:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801862a:	2200      	movs	r2, #0
 801862c:	631a      	str	r2, [r3, #48]	@ 0x30
 801862e:	6920      	ldr	r0, [r4, #16]
 8018630:	b138      	cbz	r0, 8018642 <rcl_wait_set_clear+0x86>
 8018632:	6962      	ldr	r2, [r4, #20]
 8018634:	2100      	movs	r1, #0
 8018636:	0092      	lsls	r2, r2, #2
 8018638:	f004 fc16 	bl	801ce68 <memset>
 801863c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801863e:	2200      	movs	r2, #0
 8018640:	641a      	str	r2, [r3, #64]	@ 0x40
 8018642:	6898      	ldr	r0, [r3, #8]
 8018644:	b138      	cbz	r0, 8018656 <rcl_wait_set_clear+0x9a>
 8018646:	685a      	ldr	r2, [r3, #4]
 8018648:	2100      	movs	r1, #0
 801864a:	0092      	lsls	r2, r2, #2
 801864c:	f004 fc0c 	bl	801ce68 <memset>
 8018650:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018652:	2200      	movs	r2, #0
 8018654:	605a      	str	r2, [r3, #4]
 8018656:	6958      	ldr	r0, [r3, #20]
 8018658:	b138      	cbz	r0, 801866a <rcl_wait_set_clear+0xae>
 801865a:	691a      	ldr	r2, [r3, #16]
 801865c:	2100      	movs	r1, #0
 801865e:	0092      	lsls	r2, r2, #2
 8018660:	f004 fc02 	bl	801ce68 <memset>
 8018664:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018666:	2200      	movs	r2, #0
 8018668:	611a      	str	r2, [r3, #16]
 801866a:	6a18      	ldr	r0, [r3, #32]
 801866c:	b138      	cbz	r0, 801867e <rcl_wait_set_clear+0xc2>
 801866e:	69da      	ldr	r2, [r3, #28]
 8018670:	2100      	movs	r1, #0
 8018672:	0092      	lsls	r2, r2, #2
 8018674:	f004 fbf8 	bl	801ce68 <memset>
 8018678:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801867a:	2200      	movs	r2, #0
 801867c:	61da      	str	r2, [r3, #28]
 801867e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8018680:	b138      	cbz	r0, 8018692 <rcl_wait_set_clear+0xd6>
 8018682:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018684:	2100      	movs	r1, #0
 8018686:	0092      	lsls	r2, r2, #2
 8018688:	f004 fbee 	bl	801ce68 <memset>
 801868c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801868e:	2200      	movs	r2, #0
 8018690:	629a      	str	r2, [r3, #40]	@ 0x28
 8018692:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8018694:	b140      	cbz	r0, 80186a8 <rcl_wait_set_clear+0xec>
 8018696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018698:	2100      	movs	r1, #0
 801869a:	0092      	lsls	r2, r2, #2
 801869c:	f004 fbe4 	bl	801ce68 <memset>
 80186a0:	2300      	movs	r3, #0
 80186a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80186a4:	4618      	mov	r0, r3
 80186a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80186a8:	bd10      	pop	{r4, pc}
 80186aa:	200b      	movs	r0, #11
 80186ac:	4770      	bx	lr
 80186ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80186b2:	bd10      	pop	{r4, pc}

080186b4 <rcl_wait_set_resize>:
 80186b4:	2800      	cmp	r0, #0
 80186b6:	f000 8180 	beq.w	80189ba <rcl_wait_set_resize+0x306>
 80186ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186be:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80186c0:	b083      	sub	sp, #12
 80186c2:	4605      	mov	r5, r0
 80186c4:	2c00      	cmp	r4, #0
 80186c6:	f000 817a 	beq.w	80189be <rcl_wait_set_resize+0x30a>
 80186ca:	f04f 0900 	mov.w	r9, #0
 80186ce:	461f      	mov	r7, r3
 80186d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80186d4:	4688      	mov	r8, r1
 80186d6:	4616      	mov	r6, r2
 80186d8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80186dc:	f8c0 9004 	str.w	r9, [r0, #4]
 80186e0:	f8c4 9000 	str.w	r9, [r4]
 80186e4:	2900      	cmp	r1, #0
 80186e6:	f000 80bf 	beq.w	8018868 <rcl_wait_set_resize+0x1b4>
 80186ea:	008c      	lsls	r4, r1, #2
 80186ec:	4652      	mov	r2, sl
 80186ee:	6800      	ldr	r0, [r0, #0]
 80186f0:	4621      	mov	r1, r4
 80186f2:	9301      	str	r3, [sp, #4]
 80186f4:	4798      	blx	r3
 80186f6:	9b01      	ldr	r3, [sp, #4]
 80186f8:	6028      	str	r0, [r5, #0]
 80186fa:	2800      	cmp	r0, #0
 80186fc:	f000 80f6 	beq.w	80188ec <rcl_wait_set_resize+0x238>
 8018700:	4622      	mov	r2, r4
 8018702:	4649      	mov	r1, r9
 8018704:	9301      	str	r3, [sp, #4]
 8018706:	f004 fbaf 	bl	801ce68 <memset>
 801870a:	f8c5 8004 	str.w	r8, [r5, #4]
 801870e:	4652      	mov	r2, sl
 8018710:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8018714:	4621      	mov	r1, r4
 8018716:	9b01      	ldr	r3, [sp, #4]
 8018718:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801871c:	f8c8 9004 	str.w	r9, [r8, #4]
 8018720:	4798      	blx	r3
 8018722:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018724:	f8c8 0008 	str.w	r0, [r8, #8]
 8018728:	689b      	ldr	r3, [r3, #8]
 801872a:	2b00      	cmp	r3, #0
 801872c:	f000 814a 	beq.w	80189c4 <rcl_wait_set_resize+0x310>
 8018730:	4622      	mov	r2, r4
 8018732:	4649      	mov	r1, r9
 8018734:	4618      	mov	r0, r3
 8018736:	f004 fb97 	bl	801ce68 <memset>
 801873a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801873c:	f04f 0800 	mov.w	r8, #0
 8018740:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018744:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8018748:	f8c5 800c 	str.w	r8, [r5, #12]
 801874c:	f8c4 800c 	str.w	r8, [r4, #12]
 8018750:	2e00      	cmp	r6, #0
 8018752:	f040 809b 	bne.w	801888c <rcl_wait_set_resize+0x1d8>
 8018756:	68a8      	ldr	r0, [r5, #8]
 8018758:	b128      	cbz	r0, 8018766 <rcl_wait_set_resize+0xb2>
 801875a:	4649      	mov	r1, r9
 801875c:	4790      	blx	r2
 801875e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018760:	60ae      	str	r6, [r5, #8]
 8018762:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018766:	f04f 0800 	mov.w	r8, #0
 801876a:	19f6      	adds	r6, r6, r7
 801876c:	f8c4 8010 	str.w	r8, [r4, #16]
 8018770:	f040 80a2 	bne.w	80188b8 <rcl_wait_set_resize+0x204>
 8018774:	6960      	ldr	r0, [r4, #20]
 8018776:	b130      	cbz	r0, 8018786 <rcl_wait_set_resize+0xd2>
 8018778:	4649      	mov	r1, r9
 801877a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801877c:	4798      	blx	r3
 801877e:	6166      	str	r6, [r4, #20]
 8018780:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018782:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018786:	2600      	movs	r6, #0
 8018788:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801878c:	616e      	str	r6, [r5, #20]
 801878e:	6426      	str	r6, [r4, #64]	@ 0x40
 8018790:	2f00      	cmp	r7, #0
 8018792:	f040 80af 	bne.w	80188f4 <rcl_wait_set_resize+0x240>
 8018796:	6928      	ldr	r0, [r5, #16]
 8018798:	b138      	cbz	r0, 80187aa <rcl_wait_set_resize+0xf6>
 801879a:	4649      	mov	r1, r9
 801879c:	47d0      	blx	sl
 801879e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187a0:	612f      	str	r7, [r5, #16]
 80187a2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80187a6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80187aa:	2600      	movs	r6, #0
 80187ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187ae:	61ee      	str	r6, [r5, #28]
 80187b0:	61a6      	str	r6, [r4, #24]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	f040 8093 	bne.w	80188de <rcl_wait_set_resize+0x22a>
 80187b8:	69a8      	ldr	r0, [r5, #24]
 80187ba:	b120      	cbz	r0, 80187c6 <rcl_wait_set_resize+0x112>
 80187bc:	4649      	mov	r1, r9
 80187be:	47d0      	blx	sl
 80187c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187c4:	61ab      	str	r3, [r5, #24]
 80187c6:	6a20      	ldr	r0, [r4, #32]
 80187c8:	b128      	cbz	r0, 80187d6 <rcl_wait_set_resize+0x122>
 80187ca:	4649      	mov	r1, r9
 80187cc:	47d0      	blx	sl
 80187ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187d0:	2300      	movs	r3, #0
 80187d2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80187d6:	2600      	movs	r6, #0
 80187d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187da:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80187dc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80187e0:	626e      	str	r6, [r5, #36]	@ 0x24
 80187e2:	6266      	str	r6, [r4, #36]	@ 0x24
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	f000 8098 	beq.w	801891a <rcl_wait_set_resize+0x266>
 80187ea:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80187ee:	463a      	mov	r2, r7
 80187f0:	6a28      	ldr	r0, [r5, #32]
 80187f2:	4651      	mov	r1, sl
 80187f4:	47c8      	blx	r9
 80187f6:	6228      	str	r0, [r5, #32]
 80187f8:	2800      	cmp	r0, #0
 80187fa:	d077      	beq.n	80188ec <rcl_wait_set_resize+0x238>
 80187fc:	4652      	mov	r2, sl
 80187fe:	4631      	mov	r1, r6
 8018800:	f004 fb32 	bl	801ce68 <memset>
 8018804:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018808:	463a      	mov	r2, r7
 801880a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801880c:	4651      	mov	r1, sl
 801880e:	626b      	str	r3, [r5, #36]	@ 0x24
 8018810:	62a6      	str	r6, [r4, #40]	@ 0x28
 8018812:	47c8      	blx	r9
 8018814:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018816:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8018818:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801881a:	2c00      	cmp	r4, #0
 801881c:	f000 80f2 	beq.w	8018a04 <rcl_wait_set_resize+0x350>
 8018820:	4620      	mov	r0, r4
 8018822:	4652      	mov	r2, sl
 8018824:	4631      	mov	r1, r6
 8018826:	f004 fb1f 	bl	801ce68 <memset>
 801882a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801882c:	2600      	movs	r6, #0
 801882e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018830:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8018832:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8018836:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8018838:	6326      	str	r6, [r4, #48]	@ 0x30
 801883a:	2b00      	cmp	r3, #0
 801883c:	f040 8097 	bne.w	801896e <rcl_wait_set_resize+0x2ba>
 8018840:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018842:	b120      	cbz	r0, 801884e <rcl_wait_set_resize+0x19a>
 8018844:	4639      	mov	r1, r7
 8018846:	47c0      	blx	r8
 8018848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801884a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801884c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801884e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018850:	2800      	cmp	r0, #0
 8018852:	d04c      	beq.n	80188ee <rcl_wait_set_resize+0x23a>
 8018854:	4639      	mov	r1, r7
 8018856:	47c0      	blx	r8
 8018858:	2300      	movs	r3, #0
 801885a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801885c:	4618      	mov	r0, r3
 801885e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8018862:	b003      	add	sp, #12
 8018864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018868:	6800      	ldr	r0, [r0, #0]
 801886a:	b120      	cbz	r0, 8018876 <rcl_wait_set_resize+0x1c2>
 801886c:	4651      	mov	r1, sl
 801886e:	47d8      	blx	fp
 8018870:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018872:	f8c5 8000 	str.w	r8, [r5]
 8018876:	68a0      	ldr	r0, [r4, #8]
 8018878:	2800      	cmp	r0, #0
 801887a:	f43f af5f 	beq.w	801873c <rcl_wait_set_resize+0x88>
 801887e:	4651      	mov	r1, sl
 8018880:	47d8      	blx	fp
 8018882:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018884:	2300      	movs	r3, #0
 8018886:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801888a:	e757      	b.n	801873c <rcl_wait_set_resize+0x88>
 801888c:	00b4      	lsls	r4, r6, #2
 801888e:	464a      	mov	r2, r9
 8018890:	68a8      	ldr	r0, [r5, #8]
 8018892:	4621      	mov	r1, r4
 8018894:	4798      	blx	r3
 8018896:	60a8      	str	r0, [r5, #8]
 8018898:	b340      	cbz	r0, 80188ec <rcl_wait_set_resize+0x238>
 801889a:	4622      	mov	r2, r4
 801889c:	4641      	mov	r1, r8
 801889e:	f004 fae3 	bl	801ce68 <memset>
 80188a2:	f04f 0800 	mov.w	r8, #0
 80188a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188a8:	60ee      	str	r6, [r5, #12]
 80188aa:	19f6      	adds	r6, r6, r7
 80188ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80188b0:	f8c4 8010 	str.w	r8, [r4, #16]
 80188b4:	f43f af5e 	beq.w	8018774 <rcl_wait_set_resize+0xc0>
 80188b8:	00b6      	lsls	r6, r6, #2
 80188ba:	464a      	mov	r2, r9
 80188bc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80188be:	6960      	ldr	r0, [r4, #20]
 80188c0:	4631      	mov	r1, r6
 80188c2:	4798      	blx	r3
 80188c4:	4681      	mov	r9, r0
 80188c6:	6160      	str	r0, [r4, #20]
 80188c8:	2800      	cmp	r0, #0
 80188ca:	f000 8084 	beq.w	80189d6 <rcl_wait_set_resize+0x322>
 80188ce:	4632      	mov	r2, r6
 80188d0:	4641      	mov	r1, r8
 80188d2:	f004 fac9 	bl	801ce68 <memset>
 80188d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80188dc:	e753      	b.n	8018786 <rcl_wait_set_resize+0xd2>
 80188de:	009c      	lsls	r4, r3, #2
 80188e0:	464a      	mov	r2, r9
 80188e2:	69a8      	ldr	r0, [r5, #24]
 80188e4:	4621      	mov	r1, r4
 80188e6:	47c0      	blx	r8
 80188e8:	61a8      	str	r0, [r5, #24]
 80188ea:	bb40      	cbnz	r0, 801893e <rcl_wait_set_resize+0x28a>
 80188ec:	200a      	movs	r0, #10
 80188ee:	b003      	add	sp, #12
 80188f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f4:	00bc      	lsls	r4, r7, #2
 80188f6:	464a      	mov	r2, r9
 80188f8:	6928      	ldr	r0, [r5, #16]
 80188fa:	4621      	mov	r1, r4
 80188fc:	47c0      	blx	r8
 80188fe:	6128      	str	r0, [r5, #16]
 8018900:	2800      	cmp	r0, #0
 8018902:	d0f3      	beq.n	80188ec <rcl_wait_set_resize+0x238>
 8018904:	4622      	mov	r2, r4
 8018906:	4631      	mov	r1, r6
 8018908:	f004 faae 	bl	801ce68 <memset>
 801890c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801890e:	616f      	str	r7, [r5, #20]
 8018910:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018914:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8018918:	e747      	b.n	80187aa <rcl_wait_set_resize+0xf6>
 801891a:	6a28      	ldr	r0, [r5, #32]
 801891c:	b120      	cbz	r0, 8018928 <rcl_wait_set_resize+0x274>
 801891e:	4639      	mov	r1, r7
 8018920:	47c0      	blx	r8
 8018922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018924:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018926:	622b      	str	r3, [r5, #32]
 8018928:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801892a:	2800      	cmp	r0, #0
 801892c:	f43f af7e 	beq.w	801882c <rcl_wait_set_resize+0x178>
 8018930:	4639      	mov	r1, r7
 8018932:	47c0      	blx	r8
 8018934:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018936:	2300      	movs	r3, #0
 8018938:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801893c:	e776      	b.n	801882c <rcl_wait_set_resize+0x178>
 801893e:	4622      	mov	r2, r4
 8018940:	4631      	mov	r1, r6
 8018942:	f004 fa91 	bl	801ce68 <memset>
 8018946:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8018948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801894a:	464a      	mov	r2, r9
 801894c:	6a38      	ldr	r0, [r7, #32]
 801894e:	4621      	mov	r1, r4
 8018950:	61eb      	str	r3, [r5, #28]
 8018952:	61fe      	str	r6, [r7, #28]
 8018954:	47c0      	blx	r8
 8018956:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018958:	6238      	str	r0, [r7, #32]
 801895a:	6a1f      	ldr	r7, [r3, #32]
 801895c:	2f00      	cmp	r7, #0
 801895e:	d04a      	beq.n	80189f6 <rcl_wait_set_resize+0x342>
 8018960:	4622      	mov	r2, r4
 8018962:	4631      	mov	r1, r6
 8018964:	4638      	mov	r0, r7
 8018966:	f004 fa7f 	bl	801ce68 <memset>
 801896a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801896c:	e733      	b.n	80187d6 <rcl_wait_set_resize+0x122>
 801896e:	009c      	lsls	r4, r3, #2
 8018970:	463a      	mov	r2, r7
 8018972:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018974:	4621      	mov	r1, r4
 8018976:	47c8      	blx	r9
 8018978:	62a8      	str	r0, [r5, #40]	@ 0x28
 801897a:	2800      	cmp	r0, #0
 801897c:	d0b6      	beq.n	80188ec <rcl_wait_set_resize+0x238>
 801897e:	4622      	mov	r2, r4
 8018980:	4631      	mov	r1, r6
 8018982:	f004 fa71 	bl	801ce68 <memset>
 8018986:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801898a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801898c:	463a      	mov	r2, r7
 801898e:	4621      	mov	r1, r4
 8018990:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8018994:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8018996:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801899a:	47c8      	blx	r9
 801899c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801899e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80189a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d034      	beq.n	8018a12 <rcl_wait_set_resize+0x35e>
 80189a8:	4622      	mov	r2, r4
 80189aa:	4631      	mov	r1, r6
 80189ac:	4618      	mov	r0, r3
 80189ae:	f004 fa5b 	bl	801ce68 <memset>
 80189b2:	4630      	mov	r0, r6
 80189b4:	b003      	add	sp, #12
 80189b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ba:	200b      	movs	r0, #11
 80189bc:	4770      	bx	lr
 80189be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80189c2:	e794      	b.n	80188ee <rcl_wait_set_resize+0x23a>
 80189c4:	6828      	ldr	r0, [r5, #0]
 80189c6:	4651      	mov	r1, sl
 80189c8:	9301      	str	r3, [sp, #4]
 80189ca:	47d8      	blx	fp
 80189cc:	9b01      	ldr	r3, [sp, #4]
 80189ce:	200a      	movs	r0, #10
 80189d0:	e9c5 3300 	strd	r3, r3, [r5]
 80189d4:	e78b      	b.n	80188ee <rcl_wait_set_resize+0x23a>
 80189d6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80189d8:	68a8      	ldr	r0, [r5, #8]
 80189da:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80189dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80189de:	4798      	blx	r3
 80189e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80189e2:	6928      	ldr	r0, [r5, #16]
 80189e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80189e6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80189e8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80189ec:	4790      	blx	r2
 80189ee:	200a      	movs	r0, #10
 80189f0:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80189f4:	e77b      	b.n	80188ee <rcl_wait_set_resize+0x23a>
 80189f6:	69a8      	ldr	r0, [r5, #24]
 80189f8:	4649      	mov	r1, r9
 80189fa:	47d0      	blx	sl
 80189fc:	200a      	movs	r0, #10
 80189fe:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8018a02:	e774      	b.n	80188ee <rcl_wait_set_resize+0x23a>
 8018a04:	6a28      	ldr	r0, [r5, #32]
 8018a06:	4639      	mov	r1, r7
 8018a08:	47c0      	blx	r8
 8018a0a:	200a      	movs	r0, #10
 8018a0c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8018a10:	e76d      	b.n	80188ee <rcl_wait_set_resize+0x23a>
 8018a12:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018a14:	4639      	mov	r1, r7
 8018a16:	9301      	str	r3, [sp, #4]
 8018a18:	47c0      	blx	r8
 8018a1a:	9b01      	ldr	r3, [sp, #4]
 8018a1c:	200a      	movs	r0, #10
 8018a1e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8018a22:	e764      	b.n	80188ee <rcl_wait_set_resize+0x23a>

08018a24 <rcl_wait_set_init>:
 8018a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a28:	b085      	sub	sp, #20
 8018a2a:	4605      	mov	r5, r0
 8018a2c:	460e      	mov	r6, r1
 8018a2e:	4617      	mov	r7, r2
 8018a30:	a812      	add	r0, sp, #72	@ 0x48
 8018a32:	4698      	mov	r8, r3
 8018a34:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8018a38:	f7f7 f9a6 	bl	800fd88 <rcutils_allocator_is_valid>
 8018a3c:	2d00      	cmp	r5, #0
 8018a3e:	d072      	beq.n	8018b26 <rcl_wait_set_init+0x102>
 8018a40:	f080 0001 	eor.w	r0, r0, #1
 8018a44:	b2c0      	uxtb	r0, r0
 8018a46:	2800      	cmp	r0, #0
 8018a48:	d16d      	bne.n	8018b26 <rcl_wait_set_init+0x102>
 8018a4a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8018a4e:	f1ba 0f00 	cmp.w	sl, #0
 8018a52:	d004      	beq.n	8018a5e <rcl_wait_set_init+0x3a>
 8018a54:	2464      	movs	r4, #100	@ 0x64
 8018a56:	4620      	mov	r0, r4
 8018a58:	b005      	add	sp, #20
 8018a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5e:	f1b9 0f00 	cmp.w	r9, #0
 8018a62:	d060      	beq.n	8018b26 <rcl_wait_set_init+0x102>
 8018a64:	4648      	mov	r0, r9
 8018a66:	f7fe faa3 	bl	8016fb0 <rcl_context_is_valid>
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	d068      	beq.n	8018b40 <rcl_wait_set_init+0x11c>
 8018a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018a70:	205c      	movs	r0, #92	@ 0x5c
 8018a72:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018a74:	4798      	blx	r3
 8018a76:	6328      	str	r0, [r5, #48]	@ 0x30
 8018a78:	2800      	cmp	r0, #0
 8018a7a:	d063      	beq.n	8018b44 <rcl_wait_set_init+0x120>
 8018a7c:	225c      	movs	r2, #92	@ 0x5c
 8018a7e:	4651      	mov	r1, sl
 8018a80:	f004 f9f2 	bl	801ce68 <memset>
 8018a84:	ac12      	add	r4, sp, #72	@ 0x48
 8018a86:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8018a8a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8018a8e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8018a92:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8018a96:	eb03 0e02 	add.w	lr, r3, r2
 8018a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018a9c:	f8d9 9000 	ldr.w	r9, [r9]
 8018aa0:	449e      	add	lr, r3
 8018aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018aa4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8018aa8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8018aac:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8018ab0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8018ab4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8018ab8:	44be      	add	lr, r7
 8018aba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018abe:	6823      	ldr	r3, [r4, #0]
 8018ac0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8018ac4:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8018ac8:	f8cc 3000 	str.w	r3, [ip]
 8018acc:	f002 fa2a 	bl	801af24 <rmw_create_wait_set>
 8018ad0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018ad2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8018ad6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018ad8:	b350      	cbz	r0, 8018b30 <rcl_wait_set_init+0x10c>
 8018ada:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8018adc:	4643      	mov	r3, r8
 8018ade:	463a      	mov	r2, r7
 8018ae0:	4631      	mov	r1, r6
 8018ae2:	9402      	str	r4, [sp, #8]
 8018ae4:	4628      	mov	r0, r5
 8018ae6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018ae8:	9401      	str	r4, [sp, #4]
 8018aea:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018aec:	9400      	str	r4, [sp, #0]
 8018aee:	f7ff fde1 	bl	80186b4 <rcl_wait_set_resize>
 8018af2:	4604      	mov	r4, r0
 8018af4:	2800      	cmp	r0, #0
 8018af6:	d0ae      	beq.n	8018a56 <rcl_wait_set_init+0x32>
 8018af8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018afa:	bb2b      	cbnz	r3, 8018b48 <rcl_wait_set_init+0x124>
 8018afc:	2600      	movs	r6, #0
 8018afe:	4628      	mov	r0, r5
 8018b00:	4633      	mov	r3, r6
 8018b02:	4632      	mov	r2, r6
 8018b04:	4631      	mov	r1, r6
 8018b06:	9600      	str	r6, [sp, #0]
 8018b08:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018b0c:	f7ff fdd2 	bl	80186b4 <rcl_wait_set_resize>
 8018b10:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018b12:	2800      	cmp	r0, #0
 8018b14:	d09f      	beq.n	8018a56 <rcl_wait_set_init+0x32>
 8018b16:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018b18:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018b1a:	4798      	blx	r3
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	632e      	str	r6, [r5, #48]	@ 0x30
 8018b20:	b005      	add	sp, #20
 8018b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b26:	240b      	movs	r4, #11
 8018b28:	4620      	mov	r0, r4
 8018b2a:	b005      	add	sp, #20
 8018b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b30:	2401      	movs	r4, #1
 8018b32:	f002 fa01 	bl	801af38 <rmw_destroy_wait_set>
 8018b36:	2800      	cmp	r0, #0
 8018b38:	bf18      	it	ne
 8018b3a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8018b3e:	e7dd      	b.n	8018afc <rcl_wait_set_init+0xd8>
 8018b40:	2465      	movs	r4, #101	@ 0x65
 8018b42:	e788      	b.n	8018a56 <rcl_wait_set_init+0x32>
 8018b44:	240a      	movs	r4, #10
 8018b46:	e786      	b.n	8018a56 <rcl_wait_set_init+0x32>
 8018b48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018b4a:	e7f2      	b.n	8018b32 <rcl_wait_set_init+0x10e>

08018b4c <rcl_wait_set_add_guard_condition>:
 8018b4c:	b318      	cbz	r0, 8018b96 <rcl_wait_set_add_guard_condition+0x4a>
 8018b4e:	b538      	push	{r3, r4, r5, lr}
 8018b50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018b52:	4604      	mov	r4, r0
 8018b54:	b30b      	cbz	r3, 8018b9a <rcl_wait_set_add_guard_condition+0x4e>
 8018b56:	b319      	cbz	r1, 8018ba0 <rcl_wait_set_add_guard_condition+0x54>
 8018b58:	68dd      	ldr	r5, [r3, #12]
 8018b5a:	68c0      	ldr	r0, [r0, #12]
 8018b5c:	4285      	cmp	r5, r0
 8018b5e:	d217      	bcs.n	8018b90 <rcl_wait_set_add_guard_condition+0x44>
 8018b60:	1c68      	adds	r0, r5, #1
 8018b62:	60d8      	str	r0, [r3, #12]
 8018b64:	68a3      	ldr	r3, [r4, #8]
 8018b66:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018b6a:	b102      	cbz	r2, 8018b6e <rcl_wait_set_add_guard_condition+0x22>
 8018b6c:	6015      	str	r5, [r2, #0]
 8018b6e:	4608      	mov	r0, r1
 8018b70:	f003 fb2e 	bl	801c1d0 <rcl_guard_condition_get_rmw_handle>
 8018b74:	b150      	cbz	r0, 8018b8c <rcl_wait_set_add_guard_condition+0x40>
 8018b76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018b78:	6842      	ldr	r2, [r0, #4]
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	695b      	ldr	r3, [r3, #20]
 8018b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018b82:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018b84:	6913      	ldr	r3, [r2, #16]
 8018b86:	3301      	adds	r3, #1
 8018b88:	6113      	str	r3, [r2, #16]
 8018b8a:	bd38      	pop	{r3, r4, r5, pc}
 8018b8c:	2001      	movs	r0, #1
 8018b8e:	bd38      	pop	{r3, r4, r5, pc}
 8018b90:	f240 3086 	movw	r0, #902	@ 0x386
 8018b94:	bd38      	pop	{r3, r4, r5, pc}
 8018b96:	200b      	movs	r0, #11
 8018b98:	4770      	bx	lr
 8018b9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018b9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ba0:	200b      	movs	r0, #11
 8018ba2:	bd38      	pop	{r3, r4, r5, pc}

08018ba4 <rcl_wait_set_add_timer>:
 8018ba4:	b328      	cbz	r0, 8018bf2 <rcl_wait_set_add_timer+0x4e>
 8018ba6:	b538      	push	{r3, r4, r5, lr}
 8018ba8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018baa:	4604      	mov	r4, r0
 8018bac:	b31b      	cbz	r3, 8018bf6 <rcl_wait_set_add_timer+0x52>
 8018bae:	b329      	cbz	r1, 8018bfc <rcl_wait_set_add_timer+0x58>
 8018bb0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8018bb2:	6965      	ldr	r5, [r4, #20]
 8018bb4:	42a8      	cmp	r0, r5
 8018bb6:	d219      	bcs.n	8018bec <rcl_wait_set_add_timer+0x48>
 8018bb8:	1c45      	adds	r5, r0, #1
 8018bba:	641d      	str	r5, [r3, #64]	@ 0x40
 8018bbc:	6923      	ldr	r3, [r4, #16]
 8018bbe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8018bc2:	b102      	cbz	r2, 8018bc6 <rcl_wait_set_add_timer+0x22>
 8018bc4:	6010      	str	r0, [r2, #0]
 8018bc6:	4608      	mov	r0, r1
 8018bc8:	f7ff fb9a 	bl	8018300 <rcl_timer_get_guard_condition>
 8018bcc:	b168      	cbz	r0, 8018bea <rcl_wait_set_add_timer+0x46>
 8018bce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018bd0:	68e3      	ldr	r3, [r4, #12]
 8018bd2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8018bd4:	3b01      	subs	r3, #1
 8018bd6:	441d      	add	r5, r3
 8018bd8:	f003 fafa 	bl	801c1d0 <rcl_guard_condition_get_rmw_handle>
 8018bdc:	b180      	cbz	r0, 8018c00 <rcl_wait_set_add_timer+0x5c>
 8018bde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018be0:	6842      	ldr	r2, [r0, #4]
 8018be2:	2000      	movs	r0, #0
 8018be4:	695b      	ldr	r3, [r3, #20]
 8018be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018bea:	bd38      	pop	{r3, r4, r5, pc}
 8018bec:	f240 3086 	movw	r0, #902	@ 0x386
 8018bf0:	bd38      	pop	{r3, r4, r5, pc}
 8018bf2:	200b      	movs	r0, #11
 8018bf4:	4770      	bx	lr
 8018bf6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018bfa:	bd38      	pop	{r3, r4, r5, pc}
 8018bfc:	200b      	movs	r0, #11
 8018bfe:	bd38      	pop	{r3, r4, r5, pc}
 8018c00:	2001      	movs	r0, #1
 8018c02:	bd38      	pop	{r3, r4, r5, pc}

08018c04 <rcl_wait_set_add_client>:
 8018c04:	b318      	cbz	r0, 8018c4e <rcl_wait_set_add_client+0x4a>
 8018c06:	b538      	push	{r3, r4, r5, lr}
 8018c08:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c0a:	4604      	mov	r4, r0
 8018c0c:	b30b      	cbz	r3, 8018c52 <rcl_wait_set_add_client+0x4e>
 8018c0e:	b319      	cbz	r1, 8018c58 <rcl_wait_set_add_client+0x54>
 8018c10:	699d      	ldr	r5, [r3, #24]
 8018c12:	69c0      	ldr	r0, [r0, #28]
 8018c14:	4285      	cmp	r5, r0
 8018c16:	d217      	bcs.n	8018c48 <rcl_wait_set_add_client+0x44>
 8018c18:	1c68      	adds	r0, r5, #1
 8018c1a:	6198      	str	r0, [r3, #24]
 8018c1c:	69a3      	ldr	r3, [r4, #24]
 8018c1e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018c22:	b102      	cbz	r2, 8018c26 <rcl_wait_set_add_client+0x22>
 8018c24:	6015      	str	r5, [r2, #0]
 8018c26:	4608      	mov	r0, r1
 8018c28:	f7fe f914 	bl	8016e54 <rcl_client_get_rmw_handle>
 8018c2c:	b150      	cbz	r0, 8018c44 <rcl_wait_set_add_client+0x40>
 8018c2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c30:	6842      	ldr	r2, [r0, #4]
 8018c32:	2000      	movs	r0, #0
 8018c34:	6a1b      	ldr	r3, [r3, #32]
 8018c36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c3a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018c3c:	69d3      	ldr	r3, [r2, #28]
 8018c3e:	3301      	adds	r3, #1
 8018c40:	61d3      	str	r3, [r2, #28]
 8018c42:	bd38      	pop	{r3, r4, r5, pc}
 8018c44:	2001      	movs	r0, #1
 8018c46:	bd38      	pop	{r3, r4, r5, pc}
 8018c48:	f240 3086 	movw	r0, #902	@ 0x386
 8018c4c:	bd38      	pop	{r3, r4, r5, pc}
 8018c4e:	200b      	movs	r0, #11
 8018c50:	4770      	bx	lr
 8018c52:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c56:	bd38      	pop	{r3, r4, r5, pc}
 8018c58:	200b      	movs	r0, #11
 8018c5a:	bd38      	pop	{r3, r4, r5, pc}

08018c5c <rcl_wait_set_add_service>:
 8018c5c:	b318      	cbz	r0, 8018ca6 <rcl_wait_set_add_service+0x4a>
 8018c5e:	b538      	push	{r3, r4, r5, lr}
 8018c60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c62:	4604      	mov	r4, r0
 8018c64:	b30b      	cbz	r3, 8018caa <rcl_wait_set_add_service+0x4e>
 8018c66:	b319      	cbz	r1, 8018cb0 <rcl_wait_set_add_service+0x54>
 8018c68:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018c6a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018c6c:	4285      	cmp	r5, r0
 8018c6e:	d217      	bcs.n	8018ca0 <rcl_wait_set_add_service+0x44>
 8018c70:	1c68      	adds	r0, r5, #1
 8018c72:	6258      	str	r0, [r3, #36]	@ 0x24
 8018c74:	6a23      	ldr	r3, [r4, #32]
 8018c76:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018c7a:	b102      	cbz	r2, 8018c7e <rcl_wait_set_add_service+0x22>
 8018c7c:	6015      	str	r5, [r2, #0]
 8018c7e:	4608      	mov	r0, r1
 8018c80:	f7fe fea2 	bl	80179c8 <rcl_service_get_rmw_handle>
 8018c84:	b150      	cbz	r0, 8018c9c <rcl_wait_set_add_service+0x40>
 8018c86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c88:	6842      	ldr	r2, [r0, #4]
 8018c8a:	2000      	movs	r0, #0
 8018c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c92:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018c94:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8018c96:	3301      	adds	r3, #1
 8018c98:	6293      	str	r3, [r2, #40]	@ 0x28
 8018c9a:	bd38      	pop	{r3, r4, r5, pc}
 8018c9c:	2001      	movs	r0, #1
 8018c9e:	bd38      	pop	{r3, r4, r5, pc}
 8018ca0:	f240 3086 	movw	r0, #902	@ 0x386
 8018ca4:	bd38      	pop	{r3, r4, r5, pc}
 8018ca6:	200b      	movs	r0, #11
 8018ca8:	4770      	bx	lr
 8018caa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018cae:	bd38      	pop	{r3, r4, r5, pc}
 8018cb0:	200b      	movs	r0, #11
 8018cb2:	bd38      	pop	{r3, r4, r5, pc}
 8018cb4:	0000      	movs	r0, r0
	...

08018cb8 <rcl_wait>:
 8018cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cbc:	ed2d 8b02 	vpush	{d8}
 8018cc0:	b08d      	sub	sp, #52	@ 0x34
 8018cc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	f000 814f 	beq.w	8018f6a <rcl_wait+0x2b2>
 8018ccc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018cce:	4605      	mov	r5, r0
 8018cd0:	2e00      	cmp	r6, #0
 8018cd2:	f000 811a 	beq.w	8018f0a <rcl_wait+0x252>
 8018cd6:	6843      	ldr	r3, [r0, #4]
 8018cd8:	b983      	cbnz	r3, 8018cfc <rcl_wait+0x44>
 8018cda:	68eb      	ldr	r3, [r5, #12]
 8018cdc:	b973      	cbnz	r3, 8018cfc <rcl_wait+0x44>
 8018cde:	696b      	ldr	r3, [r5, #20]
 8018ce0:	b963      	cbnz	r3, 8018cfc <rcl_wait+0x44>
 8018ce2:	69eb      	ldr	r3, [r5, #28]
 8018ce4:	b953      	cbnz	r3, 8018cfc <rcl_wait+0x44>
 8018ce6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018ce8:	b943      	cbnz	r3, 8018cfc <rcl_wait+0x44>
 8018cea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8018cec:	b933      	cbnz	r3, 8018cfc <rcl_wait+0x44>
 8018cee:	f240 3085 	movw	r0, #901	@ 0x385
 8018cf2:	b00d      	add	sp, #52	@ 0x34
 8018cf4:	ecbd 8b02 	vpop	{d8}
 8018cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cfc:	9b04      	ldr	r3, [sp, #16]
 8018cfe:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8018d00:	2b01      	cmp	r3, #1
 8018d02:	9b05      	ldr	r3, [sp, #20]
 8018d04:	f173 0300 	sbcs.w	r3, r3, #0
 8018d08:	f2c0 80f8 	blt.w	8018efc <rcl_wait+0x244>
 8018d0c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018d10:	2a00      	cmp	r2, #0
 8018d12:	f000 810f 	beq.w	8018f34 <rcl_wait+0x27c>
 8018d16:	2400      	movs	r4, #0
 8018d18:	4613      	mov	r3, r2
 8018d1a:	f240 3921 	movw	r9, #801	@ 0x321
 8018d1e:	4632      	mov	r2, r6
 8018d20:	46a2      	mov	sl, r4
 8018d22:	46a3      	mov	fp, r4
 8018d24:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8018f88 <rcl_wait+0x2d0>
 8018d28:	e014      	b.n	8018d54 <rcl_wait+0x9c>
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	d1e1      	bne.n	8018cf2 <rcl_wait+0x3a>
 8018d2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018d32:	4542      	cmp	r2, r8
 8018d34:	eb73 0107 	sbcs.w	r1, r3, r7
 8018d38:	da03      	bge.n	8018d42 <rcl_wait+0x8a>
 8018d3a:	4690      	mov	r8, r2
 8018d3c:	461f      	mov	r7, r3
 8018d3e:	f04f 0b01 	mov.w	fp, #1
 8018d42:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018d44:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018d46:	3401      	adds	r4, #1
 8018d48:	f14a 0a00 	adc.w	sl, sl, #0
 8018d4c:	429c      	cmp	r4, r3
 8018d4e:	f17a 0100 	sbcs.w	r1, sl, #0
 8018d52:	d228      	bcs.n	8018da6 <rcl_wait+0xee>
 8018d54:	6928      	ldr	r0, [r5, #16]
 8018d56:	a908      	add	r1, sp, #32
 8018d58:	00a6      	lsls	r6, r4, #2
 8018d5a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	d0f1      	beq.n	8018d46 <rcl_wait+0x8e>
 8018d62:	68eb      	ldr	r3, [r5, #12]
 8018d64:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018d68:	4423      	add	r3, r4
 8018d6a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8018d6e:	f1be 0f00 	cmp.w	lr, #0
 8018d72:	d006      	beq.n	8018d82 <rcl_wait+0xca>
 8018d74:	6913      	ldr	r3, [r2, #16]
 8018d76:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8018d7a:	3301      	adds	r3, #1
 8018d7c:	6113      	str	r3, [r2, #16]
 8018d7e:	692b      	ldr	r3, [r5, #16]
 8018d80:	5998      	ldr	r0, [r3, r6]
 8018d82:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018d86:	f7ff fa89 	bl	801829c <rcl_timer_get_time_until_next_call>
 8018d8a:	4548      	cmp	r0, r9
 8018d8c:	d1cd      	bne.n	8018d2a <rcl_wait+0x72>
 8018d8e:	692b      	ldr	r3, [r5, #16]
 8018d90:	2200      	movs	r2, #0
 8018d92:	3401      	adds	r4, #1
 8018d94:	519a      	str	r2, [r3, r6]
 8018d96:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018d98:	f14a 0a00 	adc.w	sl, sl, #0
 8018d9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018d9e:	429c      	cmp	r4, r3
 8018da0:	f17a 0100 	sbcs.w	r1, sl, #0
 8018da4:	d3d6      	bcc.n	8018d54 <rcl_wait+0x9c>
 8018da6:	4659      	mov	r1, fp
 8018da8:	4616      	mov	r6, r2
 8018daa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018dae:	4313      	orrs	r3, r2
 8018db0:	f040 80b4 	bne.w	8018f1c <rcl_wait+0x264>
 8018db4:	2300      	movs	r3, #0
 8018db6:	2200      	movs	r2, #0
 8018db8:	460c      	mov	r4, r1
 8018dba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018dbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018dc2:	ab08      	add	r3, sp, #32
 8018dc4:	9302      	str	r3, [sp, #8]
 8018dc6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8018dca:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8018dcc:	f106 0110 	add.w	r1, r6, #16
 8018dd0:	9300      	str	r3, [sp, #0]
 8018dd2:	1d30      	adds	r0, r6, #4
 8018dd4:	f106 031c 	add.w	r3, r6, #28
 8018dd8:	9201      	str	r2, [sp, #4]
 8018dda:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8018dde:	f001 ff3d 	bl	801ac5c <rmw_wait>
 8018de2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018de4:	4680      	mov	r8, r0
 8018de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018de8:	b1e2      	cbz	r2, 8018e24 <rcl_wait+0x16c>
 8018dea:	f04f 0900 	mov.w	r9, #0
 8018dee:	464f      	mov	r7, r9
 8018df0:	692a      	ldr	r2, [r5, #16]
 8018df2:	f10d 011f 	add.w	r1, sp, #31
 8018df6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8018dfa:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8018dfe:	b160      	cbz	r0, 8018e1a <rcl_wait+0x162>
 8018e00:	f88d 701f 	strb.w	r7, [sp, #31]
 8018e04:	f7ff fa0e 	bl	8018224 <rcl_timer_is_ready>
 8018e08:	2800      	cmp	r0, #0
 8018e0a:	f47f af72 	bne.w	8018cf2 <rcl_wait+0x3a>
 8018e0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8018e12:	b90b      	cbnz	r3, 8018e18 <rcl_wait+0x160>
 8018e14:	692a      	ldr	r2, [r5, #16]
 8018e16:	5193      	str	r3, [r2, r6]
 8018e18:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018e1a:	f109 0901 	add.w	r9, r9, #1
 8018e1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018e20:	454a      	cmp	r2, r9
 8018e22:	d8e5      	bhi.n	8018df0 <rcl_wait+0x138>
 8018e24:	f038 0002 	bics.w	r0, r8, #2
 8018e28:	d176      	bne.n	8018f18 <rcl_wait+0x260>
 8018e2a:	686f      	ldr	r7, [r5, #4]
 8018e2c:	b17f      	cbz	r7, 8018e4e <rcl_wait+0x196>
 8018e2e:	4602      	mov	r2, r0
 8018e30:	e002      	b.n	8018e38 <rcl_wait+0x180>
 8018e32:	3201      	adds	r2, #1
 8018e34:	42ba      	cmp	r2, r7
 8018e36:	d00a      	beq.n	8018e4e <rcl_wait+0x196>
 8018e38:	6899      	ldr	r1, [r3, #8]
 8018e3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e3e:	2900      	cmp	r1, #0
 8018e40:	d1f7      	bne.n	8018e32 <rcl_wait+0x17a>
 8018e42:	682e      	ldr	r6, [r5, #0]
 8018e44:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e48:	3201      	adds	r2, #1
 8018e4a:	42ba      	cmp	r2, r7
 8018e4c:	d1f4      	bne.n	8018e38 <rcl_wait+0x180>
 8018e4e:	68ef      	ldr	r7, [r5, #12]
 8018e50:	b17f      	cbz	r7, 8018e72 <rcl_wait+0x1ba>
 8018e52:	2200      	movs	r2, #0
 8018e54:	e002      	b.n	8018e5c <rcl_wait+0x1a4>
 8018e56:	3201      	adds	r2, #1
 8018e58:	42ba      	cmp	r2, r7
 8018e5a:	d00a      	beq.n	8018e72 <rcl_wait+0x1ba>
 8018e5c:	6959      	ldr	r1, [r3, #20]
 8018e5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e62:	2900      	cmp	r1, #0
 8018e64:	d1f7      	bne.n	8018e56 <rcl_wait+0x19e>
 8018e66:	68ae      	ldr	r6, [r5, #8]
 8018e68:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e6c:	3201      	adds	r2, #1
 8018e6e:	42ba      	cmp	r2, r7
 8018e70:	d1f4      	bne.n	8018e5c <rcl_wait+0x1a4>
 8018e72:	69ef      	ldr	r7, [r5, #28]
 8018e74:	b17f      	cbz	r7, 8018e96 <rcl_wait+0x1de>
 8018e76:	2200      	movs	r2, #0
 8018e78:	e002      	b.n	8018e80 <rcl_wait+0x1c8>
 8018e7a:	3201      	adds	r2, #1
 8018e7c:	42ba      	cmp	r2, r7
 8018e7e:	d00a      	beq.n	8018e96 <rcl_wait+0x1de>
 8018e80:	6a19      	ldr	r1, [r3, #32]
 8018e82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e86:	2900      	cmp	r1, #0
 8018e88:	d1f7      	bne.n	8018e7a <rcl_wait+0x1c2>
 8018e8a:	69ae      	ldr	r6, [r5, #24]
 8018e8c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e90:	3201      	adds	r2, #1
 8018e92:	42ba      	cmp	r2, r7
 8018e94:	d1f4      	bne.n	8018e80 <rcl_wait+0x1c8>
 8018e96:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8018e98:	b17f      	cbz	r7, 8018eba <rcl_wait+0x202>
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	e002      	b.n	8018ea4 <rcl_wait+0x1ec>
 8018e9e:	3201      	adds	r2, #1
 8018ea0:	42ba      	cmp	r2, r7
 8018ea2:	d00a      	beq.n	8018eba <rcl_wait+0x202>
 8018ea4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018ea6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018eaa:	2900      	cmp	r1, #0
 8018eac:	d1f7      	bne.n	8018e9e <rcl_wait+0x1e6>
 8018eae:	6a2e      	ldr	r6, [r5, #32]
 8018eb0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018eb4:	3201      	adds	r2, #1
 8018eb6:	42ba      	cmp	r2, r7
 8018eb8:	d1f4      	bne.n	8018ea4 <rcl_wait+0x1ec>
 8018eba:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8018ebc:	b17f      	cbz	r7, 8018ede <rcl_wait+0x226>
 8018ebe:	2200      	movs	r2, #0
 8018ec0:	e002      	b.n	8018ec8 <rcl_wait+0x210>
 8018ec2:	3201      	adds	r2, #1
 8018ec4:	42ba      	cmp	r2, r7
 8018ec6:	d00a      	beq.n	8018ede <rcl_wait+0x226>
 8018ec8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8018eca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018ece:	2900      	cmp	r1, #0
 8018ed0:	d1f7      	bne.n	8018ec2 <rcl_wait+0x20a>
 8018ed2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8018ed4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018ed8:	3201      	adds	r2, #1
 8018eda:	42ba      	cmp	r2, r7
 8018edc:	d1f4      	bne.n	8018ec8 <rcl_wait+0x210>
 8018ede:	f1b8 0f02 	cmp.w	r8, #2
 8018ee2:	f47f af06 	bne.w	8018cf2 <rcl_wait+0x3a>
 8018ee6:	f084 0301 	eor.w	r3, r4, #1
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	bf18      	it	ne
 8018ef0:	2002      	movne	r0, #2
 8018ef2:	b00d      	add	sp, #52	@ 0x34
 8018ef4:	ecbd 8b02 	vpop	{d8}
 8018ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018efc:	2a00      	cmp	r2, #0
 8018efe:	d03a      	beq.n	8018f76 <rcl_wait+0x2be>
 8018f00:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018f04:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018f08:	e705      	b.n	8018d16 <rcl_wait+0x5e>
 8018f0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018f0e:	b00d      	add	sp, #52	@ 0x34
 8018f10:	ecbd 8b02 	vpop	{d8}
 8018f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f18:	2001      	movs	r0, #1
 8018f1a:	e6ea      	b.n	8018cf2 <rcl_wait+0x3a>
 8018f1c:	9b04      	ldr	r3, [sp, #16]
 8018f1e:	460c      	mov	r4, r1
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	9b05      	ldr	r3, [sp, #20]
 8018f24:	f173 0300 	sbcs.w	r3, r3, #0
 8018f28:	bfa8      	it	ge
 8018f2a:	f044 0401 	orrge.w	r4, r4, #1
 8018f2e:	b914      	cbnz	r4, 8018f36 <rcl_wait+0x27e>
 8018f30:	4623      	mov	r3, r4
 8018f32:	e747      	b.n	8018dc4 <rcl_wait+0x10c>
 8018f34:	4611      	mov	r1, r2
 8018f36:	2f00      	cmp	r7, #0
 8018f38:	da02      	bge.n	8018f40 <rcl_wait+0x288>
 8018f3a:	f04f 0800 	mov.w	r8, #0
 8018f3e:	4647      	mov	r7, r8
 8018f40:	460c      	mov	r4, r1
 8018f42:	4640      	mov	r0, r8
 8018f44:	4639      	mov	r1, r7
 8018f46:	a312      	add	r3, pc, #72	@ (adr r3, 8018f90 <rcl_wait+0x2d8>)
 8018f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f4c:	f7e7 fa30 	bl	80003b0 <__aeabi_ldivmod>
 8018f50:	a30f      	add	r3, pc, #60	@ (adr r3, 8018f90 <rcl_wait+0x2d8>)
 8018f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018f5a:	4640      	mov	r0, r8
 8018f5c:	4639      	mov	r1, r7
 8018f5e:	f7e7 fa27 	bl	80003b0 <__aeabi_ldivmod>
 8018f62:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018f66:	ab08      	add	r3, sp, #32
 8018f68:	e72c      	b.n	8018dc4 <rcl_wait+0x10c>
 8018f6a:	200b      	movs	r0, #11
 8018f6c:	b00d      	add	sp, #52	@ 0x34
 8018f6e:	ecbd 8b02 	vpop	{d8}
 8018f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f76:	4611      	mov	r1, r2
 8018f78:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018f7c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018f80:	e713      	b.n	8018daa <rcl_wait+0xf2>
 8018f82:	bf00      	nop
 8018f84:	f3af 8000 	nop.w
 8018f88:	ffffffff 	.word	0xffffffff
 8018f8c:	7fffffff 	.word	0x7fffffff
 8018f90:	3b9aca00 	.word	0x3b9aca00
 8018f94:	00000000 	.word	0x00000000

08018f98 <rcl_action_take_goal_response>:
 8018f98:	2800      	cmp	r0, #0
 8018f9a:	d039      	beq.n	8019010 <rcl_action_take_goal_response+0x78>
 8018f9c:	b570      	push	{r4, r5, r6, lr}
 8018f9e:	4604      	mov	r4, r0
 8018fa0:	6800      	ldr	r0, [r0, #0]
 8018fa2:	b380      	cbz	r0, 8019006 <rcl_action_take_goal_response+0x6e>
 8018fa4:	460e      	mov	r6, r1
 8018fa6:	4615      	mov	r5, r2
 8018fa8:	f7fd ffda 	bl	8016f60 <rcl_client_is_valid>
 8018fac:	b330      	cbz	r0, 8018ffc <rcl_action_take_goal_response+0x64>
 8018fae:	6820      	ldr	r0, [r4, #0]
 8018fb0:	3004      	adds	r0, #4
 8018fb2:	f7fd ffd5 	bl	8016f60 <rcl_client_is_valid>
 8018fb6:	b308      	cbz	r0, 8018ffc <rcl_action_take_goal_response+0x64>
 8018fb8:	6820      	ldr	r0, [r4, #0]
 8018fba:	3008      	adds	r0, #8
 8018fbc:	f7fd ffd0 	bl	8016f60 <rcl_client_is_valid>
 8018fc0:	b1e0      	cbz	r0, 8018ffc <rcl_action_take_goal_response+0x64>
 8018fc2:	6820      	ldr	r0, [r4, #0]
 8018fc4:	300c      	adds	r0, #12
 8018fc6:	f7fe fdc3 	bl	8017b50 <rcl_subscription_is_valid>
 8018fca:	b1b8      	cbz	r0, 8018ffc <rcl_action_take_goal_response+0x64>
 8018fcc:	6820      	ldr	r0, [r4, #0]
 8018fce:	3010      	adds	r0, #16
 8018fd0:	f7fe fdbe 	bl	8017b50 <rcl_subscription_is_valid>
 8018fd4:	b190      	cbz	r0, 8018ffc <rcl_action_take_goal_response+0x64>
 8018fd6:	b1cd      	cbz	r5, 801900c <rcl_action_take_goal_response+0x74>
 8018fd8:	b1c6      	cbz	r6, 801900c <rcl_action_take_goal_response+0x74>
 8018fda:	462a      	mov	r2, r5
 8018fdc:	4631      	mov	r1, r6
 8018fde:	6820      	ldr	r0, [r4, #0]
 8018fe0:	f7fd ff76 	bl	8016ed0 <rcl_take_response>
 8018fe4:	b148      	cbz	r0, 8018ffa <rcl_action_take_goal_response+0x62>
 8018fe6:	280a      	cmp	r0, #10
 8018fe8:	d007      	beq.n	8018ffa <rcl_action_take_goal_response+0x62>
 8018fea:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018fee:	f640 0337 	movw	r3, #2103	@ 0x837
 8018ff2:	4290      	cmp	r0, r2
 8018ff4:	bf0c      	ite	eq
 8018ff6:	4618      	moveq	r0, r3
 8018ff8:	2001      	movne	r0, #1
 8018ffa:	bd70      	pop	{r4, r5, r6, pc}
 8018ffc:	f7f6 fee8 	bl	800fdd0 <rcutils_reset_error>
 8019000:	f640 0036 	movw	r0, #2102	@ 0x836
 8019004:	bd70      	pop	{r4, r5, r6, pc}
 8019006:	f640 0036 	movw	r0, #2102	@ 0x836
 801900a:	bd70      	pop	{r4, r5, r6, pc}
 801900c:	200b      	movs	r0, #11
 801900e:	bd70      	pop	{r4, r5, r6, pc}
 8019010:	f640 0036 	movw	r0, #2102	@ 0x836
 8019014:	4770      	bx	lr
 8019016:	bf00      	nop

08019018 <rcl_action_send_result_request>:
 8019018:	b390      	cbz	r0, 8019080 <rcl_action_send_result_request+0x68>
 801901a:	b570      	push	{r4, r5, r6, lr}
 801901c:	4604      	mov	r4, r0
 801901e:	6800      	ldr	r0, [r0, #0]
 8019020:	b348      	cbz	r0, 8019076 <rcl_action_send_result_request+0x5e>
 8019022:	460e      	mov	r6, r1
 8019024:	4615      	mov	r5, r2
 8019026:	f7fd ff9b 	bl	8016f60 <rcl_client_is_valid>
 801902a:	b1f8      	cbz	r0, 801906c <rcl_action_send_result_request+0x54>
 801902c:	6820      	ldr	r0, [r4, #0]
 801902e:	3004      	adds	r0, #4
 8019030:	f7fd ff96 	bl	8016f60 <rcl_client_is_valid>
 8019034:	b1d0      	cbz	r0, 801906c <rcl_action_send_result_request+0x54>
 8019036:	6820      	ldr	r0, [r4, #0]
 8019038:	3008      	adds	r0, #8
 801903a:	f7fd ff91 	bl	8016f60 <rcl_client_is_valid>
 801903e:	b1a8      	cbz	r0, 801906c <rcl_action_send_result_request+0x54>
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	300c      	adds	r0, #12
 8019044:	f7fe fd84 	bl	8017b50 <rcl_subscription_is_valid>
 8019048:	b180      	cbz	r0, 801906c <rcl_action_send_result_request+0x54>
 801904a:	6820      	ldr	r0, [r4, #0]
 801904c:	3010      	adds	r0, #16
 801904e:	f7fe fd7f 	bl	8017b50 <rcl_subscription_is_valid>
 8019052:	b158      	cbz	r0, 801906c <rcl_action_send_result_request+0x54>
 8019054:	b195      	cbz	r5, 801907c <rcl_action_send_result_request+0x64>
 8019056:	b18e      	cbz	r6, 801907c <rcl_action_send_result_request+0x64>
 8019058:	6820      	ldr	r0, [r4, #0]
 801905a:	462a      	mov	r2, r5
 801905c:	4631      	mov	r1, r6
 801905e:	3008      	adds	r0, #8
 8019060:	f7fd fefe 	bl	8016e60 <rcl_send_request>
 8019064:	3800      	subs	r0, #0
 8019066:	bf18      	it	ne
 8019068:	2001      	movne	r0, #1
 801906a:	bd70      	pop	{r4, r5, r6, pc}
 801906c:	f7f6 feb0 	bl	800fdd0 <rcutils_reset_error>
 8019070:	f640 0036 	movw	r0, #2102	@ 0x836
 8019074:	bd70      	pop	{r4, r5, r6, pc}
 8019076:	f640 0036 	movw	r0, #2102	@ 0x836
 801907a:	bd70      	pop	{r4, r5, r6, pc}
 801907c:	200b      	movs	r0, #11
 801907e:	bd70      	pop	{r4, r5, r6, pc}
 8019080:	f640 0036 	movw	r0, #2102	@ 0x836
 8019084:	4770      	bx	lr
 8019086:	bf00      	nop

08019088 <rcl_action_take_result_response>:
 8019088:	2800      	cmp	r0, #0
 801908a:	d03a      	beq.n	8019102 <rcl_action_take_result_response+0x7a>
 801908c:	b570      	push	{r4, r5, r6, lr}
 801908e:	4604      	mov	r4, r0
 8019090:	6800      	ldr	r0, [r0, #0]
 8019092:	b388      	cbz	r0, 80190f8 <rcl_action_take_result_response+0x70>
 8019094:	460e      	mov	r6, r1
 8019096:	4615      	mov	r5, r2
 8019098:	f7fd ff62 	bl	8016f60 <rcl_client_is_valid>
 801909c:	b338      	cbz	r0, 80190ee <rcl_action_take_result_response+0x66>
 801909e:	6820      	ldr	r0, [r4, #0]
 80190a0:	3004      	adds	r0, #4
 80190a2:	f7fd ff5d 	bl	8016f60 <rcl_client_is_valid>
 80190a6:	b310      	cbz	r0, 80190ee <rcl_action_take_result_response+0x66>
 80190a8:	6820      	ldr	r0, [r4, #0]
 80190aa:	3008      	adds	r0, #8
 80190ac:	f7fd ff58 	bl	8016f60 <rcl_client_is_valid>
 80190b0:	b1e8      	cbz	r0, 80190ee <rcl_action_take_result_response+0x66>
 80190b2:	6820      	ldr	r0, [r4, #0]
 80190b4:	300c      	adds	r0, #12
 80190b6:	f7fe fd4b 	bl	8017b50 <rcl_subscription_is_valid>
 80190ba:	b1c0      	cbz	r0, 80190ee <rcl_action_take_result_response+0x66>
 80190bc:	6820      	ldr	r0, [r4, #0]
 80190be:	3010      	adds	r0, #16
 80190c0:	f7fe fd46 	bl	8017b50 <rcl_subscription_is_valid>
 80190c4:	b198      	cbz	r0, 80190ee <rcl_action_take_result_response+0x66>
 80190c6:	b1d5      	cbz	r5, 80190fe <rcl_action_take_result_response+0x76>
 80190c8:	b1ce      	cbz	r6, 80190fe <rcl_action_take_result_response+0x76>
 80190ca:	6820      	ldr	r0, [r4, #0]
 80190cc:	462a      	mov	r2, r5
 80190ce:	4631      	mov	r1, r6
 80190d0:	3008      	adds	r0, #8
 80190d2:	f7fd fefd 	bl	8016ed0 <rcl_take_response>
 80190d6:	b148      	cbz	r0, 80190ec <rcl_action_take_result_response+0x64>
 80190d8:	280a      	cmp	r0, #10
 80190da:	d007      	beq.n	80190ec <rcl_action_take_result_response+0x64>
 80190dc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80190e0:	f640 0337 	movw	r3, #2103	@ 0x837
 80190e4:	4290      	cmp	r0, r2
 80190e6:	bf0c      	ite	eq
 80190e8:	4618      	moveq	r0, r3
 80190ea:	2001      	movne	r0, #1
 80190ec:	bd70      	pop	{r4, r5, r6, pc}
 80190ee:	f7f6 fe6f 	bl	800fdd0 <rcutils_reset_error>
 80190f2:	f640 0036 	movw	r0, #2102	@ 0x836
 80190f6:	bd70      	pop	{r4, r5, r6, pc}
 80190f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80190fc:	bd70      	pop	{r4, r5, r6, pc}
 80190fe:	200b      	movs	r0, #11
 8019100:	bd70      	pop	{r4, r5, r6, pc}
 8019102:	f640 0036 	movw	r0, #2102	@ 0x836
 8019106:	4770      	bx	lr

08019108 <rcl_action_take_cancel_response>:
 8019108:	2800      	cmp	r0, #0
 801910a:	d03a      	beq.n	8019182 <rcl_action_take_cancel_response+0x7a>
 801910c:	b570      	push	{r4, r5, r6, lr}
 801910e:	4604      	mov	r4, r0
 8019110:	6800      	ldr	r0, [r0, #0]
 8019112:	b388      	cbz	r0, 8019178 <rcl_action_take_cancel_response+0x70>
 8019114:	460e      	mov	r6, r1
 8019116:	4615      	mov	r5, r2
 8019118:	f7fd ff22 	bl	8016f60 <rcl_client_is_valid>
 801911c:	b338      	cbz	r0, 801916e <rcl_action_take_cancel_response+0x66>
 801911e:	6820      	ldr	r0, [r4, #0]
 8019120:	3004      	adds	r0, #4
 8019122:	f7fd ff1d 	bl	8016f60 <rcl_client_is_valid>
 8019126:	b310      	cbz	r0, 801916e <rcl_action_take_cancel_response+0x66>
 8019128:	6820      	ldr	r0, [r4, #0]
 801912a:	3008      	adds	r0, #8
 801912c:	f7fd ff18 	bl	8016f60 <rcl_client_is_valid>
 8019130:	b1e8      	cbz	r0, 801916e <rcl_action_take_cancel_response+0x66>
 8019132:	6820      	ldr	r0, [r4, #0]
 8019134:	300c      	adds	r0, #12
 8019136:	f7fe fd0b 	bl	8017b50 <rcl_subscription_is_valid>
 801913a:	b1c0      	cbz	r0, 801916e <rcl_action_take_cancel_response+0x66>
 801913c:	6820      	ldr	r0, [r4, #0]
 801913e:	3010      	adds	r0, #16
 8019140:	f7fe fd06 	bl	8017b50 <rcl_subscription_is_valid>
 8019144:	b198      	cbz	r0, 801916e <rcl_action_take_cancel_response+0x66>
 8019146:	b1d5      	cbz	r5, 801917e <rcl_action_take_cancel_response+0x76>
 8019148:	b1ce      	cbz	r6, 801917e <rcl_action_take_cancel_response+0x76>
 801914a:	6820      	ldr	r0, [r4, #0]
 801914c:	462a      	mov	r2, r5
 801914e:	4631      	mov	r1, r6
 8019150:	3004      	adds	r0, #4
 8019152:	f7fd febd 	bl	8016ed0 <rcl_take_response>
 8019156:	b148      	cbz	r0, 801916c <rcl_action_take_cancel_response+0x64>
 8019158:	280a      	cmp	r0, #10
 801915a:	d007      	beq.n	801916c <rcl_action_take_cancel_response+0x64>
 801915c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019160:	f640 0337 	movw	r3, #2103	@ 0x837
 8019164:	4290      	cmp	r0, r2
 8019166:	bf0c      	ite	eq
 8019168:	4618      	moveq	r0, r3
 801916a:	2001      	movne	r0, #1
 801916c:	bd70      	pop	{r4, r5, r6, pc}
 801916e:	f7f6 fe2f 	bl	800fdd0 <rcutils_reset_error>
 8019172:	f640 0036 	movw	r0, #2102	@ 0x836
 8019176:	bd70      	pop	{r4, r5, r6, pc}
 8019178:	f640 0036 	movw	r0, #2102	@ 0x836
 801917c:	bd70      	pop	{r4, r5, r6, pc}
 801917e:	200b      	movs	r0, #11
 8019180:	bd70      	pop	{r4, r5, r6, pc}
 8019182:	f640 0036 	movw	r0, #2102	@ 0x836
 8019186:	4770      	bx	lr

08019188 <rcl_action_take_feedback>:
 8019188:	2800      	cmp	r0, #0
 801918a:	d038      	beq.n	80191fe <rcl_action_take_feedback+0x76>
 801918c:	b530      	push	{r4, r5, lr}
 801918e:	4604      	mov	r4, r0
 8019190:	6800      	ldr	r0, [r0, #0]
 8019192:	b091      	sub	sp, #68	@ 0x44
 8019194:	b378      	cbz	r0, 80191f6 <rcl_action_take_feedback+0x6e>
 8019196:	460d      	mov	r5, r1
 8019198:	f7fd fee2 	bl	8016f60 <rcl_client_is_valid>
 801919c:	b328      	cbz	r0, 80191ea <rcl_action_take_feedback+0x62>
 801919e:	6820      	ldr	r0, [r4, #0]
 80191a0:	3004      	adds	r0, #4
 80191a2:	f7fd fedd 	bl	8016f60 <rcl_client_is_valid>
 80191a6:	b300      	cbz	r0, 80191ea <rcl_action_take_feedback+0x62>
 80191a8:	6820      	ldr	r0, [r4, #0]
 80191aa:	3008      	adds	r0, #8
 80191ac:	f7fd fed8 	bl	8016f60 <rcl_client_is_valid>
 80191b0:	b1d8      	cbz	r0, 80191ea <rcl_action_take_feedback+0x62>
 80191b2:	6820      	ldr	r0, [r4, #0]
 80191b4:	300c      	adds	r0, #12
 80191b6:	f7fe fccb 	bl	8017b50 <rcl_subscription_is_valid>
 80191ba:	b1b0      	cbz	r0, 80191ea <rcl_action_take_feedback+0x62>
 80191bc:	6820      	ldr	r0, [r4, #0]
 80191be:	3010      	adds	r0, #16
 80191c0:	f7fe fcc6 	bl	8017b50 <rcl_subscription_is_valid>
 80191c4:	b188      	cbz	r0, 80191ea <rcl_action_take_feedback+0x62>
 80191c6:	b1ed      	cbz	r5, 8019204 <rcl_action_take_feedback+0x7c>
 80191c8:	6820      	ldr	r0, [r4, #0]
 80191ca:	2300      	movs	r3, #0
 80191cc:	466a      	mov	r2, sp
 80191ce:	4629      	mov	r1, r5
 80191d0:	300c      	adds	r0, #12
 80191d2:	f7fe fc61 	bl	8017a98 <rcl_take>
 80191d6:	b160      	cbz	r0, 80191f2 <rcl_action_take_feedback+0x6a>
 80191d8:	f240 1391 	movw	r3, #401	@ 0x191
 80191dc:	4298      	cmp	r0, r3
 80191de:	d014      	beq.n	801920a <rcl_action_take_feedback+0x82>
 80191e0:	280a      	cmp	r0, #10
 80191e2:	bf18      	it	ne
 80191e4:	2001      	movne	r0, #1
 80191e6:	b011      	add	sp, #68	@ 0x44
 80191e8:	bd30      	pop	{r4, r5, pc}
 80191ea:	f7f6 fdf1 	bl	800fdd0 <rcutils_reset_error>
 80191ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80191f2:	b011      	add	sp, #68	@ 0x44
 80191f4:	bd30      	pop	{r4, r5, pc}
 80191f6:	f640 0036 	movw	r0, #2102	@ 0x836
 80191fa:	b011      	add	sp, #68	@ 0x44
 80191fc:	bd30      	pop	{r4, r5, pc}
 80191fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8019202:	4770      	bx	lr
 8019204:	200b      	movs	r0, #11
 8019206:	b011      	add	sp, #68	@ 0x44
 8019208:	bd30      	pop	{r4, r5, pc}
 801920a:	f640 0037 	movw	r0, #2103	@ 0x837
 801920e:	e7f0      	b.n	80191f2 <rcl_action_take_feedback+0x6a>

08019210 <rcl_action_wait_set_add_action_client>:
 8019210:	2800      	cmp	r0, #0
 8019212:	d048      	beq.n	80192a6 <rcl_action_wait_set_add_action_client+0x96>
 8019214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019216:	460c      	mov	r4, r1
 8019218:	2900      	cmp	r1, #0
 801921a:	d03c      	beq.n	8019296 <rcl_action_wait_set_add_action_client+0x86>
 801921c:	4605      	mov	r5, r0
 801921e:	6808      	ldr	r0, [r1, #0]
 8019220:	2800      	cmp	r0, #0
 8019222:	d038      	beq.n	8019296 <rcl_action_wait_set_add_action_client+0x86>
 8019224:	4617      	mov	r7, r2
 8019226:	461e      	mov	r6, r3
 8019228:	f7fd fe9a 	bl	8016f60 <rcl_client_is_valid>
 801922c:	b3b0      	cbz	r0, 801929c <rcl_action_wait_set_add_action_client+0x8c>
 801922e:	6820      	ldr	r0, [r4, #0]
 8019230:	3004      	adds	r0, #4
 8019232:	f7fd fe95 	bl	8016f60 <rcl_client_is_valid>
 8019236:	b388      	cbz	r0, 801929c <rcl_action_wait_set_add_action_client+0x8c>
 8019238:	6820      	ldr	r0, [r4, #0]
 801923a:	3008      	adds	r0, #8
 801923c:	f7fd fe90 	bl	8016f60 <rcl_client_is_valid>
 8019240:	b360      	cbz	r0, 801929c <rcl_action_wait_set_add_action_client+0x8c>
 8019242:	6820      	ldr	r0, [r4, #0]
 8019244:	300c      	adds	r0, #12
 8019246:	f7fe fc83 	bl	8017b50 <rcl_subscription_is_valid>
 801924a:	b338      	cbz	r0, 801929c <rcl_action_wait_set_add_action_client+0x8c>
 801924c:	6820      	ldr	r0, [r4, #0]
 801924e:	3010      	adds	r0, #16
 8019250:	f7fe fc7e 	bl	8017b50 <rcl_subscription_is_valid>
 8019254:	b310      	cbz	r0, 801929c <rcl_action_wait_set_add_action_client+0x8c>
 8019256:	6821      	ldr	r1, [r4, #0]
 8019258:	4628      	mov	r0, r5
 801925a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801925e:	f7ff fcd1 	bl	8018c04 <rcl_wait_set_add_client>
 8019262:	b9b8      	cbnz	r0, 8019294 <rcl_action_wait_set_add_action_client+0x84>
 8019264:	6821      	ldr	r1, [r4, #0]
 8019266:	4628      	mov	r0, r5
 8019268:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801926c:	3104      	adds	r1, #4
 801926e:	f7ff fcc9 	bl	8018c04 <rcl_wait_set_add_client>
 8019272:	b978      	cbnz	r0, 8019294 <rcl_action_wait_set_add_action_client+0x84>
 8019274:	6821      	ldr	r1, [r4, #0]
 8019276:	4628      	mov	r0, r5
 8019278:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801927c:	3108      	adds	r1, #8
 801927e:	f7ff fcc1 	bl	8018c04 <rcl_wait_set_add_client>
 8019282:	b938      	cbnz	r0, 8019294 <rcl_action_wait_set_add_action_client+0x84>
 8019284:	6821      	ldr	r1, [r4, #0]
 8019286:	4628      	mov	r0, r5
 8019288:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801928c:	310c      	adds	r1, #12
 801928e:	f7ff f969 	bl	8018564 <rcl_wait_set_add_subscription>
 8019292:	b158      	cbz	r0, 80192ac <rcl_action_wait_set_add_action_client+0x9c>
 8019294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019296:	f640 0036 	movw	r0, #2102	@ 0x836
 801929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801929c:	f7f6 fd98 	bl	800fdd0 <rcutils_reset_error>
 80192a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80192a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192a6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80192aa:	4770      	bx	lr
 80192ac:	6821      	ldr	r1, [r4, #0]
 80192ae:	4628      	mov	r0, r5
 80192b0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80192b4:	3110      	adds	r1, #16
 80192b6:	f7ff f955 	bl	8018564 <rcl_wait_set_add_subscription>
 80192ba:	2800      	cmp	r0, #0
 80192bc:	d1ea      	bne.n	8019294 <rcl_action_wait_set_add_action_client+0x84>
 80192be:	b11f      	cbz	r7, 80192c8 <rcl_action_wait_set_add_action_client+0xb8>
 80192c0:	6823      	ldr	r3, [r4, #0]
 80192c2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80192c6:	603b      	str	r3, [r7, #0]
 80192c8:	2e00      	cmp	r6, #0
 80192ca:	d0e3      	beq.n	8019294 <rcl_action_wait_set_add_action_client+0x84>
 80192cc:	6823      	ldr	r3, [r4, #0]
 80192ce:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80192d2:	6033      	str	r3, [r6, #0]
 80192d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192d6:	bf00      	nop

080192d8 <rcl_action_client_wait_set_get_entities_ready>:
 80192d8:	2800      	cmp	r0, #0
 80192da:	d050      	beq.n	801937e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80192dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192e0:	460c      	mov	r4, r1
 80192e2:	2900      	cmp	r1, #0
 80192e4:	d03e      	beq.n	8019364 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80192e6:	4605      	mov	r5, r0
 80192e8:	6808      	ldr	r0, [r1, #0]
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d03a      	beq.n	8019364 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80192ee:	4616      	mov	r6, r2
 80192f0:	461f      	mov	r7, r3
 80192f2:	f7fd fe35 	bl	8016f60 <rcl_client_is_valid>
 80192f6:	2800      	cmp	r0, #0
 80192f8:	d038      	beq.n	801936c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80192fa:	6820      	ldr	r0, [r4, #0]
 80192fc:	3004      	adds	r0, #4
 80192fe:	f7fd fe2f 	bl	8016f60 <rcl_client_is_valid>
 8019302:	2800      	cmp	r0, #0
 8019304:	d032      	beq.n	801936c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019306:	6820      	ldr	r0, [r4, #0]
 8019308:	3008      	adds	r0, #8
 801930a:	f7fd fe29 	bl	8016f60 <rcl_client_is_valid>
 801930e:	b368      	cbz	r0, 801936c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019310:	6820      	ldr	r0, [r4, #0]
 8019312:	300c      	adds	r0, #12
 8019314:	f7fe fc1c 	bl	8017b50 <rcl_subscription_is_valid>
 8019318:	b340      	cbz	r0, 801936c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801931a:	6820      	ldr	r0, [r4, #0]
 801931c:	3010      	adds	r0, #16
 801931e:	f7fe fc17 	bl	8017b50 <rcl_subscription_is_valid>
 8019322:	b318      	cbz	r0, 801936c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019324:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8019328:	2a00      	cmp	r2, #0
 801932a:	bf18      	it	ne
 801932c:	2b00      	cmpne	r3, #0
 801932e:	9b08      	ldr	r3, [sp, #32]
 8019330:	bf0c      	ite	eq
 8019332:	2101      	moveq	r1, #1
 8019334:	2100      	movne	r1, #0
 8019336:	2b00      	cmp	r3, #0
 8019338:	bf08      	it	eq
 801933a:	f041 0101 	orreq.w	r1, r1, #1
 801933e:	2f00      	cmp	r7, #0
 8019340:	bf08      	it	eq
 8019342:	f041 0101 	orreq.w	r1, r1, #1
 8019346:	b9b9      	cbnz	r1, 8019378 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8019348:	b1b6      	cbz	r6, 8019378 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801934a:	6823      	ldr	r3, [r4, #0]
 801934c:	686c      	ldr	r4, [r5, #4]
 801934e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8019352:	428a      	cmp	r2, r1
 8019354:	4610      	mov	r0, r2
 8019356:	bf38      	it	cc
 8019358:	4608      	movcc	r0, r1
 801935a:	4284      	cmp	r4, r0
 801935c:	d812      	bhi.n	8019384 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801935e:	2001      	movs	r0, #1
 8019360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019364:	f640 0036 	movw	r0, #2102	@ 0x836
 8019368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801936c:	f7f6 fd30 	bl	800fdd0 <rcutils_reset_error>
 8019370:	f640 0036 	movw	r0, #2102	@ 0x836
 8019374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019378:	200b      	movs	r0, #11
 801937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801937e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019382:	4770      	bx	lr
 8019384:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8019388:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 801938c:	45f0      	cmp	r8, lr
 801938e:	4640      	mov	r0, r8
 8019390:	69ec      	ldr	r4, [r5, #28]
 8019392:	bf38      	it	cc
 8019394:	4670      	movcc	r0, lr
 8019396:	4560      	cmp	r0, ip
 8019398:	bf38      	it	cc
 801939a:	4660      	movcc	r0, ip
 801939c:	4284      	cmp	r4, r0
 801939e:	d9de      	bls.n	801935e <rcl_action_client_wait_set_get_entities_ready+0x86>
 80193a0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80193a4:	682d      	ldr	r5, [r5, #0]
 80193a6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80193aa:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80193ae:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80193b2:	1a18      	subs	r0, r3, r0
 80193b4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80193b8:	f103 0c0c 	add.w	ip, r3, #12
 80193bc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80193c0:	fab0 f080 	clz	r0, r0
 80193c4:	eba5 050c 	sub.w	r5, r5, ip
 80193c8:	0940      	lsrs	r0, r0, #5
 80193ca:	fab5 f585 	clz	r5, r5
 80193ce:	096d      	lsrs	r5, r5, #5
 80193d0:	7035      	strb	r5, [r6, #0]
 80193d2:	f103 0510 	add.w	r5, r3, #16
 80193d6:	1b64      	subs	r4, r4, r5
 80193d8:	9d08      	ldr	r5, [sp, #32]
 80193da:	fab4 f484 	clz	r4, r4
 80193de:	0964      	lsrs	r4, r4, #5
 80193e0:	703c      	strb	r4, [r7, #0]
 80193e2:	1d1c      	adds	r4, r3, #4
 80193e4:	3308      	adds	r3, #8
 80193e6:	7028      	strb	r0, [r5, #0]
 80193e8:	1b09      	subs	r1, r1, r4
 80193ea:	2000      	movs	r0, #0
 80193ec:	1ad3      	subs	r3, r2, r3
 80193ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80193f0:	fab1 f181 	clz	r1, r1
 80193f4:	fab3 f383 	clz	r3, r3
 80193f8:	0949      	lsrs	r1, r1, #5
 80193fa:	095b      	lsrs	r3, r3, #5
 80193fc:	7011      	strb	r1, [r2, #0]
 80193fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019400:	7013      	strb	r3, [r2, #0]
 8019402:	e7b1      	b.n	8019368 <rcl_action_client_wait_set_get_entities_ready+0x90>

08019404 <rcl_action_take_goal_request>:
 8019404:	2800      	cmp	r0, #0
 8019406:	d039      	beq.n	801947c <rcl_action_take_goal_request+0x78>
 8019408:	b570      	push	{r4, r5, r6, lr}
 801940a:	4604      	mov	r4, r0
 801940c:	6800      	ldr	r0, [r0, #0]
 801940e:	b380      	cbz	r0, 8019472 <rcl_action_take_goal_request+0x6e>
 8019410:	460e      	mov	r6, r1
 8019412:	4615      	mov	r5, r2
 8019414:	f7fe fb36 	bl	8017a84 <rcl_service_is_valid>
 8019418:	b330      	cbz	r0, 8019468 <rcl_action_take_goal_request+0x64>
 801941a:	6820      	ldr	r0, [r4, #0]
 801941c:	3004      	adds	r0, #4
 801941e:	f7fe fb31 	bl	8017a84 <rcl_service_is_valid>
 8019422:	b308      	cbz	r0, 8019468 <rcl_action_take_goal_request+0x64>
 8019424:	6820      	ldr	r0, [r4, #0]
 8019426:	3008      	adds	r0, #8
 8019428:	f7fe fb2c 	bl	8017a84 <rcl_service_is_valid>
 801942c:	b1e0      	cbz	r0, 8019468 <rcl_action_take_goal_request+0x64>
 801942e:	6820      	ldr	r0, [r4, #0]
 8019430:	300c      	adds	r0, #12
 8019432:	f7f5 fd39 	bl	800eea8 <rcl_publisher_is_valid>
 8019436:	b1b8      	cbz	r0, 8019468 <rcl_action_take_goal_request+0x64>
 8019438:	6820      	ldr	r0, [r4, #0]
 801943a:	3010      	adds	r0, #16
 801943c:	f7f5 fd34 	bl	800eea8 <rcl_publisher_is_valid>
 8019440:	b190      	cbz	r0, 8019468 <rcl_action_take_goal_request+0x64>
 8019442:	b1cd      	cbz	r5, 8019478 <rcl_action_take_goal_request+0x74>
 8019444:	b1c6      	cbz	r6, 8019478 <rcl_action_take_goal_request+0x74>
 8019446:	462a      	mov	r2, r5
 8019448:	4631      	mov	r1, r6
 801944a:	6820      	ldr	r0, [r4, #0]
 801944c:	f7fe fac2 	bl	80179d4 <rcl_take_request>
 8019450:	b148      	cbz	r0, 8019466 <rcl_action_take_goal_request+0x62>
 8019452:	280a      	cmp	r0, #10
 8019454:	d007      	beq.n	8019466 <rcl_action_take_goal_request+0x62>
 8019456:	f240 2259 	movw	r2, #601	@ 0x259
 801945a:	f640 0399 	movw	r3, #2201	@ 0x899
 801945e:	4290      	cmp	r0, r2
 8019460:	bf0c      	ite	eq
 8019462:	4618      	moveq	r0, r3
 8019464:	2001      	movne	r0, #1
 8019466:	bd70      	pop	{r4, r5, r6, pc}
 8019468:	f7f6 fcb2 	bl	800fdd0 <rcutils_reset_error>
 801946c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019470:	bd70      	pop	{r4, r5, r6, pc}
 8019472:	f640 0098 	movw	r0, #2200	@ 0x898
 8019476:	bd70      	pop	{r4, r5, r6, pc}
 8019478:	200b      	movs	r0, #11
 801947a:	bd70      	pop	{r4, r5, r6, pc}
 801947c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019480:	4770      	bx	lr
 8019482:	bf00      	nop

08019484 <rcl_action_send_goal_response>:
 8019484:	b390      	cbz	r0, 80194ec <rcl_action_send_goal_response+0x68>
 8019486:	b570      	push	{r4, r5, r6, lr}
 8019488:	4604      	mov	r4, r0
 801948a:	6800      	ldr	r0, [r0, #0]
 801948c:	b348      	cbz	r0, 80194e2 <rcl_action_send_goal_response+0x5e>
 801948e:	460e      	mov	r6, r1
 8019490:	4615      	mov	r5, r2
 8019492:	f7fe faf7 	bl	8017a84 <rcl_service_is_valid>
 8019496:	b1f8      	cbz	r0, 80194d8 <rcl_action_send_goal_response+0x54>
 8019498:	6820      	ldr	r0, [r4, #0]
 801949a:	3004      	adds	r0, #4
 801949c:	f7fe faf2 	bl	8017a84 <rcl_service_is_valid>
 80194a0:	b1d0      	cbz	r0, 80194d8 <rcl_action_send_goal_response+0x54>
 80194a2:	6820      	ldr	r0, [r4, #0]
 80194a4:	3008      	adds	r0, #8
 80194a6:	f7fe faed 	bl	8017a84 <rcl_service_is_valid>
 80194aa:	b1a8      	cbz	r0, 80194d8 <rcl_action_send_goal_response+0x54>
 80194ac:	6820      	ldr	r0, [r4, #0]
 80194ae:	300c      	adds	r0, #12
 80194b0:	f7f5 fcfa 	bl	800eea8 <rcl_publisher_is_valid>
 80194b4:	b180      	cbz	r0, 80194d8 <rcl_action_send_goal_response+0x54>
 80194b6:	6820      	ldr	r0, [r4, #0]
 80194b8:	3010      	adds	r0, #16
 80194ba:	f7f5 fcf5 	bl	800eea8 <rcl_publisher_is_valid>
 80194be:	b158      	cbz	r0, 80194d8 <rcl_action_send_goal_response+0x54>
 80194c0:	b195      	cbz	r5, 80194e8 <rcl_action_send_goal_response+0x64>
 80194c2:	b18e      	cbz	r6, 80194e8 <rcl_action_send_goal_response+0x64>
 80194c4:	462a      	mov	r2, r5
 80194c6:	4631      	mov	r1, r6
 80194c8:	6820      	ldr	r0, [r4, #0]
 80194ca:	f7fe fac3 	bl	8017a54 <rcl_send_response>
 80194ce:	b110      	cbz	r0, 80194d6 <rcl_action_send_goal_response+0x52>
 80194d0:	2802      	cmp	r0, #2
 80194d2:	bf18      	it	ne
 80194d4:	2001      	movne	r0, #1
 80194d6:	bd70      	pop	{r4, r5, r6, pc}
 80194d8:	f7f6 fc7a 	bl	800fdd0 <rcutils_reset_error>
 80194dc:	f640 0098 	movw	r0, #2200	@ 0x898
 80194e0:	bd70      	pop	{r4, r5, r6, pc}
 80194e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80194e6:	bd70      	pop	{r4, r5, r6, pc}
 80194e8:	200b      	movs	r0, #11
 80194ea:	bd70      	pop	{r4, r5, r6, pc}
 80194ec:	f640 0098 	movw	r0, #2200	@ 0x898
 80194f0:	4770      	bx	lr
 80194f2:	bf00      	nop

080194f4 <rcl_action_take_result_request>:
 80194f4:	2800      	cmp	r0, #0
 80194f6:	d03a      	beq.n	801956e <rcl_action_take_result_request+0x7a>
 80194f8:	b570      	push	{r4, r5, r6, lr}
 80194fa:	4604      	mov	r4, r0
 80194fc:	6800      	ldr	r0, [r0, #0]
 80194fe:	b388      	cbz	r0, 8019564 <rcl_action_take_result_request+0x70>
 8019500:	460e      	mov	r6, r1
 8019502:	4615      	mov	r5, r2
 8019504:	f7fe fabe 	bl	8017a84 <rcl_service_is_valid>
 8019508:	b338      	cbz	r0, 801955a <rcl_action_take_result_request+0x66>
 801950a:	6820      	ldr	r0, [r4, #0]
 801950c:	3004      	adds	r0, #4
 801950e:	f7fe fab9 	bl	8017a84 <rcl_service_is_valid>
 8019512:	b310      	cbz	r0, 801955a <rcl_action_take_result_request+0x66>
 8019514:	6820      	ldr	r0, [r4, #0]
 8019516:	3008      	adds	r0, #8
 8019518:	f7fe fab4 	bl	8017a84 <rcl_service_is_valid>
 801951c:	b1e8      	cbz	r0, 801955a <rcl_action_take_result_request+0x66>
 801951e:	6820      	ldr	r0, [r4, #0]
 8019520:	300c      	adds	r0, #12
 8019522:	f7f5 fcc1 	bl	800eea8 <rcl_publisher_is_valid>
 8019526:	b1c0      	cbz	r0, 801955a <rcl_action_take_result_request+0x66>
 8019528:	6820      	ldr	r0, [r4, #0]
 801952a:	3010      	adds	r0, #16
 801952c:	f7f5 fcbc 	bl	800eea8 <rcl_publisher_is_valid>
 8019530:	b198      	cbz	r0, 801955a <rcl_action_take_result_request+0x66>
 8019532:	b1d5      	cbz	r5, 801956a <rcl_action_take_result_request+0x76>
 8019534:	b1ce      	cbz	r6, 801956a <rcl_action_take_result_request+0x76>
 8019536:	6820      	ldr	r0, [r4, #0]
 8019538:	462a      	mov	r2, r5
 801953a:	4631      	mov	r1, r6
 801953c:	3008      	adds	r0, #8
 801953e:	f7fe fa49 	bl	80179d4 <rcl_take_request>
 8019542:	b148      	cbz	r0, 8019558 <rcl_action_take_result_request+0x64>
 8019544:	280a      	cmp	r0, #10
 8019546:	d007      	beq.n	8019558 <rcl_action_take_result_request+0x64>
 8019548:	f240 2259 	movw	r2, #601	@ 0x259
 801954c:	f640 0399 	movw	r3, #2201	@ 0x899
 8019550:	4290      	cmp	r0, r2
 8019552:	bf0c      	ite	eq
 8019554:	4618      	moveq	r0, r3
 8019556:	2001      	movne	r0, #1
 8019558:	bd70      	pop	{r4, r5, r6, pc}
 801955a:	f7f6 fc39 	bl	800fdd0 <rcutils_reset_error>
 801955e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019562:	bd70      	pop	{r4, r5, r6, pc}
 8019564:	f640 0098 	movw	r0, #2200	@ 0x898
 8019568:	bd70      	pop	{r4, r5, r6, pc}
 801956a:	200b      	movs	r0, #11
 801956c:	bd70      	pop	{r4, r5, r6, pc}
 801956e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019572:	4770      	bx	lr

08019574 <rcl_action_take_cancel_request>:
 8019574:	2800      	cmp	r0, #0
 8019576:	d03a      	beq.n	80195ee <rcl_action_take_cancel_request+0x7a>
 8019578:	b570      	push	{r4, r5, r6, lr}
 801957a:	4604      	mov	r4, r0
 801957c:	6800      	ldr	r0, [r0, #0]
 801957e:	b388      	cbz	r0, 80195e4 <rcl_action_take_cancel_request+0x70>
 8019580:	460e      	mov	r6, r1
 8019582:	4615      	mov	r5, r2
 8019584:	f7fe fa7e 	bl	8017a84 <rcl_service_is_valid>
 8019588:	b338      	cbz	r0, 80195da <rcl_action_take_cancel_request+0x66>
 801958a:	6820      	ldr	r0, [r4, #0]
 801958c:	3004      	adds	r0, #4
 801958e:	f7fe fa79 	bl	8017a84 <rcl_service_is_valid>
 8019592:	b310      	cbz	r0, 80195da <rcl_action_take_cancel_request+0x66>
 8019594:	6820      	ldr	r0, [r4, #0]
 8019596:	3008      	adds	r0, #8
 8019598:	f7fe fa74 	bl	8017a84 <rcl_service_is_valid>
 801959c:	b1e8      	cbz	r0, 80195da <rcl_action_take_cancel_request+0x66>
 801959e:	6820      	ldr	r0, [r4, #0]
 80195a0:	300c      	adds	r0, #12
 80195a2:	f7f5 fc81 	bl	800eea8 <rcl_publisher_is_valid>
 80195a6:	b1c0      	cbz	r0, 80195da <rcl_action_take_cancel_request+0x66>
 80195a8:	6820      	ldr	r0, [r4, #0]
 80195aa:	3010      	adds	r0, #16
 80195ac:	f7f5 fc7c 	bl	800eea8 <rcl_publisher_is_valid>
 80195b0:	b198      	cbz	r0, 80195da <rcl_action_take_cancel_request+0x66>
 80195b2:	b1d5      	cbz	r5, 80195ea <rcl_action_take_cancel_request+0x76>
 80195b4:	b1ce      	cbz	r6, 80195ea <rcl_action_take_cancel_request+0x76>
 80195b6:	6820      	ldr	r0, [r4, #0]
 80195b8:	462a      	mov	r2, r5
 80195ba:	4631      	mov	r1, r6
 80195bc:	3004      	adds	r0, #4
 80195be:	f7fe fa09 	bl	80179d4 <rcl_take_request>
 80195c2:	b148      	cbz	r0, 80195d8 <rcl_action_take_cancel_request+0x64>
 80195c4:	280a      	cmp	r0, #10
 80195c6:	d007      	beq.n	80195d8 <rcl_action_take_cancel_request+0x64>
 80195c8:	f240 2259 	movw	r2, #601	@ 0x259
 80195cc:	f640 0399 	movw	r3, #2201	@ 0x899
 80195d0:	4290      	cmp	r0, r2
 80195d2:	bf0c      	ite	eq
 80195d4:	4618      	moveq	r0, r3
 80195d6:	2001      	movne	r0, #1
 80195d8:	bd70      	pop	{r4, r5, r6, pc}
 80195da:	f7f6 fbf9 	bl	800fdd0 <rcutils_reset_error>
 80195de:	f640 0098 	movw	r0, #2200	@ 0x898
 80195e2:	bd70      	pop	{r4, r5, r6, pc}
 80195e4:	f640 0098 	movw	r0, #2200	@ 0x898
 80195e8:	bd70      	pop	{r4, r5, r6, pc}
 80195ea:	200b      	movs	r0, #11
 80195ec:	bd70      	pop	{r4, r5, r6, pc}
 80195ee:	f640 0098 	movw	r0, #2200	@ 0x898
 80195f2:	4770      	bx	lr

080195f4 <rcl_action_send_cancel_response>:
 80195f4:	b398      	cbz	r0, 801965e <rcl_action_send_cancel_response+0x6a>
 80195f6:	b570      	push	{r4, r5, r6, lr}
 80195f8:	4604      	mov	r4, r0
 80195fa:	6800      	ldr	r0, [r0, #0]
 80195fc:	b350      	cbz	r0, 8019654 <rcl_action_send_cancel_response+0x60>
 80195fe:	460e      	mov	r6, r1
 8019600:	4615      	mov	r5, r2
 8019602:	f7fe fa3f 	bl	8017a84 <rcl_service_is_valid>
 8019606:	b300      	cbz	r0, 801964a <rcl_action_send_cancel_response+0x56>
 8019608:	6820      	ldr	r0, [r4, #0]
 801960a:	3004      	adds	r0, #4
 801960c:	f7fe fa3a 	bl	8017a84 <rcl_service_is_valid>
 8019610:	b1d8      	cbz	r0, 801964a <rcl_action_send_cancel_response+0x56>
 8019612:	6820      	ldr	r0, [r4, #0]
 8019614:	3008      	adds	r0, #8
 8019616:	f7fe fa35 	bl	8017a84 <rcl_service_is_valid>
 801961a:	b1b0      	cbz	r0, 801964a <rcl_action_send_cancel_response+0x56>
 801961c:	6820      	ldr	r0, [r4, #0]
 801961e:	300c      	adds	r0, #12
 8019620:	f7f5 fc42 	bl	800eea8 <rcl_publisher_is_valid>
 8019624:	b188      	cbz	r0, 801964a <rcl_action_send_cancel_response+0x56>
 8019626:	6820      	ldr	r0, [r4, #0]
 8019628:	3010      	adds	r0, #16
 801962a:	f7f5 fc3d 	bl	800eea8 <rcl_publisher_is_valid>
 801962e:	b160      	cbz	r0, 801964a <rcl_action_send_cancel_response+0x56>
 8019630:	b19d      	cbz	r5, 801965a <rcl_action_send_cancel_response+0x66>
 8019632:	b196      	cbz	r6, 801965a <rcl_action_send_cancel_response+0x66>
 8019634:	6820      	ldr	r0, [r4, #0]
 8019636:	462a      	mov	r2, r5
 8019638:	4631      	mov	r1, r6
 801963a:	3004      	adds	r0, #4
 801963c:	f7fe fa0a 	bl	8017a54 <rcl_send_response>
 8019640:	b110      	cbz	r0, 8019648 <rcl_action_send_cancel_response+0x54>
 8019642:	2802      	cmp	r0, #2
 8019644:	bf18      	it	ne
 8019646:	2001      	movne	r0, #1
 8019648:	bd70      	pop	{r4, r5, r6, pc}
 801964a:	f7f6 fbc1 	bl	800fdd0 <rcutils_reset_error>
 801964e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019652:	bd70      	pop	{r4, r5, r6, pc}
 8019654:	f640 0098 	movw	r0, #2200	@ 0x898
 8019658:	bd70      	pop	{r4, r5, r6, pc}
 801965a:	200b      	movs	r0, #11
 801965c:	bd70      	pop	{r4, r5, r6, pc}
 801965e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019662:	4770      	bx	lr

08019664 <rcl_action_wait_set_add_action_server>:
 8019664:	2800      	cmp	r0, #0
 8019666:	d04d      	beq.n	8019704 <rcl_action_wait_set_add_action_server+0xa0>
 8019668:	b570      	push	{r4, r5, r6, lr}
 801966a:	460c      	mov	r4, r1
 801966c:	b159      	cbz	r1, 8019686 <rcl_action_wait_set_add_action_server+0x22>
 801966e:	4605      	mov	r5, r0
 8019670:	6808      	ldr	r0, [r1, #0]
 8019672:	b140      	cbz	r0, 8019686 <rcl_action_wait_set_add_action_server+0x22>
 8019674:	4616      	mov	r6, r2
 8019676:	f7fe fa05 	bl	8017a84 <rcl_service_is_valid>
 801967a:	b120      	cbz	r0, 8019686 <rcl_action_wait_set_add_action_server+0x22>
 801967c:	6820      	ldr	r0, [r4, #0]
 801967e:	3004      	adds	r0, #4
 8019680:	f7fe fa00 	bl	8017a84 <rcl_service_is_valid>
 8019684:	b910      	cbnz	r0, 801968c <rcl_action_wait_set_add_action_server+0x28>
 8019686:	f640 0098 	movw	r0, #2200	@ 0x898
 801968a:	bd70      	pop	{r4, r5, r6, pc}
 801968c:	6820      	ldr	r0, [r4, #0]
 801968e:	3008      	adds	r0, #8
 8019690:	f7fe f9f8 	bl	8017a84 <rcl_service_is_valid>
 8019694:	2800      	cmp	r0, #0
 8019696:	d0f6      	beq.n	8019686 <rcl_action_wait_set_add_action_server+0x22>
 8019698:	6820      	ldr	r0, [r4, #0]
 801969a:	300c      	adds	r0, #12
 801969c:	f7f5 fc1c 	bl	800eed8 <rcl_publisher_is_valid_except_context>
 80196a0:	2800      	cmp	r0, #0
 80196a2:	d0f0      	beq.n	8019686 <rcl_action_wait_set_add_action_server+0x22>
 80196a4:	6820      	ldr	r0, [r4, #0]
 80196a6:	3010      	adds	r0, #16
 80196a8:	f7f5 fc16 	bl	800eed8 <rcl_publisher_is_valid_except_context>
 80196ac:	2800      	cmp	r0, #0
 80196ae:	d0ea      	beq.n	8019686 <rcl_action_wait_set_add_action_server+0x22>
 80196b0:	6821      	ldr	r1, [r4, #0]
 80196b2:	4628      	mov	r0, r5
 80196b4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80196b8:	f7ff fad0 	bl	8018c5c <rcl_wait_set_add_service>
 80196bc:	2800      	cmp	r0, #0
 80196be:	d1e4      	bne.n	801968a <rcl_action_wait_set_add_action_server+0x26>
 80196c0:	6821      	ldr	r1, [r4, #0]
 80196c2:	4628      	mov	r0, r5
 80196c4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80196c8:	3104      	adds	r1, #4
 80196ca:	f7ff fac7 	bl	8018c5c <rcl_wait_set_add_service>
 80196ce:	2800      	cmp	r0, #0
 80196d0:	d1db      	bne.n	801968a <rcl_action_wait_set_add_action_server+0x26>
 80196d2:	6821      	ldr	r1, [r4, #0]
 80196d4:	4628      	mov	r0, r5
 80196d6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80196da:	3108      	adds	r1, #8
 80196dc:	f7ff fabe 	bl	8018c5c <rcl_wait_set_add_service>
 80196e0:	2800      	cmp	r0, #0
 80196e2:	d1d2      	bne.n	801968a <rcl_action_wait_set_add_action_server+0x26>
 80196e4:	6821      	ldr	r1, [r4, #0]
 80196e6:	4628      	mov	r0, r5
 80196e8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80196ec:	3114      	adds	r1, #20
 80196ee:	f7ff fa59 	bl	8018ba4 <rcl_wait_set_add_timer>
 80196f2:	2800      	cmp	r0, #0
 80196f4:	d1c9      	bne.n	801968a <rcl_action_wait_set_add_action_server+0x26>
 80196f6:	2e00      	cmp	r6, #0
 80196f8:	d0c7      	beq.n	801968a <rcl_action_wait_set_add_action_server+0x26>
 80196fa:	6823      	ldr	r3, [r4, #0]
 80196fc:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8019700:	6033      	str	r3, [r6, #0]
 8019702:	bd70      	pop	{r4, r5, r6, pc}
 8019704:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019708:	4770      	bx	lr
 801970a:	bf00      	nop

0801970c <rcl_action_server_wait_set_get_entities_ready>:
 801970c:	2800      	cmp	r0, #0
 801970e:	d067      	beq.n	80197e0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8019710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019714:	460c      	mov	r4, r1
 8019716:	b161      	cbz	r1, 8019732 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019718:	4605      	mov	r5, r0
 801971a:	6808      	ldr	r0, [r1, #0]
 801971c:	b148      	cbz	r0, 8019732 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801971e:	4616      	mov	r6, r2
 8019720:	4698      	mov	r8, r3
 8019722:	f7fe f9af 	bl	8017a84 <rcl_service_is_valid>
 8019726:	b120      	cbz	r0, 8019732 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019728:	6820      	ldr	r0, [r4, #0]
 801972a:	3004      	adds	r0, #4
 801972c:	f7fe f9aa 	bl	8017a84 <rcl_service_is_valid>
 8019730:	b918      	cbnz	r0, 801973a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8019732:	f640 0098 	movw	r0, #2200	@ 0x898
 8019736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801973a:	6820      	ldr	r0, [r4, #0]
 801973c:	3008      	adds	r0, #8
 801973e:	f7fe f9a1 	bl	8017a84 <rcl_service_is_valid>
 8019742:	2800      	cmp	r0, #0
 8019744:	d0f5      	beq.n	8019732 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019746:	6820      	ldr	r0, [r4, #0]
 8019748:	300c      	adds	r0, #12
 801974a:	f7f5 fbc5 	bl	800eed8 <rcl_publisher_is_valid_except_context>
 801974e:	2800      	cmp	r0, #0
 8019750:	d0ef      	beq.n	8019732 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019752:	6820      	ldr	r0, [r4, #0]
 8019754:	3010      	adds	r0, #16
 8019756:	f7f5 fbbf 	bl	800eed8 <rcl_publisher_is_valid_except_context>
 801975a:	2800      	cmp	r0, #0
 801975c:	d0e9      	beq.n	8019732 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801975e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019762:	2a00      	cmp	r2, #0
 8019764:	bf18      	it	ne
 8019766:	2b00      	cmpne	r3, #0
 8019768:	bf0c      	ite	eq
 801976a:	2101      	moveq	r1, #1
 801976c:	2100      	movne	r1, #0
 801976e:	f1b8 0f00 	cmp.w	r8, #0
 8019772:	bf08      	it	eq
 8019774:	f041 0101 	orreq.w	r1, r1, #1
 8019778:	bba9      	cbnz	r1, 80197e6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801977a:	b3a6      	cbz	r6, 80197e6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801977c:	6821      	ldr	r1, [r4, #0]
 801977e:	2000      	movs	r0, #0
 8019780:	692c      	ldr	r4, [r5, #16]
 8019782:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8019786:	6a2f      	ldr	r7, [r5, #32]
 8019788:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801978c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 8019790:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8019794:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8019798:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 801979c:	1a64      	subs	r4, r4, r1
 801979e:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80197a2:	fab4 f484 	clz	r4, r4
 80197a6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80197aa:	0964      	lsrs	r4, r4, #5
 80197ac:	7034      	strb	r4, [r6, #0]
 80197ae:	1d0c      	adds	r4, r1, #4
 80197b0:	1b2c      	subs	r4, r5, r4
 80197b2:	fab4 f484 	clz	r4, r4
 80197b6:	0964      	lsrs	r4, r4, #5
 80197b8:	f888 4000 	strb.w	r4, [r8]
 80197bc:	f101 0408 	add.w	r4, r1, #8
 80197c0:	1b1b      	subs	r3, r3, r4
 80197c2:	9c06      	ldr	r4, [sp, #24]
 80197c4:	fab3 f383 	clz	r3, r3
 80197c8:	095b      	lsrs	r3, r3, #5
 80197ca:	7023      	strb	r3, [r4, #0]
 80197cc:	f101 0314 	add.w	r3, r1, #20
 80197d0:	1ad3      	subs	r3, r2, r3
 80197d2:	9a07      	ldr	r2, [sp, #28]
 80197d4:	fab3 f383 	clz	r3, r3
 80197d8:	095b      	lsrs	r3, r3, #5
 80197da:	7013      	strb	r3, [r2, #0]
 80197dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80197e4:	4770      	bx	lr
 80197e6:	200b      	movs	r0, #11
 80197e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080197ec <_execute_event_handler>:
 80197ec:	2002      	movs	r0, #2
 80197ee:	4770      	bx	lr

080197f0 <_cancel_goal_event_handler>:
 80197f0:	2003      	movs	r0, #3
 80197f2:	4770      	bx	lr

080197f4 <_succeed_event_handler>:
 80197f4:	2004      	movs	r0, #4
 80197f6:	4770      	bx	lr

080197f8 <_abort_event_handler>:
 80197f8:	2006      	movs	r0, #6
 80197fa:	4770      	bx	lr

080197fc <_canceled_event_handler>:
 80197fc:	2005      	movs	r0, #5
 80197fe:	4770      	bx	lr

08019800 <rcl_action_transition_goal_state>:
 8019800:	b2c2      	uxtb	r2, r0
 8019802:	2a06      	cmp	r2, #6
 8019804:	d810      	bhi.n	8019828 <rcl_action_transition_goal_state+0x28>
 8019806:	2904      	cmp	r1, #4
 8019808:	d80e      	bhi.n	8019828 <rcl_action_transition_goal_state+0x28>
 801980a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801980e:	b410      	push	{r4}
 8019810:	1853      	adds	r3, r2, r1
 8019812:	4c06      	ldr	r4, [pc, #24]	@ (801982c <rcl_action_transition_goal_state+0x2c>)
 8019814:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019818:	b113      	cbz	r3, 8019820 <rcl_action_transition_goal_state+0x20>
 801981a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801981e:	4718      	bx	r3
 8019820:	2000      	movs	r0, #0
 8019822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019826:	4770      	bx	lr
 8019828:	2000      	movs	r0, #0
 801982a:	4770      	bx	lr
 801982c:	0801e6ec 	.word	0x0801e6ec

08019830 <rcl_action_get_zero_initialized_cancel_response>:
 8019830:	b510      	push	{r4, lr}
 8019832:	4c07      	ldr	r4, [pc, #28]	@ (8019850 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8019834:	4686      	mov	lr, r0
 8019836:	4684      	mov	ip, r0
 8019838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801983a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801983e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019844:	6823      	ldr	r3, [r4, #0]
 8019846:	4670      	mov	r0, lr
 8019848:	f8cc 3000 	str.w	r3, [ip]
 801984c:	bd10      	pop	{r4, pc}
 801984e:	bf00      	nop
 8019850:	0801e778 	.word	0x0801e778

08019854 <rclc_action_send_result_request>:
 8019854:	b1d0      	cbz	r0, 801988c <rclc_action_send_result_request+0x38>
 8019856:	4684      	mov	ip, r0
 8019858:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801985c:	b500      	push	{lr}
 801985e:	b087      	sub	sp, #28
 8019860:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8019864:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019868:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801986c:	f10d 0e08 	add.w	lr, sp, #8
 8019870:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019874:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019878:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801987c:	a902      	add	r1, sp, #8
 801987e:	3010      	adds	r0, #16
 8019880:	f7ff fbca 	bl	8019018 <rcl_action_send_result_request>
 8019884:	b920      	cbnz	r0, 8019890 <rclc_action_send_result_request+0x3c>
 8019886:	b007      	add	sp, #28
 8019888:	f85d fb04 	ldr.w	pc, [sp], #4
 801988c:	200b      	movs	r0, #11
 801988e:	4770      	bx	lr
 8019890:	9001      	str	r0, [sp, #4]
 8019892:	f7f6 fa9d 	bl	800fdd0 <rcutils_reset_error>
 8019896:	9801      	ldr	r0, [sp, #4]
 8019898:	b007      	add	sp, #28
 801989a:	f85d fb04 	ldr.w	pc, [sp], #4
 801989e:	bf00      	nop

080198a0 <rclc_action_take_goal_handle>:
 80198a0:	b160      	cbz	r0, 80198bc <rclc_action_take_goal_handle+0x1c>
 80198a2:	6883      	ldr	r3, [r0, #8]
 80198a4:	b143      	cbz	r3, 80198b8 <rclc_action_take_goal_handle+0x18>
 80198a6:	6819      	ldr	r1, [r3, #0]
 80198a8:	2200      	movs	r2, #0
 80198aa:	6081      	str	r1, [r0, #8]
 80198ac:	721a      	strb	r2, [r3, #8]
 80198ae:	68c1      	ldr	r1, [r0, #12]
 80198b0:	621a      	str	r2, [r3, #32]
 80198b2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80198b4:	6019      	str	r1, [r3, #0]
 80198b6:	60c3      	str	r3, [r0, #12]
 80198b8:	4618      	mov	r0, r3
 80198ba:	4770      	bx	lr
 80198bc:	4603      	mov	r3, r0
 80198be:	e7fb      	b.n	80198b8 <rclc_action_take_goal_handle+0x18>

080198c0 <rclc_action_remove_used_goal_handle>:
 80198c0:	b180      	cbz	r0, 80198e4 <rclc_action_remove_used_goal_handle+0x24>
 80198c2:	b179      	cbz	r1, 80198e4 <rclc_action_remove_used_goal_handle+0x24>
 80198c4:	68c3      	ldr	r3, [r0, #12]
 80198c6:	4299      	cmp	r1, r3
 80198c8:	d00d      	beq.n	80198e6 <rclc_action_remove_used_goal_handle+0x26>
 80198ca:	b12b      	cbz	r3, 80198d8 <rclc_action_remove_used_goal_handle+0x18>
 80198cc:	681a      	ldr	r2, [r3, #0]
 80198ce:	4291      	cmp	r1, r2
 80198d0:	d003      	beq.n	80198da <rclc_action_remove_used_goal_handle+0x1a>
 80198d2:	4613      	mov	r3, r2
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d1f9      	bne.n	80198cc <rclc_action_remove_used_goal_handle+0xc>
 80198d8:	4770      	bx	lr
 80198da:	680a      	ldr	r2, [r1, #0]
 80198dc:	601a      	str	r2, [r3, #0]
 80198de:	6883      	ldr	r3, [r0, #8]
 80198e0:	600b      	str	r3, [r1, #0]
 80198e2:	6081      	str	r1, [r0, #8]
 80198e4:	4770      	bx	lr
 80198e6:	680b      	ldr	r3, [r1, #0]
 80198e8:	60c3      	str	r3, [r0, #12]
 80198ea:	e7f8      	b.n	80198de <rclc_action_remove_used_goal_handle+0x1e>

080198ec <rclc_action_find_goal_handle_by_uuid>:
 80198ec:	b538      	push	{r3, r4, r5, lr}
 80198ee:	b181      	cbz	r1, 8019912 <rclc_action_find_goal_handle_by_uuid+0x26>
 80198f0:	b178      	cbz	r0, 8019912 <rclc_action_find_goal_handle_by_uuid+0x26>
 80198f2:	68c4      	ldr	r4, [r0, #12]
 80198f4:	460d      	mov	r5, r1
 80198f6:	b914      	cbnz	r4, 80198fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80198f8:	e009      	b.n	801990e <rclc_action_find_goal_handle_by_uuid+0x22>
 80198fa:	6824      	ldr	r4, [r4, #0]
 80198fc:	b13c      	cbz	r4, 801990e <rclc_action_find_goal_handle_by_uuid+0x22>
 80198fe:	f104 0009 	add.w	r0, r4, #9
 8019902:	2210      	movs	r2, #16
 8019904:	4629      	mov	r1, r5
 8019906:	f003 fa85 	bl	801ce14 <memcmp>
 801990a:	2800      	cmp	r0, #0
 801990c:	d1f5      	bne.n	80198fa <rclc_action_find_goal_handle_by_uuid+0xe>
 801990e:	4620      	mov	r0, r4
 8019910:	bd38      	pop	{r3, r4, r5, pc}
 8019912:	2400      	movs	r4, #0
 8019914:	4620      	mov	r0, r4
 8019916:	bd38      	pop	{r3, r4, r5, pc}

08019918 <rclc_action_find_first_handle_by_status>:
 8019918:	b140      	cbz	r0, 801992c <rclc_action_find_first_handle_by_status+0x14>
 801991a:	68c0      	ldr	r0, [r0, #12]
 801991c:	b910      	cbnz	r0, 8019924 <rclc_action_find_first_handle_by_status+0xc>
 801991e:	e005      	b.n	801992c <rclc_action_find_first_handle_by_status+0x14>
 8019920:	6800      	ldr	r0, [r0, #0]
 8019922:	b118      	cbz	r0, 801992c <rclc_action_find_first_handle_by_status+0x14>
 8019924:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019928:	428b      	cmp	r3, r1
 801992a:	d1f9      	bne.n	8019920 <rclc_action_find_first_handle_by_status+0x8>
 801992c:	4770      	bx	lr
 801992e:	bf00      	nop

08019930 <rclc_action_find_first_terminated_handle>:
 8019930:	b140      	cbz	r0, 8019944 <rclc_action_find_first_terminated_handle+0x14>
 8019932:	68c0      	ldr	r0, [r0, #12]
 8019934:	b910      	cbnz	r0, 801993c <rclc_action_find_first_terminated_handle+0xc>
 8019936:	e005      	b.n	8019944 <rclc_action_find_first_terminated_handle+0x14>
 8019938:	6800      	ldr	r0, [r0, #0]
 801993a:	b118      	cbz	r0, 8019944 <rclc_action_find_first_terminated_handle+0x14>
 801993c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019940:	2b03      	cmp	r3, #3
 8019942:	ddf9      	ble.n	8019938 <rclc_action_find_first_terminated_handle+0x8>
 8019944:	4770      	bx	lr
 8019946:	bf00      	nop

08019948 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8019948:	b170      	cbz	r0, 8019968 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801994a:	68c0      	ldr	r0, [r0, #12]
 801994c:	b160      	cbz	r0, 8019968 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801994e:	b410      	push	{r4}
 8019950:	e001      	b.n	8019956 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8019952:	6800      	ldr	r0, [r0, #0]
 8019954:	b128      	cbz	r0, 8019962 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8019956:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801995a:	4299      	cmp	r1, r3
 801995c:	bf08      	it	eq
 801995e:	4294      	cmpeq	r4, r2
 8019960:	d1f7      	bne.n	8019952 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8019962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019966:	4770      	bx	lr
 8019968:	4770      	bx	lr
 801996a:	bf00      	nop

0801996c <rclc_action_find_handle_by_result_request_sequence_number>:
 801996c:	b170      	cbz	r0, 801998c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801996e:	68c0      	ldr	r0, [r0, #12]
 8019970:	b160      	cbz	r0, 801998c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019972:	b410      	push	{r4}
 8019974:	e001      	b.n	801997a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8019976:	6800      	ldr	r0, [r0, #0]
 8019978:	b128      	cbz	r0, 8019986 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801997a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801997e:	4299      	cmp	r1, r3
 8019980:	bf08      	it	eq
 8019982:	4294      	cmpeq	r4, r2
 8019984:	d1f7      	bne.n	8019976 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8019986:	f85d 4b04 	ldr.w	r4, [sp], #4
 801998a:	4770      	bx	lr
 801998c:	4770      	bx	lr
 801998e:	bf00      	nop

08019990 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8019990:	b170      	cbz	r0, 80199b0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8019992:	68c0      	ldr	r0, [r0, #12]
 8019994:	b160      	cbz	r0, 80199b0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8019996:	b410      	push	{r4}
 8019998:	e001      	b.n	801999e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801999a:	6800      	ldr	r0, [r0, #0]
 801999c:	b128      	cbz	r0, 80199aa <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801999e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80199a2:	4299      	cmp	r1, r3
 80199a4:	bf08      	it	eq
 80199a6:	4294      	cmpeq	r4, r2
 80199a8:	d1f7      	bne.n	801999a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80199aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199ae:	4770      	bx	lr
 80199b0:	4770      	bx	lr
 80199b2:	bf00      	nop

080199b4 <rclc_action_find_first_handle_with_goal_response>:
 80199b4:	b140      	cbz	r0, 80199c8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199b6:	68c0      	ldr	r0, [r0, #12]
 80199b8:	b910      	cbnz	r0, 80199c0 <rclc_action_find_first_handle_with_goal_response+0xc>
 80199ba:	e005      	b.n	80199c8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199bc:	6800      	ldr	r0, [r0, #0]
 80199be:	b118      	cbz	r0, 80199c8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199c0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d0f9      	beq.n	80199bc <rclc_action_find_first_handle_with_goal_response+0x8>
 80199c8:	4770      	bx	lr
 80199ca:	bf00      	nop

080199cc <rclc_action_find_first_handle_with_result_response>:
 80199cc:	b140      	cbz	r0, 80199e0 <rclc_action_find_first_handle_with_result_response+0x14>
 80199ce:	68c0      	ldr	r0, [r0, #12]
 80199d0:	b910      	cbnz	r0, 80199d8 <rclc_action_find_first_handle_with_result_response+0xc>
 80199d2:	e005      	b.n	80199e0 <rclc_action_find_first_handle_with_result_response+0x14>
 80199d4:	6800      	ldr	r0, [r0, #0]
 80199d6:	b118      	cbz	r0, 80199e0 <rclc_action_find_first_handle_with_result_response+0x14>
 80199d8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d0f9      	beq.n	80199d4 <rclc_action_find_first_handle_with_result_response+0x8>
 80199e0:	4770      	bx	lr
 80199e2:	bf00      	nop

080199e4 <rclc_action_server_response_goal_request>:
 80199e4:	b198      	cbz	r0, 8019a0e <rclc_action_server_response_goal_request+0x2a>
 80199e6:	2200      	movs	r2, #0
 80199e8:	460b      	mov	r3, r1
 80199ea:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80199ee:	b510      	push	{r4, lr}
 80199f0:	6844      	ldr	r4, [r0, #4]
 80199f2:	b086      	sub	sp, #24
 80199f4:	f104 0010 	add.w	r0, r4, #16
 80199f8:	9205      	str	r2, [sp, #20]
 80199fa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80199fe:	aa03      	add	r2, sp, #12
 8019a00:	f88d 300c 	strb.w	r3, [sp, #12]
 8019a04:	f7ff fd3e 	bl	8019484 <rcl_action_send_goal_response>
 8019a08:	b918      	cbnz	r0, 8019a12 <rclc_action_server_response_goal_request+0x2e>
 8019a0a:	b006      	add	sp, #24
 8019a0c:	bd10      	pop	{r4, pc}
 8019a0e:	200b      	movs	r0, #11
 8019a10:	4770      	bx	lr
 8019a12:	9001      	str	r0, [sp, #4]
 8019a14:	f7f6 f9dc 	bl	800fdd0 <rcutils_reset_error>
 8019a18:	9801      	ldr	r0, [sp, #4]
 8019a1a:	b006      	add	sp, #24
 8019a1c:	bd10      	pop	{r4, pc}
 8019a1e:	bf00      	nop

08019a20 <rclc_action_server_goal_cancel_accept>:
 8019a20:	b310      	cbz	r0, 8019a68 <rclc_action_server_goal_cancel_accept+0x48>
 8019a22:	b510      	push	{r4, lr}
 8019a24:	b090      	sub	sp, #64	@ 0x40
 8019a26:	4604      	mov	r4, r0
 8019a28:	a806      	add	r0, sp, #24
 8019a2a:	f7ff ff01 	bl	8019830 <rcl_action_get_zero_initialized_cancel_response>
 8019a2e:	2300      	movs	r3, #0
 8019a30:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8019a34:	46ec      	mov	ip, sp
 8019a36:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019a3a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019a3e:	f88d 3018 	strb.w	r3, [sp, #24]
 8019a42:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8019a46:	f8cd d01c 	str.w	sp, [sp, #28]
 8019a4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a4e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019a70 <rclc_action_server_goal_cancel_accept+0x50>
 8019a52:	6860      	ldr	r0, [r4, #4]
 8019a54:	aa06      	add	r2, sp, #24
 8019a56:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8019a5a:	3010      	adds	r0, #16
 8019a5c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019a60:	f7ff fdc8 	bl	80195f4 <rcl_action_send_cancel_response>
 8019a64:	b010      	add	sp, #64	@ 0x40
 8019a66:	bd10      	pop	{r4, pc}
 8019a68:	200b      	movs	r0, #11
 8019a6a:	4770      	bx	lr
 8019a6c:	f3af 8000 	nop.w
 8019a70:	00000001 	.word	0x00000001
 8019a74:	00000001 	.word	0x00000001

08019a78 <rclc_action_server_goal_cancel_reject>:
 8019a78:	b082      	sub	sp, #8
 8019a7a:	b530      	push	{r4, r5, lr}
 8019a7c:	b08b      	sub	sp, #44	@ 0x2c
 8019a7e:	ac0e      	add	r4, sp, #56	@ 0x38
 8019a80:	e884 000c 	stmia.w	r4, {r2, r3}
 8019a84:	b188      	cbz	r0, 8019aaa <rclc_action_server_goal_cancel_reject+0x32>
 8019a86:	4604      	mov	r4, r0
 8019a88:	a801      	add	r0, sp, #4
 8019a8a:	460d      	mov	r5, r1
 8019a8c:	f7ff fed0 	bl	8019830 <rcl_action_get_zero_initialized_cancel_response>
 8019a90:	aa01      	add	r2, sp, #4
 8019a92:	a90e      	add	r1, sp, #56	@ 0x38
 8019a94:	f104 0010 	add.w	r0, r4, #16
 8019a98:	f88d 5004 	strb.w	r5, [sp, #4]
 8019a9c:	f7ff fdaa 	bl	80195f4 <rcl_action_send_cancel_response>
 8019aa0:	b00b      	add	sp, #44	@ 0x2c
 8019aa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019aa6:	b002      	add	sp, #8
 8019aa8:	4770      	bx	lr
 8019aaa:	200b      	movs	r0, #11
 8019aac:	b00b      	add	sp, #44	@ 0x2c
 8019aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ab2:	b002      	add	sp, #8
 8019ab4:	4770      	bx	lr
 8019ab6:	bf00      	nop

08019ab8 <__atomic_load_8>:
 8019ab8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8019abc:	4a16      	ldr	r2, [pc, #88]	@ (8019b18 <__atomic_load_8+0x60>)
 8019abe:	4b17      	ldr	r3, [pc, #92]	@ (8019b1c <__atomic_load_8+0x64>)
 8019ac0:	f04f 0c01 	mov.w	ip, #1
 8019ac4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8019ac8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019acc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8019ad0:	fb02 f101 	mul.w	r1, r2, r1
 8019ad4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8019ad8:	fba3 2301 	umull	r2, r3, r3, r1
 8019adc:	091b      	lsrs	r3, r3, #4
 8019ade:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019ae2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8019ae6:	b4d0      	push	{r4, r6, r7}
 8019ae8:	1ac9      	subs	r1, r1, r3
 8019aea:	4c0d      	ldr	r4, [pc, #52]	@ (8019b20 <__atomic_load_8+0x68>)
 8019aec:	1862      	adds	r2, r4, r1
 8019aee:	e8d2 3f4f 	ldrexb	r3, [r2]
 8019af2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8019af6:	2e00      	cmp	r6, #0
 8019af8:	d1f9      	bne.n	8019aee <__atomic_load_8+0x36>
 8019afa:	b2db      	uxtb	r3, r3
 8019afc:	f3bf 8f5b 	dmb	ish
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d1f4      	bne.n	8019aee <__atomic_load_8+0x36>
 8019b04:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019b08:	f3bf 8f5b 	dmb	ish
 8019b0c:	5463      	strb	r3, [r4, r1]
 8019b0e:	4630      	mov	r0, r6
 8019b10:	4639      	mov	r1, r7
 8019b12:	bcd0      	pop	{r4, r6, r7}
 8019b14:	4770      	bx	lr
 8019b16:	bf00      	nop
 8019b18:	27d4eb2d 	.word	0x27d4eb2d
 8019b1c:	b21642c9 	.word	0xb21642c9
 8019b20:	240138a4 	.word	0x240138a4

08019b24 <__atomic_store_8>:
 8019b24:	b570      	push	{r4, r5, r6, lr}
 8019b26:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8019b2a:	4916      	ldr	r1, [pc, #88]	@ (8019b84 <__atomic_store_8+0x60>)
 8019b2c:	4c16      	ldr	r4, [pc, #88]	@ (8019b88 <__atomic_store_8+0x64>)
 8019b2e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8019b32:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8019b36:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8019b3a:	fb01 fe0e 	mul.w	lr, r1, lr
 8019b3e:	4913      	ldr	r1, [pc, #76]	@ (8019b8c <__atomic_store_8+0x68>)
 8019b40:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8019b44:	fba1 510e 	umull	r5, r1, r1, lr
 8019b48:	f04f 0501 	mov.w	r5, #1
 8019b4c:	0909      	lsrs	r1, r1, #4
 8019b4e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8019b52:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8019b56:	ebae 0e01 	sub.w	lr, lr, r1
 8019b5a:	eb04 0c0e 	add.w	ip, r4, lr
 8019b5e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8019b62:	e8cc 5f46 	strexb	r6, r5, [ip]
 8019b66:	2e00      	cmp	r6, #0
 8019b68:	d1f9      	bne.n	8019b5e <__atomic_store_8+0x3a>
 8019b6a:	b2c9      	uxtb	r1, r1
 8019b6c:	f3bf 8f5b 	dmb	ish
 8019b70:	2900      	cmp	r1, #0
 8019b72:	d1f4      	bne.n	8019b5e <__atomic_store_8+0x3a>
 8019b74:	e9c0 2300 	strd	r2, r3, [r0]
 8019b78:	f3bf 8f5b 	dmb	ish
 8019b7c:	f804 100e 	strb.w	r1, [r4, lr]
 8019b80:	bd70      	pop	{r4, r5, r6, pc}
 8019b82:	bf00      	nop
 8019b84:	27d4eb2d 	.word	0x27d4eb2d
 8019b88:	240138a4 	.word	0x240138a4
 8019b8c:	b21642c9 	.word	0xb21642c9

08019b90 <__atomic_exchange_8>:
 8019b90:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8019b94:	4917      	ldr	r1, [pc, #92]	@ (8019bf4 <__atomic_exchange_8+0x64>)
 8019b96:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8019b9a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8019b9e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8019ba2:	fb01 fc0c 	mul.w	ip, r1, ip
 8019ba6:	4914      	ldr	r1, [pc, #80]	@ (8019bf8 <__atomic_exchange_8+0x68>)
 8019ba8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8019bac:	b570      	push	{r4, r5, r6, lr}
 8019bae:	4686      	mov	lr, r0
 8019bb0:	fba1 010c 	umull	r0, r1, r1, ip
 8019bb4:	4d11      	ldr	r5, [pc, #68]	@ (8019bfc <__atomic_exchange_8+0x6c>)
 8019bb6:	f04f 0001 	mov.w	r0, #1
 8019bba:	0909      	lsrs	r1, r1, #4
 8019bbc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8019bc0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8019bc4:	ebac 0c01 	sub.w	ip, ip, r1
 8019bc8:	eb05 010c 	add.w	r1, r5, ip
 8019bcc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8019bd0:	e8c1 0f46 	strexb	r6, r0, [r1]
 8019bd4:	2e00      	cmp	r6, #0
 8019bd6:	d1f9      	bne.n	8019bcc <__atomic_exchange_8+0x3c>
 8019bd8:	b2e4      	uxtb	r4, r4
 8019bda:	f3bf 8f5b 	dmb	ish
 8019bde:	2c00      	cmp	r4, #0
 8019be0:	d1f4      	bne.n	8019bcc <__atomic_exchange_8+0x3c>
 8019be2:	e9de 0100 	ldrd	r0, r1, [lr]
 8019be6:	e9ce 2300 	strd	r2, r3, [lr]
 8019bea:	f3bf 8f5b 	dmb	ish
 8019bee:	f805 400c 	strb.w	r4, [r5, ip]
 8019bf2:	bd70      	pop	{r4, r5, r6, pc}
 8019bf4:	27d4eb2d 	.word	0x27d4eb2d
 8019bf8:	b21642c9 	.word	0xb21642c9
 8019bfc:	240138a4 	.word	0x240138a4

08019c00 <rcutils_get_env>:
 8019c00:	b168      	cbz	r0, 8019c1e <rcutils_get_env+0x1e>
 8019c02:	b510      	push	{r4, lr}
 8019c04:	460c      	mov	r4, r1
 8019c06:	b129      	cbz	r1, 8019c14 <rcutils_get_env+0x14>
 8019c08:	f002 fc72 	bl	801c4f0 <getenv>
 8019c0c:	b120      	cbz	r0, 8019c18 <rcutils_get_env+0x18>
 8019c0e:	6020      	str	r0, [r4, #0]
 8019c10:	2000      	movs	r0, #0
 8019c12:	bd10      	pop	{r4, pc}
 8019c14:	4803      	ldr	r0, [pc, #12]	@ (8019c24 <rcutils_get_env+0x24>)
 8019c16:	bd10      	pop	{r4, pc}
 8019c18:	4b03      	ldr	r3, [pc, #12]	@ (8019c28 <rcutils_get_env+0x28>)
 8019c1a:	6023      	str	r3, [r4, #0]
 8019c1c:	bd10      	pop	{r4, pc}
 8019c1e:	4803      	ldr	r0, [pc, #12]	@ (8019c2c <rcutils_get_env+0x2c>)
 8019c20:	4770      	bx	lr
 8019c22:	bf00      	nop
 8019c24:	0801e7b8 	.word	0x0801e7b8
 8019c28:	0801eba8 	.word	0x0801eba8
 8019c2c:	0801e79c 	.word	0x0801e79c

08019c30 <rcutils_is_directory>:
 8019c30:	2000      	movs	r0, #0
 8019c32:	4770      	bx	lr

08019c34 <rcutils_join_path>:
 8019c34:	b082      	sub	sp, #8
 8019c36:	2000      	movs	r0, #0
 8019c38:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019c3c:	b002      	add	sp, #8
 8019c3e:	4770      	bx	lr

08019c40 <rcutils_to_native_path>:
 8019c40:	b084      	sub	sp, #16
 8019c42:	2000      	movs	r0, #0
 8019c44:	f10d 0c04 	add.w	ip, sp, #4
 8019c48:	b004      	add	sp, #16
 8019c4a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8019c4e:	4770      	bx	lr

08019c50 <rcutils_format_string_limit>:
 8019c50:	b40f      	push	{r0, r1, r2, r3}
 8019c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c54:	b083      	sub	sp, #12
 8019c56:	ac08      	add	r4, sp, #32
 8019c58:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019c5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019c5e:	b326      	cbz	r6, 8019caa <rcutils_format_string_limit+0x5a>
 8019c60:	a808      	add	r0, sp, #32
 8019c62:	f7f6 f891 	bl	800fd88 <rcutils_allocator_is_valid>
 8019c66:	b300      	cbz	r0, 8019caa <rcutils_format_string_limit+0x5a>
 8019c68:	2100      	movs	r1, #0
 8019c6a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019c6c:	4632      	mov	r2, r6
 8019c6e:	4608      	mov	r0, r1
 8019c70:	e9cd 3300 	strd	r3, r3, [sp]
 8019c74:	f000 f906 	bl	8019e84 <rcutils_vsnprintf>
 8019c78:	1c43      	adds	r3, r0, #1
 8019c7a:	4605      	mov	r5, r0
 8019c7c:	d015      	beq.n	8019caa <rcutils_format_string_limit+0x5a>
 8019c7e:	1c47      	adds	r7, r0, #1
 8019c80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019c82:	429f      	cmp	r7, r3
 8019c84:	d901      	bls.n	8019c8a <rcutils_format_string_limit+0x3a>
 8019c86:	1e5d      	subs	r5, r3, #1
 8019c88:	461f      	mov	r7, r3
 8019c8a:	9b08      	ldr	r3, [sp, #32]
 8019c8c:	4638      	mov	r0, r7
 8019c8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019c90:	4798      	blx	r3
 8019c92:	4604      	mov	r4, r0
 8019c94:	b148      	cbz	r0, 8019caa <rcutils_format_string_limit+0x5a>
 8019c96:	4632      	mov	r2, r6
 8019c98:	4639      	mov	r1, r7
 8019c9a:	9b01      	ldr	r3, [sp, #4]
 8019c9c:	f000 f8f2 	bl	8019e84 <rcutils_vsnprintf>
 8019ca0:	2800      	cmp	r0, #0
 8019ca2:	db09      	blt.n	8019cb8 <rcutils_format_string_limit+0x68>
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	5563      	strb	r3, [r4, r5]
 8019ca8:	e000      	b.n	8019cac <rcutils_format_string_limit+0x5c>
 8019caa:	2400      	movs	r4, #0
 8019cac:	4620      	mov	r0, r4
 8019cae:	b003      	add	sp, #12
 8019cb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019cb4:	b004      	add	sp, #16
 8019cb6:	4770      	bx	lr
 8019cb8:	4620      	mov	r0, r4
 8019cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cbc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019cbe:	2400      	movs	r4, #0
 8019cc0:	4798      	blx	r3
 8019cc2:	e7f3      	b.n	8019cac <rcutils_format_string_limit+0x5c>

08019cc4 <rcutils_repl_str>:
 8019cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc8:	ed2d 8b02 	vpush	{d8}
 8019ccc:	b087      	sub	sp, #28
 8019cce:	2600      	movs	r6, #0
 8019cd0:	4680      	mov	r8, r0
 8019cd2:	468a      	mov	sl, r1
 8019cd4:	9000      	str	r0, [sp, #0]
 8019cd6:	4608      	mov	r0, r1
 8019cd8:	ee08 2a10 	vmov	s16, r2
 8019cdc:	4699      	mov	r9, r3
 8019cde:	2510      	movs	r5, #16
 8019ce0:	f7e6 fb08 	bl	80002f4 <strlen>
 8019ce4:	4637      	mov	r7, r6
 8019ce6:	46b3      	mov	fp, r6
 8019ce8:	9001      	str	r0, [sp, #4]
 8019cea:	e01e      	b.n	8019d2a <rcutils_repl_str+0x66>
 8019cec:	f10b 0b01 	add.w	fp, fp, #1
 8019cf0:	9b01      	ldr	r3, [sp, #4]
 8019cf2:	455e      	cmp	r6, fp
 8019cf4:	eb04 0803 	add.w	r8, r4, r3
 8019cf8:	d211      	bcs.n	8019d1e <rcutils_repl_str+0x5a>
 8019cfa:	442e      	add	r6, r5
 8019cfc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019d00:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d08:	00b1      	lsls	r1, r6, #2
 8019d0a:	4798      	blx	r3
 8019d0c:	2800      	cmp	r0, #0
 8019d0e:	f000 8088 	beq.w	8019e22 <rcutils_repl_str+0x15e>
 8019d12:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8019d16:	4607      	mov	r7, r0
 8019d18:	bf28      	it	cs
 8019d1a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8019d1e:	9a00      	ldr	r2, [sp, #0]
 8019d20:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8019d24:	1aa4      	subs	r4, r4, r2
 8019d26:	f843 4c04 	str.w	r4, [r3, #-4]
 8019d2a:	4651      	mov	r1, sl
 8019d2c:	4640      	mov	r0, r8
 8019d2e:	f003 f8c2 	bl	801ceb6 <strstr>
 8019d32:	4604      	mov	r4, r0
 8019d34:	4638      	mov	r0, r7
 8019d36:	2c00      	cmp	r4, #0
 8019d38:	d1d8      	bne.n	8019cec <rcutils_repl_str+0x28>
 8019d3a:	4640      	mov	r0, r8
 8019d3c:	f7e6 fada 	bl	80002f4 <strlen>
 8019d40:	9b00      	ldr	r3, [sp, #0]
 8019d42:	eba8 0803 	sub.w	r8, r8, r3
 8019d46:	eb08 0400 	add.w	r4, r8, r0
 8019d4a:	9402      	str	r4, [sp, #8]
 8019d4c:	f1bb 0f00 	cmp.w	fp, #0
 8019d50:	d045      	beq.n	8019dde <rcutils_repl_str+0x11a>
 8019d52:	ee18 0a10 	vmov	r0, s16
 8019d56:	f7e6 facd 	bl	80002f4 <strlen>
 8019d5a:	9a01      	ldr	r2, [sp, #4]
 8019d5c:	4606      	mov	r6, r0
 8019d5e:	f8d9 3000 	ldr.w	r3, [r9]
 8019d62:	1a82      	subs	r2, r0, r2
 8019d64:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019d68:	fb0b 4202 	mla	r2, fp, r2, r4
 8019d6c:	1c50      	adds	r0, r2, #1
 8019d6e:	9205      	str	r2, [sp, #20]
 8019d70:	4798      	blx	r3
 8019d72:	4682      	mov	sl, r0
 8019d74:	2800      	cmp	r0, #0
 8019d76:	d054      	beq.n	8019e22 <rcutils_repl_str+0x15e>
 8019d78:	683a      	ldr	r2, [r7, #0]
 8019d7a:	463d      	mov	r5, r7
 8019d7c:	9900      	ldr	r1, [sp, #0]
 8019d7e:	2401      	movs	r4, #1
 8019d80:	f003 f93b 	bl	801cffa <memcpy>
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8019d8a:	eb0a 0803 	add.w	r8, sl, r3
 8019d8e:	ee18 7a10 	vmov	r7, s16
 8019d92:	f8dd a000 	ldr.w	sl, [sp]
 8019d96:	f8cd 9000 	str.w	r9, [sp]
 8019d9a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019d9e:	4632      	mov	r2, r6
 8019da0:	4639      	mov	r1, r7
 8019da2:	4640      	mov	r0, r8
 8019da4:	44b0      	add	r8, r6
 8019da6:	f003 f928 	bl	801cffa <memcpy>
 8019daa:	f855 2b04 	ldr.w	r2, [r5], #4
 8019dae:	45a3      	cmp	fp, r4
 8019db0:	444a      	add	r2, r9
 8019db2:	eb0a 0102 	add.w	r1, sl, r2
 8019db6:	d02a      	beq.n	8019e0e <rcutils_repl_str+0x14a>
 8019db8:	6828      	ldr	r0, [r5, #0]
 8019dba:	1a82      	subs	r2, r0, r2
 8019dbc:	4640      	mov	r0, r8
 8019dbe:	4490      	add	r8, r2
 8019dc0:	f003 f91b 	bl	801cffa <memcpy>
 8019dc4:	1c62      	adds	r2, r4, #1
 8019dc6:	45a3      	cmp	fp, r4
 8019dc8:	4614      	mov	r4, r2
 8019dca:	d8e8      	bhi.n	8019d9e <rcutils_repl_str+0xda>
 8019dcc:	f8dd 9000 	ldr.w	r9, [sp]
 8019dd0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	9a05      	ldr	r2, [sp, #20]
 8019dd8:	f80a 3002 	strb.w	r3, [sl, r2]
 8019ddc:	e00b      	b.n	8019df6 <rcutils_repl_str+0x132>
 8019dde:	4620      	mov	r0, r4
 8019de0:	f8d9 3000 	ldr.w	r3, [r9]
 8019de4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019de8:	3001      	adds	r0, #1
 8019dea:	4798      	blx	r3
 8019dec:	4682      	mov	sl, r0
 8019dee:	b110      	cbz	r0, 8019df6 <rcutils_repl_str+0x132>
 8019df0:	9900      	ldr	r1, [sp, #0]
 8019df2:	f003 f8fa 	bl	801cfea <strcpy>
 8019df6:	4638      	mov	r0, r7
 8019df8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019dfc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019e00:	4798      	blx	r3
 8019e02:	4650      	mov	r0, sl
 8019e04:	b007      	add	sp, #28
 8019e06:	ecbd 8b02 	vpop	{d8}
 8019e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0e:	9b02      	ldr	r3, [sp, #8]
 8019e10:	4640      	mov	r0, r8
 8019e12:	f8dd 9000 	ldr.w	r9, [sp]
 8019e16:	1a9a      	subs	r2, r3, r2
 8019e18:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019e1c:	f003 f8ed 	bl	801cffa <memcpy>
 8019e20:	e7d8      	b.n	8019dd4 <rcutils_repl_str+0x110>
 8019e22:	f04f 0a00 	mov.w	sl, #0
 8019e26:	e7e6      	b.n	8019df6 <rcutils_repl_str+0x132>

08019e28 <rcutils_snprintf>:
 8019e28:	b40c      	push	{r2, r3}
 8019e2a:	b530      	push	{r4, r5, lr}
 8019e2c:	b083      	sub	sp, #12
 8019e2e:	ab06      	add	r3, sp, #24
 8019e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e34:	9301      	str	r3, [sp, #4]
 8019e36:	b1e2      	cbz	r2, 8019e72 <rcutils_snprintf+0x4a>
 8019e38:	fab0 f480 	clz	r4, r0
 8019e3c:	fab1 f581 	clz	r5, r1
 8019e40:	ea50 0c01 	orrs.w	ip, r0, r1
 8019e44:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019e48:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019e4c:	d008      	beq.n	8019e60 <rcutils_snprintf+0x38>
 8019e4e:	b984      	cbnz	r4, 8019e72 <rcutils_snprintf+0x4a>
 8019e50:	b97d      	cbnz	r5, 8019e72 <rcutils_snprintf+0x4a>
 8019e52:	f002 ff3d 	bl	801ccd0 <vsniprintf>
 8019e56:	b003      	add	sp, #12
 8019e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e5c:	b002      	add	sp, #8
 8019e5e:	4770      	bx	lr
 8019e60:	4661      	mov	r1, ip
 8019e62:	4660      	mov	r0, ip
 8019e64:	f002 ff34 	bl	801ccd0 <vsniprintf>
 8019e68:	b003      	add	sp, #12
 8019e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e6e:	b002      	add	sp, #8
 8019e70:	4770      	bx	lr
 8019e72:	f003 f88d 	bl	801cf90 <__errno>
 8019e76:	2216      	movs	r2, #22
 8019e78:	4603      	mov	r3, r0
 8019e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e7e:	601a      	str	r2, [r3, #0]
 8019e80:	e7e9      	b.n	8019e56 <rcutils_snprintf+0x2e>
 8019e82:	bf00      	nop

08019e84 <rcutils_vsnprintf>:
 8019e84:	b570      	push	{r4, r5, r6, lr}
 8019e86:	b1b2      	cbz	r2, 8019eb6 <rcutils_vsnprintf+0x32>
 8019e88:	fab0 f480 	clz	r4, r0
 8019e8c:	fab1 f581 	clz	r5, r1
 8019e90:	ea50 0c01 	orrs.w	ip, r0, r1
 8019e94:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019e98:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019e9c:	d005      	beq.n	8019eaa <rcutils_vsnprintf+0x26>
 8019e9e:	b954      	cbnz	r4, 8019eb6 <rcutils_vsnprintf+0x32>
 8019ea0:	b94d      	cbnz	r5, 8019eb6 <rcutils_vsnprintf+0x32>
 8019ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ea6:	f002 bf13 	b.w	801ccd0 <vsniprintf>
 8019eaa:	4661      	mov	r1, ip
 8019eac:	4660      	mov	r0, ip
 8019eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019eb2:	f002 bf0d 	b.w	801ccd0 <vsniprintf>
 8019eb6:	f003 f86b 	bl	801cf90 <__errno>
 8019eba:	2316      	movs	r3, #22
 8019ebc:	6003      	str	r3, [r0, #0]
 8019ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ec2:	bd70      	pop	{r4, r5, r6, pc}

08019ec4 <rcutils_strdup>:
 8019ec4:	b084      	sub	sp, #16
 8019ec6:	b570      	push	{r4, r5, r6, lr}
 8019ec8:	b082      	sub	sp, #8
 8019eca:	4605      	mov	r5, r0
 8019ecc:	ac07      	add	r4, sp, #28
 8019ece:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019ed2:	b1b0      	cbz	r0, 8019f02 <rcutils_strdup+0x3e>
 8019ed4:	f7e6 fa0e 	bl	80002f4 <strlen>
 8019ed8:	1c42      	adds	r2, r0, #1
 8019eda:	9b07      	ldr	r3, [sp, #28]
 8019edc:	4606      	mov	r6, r0
 8019ede:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019ee0:	4610      	mov	r0, r2
 8019ee2:	9201      	str	r2, [sp, #4]
 8019ee4:	4798      	blx	r3
 8019ee6:	4604      	mov	r4, r0
 8019ee8:	b128      	cbz	r0, 8019ef6 <rcutils_strdup+0x32>
 8019eea:	9a01      	ldr	r2, [sp, #4]
 8019eec:	4629      	mov	r1, r5
 8019eee:	f003 f884 	bl	801cffa <memcpy>
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	55a3      	strb	r3, [r4, r6]
 8019ef6:	4620      	mov	r0, r4
 8019ef8:	b002      	add	sp, #8
 8019efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019efe:	b004      	add	sp, #16
 8019f00:	4770      	bx	lr
 8019f02:	4604      	mov	r4, r0
 8019f04:	e7f7      	b.n	8019ef6 <rcutils_strdup+0x32>
 8019f06:	bf00      	nop

08019f08 <rcutils_strndup>:
 8019f08:	b082      	sub	sp, #8
 8019f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f0c:	ac06      	add	r4, sp, #24
 8019f0e:	4605      	mov	r5, r0
 8019f10:	e884 000c 	stmia.w	r4, {r2, r3}
 8019f14:	b188      	cbz	r0, 8019f3a <rcutils_strndup+0x32>
 8019f16:	1c4f      	adds	r7, r1, #1
 8019f18:	460e      	mov	r6, r1
 8019f1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f1c:	4638      	mov	r0, r7
 8019f1e:	4790      	blx	r2
 8019f20:	4604      	mov	r4, r0
 8019f22:	b128      	cbz	r0, 8019f30 <rcutils_strndup+0x28>
 8019f24:	463a      	mov	r2, r7
 8019f26:	4629      	mov	r1, r5
 8019f28:	f003 f867 	bl	801cffa <memcpy>
 8019f2c:	2300      	movs	r3, #0
 8019f2e:	55a3      	strb	r3, [r4, r6]
 8019f30:	4620      	mov	r0, r4
 8019f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f36:	b002      	add	sp, #8
 8019f38:	4770      	bx	lr
 8019f3a:	4604      	mov	r4, r0
 8019f3c:	e7f8      	b.n	8019f30 <rcutils_strndup+0x28>
 8019f3e:	bf00      	nop

08019f40 <rcutils_get_zero_initialized_string_map>:
 8019f40:	2000      	movs	r0, #0
 8019f42:	4b01      	ldr	r3, [pc, #4]	@ (8019f48 <rcutils_get_zero_initialized_string_map+0x8>)
 8019f44:	6018      	str	r0, [r3, #0]
 8019f46:	4770      	bx	lr
 8019f48:	240138bc 	.word	0x240138bc

08019f4c <rcutils_string_map_reserve>:
 8019f4c:	2800      	cmp	r0, #0
 8019f4e:	d05e      	beq.n	801a00e <rcutils_string_map_reserve+0xc2>
 8019f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f54:	460c      	mov	r4, r1
 8019f56:	6801      	ldr	r1, [r0, #0]
 8019f58:	b082      	sub	sp, #8
 8019f5a:	4605      	mov	r5, r0
 8019f5c:	b129      	cbz	r1, 8019f6a <rcutils_string_map_reserve+0x1e>
 8019f5e:	68cb      	ldr	r3, [r1, #12]
 8019f60:	42a3      	cmp	r3, r4
 8019f62:	d906      	bls.n	8019f72 <rcutils_string_map_reserve+0x26>
 8019f64:	461c      	mov	r4, r3
 8019f66:	2900      	cmp	r1, #0
 8019f68:	d1f9      	bne.n	8019f5e <rcutils_string_map_reserve+0x12>
 8019f6a:	201f      	movs	r0, #31
 8019f6c:	b002      	add	sp, #8
 8019f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f72:	688b      	ldr	r3, [r1, #8]
 8019f74:	42a3      	cmp	r3, r4
 8019f76:	d046      	beq.n	801a006 <rcutils_string_map_reserve+0xba>
 8019f78:	6a0e      	ldr	r6, [r1, #32]
 8019f7a:	2c00      	cmp	r4, #0
 8019f7c:	d033      	beq.n	8019fe6 <rcutils_string_map_reserve+0x9a>
 8019f7e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019f82:	d242      	bcs.n	801a00a <rcutils_string_map_reserve+0xbe>
 8019f84:	00a7      	lsls	r7, r4, #2
 8019f86:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8019f8a:	6808      	ldr	r0, [r1, #0]
 8019f8c:	4632      	mov	r2, r6
 8019f8e:	4639      	mov	r1, r7
 8019f90:	47c0      	blx	r8
 8019f92:	2800      	cmp	r0, #0
 8019f94:	d039      	beq.n	801a00a <rcutils_string_map_reserve+0xbe>
 8019f96:	682b      	ldr	r3, [r5, #0]
 8019f98:	4632      	mov	r2, r6
 8019f9a:	4639      	mov	r1, r7
 8019f9c:	6018      	str	r0, [r3, #0]
 8019f9e:	6858      	ldr	r0, [r3, #4]
 8019fa0:	47c0      	blx	r8
 8019fa2:	2800      	cmp	r0, #0
 8019fa4:	d031      	beq.n	801a00a <rcutils_string_map_reserve+0xbe>
 8019fa6:	682d      	ldr	r5, [r5, #0]
 8019fa8:	68ab      	ldr	r3, [r5, #8]
 8019faa:	6068      	str	r0, [r5, #4]
 8019fac:	42a3      	cmp	r3, r4
 8019fae:	d225      	bcs.n	8019ffc <rcutils_string_map_reserve+0xb0>
 8019fb0:	682a      	ldr	r2, [r5, #0]
 8019fb2:	eb00 0c07 	add.w	ip, r0, r7
 8019fb6:	0099      	lsls	r1, r3, #2
 8019fb8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8019fbc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8019fc0:	45e6      	cmp	lr, ip
 8019fc2:	d203      	bcs.n	8019fcc <rcutils_string_map_reserve+0x80>
 8019fc4:	eb02 0c07 	add.w	ip, r2, r7
 8019fc8:	4566      	cmp	r6, ip
 8019fca:	d322      	bcc.n	801a012 <rcutils_string_map_reserve+0xc6>
 8019fcc:	1ae3      	subs	r3, r4, r3
 8019fce:	4670      	mov	r0, lr
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	009a      	lsls	r2, r3, #2
 8019fd4:	9201      	str	r2, [sp, #4]
 8019fd6:	f002 ff47 	bl	801ce68 <memset>
 8019fda:	9a01      	ldr	r2, [sp, #4]
 8019fdc:	2100      	movs	r1, #0
 8019fde:	4630      	mov	r0, r6
 8019fe0:	f002 ff42 	bl	801ce68 <memset>
 8019fe4:	e00a      	b.n	8019ffc <rcutils_string_map_reserve+0xb0>
 8019fe6:	694f      	ldr	r7, [r1, #20]
 8019fe8:	6808      	ldr	r0, [r1, #0]
 8019fea:	4631      	mov	r1, r6
 8019fec:	47b8      	blx	r7
 8019fee:	682b      	ldr	r3, [r5, #0]
 8019ff0:	4631      	mov	r1, r6
 8019ff2:	6858      	ldr	r0, [r3, #4]
 8019ff4:	601c      	str	r4, [r3, #0]
 8019ff6:	47b8      	blx	r7
 8019ff8:	682d      	ldr	r5, [r5, #0]
 8019ffa:	606c      	str	r4, [r5, #4]
 8019ffc:	2000      	movs	r0, #0
 8019ffe:	60ac      	str	r4, [r5, #8]
 801a000:	b002      	add	sp, #8
 801a002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a006:	2000      	movs	r0, #0
 801a008:	e7b0      	b.n	8019f6c <rcutils_string_map_reserve+0x20>
 801a00a:	200a      	movs	r0, #10
 801a00c:	e7ae      	b.n	8019f6c <rcutils_string_map_reserve+0x20>
 801a00e:	200b      	movs	r0, #11
 801a010:	4770      	bx	lr
 801a012:	1f0b      	subs	r3, r1, #4
 801a014:	4418      	add	r0, r3
 801a016:	4413      	add	r3, r2
 801a018:	3a04      	subs	r2, #4
 801a01a:	4417      	add	r7, r2
 801a01c:	2200      	movs	r2, #0
 801a01e:	f843 2f04 	str.w	r2, [r3, #4]!
 801a022:	42bb      	cmp	r3, r7
 801a024:	f840 2f04 	str.w	r2, [r0, #4]!
 801a028:	d1f9      	bne.n	801a01e <rcutils_string_map_reserve+0xd2>
 801a02a:	e7e7      	b.n	8019ffc <rcutils_string_map_reserve+0xb0>

0801a02c <rcutils_string_map_init>:
 801a02c:	b082      	sub	sp, #8
 801a02e:	b570      	push	{r4, r5, r6, lr}
 801a030:	ac04      	add	r4, sp, #16
 801a032:	e884 000c 	stmia.w	r4, {r2, r3}
 801a036:	b380      	cbz	r0, 801a09a <rcutils_string_map_init+0x6e>
 801a038:	6806      	ldr	r6, [r0, #0]
 801a03a:	4604      	mov	r4, r0
 801a03c:	b12e      	cbz	r6, 801a04a <rcutils_string_map_init+0x1e>
 801a03e:	251e      	movs	r5, #30
 801a040:	4628      	mov	r0, r5
 801a042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a046:	b002      	add	sp, #8
 801a048:	4770      	bx	lr
 801a04a:	a804      	add	r0, sp, #16
 801a04c:	460d      	mov	r5, r1
 801a04e:	f7f5 fe9b 	bl	800fd88 <rcutils_allocator_is_valid>
 801a052:	b310      	cbz	r0, 801a09a <rcutils_string_map_init+0x6e>
 801a054:	9b04      	ldr	r3, [sp, #16]
 801a056:	2024      	movs	r0, #36	@ 0x24
 801a058:	9908      	ldr	r1, [sp, #32]
 801a05a:	4798      	blx	r3
 801a05c:	6020      	str	r0, [r4, #0]
 801a05e:	b310      	cbz	r0, 801a0a6 <rcutils_string_map_init+0x7a>
 801a060:	f10d 0e10 	add.w	lr, sp, #16
 801a064:	f100 0c10 	add.w	ip, r0, #16
 801a068:	e9c0 6600 	strd	r6, r6, [r0]
 801a06c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801a070:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a074:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a078:	f8de 3000 	ldr.w	r3, [lr]
 801a07c:	4629      	mov	r1, r5
 801a07e:	4620      	mov	r0, r4
 801a080:	f8cc 3000 	str.w	r3, [ip]
 801a084:	f7ff ff62 	bl	8019f4c <rcutils_string_map_reserve>
 801a088:	4605      	mov	r5, r0
 801a08a:	2800      	cmp	r0, #0
 801a08c:	d0d8      	beq.n	801a040 <rcutils_string_map_init+0x14>
 801a08e:	9b05      	ldr	r3, [sp, #20]
 801a090:	9908      	ldr	r1, [sp, #32]
 801a092:	6820      	ldr	r0, [r4, #0]
 801a094:	4798      	blx	r3
 801a096:	6026      	str	r6, [r4, #0]
 801a098:	e7d2      	b.n	801a040 <rcutils_string_map_init+0x14>
 801a09a:	250b      	movs	r5, #11
 801a09c:	4628      	mov	r0, r5
 801a09e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0a2:	b002      	add	sp, #8
 801a0a4:	4770      	bx	lr
 801a0a6:	250a      	movs	r5, #10
 801a0a8:	e7ca      	b.n	801a040 <rcutils_string_map_init+0x14>
 801a0aa:	bf00      	nop

0801a0ac <rcutils_string_map_fini>:
 801a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0b0:	b082      	sub	sp, #8
 801a0b2:	2800      	cmp	r0, #0
 801a0b4:	d03a      	beq.n	801a12c <rcutils_string_map_fini+0x80>
 801a0b6:	6804      	ldr	r4, [r0, #0]
 801a0b8:	4606      	mov	r6, r0
 801a0ba:	2c00      	cmp	r4, #0
 801a0bc:	d032      	beq.n	801a124 <rcutils_string_map_fini+0x78>
 801a0be:	68a3      	ldr	r3, [r4, #8]
 801a0c0:	b32b      	cbz	r3, 801a10e <rcutils_string_map_fini+0x62>
 801a0c2:	2500      	movs	r5, #0
 801a0c4:	6822      	ldr	r2, [r4, #0]
 801a0c6:	462f      	mov	r7, r5
 801a0c8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a0cc:	b1e0      	cbz	r0, 801a108 <rcutils_string_map_fini+0x5c>
 801a0ce:	6a21      	ldr	r1, [r4, #32]
 801a0d0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801a0d4:	9101      	str	r1, [sp, #4]
 801a0d6:	47c0      	blx	r8
 801a0d8:	9901      	ldr	r1, [sp, #4]
 801a0da:	e9d4 3200 	ldrd	r3, r2, [r4]
 801a0de:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801a0e2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a0e6:	47c0      	blx	r8
 801a0e8:	68e3      	ldr	r3, [r4, #12]
 801a0ea:	6862      	ldr	r2, [r4, #4]
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801a0f2:	3501      	adds	r5, #1
 801a0f4:	60e3      	str	r3, [r4, #12]
 801a0f6:	6834      	ldr	r4, [r6, #0]
 801a0f8:	68a3      	ldr	r3, [r4, #8]
 801a0fa:	429d      	cmp	r5, r3
 801a0fc:	d207      	bcs.n	801a10e <rcutils_string_map_fini+0x62>
 801a0fe:	6822      	ldr	r2, [r4, #0]
 801a100:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a104:	2800      	cmp	r0, #0
 801a106:	d1e2      	bne.n	801a0ce <rcutils_string_map_fini+0x22>
 801a108:	3501      	adds	r5, #1
 801a10a:	429d      	cmp	r5, r3
 801a10c:	d3dc      	bcc.n	801a0c8 <rcutils_string_map_fini+0x1c>
 801a10e:	2100      	movs	r1, #0
 801a110:	4630      	mov	r0, r6
 801a112:	f7ff ff1b 	bl	8019f4c <rcutils_string_map_reserve>
 801a116:	4604      	mov	r4, r0
 801a118:	b920      	cbnz	r0, 801a124 <rcutils_string_map_fini+0x78>
 801a11a:	6830      	ldr	r0, [r6, #0]
 801a11c:	6943      	ldr	r3, [r0, #20]
 801a11e:	6a01      	ldr	r1, [r0, #32]
 801a120:	4798      	blx	r3
 801a122:	6034      	str	r4, [r6, #0]
 801a124:	4620      	mov	r0, r4
 801a126:	b002      	add	sp, #8
 801a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a12c:	240b      	movs	r4, #11
 801a12e:	4620      	mov	r0, r4
 801a130:	b002      	add	sp, #8
 801a132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a136:	bf00      	nop

0801a138 <rcutils_string_map_getn>:
 801a138:	b378      	cbz	r0, 801a19a <rcutils_string_map_getn+0x62>
 801a13a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a13e:	f8d0 b000 	ldr.w	fp, [r0]
 801a142:	f1bb 0f00 	cmp.w	fp, #0
 801a146:	d01f      	beq.n	801a188 <rcutils_string_map_getn+0x50>
 801a148:	fab1 f481 	clz	r4, r1
 801a14c:	4688      	mov	r8, r1
 801a14e:	0964      	lsrs	r4, r4, #5
 801a150:	b1d1      	cbz	r1, 801a188 <rcutils_string_map_getn+0x50>
 801a152:	f8db 7008 	ldr.w	r7, [fp, #8]
 801a156:	f8db 6000 	ldr.w	r6, [fp]
 801a15a:	b1af      	cbz	r7, 801a188 <rcutils_string_map_getn+0x50>
 801a15c:	4691      	mov	r9, r2
 801a15e:	3e04      	subs	r6, #4
 801a160:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801a164:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801a168:	3401      	adds	r4, #1
 801a16a:	4628      	mov	r0, r5
 801a16c:	b155      	cbz	r5, 801a184 <rcutils_string_map_getn+0x4c>
 801a16e:	f7e6 f8c1 	bl	80002f4 <strlen>
 801a172:	4602      	mov	r2, r0
 801a174:	4629      	mov	r1, r5
 801a176:	4640      	mov	r0, r8
 801a178:	454a      	cmp	r2, r9
 801a17a:	bf38      	it	cc
 801a17c:	464a      	movcc	r2, r9
 801a17e:	f002 fe88 	bl	801ce92 <strncmp>
 801a182:	b120      	cbz	r0, 801a18e <rcutils_string_map_getn+0x56>
 801a184:	42a7      	cmp	r7, r4
 801a186:	d1eb      	bne.n	801a160 <rcutils_string_map_getn+0x28>
 801a188:	2000      	movs	r0, #0
 801a18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a18e:	f8db 3004 	ldr.w	r3, [fp, #4]
 801a192:	f853 000a 	ldr.w	r0, [r3, sl]
 801a196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a19a:	4770      	bx	lr
 801a19c:	0000      	movs	r0, r0
	...

0801a1a0 <rmw_get_zero_initialized_context>:
 801a1a0:	b510      	push	{r4, lr}
 801a1a2:	4604      	mov	r4, r0
 801a1a4:	3010      	adds	r0, #16
 801a1a6:	f7f5 fe7b 	bl	800fea0 <rmw_get_zero_initialized_init_options>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	4620      	mov	r0, r4
 801a1ae:	60a3      	str	r3, [r4, #8]
 801a1b0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801a1b2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801a1b4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801a1c0 <rmw_get_zero_initialized_context+0x20>
 801a1b8:	ed84 7b00 	vstr	d7, [r4]
 801a1bc:	bd10      	pop	{r4, pc}
 801a1be:	bf00      	nop
	...

0801a1c8 <rmw_time_equal>:
 801a1c8:	b4f0      	push	{r4, r5, r6, r7}
 801a1ca:	b084      	sub	sp, #16
 801a1cc:	ac04      	add	r4, sp, #16
 801a1ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a1d2:	4603      	mov	r3, r0
 801a1d4:	4925      	ldr	r1, [pc, #148]	@ (801a26c <rmw_time_equal+0xa4>)
 801a1d6:	9d01      	ldr	r5, [sp, #4]
 801a1d8:	4610      	mov	r0, r2
 801a1da:	4299      	cmp	r1, r3
 801a1dc:	f04f 0202 	mov.w	r2, #2
 801a1e0:	9e03      	ldr	r6, [sp, #12]
 801a1e2:	41aa      	sbcs	r2, r5
 801a1e4:	d330      	bcc.n	801a248 <rmw_time_equal+0x80>
 801a1e6:	4c22      	ldr	r4, [pc, #136]	@ (801a270 <rmw_time_equal+0xa8>)
 801a1e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a1ec:	fba3 3204 	umull	r3, r2, r3, r4
 801a1f0:	fb04 2205 	mla	r2, r4, r5, r2
 801a1f4:	43dd      	mvns	r5, r3
 801a1f6:	1a8c      	subs	r4, r1, r2
 801a1f8:	4285      	cmp	r5, r0
 801a1fa:	41b4      	sbcs	r4, r6
 801a1fc:	d332      	bcc.n	801a264 <rmw_time_equal+0x9c>
 801a1fe:	eb10 0c03 	adds.w	ip, r0, r3
 801a202:	eb42 0106 	adc.w	r1, r2, r6
 801a206:	4819      	ldr	r0, [pc, #100]	@ (801a26c <rmw_time_equal+0xa4>)
 801a208:	2202      	movs	r2, #2
 801a20a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a20c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a20e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801a212:	4298      	cmp	r0, r3
 801a214:	41b2      	sbcs	r2, r6
 801a216:	d31c      	bcc.n	801a252 <rmw_time_equal+0x8a>
 801a218:	4c15      	ldr	r4, [pc, #84]	@ (801a270 <rmw_time_equal+0xa8>)
 801a21a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a21e:	fba3 3204 	umull	r3, r2, r3, r4
 801a222:	fb04 2206 	mla	r2, r4, r6, r2
 801a226:	43de      	mvns	r6, r3
 801a228:	1a84      	subs	r4, r0, r2
 801a22a:	42ae      	cmp	r6, r5
 801a22c:	41bc      	sbcs	r4, r7
 801a22e:	d315      	bcc.n	801a25c <rmw_time_equal+0x94>
 801a230:	195b      	adds	r3, r3, r5
 801a232:	eb42 0207 	adc.w	r2, r2, r7
 801a236:	428a      	cmp	r2, r1
 801a238:	bf08      	it	eq
 801a23a:	4563      	cmpeq	r3, ip
 801a23c:	bf0c      	ite	eq
 801a23e:	2001      	moveq	r0, #1
 801a240:	2000      	movne	r0, #0
 801a242:	b004      	add	sp, #16
 801a244:	bcf0      	pop	{r4, r5, r6, r7}
 801a246:	4770      	bx	lr
 801a248:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a24c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a250:	e7d9      	b.n	801a206 <rmw_time_equal+0x3e>
 801a252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a256:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801a25a:	e7ec      	b.n	801a236 <rmw_time_equal+0x6e>
 801a25c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a260:	4602      	mov	r2, r0
 801a262:	e7e8      	b.n	801a236 <rmw_time_equal+0x6e>
 801a264:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a268:	e7cd      	b.n	801a206 <rmw_time_equal+0x3e>
 801a26a:	bf00      	nop
 801a26c:	25c17d04 	.word	0x25c17d04
 801a270:	3b9aca00 	.word	0x3b9aca00

0801a274 <rmw_time_total_nsec>:
 801a274:	b470      	push	{r4, r5, r6}
 801a276:	b085      	sub	sp, #20
 801a278:	ac04      	add	r4, sp, #16
 801a27a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a27e:	4603      	mov	r3, r0
 801a280:	4913      	ldr	r1, [pc, #76]	@ (801a2d0 <rmw_time_total_nsec+0x5c>)
 801a282:	9d01      	ldr	r5, [sp, #4]
 801a284:	4610      	mov	r0, r2
 801a286:	4299      	cmp	r1, r3
 801a288:	f04f 0202 	mov.w	r2, #2
 801a28c:	9e03      	ldr	r6, [sp, #12]
 801a28e:	41aa      	sbcs	r2, r5
 801a290:	d311      	bcc.n	801a2b6 <rmw_time_total_nsec+0x42>
 801a292:	4c10      	ldr	r4, [pc, #64]	@ (801a2d4 <rmw_time_total_nsec+0x60>)
 801a294:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a298:	fba3 3204 	umull	r3, r2, r3, r4
 801a29c:	fb04 2205 	mla	r2, r4, r5, r2
 801a2a0:	43dd      	mvns	r5, r3
 801a2a2:	1a8c      	subs	r4, r1, r2
 801a2a4:	4285      	cmp	r5, r0
 801a2a6:	41b4      	sbcs	r4, r6
 801a2a8:	d30c      	bcc.n	801a2c4 <rmw_time_total_nsec+0x50>
 801a2aa:	1818      	adds	r0, r3, r0
 801a2ac:	eb42 0106 	adc.w	r1, r2, r6
 801a2b0:	b005      	add	sp, #20
 801a2b2:	bc70      	pop	{r4, r5, r6}
 801a2b4:	4770      	bx	lr
 801a2b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a2be:	b005      	add	sp, #20
 801a2c0:	bc70      	pop	{r4, r5, r6}
 801a2c2:	4770      	bx	lr
 801a2c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2c8:	b005      	add	sp, #20
 801a2ca:	bc70      	pop	{r4, r5, r6}
 801a2cc:	4770      	bx	lr
 801a2ce:	bf00      	nop
 801a2d0:	25c17d04 	.word	0x25c17d04
 801a2d4:	3b9aca00 	.word	0x3b9aca00

0801a2d8 <rmw_get_zero_initialized_message_info>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4604      	mov	r4, r0
 801a2dc:	2240      	movs	r2, #64	@ 0x40
 801a2de:	2100      	movs	r1, #0
 801a2e0:	f002 fdc2 	bl	801ce68 <memset>
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	bd10      	pop	{r4, pc}

0801a2e8 <rmw_validate_full_topic_name>:
 801a2e8:	2800      	cmp	r0, #0
 801a2ea:	d05d      	beq.n	801a3a8 <rmw_validate_full_topic_name+0xc0>
 801a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f0:	460d      	mov	r5, r1
 801a2f2:	2900      	cmp	r1, #0
 801a2f4:	d05a      	beq.n	801a3ac <rmw_validate_full_topic_name+0xc4>
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	4616      	mov	r6, r2
 801a2fa:	f7e5 fffb 	bl	80002f4 <strlen>
 801a2fe:	b150      	cbz	r0, 801a316 <rmw_validate_full_topic_name+0x2e>
 801a300:	7823      	ldrb	r3, [r4, #0]
 801a302:	2b2f      	cmp	r3, #47	@ 0x2f
 801a304:	d00e      	beq.n	801a324 <rmw_validate_full_topic_name+0x3c>
 801a306:	2302      	movs	r3, #2
 801a308:	602b      	str	r3, [r5, #0]
 801a30a:	b146      	cbz	r6, 801a31e <rmw_validate_full_topic_name+0x36>
 801a30c:	2300      	movs	r3, #0
 801a30e:	4618      	mov	r0, r3
 801a310:	6033      	str	r3, [r6, #0]
 801a312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a316:	2301      	movs	r3, #1
 801a318:	602b      	str	r3, [r5, #0]
 801a31a:	2e00      	cmp	r6, #0
 801a31c:	d1f6      	bne.n	801a30c <rmw_validate_full_topic_name+0x24>
 801a31e:	2000      	movs	r0, #0
 801a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a324:	1e43      	subs	r3, r0, #1
 801a326:	5ce2      	ldrb	r2, [r4, r3]
 801a328:	2a2f      	cmp	r2, #47	@ 0x2f
 801a32a:	d041      	beq.n	801a3b0 <rmw_validate_full_topic_name+0xc8>
 801a32c:	1e62      	subs	r2, r4, #1
 801a32e:	f1c4 0e01 	rsb	lr, r4, #1
 801a332:	eb02 0800 	add.w	r8, r2, r0
 801a336:	eb0e 0702 	add.w	r7, lr, r2
 801a33a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a33e:	f023 0120 	bic.w	r1, r3, #32
 801a342:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801a346:	3941      	subs	r1, #65	@ 0x41
 801a348:	2919      	cmp	r1, #25
 801a34a:	d90f      	bls.n	801a36c <rmw_validate_full_topic_name+0x84>
 801a34c:	f1bc 0f0a 	cmp.w	ip, #10
 801a350:	d90c      	bls.n	801a36c <rmw_validate_full_topic_name+0x84>
 801a352:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801a356:	fab3 f383 	clz	r3, r3
 801a35a:	095b      	lsrs	r3, r3, #5
 801a35c:	b933      	cbnz	r3, 801a36c <rmw_validate_full_topic_name+0x84>
 801a35e:	2204      	movs	r2, #4
 801a360:	602a      	str	r2, [r5, #0]
 801a362:	2e00      	cmp	r6, #0
 801a364:	d0db      	beq.n	801a31e <rmw_validate_full_topic_name+0x36>
 801a366:	4618      	mov	r0, r3
 801a368:	6037      	str	r7, [r6, #0]
 801a36a:	e7d2      	b.n	801a312 <rmw_validate_full_topic_name+0x2a>
 801a36c:	4542      	cmp	r2, r8
 801a36e:	d1e2      	bne.n	801a336 <rmw_validate_full_topic_name+0x4e>
 801a370:	2301      	movs	r3, #1
 801a372:	4f1a      	ldr	r7, [pc, #104]	@ (801a3dc <rmw_validate_full_topic_name+0xf4>)
 801a374:	e004      	b.n	801a380 <rmw_validate_full_topic_name+0x98>
 801a376:	4298      	cmp	r0, r3
 801a378:	f104 0401 	add.w	r4, r4, #1
 801a37c:	4613      	mov	r3, r2
 801a37e:	d91c      	bls.n	801a3ba <rmw_validate_full_topic_name+0xd2>
 801a380:	4298      	cmp	r0, r3
 801a382:	f103 0201 	add.w	r2, r3, #1
 801a386:	d0f6      	beq.n	801a376 <rmw_validate_full_topic_name+0x8e>
 801a388:	7821      	ldrb	r1, [r4, #0]
 801a38a:	292f      	cmp	r1, #47	@ 0x2f
 801a38c:	d1f3      	bne.n	801a376 <rmw_validate_full_topic_name+0x8e>
 801a38e:	7861      	ldrb	r1, [r4, #1]
 801a390:	292f      	cmp	r1, #47	@ 0x2f
 801a392:	d01e      	beq.n	801a3d2 <rmw_validate_full_topic_name+0xea>
 801a394:	5dc9      	ldrb	r1, [r1, r7]
 801a396:	0749      	lsls	r1, r1, #29
 801a398:	d5ed      	bpl.n	801a376 <rmw_validate_full_topic_name+0x8e>
 801a39a:	2206      	movs	r2, #6
 801a39c:	602a      	str	r2, [r5, #0]
 801a39e:	2e00      	cmp	r6, #0
 801a3a0:	d0bd      	beq.n	801a31e <rmw_validate_full_topic_name+0x36>
 801a3a2:	2000      	movs	r0, #0
 801a3a4:	6033      	str	r3, [r6, #0]
 801a3a6:	e7b4      	b.n	801a312 <rmw_validate_full_topic_name+0x2a>
 801a3a8:	200b      	movs	r0, #11
 801a3aa:	4770      	bx	lr
 801a3ac:	200b      	movs	r0, #11
 801a3ae:	e7b0      	b.n	801a312 <rmw_validate_full_topic_name+0x2a>
 801a3b0:	2203      	movs	r2, #3
 801a3b2:	602a      	str	r2, [r5, #0]
 801a3b4:	2e00      	cmp	r6, #0
 801a3b6:	d1f4      	bne.n	801a3a2 <rmw_validate_full_topic_name+0xba>
 801a3b8:	e7b1      	b.n	801a31e <rmw_validate_full_topic_name+0x36>
 801a3ba:	28f7      	cmp	r0, #247	@ 0xf7
 801a3bc:	d803      	bhi.n	801a3c6 <rmw_validate_full_topic_name+0xde>
 801a3be:	2300      	movs	r3, #0
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	602b      	str	r3, [r5, #0]
 801a3c4:	e7a5      	b.n	801a312 <rmw_validate_full_topic_name+0x2a>
 801a3c6:	2307      	movs	r3, #7
 801a3c8:	602b      	str	r3, [r5, #0]
 801a3ca:	2e00      	cmp	r6, #0
 801a3cc:	d0a7      	beq.n	801a31e <rmw_validate_full_topic_name+0x36>
 801a3ce:	23f6      	movs	r3, #246	@ 0xf6
 801a3d0:	e7e7      	b.n	801a3a2 <rmw_validate_full_topic_name+0xba>
 801a3d2:	2205      	movs	r2, #5
 801a3d4:	602a      	str	r2, [r5, #0]
 801a3d6:	2e00      	cmp	r6, #0
 801a3d8:	d1e3      	bne.n	801a3a2 <rmw_validate_full_topic_name+0xba>
 801a3da:	e7a0      	b.n	801a31e <rmw_validate_full_topic_name+0x36>
 801a3dc:	0801ecbe 	.word	0x0801ecbe

0801a3e0 <rmw_validate_namespace_with_size>:
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	d043      	beq.n	801a46c <rmw_validate_namespace_with_size+0x8c>
 801a3e4:	b570      	push	{r4, r5, r6, lr}
 801a3e6:	4614      	mov	r4, r2
 801a3e8:	b0c2      	sub	sp, #264	@ 0x108
 801a3ea:	b32a      	cbz	r2, 801a438 <rmw_validate_namespace_with_size+0x58>
 801a3ec:	2901      	cmp	r1, #1
 801a3ee:	460d      	mov	r5, r1
 801a3f0:	461e      	mov	r6, r3
 801a3f2:	d102      	bne.n	801a3fa <rmw_validate_namespace_with_size+0x1a>
 801a3f4:	7803      	ldrb	r3, [r0, #0]
 801a3f6:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3f8:	d012      	beq.n	801a420 <rmw_validate_namespace_with_size+0x40>
 801a3fa:	aa01      	add	r2, sp, #4
 801a3fc:	4669      	mov	r1, sp
 801a3fe:	f7ff ff73 	bl	801a2e8 <rmw_validate_full_topic_name>
 801a402:	b980      	cbnz	r0, 801a426 <rmw_validate_namespace_with_size+0x46>
 801a404:	9a00      	ldr	r2, [sp, #0]
 801a406:	b14a      	cbz	r2, 801a41c <rmw_validate_namespace_with_size+0x3c>
 801a408:	2a07      	cmp	r2, #7
 801a40a:	d007      	beq.n	801a41c <rmw_validate_namespace_with_size+0x3c>
 801a40c:	1e53      	subs	r3, r2, #1
 801a40e:	2b05      	cmp	r3, #5
 801a410:	d82e      	bhi.n	801a470 <rmw_validate_namespace_with_size+0x90>
 801a412:	e8df f003 	tbb	[pc, r3]
 801a416:	1f1c      	.short	0x1f1c
 801a418:	14282522 	.word	0x14282522
 801a41c:	2df5      	cmp	r5, #245	@ 0xf5
 801a41e:	d804      	bhi.n	801a42a <rmw_validate_namespace_with_size+0x4a>
 801a420:	2300      	movs	r3, #0
 801a422:	4618      	mov	r0, r3
 801a424:	6023      	str	r3, [r4, #0]
 801a426:	b042      	add	sp, #264	@ 0x108
 801a428:	bd70      	pop	{r4, r5, r6, pc}
 801a42a:	2307      	movs	r3, #7
 801a42c:	6023      	str	r3, [r4, #0]
 801a42e:	2e00      	cmp	r6, #0
 801a430:	d0f9      	beq.n	801a426 <rmw_validate_namespace_with_size+0x46>
 801a432:	23f4      	movs	r3, #244	@ 0xf4
 801a434:	6033      	str	r3, [r6, #0]
 801a436:	e7f6      	b.n	801a426 <rmw_validate_namespace_with_size+0x46>
 801a438:	200b      	movs	r0, #11
 801a43a:	b042      	add	sp, #264	@ 0x108
 801a43c:	bd70      	pop	{r4, r5, r6, pc}
 801a43e:	2306      	movs	r3, #6
 801a440:	6023      	str	r3, [r4, #0]
 801a442:	2e00      	cmp	r6, #0
 801a444:	d0ef      	beq.n	801a426 <rmw_validate_namespace_with_size+0x46>
 801a446:	9b01      	ldr	r3, [sp, #4]
 801a448:	6033      	str	r3, [r6, #0]
 801a44a:	b042      	add	sp, #264	@ 0x108
 801a44c:	bd70      	pop	{r4, r5, r6, pc}
 801a44e:	2301      	movs	r3, #1
 801a450:	6023      	str	r3, [r4, #0]
 801a452:	e7f6      	b.n	801a442 <rmw_validate_namespace_with_size+0x62>
 801a454:	2302      	movs	r3, #2
 801a456:	6023      	str	r3, [r4, #0]
 801a458:	e7f3      	b.n	801a442 <rmw_validate_namespace_with_size+0x62>
 801a45a:	2303      	movs	r3, #3
 801a45c:	6023      	str	r3, [r4, #0]
 801a45e:	e7f0      	b.n	801a442 <rmw_validate_namespace_with_size+0x62>
 801a460:	2304      	movs	r3, #4
 801a462:	6023      	str	r3, [r4, #0]
 801a464:	e7ed      	b.n	801a442 <rmw_validate_namespace_with_size+0x62>
 801a466:	2305      	movs	r3, #5
 801a468:	6023      	str	r3, [r4, #0]
 801a46a:	e7ea      	b.n	801a442 <rmw_validate_namespace_with_size+0x62>
 801a46c:	200b      	movs	r0, #11
 801a46e:	4770      	bx	lr
 801a470:	4613      	mov	r3, r2
 801a472:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a476:	4a03      	ldr	r2, [pc, #12]	@ (801a484 <rmw_validate_namespace_with_size+0xa4>)
 801a478:	a802      	add	r0, sp, #8
 801a47a:	f7ff fcd5 	bl	8019e28 <rcutils_snprintf>
 801a47e:	2001      	movs	r0, #1
 801a480:	e7d1      	b.n	801a426 <rmw_validate_namespace_with_size+0x46>
 801a482:	bf00      	nop
 801a484:	0801e7d4 	.word	0x0801e7d4

0801a488 <rmw_validate_namespace>:
 801a488:	b168      	cbz	r0, 801a4a6 <rmw_validate_namespace+0x1e>
 801a48a:	b570      	push	{r4, r5, r6, lr}
 801a48c:	460d      	mov	r5, r1
 801a48e:	4616      	mov	r6, r2
 801a490:	4604      	mov	r4, r0
 801a492:	f7e5 ff2f 	bl	80002f4 <strlen>
 801a496:	4633      	mov	r3, r6
 801a498:	4601      	mov	r1, r0
 801a49a:	462a      	mov	r2, r5
 801a49c:	4620      	mov	r0, r4
 801a49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4a2:	f7ff bf9d 	b.w	801a3e0 <rmw_validate_namespace_with_size>
 801a4a6:	200b      	movs	r0, #11
 801a4a8:	4770      	bx	lr
 801a4aa:	bf00      	nop

0801a4ac <rmw_namespace_validation_result_string>:
 801a4ac:	2807      	cmp	r0, #7
 801a4ae:	d803      	bhi.n	801a4b8 <rmw_namespace_validation_result_string+0xc>
 801a4b0:	4b02      	ldr	r3, [pc, #8]	@ (801a4bc <rmw_namespace_validation_result_string+0x10>)
 801a4b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a4b6:	4770      	bx	lr
 801a4b8:	4801      	ldr	r0, [pc, #4]	@ (801a4c0 <rmw_namespace_validation_result_string+0x14>)
 801a4ba:	4770      	bx	lr
 801a4bc:	0801e9cc 	.word	0x0801e9cc
 801a4c0:	0801e824 	.word	0x0801e824

0801a4c4 <rmw_validate_node_name>:
 801a4c4:	2800      	cmp	r0, #0
 801a4c6:	d042      	beq.n	801a54e <rmw_validate_node_name+0x8a>
 801a4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4cc:	460d      	mov	r5, r1
 801a4ce:	2900      	cmp	r1, #0
 801a4d0:	d03f      	beq.n	801a552 <rmw_validate_node_name+0x8e>
 801a4d2:	4604      	mov	r4, r0
 801a4d4:	4616      	mov	r6, r2
 801a4d6:	f7e5 ff0d 	bl	80002f4 <strlen>
 801a4da:	b310      	cbz	r0, 801a522 <rmw_validate_node_name+0x5e>
 801a4dc:	1e63      	subs	r3, r4, #1
 801a4de:	f1c4 0101 	rsb	r1, r4, #1
 801a4e2:	eb03 0800 	add.w	r8, r3, r0
 801a4e6:	18cf      	adds	r7, r1, r3
 801a4e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801a4ec:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801a4f0:	f02e 0c20 	bic.w	ip, lr, #32
 801a4f4:	2a09      	cmp	r2, #9
 801a4f6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801a4fa:	d905      	bls.n	801a508 <rmw_validate_node_name+0x44>
 801a4fc:	f1bc 0f19 	cmp.w	ip, #25
 801a500:	d902      	bls.n	801a508 <rmw_validate_node_name+0x44>
 801a502:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801a506:	d114      	bne.n	801a532 <rmw_validate_node_name+0x6e>
 801a508:	4598      	cmp	r8, r3
 801a50a:	d1ec      	bne.n	801a4e6 <rmw_validate_node_name+0x22>
 801a50c:	7822      	ldrb	r2, [r4, #0]
 801a50e:	4b16      	ldr	r3, [pc, #88]	@ (801a568 <rmw_validate_node_name+0xa4>)
 801a510:	5cd3      	ldrb	r3, [r2, r3]
 801a512:	f013 0304 	ands.w	r3, r3, #4
 801a516:	d113      	bne.n	801a540 <rmw_validate_node_name+0x7c>
 801a518:	28ff      	cmp	r0, #255	@ 0xff
 801a51a:	d81c      	bhi.n	801a556 <rmw_validate_node_name+0x92>
 801a51c:	4618      	mov	r0, r3
 801a51e:	602b      	str	r3, [r5, #0]
 801a520:	e00c      	b.n	801a53c <rmw_validate_node_name+0x78>
 801a522:	2301      	movs	r3, #1
 801a524:	602b      	str	r3, [r5, #0]
 801a526:	b17e      	cbz	r6, 801a548 <rmw_validate_node_name+0x84>
 801a528:	2300      	movs	r3, #0
 801a52a:	4618      	mov	r0, r3
 801a52c:	6033      	str	r3, [r6, #0]
 801a52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a532:	2302      	movs	r3, #2
 801a534:	602b      	str	r3, [r5, #0]
 801a536:	b13e      	cbz	r6, 801a548 <rmw_validate_node_name+0x84>
 801a538:	2000      	movs	r0, #0
 801a53a:	6037      	str	r7, [r6, #0]
 801a53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a540:	2303      	movs	r3, #3
 801a542:	602b      	str	r3, [r5, #0]
 801a544:	2e00      	cmp	r6, #0
 801a546:	d1ef      	bne.n	801a528 <rmw_validate_node_name+0x64>
 801a548:	2000      	movs	r0, #0
 801a54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a54e:	200b      	movs	r0, #11
 801a550:	4770      	bx	lr
 801a552:	200b      	movs	r0, #11
 801a554:	e7f2      	b.n	801a53c <rmw_validate_node_name+0x78>
 801a556:	2204      	movs	r2, #4
 801a558:	602a      	str	r2, [r5, #0]
 801a55a:	2e00      	cmp	r6, #0
 801a55c:	d0f4      	beq.n	801a548 <rmw_validate_node_name+0x84>
 801a55e:	22fe      	movs	r2, #254	@ 0xfe
 801a560:	4618      	mov	r0, r3
 801a562:	6032      	str	r2, [r6, #0]
 801a564:	e7ea      	b.n	801a53c <rmw_validate_node_name+0x78>
 801a566:	bf00      	nop
 801a568:	0801ecbe 	.word	0x0801ecbe

0801a56c <rmw_node_name_validation_result_string>:
 801a56c:	2804      	cmp	r0, #4
 801a56e:	d803      	bhi.n	801a578 <rmw_node_name_validation_result_string+0xc>
 801a570:	4b02      	ldr	r3, [pc, #8]	@ (801a57c <rmw_node_name_validation_result_string+0x10>)
 801a572:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a576:	4770      	bx	lr
 801a578:	4801      	ldr	r0, [pc, #4]	@ (801a580 <rmw_node_name_validation_result_string+0x14>)
 801a57a:	4770      	bx	lr
 801a57c:	0801ead8 	.word	0x0801ead8
 801a580:	0801e9ec 	.word	0x0801e9ec

0801a584 <on_status>:
 801a584:	b082      	sub	sp, #8
 801a586:	b002      	add	sp, #8
 801a588:	4770      	bx	lr
 801a58a:	bf00      	nop

0801a58c <on_topic>:
 801a58c:	4a23      	ldr	r2, [pc, #140]	@ (801a61c <on_topic+0x90>)
 801a58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a592:	6812      	ldr	r2, [r2, #0]
 801a594:	b094      	sub	sp, #80	@ 0x50
 801a596:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a598:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801a59c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a59e:	9312      	str	r3, [sp, #72]	@ 0x48
 801a5a0:	b3c2      	cbz	r2, 801a614 <on_topic+0x88>
 801a5a2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a5a6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a5aa:	e001      	b.n	801a5b0 <on_topic+0x24>
 801a5ac:	6852      	ldr	r2, [r2, #4]
 801a5ae:	b38a      	cbz	r2, 801a614 <on_topic+0x88>
 801a5b0:	6894      	ldr	r4, [r2, #8]
 801a5b2:	8aa3      	ldrh	r3, [r4, #20]
 801a5b4:	428b      	cmp	r3, r1
 801a5b6:	d1f9      	bne.n	801a5ac <on_topic+0x20>
 801a5b8:	7da3      	ldrb	r3, [r4, #22]
 801a5ba:	4283      	cmp	r3, r0
 801a5bc:	d1f6      	bne.n	801a5ac <on_topic+0x20>
 801a5be:	2248      	movs	r2, #72	@ 0x48
 801a5c0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a5c4:	4668      	mov	r0, sp
 801a5c6:	f002 fd18 	bl	801cffa <memcpy>
 801a5ca:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	cb0c      	ldmia	r3, {r2, r3}
 801a5d2:	f7f6 fc7f 	bl	8010ed4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a5d6:	4607      	mov	r7, r0
 801a5d8:	b1e0      	cbz	r0, 801a614 <on_topic+0x88>
 801a5da:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a5de:	462a      	mov	r2, r5
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	f108 0110 	add.w	r1, r8, #16
 801a5e6:	f7f7 fbb7 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801a5ea:	b930      	cbnz	r0, 801a5fa <on_topic+0x6e>
 801a5ec:	4639      	mov	r1, r7
 801a5ee:	480c      	ldr	r0, [pc, #48]	@ (801a620 <on_topic+0x94>)
 801a5f0:	b014      	add	sp, #80	@ 0x50
 801a5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f6:	f000 b8bd 	b.w	801a774 <put_memory>
 801a5fa:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a5fe:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801a602:	f7f6 fa65 	bl	8010ad0 <rmw_uros_epoch_nanos>
 801a606:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a60a:	2305      	movs	r3, #5
 801a60c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a610:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a614:	b014      	add	sp, #80	@ 0x50
 801a616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a61a:	bf00      	nop
 801a61c:	2401386c 	.word	0x2401386c
 801a620:	2401385c 	.word	0x2401385c

0801a624 <on_request>:
 801a624:	4824      	ldr	r0, [pc, #144]	@ (801a6b8 <on_request+0x94>)
 801a626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a62a:	6800      	ldr	r0, [r0, #0]
 801a62c:	b094      	sub	sp, #80	@ 0x50
 801a62e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a630:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a634:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a636:	2800      	cmp	r0, #0
 801a638:	d03b      	beq.n	801a6b2 <on_request+0x8e>
 801a63a:	461d      	mov	r5, r3
 801a63c:	e001      	b.n	801a642 <on_request+0x1e>
 801a63e:	6840      	ldr	r0, [r0, #4]
 801a640:	b3b8      	cbz	r0, 801a6b2 <on_request+0x8e>
 801a642:	6884      	ldr	r4, [r0, #8]
 801a644:	8b21      	ldrh	r1, [r4, #24]
 801a646:	4291      	cmp	r1, r2
 801a648:	d1f9      	bne.n	801a63e <on_request+0x1a>
 801a64a:	2248      	movs	r2, #72	@ 0x48
 801a64c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a650:	4668      	mov	r0, sp
 801a652:	f002 fcd2 	bl	801cffa <memcpy>
 801a656:	f104 0320 	add.w	r3, r4, #32
 801a65a:	4620      	mov	r0, r4
 801a65c:	cb0c      	ldmia	r3, {r2, r3}
 801a65e:	f7f6 fc39 	bl	8010ed4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a662:	4680      	mov	r8, r0
 801a664:	b328      	cbz	r0, 801a6b2 <on_request+0x8e>
 801a666:	4630      	mov	r0, r6
 801a668:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a66c:	463a      	mov	r2, r7
 801a66e:	f106 0110 	add.w	r1, r6, #16
 801a672:	f7f7 fb71 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801a676:	b930      	cbnz	r0, 801a686 <on_request+0x62>
 801a678:	4641      	mov	r1, r8
 801a67a:	4810      	ldr	r0, [pc, #64]	@ (801a6bc <on_request+0x98>)
 801a67c:	b014      	add	sp, #80	@ 0x50
 801a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a682:	f000 b877 	b.w	801a774 <put_memory>
 801a686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a688:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801a68c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a690:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a698:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a69c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a6a0:	f7f6 fa16 	bl	8010ad0 <rmw_uros_epoch_nanos>
 801a6a4:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a6a8:	2303      	movs	r3, #3
 801a6aa:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a6ae:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a6b2:	b014      	add	sp, #80	@ 0x50
 801a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6b8:	2401383c 	.word	0x2401383c
 801a6bc:	2401385c 	.word	0x2401385c

0801a6c0 <on_reply>:
 801a6c0:	4822      	ldr	r0, [pc, #136]	@ (801a74c <on_reply+0x8c>)
 801a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c6:	6800      	ldr	r0, [r0, #0]
 801a6c8:	b094      	sub	sp, #80	@ 0x50
 801a6ca:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a6cc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a6d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a6d2:	b3b8      	cbz	r0, 801a744 <on_reply+0x84>
 801a6d4:	461d      	mov	r5, r3
 801a6d6:	e001      	b.n	801a6dc <on_reply+0x1c>
 801a6d8:	6840      	ldr	r0, [r0, #4]
 801a6da:	b398      	cbz	r0, 801a744 <on_reply+0x84>
 801a6dc:	6884      	ldr	r4, [r0, #8]
 801a6de:	8b21      	ldrh	r1, [r4, #24]
 801a6e0:	4291      	cmp	r1, r2
 801a6e2:	d1f9      	bne.n	801a6d8 <on_reply+0x18>
 801a6e4:	2248      	movs	r2, #72	@ 0x48
 801a6e6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a6ea:	4668      	mov	r0, sp
 801a6ec:	f002 fc85 	bl	801cffa <memcpy>
 801a6f0:	f104 0320 	add.w	r3, r4, #32
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	cb0c      	ldmia	r3, {r2, r3}
 801a6f8:	f7f6 fbec 	bl	8010ed4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a6fc:	4680      	mov	r8, r0
 801a6fe:	b308      	cbz	r0, 801a744 <on_reply+0x84>
 801a700:	4630      	mov	r0, r6
 801a702:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a706:	463a      	mov	r2, r7
 801a708:	f106 0110 	add.w	r1, r6, #16
 801a70c:	f7f7 fb24 	bl	8011d58 <ucdr_deserialize_array_uint8_t>
 801a710:	b930      	cbnz	r0, 801a720 <on_reply+0x60>
 801a712:	4641      	mov	r1, r8
 801a714:	480e      	ldr	r0, [pc, #56]	@ (801a750 <on_reply+0x90>)
 801a716:	b014      	add	sp, #80	@ 0x50
 801a718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a71c:	f000 b82a 	b.w	801a774 <put_memory>
 801a720:	2200      	movs	r2, #0
 801a722:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a726:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a72a:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801a72e:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801a732:	f7f6 f9cd 	bl	8010ad0 <rmw_uros_epoch_nanos>
 801a736:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a73a:	2304      	movs	r3, #4
 801a73c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a740:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a744:	b014      	add	sp, #80	@ 0x50
 801a746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a74a:	bf00      	nop
 801a74c:	2400ef4c 	.word	0x2400ef4c
 801a750:	2401385c 	.word	0x2401385c

0801a754 <get_memory>:
 801a754:	4603      	mov	r3, r0
 801a756:	6840      	ldr	r0, [r0, #4]
 801a758:	b158      	cbz	r0, 801a772 <get_memory+0x1e>
 801a75a:	6842      	ldr	r2, [r0, #4]
 801a75c:	605a      	str	r2, [r3, #4]
 801a75e:	b10a      	cbz	r2, 801a764 <get_memory+0x10>
 801a760:	2100      	movs	r1, #0
 801a762:	6011      	str	r1, [r2, #0]
 801a764:	681a      	ldr	r2, [r3, #0]
 801a766:	6042      	str	r2, [r0, #4]
 801a768:	b102      	cbz	r2, 801a76c <get_memory+0x18>
 801a76a:	6010      	str	r0, [r2, #0]
 801a76c:	2200      	movs	r2, #0
 801a76e:	6002      	str	r2, [r0, #0]
 801a770:	6018      	str	r0, [r3, #0]
 801a772:	4770      	bx	lr

0801a774 <put_memory>:
 801a774:	680b      	ldr	r3, [r1, #0]
 801a776:	b10b      	cbz	r3, 801a77c <put_memory+0x8>
 801a778:	684a      	ldr	r2, [r1, #4]
 801a77a:	605a      	str	r2, [r3, #4]
 801a77c:	684a      	ldr	r2, [r1, #4]
 801a77e:	b102      	cbz	r2, 801a782 <put_memory+0xe>
 801a780:	6013      	str	r3, [r2, #0]
 801a782:	6803      	ldr	r3, [r0, #0]
 801a784:	428b      	cmp	r3, r1
 801a786:	6843      	ldr	r3, [r0, #4]
 801a788:	bf08      	it	eq
 801a78a:	6002      	streq	r2, [r0, #0]
 801a78c:	604b      	str	r3, [r1, #4]
 801a78e:	b103      	cbz	r3, 801a792 <put_memory+0x1e>
 801a790:	6019      	str	r1, [r3, #0]
 801a792:	2300      	movs	r3, #0
 801a794:	600b      	str	r3, [r1, #0]
 801a796:	6041      	str	r1, [r0, #4]
 801a798:	4770      	bx	lr
 801a79a:	bf00      	nop

0801a79c <rmw_destroy_client>:
 801a79c:	b570      	push	{r4, r5, r6, lr}
 801a79e:	b128      	cbz	r0, 801a7ac <rmw_destroy_client+0x10>
 801a7a0:	4604      	mov	r4, r0
 801a7a2:	6800      	ldr	r0, [r0, #0]
 801a7a4:	460d      	mov	r5, r1
 801a7a6:	f7f6 fd0f 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 801a7aa:	b910      	cbnz	r0, 801a7b2 <rmw_destroy_client+0x16>
 801a7ac:	2401      	movs	r4, #1
 801a7ae:	4620      	mov	r0, r4
 801a7b0:	bd70      	pop	{r4, r5, r6, pc}
 801a7b2:	6863      	ldr	r3, [r4, #4]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d0f9      	beq.n	801a7ac <rmw_destroy_client+0x10>
 801a7b8:	2d00      	cmp	r5, #0
 801a7ba:	d0f7      	beq.n	801a7ac <rmw_destroy_client+0x10>
 801a7bc:	6828      	ldr	r0, [r5, #0]
 801a7be:	f7f6 fd03 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 801a7c2:	2800      	cmp	r0, #0
 801a7c4:	d0f2      	beq.n	801a7ac <rmw_destroy_client+0x10>
 801a7c6:	686e      	ldr	r6, [r5, #4]
 801a7c8:	2e00      	cmp	r6, #0
 801a7ca:	d0ef      	beq.n	801a7ac <rmw_destroy_client+0x10>
 801a7cc:	6864      	ldr	r4, [r4, #4]
 801a7ce:	6932      	ldr	r2, [r6, #16]
 801a7d0:	6920      	ldr	r0, [r4, #16]
 801a7d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a7d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7da:	6819      	ldr	r1, [r3, #0]
 801a7dc:	f7f9 f9f0 	bl	8013bc0 <uxr_buffer_cancel_data>
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	6920      	ldr	r0, [r4, #16]
 801a7e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a7e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a7ec:	f7f6 fc72 	bl	80110d4 <run_xrce_session>
 801a7f0:	6920      	ldr	r0, [r4, #16]
 801a7f2:	6932      	ldr	r2, [r6, #16]
 801a7f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a7f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a7fc:	6819      	ldr	r1, [r3, #0]
 801a7fe:	f7f8 ff97 	bl	8013730 <uxr_buffer_delete_entity>
 801a802:	4602      	mov	r2, r0
 801a804:	6920      	ldr	r0, [r4, #16]
 801a806:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a80a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a80e:	f7f6 fc61 	bl	80110d4 <run_xrce_session>
 801a812:	4603      	mov	r3, r0
 801a814:	4628      	mov	r0, r5
 801a816:	2b00      	cmp	r3, #0
 801a818:	bf14      	ite	ne
 801a81a:	2400      	movne	r4, #0
 801a81c:	2402      	moveq	r4, #2
 801a81e:	f7f6 fb37 	bl	8010e90 <rmw_uxrce_fini_client_memory>
 801a822:	e7c4      	b.n	801a7ae <rmw_destroy_client+0x12>

0801a824 <rmw_get_implementation_identifier>:
 801a824:	4b01      	ldr	r3, [pc, #4]	@ (801a82c <rmw_get_implementation_identifier+0x8>)
 801a826:	6818      	ldr	r0, [r3, #0]
 801a828:	4770      	bx	lr
 801a82a:	bf00      	nop
 801a82c:	0801eb04 	.word	0x0801eb04

0801a830 <create_topic>:
 801a830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a834:	4605      	mov	r5, r0
 801a836:	b084      	sub	sp, #16
 801a838:	4822      	ldr	r0, [pc, #136]	@ (801a8c4 <create_topic+0x94>)
 801a83a:	460f      	mov	r7, r1
 801a83c:	4616      	mov	r6, r2
 801a83e:	f7ff ff89 	bl	801a754 <get_memory>
 801a842:	4604      	mov	r4, r0
 801a844:	2800      	cmp	r0, #0
 801a846:	d039      	beq.n	801a8bc <create_topic+0x8c>
 801a848:	692b      	ldr	r3, [r5, #16]
 801a84a:	2102      	movs	r1, #2
 801a84c:	6884      	ldr	r4, [r0, #8]
 801a84e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a852:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801a8cc <create_topic+0x9c>
 801a856:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801a85a:	1c42      	adds	r2, r0, #1
 801a85c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801a860:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801a864:	f7f9 f97c 	bl	8013b60 <uxr_object_id>
 801a868:	223c      	movs	r2, #60	@ 0x3c
 801a86a:	6120      	str	r0, [r4, #16]
 801a86c:	4641      	mov	r1, r8
 801a86e:	4638      	mov	r0, r7
 801a870:	f7f6 fc92 	bl	8011198 <generate_topic_name>
 801a874:	b1f0      	cbz	r0, 801a8b4 <create_topic+0x84>
 801a876:	4f14      	ldr	r7, [pc, #80]	@ (801a8c8 <create_topic+0x98>)
 801a878:	4630      	mov	r0, r6
 801a87a:	2264      	movs	r2, #100	@ 0x64
 801a87c:	4639      	mov	r1, r7
 801a87e:	f7f6 fc5d 	bl	801113c <generate_type_name>
 801a882:	b1b8      	cbz	r0, 801a8b4 <create_topic+0x84>
 801a884:	6928      	ldr	r0, [r5, #16]
 801a886:	2106      	movs	r1, #6
 801a888:	696b      	ldr	r3, [r5, #20]
 801a88a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801a88e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a892:	f8cd 8000 	str.w	r8, [sp]
 801a896:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a89a:	6811      	ldr	r1, [r2, #0]
 801a89c:	6922      	ldr	r2, [r4, #16]
 801a89e:	f7f8 ffc5 	bl	801382c <uxr_buffer_create_topic_bin>
 801a8a2:	4602      	mov	r2, r0
 801a8a4:	6928      	ldr	r0, [r5, #16]
 801a8a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a8aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a8ae:	f7f6 fc11 	bl	80110d4 <run_xrce_session>
 801a8b2:	b918      	cbnz	r0, 801a8bc <create_topic+0x8c>
 801a8b4:	4620      	mov	r0, r4
 801a8b6:	2400      	movs	r4, #0
 801a8b8:	f7f6 fb00 	bl	8010ebc <rmw_uxrce_fini_topic_memory>
 801a8bc:	4620      	mov	r0, r4
 801a8be:	b004      	add	sp, #16
 801a8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8c4:	2401387c 	.word	0x2401387c
 801a8c8:	240138fc 	.word	0x240138fc
 801a8cc:	240138c0 	.word	0x240138c0

0801a8d0 <destroy_topic>:
 801a8d0:	b538      	push	{r3, r4, r5, lr}
 801a8d2:	6985      	ldr	r5, [r0, #24]
 801a8d4:	b1dd      	cbz	r5, 801a90e <destroy_topic+0x3e>
 801a8d6:	4604      	mov	r4, r0
 801a8d8:	6928      	ldr	r0, [r5, #16]
 801a8da:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a8de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a8e2:	6922      	ldr	r2, [r4, #16]
 801a8e4:	6819      	ldr	r1, [r3, #0]
 801a8e6:	f7f8 ff23 	bl	8013730 <uxr_buffer_delete_entity>
 801a8ea:	4602      	mov	r2, r0
 801a8ec:	6928      	ldr	r0, [r5, #16]
 801a8ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a8f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a8f6:	f7f6 fbed 	bl	80110d4 <run_xrce_session>
 801a8fa:	4603      	mov	r3, r0
 801a8fc:	4620      	mov	r0, r4
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	bf14      	ite	ne
 801a902:	2400      	movne	r4, #0
 801a904:	2402      	moveq	r4, #2
 801a906:	f7f6 fad9 	bl	8010ebc <rmw_uxrce_fini_topic_memory>
 801a90a:	4620      	mov	r0, r4
 801a90c:	bd38      	pop	{r3, r4, r5, pc}
 801a90e:	2401      	movs	r4, #1
 801a910:	4620      	mov	r0, r4
 801a912:	bd38      	pop	{r3, r4, r5, pc}

0801a914 <rmw_send_request>:
 801a914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a918:	4604      	mov	r4, r0
 801a91a:	6800      	ldr	r0, [r0, #0]
 801a91c:	b08b      	sub	sp, #44	@ 0x2c
 801a91e:	460e      	mov	r6, r1
 801a920:	4615      	mov	r5, r2
 801a922:	b128      	cbz	r0, 801a930 <rmw_send_request+0x1c>
 801a924:	4b21      	ldr	r3, [pc, #132]	@ (801a9ac <rmw_send_request+0x98>)
 801a926:	6819      	ldr	r1, [r3, #0]
 801a928:	f7e5 fcda 	bl	80002e0 <strcmp>
 801a92c:	2800      	cmp	r0, #0
 801a92e:	d139      	bne.n	801a9a4 <rmw_send_request+0x90>
 801a930:	6864      	ldr	r4, [r4, #4]
 801a932:	2700      	movs	r7, #0
 801a934:	6963      	ldr	r3, [r4, #20]
 801a936:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801a93a:	689b      	ldr	r3, [r3, #8]
 801a93c:	4798      	blx	r3
 801a93e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a942:	4630      	mov	r0, r6
 801a944:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a948:	4798      	blx	r3
 801a94a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a94e:	9000      	str	r0, [sp, #0]
 801a950:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a954:	6922      	ldr	r2, [r4, #16]
 801a956:	ab02      	add	r3, sp, #8
 801a958:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a95a:	f7fb f9d1 	bl	8015d00 <uxr_prepare_output_stream>
 801a95e:	e9c5 0700 	strd	r0, r7, [r5]
 801a962:	b198      	cbz	r0, 801a98c <rmw_send_request+0x78>
 801a964:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a968:	a902      	add	r1, sp, #8
 801a96a:	4630      	mov	r0, r6
 801a96c:	4798      	blx	r3
 801a96e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a972:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a976:	2b01      	cmp	r3, #1
 801a978:	d00c      	beq.n	801a994 <rmw_send_request+0x80>
 801a97a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a97c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a980:	f7f9 feee 	bl	8014760 <uxr_run_session_until_confirm_delivery>
 801a984:	4638      	mov	r0, r7
 801a986:	b00b      	add	sp, #44	@ 0x2c
 801a988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a98c:	2001      	movs	r0, #1
 801a98e:	b00b      	add	sp, #44	@ 0x2c
 801a990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a994:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a998:	f7f9 fb28 	bl	8013fec <uxr_flash_output_streams>
 801a99c:	4638      	mov	r0, r7
 801a99e:	b00b      	add	sp, #44	@ 0x2c
 801a9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9a4:	200c      	movs	r0, #12
 801a9a6:	b00b      	add	sp, #44	@ 0x2c
 801a9a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9ac:	0801eb04 	.word	0x0801eb04

0801a9b0 <rmw_take_request>:
 801a9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9b4:	4605      	mov	r5, r0
 801a9b6:	6800      	ldr	r0, [r0, #0]
 801a9b8:	b089      	sub	sp, #36	@ 0x24
 801a9ba:	460c      	mov	r4, r1
 801a9bc:	4690      	mov	r8, r2
 801a9be:	461e      	mov	r6, r3
 801a9c0:	b128      	cbz	r0, 801a9ce <rmw_take_request+0x1e>
 801a9c2:	4b28      	ldr	r3, [pc, #160]	@ (801aa64 <rmw_take_request+0xb4>)
 801a9c4:	6819      	ldr	r1, [r3, #0]
 801a9c6:	f7e5 fc8b 	bl	80002e0 <strcmp>
 801a9ca:	2800      	cmp	r0, #0
 801a9cc:	d146      	bne.n	801aa5c <rmw_take_request+0xac>
 801a9ce:	b10e      	cbz	r6, 801a9d4 <rmw_take_request+0x24>
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	7033      	strb	r3, [r6, #0]
 801a9d4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a9d8:	f7f6 fafe 	bl	8010fd8 <rmw_uxrce_clean_expired_static_input_buffer>
 801a9dc:	4648      	mov	r0, r9
 801a9de:	f7f6 fad3 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801a9e2:	4607      	mov	r7, r0
 801a9e4:	b3b0      	cbz	r0, 801aa54 <rmw_take_request+0xa4>
 801a9e6:	6885      	ldr	r5, [r0, #8]
 801a9e8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801a9ec:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801a9f0:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801a9f4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801a9f8:	7423      	strb	r3, [r4, #16]
 801a9fa:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801a9fe:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801aa02:	f8a4 2011 	strh.w	r2, [r4, #17]
 801aa06:	74e3      	strb	r3, [r4, #19]
 801aa08:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801aa0c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801aa10:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801aa14:	6161      	str	r1, [r4, #20]
 801aa16:	61a2      	str	r2, [r4, #24]
 801aa18:	61e3      	str	r3, [r4, #28]
 801aa1a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801aa1e:	689b      	ldr	r3, [r3, #8]
 801aa20:	4798      	blx	r3
 801aa22:	6844      	ldr	r4, [r0, #4]
 801aa24:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801aa28:	f105 0110 	add.w	r1, r5, #16
 801aa2c:	4668      	mov	r0, sp
 801aa2e:	f7f8 fdb3 	bl	8013598 <ucdr_init_buffer>
 801aa32:	4641      	mov	r1, r8
 801aa34:	68e3      	ldr	r3, [r4, #12]
 801aa36:	4668      	mov	r0, sp
 801aa38:	4798      	blx	r3
 801aa3a:	4639      	mov	r1, r7
 801aa3c:	4604      	mov	r4, r0
 801aa3e:	480a      	ldr	r0, [pc, #40]	@ (801aa68 <rmw_take_request+0xb8>)
 801aa40:	f7ff fe98 	bl	801a774 <put_memory>
 801aa44:	b106      	cbz	r6, 801aa48 <rmw_take_request+0x98>
 801aa46:	7034      	strb	r4, [r6, #0]
 801aa48:	f084 0001 	eor.w	r0, r4, #1
 801aa4c:	b2c0      	uxtb	r0, r0
 801aa4e:	b009      	add	sp, #36	@ 0x24
 801aa50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa54:	2001      	movs	r0, #1
 801aa56:	b009      	add	sp, #36	@ 0x24
 801aa58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa5c:	200c      	movs	r0, #12
 801aa5e:	b009      	add	sp, #36	@ 0x24
 801aa60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa64:	0801eb04 	.word	0x0801eb04
 801aa68:	2401385c 	.word	0x2401385c

0801aa6c <rmw_send_response>:
 801aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa6e:	4605      	mov	r5, r0
 801aa70:	6800      	ldr	r0, [r0, #0]
 801aa72:	b091      	sub	sp, #68	@ 0x44
 801aa74:	460c      	mov	r4, r1
 801aa76:	4616      	mov	r6, r2
 801aa78:	b128      	cbz	r0, 801aa86 <rmw_send_response+0x1a>
 801aa7a:	4b29      	ldr	r3, [pc, #164]	@ (801ab20 <rmw_send_response+0xb4>)
 801aa7c:	6819      	ldr	r1, [r3, #0]
 801aa7e:	f7e5 fc2f 	bl	80002e0 <strcmp>
 801aa82:	2800      	cmp	r0, #0
 801aa84:	d141      	bne.n	801ab0a <rmw_send_response+0x9e>
 801aa86:	686d      	ldr	r5, [r5, #4]
 801aa88:	68a1      	ldr	r1, [r4, #8]
 801aa8a:	6860      	ldr	r0, [r4, #4]
 801aa8c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801aa8e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801aa92:	9307      	str	r3, [sp, #28]
 801aa94:	4623      	mov	r3, r4
 801aa96:	9206      	str	r2, [sp, #24]
 801aa98:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa9c:	789b      	ldrb	r3, [r3, #2]
 801aa9e:	f88d 2017 	strb.w	r2, [sp, #23]
 801aaa2:	f88d 3016 	strb.w	r3, [sp, #22]
 801aaa6:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801aaaa:	68e2      	ldr	r2, [r4, #12]
 801aaac:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aab0:	ab02      	add	r3, sp, #8
 801aab2:	696c      	ldr	r4, [r5, #20]
 801aab4:	c307      	stmia	r3!, {r0, r1, r2}
 801aab6:	68e3      	ldr	r3, [r4, #12]
 801aab8:	4798      	blx	r3
 801aaba:	6844      	ldr	r4, [r0, #4]
 801aabc:	4630      	mov	r0, r6
 801aabe:	6923      	ldr	r3, [r4, #16]
 801aac0:	4798      	blx	r3
 801aac2:	f100 0318 	add.w	r3, r0, #24
 801aac6:	6938      	ldr	r0, [r7, #16]
 801aac8:	9300      	str	r3, [sp, #0]
 801aaca:	ab08      	add	r3, sp, #32
 801aacc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aad0:	692a      	ldr	r2, [r5, #16]
 801aad2:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801aad4:	f7fb f914 	bl	8015d00 <uxr_prepare_output_stream>
 801aad8:	b910      	cbnz	r0, 801aae0 <rmw_send_response+0x74>
 801aada:	2001      	movs	r0, #1
 801aadc:	b011      	add	sp, #68	@ 0x44
 801aade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aae0:	a902      	add	r1, sp, #8
 801aae2:	a808      	add	r0, sp, #32
 801aae4:	f7fc f966 	bl	8016db4 <uxr_serialize_SampleIdentity>
 801aae8:	68a3      	ldr	r3, [r4, #8]
 801aaea:	a908      	add	r1, sp, #32
 801aaec:	4630      	mov	r0, r6
 801aaee:	4798      	blx	r3
 801aaf0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801aaf4:	6938      	ldr	r0, [r7, #16]
 801aaf6:	2b01      	cmp	r3, #1
 801aaf8:	d00a      	beq.n	801ab10 <rmw_send_response+0xa4>
 801aafa:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801aafc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab00:	f7f9 fe2e 	bl	8014760 <uxr_run_session_until_confirm_delivery>
 801ab04:	2000      	movs	r0, #0
 801ab06:	b011      	add	sp, #68	@ 0x44
 801ab08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab0a:	200c      	movs	r0, #12
 801ab0c:	b011      	add	sp, #68	@ 0x44
 801ab0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab10:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab14:	f7f9 fa6a 	bl	8013fec <uxr_flash_output_streams>
 801ab18:	2000      	movs	r0, #0
 801ab1a:	b011      	add	sp, #68	@ 0x44
 801ab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab1e:	bf00      	nop
 801ab20:	0801eb04 	.word	0x0801eb04

0801ab24 <rmw_take_response>:
 801ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab28:	4604      	mov	r4, r0
 801ab2a:	6800      	ldr	r0, [r0, #0]
 801ab2c:	b088      	sub	sp, #32
 801ab2e:	460f      	mov	r7, r1
 801ab30:	4690      	mov	r8, r2
 801ab32:	461d      	mov	r5, r3
 801ab34:	b120      	cbz	r0, 801ab40 <rmw_take_response+0x1c>
 801ab36:	4b1d      	ldr	r3, [pc, #116]	@ (801abac <rmw_take_response+0x88>)
 801ab38:	6819      	ldr	r1, [r3, #0]
 801ab3a:	f7e5 fbd1 	bl	80002e0 <strcmp>
 801ab3e:	bb68      	cbnz	r0, 801ab9c <rmw_take_response+0x78>
 801ab40:	b10d      	cbz	r5, 801ab46 <rmw_take_response+0x22>
 801ab42:	2300      	movs	r3, #0
 801ab44:	702b      	strb	r3, [r5, #0]
 801ab46:	6864      	ldr	r4, [r4, #4]
 801ab48:	f7f6 fa46 	bl	8010fd8 <rmw_uxrce_clean_expired_static_input_buffer>
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f7f6 fa1b 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ab52:	4606      	mov	r6, r0
 801ab54:	b330      	cbz	r0, 801aba4 <rmw_take_response+0x80>
 801ab56:	6963      	ldr	r3, [r4, #20]
 801ab58:	6884      	ldr	r4, [r0, #8]
 801ab5a:	68db      	ldr	r3, [r3, #12]
 801ab5c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801ab60:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801ab64:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801ab68:	4798      	blx	r3
 801ab6a:	6847      	ldr	r7, [r0, #4]
 801ab6c:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801ab70:	f104 0110 	add.w	r1, r4, #16
 801ab74:	4668      	mov	r0, sp
 801ab76:	f7f8 fd0f 	bl	8013598 <ucdr_init_buffer>
 801ab7a:	4641      	mov	r1, r8
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	4668      	mov	r0, sp
 801ab80:	4798      	blx	r3
 801ab82:	4631      	mov	r1, r6
 801ab84:	4604      	mov	r4, r0
 801ab86:	480a      	ldr	r0, [pc, #40]	@ (801abb0 <rmw_take_response+0x8c>)
 801ab88:	f7ff fdf4 	bl	801a774 <put_memory>
 801ab8c:	b105      	cbz	r5, 801ab90 <rmw_take_response+0x6c>
 801ab8e:	702c      	strb	r4, [r5, #0]
 801ab90:	f084 0001 	eor.w	r0, r4, #1
 801ab94:	b2c0      	uxtb	r0, r0
 801ab96:	b008      	add	sp, #32
 801ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab9c:	200c      	movs	r0, #12
 801ab9e:	b008      	add	sp, #32
 801aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aba4:	2001      	movs	r0, #1
 801aba6:	b008      	add	sp, #32
 801aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abac:	0801eb04 	.word	0x0801eb04
 801abb0:	2401385c 	.word	0x2401385c

0801abb4 <rmw_take_with_info>:
 801abb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abb6:	4604      	mov	r4, r0
 801abb8:	6800      	ldr	r0, [r0, #0]
 801abba:	b089      	sub	sp, #36	@ 0x24
 801abbc:	460f      	mov	r7, r1
 801abbe:	4615      	mov	r5, r2
 801abc0:	b128      	cbz	r0, 801abce <rmw_take_with_info+0x1a>
 801abc2:	4b24      	ldr	r3, [pc, #144]	@ (801ac54 <rmw_take_with_info+0xa0>)
 801abc4:	6819      	ldr	r1, [r3, #0]
 801abc6:	f7e5 fb8b 	bl	80002e0 <strcmp>
 801abca:	2800      	cmp	r0, #0
 801abcc:	d13e      	bne.n	801ac4c <rmw_take_with_info+0x98>
 801abce:	b305      	cbz	r5, 801ac12 <rmw_take_with_info+0x5e>
 801abd0:	2300      	movs	r3, #0
 801abd2:	6864      	ldr	r4, [r4, #4]
 801abd4:	702b      	strb	r3, [r5, #0]
 801abd6:	f7f6 f9ff 	bl	8010fd8 <rmw_uxrce_clean_expired_static_input_buffer>
 801abda:	4620      	mov	r0, r4
 801abdc:	f7f6 f9d4 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801abe0:	4606      	mov	r6, r0
 801abe2:	b1f0      	cbz	r0, 801ac22 <rmw_take_with_info+0x6e>
 801abe4:	6881      	ldr	r1, [r0, #8]
 801abe6:	4668      	mov	r0, sp
 801abe8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801abec:	3110      	adds	r1, #16
 801abee:	f7f8 fcd3 	bl	8013598 <ucdr_init_buffer>
 801abf2:	69a3      	ldr	r3, [r4, #24]
 801abf4:	4639      	mov	r1, r7
 801abf6:	4668      	mov	r0, sp
 801abf8:	68db      	ldr	r3, [r3, #12]
 801abfa:	4798      	blx	r3
 801abfc:	4604      	mov	r4, r0
 801abfe:	4631      	mov	r1, r6
 801ac00:	4815      	ldr	r0, [pc, #84]	@ (801ac58 <rmw_take_with_info+0xa4>)
 801ac02:	f7ff fdb7 	bl	801a774 <put_memory>
 801ac06:	702c      	strb	r4, [r5, #0]
 801ac08:	f084 0001 	eor.w	r0, r4, #1
 801ac0c:	b2c0      	uxtb	r0, r0
 801ac0e:	b009      	add	sp, #36	@ 0x24
 801ac10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac12:	6864      	ldr	r4, [r4, #4]
 801ac14:	f7f6 f9e0 	bl	8010fd8 <rmw_uxrce_clean_expired_static_input_buffer>
 801ac18:	4620      	mov	r0, r4
 801ac1a:	f7f6 f9b5 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ac1e:	4605      	mov	r5, r0
 801ac20:	b910      	cbnz	r0, 801ac28 <rmw_take_with_info+0x74>
 801ac22:	2001      	movs	r0, #1
 801ac24:	b009      	add	sp, #36	@ 0x24
 801ac26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac28:	68a9      	ldr	r1, [r5, #8]
 801ac2a:	4668      	mov	r0, sp
 801ac2c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801ac30:	3110      	adds	r1, #16
 801ac32:	f7f8 fcb1 	bl	8013598 <ucdr_init_buffer>
 801ac36:	69a3      	ldr	r3, [r4, #24]
 801ac38:	4639      	mov	r1, r7
 801ac3a:	4668      	mov	r0, sp
 801ac3c:	68db      	ldr	r3, [r3, #12]
 801ac3e:	4798      	blx	r3
 801ac40:	4629      	mov	r1, r5
 801ac42:	4604      	mov	r4, r0
 801ac44:	4804      	ldr	r0, [pc, #16]	@ (801ac58 <rmw_take_with_info+0xa4>)
 801ac46:	f7ff fd95 	bl	801a774 <put_memory>
 801ac4a:	e7dd      	b.n	801ac08 <rmw_take_with_info+0x54>
 801ac4c:	200c      	movs	r0, #12
 801ac4e:	b009      	add	sp, #36	@ 0x24
 801ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac52:	bf00      	nop
 801ac54:	0801eb04 	.word	0x0801eb04
 801ac58:	2401385c 	.word	0x2401385c

0801ac5c <rmw_wait>:
 801ac5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac60:	4698      	mov	r8, r3
 801ac62:	ea40 0301 	orr.w	r3, r0, r1
 801ac66:	b089      	sub	sp, #36	@ 0x24
 801ac68:	ea48 0303 	orr.w	r3, r8, r3
 801ac6c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ac6e:	4313      	orrs	r3, r2
 801ac70:	f000 8106 	beq.w	801ae80 <rmw_wait+0x224>
 801ac74:	4605      	mov	r5, r0
 801ac76:	460e      	mov	r6, r1
 801ac78:	4691      	mov	r9, r2
 801ac7a:	b16c      	cbz	r4, 801ac98 <rmw_wait+0x3c>
 801ac7c:	4ba6      	ldr	r3, [pc, #664]	@ (801af18 <rmw_wait+0x2bc>)
 801ac7e:	af04      	add	r7, sp, #16
 801ac80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ac82:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801ac86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801ac8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ac8e:	f7ff fa9b 	bl	801a1c8 <rmw_time_equal>
 801ac92:	2800      	cmp	r0, #0
 801ac94:	f000 810b 	beq.w	801aeae <rmw_wait+0x252>
 801ac98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ac9c:	f7f6 f99c 	bl	8010fd8 <rmw_uxrce_clean_expired_static_input_buffer>
 801aca0:	4b9e      	ldr	r3, [pc, #632]	@ (801af1c <rmw_wait+0x2c0>)
 801aca2:	681c      	ldr	r4, [r3, #0]
 801aca4:	b14c      	cbz	r4, 801acba <rmw_wait+0x5e>
 801aca6:	4623      	mov	r3, r4
 801aca8:	2100      	movs	r1, #0
 801acaa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801acae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801acb2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d1f7      	bne.n	801acaa <rmw_wait+0x4e>
 801acba:	f1b9 0f00 	cmp.w	r9, #0
 801acbe:	d011      	beq.n	801ace4 <rmw_wait+0x88>
 801acc0:	f8d9 1000 	ldr.w	r1, [r9]
 801acc4:	b171      	cbz	r1, 801ace4 <rmw_wait+0x88>
 801acc6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801acca:	2300      	movs	r3, #0
 801accc:	2001      	movs	r0, #1
 801acce:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801acd2:	3301      	adds	r3, #1
 801acd4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801acd6:	4299      	cmp	r1, r3
 801acd8:	6912      	ldr	r2, [r2, #16]
 801acda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801acde:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ace2:	d1f4      	bne.n	801acce <rmw_wait+0x72>
 801ace4:	f1b8 0f00 	cmp.w	r8, #0
 801ace8:	d011      	beq.n	801ad0e <rmw_wait+0xb2>
 801acea:	f8d8 1000 	ldr.w	r1, [r8]
 801acee:	b171      	cbz	r1, 801ad0e <rmw_wait+0xb2>
 801acf0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801acf4:	2300      	movs	r3, #0
 801acf6:	2001      	movs	r0, #1
 801acf8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801acfc:	3301      	adds	r3, #1
 801acfe:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ad00:	4299      	cmp	r1, r3
 801ad02:	6912      	ldr	r2, [r2, #16]
 801ad04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad08:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad0c:	d1f4      	bne.n	801acf8 <rmw_wait+0x9c>
 801ad0e:	b185      	cbz	r5, 801ad32 <rmw_wait+0xd6>
 801ad10:	6829      	ldr	r1, [r5, #0]
 801ad12:	b171      	cbz	r1, 801ad32 <rmw_wait+0xd6>
 801ad14:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801ad18:	2300      	movs	r3, #0
 801ad1a:	2001      	movs	r0, #1
 801ad1c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ad20:	3301      	adds	r3, #1
 801ad22:	6a12      	ldr	r2, [r2, #32]
 801ad24:	4299      	cmp	r1, r3
 801ad26:	6912      	ldr	r2, [r2, #16]
 801ad28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad2c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad30:	d1f4      	bne.n	801ad1c <rmw_wait+0xc0>
 801ad32:	b344      	cbz	r4, 801ad86 <rmw_wait+0x12a>
 801ad34:	4622      	mov	r2, r4
 801ad36:	2300      	movs	r3, #0
 801ad38:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801ad3c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801ad40:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801ad44:	440b      	add	r3, r1
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	2a00      	cmp	r2, #0
 801ad4a:	d1f5      	bne.n	801ad38 <rmw_wait+0xdc>
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d05f      	beq.n	801ae10 <rmw_wait+0x1b4>
 801ad50:	1c7a      	adds	r2, r7, #1
 801ad52:	d00d      	beq.n	801ad70 <rmw_wait+0x114>
 801ad54:	ee07 7a90 	vmov	s15, r7
 801ad58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ad5c:	ee07 3a90 	vmov	s15, r3
 801ad60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ad68:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801ad6c:	ee17 7a90 	vmov	r7, s15
 801ad70:	68a0      	ldr	r0, [r4, #8]
 801ad72:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801ad76:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	f040 808d 	bne.w	801ae9a <rmw_wait+0x23e>
 801ad80:	6864      	ldr	r4, [r4, #4]
 801ad82:	2c00      	cmp	r4, #0
 801ad84:	d1f4      	bne.n	801ad70 <rmw_wait+0x114>
 801ad86:	f1b9 0f00 	cmp.w	r9, #0
 801ad8a:	f000 80a1 	beq.w	801aed0 <rmw_wait+0x274>
 801ad8e:	f8d9 7000 	ldr.w	r7, [r9]
 801ad92:	2f00      	cmp	r7, #0
 801ad94:	f000 80a4 	beq.w	801aee0 <rmw_wait+0x284>
 801ad98:	2400      	movs	r4, #0
 801ad9a:	4627      	mov	r7, r4
 801ad9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ada0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ada4:	f7f6 f8f0 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ada8:	2800      	cmp	r0, #0
 801adaa:	d03b      	beq.n	801ae24 <rmw_wait+0x1c8>
 801adac:	3401      	adds	r4, #1
 801adae:	f8d9 3000 	ldr.w	r3, [r9]
 801adb2:	2701      	movs	r7, #1
 801adb4:	42a3      	cmp	r3, r4
 801adb6:	d8f1      	bhi.n	801ad9c <rmw_wait+0x140>
 801adb8:	2701      	movs	r7, #1
 801adba:	f1b8 0f00 	cmp.w	r8, #0
 801adbe:	d010      	beq.n	801ade2 <rmw_wait+0x186>
 801adc0:	f8d8 3000 	ldr.w	r3, [r8]
 801adc4:	b16b      	cbz	r3, 801ade2 <rmw_wait+0x186>
 801adc6:	2400      	movs	r4, #0
 801adc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801adcc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801add0:	f7f6 f8da 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801add4:	b370      	cbz	r0, 801ae34 <rmw_wait+0x1d8>
 801add6:	3401      	adds	r4, #1
 801add8:	f8d8 3000 	ldr.w	r3, [r8]
 801addc:	2701      	movs	r7, #1
 801adde:	42a3      	cmp	r3, r4
 801ade0:	d8f2      	bhi.n	801adc8 <rmw_wait+0x16c>
 801ade2:	2d00      	cmp	r5, #0
 801ade4:	d035      	beq.n	801ae52 <rmw_wait+0x1f6>
 801ade6:	682b      	ldr	r3, [r5, #0]
 801ade8:	b39b      	cbz	r3, 801ae52 <rmw_wait+0x1f6>
 801adea:	2400      	movs	r4, #0
 801adec:	686b      	ldr	r3, [r5, #4]
 801adee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801adf2:	f7f6 f8c9 	bl	8010f88 <rmw_uxrce_find_static_input_buffer_by_owner>
 801adf6:	b328      	cbz	r0, 801ae44 <rmw_wait+0x1e8>
 801adf8:	3401      	adds	r4, #1
 801adfa:	682b      	ldr	r3, [r5, #0]
 801adfc:	2701      	movs	r7, #1
 801adfe:	42a3      	cmp	r3, r4
 801ae00:	d8f4      	bhi.n	801adec <rmw_wait+0x190>
 801ae02:	2e00      	cmp	r6, #0
 801ae04:	d03c      	beq.n	801ae80 <rmw_wait+0x224>
 801ae06:	6834      	ldr	r4, [r6, #0]
 801ae08:	2c00      	cmp	r4, #0
 801ae0a:	d039      	beq.n	801ae80 <rmw_wait+0x224>
 801ae0c:	2701      	movs	r7, #1
 801ae0e:	e023      	b.n	801ae58 <rmw_wait+0x1fc>
 801ae10:	68a0      	ldr	r0, [r4, #8]
 801ae12:	2100      	movs	r1, #0
 801ae14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ae18:	f7f9 fc68 	bl	80146ec <uxr_run_session_timeout>
 801ae1c:	6864      	ldr	r4, [r4, #4]
 801ae1e:	2c00      	cmp	r4, #0
 801ae20:	d1f6      	bne.n	801ae10 <rmw_wait+0x1b4>
 801ae22:	e7b0      	b.n	801ad86 <rmw_wait+0x12a>
 801ae24:	e9d9 3200 	ldrd	r3, r2, [r9]
 801ae28:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae2c:	3401      	adds	r4, #1
 801ae2e:	42a3      	cmp	r3, r4
 801ae30:	d8b4      	bhi.n	801ad9c <rmw_wait+0x140>
 801ae32:	e7c2      	b.n	801adba <rmw_wait+0x15e>
 801ae34:	e9d8 3200 	ldrd	r3, r2, [r8]
 801ae38:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae3c:	3401      	adds	r4, #1
 801ae3e:	429c      	cmp	r4, r3
 801ae40:	d3c2      	bcc.n	801adc8 <rmw_wait+0x16c>
 801ae42:	e7ce      	b.n	801ade2 <rmw_wait+0x186>
 801ae44:	e9d5 3200 	ldrd	r3, r2, [r5]
 801ae48:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae4c:	3401      	adds	r4, #1
 801ae4e:	42a3      	cmp	r3, r4
 801ae50:	d8cc      	bhi.n	801adec <rmw_wait+0x190>
 801ae52:	b1a6      	cbz	r6, 801ae7e <rmw_wait+0x222>
 801ae54:	6834      	ldr	r4, [r6, #0]
 801ae56:	b194      	cbz	r4, 801ae7e <rmw_wait+0x222>
 801ae58:	2300      	movs	r3, #0
 801ae5a:	461d      	mov	r5, r3
 801ae5c:	e004      	b.n	801ae68 <rmw_wait+0x20c>
 801ae5e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801ae62:	3301      	adds	r3, #1
 801ae64:	42a3      	cmp	r3, r4
 801ae66:	d00a      	beq.n	801ae7e <rmw_wait+0x222>
 801ae68:	6870      	ldr	r0, [r6, #4]
 801ae6a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801ae6e:	7c0a      	ldrb	r2, [r1, #16]
 801ae70:	2a00      	cmp	r2, #0
 801ae72:	d0f4      	beq.n	801ae5e <rmw_wait+0x202>
 801ae74:	3301      	adds	r3, #1
 801ae76:	4617      	mov	r7, r2
 801ae78:	740d      	strb	r5, [r1, #16]
 801ae7a:	42a3      	cmp	r3, r4
 801ae7c:	d1f4      	bne.n	801ae68 <rmw_wait+0x20c>
 801ae7e:	b147      	cbz	r7, 801ae92 <rmw_wait+0x236>
 801ae80:	2000      	movs	r0, #0
 801ae82:	b009      	add	sp, #36	@ 0x24
 801ae84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae88:	b11e      	cbz	r6, 801ae92 <rmw_wait+0x236>
 801ae8a:	6834      	ldr	r4, [r6, #0]
 801ae8c:	462f      	mov	r7, r5
 801ae8e:	2c00      	cmp	r4, #0
 801ae90:	d1e2      	bne.n	801ae58 <rmw_wait+0x1fc>
 801ae92:	2002      	movs	r0, #2
 801ae94:	b009      	add	sp, #36	@ 0x24
 801ae96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae9a:	4639      	mov	r1, r7
 801ae9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aea0:	f7f9 fc3e 	bl	8014720 <uxr_run_session_until_data>
 801aea4:	6864      	ldr	r4, [r4, #4]
 801aea6:	2c00      	cmp	r4, #0
 801aea8:	f47f af62 	bne.w	801ad70 <rmw_wait+0x114>
 801aeac:	e76b      	b.n	801ad86 <rmw_wait+0x12a>
 801aeae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801aeb2:	f7ff f9df 	bl	801a274 <rmw_time_total_nsec>
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	4a19      	ldr	r2, [pc, #100]	@ (801af20 <rmw_wait+0x2c4>)
 801aeba:	f7e5 fac9 	bl	8000450 <__aeabi_uldivmod>
 801aebe:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801aec2:	4607      	mov	r7, r0
 801aec4:	f171 0300 	sbcs.w	r3, r1, #0
 801aec8:	bfa8      	it	ge
 801aeca:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801aece:	e6e5      	b.n	801ac9c <rmw_wait+0x40>
 801aed0:	f1b8 0f00 	cmp.w	r8, #0
 801aed4:	d00f      	beq.n	801aef6 <rmw_wait+0x29a>
 801aed6:	f8d8 3000 	ldr.w	r3, [r8]
 801aeda:	b193      	cbz	r3, 801af02 <rmw_wait+0x2a6>
 801aedc:	464f      	mov	r7, r9
 801aede:	e772      	b.n	801adc6 <rmw_wait+0x16a>
 801aee0:	f1b8 0f00 	cmp.w	r8, #0
 801aee4:	d007      	beq.n	801aef6 <rmw_wait+0x29a>
 801aee6:	f8d8 3000 	ldr.w	r3, [r8]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	f47f af6b 	bne.w	801adc6 <rmw_wait+0x16a>
 801aef0:	b155      	cbz	r5, 801af08 <rmw_wait+0x2ac>
 801aef2:	461f      	mov	r7, r3
 801aef4:	e777      	b.n	801ade6 <rmw_wait+0x18a>
 801aef6:	2d00      	cmp	r5, #0
 801aef8:	d0c6      	beq.n	801ae88 <rmw_wait+0x22c>
 801aefa:	682b      	ldr	r3, [r5, #0]
 801aefc:	b143      	cbz	r3, 801af10 <rmw_wait+0x2b4>
 801aefe:	4647      	mov	r7, r8
 801af00:	e773      	b.n	801adea <rmw_wait+0x18e>
 801af02:	b10d      	cbz	r5, 801af08 <rmw_wait+0x2ac>
 801af04:	464f      	mov	r7, r9
 801af06:	e76e      	b.n	801ade6 <rmw_wait+0x18a>
 801af08:	462f      	mov	r7, r5
 801af0a:	2e00      	cmp	r6, #0
 801af0c:	d1a2      	bne.n	801ae54 <rmw_wait+0x1f8>
 801af0e:	e7c0      	b.n	801ae92 <rmw_wait+0x236>
 801af10:	4647      	mov	r7, r8
 801af12:	2e00      	cmp	r6, #0
 801af14:	d19e      	bne.n	801ae54 <rmw_wait+0x1f8>
 801af16:	e7bc      	b.n	801ae92 <rmw_wait+0x236>
 801af18:	0801dd38 	.word	0x0801dd38
 801af1c:	2401384c 	.word	0x2401384c
 801af20:	000f4240 	.word	0x000f4240

0801af24 <rmw_create_wait_set>:
 801af24:	b508      	push	{r3, lr}
 801af26:	4803      	ldr	r0, [pc, #12]	@ (801af34 <rmw_create_wait_set+0x10>)
 801af28:	f7ff fc14 	bl	801a754 <get_memory>
 801af2c:	b108      	cbz	r0, 801af32 <rmw_create_wait_set+0xe>
 801af2e:	6880      	ldr	r0, [r0, #8]
 801af30:	3010      	adds	r0, #16
 801af32:	bd08      	pop	{r3, pc}
 801af34:	2401388c 	.word	0x2401388c

0801af38 <rmw_destroy_wait_set>:
 801af38:	b508      	push	{r3, lr}
 801af3a:	4b08      	ldr	r3, [pc, #32]	@ (801af5c <rmw_destroy_wait_set+0x24>)
 801af3c:	6819      	ldr	r1, [r3, #0]
 801af3e:	b911      	cbnz	r1, 801af46 <rmw_destroy_wait_set+0xe>
 801af40:	e00a      	b.n	801af58 <rmw_destroy_wait_set+0x20>
 801af42:	6849      	ldr	r1, [r1, #4]
 801af44:	b141      	cbz	r1, 801af58 <rmw_destroy_wait_set+0x20>
 801af46:	688b      	ldr	r3, [r1, #8]
 801af48:	3310      	adds	r3, #16
 801af4a:	4298      	cmp	r0, r3
 801af4c:	d1f9      	bne.n	801af42 <rmw_destroy_wait_set+0xa>
 801af4e:	4803      	ldr	r0, [pc, #12]	@ (801af5c <rmw_destroy_wait_set+0x24>)
 801af50:	f7ff fc10 	bl	801a774 <put_memory>
 801af54:	2000      	movs	r0, #0
 801af56:	bd08      	pop	{r3, pc}
 801af58:	2001      	movs	r0, #1
 801af5a:	bd08      	pop	{r3, pc}
 801af5c:	2401388c 	.word	0x2401388c

0801af60 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af64:	6805      	ldr	r5, [r0, #0]
 801af66:	4604      	mov	r4, r0
 801af68:	460e      	mov	r6, r1
 801af6a:	4628      	mov	r0, r5
 801af6c:	f7e5 f9b8 	bl	80002e0 <strcmp>
 801af70:	b1c8      	cbz	r0, 801afa6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801af72:	4b11      	ldr	r3, [pc, #68]	@ (801afb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	429d      	cmp	r5, r3
 801af78:	d112      	bne.n	801afa0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801af7a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801af7e:	f8d8 4000 	ldr.w	r4, [r8]
 801af82:	b16c      	cbz	r4, 801afa0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801af84:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801af88:	2700      	movs	r7, #0
 801af8a:	3d04      	subs	r5, #4
 801af8c:	4631      	mov	r1, r6
 801af8e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801af92:	f7e5 f9a5 	bl	80002e0 <strcmp>
 801af96:	00bb      	lsls	r3, r7, #2
 801af98:	b140      	cbz	r0, 801afac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801af9a:	3701      	adds	r7, #1
 801af9c:	42bc      	cmp	r4, r7
 801af9e:	d1f5      	bne.n	801af8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801afa0:	2000      	movs	r0, #0
 801afa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afa6:	4620      	mov	r0, r4
 801afa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801afb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afb4:	58d3      	ldr	r3, [r2, r3]
 801afb6:	4718      	bx	r3
 801afb8:	24000678 	.word	0x24000678

0801afbc <sensor_msgs__msg__Imu__init>:
 801afbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afc0:	4605      	mov	r5, r0
 801afc2:	b3c0      	cbz	r0, 801b036 <sensor_msgs__msg__Imu__init+0x7a>
 801afc4:	f000 f894 	bl	801b0f0 <std_msgs__msg__Header__init>
 801afc8:	4604      	mov	r4, r0
 801afca:	b310      	cbz	r0, 801b012 <sensor_msgs__msg__Imu__init+0x56>
 801afcc:	f105 0618 	add.w	r6, r5, #24
 801afd0:	4630      	mov	r0, r6
 801afd2:	f000 f8c3 	bl	801b15c <geometry_msgs__msg__Quaternion__init>
 801afd6:	4604      	mov	r4, r0
 801afd8:	2800      	cmp	r0, #0
 801afda:	d040      	beq.n	801b05e <sensor_msgs__msg__Imu__init+0xa2>
 801afdc:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801afe0:	4638      	mov	r0, r7
 801afe2:	f000 f8cd 	bl	801b180 <geometry_msgs__msg__Vector3__init>
 801afe6:	4604      	mov	r4, r0
 801afe8:	b348      	cbz	r0, 801b03e <sensor_msgs__msg__Imu__init+0x82>
 801afea:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801afee:	4640      	mov	r0, r8
 801aff0:	f000 f8c6 	bl	801b180 <geometry_msgs__msg__Vector3__init>
 801aff4:	4604      	mov	r4, r0
 801aff6:	b9d8      	cbnz	r0, 801b030 <sensor_msgs__msg__Imu__init+0x74>
 801aff8:	4628      	mov	r0, r5
 801affa:	f000 f89d 	bl	801b138 <std_msgs__msg__Header__fini>
 801affe:	4630      	mov	r0, r6
 801b000:	f000 f8bc 	bl	801b17c <geometry_msgs__msg__Quaternion__fini>
 801b004:	4638      	mov	r0, r7
 801b006:	f000 f8bf 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b00a:	4640      	mov	r0, r8
 801b00c:	f000 f8bc 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b010:	e00e      	b.n	801b030 <sensor_msgs__msg__Imu__init+0x74>
 801b012:	4628      	mov	r0, r5
 801b014:	f000 f890 	bl	801b138 <std_msgs__msg__Header__fini>
 801b018:	f105 0018 	add.w	r0, r5, #24
 801b01c:	f000 f8ae 	bl	801b17c <geometry_msgs__msg__Quaternion__fini>
 801b020:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801b024:	f000 f8b0 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b028:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801b02c:	f000 f8ac 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b030:	4620      	mov	r0, r4
 801b032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b036:	4604      	mov	r4, r0
 801b038:	4620      	mov	r0, r4
 801b03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b03e:	4628      	mov	r0, r5
 801b040:	f000 f87a 	bl	801b138 <std_msgs__msg__Header__fini>
 801b044:	4630      	mov	r0, r6
 801b046:	f000 f899 	bl	801b17c <geometry_msgs__msg__Quaternion__fini>
 801b04a:	4638      	mov	r0, r7
 801b04c:	f000 f89c 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b050:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801b054:	f000 f898 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b058:	4620      	mov	r0, r4
 801b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b05e:	4628      	mov	r0, r5
 801b060:	f000 f86a 	bl	801b138 <std_msgs__msg__Header__fini>
 801b064:	4630      	mov	r0, r6
 801b066:	e7d9      	b.n	801b01c <sensor_msgs__msg__Imu__init+0x60>

0801b068 <sensor_msgs__msg__Imu__fini>:
 801b068:	b188      	cbz	r0, 801b08e <sensor_msgs__msg__Imu__fini+0x26>
 801b06a:	b510      	push	{r4, lr}
 801b06c:	4604      	mov	r4, r0
 801b06e:	f000 f863 	bl	801b138 <std_msgs__msg__Header__fini>
 801b072:	f104 0018 	add.w	r0, r4, #24
 801b076:	f000 f881 	bl	801b17c <geometry_msgs__msg__Quaternion__fini>
 801b07a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801b07e:	f000 f883 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b082:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801b086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b08a:	f000 b87d 	b.w	801b188 <geometry_msgs__msg__Vector3__fini>
 801b08e:	4770      	bx	lr

0801b090 <sensor_msgs__msg__MagneticField__init>:
 801b090:	b570      	push	{r4, r5, r6, lr}
 801b092:	4605      	mov	r5, r0
 801b094:	b1a8      	cbz	r0, 801b0c2 <sensor_msgs__msg__MagneticField__init+0x32>
 801b096:	f000 f82b 	bl	801b0f0 <std_msgs__msg__Header__init>
 801b09a:	4604      	mov	r4, r0
 801b09c:	b140      	cbz	r0, 801b0b0 <sensor_msgs__msg__MagneticField__init+0x20>
 801b09e:	f105 0618 	add.w	r6, r5, #24
 801b0a2:	4630      	mov	r0, r6
 801b0a4:	f000 f86c 	bl	801b180 <geometry_msgs__msg__Vector3__init>
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	b168      	cbz	r0, 801b0c8 <sensor_msgs__msg__MagneticField__init+0x38>
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	bd70      	pop	{r4, r5, r6, pc}
 801b0b0:	4628      	mov	r0, r5
 801b0b2:	f000 f841 	bl	801b138 <std_msgs__msg__Header__fini>
 801b0b6:	f105 0018 	add.w	r0, r5, #24
 801b0ba:	f000 f865 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b0be:	4620      	mov	r0, r4
 801b0c0:	bd70      	pop	{r4, r5, r6, pc}
 801b0c2:	4604      	mov	r4, r0
 801b0c4:	4620      	mov	r0, r4
 801b0c6:	bd70      	pop	{r4, r5, r6, pc}
 801b0c8:	4628      	mov	r0, r5
 801b0ca:	f000 f835 	bl	801b138 <std_msgs__msg__Header__fini>
 801b0ce:	4630      	mov	r0, r6
 801b0d0:	f000 f85a 	bl	801b188 <geometry_msgs__msg__Vector3__fini>
 801b0d4:	e7ea      	b.n	801b0ac <sensor_msgs__msg__MagneticField__init+0x1c>
 801b0d6:	bf00      	nop

0801b0d8 <sensor_msgs__msg__MagneticField__fini>:
 801b0d8:	b148      	cbz	r0, 801b0ee <sensor_msgs__msg__MagneticField__fini+0x16>
 801b0da:	b510      	push	{r4, lr}
 801b0dc:	4604      	mov	r4, r0
 801b0de:	f000 f82b 	bl	801b138 <std_msgs__msg__Header__fini>
 801b0e2:	f104 0018 	add.w	r0, r4, #24
 801b0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0ea:	f000 b84d 	b.w	801b188 <geometry_msgs__msg__Vector3__fini>
 801b0ee:	4770      	bx	lr

0801b0f0 <std_msgs__msg__Header__init>:
 801b0f0:	b570      	push	{r4, r5, r6, lr}
 801b0f2:	4605      	mov	r5, r0
 801b0f4:	b1a8      	cbz	r0, 801b122 <std_msgs__msg__Header__init+0x32>
 801b0f6:	f000 f82b 	bl	801b150 <builtin_interfaces__msg__Time__init>
 801b0fa:	4604      	mov	r4, r0
 801b0fc:	b140      	cbz	r0, 801b110 <std_msgs__msg__Header__init+0x20>
 801b0fe:	f105 0608 	add.w	r6, r5, #8
 801b102:	4630      	mov	r0, r6
 801b104:	f001 f968 	bl	801c3d8 <rosidl_runtime_c__String__init>
 801b108:	4604      	mov	r4, r0
 801b10a:	b168      	cbz	r0, 801b128 <std_msgs__msg__Header__init+0x38>
 801b10c:	4620      	mov	r0, r4
 801b10e:	bd70      	pop	{r4, r5, r6, pc}
 801b110:	4628      	mov	r0, r5
 801b112:	f000 f821 	bl	801b158 <builtin_interfaces__msg__Time__fini>
 801b116:	f105 0008 	add.w	r0, r5, #8
 801b11a:	f001 f973 	bl	801c404 <rosidl_runtime_c__String__fini>
 801b11e:	4620      	mov	r0, r4
 801b120:	bd70      	pop	{r4, r5, r6, pc}
 801b122:	4604      	mov	r4, r0
 801b124:	4620      	mov	r0, r4
 801b126:	bd70      	pop	{r4, r5, r6, pc}
 801b128:	4628      	mov	r0, r5
 801b12a:	f000 f815 	bl	801b158 <builtin_interfaces__msg__Time__fini>
 801b12e:	4630      	mov	r0, r6
 801b130:	f001 f968 	bl	801c404 <rosidl_runtime_c__String__fini>
 801b134:	e7ea      	b.n	801b10c <std_msgs__msg__Header__init+0x1c>
 801b136:	bf00      	nop

0801b138 <std_msgs__msg__Header__fini>:
 801b138:	b148      	cbz	r0, 801b14e <std_msgs__msg__Header__fini+0x16>
 801b13a:	b510      	push	{r4, lr}
 801b13c:	4604      	mov	r4, r0
 801b13e:	f000 f80b 	bl	801b158 <builtin_interfaces__msg__Time__fini>
 801b142:	f104 0008 	add.w	r0, r4, #8
 801b146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b14a:	f001 b95b 	b.w	801c404 <rosidl_runtime_c__String__fini>
 801b14e:	4770      	bx	lr

0801b150 <builtin_interfaces__msg__Time__init>:
 801b150:	3800      	subs	r0, #0
 801b152:	bf18      	it	ne
 801b154:	2001      	movne	r0, #1
 801b156:	4770      	bx	lr

0801b158 <builtin_interfaces__msg__Time__fini>:
 801b158:	4770      	bx	lr
 801b15a:	bf00      	nop

0801b15c <geometry_msgs__msg__Quaternion__init>:
 801b15c:	b160      	cbz	r0, 801b178 <geometry_msgs__msg__Quaternion__init+0x1c>
 801b15e:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801b162:	2200      	movs	r2, #0
 801b164:	2300      	movs	r3, #0
 801b166:	ed80 7b06 	vstr	d7, [r0, #24]
 801b16a:	e9c0 2300 	strd	r2, r3, [r0]
 801b16e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b172:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b176:	2001      	movs	r0, #1
 801b178:	4770      	bx	lr
 801b17a:	bf00      	nop

0801b17c <geometry_msgs__msg__Quaternion__fini>:
 801b17c:	4770      	bx	lr
 801b17e:	bf00      	nop

0801b180 <geometry_msgs__msg__Vector3__init>:
 801b180:	3800      	subs	r0, #0
 801b182:	bf18      	it	ne
 801b184:	2001      	movne	r0, #1
 801b186:	4770      	bx	lr

0801b188 <geometry_msgs__msg__Vector3__fini>:
 801b188:	4770      	bx	lr
 801b18a:	bf00      	nop

0801b18c <ucdr_serialize_string>:
 801b18c:	b510      	push	{r4, lr}
 801b18e:	b082      	sub	sp, #8
 801b190:	4604      	mov	r4, r0
 801b192:	4608      	mov	r0, r1
 801b194:	9101      	str	r1, [sp, #4]
 801b196:	f7e5 f8ad 	bl	80002f4 <strlen>
 801b19a:	4602      	mov	r2, r0
 801b19c:	9901      	ldr	r1, [sp, #4]
 801b19e:	4620      	mov	r0, r4
 801b1a0:	3201      	adds	r2, #1
 801b1a2:	b002      	add	sp, #8
 801b1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1a8:	f7f8 ba6a 	b.w	8013680 <ucdr_serialize_sequence_char>

0801b1ac <ucdr_deserialize_string>:
 801b1ac:	b500      	push	{lr}
 801b1ae:	b083      	sub	sp, #12
 801b1b0:	ab01      	add	r3, sp, #4
 801b1b2:	f7f8 fa77 	bl	80136a4 <ucdr_deserialize_sequence_char>
 801b1b6:	b003      	add	sp, #12
 801b1b8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1bc <uxr_init_input_best_effort_stream>:
 801b1bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1c0:	8003      	strh	r3, [r0, #0]
 801b1c2:	4770      	bx	lr

0801b1c4 <uxr_reset_input_best_effort_stream>:
 801b1c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1c8:	8003      	strh	r3, [r0, #0]
 801b1ca:	4770      	bx	lr

0801b1cc <uxr_receive_best_effort_message>:
 801b1cc:	b538      	push	{r3, r4, r5, lr}
 801b1ce:	4604      	mov	r4, r0
 801b1d0:	8800      	ldrh	r0, [r0, #0]
 801b1d2:	460d      	mov	r5, r1
 801b1d4:	f000 fd44 	bl	801bc60 <uxr_seq_num_cmp>
 801b1d8:	4603      	mov	r3, r0
 801b1da:	0fc0      	lsrs	r0, r0, #31
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	bfb8      	it	lt
 801b1e0:	8025      	strhlt	r5, [r4, #0]
 801b1e2:	bd38      	pop	{r3, r4, r5, pc}

0801b1e4 <on_full_input_buffer>:
 801b1e4:	b570      	push	{r4, r5, r6, lr}
 801b1e6:	460c      	mov	r4, r1
 801b1e8:	4605      	mov	r5, r0
 801b1ea:	8908      	ldrh	r0, [r1, #8]
 801b1ec:	682b      	ldr	r3, [r5, #0]
 801b1ee:	7d26      	ldrb	r6, [r4, #20]
 801b1f0:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b1f4:	fbb2 f2f0 	udiv	r2, r2, r0
 801b1f8:	eba3 0c01 	sub.w	ip, r3, r1
 801b1fc:	fbbc fcf2 	udiv	ip, ip, r2
 801b200:	f10c 0c01 	add.w	ip, ip, #1
 801b204:	fa1f f38c 	uxth.w	r3, ip
 801b208:	fbb3 fcf0 	udiv	ip, r3, r0
 801b20c:	fb00 331c 	mls	r3, r0, ip, r3
 801b210:	b29b      	uxth	r3, r3
 801b212:	fb02 f303 	mul.w	r3, r2, r3
 801b216:	1d18      	adds	r0, r3, #4
 801b218:	4408      	add	r0, r1
 801b21a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b21e:	b116      	cbz	r6, 801b226 <on_full_input_buffer+0x42>
 801b220:	2600      	movs	r6, #0
 801b222:	f840 6c04 	str.w	r6, [r0, #-4]
 801b226:	2a03      	cmp	r2, #3
 801b228:	d801      	bhi.n	801b22e <on_full_input_buffer+0x4a>
 801b22a:	2001      	movs	r0, #1
 801b22c:	bd70      	pop	{r4, r5, r6, pc}
 801b22e:	3308      	adds	r3, #8
 801b230:	4628      	mov	r0, r5
 801b232:	3a04      	subs	r2, #4
 801b234:	4419      	add	r1, r3
 801b236:	692b      	ldr	r3, [r5, #16]
 801b238:	f7f8 f9a6 	bl	8013588 <ucdr_init_buffer_origin>
 801b23c:	4628      	mov	r0, r5
 801b23e:	4622      	mov	r2, r4
 801b240:	4902      	ldr	r1, [pc, #8]	@ (801b24c <on_full_input_buffer+0x68>)
 801b242:	f7f8 f97d 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 801b246:	2000      	movs	r0, #0
 801b248:	bd70      	pop	{r4, r5, r6, pc}
 801b24a:	bf00      	nop
 801b24c:	0801b1e5 	.word	0x0801b1e5

0801b250 <uxr_init_input_reliable_stream>:
 801b250:	b510      	push	{r4, lr}
 801b252:	e9c0 1200 	strd	r1, r2, [r0]
 801b256:	2400      	movs	r4, #0
 801b258:	9a02      	ldr	r2, [sp, #8]
 801b25a:	8103      	strh	r3, [r0, #8]
 801b25c:	6102      	str	r2, [r0, #16]
 801b25e:	7504      	strb	r4, [r0, #20]
 801b260:	b1c3      	cbz	r3, 801b294 <uxr_init_input_reliable_stream+0x44>
 801b262:	600c      	str	r4, [r1, #0]
 801b264:	8901      	ldrh	r1, [r0, #8]
 801b266:	2901      	cmp	r1, #1
 801b268:	d914      	bls.n	801b294 <uxr_init_input_reliable_stream+0x44>
 801b26a:	f04f 0c01 	mov.w	ip, #1
 801b26e:	6843      	ldr	r3, [r0, #4]
 801b270:	f10c 0e01 	add.w	lr, ip, #1
 801b274:	fbbc f2f1 	udiv	r2, ip, r1
 801b278:	fbb3 f3f1 	udiv	r3, r3, r1
 801b27c:	fb01 c212 	mls	r2, r1, r2, ip
 801b280:	fa1f fc8e 	uxth.w	ip, lr
 801b284:	b292      	uxth	r2, r2
 801b286:	fb02 f303 	mul.w	r3, r2, r3
 801b28a:	6802      	ldr	r2, [r0, #0]
 801b28c:	50d4      	str	r4, [r2, r3]
 801b28e:	8901      	ldrh	r1, [r0, #8]
 801b290:	4561      	cmp	r1, ip
 801b292:	d8ec      	bhi.n	801b26e <uxr_init_input_reliable_stream+0x1e>
 801b294:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b298:	60c3      	str	r3, [r0, #12]
 801b29a:	bd10      	pop	{r4, pc}

0801b29c <uxr_reset_input_reliable_stream>:
 801b29c:	8901      	ldrh	r1, [r0, #8]
 801b29e:	b1d9      	cbz	r1, 801b2d8 <uxr_reset_input_reliable_stream+0x3c>
 801b2a0:	b510      	push	{r4, lr}
 801b2a2:	f04f 0e00 	mov.w	lr, #0
 801b2a6:	46f4      	mov	ip, lr
 801b2a8:	4674      	mov	r4, lr
 801b2aa:	6843      	ldr	r3, [r0, #4]
 801b2ac:	f10e 0e01 	add.w	lr, lr, #1
 801b2b0:	fbbc f2f1 	udiv	r2, ip, r1
 801b2b4:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2b8:	fb01 c212 	mls	r2, r1, r2, ip
 801b2bc:	fa1f fc8e 	uxth.w	ip, lr
 801b2c0:	b292      	uxth	r2, r2
 801b2c2:	fb02 f303 	mul.w	r3, r2, r3
 801b2c6:	6802      	ldr	r2, [r0, #0]
 801b2c8:	50d4      	str	r4, [r2, r3]
 801b2ca:	8901      	ldrh	r1, [r0, #8]
 801b2cc:	4561      	cmp	r1, ip
 801b2ce:	d8ec      	bhi.n	801b2aa <uxr_reset_input_reliable_stream+0xe>
 801b2d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2d4:	60c3      	str	r3, [r0, #12]
 801b2d6:	bd10      	pop	{r4, pc}
 801b2d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2dc:	60c3      	str	r3, [r0, #12]
 801b2de:	4770      	bx	lr

0801b2e0 <uxr_receive_reliable_message>:
 801b2e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	460d      	mov	r5, r1
 801b2e8:	8901      	ldrh	r1, [r0, #8]
 801b2ea:	4617      	mov	r7, r2
 801b2ec:	8980      	ldrh	r0, [r0, #12]
 801b2ee:	4698      	mov	r8, r3
 801b2f0:	f000 fcae 	bl	801bc50 <uxr_seq_num_add>
 801b2f4:	4629      	mov	r1, r5
 801b2f6:	4606      	mov	r6, r0
 801b2f8:	89a0      	ldrh	r0, [r4, #12]
 801b2fa:	f000 fcb1 	bl	801bc60 <uxr_seq_num_cmp>
 801b2fe:	2800      	cmp	r0, #0
 801b300:	db0a      	blt.n	801b318 <uxr_receive_reliable_message+0x38>
 801b302:	2600      	movs	r6, #0
 801b304:	4629      	mov	r1, r5
 801b306:	89e0      	ldrh	r0, [r4, #14]
 801b308:	f000 fcaa 	bl	801bc60 <uxr_seq_num_cmp>
 801b30c:	2800      	cmp	r0, #0
 801b30e:	da00      	bge.n	801b312 <uxr_receive_reliable_message+0x32>
 801b310:	81e5      	strh	r5, [r4, #14]
 801b312:	4630      	mov	r0, r6
 801b314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b318:	4630      	mov	r0, r6
 801b31a:	4629      	mov	r1, r5
 801b31c:	f000 fca0 	bl	801bc60 <uxr_seq_num_cmp>
 801b320:	2800      	cmp	r0, #0
 801b322:	dbee      	blt.n	801b302 <uxr_receive_reliable_message+0x22>
 801b324:	6923      	ldr	r3, [r4, #16]
 801b326:	4638      	mov	r0, r7
 801b328:	4798      	blx	r3
 801b32a:	4681      	mov	r9, r0
 801b32c:	2101      	movs	r1, #1
 801b32e:	89a0      	ldrh	r0, [r4, #12]
 801b330:	f000 fc8e 	bl	801bc50 <uxr_seq_num_add>
 801b334:	f1b9 0f00 	cmp.w	r9, #0
 801b338:	bf08      	it	eq
 801b33a:	4285      	cmpeq	r5, r0
 801b33c:	bf0c      	ite	eq
 801b33e:	2601      	moveq	r6, #1
 801b340:	2600      	movne	r6, #0
 801b342:	d104      	bne.n	801b34e <uxr_receive_reliable_message+0x6e>
 801b344:	2300      	movs	r3, #0
 801b346:	9a08      	ldr	r2, [sp, #32]
 801b348:	81a0      	strh	r0, [r4, #12]
 801b34a:	7013      	strb	r3, [r2, #0]
 801b34c:	e7da      	b.n	801b304 <uxr_receive_reliable_message+0x24>
 801b34e:	8922      	ldrh	r2, [r4, #8]
 801b350:	6863      	ldr	r3, [r4, #4]
 801b352:	fbb5 f0f2 	udiv	r0, r5, r2
 801b356:	fbb3 f3f2 	udiv	r3, r3, r2
 801b35a:	fb02 5010 	mls	r0, r2, r0, r5
 801b35e:	b280      	uxth	r0, r0
 801b360:	fb03 f000 	mul.w	r0, r3, r0
 801b364:	6823      	ldr	r3, [r4, #0]
 801b366:	3004      	adds	r0, #4
 801b368:	4418      	add	r0, r3
 801b36a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d1c7      	bne.n	801b302 <uxr_receive_reliable_message+0x22>
 801b372:	4639      	mov	r1, r7
 801b374:	4642      	mov	r2, r8
 801b376:	f001 fe40 	bl	801cffa <memcpy>
 801b37a:	8921      	ldrh	r1, [r4, #8]
 801b37c:	6863      	ldr	r3, [r4, #4]
 801b37e:	fbb5 f2f1 	udiv	r2, r5, r1
 801b382:	fbb3 f3f1 	udiv	r3, r3, r1
 801b386:	fb01 5212 	mls	r2, r1, r2, r5
 801b38a:	b292      	uxth	r2, r2
 801b38c:	fb02 f303 	mul.w	r3, r2, r3
 801b390:	6822      	ldr	r2, [r4, #0]
 801b392:	f842 8003 	str.w	r8, [r2, r3]
 801b396:	2301      	movs	r3, #1
 801b398:	9a08      	ldr	r2, [sp, #32]
 801b39a:	7013      	strb	r3, [r2, #0]
 801b39c:	f1b9 0f00 	cmp.w	r9, #0
 801b3a0:	d0af      	beq.n	801b302 <uxr_receive_reliable_message+0x22>
 801b3a2:	89a6      	ldrh	r6, [r4, #12]
 801b3a4:	2101      	movs	r1, #1
 801b3a6:	4630      	mov	r0, r6
 801b3a8:	f000 fc52 	bl	801bc50 <uxr_seq_num_add>
 801b3ac:	8921      	ldrh	r1, [r4, #8]
 801b3ae:	6863      	ldr	r3, [r4, #4]
 801b3b0:	4606      	mov	r6, r0
 801b3b2:	fbb0 f2f1 	udiv	r2, r0, r1
 801b3b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3ba:	fb01 0212 	mls	r2, r1, r2, r0
 801b3be:	6820      	ldr	r0, [r4, #0]
 801b3c0:	b292      	uxth	r2, r2
 801b3c2:	fb02 f303 	mul.w	r3, r2, r3
 801b3c6:	3304      	adds	r3, #4
 801b3c8:	4418      	add	r0, r3
 801b3ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d097      	beq.n	801b302 <uxr_receive_reliable_message+0x22>
 801b3d2:	6923      	ldr	r3, [r4, #16]
 801b3d4:	4798      	blx	r3
 801b3d6:	2802      	cmp	r0, #2
 801b3d8:	d002      	beq.n	801b3e0 <uxr_receive_reliable_message+0x100>
 801b3da:	2801      	cmp	r0, #1
 801b3dc:	d0e2      	beq.n	801b3a4 <uxr_receive_reliable_message+0xc4>
 801b3de:	e790      	b.n	801b302 <uxr_receive_reliable_message+0x22>
 801b3e0:	2601      	movs	r6, #1
 801b3e2:	e78f      	b.n	801b304 <uxr_receive_reliable_message+0x24>

0801b3e4 <uxr_next_input_reliable_buffer_available>:
 801b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3e8:	4604      	mov	r4, r0
 801b3ea:	460f      	mov	r7, r1
 801b3ec:	8980      	ldrh	r0, [r0, #12]
 801b3ee:	2101      	movs	r1, #1
 801b3f0:	4690      	mov	r8, r2
 801b3f2:	f000 fc2d 	bl	801bc50 <uxr_seq_num_add>
 801b3f6:	8922      	ldrh	r2, [r4, #8]
 801b3f8:	6866      	ldr	r6, [r4, #4]
 801b3fa:	fbb0 f3f2 	udiv	r3, r0, r2
 801b3fe:	fbb6 f6f2 	udiv	r6, r6, r2
 801b402:	fb02 0313 	mls	r3, r2, r3, r0
 801b406:	b29b      	uxth	r3, r3
 801b408:	fb03 f606 	mul.w	r6, r3, r6
 801b40c:	6823      	ldr	r3, [r4, #0]
 801b40e:	3604      	adds	r6, #4
 801b410:	441e      	add	r6, r3
 801b412:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b416:	f1b9 0f00 	cmp.w	r9, #0
 801b41a:	d023      	beq.n	801b464 <uxr_next_input_reliable_buffer_available+0x80>
 801b41c:	4605      	mov	r5, r0
 801b41e:	6923      	ldr	r3, [r4, #16]
 801b420:	4630      	mov	r0, r6
 801b422:	4798      	blx	r3
 801b424:	4682      	mov	sl, r0
 801b426:	b300      	cbz	r0, 801b46a <uxr_next_input_reliable_buffer_available+0x86>
 801b428:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b42c:	2101      	movs	r1, #1
 801b42e:	4650      	mov	r0, sl
 801b430:	f000 fc0e 	bl	801bc50 <uxr_seq_num_add>
 801b434:	8921      	ldrh	r1, [r4, #8]
 801b436:	4682      	mov	sl, r0
 801b438:	6863      	ldr	r3, [r4, #4]
 801b43a:	6820      	ldr	r0, [r4, #0]
 801b43c:	fbba f2f1 	udiv	r2, sl, r1
 801b440:	fbb3 f3f1 	udiv	r3, r3, r1
 801b444:	fb01 a212 	mls	r2, r1, r2, sl
 801b448:	b292      	uxth	r2, r2
 801b44a:	fb02 f303 	mul.w	r3, r2, r3
 801b44e:	3304      	adds	r3, #4
 801b450:	4418      	add	r0, r3
 801b452:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b456:	b12b      	cbz	r3, 801b464 <uxr_next_input_reliable_buffer_available+0x80>
 801b458:	6923      	ldr	r3, [r4, #16]
 801b45a:	4798      	blx	r3
 801b45c:	2802      	cmp	r0, #2
 801b45e:	d01b      	beq.n	801b498 <uxr_next_input_reliable_buffer_available+0xb4>
 801b460:	2801      	cmp	r0, #1
 801b462:	d0e3      	beq.n	801b42c <uxr_next_input_reliable_buffer_available+0x48>
 801b464:	2000      	movs	r0, #0
 801b466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b46a:	464a      	mov	r2, r9
 801b46c:	4631      	mov	r1, r6
 801b46e:	4638      	mov	r0, r7
 801b470:	f7f8 f892 	bl	8013598 <ucdr_init_buffer>
 801b474:	8921      	ldrh	r1, [r4, #8]
 801b476:	6863      	ldr	r3, [r4, #4]
 801b478:	2001      	movs	r0, #1
 801b47a:	fbb5 f2f1 	udiv	r2, r5, r1
 801b47e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b482:	fb01 5212 	mls	r2, r1, r2, r5
 801b486:	b292      	uxth	r2, r2
 801b488:	fb02 f303 	mul.w	r3, r2, r3
 801b48c:	6822      	ldr	r2, [r4, #0]
 801b48e:	f842 a003 	str.w	sl, [r2, r3]
 801b492:	81a5      	strh	r5, [r4, #12]
 801b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b498:	8920      	ldrh	r0, [r4, #8]
 801b49a:	eb06 0108 	add.w	r1, r6, r8
 801b49e:	6863      	ldr	r3, [r4, #4]
 801b4a0:	eba9 0208 	sub.w	r2, r9, r8
 801b4a4:	fbb5 f6f0 	udiv	r6, r5, r0
 801b4a8:	fbb3 f3f0 	udiv	r3, r3, r0
 801b4ac:	fb00 5516 	mls	r5, r0, r6, r5
 801b4b0:	2000      	movs	r0, #0
 801b4b2:	b2ad      	uxth	r5, r5
 801b4b4:	fb03 f505 	mul.w	r5, r3, r5
 801b4b8:	6823      	ldr	r3, [r4, #0]
 801b4ba:	5158      	str	r0, [r3, r5]
 801b4bc:	4638      	mov	r0, r7
 801b4be:	f7f8 f86b 	bl	8013598 <ucdr_init_buffer>
 801b4c2:	4638      	mov	r0, r7
 801b4c4:	4622      	mov	r2, r4
 801b4c6:	4903      	ldr	r1, [pc, #12]	@ (801b4d4 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b4c8:	f7f8 f83a 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 801b4cc:	2001      	movs	r0, #1
 801b4ce:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b4d2:	e7c8      	b.n	801b466 <uxr_next_input_reliable_buffer_available+0x82>
 801b4d4:	0801b1e5 	.word	0x0801b1e5

0801b4d8 <uxr_process_heartbeat>:
 801b4d8:	b538      	push	{r3, r4, r5, lr}
 801b4da:	4611      	mov	r1, r2
 801b4dc:	4604      	mov	r4, r0
 801b4de:	89c0      	ldrh	r0, [r0, #14]
 801b4e0:	4615      	mov	r5, r2
 801b4e2:	f000 fbbd 	bl	801bc60 <uxr_seq_num_cmp>
 801b4e6:	2800      	cmp	r0, #0
 801b4e8:	bfb8      	it	lt
 801b4ea:	81e5      	strhlt	r5, [r4, #14]
 801b4ec:	bd38      	pop	{r3, r4, r5, pc}
 801b4ee:	bf00      	nop

0801b4f0 <uxr_compute_acknack>:
 801b4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4f4:	8903      	ldrh	r3, [r0, #8]
 801b4f6:	4604      	mov	r4, r0
 801b4f8:	460f      	mov	r7, r1
 801b4fa:	8985      	ldrh	r5, [r0, #12]
 801b4fc:	b1db      	cbz	r3, 801b536 <uxr_compute_acknack+0x46>
 801b4fe:	4628      	mov	r0, r5
 801b500:	2601      	movs	r6, #1
 801b502:	e004      	b.n	801b50e <uxr_compute_acknack+0x1e>
 801b504:	4566      	cmp	r6, ip
 801b506:	f106 0601 	add.w	r6, r6, #1
 801b50a:	d214      	bcs.n	801b536 <uxr_compute_acknack+0x46>
 801b50c:	89a0      	ldrh	r0, [r4, #12]
 801b50e:	b2b1      	uxth	r1, r6
 801b510:	f000 fb9e 	bl	801bc50 <uxr_seq_num_add>
 801b514:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b518:	fbb0 f2fc 	udiv	r2, r0, ip
 801b51c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b520:	fb0c 0212 	mls	r2, ip, r2, r0
 801b524:	fbb3 f3fc 	udiv	r3, r3, ip
 801b528:	b292      	uxth	r2, r2
 801b52a:	fb02 f303 	mul.w	r3, r2, r3
 801b52e:	58cb      	ldr	r3, [r1, r3]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d1e7      	bne.n	801b504 <uxr_compute_acknack+0x14>
 801b534:	4605      	mov	r5, r0
 801b536:	803d      	strh	r5, [r7, #0]
 801b538:	2101      	movs	r1, #1
 801b53a:	89e6      	ldrh	r6, [r4, #14]
 801b53c:	4628      	mov	r0, r5
 801b53e:	f000 fb8b 	bl	801bc58 <uxr_seq_num_sub>
 801b542:	4601      	mov	r1, r0
 801b544:	4630      	mov	r0, r6
 801b546:	f000 fb87 	bl	801bc58 <uxr_seq_num_sub>
 801b54a:	4606      	mov	r6, r0
 801b54c:	b328      	cbz	r0, 801b59a <uxr_compute_acknack+0xaa>
 801b54e:	f04f 0900 	mov.w	r9, #0
 801b552:	f04f 0801 	mov.w	r8, #1
 801b556:	464d      	mov	r5, r9
 801b558:	fa1f f189 	uxth.w	r1, r9
 801b55c:	8838      	ldrh	r0, [r7, #0]
 801b55e:	f000 fb77 	bl	801bc50 <uxr_seq_num_add>
 801b562:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b566:	6861      	ldr	r1, [r4, #4]
 801b568:	fa08 fe09 	lsl.w	lr, r8, r9
 801b56c:	6822      	ldr	r2, [r4, #0]
 801b56e:	f109 0901 	add.w	r9, r9, #1
 801b572:	ea4e 0e05 	orr.w	lr, lr, r5
 801b576:	fbb0 f3fc 	udiv	r3, r0, ip
 801b57a:	fbb1 f1fc 	udiv	r1, r1, ip
 801b57e:	fb03 001c 	mls	r0, r3, ip, r0
 801b582:	b283      	uxth	r3, r0
 801b584:	fb01 f303 	mul.w	r3, r1, r3
 801b588:	58d3      	ldr	r3, [r2, r3]
 801b58a:	b90b      	cbnz	r3, 801b590 <uxr_compute_acknack+0xa0>
 801b58c:	fa1f f58e 	uxth.w	r5, lr
 801b590:	454e      	cmp	r6, r9
 801b592:	d1e1      	bne.n	801b558 <uxr_compute_acknack+0x68>
 801b594:	4628      	mov	r0, r5
 801b596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b59a:	4605      	mov	r5, r0
 801b59c:	4628      	mov	r0, r5
 801b59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5a2:	bf00      	nop

0801b5a4 <uxr_init_output_best_effort_stream>:
 801b5a4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b5a8:	6001      	str	r1, [r0, #0]
 801b5aa:	7303      	strb	r3, [r0, #12]
 801b5ac:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b5b0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b5b4:	4770      	bx	lr
 801b5b6:	bf00      	nop

0801b5b8 <uxr_reset_output_best_effort_stream>:
 801b5b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b5bc:	7b03      	ldrb	r3, [r0, #12]
 801b5be:	81c2      	strh	r2, [r0, #14]
 801b5c0:	6043      	str	r3, [r0, #4]
 801b5c2:	4770      	bx	lr

0801b5c4 <uxr_prepare_best_effort_buffer_to_write>:
 801b5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5c6:	4604      	mov	r4, r0
 801b5c8:	b083      	sub	sp, #12
 801b5ca:	6840      	ldr	r0, [r0, #4]
 801b5cc:	460d      	mov	r5, r1
 801b5ce:	4616      	mov	r6, r2
 801b5d0:	f7fa fad4 	bl	8015b7c <uxr_submessage_padding>
 801b5d4:	6863      	ldr	r3, [r4, #4]
 801b5d6:	4418      	add	r0, r3
 801b5d8:	68a3      	ldr	r3, [r4, #8]
 801b5da:	1942      	adds	r2, r0, r5
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	bf2c      	ite	cs
 801b5e0:	2701      	movcs	r7, #1
 801b5e2:	2700      	movcc	r7, #0
 801b5e4:	d202      	bcs.n	801b5ec <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b5e6:	4638      	mov	r0, r7
 801b5e8:	b003      	add	sp, #12
 801b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5ec:	9000      	str	r0, [sp, #0]
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	4630      	mov	r0, r6
 801b5f2:	6821      	ldr	r1, [r4, #0]
 801b5f4:	f7f7 ffbe 	bl	8013574 <ucdr_init_buffer_origin_offset>
 801b5f8:	6861      	ldr	r1, [r4, #4]
 801b5fa:	4638      	mov	r0, r7
 801b5fc:	4429      	add	r1, r5
 801b5fe:	6061      	str	r1, [r4, #4]
 801b600:	b003      	add	sp, #12
 801b602:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b604 <uxr_prepare_best_effort_buffer_to_send>:
 801b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b608:	4604      	mov	r4, r0
 801b60a:	461d      	mov	r5, r3
 801b60c:	6840      	ldr	r0, [r0, #4]
 801b60e:	7b23      	ldrb	r3, [r4, #12]
 801b610:	4298      	cmp	r0, r3
 801b612:	bf8c      	ite	hi
 801b614:	2601      	movhi	r6, #1
 801b616:	2600      	movls	r6, #0
 801b618:	d802      	bhi.n	801b620 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b61a:	4630      	mov	r0, r6
 801b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b620:	4688      	mov	r8, r1
 801b622:	89e0      	ldrh	r0, [r4, #14]
 801b624:	2101      	movs	r1, #1
 801b626:	4617      	mov	r7, r2
 801b628:	f000 fb12 	bl	801bc50 <uxr_seq_num_add>
 801b62c:	6823      	ldr	r3, [r4, #0]
 801b62e:	81e0      	strh	r0, [r4, #14]
 801b630:	8028      	strh	r0, [r5, #0]
 801b632:	4630      	mov	r0, r6
 801b634:	f8c8 3000 	str.w	r3, [r8]
 801b638:	6863      	ldr	r3, [r4, #4]
 801b63a:	603b      	str	r3, [r7, #0]
 801b63c:	7b23      	ldrb	r3, [r4, #12]
 801b63e:	6063      	str	r3, [r4, #4]
 801b640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b644 <on_full_output_buffer>:
 801b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b646:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b64a:	460c      	mov	r4, r1
 801b64c:	6803      	ldr	r3, [r0, #0]
 801b64e:	4605      	mov	r5, r0
 801b650:	7b26      	ldrb	r6, [r4, #12]
 801b652:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b656:	fbb2 f2fc 	udiv	r2, r2, ip
 801b65a:	eba3 0e01 	sub.w	lr, r3, r1
 801b65e:	6903      	ldr	r3, [r0, #16]
 801b660:	fbbe fef2 	udiv	lr, lr, r2
 801b664:	f10e 0e01 	add.w	lr, lr, #1
 801b668:	fa1f fe8e 	uxth.w	lr, lr
 801b66c:	fbbe f7fc 	udiv	r7, lr, ip
 801b670:	fb0c ec17 	mls	ip, ip, r7, lr
 801b674:	fa1f fc8c 	uxth.w	ip, ip
 801b678:	fb02 fc0c 	mul.w	ip, r2, ip
 801b67c:	f851 200c 	ldr.w	r2, [r1, ip]
 801b680:	44b4      	add	ip, r6
 801b682:	1b92      	subs	r2, r2, r6
 801b684:	f10c 0c08 	add.w	ip, ip, #8
 801b688:	3a04      	subs	r2, #4
 801b68a:	4461      	add	r1, ip
 801b68c:	f7f7 ff7c 	bl	8013588 <ucdr_init_buffer_origin>
 801b690:	4628      	mov	r0, r5
 801b692:	4622      	mov	r2, r4
 801b694:	4902      	ldr	r1, [pc, #8]	@ (801b6a0 <on_full_output_buffer+0x5c>)
 801b696:	f7f7 ff53 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 801b69a:	2000      	movs	r0, #0
 801b69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b69e:	bf00      	nop
 801b6a0:	0801b645 	.word	0x0801b645

0801b6a4 <uxr_init_output_reliable_stream>:
 801b6a4:	b530      	push	{r4, r5, lr}
 801b6a6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b6aa:	8103      	strh	r3, [r0, #8]
 801b6ac:	7304      	strb	r4, [r0, #12]
 801b6ae:	e9c0 1200 	strd	r1, r2, [r0]
 801b6b2:	b1e3      	cbz	r3, 801b6ee <uxr_init_output_reliable_stream+0x4a>
 801b6b4:	600c      	str	r4, [r1, #0]
 801b6b6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b6ba:	f1bc 0f01 	cmp.w	ip, #1
 801b6be:	d916      	bls.n	801b6ee <uxr_init_output_reliable_stream+0x4a>
 801b6c0:	f04f 0e01 	mov.w	lr, #1
 801b6c4:	6843      	ldr	r3, [r0, #4]
 801b6c6:	f10e 0501 	add.w	r5, lr, #1
 801b6ca:	7b04      	ldrb	r4, [r0, #12]
 801b6cc:	6801      	ldr	r1, [r0, #0]
 801b6ce:	fbbe f2fc 	udiv	r2, lr, ip
 801b6d2:	fbb3 f3fc 	udiv	r3, r3, ip
 801b6d6:	fb0c e212 	mls	r2, ip, r2, lr
 801b6da:	fa1f fe85 	uxth.w	lr, r5
 801b6de:	b292      	uxth	r2, r2
 801b6e0:	fb02 f303 	mul.w	r3, r2, r3
 801b6e4:	50cc      	str	r4, [r1, r3]
 801b6e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b6ea:	45f4      	cmp	ip, lr
 801b6ec:	d8ea      	bhi.n	801b6c4 <uxr_init_output_reliable_stream+0x20>
 801b6ee:	4b07      	ldr	r3, [pc, #28]	@ (801b70c <uxr_init_output_reliable_stream+0x68>)
 801b6f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b6f4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b6f8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801b6fc:	f8c0 300e 	str.w	r3, [r0, #14]
 801b700:	2300      	movs	r3, #0
 801b702:	8242      	strh	r2, [r0, #18]
 801b704:	8403      	strh	r3, [r0, #32]
 801b706:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b70a:	bd30      	pop	{r4, r5, pc}
 801b70c:	ffff0000 	.word	0xffff0000

0801b710 <uxr_reset_output_reliable_stream>:
 801b710:	8901      	ldrh	r1, [r0, #8]
 801b712:	b510      	push	{r4, lr}
 801b714:	b1b1      	cbz	r1, 801b744 <uxr_reset_output_reliable_stream+0x34>
 801b716:	f04f 0e00 	mov.w	lr, #0
 801b71a:	46f4      	mov	ip, lr
 801b71c:	6843      	ldr	r3, [r0, #4]
 801b71e:	f10e 0e01 	add.w	lr, lr, #1
 801b722:	7b04      	ldrb	r4, [r0, #12]
 801b724:	fbbc f2f1 	udiv	r2, ip, r1
 801b728:	fbb3 f3f1 	udiv	r3, r3, r1
 801b72c:	fb01 c212 	mls	r2, r1, r2, ip
 801b730:	fa1f fc8e 	uxth.w	ip, lr
 801b734:	b292      	uxth	r2, r2
 801b736:	fb02 f303 	mul.w	r3, r2, r3
 801b73a:	6802      	ldr	r2, [r0, #0]
 801b73c:	50d4      	str	r4, [r2, r3]
 801b73e:	8901      	ldrh	r1, [r0, #8]
 801b740:	4561      	cmp	r1, ip
 801b742:	d8eb      	bhi.n	801b71c <uxr_reset_output_reliable_stream+0xc>
 801b744:	4b08      	ldr	r3, [pc, #32]	@ (801b768 <uxr_reset_output_reliable_stream+0x58>)
 801b746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b74a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801b760 <uxr_reset_output_reliable_stream+0x50>
 801b74e:	f8c0 300e 	str.w	r3, [r0, #14]
 801b752:	2300      	movs	r3, #0
 801b754:	8242      	strh	r2, [r0, #18]
 801b756:	8403      	strh	r3, [r0, #32]
 801b758:	ed80 7b06 	vstr	d7, [r0, #24]
 801b75c:	bd10      	pop	{r4, pc}
 801b75e:	bf00      	nop
 801b760:	ffffffff 	.word	0xffffffff
 801b764:	7fffffff 	.word	0x7fffffff
 801b768:	ffff0000 	.word	0xffff0000

0801b76c <uxr_prepare_reliable_buffer_to_write>:
 801b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b770:	4604      	mov	r4, r0
 801b772:	b091      	sub	sp, #68	@ 0x44
 801b774:	8900      	ldrh	r0, [r0, #8]
 801b776:	468b      	mov	fp, r1
 801b778:	89e6      	ldrh	r6, [r4, #14]
 801b77a:	9204      	str	r2, [sp, #16]
 801b77c:	6865      	ldr	r5, [r4, #4]
 801b77e:	6823      	ldr	r3, [r4, #0]
 801b780:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b784:	fbb6 f2f0 	udiv	r2, r6, r0
 801b788:	fbb5 f5f0 	udiv	r5, r5, r0
 801b78c:	fb00 6212 	mls	r2, r0, r2, r6
 801b790:	1f2f      	subs	r7, r5, #4
 801b792:	b292      	uxth	r2, r2
 801b794:	fb05 3202 	mla	r2, r5, r2, r3
 801b798:	1d11      	adds	r1, r2, #4
 801b79a:	f8d2 8000 	ldr.w	r8, [r2]
 801b79e:	9103      	str	r1, [sp, #12]
 801b7a0:	2800      	cmp	r0, #0
 801b7a2:	f000 814a 	beq.w	801ba3a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b7a6:	f04f 0c00 	mov.w	ip, #0
 801b7aa:	46e2      	mov	sl, ip
 801b7ac:	4661      	mov	r1, ip
 801b7ae:	f10c 0c01 	add.w	ip, ip, #1
 801b7b2:	fbb1 f2f0 	udiv	r2, r1, r0
 801b7b6:	fb00 1212 	mls	r2, r0, r2, r1
 801b7ba:	fa1f f18c 	uxth.w	r1, ip
 801b7be:	b292      	uxth	r2, r2
 801b7c0:	fb05 f202 	mul.w	r2, r5, r2
 801b7c4:	589a      	ldr	r2, [r3, r2]
 801b7c6:	454a      	cmp	r2, r9
 801b7c8:	d103      	bne.n	801b7d2 <uxr_prepare_reliable_buffer_to_write+0x66>
 801b7ca:	f10a 0a01 	add.w	sl, sl, #1
 801b7ce:	fa1f fa8a 	uxth.w	sl, sl
 801b7d2:	4281      	cmp	r1, r0
 801b7d4:	d3eb      	bcc.n	801b7ae <uxr_prepare_reliable_buffer_to_write+0x42>
 801b7d6:	4640      	mov	r0, r8
 801b7d8:	2104      	movs	r1, #4
 801b7da:	f8cd a014 	str.w	sl, [sp, #20]
 801b7de:	f7f7 fedf 	bl	80135a0 <ucdr_alignment>
 801b7e2:	4480      	add	r8, r0
 801b7e4:	eb08 020b 	add.w	r2, r8, fp
 801b7e8:	42ba      	cmp	r2, r7
 801b7ea:	f240 80ca 	bls.w	801b982 <uxr_prepare_reliable_buffer_to_write+0x216>
 801b7ee:	7b22      	ldrb	r2, [r4, #12]
 801b7f0:	445a      	add	r2, fp
 801b7f2:	42ba      	cmp	r2, r7
 801b7f4:	f240 80b2 	bls.w	801b95c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b7f8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801b7fc:	b2bb      	uxth	r3, r7
 801b7fe:	eba2 0209 	sub.w	r2, r2, r9
 801b802:	441a      	add	r2, r3
 801b804:	b292      	uxth	r2, r2
 801b806:	fb0a f902 	mul.w	r9, sl, r2
 801b80a:	9205      	str	r2, [sp, #20]
 801b80c:	45d9      	cmp	r9, fp
 801b80e:	9206      	str	r2, [sp, #24]
 801b810:	f0c0 80b3 	bcc.w	801b97a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b814:	f108 0204 	add.w	r2, r8, #4
 801b818:	42ba      	cmp	r2, r7
 801b81a:	f080 80da 	bcs.w	801b9d2 <uxr_prepare_reliable_buffer_to_write+0x266>
 801b81e:	f1a3 0904 	sub.w	r9, r3, #4
 801b822:	9b05      	ldr	r3, [sp, #20]
 801b824:	eba9 0908 	sub.w	r9, r9, r8
 801b828:	fa1f f989 	uxth.w	r9, r9
 801b82c:	ebab 0b09 	sub.w	fp, fp, r9
 801b830:	fbbb f2f3 	udiv	r2, fp, r3
 801b834:	fb03 b312 	mls	r3, r3, r2, fp
 801b838:	2b00      	cmp	r3, #0
 801b83a:	f040 80c4 	bne.w	801b9c6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b83e:	b293      	uxth	r3, r2
 801b840:	4553      	cmp	r3, sl
 801b842:	f200 809a 	bhi.w	801b97a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b846:	2b00      	cmp	r3, #0
 801b848:	f000 80f9 	beq.w	801ba3e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b84c:	f8cd 801c 	str.w	r8, [sp, #28]
 801b850:	f04f 0a00 	mov.w	sl, #0
 801b854:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b858:	f10d 0b20 	add.w	fp, sp, #32
 801b85c:	9505      	str	r5, [sp, #20]
 801b85e:	461d      	mov	r5, r3
 801b860:	e000      	b.n	801b864 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b862:	46c1      	mov	r9, r8
 801b864:	8922      	ldrh	r2, [r4, #8]
 801b866:	4658      	mov	r0, fp
 801b868:	6863      	ldr	r3, [r4, #4]
 801b86a:	f10a 0a01 	add.w	sl, sl, #1
 801b86e:	fbb6 f1f2 	udiv	r1, r6, r2
 801b872:	fbb3 f3f2 	udiv	r3, r3, r2
 801b876:	fb02 6111 	mls	r1, r2, r1, r6
 801b87a:	463a      	mov	r2, r7
 801b87c:	b289      	uxth	r1, r1
 801b87e:	fb03 f101 	mul.w	r1, r3, r1
 801b882:	6823      	ldr	r3, [r4, #0]
 801b884:	3104      	adds	r1, #4
 801b886:	4419      	add	r1, r3
 801b888:	2300      	movs	r3, #0
 801b88a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b88e:	f8cd c000 	str.w	ip, [sp]
 801b892:	f7f7 fe6f 	bl	8013574 <ucdr_init_buffer_origin_offset>
 801b896:	464a      	mov	r2, r9
 801b898:	2300      	movs	r3, #0
 801b89a:	210d      	movs	r1, #13
 801b89c:	4658      	mov	r0, fp
 801b89e:	f7fa f92d 	bl	8015afc <uxr_buffer_submessage_header>
 801b8a2:	8921      	ldrh	r1, [r4, #8]
 801b8a4:	6863      	ldr	r3, [r4, #4]
 801b8a6:	4630      	mov	r0, r6
 801b8a8:	fbb6 f2f1 	udiv	r2, r6, r1
 801b8ac:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8b0:	fb01 6212 	mls	r2, r1, r2, r6
 801b8b4:	2101      	movs	r1, #1
 801b8b6:	b292      	uxth	r2, r2
 801b8b8:	fb02 f303 	mul.w	r3, r2, r3
 801b8bc:	6822      	ldr	r2, [r4, #0]
 801b8be:	50d7      	str	r7, [r2, r3]
 801b8c0:	f000 f9c6 	bl	801bc50 <uxr_seq_num_add>
 801b8c4:	4606      	mov	r6, r0
 801b8c6:	fa1f f38a 	uxth.w	r3, sl
 801b8ca:	429d      	cmp	r5, r3
 801b8cc:	d8c9      	bhi.n	801b862 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b8ce:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b8d2:	9d05      	ldr	r5, [sp, #20]
 801b8d4:	8920      	ldrh	r0, [r4, #8]
 801b8d6:	463a      	mov	r2, r7
 801b8d8:	6863      	ldr	r3, [r4, #4]
 801b8da:	fbb6 f1f0 	udiv	r1, r6, r0
 801b8de:	fbb3 f3f0 	udiv	r3, r3, r0
 801b8e2:	fb00 6111 	mls	r1, r0, r1, r6
 801b8e6:	4658      	mov	r0, fp
 801b8e8:	b289      	uxth	r1, r1
 801b8ea:	fb01 f303 	mul.w	r3, r1, r3
 801b8ee:	6821      	ldr	r1, [r4, #0]
 801b8f0:	3304      	adds	r3, #4
 801b8f2:	4419      	add	r1, r3
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b8fa:	9700      	str	r7, [sp, #0]
 801b8fc:	f7f7 fe3a 	bl	8013574 <ucdr_init_buffer_origin_offset>
 801b900:	9f06      	ldr	r7, [sp, #24]
 801b902:	4658      	mov	r0, fp
 801b904:	2302      	movs	r3, #2
 801b906:	b2ba      	uxth	r2, r7
 801b908:	210d      	movs	r1, #13
 801b90a:	f7fa f8f7 	bl	8015afc <uxr_buffer_submessage_header>
 801b90e:	f108 0104 	add.w	r1, r8, #4
 801b912:	9b03      	ldr	r3, [sp, #12]
 801b914:	f1a5 0208 	sub.w	r2, r5, #8
 801b918:	8925      	ldrh	r5, [r4, #8]
 801b91a:	440b      	add	r3, r1
 801b91c:	eba2 0208 	sub.w	r2, r2, r8
 801b920:	fbb6 f0f5 	udiv	r0, r6, r5
 801b924:	4619      	mov	r1, r3
 801b926:	6863      	ldr	r3, [r4, #4]
 801b928:	fb05 6010 	mls	r0, r5, r0, r6
 801b92c:	fbb3 f3f5 	udiv	r3, r3, r5
 801b930:	b280      	uxth	r0, r0
 801b932:	6825      	ldr	r5, [r4, #0]
 801b934:	fb00 f303 	mul.w	r3, r0, r3
 801b938:	7b20      	ldrb	r0, [r4, #12]
 801b93a:	3004      	adds	r0, #4
 801b93c:	4438      	add	r0, r7
 801b93e:	50e8      	str	r0, [r5, r3]
 801b940:	9d04      	ldr	r5, [sp, #16]
 801b942:	4628      	mov	r0, r5
 801b944:	f7f7 fe28 	bl	8013598 <ucdr_init_buffer>
 801b948:	4628      	mov	r0, r5
 801b94a:	4622      	mov	r2, r4
 801b94c:	493d      	ldr	r1, [pc, #244]	@ (801ba44 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b94e:	f7f7 fdf7 	bl	8013540 <ucdr_set_on_full_buffer_callback>
 801b952:	2001      	movs	r0, #1
 801b954:	81e6      	strh	r6, [r4, #14]
 801b956:	b011      	add	sp, #68	@ 0x44
 801b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b95c:	2101      	movs	r1, #1
 801b95e:	89e0      	ldrh	r0, [r4, #14]
 801b960:	f000 f976 	bl	801bc50 <uxr_seq_num_add>
 801b964:	4605      	mov	r5, r0
 801b966:	8921      	ldrh	r1, [r4, #8]
 801b968:	8a60      	ldrh	r0, [r4, #18]
 801b96a:	f000 f971 	bl	801bc50 <uxr_seq_num_add>
 801b96e:	4601      	mov	r1, r0
 801b970:	4628      	mov	r0, r5
 801b972:	f000 f975 	bl	801bc60 <uxr_seq_num_cmp>
 801b976:	2800      	cmp	r0, #0
 801b978:	dd44      	ble.n	801ba04 <uxr_prepare_reliable_buffer_to_write+0x298>
 801b97a:	2000      	movs	r0, #0
 801b97c:	b011      	add	sp, #68	@ 0x44
 801b97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b982:	8921      	ldrh	r1, [r4, #8]
 801b984:	8a60      	ldrh	r0, [r4, #18]
 801b986:	9205      	str	r2, [sp, #20]
 801b988:	f000 f962 	bl	801bc50 <uxr_seq_num_add>
 801b98c:	4601      	mov	r1, r0
 801b98e:	4630      	mov	r0, r6
 801b990:	f000 f966 	bl	801bc60 <uxr_seq_num_cmp>
 801b994:	2800      	cmp	r0, #0
 801b996:	9a05      	ldr	r2, [sp, #20]
 801b998:	dcef      	bgt.n	801b97a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b99a:	8925      	ldrh	r5, [r4, #8]
 801b99c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b9a0:	fbb6 f4f5 	udiv	r4, r6, r5
 801b9a4:	fbb3 f3f5 	udiv	r3, r3, r5
 801b9a8:	fb05 6414 	mls	r4, r5, r4, r6
 801b9ac:	b2a4      	uxth	r4, r4
 801b9ae:	fb04 f303 	mul.w	r3, r4, r3
 801b9b2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b9b6:	50fa      	str	r2, [r7, r3]
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	f8cd 8000 	str.w	r8, [sp]
 801b9be:	f7f7 fdd9 	bl	8013574 <ucdr_init_buffer_origin_offset>
 801b9c2:	2001      	movs	r0, #1
 801b9c4:	e7da      	b.n	801b97c <uxr_prepare_reliable_buffer_to_write+0x210>
 801b9c6:	3201      	adds	r2, #1
 801b9c8:	9306      	str	r3, [sp, #24]
 801b9ca:	b293      	uxth	r3, r2
 801b9cc:	4553      	cmp	r3, sl
 801b9ce:	d8d4      	bhi.n	801b97a <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b9d0:	e739      	b.n	801b846 <uxr_prepare_reliable_buffer_to_write+0xda>
 801b9d2:	4630      	mov	r0, r6
 801b9d4:	2101      	movs	r1, #1
 801b9d6:	9307      	str	r3, [sp, #28]
 801b9d8:	f000 f93a 	bl	801bc50 <uxr_seq_num_add>
 801b9dc:	4606      	mov	r6, r0
 801b9de:	8920      	ldrh	r0, [r4, #8]
 801b9e0:	6862      	ldr	r2, [r4, #4]
 801b9e2:	fbb6 f1f0 	udiv	r1, r6, r0
 801b9e6:	fbb2 f2f0 	udiv	r2, r2, r0
 801b9ea:	fb00 6111 	mls	r1, r0, r1, r6
 801b9ee:	b289      	uxth	r1, r1
 801b9f0:	fb01 f202 	mul.w	r2, r1, r2
 801b9f4:	6821      	ldr	r1, [r4, #0]
 801b9f6:	3204      	adds	r2, #4
 801b9f8:	188b      	adds	r3, r1, r2
 801b9fa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b9fe:	9303      	str	r3, [sp, #12]
 801ba00:	9b07      	ldr	r3, [sp, #28]
 801ba02:	e70c      	b.n	801b81e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ba04:	8921      	ldrh	r1, [r4, #8]
 801ba06:	6863      	ldr	r3, [r4, #4]
 801ba08:	9804      	ldr	r0, [sp, #16]
 801ba0a:	fbb5 f2f1 	udiv	r2, r5, r1
 801ba0e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba12:	fb01 5212 	mls	r2, r1, r2, r5
 801ba16:	6821      	ldr	r1, [r4, #0]
 801ba18:	b292      	uxth	r2, r2
 801ba1a:	fb02 f303 	mul.w	r3, r2, r3
 801ba1e:	7b22      	ldrb	r2, [r4, #12]
 801ba20:	3304      	adds	r3, #4
 801ba22:	445a      	add	r2, fp
 801ba24:	4419      	add	r1, r3
 801ba26:	f841 2c04 	str.w	r2, [r1, #-4]
 801ba2a:	7b23      	ldrb	r3, [r4, #12]
 801ba2c:	9300      	str	r3, [sp, #0]
 801ba2e:	2300      	movs	r3, #0
 801ba30:	f7f7 fda0 	bl	8013574 <ucdr_init_buffer_origin_offset>
 801ba34:	2001      	movs	r0, #1
 801ba36:	81e5      	strh	r5, [r4, #14]
 801ba38:	e7a0      	b.n	801b97c <uxr_prepare_reliable_buffer_to_write+0x210>
 801ba3a:	4682      	mov	sl, r0
 801ba3c:	e6cb      	b.n	801b7d6 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ba3e:	f10d 0b20 	add.w	fp, sp, #32
 801ba42:	e747      	b.n	801b8d4 <uxr_prepare_reliable_buffer_to_write+0x168>
 801ba44:	0801b645 	.word	0x0801b645

0801ba48 <uxr_prepare_next_reliable_buffer_to_send>:
 801ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba4a:	4604      	mov	r4, r0
 801ba4c:	461d      	mov	r5, r3
 801ba4e:	460f      	mov	r7, r1
 801ba50:	8a00      	ldrh	r0, [r0, #16]
 801ba52:	2101      	movs	r1, #1
 801ba54:	4616      	mov	r6, r2
 801ba56:	f000 f8fb 	bl	801bc50 <uxr_seq_num_add>
 801ba5a:	8028      	strh	r0, [r5, #0]
 801ba5c:	8922      	ldrh	r2, [r4, #8]
 801ba5e:	6863      	ldr	r3, [r4, #4]
 801ba60:	fbb0 f1f2 	udiv	r1, r0, r2
 801ba64:	fbb3 f3f2 	udiv	r3, r3, r2
 801ba68:	fb02 0c11 	mls	ip, r2, r1, r0
 801ba6c:	89e1      	ldrh	r1, [r4, #14]
 801ba6e:	fa1f fc8c 	uxth.w	ip, ip
 801ba72:	fb0c fc03 	mul.w	ip, ip, r3
 801ba76:	6823      	ldr	r3, [r4, #0]
 801ba78:	f10c 0c04 	add.w	ip, ip, #4
 801ba7c:	4463      	add	r3, ip
 801ba7e:	603b      	str	r3, [r7, #0]
 801ba80:	6823      	ldr	r3, [r4, #0]
 801ba82:	449c      	add	ip, r3
 801ba84:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801ba88:	6033      	str	r3, [r6, #0]
 801ba8a:	f000 f8e9 	bl	801bc60 <uxr_seq_num_cmp>
 801ba8e:	2800      	cmp	r0, #0
 801ba90:	dd01      	ble.n	801ba96 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801ba92:	2000      	movs	r0, #0
 801ba94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba96:	7b23      	ldrb	r3, [r4, #12]
 801ba98:	6832      	ldr	r2, [r6, #0]
 801ba9a:	429a      	cmp	r2, r3
 801ba9c:	d9f9      	bls.n	801ba92 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801ba9e:	8a61      	ldrh	r1, [r4, #18]
 801baa0:	8a20      	ldrh	r0, [r4, #16]
 801baa2:	f000 f8d9 	bl	801bc58 <uxr_seq_num_sub>
 801baa6:	8923      	ldrh	r3, [r4, #8]
 801baa8:	4283      	cmp	r3, r0
 801baaa:	d0f2      	beq.n	801ba92 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801baac:	8828      	ldrh	r0, [r5, #0]
 801baae:	89e3      	ldrh	r3, [r4, #14]
 801bab0:	8220      	strh	r0, [r4, #16]
 801bab2:	4298      	cmp	r0, r3
 801bab4:	d001      	beq.n	801baba <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801bab6:	2001      	movs	r0, #1
 801bab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baba:	2101      	movs	r1, #1
 801babc:	f000 f8c8 	bl	801bc50 <uxr_seq_num_add>
 801bac0:	4603      	mov	r3, r0
 801bac2:	2001      	movs	r0, #1
 801bac4:	81e3      	strh	r3, [r4, #14]
 801bac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bac8 <uxr_update_output_stream_heartbeat_timestamp>:
 801bac8:	b570      	push	{r4, r5, r6, lr}
 801baca:	8a01      	ldrh	r1, [r0, #16]
 801bacc:	4604      	mov	r4, r0
 801bace:	8a40      	ldrh	r0, [r0, #18]
 801bad0:	4615      	mov	r5, r2
 801bad2:	461e      	mov	r6, r3
 801bad4:	f000 f8c4 	bl	801bc60 <uxr_seq_num_cmp>
 801bad8:	2800      	cmp	r0, #0
 801bada:	db07      	blt.n	801baec <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801badc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bae0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801bae4:	2000      	movs	r0, #0
 801bae6:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801baea:	bd70      	pop	{r4, r5, r6, pc}
 801baec:	f894 0020 	ldrb.w	r0, [r4, #32]
 801baf0:	b940      	cbnz	r0, 801bb04 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801baf2:	2301      	movs	r3, #1
 801baf4:	f884 3020 	strb.w	r3, [r4, #32]
 801baf8:	3564      	adds	r5, #100	@ 0x64
 801bafa:	f146 0600 	adc.w	r6, r6, #0
 801bafe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bb02:	bd70      	pop	{r4, r5, r6, pc}
 801bb04:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801bb08:	4295      	cmp	r5, r2
 801bb0a:	eb76 0303 	sbcs.w	r3, r6, r3
 801bb0e:	db04      	blt.n	801bb1a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801bb10:	1c43      	adds	r3, r0, #1
 801bb12:	2001      	movs	r0, #1
 801bb14:	f884 3020 	strb.w	r3, [r4, #32]
 801bb18:	e7ee      	b.n	801baf8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bb1a:	2000      	movs	r0, #0
 801bb1c:	e7ec      	b.n	801baf8 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bb1e:	bf00      	nop

0801bb20 <uxr_begin_output_nack_buffer_it>:
 801bb20:	8a40      	ldrh	r0, [r0, #18]
 801bb22:	4770      	bx	lr

0801bb24 <uxr_next_reliable_nack_buffer_to_send>:
 801bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb28:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801bb2c:	b197      	cbz	r7, 801bb54 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801bb2e:	4680      	mov	r8, r0
 801bb30:	460d      	mov	r5, r1
 801bb32:	4616      	mov	r6, r2
 801bb34:	461c      	mov	r4, r3
 801bb36:	8818      	ldrh	r0, [r3, #0]
 801bb38:	2101      	movs	r1, #1
 801bb3a:	f000 f889 	bl	801bc50 <uxr_seq_num_add>
 801bb3e:	8020      	strh	r0, [r4, #0]
 801bb40:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801bb44:	f000 f88c 	bl	801bc60 <uxr_seq_num_cmp>
 801bb48:	2800      	cmp	r0, #0
 801bb4a:	dd06      	ble.n	801bb5a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	461f      	mov	r7, r3
 801bb50:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801bb54:	4638      	mov	r0, r7
 801bb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb5a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801bb5e:	8820      	ldrh	r0, [r4, #0]
 801bb60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bb64:	fbb0 f3f2 	udiv	r3, r0, r2
 801bb68:	fbb1 fcf2 	udiv	ip, r1, r2
 801bb6c:	fb02 0313 	mls	r3, r2, r3, r0
 801bb70:	b29b      	uxth	r3, r3
 801bb72:	fb03 fc0c 	mul.w	ip, r3, ip
 801bb76:	f8d8 3000 	ldr.w	r3, [r8]
 801bb7a:	f10c 0c04 	add.w	ip, ip, #4
 801bb7e:	4463      	add	r3, ip
 801bb80:	602b      	str	r3, [r5, #0]
 801bb82:	f8d8 3000 	ldr.w	r3, [r8]
 801bb86:	4463      	add	r3, ip
 801bb88:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bb8c:	6033      	str	r3, [r6, #0]
 801bb8e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d0d0      	beq.n	801bb38 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801bb96:	e7dd      	b.n	801bb54 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801bb98 <uxr_process_acknack>:
 801bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb9a:	4604      	mov	r4, r0
 801bb9c:	460e      	mov	r6, r1
 801bb9e:	4610      	mov	r0, r2
 801bba0:	2101      	movs	r1, #1
 801bba2:	f000 f859 	bl	801bc58 <uxr_seq_num_sub>
 801bba6:	8a61      	ldrh	r1, [r4, #18]
 801bba8:	f000 f856 	bl	801bc58 <uxr_seq_num_sub>
 801bbac:	b1c8      	cbz	r0, 801bbe2 <uxr_process_acknack+0x4a>
 801bbae:	4605      	mov	r5, r0
 801bbb0:	2700      	movs	r7, #0
 801bbb2:	2101      	movs	r1, #1
 801bbb4:	8a60      	ldrh	r0, [r4, #18]
 801bbb6:	f000 f84b 	bl	801bc50 <uxr_seq_num_add>
 801bbba:	8923      	ldrh	r3, [r4, #8]
 801bbbc:	6862      	ldr	r2, [r4, #4]
 801bbbe:	3701      	adds	r7, #1
 801bbc0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801bbc4:	6821      	ldr	r1, [r4, #0]
 801bbc6:	42bd      	cmp	r5, r7
 801bbc8:	8260      	strh	r0, [r4, #18]
 801bbca:	fbb0 fef3 	udiv	lr, r0, r3
 801bbce:	fbb2 f2f3 	udiv	r2, r2, r3
 801bbd2:	fb03 031e 	mls	r3, r3, lr, r0
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	fb02 f303 	mul.w	r3, r2, r3
 801bbdc:	f841 c003 	str.w	ip, [r1, r3]
 801bbe0:	d1e7      	bne.n	801bbb2 <uxr_process_acknack+0x1a>
 801bbe2:	3e00      	subs	r6, #0
 801bbe4:	f04f 0300 	mov.w	r3, #0
 801bbe8:	bf18      	it	ne
 801bbea:	2601      	movne	r6, #1
 801bbec:	f884 3020 	strb.w	r3, [r4, #32]
 801bbf0:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801bbf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbf6:	bf00      	nop

0801bbf8 <uxr_is_output_up_to_date>:
 801bbf8:	8a01      	ldrh	r1, [r0, #16]
 801bbfa:	8a40      	ldrh	r0, [r0, #18]
 801bbfc:	b508      	push	{r3, lr}
 801bbfe:	f000 f82f 	bl	801bc60 <uxr_seq_num_cmp>
 801bc02:	fab0 f080 	clz	r0, r0
 801bc06:	0940      	lsrs	r0, r0, #5
 801bc08:	bd08      	pop	{r3, pc}
 801bc0a:	bf00      	nop

0801bc0c <get_available_free_slots>:
 801bc0c:	8901      	ldrh	r1, [r0, #8]
 801bc0e:	b1e1      	cbz	r1, 801bc4a <get_available_free_slots+0x3e>
 801bc10:	6843      	ldr	r3, [r0, #4]
 801bc12:	f04f 0c00 	mov.w	ip, #0
 801bc16:	b530      	push	{r4, r5, lr}
 801bc18:	fbb3 fef1 	udiv	lr, r3, r1
 801bc1c:	6805      	ldr	r5, [r0, #0]
 801bc1e:	4662      	mov	r2, ip
 801bc20:	7b04      	ldrb	r4, [r0, #12]
 801bc22:	4660      	mov	r0, ip
 801bc24:	f10c 0c01 	add.w	ip, ip, #1
 801bc28:	fbb2 f3f1 	udiv	r3, r2, r1
 801bc2c:	fb01 2313 	mls	r3, r1, r3, r2
 801bc30:	fa1f f28c 	uxth.w	r2, ip
 801bc34:	b29b      	uxth	r3, r3
 801bc36:	fb0e f303 	mul.w	r3, lr, r3
 801bc3a:	58eb      	ldr	r3, [r5, r3]
 801bc3c:	429c      	cmp	r4, r3
 801bc3e:	d101      	bne.n	801bc44 <get_available_free_slots+0x38>
 801bc40:	3001      	adds	r0, #1
 801bc42:	b280      	uxth	r0, r0
 801bc44:	428a      	cmp	r2, r1
 801bc46:	d3ed      	bcc.n	801bc24 <get_available_free_slots+0x18>
 801bc48:	bd30      	pop	{r4, r5, pc}
 801bc4a:	4608      	mov	r0, r1
 801bc4c:	4770      	bx	lr
 801bc4e:	bf00      	nop

0801bc50 <uxr_seq_num_add>:
 801bc50:	4408      	add	r0, r1
 801bc52:	b280      	uxth	r0, r0
 801bc54:	4770      	bx	lr
 801bc56:	bf00      	nop

0801bc58 <uxr_seq_num_sub>:
 801bc58:	1a40      	subs	r0, r0, r1
 801bc5a:	b280      	uxth	r0, r0
 801bc5c:	4770      	bx	lr
 801bc5e:	bf00      	nop

0801bc60 <uxr_seq_num_cmp>:
 801bc60:	4288      	cmp	r0, r1
 801bc62:	d011      	beq.n	801bc88 <uxr_seq_num_cmp+0x28>
 801bc64:	d309      	bcc.n	801bc7a <uxr_seq_num_cmp+0x1a>
 801bc66:	4288      	cmp	r0, r1
 801bc68:	d910      	bls.n	801bc8c <uxr_seq_num_cmp+0x2c>
 801bc6a:	1a40      	subs	r0, r0, r1
 801bc6c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801bc70:	bfd4      	ite	le
 801bc72:	2001      	movle	r0, #1
 801bc74:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801bc78:	4770      	bx	lr
 801bc7a:	1a0b      	subs	r3, r1, r0
 801bc7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bc80:	daf1      	bge.n	801bc66 <uxr_seq_num_cmp+0x6>
 801bc82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bc86:	4770      	bx	lr
 801bc88:	2000      	movs	r0, #0
 801bc8a:	4770      	bx	lr
 801bc8c:	2001      	movs	r0, #1
 801bc8e:	4770      	bx	lr

0801bc90 <rcl_get_default_domain_id>:
 801bc90:	b530      	push	{r4, r5, lr}
 801bc92:	2300      	movs	r3, #0
 801bc94:	b083      	sub	sp, #12
 801bc96:	9300      	str	r3, [sp, #0]
 801bc98:	b1d0      	cbz	r0, 801bcd0 <rcl_get_default_domain_id+0x40>
 801bc9a:	4604      	mov	r4, r0
 801bc9c:	4669      	mov	r1, sp
 801bc9e:	4815      	ldr	r0, [pc, #84]	@ (801bcf4 <rcl_get_default_domain_id+0x64>)
 801bca0:	f7fd ffae 	bl	8019c00 <rcutils_get_env>
 801bca4:	4602      	mov	r2, r0
 801bca6:	b110      	cbz	r0, 801bcae <rcl_get_default_domain_id+0x1e>
 801bca8:	2001      	movs	r0, #1
 801bcaa:	b003      	add	sp, #12
 801bcac:	bd30      	pop	{r4, r5, pc}
 801bcae:	9b00      	ldr	r3, [sp, #0]
 801bcb0:	b18b      	cbz	r3, 801bcd6 <rcl_get_default_domain_id+0x46>
 801bcb2:	7818      	ldrb	r0, [r3, #0]
 801bcb4:	2800      	cmp	r0, #0
 801bcb6:	d0f8      	beq.n	801bcaa <rcl_get_default_domain_id+0x1a>
 801bcb8:	a901      	add	r1, sp, #4
 801bcba:	4618      	mov	r0, r3
 801bcbc:	9201      	str	r2, [sp, #4]
 801bcbe:	f000 fe2d 	bl	801c91c <strtoul>
 801bcc2:	4605      	mov	r5, r0
 801bcc4:	b150      	cbz	r0, 801bcdc <rcl_get_default_domain_id+0x4c>
 801bcc6:	1c43      	adds	r3, r0, #1
 801bcc8:	d00d      	beq.n	801bce6 <rcl_get_default_domain_id+0x56>
 801bcca:	2000      	movs	r0, #0
 801bccc:	6025      	str	r5, [r4, #0]
 801bcce:	e7ec      	b.n	801bcaa <rcl_get_default_domain_id+0x1a>
 801bcd0:	200b      	movs	r0, #11
 801bcd2:	b003      	add	sp, #12
 801bcd4:	bd30      	pop	{r4, r5, pc}
 801bcd6:	4618      	mov	r0, r3
 801bcd8:	b003      	add	sp, #12
 801bcda:	bd30      	pop	{r4, r5, pc}
 801bcdc:	9b01      	ldr	r3, [sp, #4]
 801bcde:	781b      	ldrb	r3, [r3, #0]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d0f2      	beq.n	801bcca <rcl_get_default_domain_id+0x3a>
 801bce4:	e7e0      	b.n	801bca8 <rcl_get_default_domain_id+0x18>
 801bce6:	f001 f953 	bl	801cf90 <__errno>
 801bcea:	6803      	ldr	r3, [r0, #0]
 801bcec:	2b22      	cmp	r3, #34	@ 0x22
 801bcee:	d1ec      	bne.n	801bcca <rcl_get_default_domain_id+0x3a>
 801bcf0:	e7da      	b.n	801bca8 <rcl_get_default_domain_id+0x18>
 801bcf2:	bf00      	nop
 801bcf4:	0801eb20 	.word	0x0801eb20

0801bcf8 <rcl_expand_topic_name>:
 801bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcfc:	b08d      	sub	sp, #52	@ 0x34
 801bcfe:	4698      	mov	r8, r3
 801bd00:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bd02:	9207      	str	r2, [sp, #28]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	bf18      	it	ne
 801bd08:	f1b8 0f00 	cmpne.w	r8, #0
 801bd0c:	bf0c      	ite	eq
 801bd0e:	2301      	moveq	r3, #1
 801bd10:	2300      	movne	r3, #0
 801bd12:	2a00      	cmp	r2, #0
 801bd14:	bf08      	it	eq
 801bd16:	f043 0301 	orreq.w	r3, r3, #1
 801bd1a:	2900      	cmp	r1, #0
 801bd1c:	bf08      	it	eq
 801bd1e:	f043 0301 	orreq.w	r3, r3, #1
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d13d      	bne.n	801bda2 <rcl_expand_topic_name+0xaa>
 801bd26:	fab0 f280 	clz	r2, r0
 801bd2a:	4604      	mov	r4, r0
 801bd2c:	0952      	lsrs	r2, r2, #5
 801bd2e:	2800      	cmp	r0, #0
 801bd30:	d037      	beq.n	801bda2 <rcl_expand_topic_name+0xaa>
 801bd32:	460f      	mov	r7, r1
 801bd34:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd36:	f000 fa51 	bl	801c1dc <rcl_validate_topic_name>
 801bd3a:	4605      	mov	r5, r0
 801bd3c:	bb68      	cbnz	r0, 801bd9a <rcl_expand_topic_name+0xa2>
 801bd3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d137      	bne.n	801bdb4 <rcl_expand_topic_name+0xbc>
 801bd44:	4602      	mov	r2, r0
 801bd46:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd48:	4638      	mov	r0, r7
 801bd4a:	f7fe fbbb 	bl	801a4c4 <rmw_validate_node_name>
 801bd4e:	bb68      	cbnz	r0, 801bdac <rcl_expand_topic_name+0xb4>
 801bd50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d133      	bne.n	801bdbe <rcl_expand_topic_name+0xc6>
 801bd56:	462a      	mov	r2, r5
 801bd58:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd5a:	9807      	ldr	r0, [sp, #28]
 801bd5c:	f7fe fb94 	bl	801a488 <rmw_validate_namespace>
 801bd60:	bb20      	cbnz	r0, 801bdac <rcl_expand_topic_name+0xb4>
 801bd62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bd64:	2d00      	cmp	r5, #0
 801bd66:	f040 80a2 	bne.w	801beae <rcl_expand_topic_name+0x1b6>
 801bd6a:	217b      	movs	r1, #123	@ 0x7b
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	f001 f883 	bl	801ce78 <strchr>
 801bd72:	7823      	ldrb	r3, [r4, #0]
 801bd74:	4681      	mov	r9, r0
 801bd76:	bb20      	cbnz	r0, 801bdc2 <rcl_expand_topic_name+0xca>
 801bd78:	2b2f      	cmp	r3, #47	@ 0x2f
 801bd7a:	d122      	bne.n	801bdc2 <rcl_expand_topic_name+0xca>
 801bd7c:	ab19      	add	r3, sp, #100	@ 0x64
 801bd7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bd82:	ab16      	add	r3, sp, #88	@ 0x58
 801bd84:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bd88:	4620      	mov	r0, r4
 801bd8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bd8c:	f7fe f89a 	bl	8019ec4 <rcutils_strdup>
 801bd90:	2800      	cmp	r0, #0
 801bd92:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bd94:	bf08      	it	eq
 801bd96:	250a      	moveq	r5, #10
 801bd98:	6018      	str	r0, [r3, #0]
 801bd9a:	4628      	mov	r0, r5
 801bd9c:	b00d      	add	sp, #52	@ 0x34
 801bd9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bda2:	250b      	movs	r5, #11
 801bda4:	4628      	mov	r0, r5
 801bda6:	b00d      	add	sp, #52	@ 0x34
 801bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdac:	f7fb f8e2 	bl	8016f74 <rcl_convert_rmw_ret_to_rcl_ret>
 801bdb0:	4605      	mov	r5, r0
 801bdb2:	e7f2      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801bdb4:	2567      	movs	r5, #103	@ 0x67
 801bdb6:	4628      	mov	r0, r5
 801bdb8:	b00d      	add	sp, #52	@ 0x34
 801bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdbe:	25c9      	movs	r5, #201	@ 0xc9
 801bdc0:	e7eb      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801bdc2:	2b7e      	cmp	r3, #126	@ 0x7e
 801bdc4:	d075      	beq.n	801beb2 <rcl_expand_topic_name+0x1ba>
 801bdc6:	f1b9 0f00 	cmp.w	r9, #0
 801bdca:	f000 80c2 	beq.w	801bf52 <rcl_expand_topic_name+0x25a>
 801bdce:	2300      	movs	r3, #0
 801bdd0:	46a2      	mov	sl, r4
 801bdd2:	461e      	mov	r6, r3
 801bdd4:	9508      	str	r5, [sp, #32]
 801bdd6:	4655      	mov	r5, sl
 801bdd8:	9409      	str	r4, [sp, #36]	@ 0x24
 801bdda:	46b2      	mov	sl, r6
 801bddc:	464c      	mov	r4, r9
 801bdde:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bde2:	2c00      	cmp	r4, #0
 801bde4:	f000 80ae 	beq.w	801bf44 <rcl_expand_topic_name+0x24c>
 801bde8:	217d      	movs	r1, #125	@ 0x7d
 801bdea:	4628      	mov	r0, r5
 801bdec:	f001 f844 	bl	801ce78 <strchr>
 801bdf0:	eba0 0904 	sub.w	r9, r0, r4
 801bdf4:	4621      	mov	r1, r4
 801bdf6:	4869      	ldr	r0, [pc, #420]	@ (801bf9c <rcl_expand_topic_name+0x2a4>)
 801bdf8:	f109 0601 	add.w	r6, r9, #1
 801bdfc:	4632      	mov	r2, r6
 801bdfe:	f001 f848 	bl	801ce92 <strncmp>
 801be02:	2800      	cmp	r0, #0
 801be04:	d051      	beq.n	801beaa <rcl_expand_topic_name+0x1b2>
 801be06:	4632      	mov	r2, r6
 801be08:	4621      	mov	r1, r4
 801be0a:	4865      	ldr	r0, [pc, #404]	@ (801bfa0 <rcl_expand_topic_name+0x2a8>)
 801be0c:	f001 f841 	bl	801ce92 <strncmp>
 801be10:	b128      	cbz	r0, 801be1e <rcl_expand_topic_name+0x126>
 801be12:	4632      	mov	r2, r6
 801be14:	4621      	mov	r1, r4
 801be16:	4863      	ldr	r0, [pc, #396]	@ (801bfa4 <rcl_expand_topic_name+0x2ac>)
 801be18:	f001 f83b 	bl	801ce92 <strncmp>
 801be1c:	bb38      	cbnz	r0, 801be6e <rcl_expand_topic_name+0x176>
 801be1e:	46d9      	mov	r9, fp
 801be20:	ab18      	add	r3, sp, #96	@ 0x60
 801be22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801be26:	ab16      	add	r3, sp, #88	@ 0x58
 801be28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be2c:	4620      	mov	r0, r4
 801be2e:	4631      	mov	r1, r6
 801be30:	cb0c      	ldmia	r3, {r2, r3}
 801be32:	f7fe f869 	bl	8019f08 <rcutils_strndup>
 801be36:	4604      	mov	r4, r0
 801be38:	2800      	cmp	r0, #0
 801be3a:	f000 80a3 	beq.w	801bf84 <rcl_expand_topic_name+0x28c>
 801be3e:	464a      	mov	r2, r9
 801be40:	4628      	mov	r0, r5
 801be42:	ab16      	add	r3, sp, #88	@ 0x58
 801be44:	4621      	mov	r1, r4
 801be46:	f7fd ff3d 	bl	8019cc4 <rcutils_repl_str>
 801be4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be4c:	4605      	mov	r5, r0
 801be4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be50:	4620      	mov	r0, r4
 801be52:	4798      	blx	r3
 801be54:	4650      	mov	r0, sl
 801be56:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be5a:	4798      	blx	r3
 801be5c:	2d00      	cmp	r5, #0
 801be5e:	d06c      	beq.n	801bf3a <rcl_expand_topic_name+0x242>
 801be60:	217b      	movs	r1, #123	@ 0x7b
 801be62:	4628      	mov	r0, r5
 801be64:	f001 f808 	bl	801ce78 <strchr>
 801be68:	46aa      	mov	sl, r5
 801be6a:	4604      	mov	r4, r0
 801be6c:	e7b9      	b.n	801bde2 <rcl_expand_topic_name+0xea>
 801be6e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801be72:	1c61      	adds	r1, r4, #1
 801be74:	4640      	mov	r0, r8
 801be76:	f7fe f95f 	bl	801a138 <rcutils_string_map_getn>
 801be7a:	4681      	mov	r9, r0
 801be7c:	2800      	cmp	r0, #0
 801be7e:	d1cf      	bne.n	801be20 <rcl_expand_topic_name+0x128>
 801be80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801be82:	aa18      	add	r2, sp, #96	@ 0x60
 801be84:	2569      	movs	r5, #105	@ 0x69
 801be86:	6018      	str	r0, [r3, #0]
 801be88:	ab16      	add	r3, sp, #88	@ 0x58
 801be8a:	ca07      	ldmia	r2, {r0, r1, r2}
 801be8c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be90:	4631      	mov	r1, r6
 801be92:	4620      	mov	r0, r4
 801be94:	cb0c      	ldmia	r3, {r2, r3}
 801be96:	f7fe f837 	bl	8019f08 <rcutils_strndup>
 801be9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be9e:	4798      	blx	r3
 801bea0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bea2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bea4:	4650      	mov	r0, sl
 801bea6:	4798      	blx	r3
 801bea8:	e777      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801beaa:	46b9      	mov	r9, r7
 801beac:	e7b8      	b.n	801be20 <rcl_expand_topic_name+0x128>
 801beae:	25ca      	movs	r5, #202	@ 0xca
 801beb0:	e773      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801beb2:	9e07      	ldr	r6, [sp, #28]
 801beb4:	4630      	mov	r0, r6
 801beb6:	f7e4 fa1d 	bl	80002f4 <strlen>
 801beba:	4a3b      	ldr	r2, [pc, #236]	@ (801bfa8 <rcl_expand_topic_name+0x2b0>)
 801bebc:	4b3b      	ldr	r3, [pc, #236]	@ (801bfac <rcl_expand_topic_name+0x2b4>)
 801bebe:	9603      	str	r6, [sp, #12]
 801bec0:	2801      	cmp	r0, #1
 801bec2:	bf18      	it	ne
 801bec4:	4613      	movne	r3, r2
 801bec6:	9704      	str	r7, [sp, #16]
 801bec8:	9302      	str	r3, [sp, #8]
 801beca:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801becc:	9300      	str	r3, [sp, #0]
 801bece:	1c63      	adds	r3, r4, #1
 801bed0:	9305      	str	r3, [sp, #20]
 801bed2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bed6:	9301      	str	r3, [sp, #4]
 801bed8:	ab16      	add	r3, sp, #88	@ 0x58
 801beda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bedc:	f7fd feb8 	bl	8019c50 <rcutils_format_string_limit>
 801bee0:	4606      	mov	r6, r0
 801bee2:	b350      	cbz	r0, 801bf3a <rcl_expand_topic_name+0x242>
 801bee4:	f1b9 0f00 	cmp.w	r9, #0
 801bee8:	d005      	beq.n	801bef6 <rcl_expand_topic_name+0x1fe>
 801beea:	217b      	movs	r1, #123	@ 0x7b
 801beec:	46b2      	mov	sl, r6
 801beee:	f000 ffc3 	bl	801ce78 <strchr>
 801bef2:	4681      	mov	r9, r0
 801bef4:	e76e      	b.n	801bdd4 <rcl_expand_topic_name+0xdc>
 801bef6:	7833      	ldrb	r3, [r6, #0]
 801bef8:	2b2f      	cmp	r3, #47	@ 0x2f
 801befa:	d01b      	beq.n	801bf34 <rcl_expand_topic_name+0x23c>
 801befc:	9c07      	ldr	r4, [sp, #28]
 801befe:	4620      	mov	r0, r4
 801bf00:	f7e4 f9f8 	bl	80002f4 <strlen>
 801bf04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf08:	4a29      	ldr	r2, [pc, #164]	@ (801bfb0 <rcl_expand_topic_name+0x2b8>)
 801bf0a:	9301      	str	r3, [sp, #4]
 801bf0c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801bf0e:	9604      	str	r6, [sp, #16]
 801bf10:	9300      	str	r3, [sp, #0]
 801bf12:	4b28      	ldr	r3, [pc, #160]	@ (801bfb4 <rcl_expand_topic_name+0x2bc>)
 801bf14:	9403      	str	r4, [sp, #12]
 801bf16:	2801      	cmp	r0, #1
 801bf18:	bf18      	it	ne
 801bf1a:	4613      	movne	r3, r2
 801bf1c:	9302      	str	r3, [sp, #8]
 801bf1e:	ab16      	add	r3, sp, #88	@ 0x58
 801bf20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf22:	f7fd fe95 	bl	8019c50 <rcutils_format_string_limit>
 801bf26:	4603      	mov	r3, r0
 801bf28:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801bf2a:	4630      	mov	r0, r6
 801bf2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bf2e:	461e      	mov	r6, r3
 801bf30:	4790      	blx	r2
 801bf32:	b116      	cbz	r6, 801bf3a <rcl_expand_topic_name+0x242>
 801bf34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bf36:	601e      	str	r6, [r3, #0]
 801bf38:	e72f      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bf3e:	250a      	movs	r5, #10
 801bf40:	6013      	str	r3, [r2, #0]
 801bf42:	e72a      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801bf44:	4653      	mov	r3, sl
 801bf46:	4656      	mov	r6, sl
 801bf48:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d1d2      	bne.n	801bef6 <rcl_expand_topic_name+0x1fe>
 801bf50:	7823      	ldrb	r3, [r4, #0]
 801bf52:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf54:	d01e      	beq.n	801bf94 <rcl_expand_topic_name+0x29c>
 801bf56:	9e07      	ldr	r6, [sp, #28]
 801bf58:	4630      	mov	r0, r6
 801bf5a:	f7e4 f9cb 	bl	80002f4 <strlen>
 801bf5e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bf60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf64:	9603      	str	r6, [sp, #12]
 801bf66:	9404      	str	r4, [sp, #16]
 801bf68:	e9cd 2300 	strd	r2, r3, [sp]
 801bf6c:	4a10      	ldr	r2, [pc, #64]	@ (801bfb0 <rcl_expand_topic_name+0x2b8>)
 801bf6e:	4b11      	ldr	r3, [pc, #68]	@ (801bfb4 <rcl_expand_topic_name+0x2bc>)
 801bf70:	2801      	cmp	r0, #1
 801bf72:	bf18      	it	ne
 801bf74:	4613      	movne	r3, r2
 801bf76:	9302      	str	r3, [sp, #8]
 801bf78:	ab16      	add	r3, sp, #88	@ 0x58
 801bf7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf7c:	f7fd fe68 	bl	8019c50 <rcutils_format_string_limit>
 801bf80:	4606      	mov	r6, r0
 801bf82:	e7d6      	b.n	801bf32 <rcl_expand_topic_name+0x23a>
 801bf84:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801bf88:	4650      	mov	r0, sl
 801bf8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bf8c:	6014      	str	r4, [r2, #0]
 801bf8e:	250a      	movs	r5, #10
 801bf90:	4798      	blx	r3
 801bf92:	e702      	b.n	801bd9a <rcl_expand_topic_name+0xa2>
 801bf94:	2300      	movs	r3, #0
 801bf96:	461e      	mov	r6, r3
 801bf98:	e7cc      	b.n	801bf34 <rcl_expand_topic_name+0x23c>
 801bf9a:	bf00      	nop
 801bf9c:	0801eb38 	.word	0x0801eb38
 801bfa0:	0801eb40 	.word	0x0801eb40
 801bfa4:	0801eb48 	.word	0x0801eb48
 801bfa8:	0801eb30 	.word	0x0801eb30
 801bfac:	0801df28 	.word	0x0801df28
 801bfb0:	0801def0 	.word	0x0801def0
 801bfb4:	0801df38 	.word	0x0801df38

0801bfb8 <rcl_get_default_topic_name_substitutions>:
 801bfb8:	2800      	cmp	r0, #0
 801bfba:	bf0c      	ite	eq
 801bfbc:	200b      	moveq	r0, #11
 801bfbe:	2000      	movne	r0, #0
 801bfc0:	4770      	bx	lr
 801bfc2:	bf00      	nop

0801bfc4 <rcl_get_zero_initialized_guard_condition>:
 801bfc4:	4a03      	ldr	r2, [pc, #12]	@ (801bfd4 <rcl_get_zero_initialized_guard_condition+0x10>)
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bfcc:	e883 0003 	stmia.w	r3, {r0, r1}
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	4770      	bx	lr
 801bfd4:	0801eb54 	.word	0x0801eb54

0801bfd8 <rcl_guard_condition_init>:
 801bfd8:	b082      	sub	sp, #8
 801bfda:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfdc:	b087      	sub	sp, #28
 801bfde:	4604      	mov	r4, r0
 801bfe0:	460d      	mov	r5, r1
 801bfe2:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801bfe6:	f10d 0c04 	add.w	ip, sp, #4
 801bfea:	e9ce 2300 	strd	r2, r3, [lr]
 801bfee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bff2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bff6:	f8de 3000 	ldr.w	r3, [lr]
 801bffa:	a801      	add	r0, sp, #4
 801bffc:	f8cc 3000 	str.w	r3, [ip]
 801c000:	f7f3 fec2 	bl	800fd88 <rcutils_allocator_is_valid>
 801c004:	b354      	cbz	r4, 801c05c <rcl_guard_condition_init+0x84>
 801c006:	f080 0301 	eor.w	r3, r0, #1
 801c00a:	b2db      	uxtb	r3, r3
 801c00c:	bb33      	cbnz	r3, 801c05c <rcl_guard_condition_init+0x84>
 801c00e:	6866      	ldr	r6, [r4, #4]
 801c010:	b9ee      	cbnz	r6, 801c04e <rcl_guard_condition_init+0x76>
 801c012:	b31d      	cbz	r5, 801c05c <rcl_guard_condition_init+0x84>
 801c014:	4628      	mov	r0, r5
 801c016:	f7fa ffcb 	bl	8016fb0 <rcl_context_is_valid>
 801c01a:	b308      	cbz	r0, 801c060 <rcl_guard_condition_init+0x88>
 801c01c:	9b01      	ldr	r3, [sp, #4]
 801c01e:	201c      	movs	r0, #28
 801c020:	9905      	ldr	r1, [sp, #20]
 801c022:	4798      	blx	r3
 801c024:	4607      	mov	r7, r0
 801c026:	6060      	str	r0, [r4, #4]
 801c028:	b310      	cbz	r0, 801c070 <rcl_guard_condition_init+0x98>
 801c02a:	6828      	ldr	r0, [r5, #0]
 801c02c:	3028      	adds	r0, #40	@ 0x28
 801c02e:	f000 f999 	bl	801c364 <rmw_create_guard_condition>
 801c032:	6038      	str	r0, [r7, #0]
 801c034:	6860      	ldr	r0, [r4, #4]
 801c036:	6807      	ldr	r7, [r0, #0]
 801c038:	b1a7      	cbz	r7, 801c064 <rcl_guard_condition_init+0x8c>
 801c03a:	2301      	movs	r3, #1
 801c03c:	ac01      	add	r4, sp, #4
 801c03e:	f100 0708 	add.w	r7, r0, #8
 801c042:	7103      	strb	r3, [r0, #4]
 801c044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c046:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c048:	6823      	ldr	r3, [r4, #0]
 801c04a:	603b      	str	r3, [r7, #0]
 801c04c:	e000      	b.n	801c050 <rcl_guard_condition_init+0x78>
 801c04e:	2664      	movs	r6, #100	@ 0x64
 801c050:	4630      	mov	r0, r6
 801c052:	b007      	add	sp, #28
 801c054:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c058:	b002      	add	sp, #8
 801c05a:	4770      	bx	lr
 801c05c:	260b      	movs	r6, #11
 801c05e:	e7f7      	b.n	801c050 <rcl_guard_condition_init+0x78>
 801c060:	2665      	movs	r6, #101	@ 0x65
 801c062:	e7f5      	b.n	801c050 <rcl_guard_condition_init+0x78>
 801c064:	9b02      	ldr	r3, [sp, #8]
 801c066:	2601      	movs	r6, #1
 801c068:	9905      	ldr	r1, [sp, #20]
 801c06a:	4798      	blx	r3
 801c06c:	6067      	str	r7, [r4, #4]
 801c06e:	e7ef      	b.n	801c050 <rcl_guard_condition_init+0x78>
 801c070:	260a      	movs	r6, #10
 801c072:	e7ed      	b.n	801c050 <rcl_guard_condition_init+0x78>

0801c074 <rcl_guard_condition_init_from_rmw>:
 801c074:	b082      	sub	sp, #8
 801c076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c07a:	b086      	sub	sp, #24
 801c07c:	4604      	mov	r4, r0
 801c07e:	460e      	mov	r6, r1
 801c080:	4615      	mov	r5, r2
 801c082:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c086:	f10d 0e04 	add.w	lr, sp, #4
 801c08a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801c08e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c092:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c096:	f8dc 3000 	ldr.w	r3, [ip]
 801c09a:	a801      	add	r0, sp, #4
 801c09c:	f8ce 3000 	str.w	r3, [lr]
 801c0a0:	f7f3 fe72 	bl	800fd88 <rcutils_allocator_is_valid>
 801c0a4:	f080 0301 	eor.w	r3, r0, #1
 801c0a8:	b2db      	uxtb	r3, r3
 801c0aa:	bb3b      	cbnz	r3, 801c0fc <rcl_guard_condition_init_from_rmw+0x88>
 801c0ac:	b334      	cbz	r4, 801c0fc <rcl_guard_condition_init_from_rmw+0x88>
 801c0ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801c0b2:	f1b8 0f00 	cmp.w	r8, #0
 801c0b6:	d11a      	bne.n	801c0ee <rcl_guard_condition_init_from_rmw+0x7a>
 801c0b8:	b305      	cbz	r5, 801c0fc <rcl_guard_condition_init_from_rmw+0x88>
 801c0ba:	4628      	mov	r0, r5
 801c0bc:	f7fa ff78 	bl	8016fb0 <rcl_context_is_valid>
 801c0c0:	b1f0      	cbz	r0, 801c100 <rcl_guard_condition_init_from_rmw+0x8c>
 801c0c2:	9b01      	ldr	r3, [sp, #4]
 801c0c4:	201c      	movs	r0, #28
 801c0c6:	9905      	ldr	r1, [sp, #20]
 801c0c8:	4798      	blx	r3
 801c0ca:	4607      	mov	r7, r0
 801c0cc:	6060      	str	r0, [r4, #4]
 801c0ce:	b320      	cbz	r0, 801c11a <rcl_guard_condition_init_from_rmw+0xa6>
 801c0d0:	b1c6      	cbz	r6, 801c104 <rcl_guard_condition_init_from_rmw+0x90>
 801c0d2:	6006      	str	r6, [r0, #0]
 801c0d4:	f880 8004 	strb.w	r8, [r0, #4]
 801c0d8:	ac01      	add	r4, sp, #4
 801c0da:	f107 0c08 	add.w	ip, r7, #8
 801c0de:	2500      	movs	r5, #0
 801c0e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c0e6:	6823      	ldr	r3, [r4, #0]
 801c0e8:	f8cc 3000 	str.w	r3, [ip]
 801c0ec:	e000      	b.n	801c0f0 <rcl_guard_condition_init_from_rmw+0x7c>
 801c0ee:	2564      	movs	r5, #100	@ 0x64
 801c0f0:	4628      	mov	r0, r5
 801c0f2:	b006      	add	sp, #24
 801c0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c0f8:	b002      	add	sp, #8
 801c0fa:	4770      	bx	lr
 801c0fc:	250b      	movs	r5, #11
 801c0fe:	e7f7      	b.n	801c0f0 <rcl_guard_condition_init_from_rmw+0x7c>
 801c100:	2565      	movs	r5, #101	@ 0x65
 801c102:	e7f5      	b.n	801c0f0 <rcl_guard_condition_init_from_rmw+0x7c>
 801c104:	6828      	ldr	r0, [r5, #0]
 801c106:	3028      	adds	r0, #40	@ 0x28
 801c108:	f000 f92c 	bl	801c364 <rmw_create_guard_condition>
 801c10c:	6038      	str	r0, [r7, #0]
 801c10e:	6867      	ldr	r7, [r4, #4]
 801c110:	683e      	ldr	r6, [r7, #0]
 801c112:	b126      	cbz	r6, 801c11e <rcl_guard_condition_init_from_rmw+0xaa>
 801c114:	2301      	movs	r3, #1
 801c116:	713b      	strb	r3, [r7, #4]
 801c118:	e7de      	b.n	801c0d8 <rcl_guard_condition_init_from_rmw+0x64>
 801c11a:	250a      	movs	r5, #10
 801c11c:	e7e8      	b.n	801c0f0 <rcl_guard_condition_init_from_rmw+0x7c>
 801c11e:	9b02      	ldr	r3, [sp, #8]
 801c120:	4638      	mov	r0, r7
 801c122:	9905      	ldr	r1, [sp, #20]
 801c124:	2501      	movs	r5, #1
 801c126:	4798      	blx	r3
 801c128:	6066      	str	r6, [r4, #4]
 801c12a:	e7e1      	b.n	801c0f0 <rcl_guard_condition_init_from_rmw+0x7c>

0801c12c <rcl_guard_condition_fini>:
 801c12c:	b570      	push	{r4, r5, r6, lr}
 801c12e:	b082      	sub	sp, #8
 801c130:	b1f0      	cbz	r0, 801c170 <rcl_guard_condition_fini+0x44>
 801c132:	6843      	ldr	r3, [r0, #4]
 801c134:	4604      	mov	r4, r0
 801c136:	b163      	cbz	r3, 801c152 <rcl_guard_condition_fini+0x26>
 801c138:	6818      	ldr	r0, [r3, #0]
 801c13a:	68de      	ldr	r6, [r3, #12]
 801c13c:	6999      	ldr	r1, [r3, #24]
 801c13e:	b160      	cbz	r0, 801c15a <rcl_guard_condition_fini+0x2e>
 801c140:	791d      	ldrb	r5, [r3, #4]
 801c142:	b965      	cbnz	r5, 801c15e <rcl_guard_condition_fini+0x32>
 801c144:	4618      	mov	r0, r3
 801c146:	47b0      	blx	r6
 801c148:	2300      	movs	r3, #0
 801c14a:	4628      	mov	r0, r5
 801c14c:	6063      	str	r3, [r4, #4]
 801c14e:	b002      	add	sp, #8
 801c150:	bd70      	pop	{r4, r5, r6, pc}
 801c152:	461d      	mov	r5, r3
 801c154:	4628      	mov	r0, r5
 801c156:	b002      	add	sp, #8
 801c158:	bd70      	pop	{r4, r5, r6, pc}
 801c15a:	4605      	mov	r5, r0
 801c15c:	e7f2      	b.n	801c144 <rcl_guard_condition_fini+0x18>
 801c15e:	9101      	str	r1, [sp, #4]
 801c160:	f000 f916 	bl	801c390 <rmw_destroy_guard_condition>
 801c164:	1e05      	subs	r5, r0, #0
 801c166:	6863      	ldr	r3, [r4, #4]
 801c168:	9901      	ldr	r1, [sp, #4]
 801c16a:	bf18      	it	ne
 801c16c:	2501      	movne	r5, #1
 801c16e:	e7e9      	b.n	801c144 <rcl_guard_condition_fini+0x18>
 801c170:	250b      	movs	r5, #11
 801c172:	4628      	mov	r0, r5
 801c174:	b002      	add	sp, #8
 801c176:	bd70      	pop	{r4, r5, r6, pc}

0801c178 <rcl_guard_condition_get_default_options>:
 801c178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c17a:	b087      	sub	sp, #28
 801c17c:	4606      	mov	r6, r0
 801c17e:	4c0b      	ldr	r4, [pc, #44]	@ (801c1ac <rcl_guard_condition_get_default_options+0x34>)
 801c180:	4668      	mov	r0, sp
 801c182:	f7f3 fdf3 	bl	800fd6c <rcutils_get_default_allocator>
 801c186:	46ee      	mov	lr, sp
 801c188:	46a4      	mov	ip, r4
 801c18a:	4625      	mov	r5, r4
 801c18c:	4634      	mov	r4, r6
 801c18e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c192:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c198:	f8de 7000 	ldr.w	r7, [lr]
 801c19c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c19e:	4630      	mov	r0, r6
 801c1a0:	f8cc 7000 	str.w	r7, [ip]
 801c1a4:	6027      	str	r7, [r4, #0]
 801c1a6:	b007      	add	sp, #28
 801c1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1aa:	bf00      	nop
 801c1ac:	24013960 	.word	0x24013960

0801c1b0 <rcl_trigger_guard_condition>:
 801c1b0:	b148      	cbz	r0, 801c1c6 <rcl_trigger_guard_condition+0x16>
 801c1b2:	b508      	push	{r3, lr}
 801c1b4:	6843      	ldr	r3, [r0, #4]
 801c1b6:	b143      	cbz	r3, 801c1ca <rcl_trigger_guard_condition+0x1a>
 801c1b8:	6818      	ldr	r0, [r3, #0]
 801c1ba:	f000 f8fd 	bl	801c3b8 <rmw_trigger_guard_condition>
 801c1be:	3800      	subs	r0, #0
 801c1c0:	bf18      	it	ne
 801c1c2:	2001      	movne	r0, #1
 801c1c4:	bd08      	pop	{r3, pc}
 801c1c6:	200b      	movs	r0, #11
 801c1c8:	4770      	bx	lr
 801c1ca:	200b      	movs	r0, #11
 801c1cc:	bd08      	pop	{r3, pc}
 801c1ce:	bf00      	nop

0801c1d0 <rcl_guard_condition_get_rmw_handle>:
 801c1d0:	b110      	cbz	r0, 801c1d8 <rcl_guard_condition_get_rmw_handle+0x8>
 801c1d2:	6840      	ldr	r0, [r0, #4]
 801c1d4:	b100      	cbz	r0, 801c1d8 <rcl_guard_condition_get_rmw_handle+0x8>
 801c1d6:	6800      	ldr	r0, [r0, #0]
 801c1d8:	4770      	bx	lr
 801c1da:	bf00      	nop

0801c1dc <rcl_validate_topic_name>:
 801c1dc:	2800      	cmp	r0, #0
 801c1de:	f000 8089 	beq.w	801c2f4 <rcl_validate_topic_name+0x118>
 801c1e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c1e6:	460e      	mov	r6, r1
 801c1e8:	2900      	cmp	r1, #0
 801c1ea:	f000 8085 	beq.w	801c2f8 <rcl_validate_topic_name+0x11c>
 801c1ee:	4604      	mov	r4, r0
 801c1f0:	4617      	mov	r7, r2
 801c1f2:	f7e4 f87f 	bl	80002f4 <strlen>
 801c1f6:	b1b0      	cbz	r0, 801c226 <rcl_validate_topic_name+0x4a>
 801c1f8:	f894 e000 	ldrb.w	lr, [r4]
 801c1fc:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801c360 <rcl_validate_topic_name+0x184>
 801c200:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801c204:	f013 0304 	ands.w	r3, r3, #4
 801c208:	d139      	bne.n	801c27e <rcl_validate_topic_name+0xa2>
 801c20a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801c20e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801c212:	2a2f      	cmp	r2, #47	@ 0x2f
 801c214:	d10f      	bne.n	801c236 <rcl_validate_topic_name+0x5a>
 801c216:	2202      	movs	r2, #2
 801c218:	6032      	str	r2, [r6, #0]
 801c21a:	b3a7      	cbz	r7, 801c286 <rcl_validate_topic_name+0xaa>
 801c21c:	4618      	mov	r0, r3
 801c21e:	f8c7 8000 	str.w	r8, [r7]
 801c222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c226:	2301      	movs	r3, #1
 801c228:	6033      	str	r3, [r6, #0]
 801c22a:	b367      	cbz	r7, 801c286 <rcl_validate_topic_name+0xaa>
 801c22c:	2300      	movs	r3, #0
 801c22e:	4618      	mov	r0, r3
 801c230:	603b      	str	r3, [r7, #0]
 801c232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c236:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801c23a:	461d      	mov	r5, r3
 801c23c:	4619      	mov	r1, r3
 801c23e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801c242:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801c246:	f1b9 0f09 	cmp.w	r9, #9
 801c24a:	d91f      	bls.n	801c28c <rcl_validate_topic_name+0xb0>
 801c24c:	f022 0920 	bic.w	r9, r2, #32
 801c250:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801c254:	f1b9 0f19 	cmp.w	r9, #25
 801c258:	d918      	bls.n	801c28c <rcl_validate_topic_name+0xb0>
 801c25a:	2a5f      	cmp	r2, #95	@ 0x5f
 801c25c:	d024      	beq.n	801c2a8 <rcl_validate_topic_name+0xcc>
 801c25e:	2a2f      	cmp	r2, #47	@ 0x2f
 801c260:	d058      	beq.n	801c314 <rcl_validate_topic_name+0x138>
 801c262:	2a7e      	cmp	r2, #126	@ 0x7e
 801c264:	d04a      	beq.n	801c2fc <rcl_validate_topic_name+0x120>
 801c266:	2a7b      	cmp	r2, #123	@ 0x7b
 801c268:	d05b      	beq.n	801c322 <rcl_validate_topic_name+0x146>
 801c26a:	2a7d      	cmp	r2, #125	@ 0x7d
 801c26c:	d169      	bne.n	801c342 <rcl_validate_topic_name+0x166>
 801c26e:	2d00      	cmp	r5, #0
 801c270:	d15c      	bne.n	801c32c <rcl_validate_topic_name+0x150>
 801c272:	2305      	movs	r3, #5
 801c274:	6033      	str	r3, [r6, #0]
 801c276:	b137      	cbz	r7, 801c286 <rcl_validate_topic_name+0xaa>
 801c278:	2000      	movs	r0, #0
 801c27a:	6039      	str	r1, [r7, #0]
 801c27c:	e7d9      	b.n	801c232 <rcl_validate_topic_name+0x56>
 801c27e:	2304      	movs	r3, #4
 801c280:	6033      	str	r3, [r6, #0]
 801c282:	2f00      	cmp	r7, #0
 801c284:	d1d2      	bne.n	801c22c <rcl_validate_topic_name+0x50>
 801c286:	2000      	movs	r0, #0
 801c288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c28c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c290:	0752      	lsls	r2, r2, #29
 801c292:	d509      	bpl.n	801c2a8 <rcl_validate_topic_name+0xcc>
 801c294:	2900      	cmp	r1, #0
 801c296:	bf0c      	ite	eq
 801c298:	2200      	moveq	r2, #0
 801c29a:	f005 0201 	andne.w	r2, r5, #1
 801c29e:	b11a      	cbz	r2, 801c2a8 <rcl_validate_topic_name+0xcc>
 801c2a0:	1e4d      	subs	r5, r1, #1
 801c2a2:	429d      	cmp	r5, r3
 801c2a4:	d031      	beq.n	801c30a <rcl_validate_topic_name+0x12e>
 801c2a6:	4615      	mov	r5, r2
 801c2a8:	3101      	adds	r1, #1
 801c2aa:	4288      	cmp	r0, r1
 801c2ac:	d1c7      	bne.n	801c23e <rcl_validate_topic_name+0x62>
 801c2ae:	2d00      	cmp	r5, #0
 801c2b0:	d142      	bne.n	801c338 <rcl_validate_topic_name+0x15c>
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	2301      	movs	r3, #1
 801c2b6:	e00c      	b.n	801c2d2 <rcl_validate_topic_name+0xf6>
 801c2b8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801c2bc:	d101      	bne.n	801c2c2 <rcl_validate_topic_name+0xe6>
 801c2be:	2801      	cmp	r0, #1
 801c2c0:	d047      	beq.n	801c352 <rcl_validate_topic_name+0x176>
 801c2c2:	1c5a      	adds	r2, r3, #1
 801c2c4:	428b      	cmp	r3, r1
 801c2c6:	f100 0001 	add.w	r0, r0, #1
 801c2ca:	f104 0401 	add.w	r4, r4, #1
 801c2ce:	4613      	mov	r3, r2
 801c2d0:	d22e      	bcs.n	801c330 <rcl_validate_topic_name+0x154>
 801c2d2:	4580      	cmp	r8, r0
 801c2d4:	d0f5      	beq.n	801c2c2 <rcl_validate_topic_name+0xe6>
 801c2d6:	7822      	ldrb	r2, [r4, #0]
 801c2d8:	2a2f      	cmp	r2, #47	@ 0x2f
 801c2da:	d1ed      	bne.n	801c2b8 <rcl_validate_topic_name+0xdc>
 801c2dc:	7862      	ldrb	r2, [r4, #1]
 801c2de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c2e2:	0752      	lsls	r2, r2, #29
 801c2e4:	d5ed      	bpl.n	801c2c2 <rcl_validate_topic_name+0xe6>
 801c2e6:	2204      	movs	r2, #4
 801c2e8:	6032      	str	r2, [r6, #0]
 801c2ea:	2f00      	cmp	r7, #0
 801c2ec:	d0cb      	beq.n	801c286 <rcl_validate_topic_name+0xaa>
 801c2ee:	2000      	movs	r0, #0
 801c2f0:	603b      	str	r3, [r7, #0]
 801c2f2:	e79e      	b.n	801c232 <rcl_validate_topic_name+0x56>
 801c2f4:	200b      	movs	r0, #11
 801c2f6:	4770      	bx	lr
 801c2f8:	200b      	movs	r0, #11
 801c2fa:	e79a      	b.n	801c232 <rcl_validate_topic_name+0x56>
 801c2fc:	2900      	cmp	r1, #0
 801c2fe:	d0d3      	beq.n	801c2a8 <rcl_validate_topic_name+0xcc>
 801c300:	2306      	movs	r3, #6
 801c302:	6033      	str	r3, [r6, #0]
 801c304:	2f00      	cmp	r7, #0
 801c306:	d1b7      	bne.n	801c278 <rcl_validate_topic_name+0x9c>
 801c308:	e7bd      	b.n	801c286 <rcl_validate_topic_name+0xaa>
 801c30a:	2309      	movs	r3, #9
 801c30c:	6033      	str	r3, [r6, #0]
 801c30e:	2f00      	cmp	r7, #0
 801c310:	d1b2      	bne.n	801c278 <rcl_validate_topic_name+0x9c>
 801c312:	e7b8      	b.n	801c286 <rcl_validate_topic_name+0xaa>
 801c314:	2d00      	cmp	r5, #0
 801c316:	d0c7      	beq.n	801c2a8 <rcl_validate_topic_name+0xcc>
 801c318:	2308      	movs	r3, #8
 801c31a:	6033      	str	r3, [r6, #0]
 801c31c:	2f00      	cmp	r7, #0
 801c31e:	d1ab      	bne.n	801c278 <rcl_validate_topic_name+0x9c>
 801c320:	e7b1      	b.n	801c286 <rcl_validate_topic_name+0xaa>
 801c322:	2d00      	cmp	r5, #0
 801c324:	d1f8      	bne.n	801c318 <rcl_validate_topic_name+0x13c>
 801c326:	460b      	mov	r3, r1
 801c328:	2501      	movs	r5, #1
 801c32a:	e7bd      	b.n	801c2a8 <rcl_validate_topic_name+0xcc>
 801c32c:	2500      	movs	r5, #0
 801c32e:	e7bb      	b.n	801c2a8 <rcl_validate_topic_name+0xcc>
 801c330:	2300      	movs	r3, #0
 801c332:	4618      	mov	r0, r3
 801c334:	6033      	str	r3, [r6, #0]
 801c336:	e77c      	b.n	801c232 <rcl_validate_topic_name+0x56>
 801c338:	2205      	movs	r2, #5
 801c33a:	6032      	str	r2, [r6, #0]
 801c33c:	2f00      	cmp	r7, #0
 801c33e:	d1d6      	bne.n	801c2ee <rcl_validate_topic_name+0x112>
 801c340:	e7a1      	b.n	801c286 <rcl_validate_topic_name+0xaa>
 801c342:	2d00      	cmp	r5, #0
 801c344:	bf14      	ite	ne
 801c346:	2308      	movne	r3, #8
 801c348:	2303      	moveq	r3, #3
 801c34a:	6033      	str	r3, [r6, #0]
 801c34c:	2f00      	cmp	r7, #0
 801c34e:	d193      	bne.n	801c278 <rcl_validate_topic_name+0x9c>
 801c350:	e799      	b.n	801c286 <rcl_validate_topic_name+0xaa>
 801c352:	2307      	movs	r3, #7
 801c354:	6033      	str	r3, [r6, #0]
 801c356:	2f00      	cmp	r7, #0
 801c358:	d095      	beq.n	801c286 <rcl_validate_topic_name+0xaa>
 801c35a:	2301      	movs	r3, #1
 801c35c:	e7c7      	b.n	801c2ee <rcl_validate_topic_name+0x112>
 801c35e:	bf00      	nop
 801c360:	0801ecbe 	.word	0x0801ecbe

0801c364 <rmw_create_guard_condition>:
 801c364:	b538      	push	{r3, r4, r5, lr}
 801c366:	4605      	mov	r5, r0
 801c368:	4808      	ldr	r0, [pc, #32]	@ (801c38c <rmw_create_guard_condition+0x28>)
 801c36a:	f7fe f9f3 	bl	801a754 <get_memory>
 801c36e:	4603      	mov	r3, r0
 801c370:	b148      	cbz	r0, 801c386 <rmw_create_guard_condition+0x22>
 801c372:	6884      	ldr	r4, [r0, #8]
 801c374:	2300      	movs	r3, #0
 801c376:	61e5      	str	r5, [r4, #28]
 801c378:	7423      	strb	r3, [r4, #16]
 801c37a:	f7fe fa53 	bl	801a824 <rmw_get_implementation_identifier>
 801c37e:	f104 0314 	add.w	r3, r4, #20
 801c382:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c386:	4618      	mov	r0, r3
 801c388:	bd38      	pop	{r3, r4, r5, pc}
 801c38a:	bf00      	nop
 801c38c:	240137fc 	.word	0x240137fc

0801c390 <rmw_destroy_guard_condition>:
 801c390:	b508      	push	{r3, lr}
 801c392:	4b08      	ldr	r3, [pc, #32]	@ (801c3b4 <rmw_destroy_guard_condition+0x24>)
 801c394:	6819      	ldr	r1, [r3, #0]
 801c396:	b911      	cbnz	r1, 801c39e <rmw_destroy_guard_condition+0xe>
 801c398:	e00a      	b.n	801c3b0 <rmw_destroy_guard_condition+0x20>
 801c39a:	6849      	ldr	r1, [r1, #4]
 801c39c:	b141      	cbz	r1, 801c3b0 <rmw_destroy_guard_condition+0x20>
 801c39e:	688b      	ldr	r3, [r1, #8]
 801c3a0:	3314      	adds	r3, #20
 801c3a2:	4298      	cmp	r0, r3
 801c3a4:	d1f9      	bne.n	801c39a <rmw_destroy_guard_condition+0xa>
 801c3a6:	4803      	ldr	r0, [pc, #12]	@ (801c3b4 <rmw_destroy_guard_condition+0x24>)
 801c3a8:	f7fe f9e4 	bl	801a774 <put_memory>
 801c3ac:	2000      	movs	r0, #0
 801c3ae:	bd08      	pop	{r3, pc}
 801c3b0:	2001      	movs	r0, #1
 801c3b2:	bd08      	pop	{r3, pc}
 801c3b4:	240137fc 	.word	0x240137fc

0801c3b8 <rmw_trigger_guard_condition>:
 801c3b8:	b160      	cbz	r0, 801c3d4 <rmw_trigger_guard_condition+0x1c>
 801c3ba:	b510      	push	{r4, lr}
 801c3bc:	4604      	mov	r4, r0
 801c3be:	6800      	ldr	r0, [r0, #0]
 801c3c0:	f7f4 ff02 	bl	80111c8 <is_uxrce_rmw_identifier_valid>
 801c3c4:	b908      	cbnz	r0, 801c3ca <rmw_trigger_guard_condition+0x12>
 801c3c6:	2001      	movs	r0, #1
 801c3c8:	bd10      	pop	{r4, pc}
 801c3ca:	6863      	ldr	r3, [r4, #4]
 801c3cc:	2201      	movs	r2, #1
 801c3ce:	2000      	movs	r0, #0
 801c3d0:	741a      	strb	r2, [r3, #16]
 801c3d2:	bd10      	pop	{r4, pc}
 801c3d4:	2001      	movs	r0, #1
 801c3d6:	4770      	bx	lr

0801c3d8 <rosidl_runtime_c__String__init>:
 801c3d8:	b510      	push	{r4, lr}
 801c3da:	4604      	mov	r4, r0
 801c3dc:	b086      	sub	sp, #24
 801c3de:	b170      	cbz	r0, 801c3fe <rosidl_runtime_c__String__init+0x26>
 801c3e0:	a801      	add	r0, sp, #4
 801c3e2:	f7f3 fcc3 	bl	800fd6c <rcutils_get_default_allocator>
 801c3e6:	9b01      	ldr	r3, [sp, #4]
 801c3e8:	9905      	ldr	r1, [sp, #20]
 801c3ea:	2001      	movs	r0, #1
 801c3ec:	4798      	blx	r3
 801c3ee:	6020      	str	r0, [r4, #0]
 801c3f0:	b128      	cbz	r0, 801c3fe <rosidl_runtime_c__String__init+0x26>
 801c3f2:	2100      	movs	r1, #0
 801c3f4:	2201      	movs	r2, #1
 801c3f6:	7001      	strb	r1, [r0, #0]
 801c3f8:	4610      	mov	r0, r2
 801c3fa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801c3fe:	b006      	add	sp, #24
 801c400:	bd10      	pop	{r4, pc}
 801c402:	bf00      	nop

0801c404 <rosidl_runtime_c__String__fini>:
 801c404:	b320      	cbz	r0, 801c450 <rosidl_runtime_c__String__fini+0x4c>
 801c406:	6803      	ldr	r3, [r0, #0]
 801c408:	b510      	push	{r4, lr}
 801c40a:	4604      	mov	r4, r0
 801c40c:	b086      	sub	sp, #24
 801c40e:	b173      	cbz	r3, 801c42e <rosidl_runtime_c__String__fini+0x2a>
 801c410:	6883      	ldr	r3, [r0, #8]
 801c412:	b1f3      	cbz	r3, 801c452 <rosidl_runtime_c__String__fini+0x4e>
 801c414:	a801      	add	r0, sp, #4
 801c416:	f7f3 fca9 	bl	800fd6c <rcutils_get_default_allocator>
 801c41a:	9b02      	ldr	r3, [sp, #8]
 801c41c:	9905      	ldr	r1, [sp, #20]
 801c41e:	6820      	ldr	r0, [r4, #0]
 801c420:	4798      	blx	r3
 801c422:	2300      	movs	r3, #0
 801c424:	e9c4 3300 	strd	r3, r3, [r4]
 801c428:	60a3      	str	r3, [r4, #8]
 801c42a:	b006      	add	sp, #24
 801c42c:	bd10      	pop	{r4, pc}
 801c42e:	6843      	ldr	r3, [r0, #4]
 801c430:	b9db      	cbnz	r3, 801c46a <rosidl_runtime_c__String__fini+0x66>
 801c432:	6883      	ldr	r3, [r0, #8]
 801c434:	2b00      	cmp	r3, #0
 801c436:	d0f8      	beq.n	801c42a <rosidl_runtime_c__String__fini+0x26>
 801c438:	4b12      	ldr	r3, [pc, #72]	@ (801c484 <rosidl_runtime_c__String__fini+0x80>)
 801c43a:	2251      	movs	r2, #81	@ 0x51
 801c43c:	2101      	movs	r1, #1
 801c43e:	4812      	ldr	r0, [pc, #72]	@ (801c488 <rosidl_runtime_c__String__fini+0x84>)
 801c440:	681b      	ldr	r3, [r3, #0]
 801c442:	68db      	ldr	r3, [r3, #12]
 801c444:	f000 fb82 	bl	801cb4c <fwrite>
 801c448:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c44c:	f000 f83e 	bl	801c4cc <exit>
 801c450:	4770      	bx	lr
 801c452:	4b0c      	ldr	r3, [pc, #48]	@ (801c484 <rosidl_runtime_c__String__fini+0x80>)
 801c454:	224c      	movs	r2, #76	@ 0x4c
 801c456:	2101      	movs	r1, #1
 801c458:	480c      	ldr	r0, [pc, #48]	@ (801c48c <rosidl_runtime_c__String__fini+0x88>)
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	68db      	ldr	r3, [r3, #12]
 801c45e:	f000 fb75 	bl	801cb4c <fwrite>
 801c462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c466:	f000 f831 	bl	801c4cc <exit>
 801c46a:	4b06      	ldr	r3, [pc, #24]	@ (801c484 <rosidl_runtime_c__String__fini+0x80>)
 801c46c:	224e      	movs	r2, #78	@ 0x4e
 801c46e:	2101      	movs	r1, #1
 801c470:	4807      	ldr	r0, [pc, #28]	@ (801c490 <rosidl_runtime_c__String__fini+0x8c>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	68db      	ldr	r3, [r3, #12]
 801c476:	f000 fb69 	bl	801cb4c <fwrite>
 801c47a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c47e:	f000 f825 	bl	801c4cc <exit>
 801c482:	bf00      	nop
 801c484:	2400068c 	.word	0x2400068c
 801c488:	0801ebfc 	.word	0x0801ebfc
 801c48c:	0801eb5c 	.word	0x0801eb5c
 801c490:	0801ebac 	.word	0x0801ebac

0801c494 <calloc>:
 801c494:	4b02      	ldr	r3, [pc, #8]	@ (801c4a0 <calloc+0xc>)
 801c496:	460a      	mov	r2, r1
 801c498:	4601      	mov	r1, r0
 801c49a:	6818      	ldr	r0, [r3, #0]
 801c49c:	f000 b802 	b.w	801c4a4 <_calloc_r>
 801c4a0:	2400068c 	.word	0x2400068c

0801c4a4 <_calloc_r>:
 801c4a4:	b570      	push	{r4, r5, r6, lr}
 801c4a6:	fba1 5402 	umull	r5, r4, r1, r2
 801c4aa:	b93c      	cbnz	r4, 801c4bc <_calloc_r+0x18>
 801c4ac:	4629      	mov	r1, r5
 801c4ae:	f000 f899 	bl	801c5e4 <_malloc_r>
 801c4b2:	4606      	mov	r6, r0
 801c4b4:	b928      	cbnz	r0, 801c4c2 <_calloc_r+0x1e>
 801c4b6:	2600      	movs	r6, #0
 801c4b8:	4630      	mov	r0, r6
 801c4ba:	bd70      	pop	{r4, r5, r6, pc}
 801c4bc:	220c      	movs	r2, #12
 801c4be:	6002      	str	r2, [r0, #0]
 801c4c0:	e7f9      	b.n	801c4b6 <_calloc_r+0x12>
 801c4c2:	462a      	mov	r2, r5
 801c4c4:	4621      	mov	r1, r4
 801c4c6:	f000 fccf 	bl	801ce68 <memset>
 801c4ca:	e7f5      	b.n	801c4b8 <_calloc_r+0x14>

0801c4cc <exit>:
 801c4cc:	b508      	push	{r3, lr}
 801c4ce:	4b06      	ldr	r3, [pc, #24]	@ (801c4e8 <exit+0x1c>)
 801c4d0:	4604      	mov	r4, r0
 801c4d2:	b113      	cbz	r3, 801c4da <exit+0xe>
 801c4d4:	2100      	movs	r1, #0
 801c4d6:	f3af 8000 	nop.w
 801c4da:	4b04      	ldr	r3, [pc, #16]	@ (801c4ec <exit+0x20>)
 801c4dc:	681b      	ldr	r3, [r3, #0]
 801c4de:	b103      	cbz	r3, 801c4e2 <exit+0x16>
 801c4e0:	4798      	blx	r3
 801c4e2:	4620      	mov	r0, r4
 801c4e4:	f7e5 fcb6 	bl	8001e54 <_exit>
 801c4e8:	00000000 	.word	0x00000000
 801c4ec:	24013ab4 	.word	0x24013ab4

0801c4f0 <getenv>:
 801c4f0:	b507      	push	{r0, r1, r2, lr}
 801c4f2:	4b04      	ldr	r3, [pc, #16]	@ (801c504 <getenv+0x14>)
 801c4f4:	4601      	mov	r1, r0
 801c4f6:	aa01      	add	r2, sp, #4
 801c4f8:	6818      	ldr	r0, [r3, #0]
 801c4fa:	f000 f805 	bl	801c508 <_findenv_r>
 801c4fe:	b003      	add	sp, #12
 801c500:	f85d fb04 	ldr.w	pc, [sp], #4
 801c504:	2400068c 	.word	0x2400068c

0801c508 <_findenv_r>:
 801c508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c50c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c57c <_findenv_r+0x74>
 801c510:	4606      	mov	r6, r0
 801c512:	4689      	mov	r9, r1
 801c514:	4617      	mov	r7, r2
 801c516:	f000 fd9d 	bl	801d054 <__env_lock>
 801c51a:	f8da 4000 	ldr.w	r4, [sl]
 801c51e:	b134      	cbz	r4, 801c52e <_findenv_r+0x26>
 801c520:	464b      	mov	r3, r9
 801c522:	4698      	mov	r8, r3
 801c524:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c528:	b13a      	cbz	r2, 801c53a <_findenv_r+0x32>
 801c52a:	2a3d      	cmp	r2, #61	@ 0x3d
 801c52c:	d1f9      	bne.n	801c522 <_findenv_r+0x1a>
 801c52e:	4630      	mov	r0, r6
 801c530:	f000 fd96 	bl	801d060 <__env_unlock>
 801c534:	2000      	movs	r0, #0
 801c536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c53a:	eba8 0809 	sub.w	r8, r8, r9
 801c53e:	46a3      	mov	fp, r4
 801c540:	f854 0b04 	ldr.w	r0, [r4], #4
 801c544:	2800      	cmp	r0, #0
 801c546:	d0f2      	beq.n	801c52e <_findenv_r+0x26>
 801c548:	4642      	mov	r2, r8
 801c54a:	4649      	mov	r1, r9
 801c54c:	f000 fca1 	bl	801ce92 <strncmp>
 801c550:	2800      	cmp	r0, #0
 801c552:	d1f4      	bne.n	801c53e <_findenv_r+0x36>
 801c554:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c558:	eb03 0508 	add.w	r5, r3, r8
 801c55c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c560:	2b3d      	cmp	r3, #61	@ 0x3d
 801c562:	d1ec      	bne.n	801c53e <_findenv_r+0x36>
 801c564:	f8da 3000 	ldr.w	r3, [sl]
 801c568:	ebab 0303 	sub.w	r3, fp, r3
 801c56c:	109b      	asrs	r3, r3, #2
 801c56e:	4630      	mov	r0, r6
 801c570:	603b      	str	r3, [r7, #0]
 801c572:	f000 fd75 	bl	801d060 <__env_unlock>
 801c576:	1c68      	adds	r0, r5, #1
 801c578:	e7dd      	b.n	801c536 <_findenv_r+0x2e>
 801c57a:	bf00      	nop
 801c57c:	24000008 	.word	0x24000008

0801c580 <malloc>:
 801c580:	4b02      	ldr	r3, [pc, #8]	@ (801c58c <malloc+0xc>)
 801c582:	4601      	mov	r1, r0
 801c584:	6818      	ldr	r0, [r3, #0]
 801c586:	f000 b82d 	b.w	801c5e4 <_malloc_r>
 801c58a:	bf00      	nop
 801c58c:	2400068c 	.word	0x2400068c

0801c590 <free>:
 801c590:	4b02      	ldr	r3, [pc, #8]	@ (801c59c <free+0xc>)
 801c592:	4601      	mov	r1, r0
 801c594:	6818      	ldr	r0, [r3, #0]
 801c596:	f000 bd69 	b.w	801d06c <_free_r>
 801c59a:	bf00      	nop
 801c59c:	2400068c 	.word	0x2400068c

0801c5a0 <sbrk_aligned>:
 801c5a0:	b570      	push	{r4, r5, r6, lr}
 801c5a2:	4e0f      	ldr	r6, [pc, #60]	@ (801c5e0 <sbrk_aligned+0x40>)
 801c5a4:	460c      	mov	r4, r1
 801c5a6:	6831      	ldr	r1, [r6, #0]
 801c5a8:	4605      	mov	r5, r0
 801c5aa:	b911      	cbnz	r1, 801c5b2 <sbrk_aligned+0x12>
 801c5ac:	f000 fcce 	bl	801cf4c <_sbrk_r>
 801c5b0:	6030      	str	r0, [r6, #0]
 801c5b2:	4621      	mov	r1, r4
 801c5b4:	4628      	mov	r0, r5
 801c5b6:	f000 fcc9 	bl	801cf4c <_sbrk_r>
 801c5ba:	1c43      	adds	r3, r0, #1
 801c5bc:	d103      	bne.n	801c5c6 <sbrk_aligned+0x26>
 801c5be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c5c2:	4620      	mov	r0, r4
 801c5c4:	bd70      	pop	{r4, r5, r6, pc}
 801c5c6:	1cc4      	adds	r4, r0, #3
 801c5c8:	f024 0403 	bic.w	r4, r4, #3
 801c5cc:	42a0      	cmp	r0, r4
 801c5ce:	d0f8      	beq.n	801c5c2 <sbrk_aligned+0x22>
 801c5d0:	1a21      	subs	r1, r4, r0
 801c5d2:	4628      	mov	r0, r5
 801c5d4:	f000 fcba 	bl	801cf4c <_sbrk_r>
 801c5d8:	3001      	adds	r0, #1
 801c5da:	d1f2      	bne.n	801c5c2 <sbrk_aligned+0x22>
 801c5dc:	e7ef      	b.n	801c5be <sbrk_aligned+0x1e>
 801c5de:	bf00      	nop
 801c5e0:	24013974 	.word	0x24013974

0801c5e4 <_malloc_r>:
 801c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5e8:	1ccd      	adds	r5, r1, #3
 801c5ea:	f025 0503 	bic.w	r5, r5, #3
 801c5ee:	3508      	adds	r5, #8
 801c5f0:	2d0c      	cmp	r5, #12
 801c5f2:	bf38      	it	cc
 801c5f4:	250c      	movcc	r5, #12
 801c5f6:	2d00      	cmp	r5, #0
 801c5f8:	4606      	mov	r6, r0
 801c5fa:	db01      	blt.n	801c600 <_malloc_r+0x1c>
 801c5fc:	42a9      	cmp	r1, r5
 801c5fe:	d904      	bls.n	801c60a <_malloc_r+0x26>
 801c600:	230c      	movs	r3, #12
 801c602:	6033      	str	r3, [r6, #0]
 801c604:	2000      	movs	r0, #0
 801c606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c60a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c6e0 <_malloc_r+0xfc>
 801c60e:	f000 f869 	bl	801c6e4 <__malloc_lock>
 801c612:	f8d8 3000 	ldr.w	r3, [r8]
 801c616:	461c      	mov	r4, r3
 801c618:	bb44      	cbnz	r4, 801c66c <_malloc_r+0x88>
 801c61a:	4629      	mov	r1, r5
 801c61c:	4630      	mov	r0, r6
 801c61e:	f7ff ffbf 	bl	801c5a0 <sbrk_aligned>
 801c622:	1c43      	adds	r3, r0, #1
 801c624:	4604      	mov	r4, r0
 801c626:	d158      	bne.n	801c6da <_malloc_r+0xf6>
 801c628:	f8d8 4000 	ldr.w	r4, [r8]
 801c62c:	4627      	mov	r7, r4
 801c62e:	2f00      	cmp	r7, #0
 801c630:	d143      	bne.n	801c6ba <_malloc_r+0xd6>
 801c632:	2c00      	cmp	r4, #0
 801c634:	d04b      	beq.n	801c6ce <_malloc_r+0xea>
 801c636:	6823      	ldr	r3, [r4, #0]
 801c638:	4639      	mov	r1, r7
 801c63a:	4630      	mov	r0, r6
 801c63c:	eb04 0903 	add.w	r9, r4, r3
 801c640:	f000 fc84 	bl	801cf4c <_sbrk_r>
 801c644:	4581      	cmp	r9, r0
 801c646:	d142      	bne.n	801c6ce <_malloc_r+0xea>
 801c648:	6821      	ldr	r1, [r4, #0]
 801c64a:	1a6d      	subs	r5, r5, r1
 801c64c:	4629      	mov	r1, r5
 801c64e:	4630      	mov	r0, r6
 801c650:	f7ff ffa6 	bl	801c5a0 <sbrk_aligned>
 801c654:	3001      	adds	r0, #1
 801c656:	d03a      	beq.n	801c6ce <_malloc_r+0xea>
 801c658:	6823      	ldr	r3, [r4, #0]
 801c65a:	442b      	add	r3, r5
 801c65c:	6023      	str	r3, [r4, #0]
 801c65e:	f8d8 3000 	ldr.w	r3, [r8]
 801c662:	685a      	ldr	r2, [r3, #4]
 801c664:	bb62      	cbnz	r2, 801c6c0 <_malloc_r+0xdc>
 801c666:	f8c8 7000 	str.w	r7, [r8]
 801c66a:	e00f      	b.n	801c68c <_malloc_r+0xa8>
 801c66c:	6822      	ldr	r2, [r4, #0]
 801c66e:	1b52      	subs	r2, r2, r5
 801c670:	d420      	bmi.n	801c6b4 <_malloc_r+0xd0>
 801c672:	2a0b      	cmp	r2, #11
 801c674:	d917      	bls.n	801c6a6 <_malloc_r+0xc2>
 801c676:	1961      	adds	r1, r4, r5
 801c678:	42a3      	cmp	r3, r4
 801c67a:	6025      	str	r5, [r4, #0]
 801c67c:	bf18      	it	ne
 801c67e:	6059      	strne	r1, [r3, #4]
 801c680:	6863      	ldr	r3, [r4, #4]
 801c682:	bf08      	it	eq
 801c684:	f8c8 1000 	streq.w	r1, [r8]
 801c688:	5162      	str	r2, [r4, r5]
 801c68a:	604b      	str	r3, [r1, #4]
 801c68c:	4630      	mov	r0, r6
 801c68e:	f000 f82f 	bl	801c6f0 <__malloc_unlock>
 801c692:	f104 000b 	add.w	r0, r4, #11
 801c696:	1d23      	adds	r3, r4, #4
 801c698:	f020 0007 	bic.w	r0, r0, #7
 801c69c:	1ac2      	subs	r2, r0, r3
 801c69e:	bf1c      	itt	ne
 801c6a0:	1a1b      	subne	r3, r3, r0
 801c6a2:	50a3      	strne	r3, [r4, r2]
 801c6a4:	e7af      	b.n	801c606 <_malloc_r+0x22>
 801c6a6:	6862      	ldr	r2, [r4, #4]
 801c6a8:	42a3      	cmp	r3, r4
 801c6aa:	bf0c      	ite	eq
 801c6ac:	f8c8 2000 	streq.w	r2, [r8]
 801c6b0:	605a      	strne	r2, [r3, #4]
 801c6b2:	e7eb      	b.n	801c68c <_malloc_r+0xa8>
 801c6b4:	4623      	mov	r3, r4
 801c6b6:	6864      	ldr	r4, [r4, #4]
 801c6b8:	e7ae      	b.n	801c618 <_malloc_r+0x34>
 801c6ba:	463c      	mov	r4, r7
 801c6bc:	687f      	ldr	r7, [r7, #4]
 801c6be:	e7b6      	b.n	801c62e <_malloc_r+0x4a>
 801c6c0:	461a      	mov	r2, r3
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	42a3      	cmp	r3, r4
 801c6c6:	d1fb      	bne.n	801c6c0 <_malloc_r+0xdc>
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	6053      	str	r3, [r2, #4]
 801c6cc:	e7de      	b.n	801c68c <_malloc_r+0xa8>
 801c6ce:	230c      	movs	r3, #12
 801c6d0:	6033      	str	r3, [r6, #0]
 801c6d2:	4630      	mov	r0, r6
 801c6d4:	f000 f80c 	bl	801c6f0 <__malloc_unlock>
 801c6d8:	e794      	b.n	801c604 <_malloc_r+0x20>
 801c6da:	6005      	str	r5, [r0, #0]
 801c6dc:	e7d6      	b.n	801c68c <_malloc_r+0xa8>
 801c6de:	bf00      	nop
 801c6e0:	24013978 	.word	0x24013978

0801c6e4 <__malloc_lock>:
 801c6e4:	4801      	ldr	r0, [pc, #4]	@ (801c6ec <__malloc_lock+0x8>)
 801c6e6:	f000 bc7e 	b.w	801cfe6 <__retarget_lock_acquire_recursive>
 801c6ea:	bf00      	nop
 801c6ec:	24013abd 	.word	0x24013abd

0801c6f0 <__malloc_unlock>:
 801c6f0:	4801      	ldr	r0, [pc, #4]	@ (801c6f8 <__malloc_unlock+0x8>)
 801c6f2:	f000 bc79 	b.w	801cfe8 <__retarget_lock_release_recursive>
 801c6f6:	bf00      	nop
 801c6f8:	24013abd 	.word	0x24013abd

0801c6fc <srand>:
 801c6fc:	b538      	push	{r3, r4, r5, lr}
 801c6fe:	4b10      	ldr	r3, [pc, #64]	@ (801c740 <srand+0x44>)
 801c700:	681d      	ldr	r5, [r3, #0]
 801c702:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c704:	4604      	mov	r4, r0
 801c706:	b9b3      	cbnz	r3, 801c736 <srand+0x3a>
 801c708:	2018      	movs	r0, #24
 801c70a:	f7ff ff39 	bl	801c580 <malloc>
 801c70e:	4602      	mov	r2, r0
 801c710:	6328      	str	r0, [r5, #48]	@ 0x30
 801c712:	b920      	cbnz	r0, 801c71e <srand+0x22>
 801c714:	4b0b      	ldr	r3, [pc, #44]	@ (801c744 <srand+0x48>)
 801c716:	480c      	ldr	r0, [pc, #48]	@ (801c748 <srand+0x4c>)
 801c718:	2146      	movs	r1, #70	@ 0x46
 801c71a:	f000 fc7d 	bl	801d018 <__assert_func>
 801c71e:	490b      	ldr	r1, [pc, #44]	@ (801c74c <srand+0x50>)
 801c720:	4b0b      	ldr	r3, [pc, #44]	@ (801c750 <srand+0x54>)
 801c722:	e9c0 1300 	strd	r1, r3, [r0]
 801c726:	4b0b      	ldr	r3, [pc, #44]	@ (801c754 <srand+0x58>)
 801c728:	6083      	str	r3, [r0, #8]
 801c72a:	230b      	movs	r3, #11
 801c72c:	8183      	strh	r3, [r0, #12]
 801c72e:	2100      	movs	r1, #0
 801c730:	2001      	movs	r0, #1
 801c732:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c736:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c738:	2200      	movs	r2, #0
 801c73a:	611c      	str	r4, [r3, #16]
 801c73c:	615a      	str	r2, [r3, #20]
 801c73e:	bd38      	pop	{r3, r4, r5, pc}
 801c740:	2400068c 	.word	0x2400068c
 801c744:	0801ec4e 	.word	0x0801ec4e
 801c748:	0801ec65 	.word	0x0801ec65
 801c74c:	abcd330e 	.word	0xabcd330e
 801c750:	e66d1234 	.word	0xe66d1234
 801c754:	0005deec 	.word	0x0005deec

0801c758 <rand>:
 801c758:	4b16      	ldr	r3, [pc, #88]	@ (801c7b4 <rand+0x5c>)
 801c75a:	b510      	push	{r4, lr}
 801c75c:	681c      	ldr	r4, [r3, #0]
 801c75e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c760:	b9b3      	cbnz	r3, 801c790 <rand+0x38>
 801c762:	2018      	movs	r0, #24
 801c764:	f7ff ff0c 	bl	801c580 <malloc>
 801c768:	4602      	mov	r2, r0
 801c76a:	6320      	str	r0, [r4, #48]	@ 0x30
 801c76c:	b920      	cbnz	r0, 801c778 <rand+0x20>
 801c76e:	4b12      	ldr	r3, [pc, #72]	@ (801c7b8 <rand+0x60>)
 801c770:	4812      	ldr	r0, [pc, #72]	@ (801c7bc <rand+0x64>)
 801c772:	2152      	movs	r1, #82	@ 0x52
 801c774:	f000 fc50 	bl	801d018 <__assert_func>
 801c778:	4911      	ldr	r1, [pc, #68]	@ (801c7c0 <rand+0x68>)
 801c77a:	4b12      	ldr	r3, [pc, #72]	@ (801c7c4 <rand+0x6c>)
 801c77c:	e9c0 1300 	strd	r1, r3, [r0]
 801c780:	4b11      	ldr	r3, [pc, #68]	@ (801c7c8 <rand+0x70>)
 801c782:	6083      	str	r3, [r0, #8]
 801c784:	230b      	movs	r3, #11
 801c786:	8183      	strh	r3, [r0, #12]
 801c788:	2100      	movs	r1, #0
 801c78a:	2001      	movs	r0, #1
 801c78c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c790:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c792:	480e      	ldr	r0, [pc, #56]	@ (801c7cc <rand+0x74>)
 801c794:	690b      	ldr	r3, [r1, #16]
 801c796:	694c      	ldr	r4, [r1, #20]
 801c798:	4a0d      	ldr	r2, [pc, #52]	@ (801c7d0 <rand+0x78>)
 801c79a:	4358      	muls	r0, r3
 801c79c:	fb02 0004 	mla	r0, r2, r4, r0
 801c7a0:	fba3 3202 	umull	r3, r2, r3, r2
 801c7a4:	3301      	adds	r3, #1
 801c7a6:	eb40 0002 	adc.w	r0, r0, r2
 801c7aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c7ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c7b2:	bd10      	pop	{r4, pc}
 801c7b4:	2400068c 	.word	0x2400068c
 801c7b8:	0801ec4e 	.word	0x0801ec4e
 801c7bc:	0801ec65 	.word	0x0801ec65
 801c7c0:	abcd330e 	.word	0xabcd330e
 801c7c4:	e66d1234 	.word	0xe66d1234
 801c7c8:	0005deec 	.word	0x0005deec
 801c7cc:	5851f42d 	.word	0x5851f42d
 801c7d0:	4c957f2d 	.word	0x4c957f2d

0801c7d4 <realloc>:
 801c7d4:	4b02      	ldr	r3, [pc, #8]	@ (801c7e0 <realloc+0xc>)
 801c7d6:	460a      	mov	r2, r1
 801c7d8:	4601      	mov	r1, r0
 801c7da:	6818      	ldr	r0, [r3, #0]
 801c7dc:	f000 b802 	b.w	801c7e4 <_realloc_r>
 801c7e0:	2400068c 	.word	0x2400068c

0801c7e4 <_realloc_r>:
 801c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c7e8:	4680      	mov	r8, r0
 801c7ea:	4615      	mov	r5, r2
 801c7ec:	460c      	mov	r4, r1
 801c7ee:	b921      	cbnz	r1, 801c7fa <_realloc_r+0x16>
 801c7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c7f4:	4611      	mov	r1, r2
 801c7f6:	f7ff bef5 	b.w	801c5e4 <_malloc_r>
 801c7fa:	b92a      	cbnz	r2, 801c808 <_realloc_r+0x24>
 801c7fc:	f000 fc36 	bl	801d06c <_free_r>
 801c800:	2400      	movs	r4, #0
 801c802:	4620      	mov	r0, r4
 801c804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c808:	f000 fc7a 	bl	801d100 <_malloc_usable_size_r>
 801c80c:	4285      	cmp	r5, r0
 801c80e:	4606      	mov	r6, r0
 801c810:	d802      	bhi.n	801c818 <_realloc_r+0x34>
 801c812:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c816:	d8f4      	bhi.n	801c802 <_realloc_r+0x1e>
 801c818:	4629      	mov	r1, r5
 801c81a:	4640      	mov	r0, r8
 801c81c:	f7ff fee2 	bl	801c5e4 <_malloc_r>
 801c820:	4607      	mov	r7, r0
 801c822:	2800      	cmp	r0, #0
 801c824:	d0ec      	beq.n	801c800 <_realloc_r+0x1c>
 801c826:	42b5      	cmp	r5, r6
 801c828:	462a      	mov	r2, r5
 801c82a:	4621      	mov	r1, r4
 801c82c:	bf28      	it	cs
 801c82e:	4632      	movcs	r2, r6
 801c830:	f000 fbe3 	bl	801cffa <memcpy>
 801c834:	4621      	mov	r1, r4
 801c836:	4640      	mov	r0, r8
 801c838:	f000 fc18 	bl	801d06c <_free_r>
 801c83c:	463c      	mov	r4, r7
 801c83e:	e7e0      	b.n	801c802 <_realloc_r+0x1e>

0801c840 <_strtoul_l.constprop.0>:
 801c840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c844:	4e34      	ldr	r6, [pc, #208]	@ (801c918 <_strtoul_l.constprop.0+0xd8>)
 801c846:	4686      	mov	lr, r0
 801c848:	460d      	mov	r5, r1
 801c84a:	4628      	mov	r0, r5
 801c84c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c850:	5d37      	ldrb	r7, [r6, r4]
 801c852:	f017 0708 	ands.w	r7, r7, #8
 801c856:	d1f8      	bne.n	801c84a <_strtoul_l.constprop.0+0xa>
 801c858:	2c2d      	cmp	r4, #45	@ 0x2d
 801c85a:	d12f      	bne.n	801c8bc <_strtoul_l.constprop.0+0x7c>
 801c85c:	782c      	ldrb	r4, [r5, #0]
 801c85e:	2701      	movs	r7, #1
 801c860:	1c85      	adds	r5, r0, #2
 801c862:	f033 0010 	bics.w	r0, r3, #16
 801c866:	d109      	bne.n	801c87c <_strtoul_l.constprop.0+0x3c>
 801c868:	2c30      	cmp	r4, #48	@ 0x30
 801c86a:	d12c      	bne.n	801c8c6 <_strtoul_l.constprop.0+0x86>
 801c86c:	7828      	ldrb	r0, [r5, #0]
 801c86e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c872:	2858      	cmp	r0, #88	@ 0x58
 801c874:	d127      	bne.n	801c8c6 <_strtoul_l.constprop.0+0x86>
 801c876:	786c      	ldrb	r4, [r5, #1]
 801c878:	2310      	movs	r3, #16
 801c87a:	3502      	adds	r5, #2
 801c87c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801c880:	2600      	movs	r6, #0
 801c882:	fbb8 f8f3 	udiv	r8, r8, r3
 801c886:	fb03 f908 	mul.w	r9, r3, r8
 801c88a:	ea6f 0909 	mvn.w	r9, r9
 801c88e:	4630      	mov	r0, r6
 801c890:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c894:	f1bc 0f09 	cmp.w	ip, #9
 801c898:	d81c      	bhi.n	801c8d4 <_strtoul_l.constprop.0+0x94>
 801c89a:	4664      	mov	r4, ip
 801c89c:	42a3      	cmp	r3, r4
 801c89e:	dd2a      	ble.n	801c8f6 <_strtoul_l.constprop.0+0xb6>
 801c8a0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801c8a4:	d007      	beq.n	801c8b6 <_strtoul_l.constprop.0+0x76>
 801c8a6:	4580      	cmp	r8, r0
 801c8a8:	d322      	bcc.n	801c8f0 <_strtoul_l.constprop.0+0xb0>
 801c8aa:	d101      	bne.n	801c8b0 <_strtoul_l.constprop.0+0x70>
 801c8ac:	45a1      	cmp	r9, r4
 801c8ae:	db1f      	blt.n	801c8f0 <_strtoul_l.constprop.0+0xb0>
 801c8b0:	fb00 4003 	mla	r0, r0, r3, r4
 801c8b4:	2601      	movs	r6, #1
 801c8b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c8ba:	e7e9      	b.n	801c890 <_strtoul_l.constprop.0+0x50>
 801c8bc:	2c2b      	cmp	r4, #43	@ 0x2b
 801c8be:	bf04      	itt	eq
 801c8c0:	782c      	ldrbeq	r4, [r5, #0]
 801c8c2:	1c85      	addeq	r5, r0, #2
 801c8c4:	e7cd      	b.n	801c862 <_strtoul_l.constprop.0+0x22>
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d1d8      	bne.n	801c87c <_strtoul_l.constprop.0+0x3c>
 801c8ca:	2c30      	cmp	r4, #48	@ 0x30
 801c8cc:	bf0c      	ite	eq
 801c8ce:	2308      	moveq	r3, #8
 801c8d0:	230a      	movne	r3, #10
 801c8d2:	e7d3      	b.n	801c87c <_strtoul_l.constprop.0+0x3c>
 801c8d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c8d8:	f1bc 0f19 	cmp.w	ip, #25
 801c8dc:	d801      	bhi.n	801c8e2 <_strtoul_l.constprop.0+0xa2>
 801c8de:	3c37      	subs	r4, #55	@ 0x37
 801c8e0:	e7dc      	b.n	801c89c <_strtoul_l.constprop.0+0x5c>
 801c8e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c8e6:	f1bc 0f19 	cmp.w	ip, #25
 801c8ea:	d804      	bhi.n	801c8f6 <_strtoul_l.constprop.0+0xb6>
 801c8ec:	3c57      	subs	r4, #87	@ 0x57
 801c8ee:	e7d5      	b.n	801c89c <_strtoul_l.constprop.0+0x5c>
 801c8f0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c8f4:	e7df      	b.n	801c8b6 <_strtoul_l.constprop.0+0x76>
 801c8f6:	1c73      	adds	r3, r6, #1
 801c8f8:	d106      	bne.n	801c908 <_strtoul_l.constprop.0+0xc8>
 801c8fa:	2322      	movs	r3, #34	@ 0x22
 801c8fc:	f8ce 3000 	str.w	r3, [lr]
 801c900:	4630      	mov	r0, r6
 801c902:	b932      	cbnz	r2, 801c912 <_strtoul_l.constprop.0+0xd2>
 801c904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c908:	b107      	cbz	r7, 801c90c <_strtoul_l.constprop.0+0xcc>
 801c90a:	4240      	negs	r0, r0
 801c90c:	2a00      	cmp	r2, #0
 801c90e:	d0f9      	beq.n	801c904 <_strtoul_l.constprop.0+0xc4>
 801c910:	b106      	cbz	r6, 801c914 <_strtoul_l.constprop.0+0xd4>
 801c912:	1e69      	subs	r1, r5, #1
 801c914:	6011      	str	r1, [r2, #0]
 801c916:	e7f5      	b.n	801c904 <_strtoul_l.constprop.0+0xc4>
 801c918:	0801ecbe 	.word	0x0801ecbe

0801c91c <strtoul>:
 801c91c:	4613      	mov	r3, r2
 801c91e:	460a      	mov	r2, r1
 801c920:	4601      	mov	r1, r0
 801c922:	4802      	ldr	r0, [pc, #8]	@ (801c92c <strtoul+0x10>)
 801c924:	6800      	ldr	r0, [r0, #0]
 801c926:	f7ff bf8b 	b.w	801c840 <_strtoul_l.constprop.0>
 801c92a:	bf00      	nop
 801c92c:	2400068c 	.word	0x2400068c

0801c930 <std>:
 801c930:	2300      	movs	r3, #0
 801c932:	b510      	push	{r4, lr}
 801c934:	4604      	mov	r4, r0
 801c936:	e9c0 3300 	strd	r3, r3, [r0]
 801c93a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c93e:	6083      	str	r3, [r0, #8]
 801c940:	8181      	strh	r1, [r0, #12]
 801c942:	6643      	str	r3, [r0, #100]	@ 0x64
 801c944:	81c2      	strh	r2, [r0, #14]
 801c946:	6183      	str	r3, [r0, #24]
 801c948:	4619      	mov	r1, r3
 801c94a:	2208      	movs	r2, #8
 801c94c:	305c      	adds	r0, #92	@ 0x5c
 801c94e:	f000 fa8b 	bl	801ce68 <memset>
 801c952:	4b0d      	ldr	r3, [pc, #52]	@ (801c988 <std+0x58>)
 801c954:	6263      	str	r3, [r4, #36]	@ 0x24
 801c956:	4b0d      	ldr	r3, [pc, #52]	@ (801c98c <std+0x5c>)
 801c958:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c95a:	4b0d      	ldr	r3, [pc, #52]	@ (801c990 <std+0x60>)
 801c95c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c95e:	4b0d      	ldr	r3, [pc, #52]	@ (801c994 <std+0x64>)
 801c960:	6323      	str	r3, [r4, #48]	@ 0x30
 801c962:	4b0d      	ldr	r3, [pc, #52]	@ (801c998 <std+0x68>)
 801c964:	6224      	str	r4, [r4, #32]
 801c966:	429c      	cmp	r4, r3
 801c968:	d006      	beq.n	801c978 <std+0x48>
 801c96a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c96e:	4294      	cmp	r4, r2
 801c970:	d002      	beq.n	801c978 <std+0x48>
 801c972:	33d0      	adds	r3, #208	@ 0xd0
 801c974:	429c      	cmp	r4, r3
 801c976:	d105      	bne.n	801c984 <std+0x54>
 801c978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c980:	f000 bb30 	b.w	801cfe4 <__retarget_lock_init_recursive>
 801c984:	bd10      	pop	{r4, pc}
 801c986:	bf00      	nop
 801c988:	0801cbf5 	.word	0x0801cbf5
 801c98c:	0801cc17 	.word	0x0801cc17
 801c990:	0801cc4f 	.word	0x0801cc4f
 801c994:	0801cc73 	.word	0x0801cc73
 801c998:	2401397c 	.word	0x2401397c

0801c99c <stdio_exit_handler>:
 801c99c:	4a02      	ldr	r2, [pc, #8]	@ (801c9a8 <stdio_exit_handler+0xc>)
 801c99e:	4903      	ldr	r1, [pc, #12]	@ (801c9ac <stdio_exit_handler+0x10>)
 801c9a0:	4803      	ldr	r0, [pc, #12]	@ (801c9b0 <stdio_exit_handler+0x14>)
 801c9a2:	f000 b869 	b.w	801ca78 <_fwalk_sglue>
 801c9a6:	bf00      	nop
 801c9a8:	24000680 	.word	0x24000680
 801c9ac:	0801da69 	.word	0x0801da69
 801c9b0:	24000690 	.word	0x24000690

0801c9b4 <cleanup_stdio>:
 801c9b4:	6841      	ldr	r1, [r0, #4]
 801c9b6:	4b0c      	ldr	r3, [pc, #48]	@ (801c9e8 <cleanup_stdio+0x34>)
 801c9b8:	4299      	cmp	r1, r3
 801c9ba:	b510      	push	{r4, lr}
 801c9bc:	4604      	mov	r4, r0
 801c9be:	d001      	beq.n	801c9c4 <cleanup_stdio+0x10>
 801c9c0:	f001 f852 	bl	801da68 <_fflush_r>
 801c9c4:	68a1      	ldr	r1, [r4, #8]
 801c9c6:	4b09      	ldr	r3, [pc, #36]	@ (801c9ec <cleanup_stdio+0x38>)
 801c9c8:	4299      	cmp	r1, r3
 801c9ca:	d002      	beq.n	801c9d2 <cleanup_stdio+0x1e>
 801c9cc:	4620      	mov	r0, r4
 801c9ce:	f001 f84b 	bl	801da68 <_fflush_r>
 801c9d2:	68e1      	ldr	r1, [r4, #12]
 801c9d4:	4b06      	ldr	r3, [pc, #24]	@ (801c9f0 <cleanup_stdio+0x3c>)
 801c9d6:	4299      	cmp	r1, r3
 801c9d8:	d004      	beq.n	801c9e4 <cleanup_stdio+0x30>
 801c9da:	4620      	mov	r0, r4
 801c9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9e0:	f001 b842 	b.w	801da68 <_fflush_r>
 801c9e4:	bd10      	pop	{r4, pc}
 801c9e6:	bf00      	nop
 801c9e8:	2401397c 	.word	0x2401397c
 801c9ec:	240139e4 	.word	0x240139e4
 801c9f0:	24013a4c 	.word	0x24013a4c

0801c9f4 <global_stdio_init.part.0>:
 801c9f4:	b510      	push	{r4, lr}
 801c9f6:	4b0b      	ldr	r3, [pc, #44]	@ (801ca24 <global_stdio_init.part.0+0x30>)
 801c9f8:	4c0b      	ldr	r4, [pc, #44]	@ (801ca28 <global_stdio_init.part.0+0x34>)
 801c9fa:	4a0c      	ldr	r2, [pc, #48]	@ (801ca2c <global_stdio_init.part.0+0x38>)
 801c9fc:	601a      	str	r2, [r3, #0]
 801c9fe:	4620      	mov	r0, r4
 801ca00:	2200      	movs	r2, #0
 801ca02:	2104      	movs	r1, #4
 801ca04:	f7ff ff94 	bl	801c930 <std>
 801ca08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ca0c:	2201      	movs	r2, #1
 801ca0e:	2109      	movs	r1, #9
 801ca10:	f7ff ff8e 	bl	801c930 <std>
 801ca14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ca18:	2202      	movs	r2, #2
 801ca1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca1e:	2112      	movs	r1, #18
 801ca20:	f7ff bf86 	b.w	801c930 <std>
 801ca24:	24013ab4 	.word	0x24013ab4
 801ca28:	2401397c 	.word	0x2401397c
 801ca2c:	0801c99d 	.word	0x0801c99d

0801ca30 <__sfp_lock_acquire>:
 801ca30:	4801      	ldr	r0, [pc, #4]	@ (801ca38 <__sfp_lock_acquire+0x8>)
 801ca32:	f000 bad8 	b.w	801cfe6 <__retarget_lock_acquire_recursive>
 801ca36:	bf00      	nop
 801ca38:	24013abe 	.word	0x24013abe

0801ca3c <__sfp_lock_release>:
 801ca3c:	4801      	ldr	r0, [pc, #4]	@ (801ca44 <__sfp_lock_release+0x8>)
 801ca3e:	f000 bad3 	b.w	801cfe8 <__retarget_lock_release_recursive>
 801ca42:	bf00      	nop
 801ca44:	24013abe 	.word	0x24013abe

0801ca48 <__sinit>:
 801ca48:	b510      	push	{r4, lr}
 801ca4a:	4604      	mov	r4, r0
 801ca4c:	f7ff fff0 	bl	801ca30 <__sfp_lock_acquire>
 801ca50:	6a23      	ldr	r3, [r4, #32]
 801ca52:	b11b      	cbz	r3, 801ca5c <__sinit+0x14>
 801ca54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca58:	f7ff bff0 	b.w	801ca3c <__sfp_lock_release>
 801ca5c:	4b04      	ldr	r3, [pc, #16]	@ (801ca70 <__sinit+0x28>)
 801ca5e:	6223      	str	r3, [r4, #32]
 801ca60:	4b04      	ldr	r3, [pc, #16]	@ (801ca74 <__sinit+0x2c>)
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d1f5      	bne.n	801ca54 <__sinit+0xc>
 801ca68:	f7ff ffc4 	bl	801c9f4 <global_stdio_init.part.0>
 801ca6c:	e7f2      	b.n	801ca54 <__sinit+0xc>
 801ca6e:	bf00      	nop
 801ca70:	0801c9b5 	.word	0x0801c9b5
 801ca74:	24013ab4 	.word	0x24013ab4

0801ca78 <_fwalk_sglue>:
 801ca78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca7c:	4607      	mov	r7, r0
 801ca7e:	4688      	mov	r8, r1
 801ca80:	4614      	mov	r4, r2
 801ca82:	2600      	movs	r6, #0
 801ca84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ca88:	f1b9 0901 	subs.w	r9, r9, #1
 801ca8c:	d505      	bpl.n	801ca9a <_fwalk_sglue+0x22>
 801ca8e:	6824      	ldr	r4, [r4, #0]
 801ca90:	2c00      	cmp	r4, #0
 801ca92:	d1f7      	bne.n	801ca84 <_fwalk_sglue+0xc>
 801ca94:	4630      	mov	r0, r6
 801ca96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca9a:	89ab      	ldrh	r3, [r5, #12]
 801ca9c:	2b01      	cmp	r3, #1
 801ca9e:	d907      	bls.n	801cab0 <_fwalk_sglue+0x38>
 801caa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801caa4:	3301      	adds	r3, #1
 801caa6:	d003      	beq.n	801cab0 <_fwalk_sglue+0x38>
 801caa8:	4629      	mov	r1, r5
 801caaa:	4638      	mov	r0, r7
 801caac:	47c0      	blx	r8
 801caae:	4306      	orrs	r6, r0
 801cab0:	3568      	adds	r5, #104	@ 0x68
 801cab2:	e7e9      	b.n	801ca88 <_fwalk_sglue+0x10>

0801cab4 <_fwrite_r>:
 801cab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cab8:	9c08      	ldr	r4, [sp, #32]
 801caba:	468a      	mov	sl, r1
 801cabc:	4690      	mov	r8, r2
 801cabe:	fb02 f903 	mul.w	r9, r2, r3
 801cac2:	4606      	mov	r6, r0
 801cac4:	b118      	cbz	r0, 801cace <_fwrite_r+0x1a>
 801cac6:	6a03      	ldr	r3, [r0, #32]
 801cac8:	b90b      	cbnz	r3, 801cace <_fwrite_r+0x1a>
 801caca:	f7ff ffbd 	bl	801ca48 <__sinit>
 801cace:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cad0:	07dd      	lsls	r5, r3, #31
 801cad2:	d405      	bmi.n	801cae0 <_fwrite_r+0x2c>
 801cad4:	89a3      	ldrh	r3, [r4, #12]
 801cad6:	0598      	lsls	r0, r3, #22
 801cad8:	d402      	bmi.n	801cae0 <_fwrite_r+0x2c>
 801cada:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cadc:	f000 fa83 	bl	801cfe6 <__retarget_lock_acquire_recursive>
 801cae0:	89a3      	ldrh	r3, [r4, #12]
 801cae2:	0719      	lsls	r1, r3, #28
 801cae4:	d516      	bpl.n	801cb14 <_fwrite_r+0x60>
 801cae6:	6923      	ldr	r3, [r4, #16]
 801cae8:	b1a3      	cbz	r3, 801cb14 <_fwrite_r+0x60>
 801caea:	2500      	movs	r5, #0
 801caec:	454d      	cmp	r5, r9
 801caee:	d01f      	beq.n	801cb30 <_fwrite_r+0x7c>
 801caf0:	68a7      	ldr	r7, [r4, #8]
 801caf2:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801caf6:	3f01      	subs	r7, #1
 801caf8:	2f00      	cmp	r7, #0
 801cafa:	60a7      	str	r7, [r4, #8]
 801cafc:	da04      	bge.n	801cb08 <_fwrite_r+0x54>
 801cafe:	69a3      	ldr	r3, [r4, #24]
 801cb00:	429f      	cmp	r7, r3
 801cb02:	db0f      	blt.n	801cb24 <_fwrite_r+0x70>
 801cb04:	290a      	cmp	r1, #10
 801cb06:	d00d      	beq.n	801cb24 <_fwrite_r+0x70>
 801cb08:	6823      	ldr	r3, [r4, #0]
 801cb0a:	1c5a      	adds	r2, r3, #1
 801cb0c:	6022      	str	r2, [r4, #0]
 801cb0e:	7019      	strb	r1, [r3, #0]
 801cb10:	3501      	adds	r5, #1
 801cb12:	e7eb      	b.n	801caec <_fwrite_r+0x38>
 801cb14:	4621      	mov	r1, r4
 801cb16:	4630      	mov	r0, r6
 801cb18:	f000 f926 	bl	801cd68 <__swsetup_r>
 801cb1c:	2800      	cmp	r0, #0
 801cb1e:	d0e4      	beq.n	801caea <_fwrite_r+0x36>
 801cb20:	2500      	movs	r5, #0
 801cb22:	e005      	b.n	801cb30 <_fwrite_r+0x7c>
 801cb24:	4622      	mov	r2, r4
 801cb26:	4630      	mov	r0, r6
 801cb28:	f000 f8e0 	bl	801ccec <__swbuf_r>
 801cb2c:	3001      	adds	r0, #1
 801cb2e:	d1ef      	bne.n	801cb10 <_fwrite_r+0x5c>
 801cb30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb32:	07da      	lsls	r2, r3, #31
 801cb34:	d405      	bmi.n	801cb42 <_fwrite_r+0x8e>
 801cb36:	89a3      	ldrh	r3, [r4, #12]
 801cb38:	059b      	lsls	r3, r3, #22
 801cb3a:	d402      	bmi.n	801cb42 <_fwrite_r+0x8e>
 801cb3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb3e:	f000 fa53 	bl	801cfe8 <__retarget_lock_release_recursive>
 801cb42:	fbb5 f0f8 	udiv	r0, r5, r8
 801cb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cb4c <fwrite>:
 801cb4c:	b507      	push	{r0, r1, r2, lr}
 801cb4e:	9300      	str	r3, [sp, #0]
 801cb50:	4613      	mov	r3, r2
 801cb52:	460a      	mov	r2, r1
 801cb54:	4601      	mov	r1, r0
 801cb56:	4803      	ldr	r0, [pc, #12]	@ (801cb64 <fwrite+0x18>)
 801cb58:	6800      	ldr	r0, [r0, #0]
 801cb5a:	f7ff ffab 	bl	801cab4 <_fwrite_r>
 801cb5e:	b003      	add	sp, #12
 801cb60:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb64:	2400068c 	.word	0x2400068c

0801cb68 <iprintf>:
 801cb68:	b40f      	push	{r0, r1, r2, r3}
 801cb6a:	b507      	push	{r0, r1, r2, lr}
 801cb6c:	4906      	ldr	r1, [pc, #24]	@ (801cb88 <iprintf+0x20>)
 801cb6e:	ab04      	add	r3, sp, #16
 801cb70:	6808      	ldr	r0, [r1, #0]
 801cb72:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb76:	6881      	ldr	r1, [r0, #8]
 801cb78:	9301      	str	r3, [sp, #4]
 801cb7a:	f000 fc4b 	bl	801d414 <_vfiprintf_r>
 801cb7e:	b003      	add	sp, #12
 801cb80:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb84:	b004      	add	sp, #16
 801cb86:	4770      	bx	lr
 801cb88:	2400068c 	.word	0x2400068c

0801cb8c <sniprintf>:
 801cb8c:	b40c      	push	{r2, r3}
 801cb8e:	b530      	push	{r4, r5, lr}
 801cb90:	4b17      	ldr	r3, [pc, #92]	@ (801cbf0 <sniprintf+0x64>)
 801cb92:	1e0c      	subs	r4, r1, #0
 801cb94:	681d      	ldr	r5, [r3, #0]
 801cb96:	b09d      	sub	sp, #116	@ 0x74
 801cb98:	da08      	bge.n	801cbac <sniprintf+0x20>
 801cb9a:	238b      	movs	r3, #139	@ 0x8b
 801cb9c:	602b      	str	r3, [r5, #0]
 801cb9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cba2:	b01d      	add	sp, #116	@ 0x74
 801cba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cba8:	b002      	add	sp, #8
 801cbaa:	4770      	bx	lr
 801cbac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cbb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cbb4:	bf14      	ite	ne
 801cbb6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cbba:	4623      	moveq	r3, r4
 801cbbc:	9304      	str	r3, [sp, #16]
 801cbbe:	9307      	str	r3, [sp, #28]
 801cbc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cbc4:	9002      	str	r0, [sp, #8]
 801cbc6:	9006      	str	r0, [sp, #24]
 801cbc8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cbcc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cbce:	ab21      	add	r3, sp, #132	@ 0x84
 801cbd0:	a902      	add	r1, sp, #8
 801cbd2:	4628      	mov	r0, r5
 801cbd4:	9301      	str	r3, [sp, #4]
 801cbd6:	f000 faf7 	bl	801d1c8 <_svfiprintf_r>
 801cbda:	1c43      	adds	r3, r0, #1
 801cbdc:	bfbc      	itt	lt
 801cbde:	238b      	movlt	r3, #139	@ 0x8b
 801cbe0:	602b      	strlt	r3, [r5, #0]
 801cbe2:	2c00      	cmp	r4, #0
 801cbe4:	d0dd      	beq.n	801cba2 <sniprintf+0x16>
 801cbe6:	9b02      	ldr	r3, [sp, #8]
 801cbe8:	2200      	movs	r2, #0
 801cbea:	701a      	strb	r2, [r3, #0]
 801cbec:	e7d9      	b.n	801cba2 <sniprintf+0x16>
 801cbee:	bf00      	nop
 801cbf0:	2400068c 	.word	0x2400068c

0801cbf4 <__sread>:
 801cbf4:	b510      	push	{r4, lr}
 801cbf6:	460c      	mov	r4, r1
 801cbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cbfc:	f000 f994 	bl	801cf28 <_read_r>
 801cc00:	2800      	cmp	r0, #0
 801cc02:	bfab      	itete	ge
 801cc04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cc06:	89a3      	ldrhlt	r3, [r4, #12]
 801cc08:	181b      	addge	r3, r3, r0
 801cc0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cc0e:	bfac      	ite	ge
 801cc10:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cc12:	81a3      	strhlt	r3, [r4, #12]
 801cc14:	bd10      	pop	{r4, pc}

0801cc16 <__swrite>:
 801cc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc1a:	461f      	mov	r7, r3
 801cc1c:	898b      	ldrh	r3, [r1, #12]
 801cc1e:	05db      	lsls	r3, r3, #23
 801cc20:	4605      	mov	r5, r0
 801cc22:	460c      	mov	r4, r1
 801cc24:	4616      	mov	r6, r2
 801cc26:	d505      	bpl.n	801cc34 <__swrite+0x1e>
 801cc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc2c:	2302      	movs	r3, #2
 801cc2e:	2200      	movs	r2, #0
 801cc30:	f000 f968 	bl	801cf04 <_lseek_r>
 801cc34:	89a3      	ldrh	r3, [r4, #12]
 801cc36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cc3e:	81a3      	strh	r3, [r4, #12]
 801cc40:	4632      	mov	r2, r6
 801cc42:	463b      	mov	r3, r7
 801cc44:	4628      	mov	r0, r5
 801cc46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc4a:	f000 b98f 	b.w	801cf6c <_write_r>

0801cc4e <__sseek>:
 801cc4e:	b510      	push	{r4, lr}
 801cc50:	460c      	mov	r4, r1
 801cc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc56:	f000 f955 	bl	801cf04 <_lseek_r>
 801cc5a:	1c43      	adds	r3, r0, #1
 801cc5c:	89a3      	ldrh	r3, [r4, #12]
 801cc5e:	bf15      	itete	ne
 801cc60:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cc62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cc66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cc6a:	81a3      	strheq	r3, [r4, #12]
 801cc6c:	bf18      	it	ne
 801cc6e:	81a3      	strhne	r3, [r4, #12]
 801cc70:	bd10      	pop	{r4, pc}

0801cc72 <__sclose>:
 801cc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc76:	f000 b935 	b.w	801cee4 <_close_r>

0801cc7a <_vsniprintf_r>:
 801cc7a:	b530      	push	{r4, r5, lr}
 801cc7c:	4614      	mov	r4, r2
 801cc7e:	2c00      	cmp	r4, #0
 801cc80:	b09b      	sub	sp, #108	@ 0x6c
 801cc82:	4605      	mov	r5, r0
 801cc84:	461a      	mov	r2, r3
 801cc86:	da05      	bge.n	801cc94 <_vsniprintf_r+0x1a>
 801cc88:	238b      	movs	r3, #139	@ 0x8b
 801cc8a:	6003      	str	r3, [r0, #0]
 801cc8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc90:	b01b      	add	sp, #108	@ 0x6c
 801cc92:	bd30      	pop	{r4, r5, pc}
 801cc94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cc98:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cc9c:	bf14      	ite	ne
 801cc9e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cca2:	4623      	moveq	r3, r4
 801cca4:	9302      	str	r3, [sp, #8]
 801cca6:	9305      	str	r3, [sp, #20]
 801cca8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ccac:	9100      	str	r1, [sp, #0]
 801ccae:	9104      	str	r1, [sp, #16]
 801ccb0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ccb4:	4669      	mov	r1, sp
 801ccb6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ccb8:	f000 fa86 	bl	801d1c8 <_svfiprintf_r>
 801ccbc:	1c43      	adds	r3, r0, #1
 801ccbe:	bfbc      	itt	lt
 801ccc0:	238b      	movlt	r3, #139	@ 0x8b
 801ccc2:	602b      	strlt	r3, [r5, #0]
 801ccc4:	2c00      	cmp	r4, #0
 801ccc6:	d0e3      	beq.n	801cc90 <_vsniprintf_r+0x16>
 801ccc8:	9b00      	ldr	r3, [sp, #0]
 801ccca:	2200      	movs	r2, #0
 801cccc:	701a      	strb	r2, [r3, #0]
 801ccce:	e7df      	b.n	801cc90 <_vsniprintf_r+0x16>

0801ccd0 <vsniprintf>:
 801ccd0:	b507      	push	{r0, r1, r2, lr}
 801ccd2:	9300      	str	r3, [sp, #0]
 801ccd4:	4613      	mov	r3, r2
 801ccd6:	460a      	mov	r2, r1
 801ccd8:	4601      	mov	r1, r0
 801ccda:	4803      	ldr	r0, [pc, #12]	@ (801cce8 <vsniprintf+0x18>)
 801ccdc:	6800      	ldr	r0, [r0, #0]
 801ccde:	f7ff ffcc 	bl	801cc7a <_vsniprintf_r>
 801cce2:	b003      	add	sp, #12
 801cce4:	f85d fb04 	ldr.w	pc, [sp], #4
 801cce8:	2400068c 	.word	0x2400068c

0801ccec <__swbuf_r>:
 801ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccee:	460e      	mov	r6, r1
 801ccf0:	4614      	mov	r4, r2
 801ccf2:	4605      	mov	r5, r0
 801ccf4:	b118      	cbz	r0, 801ccfe <__swbuf_r+0x12>
 801ccf6:	6a03      	ldr	r3, [r0, #32]
 801ccf8:	b90b      	cbnz	r3, 801ccfe <__swbuf_r+0x12>
 801ccfa:	f7ff fea5 	bl	801ca48 <__sinit>
 801ccfe:	69a3      	ldr	r3, [r4, #24]
 801cd00:	60a3      	str	r3, [r4, #8]
 801cd02:	89a3      	ldrh	r3, [r4, #12]
 801cd04:	071a      	lsls	r2, r3, #28
 801cd06:	d501      	bpl.n	801cd0c <__swbuf_r+0x20>
 801cd08:	6923      	ldr	r3, [r4, #16]
 801cd0a:	b943      	cbnz	r3, 801cd1e <__swbuf_r+0x32>
 801cd0c:	4621      	mov	r1, r4
 801cd0e:	4628      	mov	r0, r5
 801cd10:	f000 f82a 	bl	801cd68 <__swsetup_r>
 801cd14:	b118      	cbz	r0, 801cd1e <__swbuf_r+0x32>
 801cd16:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801cd1a:	4638      	mov	r0, r7
 801cd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd1e:	6823      	ldr	r3, [r4, #0]
 801cd20:	6922      	ldr	r2, [r4, #16]
 801cd22:	1a98      	subs	r0, r3, r2
 801cd24:	6963      	ldr	r3, [r4, #20]
 801cd26:	b2f6      	uxtb	r6, r6
 801cd28:	4283      	cmp	r3, r0
 801cd2a:	4637      	mov	r7, r6
 801cd2c:	dc05      	bgt.n	801cd3a <__swbuf_r+0x4e>
 801cd2e:	4621      	mov	r1, r4
 801cd30:	4628      	mov	r0, r5
 801cd32:	f000 fe99 	bl	801da68 <_fflush_r>
 801cd36:	2800      	cmp	r0, #0
 801cd38:	d1ed      	bne.n	801cd16 <__swbuf_r+0x2a>
 801cd3a:	68a3      	ldr	r3, [r4, #8]
 801cd3c:	3b01      	subs	r3, #1
 801cd3e:	60a3      	str	r3, [r4, #8]
 801cd40:	6823      	ldr	r3, [r4, #0]
 801cd42:	1c5a      	adds	r2, r3, #1
 801cd44:	6022      	str	r2, [r4, #0]
 801cd46:	701e      	strb	r6, [r3, #0]
 801cd48:	6962      	ldr	r2, [r4, #20]
 801cd4a:	1c43      	adds	r3, r0, #1
 801cd4c:	429a      	cmp	r2, r3
 801cd4e:	d004      	beq.n	801cd5a <__swbuf_r+0x6e>
 801cd50:	89a3      	ldrh	r3, [r4, #12]
 801cd52:	07db      	lsls	r3, r3, #31
 801cd54:	d5e1      	bpl.n	801cd1a <__swbuf_r+0x2e>
 801cd56:	2e0a      	cmp	r6, #10
 801cd58:	d1df      	bne.n	801cd1a <__swbuf_r+0x2e>
 801cd5a:	4621      	mov	r1, r4
 801cd5c:	4628      	mov	r0, r5
 801cd5e:	f000 fe83 	bl	801da68 <_fflush_r>
 801cd62:	2800      	cmp	r0, #0
 801cd64:	d0d9      	beq.n	801cd1a <__swbuf_r+0x2e>
 801cd66:	e7d6      	b.n	801cd16 <__swbuf_r+0x2a>

0801cd68 <__swsetup_r>:
 801cd68:	b538      	push	{r3, r4, r5, lr}
 801cd6a:	4b29      	ldr	r3, [pc, #164]	@ (801ce10 <__swsetup_r+0xa8>)
 801cd6c:	4605      	mov	r5, r0
 801cd6e:	6818      	ldr	r0, [r3, #0]
 801cd70:	460c      	mov	r4, r1
 801cd72:	b118      	cbz	r0, 801cd7c <__swsetup_r+0x14>
 801cd74:	6a03      	ldr	r3, [r0, #32]
 801cd76:	b90b      	cbnz	r3, 801cd7c <__swsetup_r+0x14>
 801cd78:	f7ff fe66 	bl	801ca48 <__sinit>
 801cd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd80:	0719      	lsls	r1, r3, #28
 801cd82:	d422      	bmi.n	801cdca <__swsetup_r+0x62>
 801cd84:	06da      	lsls	r2, r3, #27
 801cd86:	d407      	bmi.n	801cd98 <__swsetup_r+0x30>
 801cd88:	2209      	movs	r2, #9
 801cd8a:	602a      	str	r2, [r5, #0]
 801cd8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cd90:	81a3      	strh	r3, [r4, #12]
 801cd92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cd96:	e033      	b.n	801ce00 <__swsetup_r+0x98>
 801cd98:	0758      	lsls	r0, r3, #29
 801cd9a:	d512      	bpl.n	801cdc2 <__swsetup_r+0x5a>
 801cd9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cd9e:	b141      	cbz	r1, 801cdb2 <__swsetup_r+0x4a>
 801cda0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cda4:	4299      	cmp	r1, r3
 801cda6:	d002      	beq.n	801cdae <__swsetup_r+0x46>
 801cda8:	4628      	mov	r0, r5
 801cdaa:	f000 f95f 	bl	801d06c <_free_r>
 801cdae:	2300      	movs	r3, #0
 801cdb0:	6363      	str	r3, [r4, #52]	@ 0x34
 801cdb2:	89a3      	ldrh	r3, [r4, #12]
 801cdb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cdb8:	81a3      	strh	r3, [r4, #12]
 801cdba:	2300      	movs	r3, #0
 801cdbc:	6063      	str	r3, [r4, #4]
 801cdbe:	6923      	ldr	r3, [r4, #16]
 801cdc0:	6023      	str	r3, [r4, #0]
 801cdc2:	89a3      	ldrh	r3, [r4, #12]
 801cdc4:	f043 0308 	orr.w	r3, r3, #8
 801cdc8:	81a3      	strh	r3, [r4, #12]
 801cdca:	6923      	ldr	r3, [r4, #16]
 801cdcc:	b94b      	cbnz	r3, 801cde2 <__swsetup_r+0x7a>
 801cdce:	89a3      	ldrh	r3, [r4, #12]
 801cdd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cdd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cdd8:	d003      	beq.n	801cde2 <__swsetup_r+0x7a>
 801cdda:	4621      	mov	r1, r4
 801cddc:	4628      	mov	r0, r5
 801cdde:	f000 fea3 	bl	801db28 <__smakebuf_r>
 801cde2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cde6:	f013 0201 	ands.w	r2, r3, #1
 801cdea:	d00a      	beq.n	801ce02 <__swsetup_r+0x9a>
 801cdec:	2200      	movs	r2, #0
 801cdee:	60a2      	str	r2, [r4, #8]
 801cdf0:	6962      	ldr	r2, [r4, #20]
 801cdf2:	4252      	negs	r2, r2
 801cdf4:	61a2      	str	r2, [r4, #24]
 801cdf6:	6922      	ldr	r2, [r4, #16]
 801cdf8:	b942      	cbnz	r2, 801ce0c <__swsetup_r+0xa4>
 801cdfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cdfe:	d1c5      	bne.n	801cd8c <__swsetup_r+0x24>
 801ce00:	bd38      	pop	{r3, r4, r5, pc}
 801ce02:	0799      	lsls	r1, r3, #30
 801ce04:	bf58      	it	pl
 801ce06:	6962      	ldrpl	r2, [r4, #20]
 801ce08:	60a2      	str	r2, [r4, #8]
 801ce0a:	e7f4      	b.n	801cdf6 <__swsetup_r+0x8e>
 801ce0c:	2000      	movs	r0, #0
 801ce0e:	e7f7      	b.n	801ce00 <__swsetup_r+0x98>
 801ce10:	2400068c 	.word	0x2400068c

0801ce14 <memcmp>:
 801ce14:	b510      	push	{r4, lr}
 801ce16:	3901      	subs	r1, #1
 801ce18:	4402      	add	r2, r0
 801ce1a:	4290      	cmp	r0, r2
 801ce1c:	d101      	bne.n	801ce22 <memcmp+0xe>
 801ce1e:	2000      	movs	r0, #0
 801ce20:	e005      	b.n	801ce2e <memcmp+0x1a>
 801ce22:	7803      	ldrb	r3, [r0, #0]
 801ce24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ce28:	42a3      	cmp	r3, r4
 801ce2a:	d001      	beq.n	801ce30 <memcmp+0x1c>
 801ce2c:	1b18      	subs	r0, r3, r4
 801ce2e:	bd10      	pop	{r4, pc}
 801ce30:	3001      	adds	r0, #1
 801ce32:	e7f2      	b.n	801ce1a <memcmp+0x6>

0801ce34 <memmove>:
 801ce34:	4288      	cmp	r0, r1
 801ce36:	b510      	push	{r4, lr}
 801ce38:	eb01 0402 	add.w	r4, r1, r2
 801ce3c:	d902      	bls.n	801ce44 <memmove+0x10>
 801ce3e:	4284      	cmp	r4, r0
 801ce40:	4623      	mov	r3, r4
 801ce42:	d807      	bhi.n	801ce54 <memmove+0x20>
 801ce44:	1e43      	subs	r3, r0, #1
 801ce46:	42a1      	cmp	r1, r4
 801ce48:	d008      	beq.n	801ce5c <memmove+0x28>
 801ce4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce52:	e7f8      	b.n	801ce46 <memmove+0x12>
 801ce54:	4402      	add	r2, r0
 801ce56:	4601      	mov	r1, r0
 801ce58:	428a      	cmp	r2, r1
 801ce5a:	d100      	bne.n	801ce5e <memmove+0x2a>
 801ce5c:	bd10      	pop	{r4, pc}
 801ce5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce66:	e7f7      	b.n	801ce58 <memmove+0x24>

0801ce68 <memset>:
 801ce68:	4402      	add	r2, r0
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	4293      	cmp	r3, r2
 801ce6e:	d100      	bne.n	801ce72 <memset+0xa>
 801ce70:	4770      	bx	lr
 801ce72:	f803 1b01 	strb.w	r1, [r3], #1
 801ce76:	e7f9      	b.n	801ce6c <memset+0x4>

0801ce78 <strchr>:
 801ce78:	b2c9      	uxtb	r1, r1
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce82:	b112      	cbz	r2, 801ce8a <strchr+0x12>
 801ce84:	428a      	cmp	r2, r1
 801ce86:	d1f9      	bne.n	801ce7c <strchr+0x4>
 801ce88:	4770      	bx	lr
 801ce8a:	2900      	cmp	r1, #0
 801ce8c:	bf18      	it	ne
 801ce8e:	2000      	movne	r0, #0
 801ce90:	4770      	bx	lr

0801ce92 <strncmp>:
 801ce92:	b510      	push	{r4, lr}
 801ce94:	b16a      	cbz	r2, 801ceb2 <strncmp+0x20>
 801ce96:	3901      	subs	r1, #1
 801ce98:	1884      	adds	r4, r0, r2
 801ce9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801cea2:	429a      	cmp	r2, r3
 801cea4:	d103      	bne.n	801ceae <strncmp+0x1c>
 801cea6:	42a0      	cmp	r0, r4
 801cea8:	d001      	beq.n	801ceae <strncmp+0x1c>
 801ceaa:	2a00      	cmp	r2, #0
 801ceac:	d1f5      	bne.n	801ce9a <strncmp+0x8>
 801ceae:	1ad0      	subs	r0, r2, r3
 801ceb0:	bd10      	pop	{r4, pc}
 801ceb2:	4610      	mov	r0, r2
 801ceb4:	e7fc      	b.n	801ceb0 <strncmp+0x1e>

0801ceb6 <strstr>:
 801ceb6:	780a      	ldrb	r2, [r1, #0]
 801ceb8:	b570      	push	{r4, r5, r6, lr}
 801ceba:	b96a      	cbnz	r2, 801ced8 <strstr+0x22>
 801cebc:	bd70      	pop	{r4, r5, r6, pc}
 801cebe:	429a      	cmp	r2, r3
 801cec0:	d109      	bne.n	801ced6 <strstr+0x20>
 801cec2:	460c      	mov	r4, r1
 801cec4:	4605      	mov	r5, r0
 801cec6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d0f6      	beq.n	801cebc <strstr+0x6>
 801cece:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ced2:	429e      	cmp	r6, r3
 801ced4:	d0f7      	beq.n	801cec6 <strstr+0x10>
 801ced6:	3001      	adds	r0, #1
 801ced8:	7803      	ldrb	r3, [r0, #0]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d1ef      	bne.n	801cebe <strstr+0x8>
 801cede:	4618      	mov	r0, r3
 801cee0:	e7ec      	b.n	801cebc <strstr+0x6>
	...

0801cee4 <_close_r>:
 801cee4:	b538      	push	{r3, r4, r5, lr}
 801cee6:	4d06      	ldr	r5, [pc, #24]	@ (801cf00 <_close_r+0x1c>)
 801cee8:	2300      	movs	r3, #0
 801ceea:	4604      	mov	r4, r0
 801ceec:	4608      	mov	r0, r1
 801ceee:	602b      	str	r3, [r5, #0]
 801cef0:	f7e4 fff4 	bl	8001edc <_close>
 801cef4:	1c43      	adds	r3, r0, #1
 801cef6:	d102      	bne.n	801cefe <_close_r+0x1a>
 801cef8:	682b      	ldr	r3, [r5, #0]
 801cefa:	b103      	cbz	r3, 801cefe <_close_r+0x1a>
 801cefc:	6023      	str	r3, [r4, #0]
 801cefe:	bd38      	pop	{r3, r4, r5, pc}
 801cf00:	24013ab8 	.word	0x24013ab8

0801cf04 <_lseek_r>:
 801cf04:	b538      	push	{r3, r4, r5, lr}
 801cf06:	4d07      	ldr	r5, [pc, #28]	@ (801cf24 <_lseek_r+0x20>)
 801cf08:	4604      	mov	r4, r0
 801cf0a:	4608      	mov	r0, r1
 801cf0c:	4611      	mov	r1, r2
 801cf0e:	2200      	movs	r2, #0
 801cf10:	602a      	str	r2, [r5, #0]
 801cf12:	461a      	mov	r2, r3
 801cf14:	f7e5 f809 	bl	8001f2a <_lseek>
 801cf18:	1c43      	adds	r3, r0, #1
 801cf1a:	d102      	bne.n	801cf22 <_lseek_r+0x1e>
 801cf1c:	682b      	ldr	r3, [r5, #0]
 801cf1e:	b103      	cbz	r3, 801cf22 <_lseek_r+0x1e>
 801cf20:	6023      	str	r3, [r4, #0]
 801cf22:	bd38      	pop	{r3, r4, r5, pc}
 801cf24:	24013ab8 	.word	0x24013ab8

0801cf28 <_read_r>:
 801cf28:	b538      	push	{r3, r4, r5, lr}
 801cf2a:	4d07      	ldr	r5, [pc, #28]	@ (801cf48 <_read_r+0x20>)
 801cf2c:	4604      	mov	r4, r0
 801cf2e:	4608      	mov	r0, r1
 801cf30:	4611      	mov	r1, r2
 801cf32:	2200      	movs	r2, #0
 801cf34:	602a      	str	r2, [r5, #0]
 801cf36:	461a      	mov	r2, r3
 801cf38:	f7e4 ff97 	bl	8001e6a <_read>
 801cf3c:	1c43      	adds	r3, r0, #1
 801cf3e:	d102      	bne.n	801cf46 <_read_r+0x1e>
 801cf40:	682b      	ldr	r3, [r5, #0]
 801cf42:	b103      	cbz	r3, 801cf46 <_read_r+0x1e>
 801cf44:	6023      	str	r3, [r4, #0]
 801cf46:	bd38      	pop	{r3, r4, r5, pc}
 801cf48:	24013ab8 	.word	0x24013ab8

0801cf4c <_sbrk_r>:
 801cf4c:	b538      	push	{r3, r4, r5, lr}
 801cf4e:	4d06      	ldr	r5, [pc, #24]	@ (801cf68 <_sbrk_r+0x1c>)
 801cf50:	2300      	movs	r3, #0
 801cf52:	4604      	mov	r4, r0
 801cf54:	4608      	mov	r0, r1
 801cf56:	602b      	str	r3, [r5, #0]
 801cf58:	f7e4 fff4 	bl	8001f44 <_sbrk>
 801cf5c:	1c43      	adds	r3, r0, #1
 801cf5e:	d102      	bne.n	801cf66 <_sbrk_r+0x1a>
 801cf60:	682b      	ldr	r3, [r5, #0]
 801cf62:	b103      	cbz	r3, 801cf66 <_sbrk_r+0x1a>
 801cf64:	6023      	str	r3, [r4, #0]
 801cf66:	bd38      	pop	{r3, r4, r5, pc}
 801cf68:	24013ab8 	.word	0x24013ab8

0801cf6c <_write_r>:
 801cf6c:	b538      	push	{r3, r4, r5, lr}
 801cf6e:	4d07      	ldr	r5, [pc, #28]	@ (801cf8c <_write_r+0x20>)
 801cf70:	4604      	mov	r4, r0
 801cf72:	4608      	mov	r0, r1
 801cf74:	4611      	mov	r1, r2
 801cf76:	2200      	movs	r2, #0
 801cf78:	602a      	str	r2, [r5, #0]
 801cf7a:	461a      	mov	r2, r3
 801cf7c:	f7e4 ff92 	bl	8001ea4 <_write>
 801cf80:	1c43      	adds	r3, r0, #1
 801cf82:	d102      	bne.n	801cf8a <_write_r+0x1e>
 801cf84:	682b      	ldr	r3, [r5, #0]
 801cf86:	b103      	cbz	r3, 801cf8a <_write_r+0x1e>
 801cf88:	6023      	str	r3, [r4, #0]
 801cf8a:	bd38      	pop	{r3, r4, r5, pc}
 801cf8c:	24013ab8 	.word	0x24013ab8

0801cf90 <__errno>:
 801cf90:	4b01      	ldr	r3, [pc, #4]	@ (801cf98 <__errno+0x8>)
 801cf92:	6818      	ldr	r0, [r3, #0]
 801cf94:	4770      	bx	lr
 801cf96:	bf00      	nop
 801cf98:	2400068c 	.word	0x2400068c

0801cf9c <__libc_init_array>:
 801cf9c:	b570      	push	{r4, r5, r6, lr}
 801cf9e:	4d0d      	ldr	r5, [pc, #52]	@ (801cfd4 <__libc_init_array+0x38>)
 801cfa0:	4c0d      	ldr	r4, [pc, #52]	@ (801cfd8 <__libc_init_array+0x3c>)
 801cfa2:	1b64      	subs	r4, r4, r5
 801cfa4:	10a4      	asrs	r4, r4, #2
 801cfa6:	2600      	movs	r6, #0
 801cfa8:	42a6      	cmp	r6, r4
 801cfaa:	d109      	bne.n	801cfc0 <__libc_init_array+0x24>
 801cfac:	4d0b      	ldr	r5, [pc, #44]	@ (801cfdc <__libc_init_array+0x40>)
 801cfae:	4c0c      	ldr	r4, [pc, #48]	@ (801cfe0 <__libc_init_array+0x44>)
 801cfb0:	f000 fe64 	bl	801dc7c <_init>
 801cfb4:	1b64      	subs	r4, r4, r5
 801cfb6:	10a4      	asrs	r4, r4, #2
 801cfb8:	2600      	movs	r6, #0
 801cfba:	42a6      	cmp	r6, r4
 801cfbc:	d105      	bne.n	801cfca <__libc_init_array+0x2e>
 801cfbe:	bd70      	pop	{r4, r5, r6, pc}
 801cfc0:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfc4:	4798      	blx	r3
 801cfc6:	3601      	adds	r6, #1
 801cfc8:	e7ee      	b.n	801cfa8 <__libc_init_array+0xc>
 801cfca:	f855 3b04 	ldr.w	r3, [r5], #4
 801cfce:	4798      	blx	r3
 801cfd0:	3601      	adds	r6, #1
 801cfd2:	e7f2      	b.n	801cfba <__libc_init_array+0x1e>
 801cfd4:	0801ee38 	.word	0x0801ee38
 801cfd8:	0801ee38 	.word	0x0801ee38
 801cfdc:	0801ee38 	.word	0x0801ee38
 801cfe0:	0801ee44 	.word	0x0801ee44

0801cfe4 <__retarget_lock_init_recursive>:
 801cfe4:	4770      	bx	lr

0801cfe6 <__retarget_lock_acquire_recursive>:
 801cfe6:	4770      	bx	lr

0801cfe8 <__retarget_lock_release_recursive>:
 801cfe8:	4770      	bx	lr

0801cfea <strcpy>:
 801cfea:	4603      	mov	r3, r0
 801cfec:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cff0:	f803 2b01 	strb.w	r2, [r3], #1
 801cff4:	2a00      	cmp	r2, #0
 801cff6:	d1f9      	bne.n	801cfec <strcpy+0x2>
 801cff8:	4770      	bx	lr

0801cffa <memcpy>:
 801cffa:	440a      	add	r2, r1
 801cffc:	4291      	cmp	r1, r2
 801cffe:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d002:	d100      	bne.n	801d006 <memcpy+0xc>
 801d004:	4770      	bx	lr
 801d006:	b510      	push	{r4, lr}
 801d008:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d010:	4291      	cmp	r1, r2
 801d012:	d1f9      	bne.n	801d008 <memcpy+0xe>
 801d014:	bd10      	pop	{r4, pc}
	...

0801d018 <__assert_func>:
 801d018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d01a:	4614      	mov	r4, r2
 801d01c:	461a      	mov	r2, r3
 801d01e:	4b09      	ldr	r3, [pc, #36]	@ (801d044 <__assert_func+0x2c>)
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	4605      	mov	r5, r0
 801d024:	68d8      	ldr	r0, [r3, #12]
 801d026:	b954      	cbnz	r4, 801d03e <__assert_func+0x26>
 801d028:	4b07      	ldr	r3, [pc, #28]	@ (801d048 <__assert_func+0x30>)
 801d02a:	461c      	mov	r4, r3
 801d02c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d030:	9100      	str	r1, [sp, #0]
 801d032:	462b      	mov	r3, r5
 801d034:	4905      	ldr	r1, [pc, #20]	@ (801d04c <__assert_func+0x34>)
 801d036:	f000 fd3f 	bl	801dab8 <fiprintf>
 801d03a:	f000 fdd3 	bl	801dbe4 <abort>
 801d03e:	4b04      	ldr	r3, [pc, #16]	@ (801d050 <__assert_func+0x38>)
 801d040:	e7f4      	b.n	801d02c <__assert_func+0x14>
 801d042:	bf00      	nop
 801d044:	2400068c 	.word	0x2400068c
 801d048:	0801edf9 	.word	0x0801edf9
 801d04c:	0801edcb 	.word	0x0801edcb
 801d050:	0801edbe 	.word	0x0801edbe

0801d054 <__env_lock>:
 801d054:	4801      	ldr	r0, [pc, #4]	@ (801d05c <__env_lock+0x8>)
 801d056:	f7ff bfc6 	b.w	801cfe6 <__retarget_lock_acquire_recursive>
 801d05a:	bf00      	nop
 801d05c:	24013abc 	.word	0x24013abc

0801d060 <__env_unlock>:
 801d060:	4801      	ldr	r0, [pc, #4]	@ (801d068 <__env_unlock+0x8>)
 801d062:	f7ff bfc1 	b.w	801cfe8 <__retarget_lock_release_recursive>
 801d066:	bf00      	nop
 801d068:	24013abc 	.word	0x24013abc

0801d06c <_free_r>:
 801d06c:	b538      	push	{r3, r4, r5, lr}
 801d06e:	4605      	mov	r5, r0
 801d070:	2900      	cmp	r1, #0
 801d072:	d041      	beq.n	801d0f8 <_free_r+0x8c>
 801d074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d078:	1f0c      	subs	r4, r1, #4
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	bfb8      	it	lt
 801d07e:	18e4      	addlt	r4, r4, r3
 801d080:	f7ff fb30 	bl	801c6e4 <__malloc_lock>
 801d084:	4a1d      	ldr	r2, [pc, #116]	@ (801d0fc <_free_r+0x90>)
 801d086:	6813      	ldr	r3, [r2, #0]
 801d088:	b933      	cbnz	r3, 801d098 <_free_r+0x2c>
 801d08a:	6063      	str	r3, [r4, #4]
 801d08c:	6014      	str	r4, [r2, #0]
 801d08e:	4628      	mov	r0, r5
 801d090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d094:	f7ff bb2c 	b.w	801c6f0 <__malloc_unlock>
 801d098:	42a3      	cmp	r3, r4
 801d09a:	d908      	bls.n	801d0ae <_free_r+0x42>
 801d09c:	6820      	ldr	r0, [r4, #0]
 801d09e:	1821      	adds	r1, r4, r0
 801d0a0:	428b      	cmp	r3, r1
 801d0a2:	bf01      	itttt	eq
 801d0a4:	6819      	ldreq	r1, [r3, #0]
 801d0a6:	685b      	ldreq	r3, [r3, #4]
 801d0a8:	1809      	addeq	r1, r1, r0
 801d0aa:	6021      	streq	r1, [r4, #0]
 801d0ac:	e7ed      	b.n	801d08a <_free_r+0x1e>
 801d0ae:	461a      	mov	r2, r3
 801d0b0:	685b      	ldr	r3, [r3, #4]
 801d0b2:	b10b      	cbz	r3, 801d0b8 <_free_r+0x4c>
 801d0b4:	42a3      	cmp	r3, r4
 801d0b6:	d9fa      	bls.n	801d0ae <_free_r+0x42>
 801d0b8:	6811      	ldr	r1, [r2, #0]
 801d0ba:	1850      	adds	r0, r2, r1
 801d0bc:	42a0      	cmp	r0, r4
 801d0be:	d10b      	bne.n	801d0d8 <_free_r+0x6c>
 801d0c0:	6820      	ldr	r0, [r4, #0]
 801d0c2:	4401      	add	r1, r0
 801d0c4:	1850      	adds	r0, r2, r1
 801d0c6:	4283      	cmp	r3, r0
 801d0c8:	6011      	str	r1, [r2, #0]
 801d0ca:	d1e0      	bne.n	801d08e <_free_r+0x22>
 801d0cc:	6818      	ldr	r0, [r3, #0]
 801d0ce:	685b      	ldr	r3, [r3, #4]
 801d0d0:	6053      	str	r3, [r2, #4]
 801d0d2:	4408      	add	r0, r1
 801d0d4:	6010      	str	r0, [r2, #0]
 801d0d6:	e7da      	b.n	801d08e <_free_r+0x22>
 801d0d8:	d902      	bls.n	801d0e0 <_free_r+0x74>
 801d0da:	230c      	movs	r3, #12
 801d0dc:	602b      	str	r3, [r5, #0]
 801d0de:	e7d6      	b.n	801d08e <_free_r+0x22>
 801d0e0:	6820      	ldr	r0, [r4, #0]
 801d0e2:	1821      	adds	r1, r4, r0
 801d0e4:	428b      	cmp	r3, r1
 801d0e6:	bf04      	itt	eq
 801d0e8:	6819      	ldreq	r1, [r3, #0]
 801d0ea:	685b      	ldreq	r3, [r3, #4]
 801d0ec:	6063      	str	r3, [r4, #4]
 801d0ee:	bf04      	itt	eq
 801d0f0:	1809      	addeq	r1, r1, r0
 801d0f2:	6021      	streq	r1, [r4, #0]
 801d0f4:	6054      	str	r4, [r2, #4]
 801d0f6:	e7ca      	b.n	801d08e <_free_r+0x22>
 801d0f8:	bd38      	pop	{r3, r4, r5, pc}
 801d0fa:	bf00      	nop
 801d0fc:	24013978 	.word	0x24013978

0801d100 <_malloc_usable_size_r>:
 801d100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d104:	1f18      	subs	r0, r3, #4
 801d106:	2b00      	cmp	r3, #0
 801d108:	bfbc      	itt	lt
 801d10a:	580b      	ldrlt	r3, [r1, r0]
 801d10c:	18c0      	addlt	r0, r0, r3
 801d10e:	4770      	bx	lr

0801d110 <__ssputs_r>:
 801d110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d114:	688e      	ldr	r6, [r1, #8]
 801d116:	461f      	mov	r7, r3
 801d118:	42be      	cmp	r6, r7
 801d11a:	680b      	ldr	r3, [r1, #0]
 801d11c:	4682      	mov	sl, r0
 801d11e:	460c      	mov	r4, r1
 801d120:	4690      	mov	r8, r2
 801d122:	d82d      	bhi.n	801d180 <__ssputs_r+0x70>
 801d124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d128:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d12c:	d026      	beq.n	801d17c <__ssputs_r+0x6c>
 801d12e:	6965      	ldr	r5, [r4, #20]
 801d130:	6909      	ldr	r1, [r1, #16]
 801d132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d136:	eba3 0901 	sub.w	r9, r3, r1
 801d13a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d13e:	1c7b      	adds	r3, r7, #1
 801d140:	444b      	add	r3, r9
 801d142:	106d      	asrs	r5, r5, #1
 801d144:	429d      	cmp	r5, r3
 801d146:	bf38      	it	cc
 801d148:	461d      	movcc	r5, r3
 801d14a:	0553      	lsls	r3, r2, #21
 801d14c:	d527      	bpl.n	801d19e <__ssputs_r+0x8e>
 801d14e:	4629      	mov	r1, r5
 801d150:	f7ff fa48 	bl	801c5e4 <_malloc_r>
 801d154:	4606      	mov	r6, r0
 801d156:	b360      	cbz	r0, 801d1b2 <__ssputs_r+0xa2>
 801d158:	6921      	ldr	r1, [r4, #16]
 801d15a:	464a      	mov	r2, r9
 801d15c:	f7ff ff4d 	bl	801cffa <memcpy>
 801d160:	89a3      	ldrh	r3, [r4, #12]
 801d162:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d16a:	81a3      	strh	r3, [r4, #12]
 801d16c:	6126      	str	r6, [r4, #16]
 801d16e:	6165      	str	r5, [r4, #20]
 801d170:	444e      	add	r6, r9
 801d172:	eba5 0509 	sub.w	r5, r5, r9
 801d176:	6026      	str	r6, [r4, #0]
 801d178:	60a5      	str	r5, [r4, #8]
 801d17a:	463e      	mov	r6, r7
 801d17c:	42be      	cmp	r6, r7
 801d17e:	d900      	bls.n	801d182 <__ssputs_r+0x72>
 801d180:	463e      	mov	r6, r7
 801d182:	6820      	ldr	r0, [r4, #0]
 801d184:	4632      	mov	r2, r6
 801d186:	4641      	mov	r1, r8
 801d188:	f7ff fe54 	bl	801ce34 <memmove>
 801d18c:	68a3      	ldr	r3, [r4, #8]
 801d18e:	1b9b      	subs	r3, r3, r6
 801d190:	60a3      	str	r3, [r4, #8]
 801d192:	6823      	ldr	r3, [r4, #0]
 801d194:	4433      	add	r3, r6
 801d196:	6023      	str	r3, [r4, #0]
 801d198:	2000      	movs	r0, #0
 801d19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d19e:	462a      	mov	r2, r5
 801d1a0:	f7ff fb20 	bl	801c7e4 <_realloc_r>
 801d1a4:	4606      	mov	r6, r0
 801d1a6:	2800      	cmp	r0, #0
 801d1a8:	d1e0      	bne.n	801d16c <__ssputs_r+0x5c>
 801d1aa:	6921      	ldr	r1, [r4, #16]
 801d1ac:	4650      	mov	r0, sl
 801d1ae:	f7ff ff5d 	bl	801d06c <_free_r>
 801d1b2:	230c      	movs	r3, #12
 801d1b4:	f8ca 3000 	str.w	r3, [sl]
 801d1b8:	89a3      	ldrh	r3, [r4, #12]
 801d1ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d1be:	81a3      	strh	r3, [r4, #12]
 801d1c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1c4:	e7e9      	b.n	801d19a <__ssputs_r+0x8a>
	...

0801d1c8 <_svfiprintf_r>:
 801d1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1cc:	4698      	mov	r8, r3
 801d1ce:	898b      	ldrh	r3, [r1, #12]
 801d1d0:	061b      	lsls	r3, r3, #24
 801d1d2:	b09d      	sub	sp, #116	@ 0x74
 801d1d4:	4607      	mov	r7, r0
 801d1d6:	460d      	mov	r5, r1
 801d1d8:	4614      	mov	r4, r2
 801d1da:	d510      	bpl.n	801d1fe <_svfiprintf_r+0x36>
 801d1dc:	690b      	ldr	r3, [r1, #16]
 801d1de:	b973      	cbnz	r3, 801d1fe <_svfiprintf_r+0x36>
 801d1e0:	2140      	movs	r1, #64	@ 0x40
 801d1e2:	f7ff f9ff 	bl	801c5e4 <_malloc_r>
 801d1e6:	6028      	str	r0, [r5, #0]
 801d1e8:	6128      	str	r0, [r5, #16]
 801d1ea:	b930      	cbnz	r0, 801d1fa <_svfiprintf_r+0x32>
 801d1ec:	230c      	movs	r3, #12
 801d1ee:	603b      	str	r3, [r7, #0]
 801d1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1f4:	b01d      	add	sp, #116	@ 0x74
 801d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1fa:	2340      	movs	r3, #64	@ 0x40
 801d1fc:	616b      	str	r3, [r5, #20]
 801d1fe:	2300      	movs	r3, #0
 801d200:	9309      	str	r3, [sp, #36]	@ 0x24
 801d202:	2320      	movs	r3, #32
 801d204:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d208:	f8cd 800c 	str.w	r8, [sp, #12]
 801d20c:	2330      	movs	r3, #48	@ 0x30
 801d20e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d3ac <_svfiprintf_r+0x1e4>
 801d212:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d216:	f04f 0901 	mov.w	r9, #1
 801d21a:	4623      	mov	r3, r4
 801d21c:	469a      	mov	sl, r3
 801d21e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d222:	b10a      	cbz	r2, 801d228 <_svfiprintf_r+0x60>
 801d224:	2a25      	cmp	r2, #37	@ 0x25
 801d226:	d1f9      	bne.n	801d21c <_svfiprintf_r+0x54>
 801d228:	ebba 0b04 	subs.w	fp, sl, r4
 801d22c:	d00b      	beq.n	801d246 <_svfiprintf_r+0x7e>
 801d22e:	465b      	mov	r3, fp
 801d230:	4622      	mov	r2, r4
 801d232:	4629      	mov	r1, r5
 801d234:	4638      	mov	r0, r7
 801d236:	f7ff ff6b 	bl	801d110 <__ssputs_r>
 801d23a:	3001      	adds	r0, #1
 801d23c:	f000 80a7 	beq.w	801d38e <_svfiprintf_r+0x1c6>
 801d240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d242:	445a      	add	r2, fp
 801d244:	9209      	str	r2, [sp, #36]	@ 0x24
 801d246:	f89a 3000 	ldrb.w	r3, [sl]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	f000 809f 	beq.w	801d38e <_svfiprintf_r+0x1c6>
 801d250:	2300      	movs	r3, #0
 801d252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d25a:	f10a 0a01 	add.w	sl, sl, #1
 801d25e:	9304      	str	r3, [sp, #16]
 801d260:	9307      	str	r3, [sp, #28]
 801d262:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d266:	931a      	str	r3, [sp, #104]	@ 0x68
 801d268:	4654      	mov	r4, sl
 801d26a:	2205      	movs	r2, #5
 801d26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d270:	484e      	ldr	r0, [pc, #312]	@ (801d3ac <_svfiprintf_r+0x1e4>)
 801d272:	f7e3 f84d 	bl	8000310 <memchr>
 801d276:	9a04      	ldr	r2, [sp, #16]
 801d278:	b9d8      	cbnz	r0, 801d2b2 <_svfiprintf_r+0xea>
 801d27a:	06d0      	lsls	r0, r2, #27
 801d27c:	bf44      	itt	mi
 801d27e:	2320      	movmi	r3, #32
 801d280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d284:	0711      	lsls	r1, r2, #28
 801d286:	bf44      	itt	mi
 801d288:	232b      	movmi	r3, #43	@ 0x2b
 801d28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d28e:	f89a 3000 	ldrb.w	r3, [sl]
 801d292:	2b2a      	cmp	r3, #42	@ 0x2a
 801d294:	d015      	beq.n	801d2c2 <_svfiprintf_r+0xfa>
 801d296:	9a07      	ldr	r2, [sp, #28]
 801d298:	4654      	mov	r4, sl
 801d29a:	2000      	movs	r0, #0
 801d29c:	f04f 0c0a 	mov.w	ip, #10
 801d2a0:	4621      	mov	r1, r4
 801d2a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2a6:	3b30      	subs	r3, #48	@ 0x30
 801d2a8:	2b09      	cmp	r3, #9
 801d2aa:	d94b      	bls.n	801d344 <_svfiprintf_r+0x17c>
 801d2ac:	b1b0      	cbz	r0, 801d2dc <_svfiprintf_r+0x114>
 801d2ae:	9207      	str	r2, [sp, #28]
 801d2b0:	e014      	b.n	801d2dc <_svfiprintf_r+0x114>
 801d2b2:	eba0 0308 	sub.w	r3, r0, r8
 801d2b6:	fa09 f303 	lsl.w	r3, r9, r3
 801d2ba:	4313      	orrs	r3, r2
 801d2bc:	9304      	str	r3, [sp, #16]
 801d2be:	46a2      	mov	sl, r4
 801d2c0:	e7d2      	b.n	801d268 <_svfiprintf_r+0xa0>
 801d2c2:	9b03      	ldr	r3, [sp, #12]
 801d2c4:	1d19      	adds	r1, r3, #4
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	9103      	str	r1, [sp, #12]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	bfbb      	ittet	lt
 801d2ce:	425b      	neglt	r3, r3
 801d2d0:	f042 0202 	orrlt.w	r2, r2, #2
 801d2d4:	9307      	strge	r3, [sp, #28]
 801d2d6:	9307      	strlt	r3, [sp, #28]
 801d2d8:	bfb8      	it	lt
 801d2da:	9204      	strlt	r2, [sp, #16]
 801d2dc:	7823      	ldrb	r3, [r4, #0]
 801d2de:	2b2e      	cmp	r3, #46	@ 0x2e
 801d2e0:	d10a      	bne.n	801d2f8 <_svfiprintf_r+0x130>
 801d2e2:	7863      	ldrb	r3, [r4, #1]
 801d2e4:	2b2a      	cmp	r3, #42	@ 0x2a
 801d2e6:	d132      	bne.n	801d34e <_svfiprintf_r+0x186>
 801d2e8:	9b03      	ldr	r3, [sp, #12]
 801d2ea:	1d1a      	adds	r2, r3, #4
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	9203      	str	r2, [sp, #12]
 801d2f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d2f4:	3402      	adds	r4, #2
 801d2f6:	9305      	str	r3, [sp, #20]
 801d2f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d3bc <_svfiprintf_r+0x1f4>
 801d2fc:	7821      	ldrb	r1, [r4, #0]
 801d2fe:	2203      	movs	r2, #3
 801d300:	4650      	mov	r0, sl
 801d302:	f7e3 f805 	bl	8000310 <memchr>
 801d306:	b138      	cbz	r0, 801d318 <_svfiprintf_r+0x150>
 801d308:	9b04      	ldr	r3, [sp, #16]
 801d30a:	eba0 000a 	sub.w	r0, r0, sl
 801d30e:	2240      	movs	r2, #64	@ 0x40
 801d310:	4082      	lsls	r2, r0
 801d312:	4313      	orrs	r3, r2
 801d314:	3401      	adds	r4, #1
 801d316:	9304      	str	r3, [sp, #16]
 801d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d31c:	4824      	ldr	r0, [pc, #144]	@ (801d3b0 <_svfiprintf_r+0x1e8>)
 801d31e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d322:	2206      	movs	r2, #6
 801d324:	f7e2 fff4 	bl	8000310 <memchr>
 801d328:	2800      	cmp	r0, #0
 801d32a:	d036      	beq.n	801d39a <_svfiprintf_r+0x1d2>
 801d32c:	4b21      	ldr	r3, [pc, #132]	@ (801d3b4 <_svfiprintf_r+0x1ec>)
 801d32e:	bb1b      	cbnz	r3, 801d378 <_svfiprintf_r+0x1b0>
 801d330:	9b03      	ldr	r3, [sp, #12]
 801d332:	3307      	adds	r3, #7
 801d334:	f023 0307 	bic.w	r3, r3, #7
 801d338:	3308      	adds	r3, #8
 801d33a:	9303      	str	r3, [sp, #12]
 801d33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d33e:	4433      	add	r3, r6
 801d340:	9309      	str	r3, [sp, #36]	@ 0x24
 801d342:	e76a      	b.n	801d21a <_svfiprintf_r+0x52>
 801d344:	fb0c 3202 	mla	r2, ip, r2, r3
 801d348:	460c      	mov	r4, r1
 801d34a:	2001      	movs	r0, #1
 801d34c:	e7a8      	b.n	801d2a0 <_svfiprintf_r+0xd8>
 801d34e:	2300      	movs	r3, #0
 801d350:	3401      	adds	r4, #1
 801d352:	9305      	str	r3, [sp, #20]
 801d354:	4619      	mov	r1, r3
 801d356:	f04f 0c0a 	mov.w	ip, #10
 801d35a:	4620      	mov	r0, r4
 801d35c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d360:	3a30      	subs	r2, #48	@ 0x30
 801d362:	2a09      	cmp	r2, #9
 801d364:	d903      	bls.n	801d36e <_svfiprintf_r+0x1a6>
 801d366:	2b00      	cmp	r3, #0
 801d368:	d0c6      	beq.n	801d2f8 <_svfiprintf_r+0x130>
 801d36a:	9105      	str	r1, [sp, #20]
 801d36c:	e7c4      	b.n	801d2f8 <_svfiprintf_r+0x130>
 801d36e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d372:	4604      	mov	r4, r0
 801d374:	2301      	movs	r3, #1
 801d376:	e7f0      	b.n	801d35a <_svfiprintf_r+0x192>
 801d378:	ab03      	add	r3, sp, #12
 801d37a:	9300      	str	r3, [sp, #0]
 801d37c:	462a      	mov	r2, r5
 801d37e:	4b0e      	ldr	r3, [pc, #56]	@ (801d3b8 <_svfiprintf_r+0x1f0>)
 801d380:	a904      	add	r1, sp, #16
 801d382:	4638      	mov	r0, r7
 801d384:	f3af 8000 	nop.w
 801d388:	1c42      	adds	r2, r0, #1
 801d38a:	4606      	mov	r6, r0
 801d38c:	d1d6      	bne.n	801d33c <_svfiprintf_r+0x174>
 801d38e:	89ab      	ldrh	r3, [r5, #12]
 801d390:	065b      	lsls	r3, r3, #25
 801d392:	f53f af2d 	bmi.w	801d1f0 <_svfiprintf_r+0x28>
 801d396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d398:	e72c      	b.n	801d1f4 <_svfiprintf_r+0x2c>
 801d39a:	ab03      	add	r3, sp, #12
 801d39c:	9300      	str	r3, [sp, #0]
 801d39e:	462a      	mov	r2, r5
 801d3a0:	4b05      	ldr	r3, [pc, #20]	@ (801d3b8 <_svfiprintf_r+0x1f0>)
 801d3a2:	a904      	add	r1, sp, #16
 801d3a4:	4638      	mov	r0, r7
 801d3a6:	f000 f9bb 	bl	801d720 <_printf_i>
 801d3aa:	e7ed      	b.n	801d388 <_svfiprintf_r+0x1c0>
 801d3ac:	0801edfa 	.word	0x0801edfa
 801d3b0:	0801ee04 	.word	0x0801ee04
 801d3b4:	00000000 	.word	0x00000000
 801d3b8:	0801d111 	.word	0x0801d111
 801d3bc:	0801ee00 	.word	0x0801ee00

0801d3c0 <__sfputc_r>:
 801d3c0:	6893      	ldr	r3, [r2, #8]
 801d3c2:	3b01      	subs	r3, #1
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	b410      	push	{r4}
 801d3c8:	6093      	str	r3, [r2, #8]
 801d3ca:	da08      	bge.n	801d3de <__sfputc_r+0x1e>
 801d3cc:	6994      	ldr	r4, [r2, #24]
 801d3ce:	42a3      	cmp	r3, r4
 801d3d0:	db01      	blt.n	801d3d6 <__sfputc_r+0x16>
 801d3d2:	290a      	cmp	r1, #10
 801d3d4:	d103      	bne.n	801d3de <__sfputc_r+0x1e>
 801d3d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3da:	f7ff bc87 	b.w	801ccec <__swbuf_r>
 801d3de:	6813      	ldr	r3, [r2, #0]
 801d3e0:	1c58      	adds	r0, r3, #1
 801d3e2:	6010      	str	r0, [r2, #0]
 801d3e4:	7019      	strb	r1, [r3, #0]
 801d3e6:	4608      	mov	r0, r1
 801d3e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d3ec:	4770      	bx	lr

0801d3ee <__sfputs_r>:
 801d3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3f0:	4606      	mov	r6, r0
 801d3f2:	460f      	mov	r7, r1
 801d3f4:	4614      	mov	r4, r2
 801d3f6:	18d5      	adds	r5, r2, r3
 801d3f8:	42ac      	cmp	r4, r5
 801d3fa:	d101      	bne.n	801d400 <__sfputs_r+0x12>
 801d3fc:	2000      	movs	r0, #0
 801d3fe:	e007      	b.n	801d410 <__sfputs_r+0x22>
 801d400:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d404:	463a      	mov	r2, r7
 801d406:	4630      	mov	r0, r6
 801d408:	f7ff ffda 	bl	801d3c0 <__sfputc_r>
 801d40c:	1c43      	adds	r3, r0, #1
 801d40e:	d1f3      	bne.n	801d3f8 <__sfputs_r+0xa>
 801d410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d414 <_vfiprintf_r>:
 801d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d418:	460d      	mov	r5, r1
 801d41a:	b09d      	sub	sp, #116	@ 0x74
 801d41c:	4614      	mov	r4, r2
 801d41e:	4698      	mov	r8, r3
 801d420:	4606      	mov	r6, r0
 801d422:	b118      	cbz	r0, 801d42c <_vfiprintf_r+0x18>
 801d424:	6a03      	ldr	r3, [r0, #32]
 801d426:	b90b      	cbnz	r3, 801d42c <_vfiprintf_r+0x18>
 801d428:	f7ff fb0e 	bl	801ca48 <__sinit>
 801d42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d42e:	07d9      	lsls	r1, r3, #31
 801d430:	d405      	bmi.n	801d43e <_vfiprintf_r+0x2a>
 801d432:	89ab      	ldrh	r3, [r5, #12]
 801d434:	059a      	lsls	r2, r3, #22
 801d436:	d402      	bmi.n	801d43e <_vfiprintf_r+0x2a>
 801d438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d43a:	f7ff fdd4 	bl	801cfe6 <__retarget_lock_acquire_recursive>
 801d43e:	89ab      	ldrh	r3, [r5, #12]
 801d440:	071b      	lsls	r3, r3, #28
 801d442:	d501      	bpl.n	801d448 <_vfiprintf_r+0x34>
 801d444:	692b      	ldr	r3, [r5, #16]
 801d446:	b99b      	cbnz	r3, 801d470 <_vfiprintf_r+0x5c>
 801d448:	4629      	mov	r1, r5
 801d44a:	4630      	mov	r0, r6
 801d44c:	f7ff fc8c 	bl	801cd68 <__swsetup_r>
 801d450:	b170      	cbz	r0, 801d470 <_vfiprintf_r+0x5c>
 801d452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d454:	07dc      	lsls	r4, r3, #31
 801d456:	d504      	bpl.n	801d462 <_vfiprintf_r+0x4e>
 801d458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d45c:	b01d      	add	sp, #116	@ 0x74
 801d45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d462:	89ab      	ldrh	r3, [r5, #12]
 801d464:	0598      	lsls	r0, r3, #22
 801d466:	d4f7      	bmi.n	801d458 <_vfiprintf_r+0x44>
 801d468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d46a:	f7ff fdbd 	bl	801cfe8 <__retarget_lock_release_recursive>
 801d46e:	e7f3      	b.n	801d458 <_vfiprintf_r+0x44>
 801d470:	2300      	movs	r3, #0
 801d472:	9309      	str	r3, [sp, #36]	@ 0x24
 801d474:	2320      	movs	r3, #32
 801d476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d47a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d47e:	2330      	movs	r3, #48	@ 0x30
 801d480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d630 <_vfiprintf_r+0x21c>
 801d484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d488:	f04f 0901 	mov.w	r9, #1
 801d48c:	4623      	mov	r3, r4
 801d48e:	469a      	mov	sl, r3
 801d490:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d494:	b10a      	cbz	r2, 801d49a <_vfiprintf_r+0x86>
 801d496:	2a25      	cmp	r2, #37	@ 0x25
 801d498:	d1f9      	bne.n	801d48e <_vfiprintf_r+0x7a>
 801d49a:	ebba 0b04 	subs.w	fp, sl, r4
 801d49e:	d00b      	beq.n	801d4b8 <_vfiprintf_r+0xa4>
 801d4a0:	465b      	mov	r3, fp
 801d4a2:	4622      	mov	r2, r4
 801d4a4:	4629      	mov	r1, r5
 801d4a6:	4630      	mov	r0, r6
 801d4a8:	f7ff ffa1 	bl	801d3ee <__sfputs_r>
 801d4ac:	3001      	adds	r0, #1
 801d4ae:	f000 80a7 	beq.w	801d600 <_vfiprintf_r+0x1ec>
 801d4b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4b4:	445a      	add	r2, fp
 801d4b6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4b8:	f89a 3000 	ldrb.w	r3, [sl]
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	f000 809f 	beq.w	801d600 <_vfiprintf_r+0x1ec>
 801d4c2:	2300      	movs	r3, #0
 801d4c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d4c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4cc:	f10a 0a01 	add.w	sl, sl, #1
 801d4d0:	9304      	str	r3, [sp, #16]
 801d4d2:	9307      	str	r3, [sp, #28]
 801d4d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d4d8:	931a      	str	r3, [sp, #104]	@ 0x68
 801d4da:	4654      	mov	r4, sl
 801d4dc:	2205      	movs	r2, #5
 801d4de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d4e2:	4853      	ldr	r0, [pc, #332]	@ (801d630 <_vfiprintf_r+0x21c>)
 801d4e4:	f7e2 ff14 	bl	8000310 <memchr>
 801d4e8:	9a04      	ldr	r2, [sp, #16]
 801d4ea:	b9d8      	cbnz	r0, 801d524 <_vfiprintf_r+0x110>
 801d4ec:	06d1      	lsls	r1, r2, #27
 801d4ee:	bf44      	itt	mi
 801d4f0:	2320      	movmi	r3, #32
 801d4f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d4f6:	0713      	lsls	r3, r2, #28
 801d4f8:	bf44      	itt	mi
 801d4fa:	232b      	movmi	r3, #43	@ 0x2b
 801d4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d500:	f89a 3000 	ldrb.w	r3, [sl]
 801d504:	2b2a      	cmp	r3, #42	@ 0x2a
 801d506:	d015      	beq.n	801d534 <_vfiprintf_r+0x120>
 801d508:	9a07      	ldr	r2, [sp, #28]
 801d50a:	4654      	mov	r4, sl
 801d50c:	2000      	movs	r0, #0
 801d50e:	f04f 0c0a 	mov.w	ip, #10
 801d512:	4621      	mov	r1, r4
 801d514:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d518:	3b30      	subs	r3, #48	@ 0x30
 801d51a:	2b09      	cmp	r3, #9
 801d51c:	d94b      	bls.n	801d5b6 <_vfiprintf_r+0x1a2>
 801d51e:	b1b0      	cbz	r0, 801d54e <_vfiprintf_r+0x13a>
 801d520:	9207      	str	r2, [sp, #28]
 801d522:	e014      	b.n	801d54e <_vfiprintf_r+0x13a>
 801d524:	eba0 0308 	sub.w	r3, r0, r8
 801d528:	fa09 f303 	lsl.w	r3, r9, r3
 801d52c:	4313      	orrs	r3, r2
 801d52e:	9304      	str	r3, [sp, #16]
 801d530:	46a2      	mov	sl, r4
 801d532:	e7d2      	b.n	801d4da <_vfiprintf_r+0xc6>
 801d534:	9b03      	ldr	r3, [sp, #12]
 801d536:	1d19      	adds	r1, r3, #4
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	9103      	str	r1, [sp, #12]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	bfbb      	ittet	lt
 801d540:	425b      	neglt	r3, r3
 801d542:	f042 0202 	orrlt.w	r2, r2, #2
 801d546:	9307      	strge	r3, [sp, #28]
 801d548:	9307      	strlt	r3, [sp, #28]
 801d54a:	bfb8      	it	lt
 801d54c:	9204      	strlt	r2, [sp, #16]
 801d54e:	7823      	ldrb	r3, [r4, #0]
 801d550:	2b2e      	cmp	r3, #46	@ 0x2e
 801d552:	d10a      	bne.n	801d56a <_vfiprintf_r+0x156>
 801d554:	7863      	ldrb	r3, [r4, #1]
 801d556:	2b2a      	cmp	r3, #42	@ 0x2a
 801d558:	d132      	bne.n	801d5c0 <_vfiprintf_r+0x1ac>
 801d55a:	9b03      	ldr	r3, [sp, #12]
 801d55c:	1d1a      	adds	r2, r3, #4
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	9203      	str	r2, [sp, #12]
 801d562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d566:	3402      	adds	r4, #2
 801d568:	9305      	str	r3, [sp, #20]
 801d56a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d640 <_vfiprintf_r+0x22c>
 801d56e:	7821      	ldrb	r1, [r4, #0]
 801d570:	2203      	movs	r2, #3
 801d572:	4650      	mov	r0, sl
 801d574:	f7e2 fecc 	bl	8000310 <memchr>
 801d578:	b138      	cbz	r0, 801d58a <_vfiprintf_r+0x176>
 801d57a:	9b04      	ldr	r3, [sp, #16]
 801d57c:	eba0 000a 	sub.w	r0, r0, sl
 801d580:	2240      	movs	r2, #64	@ 0x40
 801d582:	4082      	lsls	r2, r0
 801d584:	4313      	orrs	r3, r2
 801d586:	3401      	adds	r4, #1
 801d588:	9304      	str	r3, [sp, #16]
 801d58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d58e:	4829      	ldr	r0, [pc, #164]	@ (801d634 <_vfiprintf_r+0x220>)
 801d590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d594:	2206      	movs	r2, #6
 801d596:	f7e2 febb 	bl	8000310 <memchr>
 801d59a:	2800      	cmp	r0, #0
 801d59c:	d03f      	beq.n	801d61e <_vfiprintf_r+0x20a>
 801d59e:	4b26      	ldr	r3, [pc, #152]	@ (801d638 <_vfiprintf_r+0x224>)
 801d5a0:	bb1b      	cbnz	r3, 801d5ea <_vfiprintf_r+0x1d6>
 801d5a2:	9b03      	ldr	r3, [sp, #12]
 801d5a4:	3307      	adds	r3, #7
 801d5a6:	f023 0307 	bic.w	r3, r3, #7
 801d5aa:	3308      	adds	r3, #8
 801d5ac:	9303      	str	r3, [sp, #12]
 801d5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5b0:	443b      	add	r3, r7
 801d5b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5b4:	e76a      	b.n	801d48c <_vfiprintf_r+0x78>
 801d5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5ba:	460c      	mov	r4, r1
 801d5bc:	2001      	movs	r0, #1
 801d5be:	e7a8      	b.n	801d512 <_vfiprintf_r+0xfe>
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	3401      	adds	r4, #1
 801d5c4:	9305      	str	r3, [sp, #20]
 801d5c6:	4619      	mov	r1, r3
 801d5c8:	f04f 0c0a 	mov.w	ip, #10
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d5d2:	3a30      	subs	r2, #48	@ 0x30
 801d5d4:	2a09      	cmp	r2, #9
 801d5d6:	d903      	bls.n	801d5e0 <_vfiprintf_r+0x1cc>
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d0c6      	beq.n	801d56a <_vfiprintf_r+0x156>
 801d5dc:	9105      	str	r1, [sp, #20]
 801d5de:	e7c4      	b.n	801d56a <_vfiprintf_r+0x156>
 801d5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801d5e4:	4604      	mov	r4, r0
 801d5e6:	2301      	movs	r3, #1
 801d5e8:	e7f0      	b.n	801d5cc <_vfiprintf_r+0x1b8>
 801d5ea:	ab03      	add	r3, sp, #12
 801d5ec:	9300      	str	r3, [sp, #0]
 801d5ee:	462a      	mov	r2, r5
 801d5f0:	4b12      	ldr	r3, [pc, #72]	@ (801d63c <_vfiprintf_r+0x228>)
 801d5f2:	a904      	add	r1, sp, #16
 801d5f4:	4630      	mov	r0, r6
 801d5f6:	f3af 8000 	nop.w
 801d5fa:	4607      	mov	r7, r0
 801d5fc:	1c78      	adds	r0, r7, #1
 801d5fe:	d1d6      	bne.n	801d5ae <_vfiprintf_r+0x19a>
 801d600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d602:	07d9      	lsls	r1, r3, #31
 801d604:	d405      	bmi.n	801d612 <_vfiprintf_r+0x1fe>
 801d606:	89ab      	ldrh	r3, [r5, #12]
 801d608:	059a      	lsls	r2, r3, #22
 801d60a:	d402      	bmi.n	801d612 <_vfiprintf_r+0x1fe>
 801d60c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d60e:	f7ff fceb 	bl	801cfe8 <__retarget_lock_release_recursive>
 801d612:	89ab      	ldrh	r3, [r5, #12]
 801d614:	065b      	lsls	r3, r3, #25
 801d616:	f53f af1f 	bmi.w	801d458 <_vfiprintf_r+0x44>
 801d61a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d61c:	e71e      	b.n	801d45c <_vfiprintf_r+0x48>
 801d61e:	ab03      	add	r3, sp, #12
 801d620:	9300      	str	r3, [sp, #0]
 801d622:	462a      	mov	r2, r5
 801d624:	4b05      	ldr	r3, [pc, #20]	@ (801d63c <_vfiprintf_r+0x228>)
 801d626:	a904      	add	r1, sp, #16
 801d628:	4630      	mov	r0, r6
 801d62a:	f000 f879 	bl	801d720 <_printf_i>
 801d62e:	e7e4      	b.n	801d5fa <_vfiprintf_r+0x1e6>
 801d630:	0801edfa 	.word	0x0801edfa
 801d634:	0801ee04 	.word	0x0801ee04
 801d638:	00000000 	.word	0x00000000
 801d63c:	0801d3ef 	.word	0x0801d3ef
 801d640:	0801ee00 	.word	0x0801ee00

0801d644 <_printf_common>:
 801d644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d648:	4616      	mov	r6, r2
 801d64a:	4698      	mov	r8, r3
 801d64c:	688a      	ldr	r2, [r1, #8]
 801d64e:	690b      	ldr	r3, [r1, #16]
 801d650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d654:	4293      	cmp	r3, r2
 801d656:	bfb8      	it	lt
 801d658:	4613      	movlt	r3, r2
 801d65a:	6033      	str	r3, [r6, #0]
 801d65c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d660:	4607      	mov	r7, r0
 801d662:	460c      	mov	r4, r1
 801d664:	b10a      	cbz	r2, 801d66a <_printf_common+0x26>
 801d666:	3301      	adds	r3, #1
 801d668:	6033      	str	r3, [r6, #0]
 801d66a:	6823      	ldr	r3, [r4, #0]
 801d66c:	0699      	lsls	r1, r3, #26
 801d66e:	bf42      	ittt	mi
 801d670:	6833      	ldrmi	r3, [r6, #0]
 801d672:	3302      	addmi	r3, #2
 801d674:	6033      	strmi	r3, [r6, #0]
 801d676:	6825      	ldr	r5, [r4, #0]
 801d678:	f015 0506 	ands.w	r5, r5, #6
 801d67c:	d106      	bne.n	801d68c <_printf_common+0x48>
 801d67e:	f104 0a19 	add.w	sl, r4, #25
 801d682:	68e3      	ldr	r3, [r4, #12]
 801d684:	6832      	ldr	r2, [r6, #0]
 801d686:	1a9b      	subs	r3, r3, r2
 801d688:	42ab      	cmp	r3, r5
 801d68a:	dc26      	bgt.n	801d6da <_printf_common+0x96>
 801d68c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d690:	6822      	ldr	r2, [r4, #0]
 801d692:	3b00      	subs	r3, #0
 801d694:	bf18      	it	ne
 801d696:	2301      	movne	r3, #1
 801d698:	0692      	lsls	r2, r2, #26
 801d69a:	d42b      	bmi.n	801d6f4 <_printf_common+0xb0>
 801d69c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d6a0:	4641      	mov	r1, r8
 801d6a2:	4638      	mov	r0, r7
 801d6a4:	47c8      	blx	r9
 801d6a6:	3001      	adds	r0, #1
 801d6a8:	d01e      	beq.n	801d6e8 <_printf_common+0xa4>
 801d6aa:	6823      	ldr	r3, [r4, #0]
 801d6ac:	6922      	ldr	r2, [r4, #16]
 801d6ae:	f003 0306 	and.w	r3, r3, #6
 801d6b2:	2b04      	cmp	r3, #4
 801d6b4:	bf02      	ittt	eq
 801d6b6:	68e5      	ldreq	r5, [r4, #12]
 801d6b8:	6833      	ldreq	r3, [r6, #0]
 801d6ba:	1aed      	subeq	r5, r5, r3
 801d6bc:	68a3      	ldr	r3, [r4, #8]
 801d6be:	bf0c      	ite	eq
 801d6c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d6c4:	2500      	movne	r5, #0
 801d6c6:	4293      	cmp	r3, r2
 801d6c8:	bfc4      	itt	gt
 801d6ca:	1a9b      	subgt	r3, r3, r2
 801d6cc:	18ed      	addgt	r5, r5, r3
 801d6ce:	2600      	movs	r6, #0
 801d6d0:	341a      	adds	r4, #26
 801d6d2:	42b5      	cmp	r5, r6
 801d6d4:	d11a      	bne.n	801d70c <_printf_common+0xc8>
 801d6d6:	2000      	movs	r0, #0
 801d6d8:	e008      	b.n	801d6ec <_printf_common+0xa8>
 801d6da:	2301      	movs	r3, #1
 801d6dc:	4652      	mov	r2, sl
 801d6de:	4641      	mov	r1, r8
 801d6e0:	4638      	mov	r0, r7
 801d6e2:	47c8      	blx	r9
 801d6e4:	3001      	adds	r0, #1
 801d6e6:	d103      	bne.n	801d6f0 <_printf_common+0xac>
 801d6e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6f0:	3501      	adds	r5, #1
 801d6f2:	e7c6      	b.n	801d682 <_printf_common+0x3e>
 801d6f4:	18e1      	adds	r1, r4, r3
 801d6f6:	1c5a      	adds	r2, r3, #1
 801d6f8:	2030      	movs	r0, #48	@ 0x30
 801d6fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d6fe:	4422      	add	r2, r4
 801d700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d708:	3302      	adds	r3, #2
 801d70a:	e7c7      	b.n	801d69c <_printf_common+0x58>
 801d70c:	2301      	movs	r3, #1
 801d70e:	4622      	mov	r2, r4
 801d710:	4641      	mov	r1, r8
 801d712:	4638      	mov	r0, r7
 801d714:	47c8      	blx	r9
 801d716:	3001      	adds	r0, #1
 801d718:	d0e6      	beq.n	801d6e8 <_printf_common+0xa4>
 801d71a:	3601      	adds	r6, #1
 801d71c:	e7d9      	b.n	801d6d2 <_printf_common+0x8e>
	...

0801d720 <_printf_i>:
 801d720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d724:	7e0f      	ldrb	r7, [r1, #24]
 801d726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d728:	2f78      	cmp	r7, #120	@ 0x78
 801d72a:	4691      	mov	r9, r2
 801d72c:	4680      	mov	r8, r0
 801d72e:	460c      	mov	r4, r1
 801d730:	469a      	mov	sl, r3
 801d732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d736:	d807      	bhi.n	801d748 <_printf_i+0x28>
 801d738:	2f62      	cmp	r7, #98	@ 0x62
 801d73a:	d80a      	bhi.n	801d752 <_printf_i+0x32>
 801d73c:	2f00      	cmp	r7, #0
 801d73e:	f000 80d2 	beq.w	801d8e6 <_printf_i+0x1c6>
 801d742:	2f58      	cmp	r7, #88	@ 0x58
 801d744:	f000 80b9 	beq.w	801d8ba <_printf_i+0x19a>
 801d748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d74c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d750:	e03a      	b.n	801d7c8 <_printf_i+0xa8>
 801d752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d756:	2b15      	cmp	r3, #21
 801d758:	d8f6      	bhi.n	801d748 <_printf_i+0x28>
 801d75a:	a101      	add	r1, pc, #4	@ (adr r1, 801d760 <_printf_i+0x40>)
 801d75c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d760:	0801d7b9 	.word	0x0801d7b9
 801d764:	0801d7cd 	.word	0x0801d7cd
 801d768:	0801d749 	.word	0x0801d749
 801d76c:	0801d749 	.word	0x0801d749
 801d770:	0801d749 	.word	0x0801d749
 801d774:	0801d749 	.word	0x0801d749
 801d778:	0801d7cd 	.word	0x0801d7cd
 801d77c:	0801d749 	.word	0x0801d749
 801d780:	0801d749 	.word	0x0801d749
 801d784:	0801d749 	.word	0x0801d749
 801d788:	0801d749 	.word	0x0801d749
 801d78c:	0801d8cd 	.word	0x0801d8cd
 801d790:	0801d7f7 	.word	0x0801d7f7
 801d794:	0801d887 	.word	0x0801d887
 801d798:	0801d749 	.word	0x0801d749
 801d79c:	0801d749 	.word	0x0801d749
 801d7a0:	0801d8ef 	.word	0x0801d8ef
 801d7a4:	0801d749 	.word	0x0801d749
 801d7a8:	0801d7f7 	.word	0x0801d7f7
 801d7ac:	0801d749 	.word	0x0801d749
 801d7b0:	0801d749 	.word	0x0801d749
 801d7b4:	0801d88f 	.word	0x0801d88f
 801d7b8:	6833      	ldr	r3, [r6, #0]
 801d7ba:	1d1a      	adds	r2, r3, #4
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	6032      	str	r2, [r6, #0]
 801d7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d7c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d7c8:	2301      	movs	r3, #1
 801d7ca:	e09d      	b.n	801d908 <_printf_i+0x1e8>
 801d7cc:	6833      	ldr	r3, [r6, #0]
 801d7ce:	6820      	ldr	r0, [r4, #0]
 801d7d0:	1d19      	adds	r1, r3, #4
 801d7d2:	6031      	str	r1, [r6, #0]
 801d7d4:	0606      	lsls	r6, r0, #24
 801d7d6:	d501      	bpl.n	801d7dc <_printf_i+0xbc>
 801d7d8:	681d      	ldr	r5, [r3, #0]
 801d7da:	e003      	b.n	801d7e4 <_printf_i+0xc4>
 801d7dc:	0645      	lsls	r5, r0, #25
 801d7de:	d5fb      	bpl.n	801d7d8 <_printf_i+0xb8>
 801d7e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d7e4:	2d00      	cmp	r5, #0
 801d7e6:	da03      	bge.n	801d7f0 <_printf_i+0xd0>
 801d7e8:	232d      	movs	r3, #45	@ 0x2d
 801d7ea:	426d      	negs	r5, r5
 801d7ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d7f0:	4859      	ldr	r0, [pc, #356]	@ (801d958 <_printf_i+0x238>)
 801d7f2:	230a      	movs	r3, #10
 801d7f4:	e011      	b.n	801d81a <_printf_i+0xfa>
 801d7f6:	6821      	ldr	r1, [r4, #0]
 801d7f8:	6833      	ldr	r3, [r6, #0]
 801d7fa:	0608      	lsls	r0, r1, #24
 801d7fc:	f853 5b04 	ldr.w	r5, [r3], #4
 801d800:	d402      	bmi.n	801d808 <_printf_i+0xe8>
 801d802:	0649      	lsls	r1, r1, #25
 801d804:	bf48      	it	mi
 801d806:	b2ad      	uxthmi	r5, r5
 801d808:	2f6f      	cmp	r7, #111	@ 0x6f
 801d80a:	4853      	ldr	r0, [pc, #332]	@ (801d958 <_printf_i+0x238>)
 801d80c:	6033      	str	r3, [r6, #0]
 801d80e:	bf14      	ite	ne
 801d810:	230a      	movne	r3, #10
 801d812:	2308      	moveq	r3, #8
 801d814:	2100      	movs	r1, #0
 801d816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d81a:	6866      	ldr	r6, [r4, #4]
 801d81c:	60a6      	str	r6, [r4, #8]
 801d81e:	2e00      	cmp	r6, #0
 801d820:	bfa2      	ittt	ge
 801d822:	6821      	ldrge	r1, [r4, #0]
 801d824:	f021 0104 	bicge.w	r1, r1, #4
 801d828:	6021      	strge	r1, [r4, #0]
 801d82a:	b90d      	cbnz	r5, 801d830 <_printf_i+0x110>
 801d82c:	2e00      	cmp	r6, #0
 801d82e:	d04b      	beq.n	801d8c8 <_printf_i+0x1a8>
 801d830:	4616      	mov	r6, r2
 801d832:	fbb5 f1f3 	udiv	r1, r5, r3
 801d836:	fb03 5711 	mls	r7, r3, r1, r5
 801d83a:	5dc7      	ldrb	r7, [r0, r7]
 801d83c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d840:	462f      	mov	r7, r5
 801d842:	42bb      	cmp	r3, r7
 801d844:	460d      	mov	r5, r1
 801d846:	d9f4      	bls.n	801d832 <_printf_i+0x112>
 801d848:	2b08      	cmp	r3, #8
 801d84a:	d10b      	bne.n	801d864 <_printf_i+0x144>
 801d84c:	6823      	ldr	r3, [r4, #0]
 801d84e:	07df      	lsls	r7, r3, #31
 801d850:	d508      	bpl.n	801d864 <_printf_i+0x144>
 801d852:	6923      	ldr	r3, [r4, #16]
 801d854:	6861      	ldr	r1, [r4, #4]
 801d856:	4299      	cmp	r1, r3
 801d858:	bfde      	ittt	le
 801d85a:	2330      	movle	r3, #48	@ 0x30
 801d85c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d860:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d864:	1b92      	subs	r2, r2, r6
 801d866:	6122      	str	r2, [r4, #16]
 801d868:	f8cd a000 	str.w	sl, [sp]
 801d86c:	464b      	mov	r3, r9
 801d86e:	aa03      	add	r2, sp, #12
 801d870:	4621      	mov	r1, r4
 801d872:	4640      	mov	r0, r8
 801d874:	f7ff fee6 	bl	801d644 <_printf_common>
 801d878:	3001      	adds	r0, #1
 801d87a:	d14a      	bne.n	801d912 <_printf_i+0x1f2>
 801d87c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d880:	b004      	add	sp, #16
 801d882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d886:	6823      	ldr	r3, [r4, #0]
 801d888:	f043 0320 	orr.w	r3, r3, #32
 801d88c:	6023      	str	r3, [r4, #0]
 801d88e:	4833      	ldr	r0, [pc, #204]	@ (801d95c <_printf_i+0x23c>)
 801d890:	2778      	movs	r7, #120	@ 0x78
 801d892:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d896:	6823      	ldr	r3, [r4, #0]
 801d898:	6831      	ldr	r1, [r6, #0]
 801d89a:	061f      	lsls	r7, r3, #24
 801d89c:	f851 5b04 	ldr.w	r5, [r1], #4
 801d8a0:	d402      	bmi.n	801d8a8 <_printf_i+0x188>
 801d8a2:	065f      	lsls	r7, r3, #25
 801d8a4:	bf48      	it	mi
 801d8a6:	b2ad      	uxthmi	r5, r5
 801d8a8:	6031      	str	r1, [r6, #0]
 801d8aa:	07d9      	lsls	r1, r3, #31
 801d8ac:	bf44      	itt	mi
 801d8ae:	f043 0320 	orrmi.w	r3, r3, #32
 801d8b2:	6023      	strmi	r3, [r4, #0]
 801d8b4:	b11d      	cbz	r5, 801d8be <_printf_i+0x19e>
 801d8b6:	2310      	movs	r3, #16
 801d8b8:	e7ac      	b.n	801d814 <_printf_i+0xf4>
 801d8ba:	4827      	ldr	r0, [pc, #156]	@ (801d958 <_printf_i+0x238>)
 801d8bc:	e7e9      	b.n	801d892 <_printf_i+0x172>
 801d8be:	6823      	ldr	r3, [r4, #0]
 801d8c0:	f023 0320 	bic.w	r3, r3, #32
 801d8c4:	6023      	str	r3, [r4, #0]
 801d8c6:	e7f6      	b.n	801d8b6 <_printf_i+0x196>
 801d8c8:	4616      	mov	r6, r2
 801d8ca:	e7bd      	b.n	801d848 <_printf_i+0x128>
 801d8cc:	6833      	ldr	r3, [r6, #0]
 801d8ce:	6825      	ldr	r5, [r4, #0]
 801d8d0:	6961      	ldr	r1, [r4, #20]
 801d8d2:	1d18      	adds	r0, r3, #4
 801d8d4:	6030      	str	r0, [r6, #0]
 801d8d6:	062e      	lsls	r6, r5, #24
 801d8d8:	681b      	ldr	r3, [r3, #0]
 801d8da:	d501      	bpl.n	801d8e0 <_printf_i+0x1c0>
 801d8dc:	6019      	str	r1, [r3, #0]
 801d8de:	e002      	b.n	801d8e6 <_printf_i+0x1c6>
 801d8e0:	0668      	lsls	r0, r5, #25
 801d8e2:	d5fb      	bpl.n	801d8dc <_printf_i+0x1bc>
 801d8e4:	8019      	strh	r1, [r3, #0]
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	6123      	str	r3, [r4, #16]
 801d8ea:	4616      	mov	r6, r2
 801d8ec:	e7bc      	b.n	801d868 <_printf_i+0x148>
 801d8ee:	6833      	ldr	r3, [r6, #0]
 801d8f0:	1d1a      	adds	r2, r3, #4
 801d8f2:	6032      	str	r2, [r6, #0]
 801d8f4:	681e      	ldr	r6, [r3, #0]
 801d8f6:	6862      	ldr	r2, [r4, #4]
 801d8f8:	2100      	movs	r1, #0
 801d8fa:	4630      	mov	r0, r6
 801d8fc:	f7e2 fd08 	bl	8000310 <memchr>
 801d900:	b108      	cbz	r0, 801d906 <_printf_i+0x1e6>
 801d902:	1b80      	subs	r0, r0, r6
 801d904:	6060      	str	r0, [r4, #4]
 801d906:	6863      	ldr	r3, [r4, #4]
 801d908:	6123      	str	r3, [r4, #16]
 801d90a:	2300      	movs	r3, #0
 801d90c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d910:	e7aa      	b.n	801d868 <_printf_i+0x148>
 801d912:	6923      	ldr	r3, [r4, #16]
 801d914:	4632      	mov	r2, r6
 801d916:	4649      	mov	r1, r9
 801d918:	4640      	mov	r0, r8
 801d91a:	47d0      	blx	sl
 801d91c:	3001      	adds	r0, #1
 801d91e:	d0ad      	beq.n	801d87c <_printf_i+0x15c>
 801d920:	6823      	ldr	r3, [r4, #0]
 801d922:	079b      	lsls	r3, r3, #30
 801d924:	d413      	bmi.n	801d94e <_printf_i+0x22e>
 801d926:	68e0      	ldr	r0, [r4, #12]
 801d928:	9b03      	ldr	r3, [sp, #12]
 801d92a:	4298      	cmp	r0, r3
 801d92c:	bfb8      	it	lt
 801d92e:	4618      	movlt	r0, r3
 801d930:	e7a6      	b.n	801d880 <_printf_i+0x160>
 801d932:	2301      	movs	r3, #1
 801d934:	4632      	mov	r2, r6
 801d936:	4649      	mov	r1, r9
 801d938:	4640      	mov	r0, r8
 801d93a:	47d0      	blx	sl
 801d93c:	3001      	adds	r0, #1
 801d93e:	d09d      	beq.n	801d87c <_printf_i+0x15c>
 801d940:	3501      	adds	r5, #1
 801d942:	68e3      	ldr	r3, [r4, #12]
 801d944:	9903      	ldr	r1, [sp, #12]
 801d946:	1a5b      	subs	r3, r3, r1
 801d948:	42ab      	cmp	r3, r5
 801d94a:	dcf2      	bgt.n	801d932 <_printf_i+0x212>
 801d94c:	e7eb      	b.n	801d926 <_printf_i+0x206>
 801d94e:	2500      	movs	r5, #0
 801d950:	f104 0619 	add.w	r6, r4, #25
 801d954:	e7f5      	b.n	801d942 <_printf_i+0x222>
 801d956:	bf00      	nop
 801d958:	0801ee0b 	.word	0x0801ee0b
 801d95c:	0801ee1c 	.word	0x0801ee1c

0801d960 <__sflush_r>:
 801d960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d968:	0716      	lsls	r6, r2, #28
 801d96a:	4605      	mov	r5, r0
 801d96c:	460c      	mov	r4, r1
 801d96e:	d454      	bmi.n	801da1a <__sflush_r+0xba>
 801d970:	684b      	ldr	r3, [r1, #4]
 801d972:	2b00      	cmp	r3, #0
 801d974:	dc02      	bgt.n	801d97c <__sflush_r+0x1c>
 801d976:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d978:	2b00      	cmp	r3, #0
 801d97a:	dd48      	ble.n	801da0e <__sflush_r+0xae>
 801d97c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d97e:	2e00      	cmp	r6, #0
 801d980:	d045      	beq.n	801da0e <__sflush_r+0xae>
 801d982:	2300      	movs	r3, #0
 801d984:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d988:	682f      	ldr	r7, [r5, #0]
 801d98a:	6a21      	ldr	r1, [r4, #32]
 801d98c:	602b      	str	r3, [r5, #0]
 801d98e:	d030      	beq.n	801d9f2 <__sflush_r+0x92>
 801d990:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d992:	89a3      	ldrh	r3, [r4, #12]
 801d994:	0759      	lsls	r1, r3, #29
 801d996:	d505      	bpl.n	801d9a4 <__sflush_r+0x44>
 801d998:	6863      	ldr	r3, [r4, #4]
 801d99a:	1ad2      	subs	r2, r2, r3
 801d99c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d99e:	b10b      	cbz	r3, 801d9a4 <__sflush_r+0x44>
 801d9a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d9a2:	1ad2      	subs	r2, r2, r3
 801d9a4:	2300      	movs	r3, #0
 801d9a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9a8:	6a21      	ldr	r1, [r4, #32]
 801d9aa:	4628      	mov	r0, r5
 801d9ac:	47b0      	blx	r6
 801d9ae:	1c43      	adds	r3, r0, #1
 801d9b0:	89a3      	ldrh	r3, [r4, #12]
 801d9b2:	d106      	bne.n	801d9c2 <__sflush_r+0x62>
 801d9b4:	6829      	ldr	r1, [r5, #0]
 801d9b6:	291d      	cmp	r1, #29
 801d9b8:	d82b      	bhi.n	801da12 <__sflush_r+0xb2>
 801d9ba:	4a2a      	ldr	r2, [pc, #168]	@ (801da64 <__sflush_r+0x104>)
 801d9bc:	410a      	asrs	r2, r1
 801d9be:	07d6      	lsls	r6, r2, #31
 801d9c0:	d427      	bmi.n	801da12 <__sflush_r+0xb2>
 801d9c2:	2200      	movs	r2, #0
 801d9c4:	6062      	str	r2, [r4, #4]
 801d9c6:	04d9      	lsls	r1, r3, #19
 801d9c8:	6922      	ldr	r2, [r4, #16]
 801d9ca:	6022      	str	r2, [r4, #0]
 801d9cc:	d504      	bpl.n	801d9d8 <__sflush_r+0x78>
 801d9ce:	1c42      	adds	r2, r0, #1
 801d9d0:	d101      	bne.n	801d9d6 <__sflush_r+0x76>
 801d9d2:	682b      	ldr	r3, [r5, #0]
 801d9d4:	b903      	cbnz	r3, 801d9d8 <__sflush_r+0x78>
 801d9d6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d9d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d9da:	602f      	str	r7, [r5, #0]
 801d9dc:	b1b9      	cbz	r1, 801da0e <__sflush_r+0xae>
 801d9de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d9e2:	4299      	cmp	r1, r3
 801d9e4:	d002      	beq.n	801d9ec <__sflush_r+0x8c>
 801d9e6:	4628      	mov	r0, r5
 801d9e8:	f7ff fb40 	bl	801d06c <_free_r>
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	6363      	str	r3, [r4, #52]	@ 0x34
 801d9f0:	e00d      	b.n	801da0e <__sflush_r+0xae>
 801d9f2:	2301      	movs	r3, #1
 801d9f4:	4628      	mov	r0, r5
 801d9f6:	47b0      	blx	r6
 801d9f8:	4602      	mov	r2, r0
 801d9fa:	1c50      	adds	r0, r2, #1
 801d9fc:	d1c9      	bne.n	801d992 <__sflush_r+0x32>
 801d9fe:	682b      	ldr	r3, [r5, #0]
 801da00:	2b00      	cmp	r3, #0
 801da02:	d0c6      	beq.n	801d992 <__sflush_r+0x32>
 801da04:	2b1d      	cmp	r3, #29
 801da06:	d001      	beq.n	801da0c <__sflush_r+0xac>
 801da08:	2b16      	cmp	r3, #22
 801da0a:	d11e      	bne.n	801da4a <__sflush_r+0xea>
 801da0c:	602f      	str	r7, [r5, #0]
 801da0e:	2000      	movs	r0, #0
 801da10:	e022      	b.n	801da58 <__sflush_r+0xf8>
 801da12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da16:	b21b      	sxth	r3, r3
 801da18:	e01b      	b.n	801da52 <__sflush_r+0xf2>
 801da1a:	690f      	ldr	r7, [r1, #16]
 801da1c:	2f00      	cmp	r7, #0
 801da1e:	d0f6      	beq.n	801da0e <__sflush_r+0xae>
 801da20:	0793      	lsls	r3, r2, #30
 801da22:	680e      	ldr	r6, [r1, #0]
 801da24:	bf08      	it	eq
 801da26:	694b      	ldreq	r3, [r1, #20]
 801da28:	600f      	str	r7, [r1, #0]
 801da2a:	bf18      	it	ne
 801da2c:	2300      	movne	r3, #0
 801da2e:	eba6 0807 	sub.w	r8, r6, r7
 801da32:	608b      	str	r3, [r1, #8]
 801da34:	f1b8 0f00 	cmp.w	r8, #0
 801da38:	dde9      	ble.n	801da0e <__sflush_r+0xae>
 801da3a:	6a21      	ldr	r1, [r4, #32]
 801da3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801da3e:	4643      	mov	r3, r8
 801da40:	463a      	mov	r2, r7
 801da42:	4628      	mov	r0, r5
 801da44:	47b0      	blx	r6
 801da46:	2800      	cmp	r0, #0
 801da48:	dc08      	bgt.n	801da5c <__sflush_r+0xfc>
 801da4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da52:	81a3      	strh	r3, [r4, #12]
 801da54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da5c:	4407      	add	r7, r0
 801da5e:	eba8 0800 	sub.w	r8, r8, r0
 801da62:	e7e7      	b.n	801da34 <__sflush_r+0xd4>
 801da64:	dfbffffe 	.word	0xdfbffffe

0801da68 <_fflush_r>:
 801da68:	b538      	push	{r3, r4, r5, lr}
 801da6a:	690b      	ldr	r3, [r1, #16]
 801da6c:	4605      	mov	r5, r0
 801da6e:	460c      	mov	r4, r1
 801da70:	b913      	cbnz	r3, 801da78 <_fflush_r+0x10>
 801da72:	2500      	movs	r5, #0
 801da74:	4628      	mov	r0, r5
 801da76:	bd38      	pop	{r3, r4, r5, pc}
 801da78:	b118      	cbz	r0, 801da82 <_fflush_r+0x1a>
 801da7a:	6a03      	ldr	r3, [r0, #32]
 801da7c:	b90b      	cbnz	r3, 801da82 <_fflush_r+0x1a>
 801da7e:	f7fe ffe3 	bl	801ca48 <__sinit>
 801da82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da86:	2b00      	cmp	r3, #0
 801da88:	d0f3      	beq.n	801da72 <_fflush_r+0xa>
 801da8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801da8c:	07d0      	lsls	r0, r2, #31
 801da8e:	d404      	bmi.n	801da9a <_fflush_r+0x32>
 801da90:	0599      	lsls	r1, r3, #22
 801da92:	d402      	bmi.n	801da9a <_fflush_r+0x32>
 801da94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801da96:	f7ff faa6 	bl	801cfe6 <__retarget_lock_acquire_recursive>
 801da9a:	4628      	mov	r0, r5
 801da9c:	4621      	mov	r1, r4
 801da9e:	f7ff ff5f 	bl	801d960 <__sflush_r>
 801daa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801daa4:	07da      	lsls	r2, r3, #31
 801daa6:	4605      	mov	r5, r0
 801daa8:	d4e4      	bmi.n	801da74 <_fflush_r+0xc>
 801daaa:	89a3      	ldrh	r3, [r4, #12]
 801daac:	059b      	lsls	r3, r3, #22
 801daae:	d4e1      	bmi.n	801da74 <_fflush_r+0xc>
 801dab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dab2:	f7ff fa99 	bl	801cfe8 <__retarget_lock_release_recursive>
 801dab6:	e7dd      	b.n	801da74 <_fflush_r+0xc>

0801dab8 <fiprintf>:
 801dab8:	b40e      	push	{r1, r2, r3}
 801daba:	b503      	push	{r0, r1, lr}
 801dabc:	4601      	mov	r1, r0
 801dabe:	ab03      	add	r3, sp, #12
 801dac0:	4805      	ldr	r0, [pc, #20]	@ (801dad8 <fiprintf+0x20>)
 801dac2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dac6:	6800      	ldr	r0, [r0, #0]
 801dac8:	9301      	str	r3, [sp, #4]
 801daca:	f7ff fca3 	bl	801d414 <_vfiprintf_r>
 801dace:	b002      	add	sp, #8
 801dad0:	f85d eb04 	ldr.w	lr, [sp], #4
 801dad4:	b003      	add	sp, #12
 801dad6:	4770      	bx	lr
 801dad8:	2400068c 	.word	0x2400068c

0801dadc <__swhatbuf_r>:
 801dadc:	b570      	push	{r4, r5, r6, lr}
 801dade:	460c      	mov	r4, r1
 801dae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dae4:	2900      	cmp	r1, #0
 801dae6:	b096      	sub	sp, #88	@ 0x58
 801dae8:	4615      	mov	r5, r2
 801daea:	461e      	mov	r6, r3
 801daec:	da0d      	bge.n	801db0a <__swhatbuf_r+0x2e>
 801daee:	89a3      	ldrh	r3, [r4, #12]
 801daf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801daf4:	f04f 0100 	mov.w	r1, #0
 801daf8:	bf14      	ite	ne
 801dafa:	2340      	movne	r3, #64	@ 0x40
 801dafc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db00:	2000      	movs	r0, #0
 801db02:	6031      	str	r1, [r6, #0]
 801db04:	602b      	str	r3, [r5, #0]
 801db06:	b016      	add	sp, #88	@ 0x58
 801db08:	bd70      	pop	{r4, r5, r6, pc}
 801db0a:	466a      	mov	r2, sp
 801db0c:	f000 f848 	bl	801dba0 <_fstat_r>
 801db10:	2800      	cmp	r0, #0
 801db12:	dbec      	blt.n	801daee <__swhatbuf_r+0x12>
 801db14:	9901      	ldr	r1, [sp, #4]
 801db16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801db1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801db1e:	4259      	negs	r1, r3
 801db20:	4159      	adcs	r1, r3
 801db22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801db26:	e7eb      	b.n	801db00 <__swhatbuf_r+0x24>

0801db28 <__smakebuf_r>:
 801db28:	898b      	ldrh	r3, [r1, #12]
 801db2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db2c:	079d      	lsls	r5, r3, #30
 801db2e:	4606      	mov	r6, r0
 801db30:	460c      	mov	r4, r1
 801db32:	d507      	bpl.n	801db44 <__smakebuf_r+0x1c>
 801db34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801db38:	6023      	str	r3, [r4, #0]
 801db3a:	6123      	str	r3, [r4, #16]
 801db3c:	2301      	movs	r3, #1
 801db3e:	6163      	str	r3, [r4, #20]
 801db40:	b003      	add	sp, #12
 801db42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db44:	ab01      	add	r3, sp, #4
 801db46:	466a      	mov	r2, sp
 801db48:	f7ff ffc8 	bl	801dadc <__swhatbuf_r>
 801db4c:	9f00      	ldr	r7, [sp, #0]
 801db4e:	4605      	mov	r5, r0
 801db50:	4639      	mov	r1, r7
 801db52:	4630      	mov	r0, r6
 801db54:	f7fe fd46 	bl	801c5e4 <_malloc_r>
 801db58:	b948      	cbnz	r0, 801db6e <__smakebuf_r+0x46>
 801db5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db5e:	059a      	lsls	r2, r3, #22
 801db60:	d4ee      	bmi.n	801db40 <__smakebuf_r+0x18>
 801db62:	f023 0303 	bic.w	r3, r3, #3
 801db66:	f043 0302 	orr.w	r3, r3, #2
 801db6a:	81a3      	strh	r3, [r4, #12]
 801db6c:	e7e2      	b.n	801db34 <__smakebuf_r+0xc>
 801db6e:	89a3      	ldrh	r3, [r4, #12]
 801db70:	6020      	str	r0, [r4, #0]
 801db72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801db76:	81a3      	strh	r3, [r4, #12]
 801db78:	9b01      	ldr	r3, [sp, #4]
 801db7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801db7e:	b15b      	cbz	r3, 801db98 <__smakebuf_r+0x70>
 801db80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db84:	4630      	mov	r0, r6
 801db86:	f000 f81d 	bl	801dbc4 <_isatty_r>
 801db8a:	b128      	cbz	r0, 801db98 <__smakebuf_r+0x70>
 801db8c:	89a3      	ldrh	r3, [r4, #12]
 801db8e:	f023 0303 	bic.w	r3, r3, #3
 801db92:	f043 0301 	orr.w	r3, r3, #1
 801db96:	81a3      	strh	r3, [r4, #12]
 801db98:	89a3      	ldrh	r3, [r4, #12]
 801db9a:	431d      	orrs	r5, r3
 801db9c:	81a5      	strh	r5, [r4, #12]
 801db9e:	e7cf      	b.n	801db40 <__smakebuf_r+0x18>

0801dba0 <_fstat_r>:
 801dba0:	b538      	push	{r3, r4, r5, lr}
 801dba2:	4d07      	ldr	r5, [pc, #28]	@ (801dbc0 <_fstat_r+0x20>)
 801dba4:	2300      	movs	r3, #0
 801dba6:	4604      	mov	r4, r0
 801dba8:	4608      	mov	r0, r1
 801dbaa:	4611      	mov	r1, r2
 801dbac:	602b      	str	r3, [r5, #0]
 801dbae:	f7e4 f9a1 	bl	8001ef4 <_fstat>
 801dbb2:	1c43      	adds	r3, r0, #1
 801dbb4:	d102      	bne.n	801dbbc <_fstat_r+0x1c>
 801dbb6:	682b      	ldr	r3, [r5, #0]
 801dbb8:	b103      	cbz	r3, 801dbbc <_fstat_r+0x1c>
 801dbba:	6023      	str	r3, [r4, #0]
 801dbbc:	bd38      	pop	{r3, r4, r5, pc}
 801dbbe:	bf00      	nop
 801dbc0:	24013ab8 	.word	0x24013ab8

0801dbc4 <_isatty_r>:
 801dbc4:	b538      	push	{r3, r4, r5, lr}
 801dbc6:	4d06      	ldr	r5, [pc, #24]	@ (801dbe0 <_isatty_r+0x1c>)
 801dbc8:	2300      	movs	r3, #0
 801dbca:	4604      	mov	r4, r0
 801dbcc:	4608      	mov	r0, r1
 801dbce:	602b      	str	r3, [r5, #0]
 801dbd0:	f7e4 f9a0 	bl	8001f14 <_isatty>
 801dbd4:	1c43      	adds	r3, r0, #1
 801dbd6:	d102      	bne.n	801dbde <_isatty_r+0x1a>
 801dbd8:	682b      	ldr	r3, [r5, #0]
 801dbda:	b103      	cbz	r3, 801dbde <_isatty_r+0x1a>
 801dbdc:	6023      	str	r3, [r4, #0]
 801dbde:	bd38      	pop	{r3, r4, r5, pc}
 801dbe0:	24013ab8 	.word	0x24013ab8

0801dbe4 <abort>:
 801dbe4:	b508      	push	{r3, lr}
 801dbe6:	2006      	movs	r0, #6
 801dbe8:	f000 f82c 	bl	801dc44 <raise>
 801dbec:	2001      	movs	r0, #1
 801dbee:	f7e4 f931 	bl	8001e54 <_exit>

0801dbf2 <_raise_r>:
 801dbf2:	291f      	cmp	r1, #31
 801dbf4:	b538      	push	{r3, r4, r5, lr}
 801dbf6:	4605      	mov	r5, r0
 801dbf8:	460c      	mov	r4, r1
 801dbfa:	d904      	bls.n	801dc06 <_raise_r+0x14>
 801dbfc:	2316      	movs	r3, #22
 801dbfe:	6003      	str	r3, [r0, #0]
 801dc00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc04:	bd38      	pop	{r3, r4, r5, pc}
 801dc06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dc08:	b112      	cbz	r2, 801dc10 <_raise_r+0x1e>
 801dc0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc0e:	b94b      	cbnz	r3, 801dc24 <_raise_r+0x32>
 801dc10:	4628      	mov	r0, r5
 801dc12:	f000 f831 	bl	801dc78 <_getpid_r>
 801dc16:	4622      	mov	r2, r4
 801dc18:	4601      	mov	r1, r0
 801dc1a:	4628      	mov	r0, r5
 801dc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc20:	f000 b818 	b.w	801dc54 <_kill_r>
 801dc24:	2b01      	cmp	r3, #1
 801dc26:	d00a      	beq.n	801dc3e <_raise_r+0x4c>
 801dc28:	1c59      	adds	r1, r3, #1
 801dc2a:	d103      	bne.n	801dc34 <_raise_r+0x42>
 801dc2c:	2316      	movs	r3, #22
 801dc2e:	6003      	str	r3, [r0, #0]
 801dc30:	2001      	movs	r0, #1
 801dc32:	e7e7      	b.n	801dc04 <_raise_r+0x12>
 801dc34:	2100      	movs	r1, #0
 801dc36:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dc3a:	4620      	mov	r0, r4
 801dc3c:	4798      	blx	r3
 801dc3e:	2000      	movs	r0, #0
 801dc40:	e7e0      	b.n	801dc04 <_raise_r+0x12>
	...

0801dc44 <raise>:
 801dc44:	4b02      	ldr	r3, [pc, #8]	@ (801dc50 <raise+0xc>)
 801dc46:	4601      	mov	r1, r0
 801dc48:	6818      	ldr	r0, [r3, #0]
 801dc4a:	f7ff bfd2 	b.w	801dbf2 <_raise_r>
 801dc4e:	bf00      	nop
 801dc50:	2400068c 	.word	0x2400068c

0801dc54 <_kill_r>:
 801dc54:	b538      	push	{r3, r4, r5, lr}
 801dc56:	4d07      	ldr	r5, [pc, #28]	@ (801dc74 <_kill_r+0x20>)
 801dc58:	2300      	movs	r3, #0
 801dc5a:	4604      	mov	r4, r0
 801dc5c:	4608      	mov	r0, r1
 801dc5e:	4611      	mov	r1, r2
 801dc60:	602b      	str	r3, [r5, #0]
 801dc62:	f7e4 f8e7 	bl	8001e34 <_kill>
 801dc66:	1c43      	adds	r3, r0, #1
 801dc68:	d102      	bne.n	801dc70 <_kill_r+0x1c>
 801dc6a:	682b      	ldr	r3, [r5, #0]
 801dc6c:	b103      	cbz	r3, 801dc70 <_kill_r+0x1c>
 801dc6e:	6023      	str	r3, [r4, #0]
 801dc70:	bd38      	pop	{r3, r4, r5, pc}
 801dc72:	bf00      	nop
 801dc74:	24013ab8 	.word	0x24013ab8

0801dc78 <_getpid_r>:
 801dc78:	f7e4 b8d4 	b.w	8001e24 <_getpid>

0801dc7c <_init>:
 801dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc7e:	bf00      	nop
 801dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc82:	bc08      	pop	{r3}
 801dc84:	469e      	mov	lr, r3
 801dc86:	4770      	bx	lr

0801dc88 <_fini>:
 801dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc8a:	bf00      	nop
 801dc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc8e:	bc08      	pop	{r3}
 801dc90:	469e      	mov	lr, r3
 801dc92:	4770      	bx	lr
