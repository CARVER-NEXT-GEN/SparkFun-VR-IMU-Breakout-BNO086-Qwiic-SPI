
BNO086_H745_UROS_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001da24  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c8  0801dcc8  0801dcc8  0001ecc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ee90  0801ee90  0002079c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ee90  0801ee90  0001fe90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ee98  0801ee98  0002079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801ee98  0801ee98  0001fe98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801eea4  0801eea4  0001fea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006dc  24000000  0801eea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240006dc  0801f584  000206dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400073c  0801f5e4  0002073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000134d8  240007a0  0801f644  000207a0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24013c78  0801f644  00020c78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002079c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002f3c5  00000000  00000000  000207ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000060cd  00000000  00000000  0004fb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021a8  00000000  00000000  00055c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000019e2  00000000  00000000  00057e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043cb1  00000000  00000000  000597ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030249  00000000  00000000  0009d49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a4bca  00000000  00000000  000cd6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000076  00000000  00000000  002722ae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009b08  00000000  00000000  00272324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008d  00000000  00000000  0027be2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007a0 	.word	0x240007a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801dcac 	.word	0x0801dcac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007a4 	.word	0x240007a4
 80002dc:	0801dcac 	.word	0x0801dcac

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <BNO086_READ_HSEM>:
		}
	}
}
#else

void BNO086_READ_HSEM(BNO086_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 8000748:	2000      	movs	r0, #0
 800074a:	f005 fc07 	bl	8005f5c <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	f040 80af 	bne.w	80008b4 <BNO086_READ_HSEM+0x174>
    	bno->quaternion.i = SRAM4_BNO086->Data[0];
 8000756:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800075a:	ed93 7b02 	vldr	d7, [r3, #8]
 800075e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4_BNO086->Data[1];
 8000768:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800076c:	ed93 7b04 	vldr	d7, [r3, #16]
 8000770:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4_BNO086->Data[2];
 800077a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800077e:	ed93 7b06 	vldr	d7, [r3, #24]
 8000782:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4_BNO086->Data[3];
 800078c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000790:	ed93 7b08 	vldr	d7, [r3, #32]
 8000794:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4_BNO086->Data[4];
 800079e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007a2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80007a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4_BNO086->Data[5];
 80007b0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007b4:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80007b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4_BNO086->Data[6];
 80007c2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007c6:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80007ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4_BNO086->Data[7];
 80007d4:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007d8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80007dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4_BNO086->Data[8];
 80007e6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007ea:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80007ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4_BNO086->Data[9];
 80007f8:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80007fc:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000800:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4_BNO086->Data[10];
 800080a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800080e:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 8000812:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4_BNO086->Data[11];
 800081c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000820:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000824:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4_BNO086->Data[12];
 800082e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000832:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8000836:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4_BNO086->Data[13];
 8000840:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000844:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000848:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4_BNO086->Data[14];
 8000852:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000856:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 800085a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4_BNO086->Data[15];
 8000864:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000868:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 800086c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4_BNO086->Data[16];
 8000876:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800087a:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 800087e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4_BNO086->Data[17];
 8000888:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800088c:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8000890:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4_BNO086->Data[18];
 800089a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800089e:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80008a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f005 fb6e 	bl	8005f90 <HAL_HSEM_Release>
    }
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c0:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <SystemInit+0xfc>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a3c      	ldr	r2, [pc, #240]	@ (80009b8 <SystemInit+0xfc>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80008d0:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <SystemInit+0xfc>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a38      	ldr	r2, [pc, #224]	@ (80009b8 <SystemInit+0xfc>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008dc:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <SystemInit+0x100>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d807      	bhi.n	80008f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <SystemInit+0x100>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f023 030f 	bic.w	r3, r3, #15
 80008f0:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <SystemInit+0x100>)
 80008f2:	f043 0307 	orr.w	r3, r3, #7
 80008f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008f8:	4b31      	ldr	r3, [pc, #196]	@ (80009c0 <SystemInit+0x104>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a30      	ldr	r2, [pc, #192]	@ (80009c0 <SystemInit+0x104>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b2e      	ldr	r3, [pc, #184]	@ (80009c0 <SystemInit+0x104>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <SystemInit+0x104>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	492c      	ldr	r1, [pc, #176]	@ (80009c0 <SystemInit+0x104>)
 8000910:	4b2c      	ldr	r3, [pc, #176]	@ (80009c4 <SystemInit+0x108>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000916:	4b29      	ldr	r3, [pc, #164]	@ (80009bc <SystemInit+0x100>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000922:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <SystemInit+0x100>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 030f 	bic.w	r3, r3, #15
 800092a:	4a24      	ldr	r2, [pc, #144]	@ (80009bc <SystemInit+0x100>)
 800092c:	f043 0307 	orr.w	r3, r3, #7
 8000930:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000932:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <SystemInit+0x104>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <SystemInit+0x104>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <SystemInit+0x104>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <SystemInit+0x104>)
 8000946:	4a20      	ldr	r2, [pc, #128]	@ (80009c8 <SystemInit+0x10c>)
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <SystemInit+0x104>)
 800094c:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <SystemInit+0x110>)
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <SystemInit+0x104>)
 8000952:	4a1f      	ldr	r2, [pc, #124]	@ (80009d0 <SystemInit+0x114>)
 8000954:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <SystemInit+0x104>)
 8000958:	2200      	movs	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800095c:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <SystemInit+0x104>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	@ (80009d0 <SystemInit+0x114>)
 8000960:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <SystemInit+0x104>)
 8000964:	2200      	movs	r2, #0
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000968:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <SystemInit+0x104>)
 800096a:	4a19      	ldr	r2, [pc, #100]	@ (80009d0 <SystemInit+0x114>)
 800096c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <SystemInit+0x104>)
 8000970:	2200      	movs	r2, #0
 8000972:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <SystemInit+0x104>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <SystemInit+0x104>)
 800097a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <SystemInit+0x104>)
 8000982:	2200      	movs	r2, #0
 8000984:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <SystemInit+0x118>)
 8000988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <SystemInit+0x118>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000990:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <SystemInit+0x11c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <SystemInit+0x120>)
 8000998:	4013      	ands	r3, r2
 800099a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800099e:	d202      	bcs.n	80009a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <SystemInit+0x124>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <SystemInit+0x128>)
 80009a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80009ac:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00
 80009bc:	52002000 	.word	0x52002000
 80009c0:	58024400 	.word	0x58024400
 80009c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80009c8:	02020200 	.word	0x02020200
 80009cc:	01ff0000 	.word	0x01ff0000
 80009d0:	01010280 	.word	0x01010280
 80009d4:	580000c0 	.word	0x580000c0
 80009d8:	5c001000 	.word	0x5c001000
 80009dc:	ffff0000 	.word	0xffff0000
 80009e0:	51008108 	.word	0x51008108
 80009e4:	52004000 	.word	0x52004000

080009e8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80009f4:	f00d f808 	bl	800da08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80009f8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b64 <pvPortMallocMicroROS+0x17c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000a00:	f000 f986 	bl	8000d10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000a04:	4b58      	ldr	r3, [pc, #352]	@ (8000b68 <pvPortMallocMicroROS+0x180>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f040 8090 	bne.w	8000b32 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d01e      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000a18:	2208      	movs	r2, #8
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d015      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f023 0307 	bic.w	r3, r3, #7
 8000a30:	3308      	adds	r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00b      	beq.n	8000a56 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	e7fd      	b.n	8000a52 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d06a      	beq.n	8000b32 <pvPortMallocMicroROS+0x14a>
 8000a5c:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d865      	bhi.n	8000b32 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000a66:	4b42      	ldr	r3, [pc, #264]	@ (8000b70 <pvPortMallocMicroROS+0x188>)
 8000a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000a6a:	4b41      	ldr	r3, [pc, #260]	@ (8000b70 <pvPortMallocMicroROS+0x188>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a70:	e004      	b.n	8000a7c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d903      	bls.n	8000a8e <pvPortMallocMicroROS+0xa6>
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d1f1      	bne.n	8000a72 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <pvPortMallocMicroROS+0x17c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d04c      	beq.n	8000b32 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	4413      	add	r3, r2
 8000aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	1ad2      	subs	r2, r2, r3
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d920      	bls.n	8000afc <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4413      	add	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00b      	beq.n	8000ae4 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ad0:	f383 8811 	msr	BASEPRI, r3
 8000ad4:	f3bf 8f6f 	isb	sy
 8000ad8:	f3bf 8f4f 	dsb	sy
 8000adc:	613b      	str	r3, [r7, #16]
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	1ad2      	subs	r2, r2, r3
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000af6:	69b8      	ldr	r0, [r7, #24]
 8000af8:	f000 f96c 	bl	8000dd4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <pvPortMallocMicroROS+0x18c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d203      	bcs.n	8000b1e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <pvPortMallocMicroROS+0x184>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	@ (8000b74 <pvPortMallocMicroROS+0x18c>)
 8000b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <pvPortMallocMicroROS+0x180>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	431a      	orrs	r2, r3
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000b32:	f00c ff77 	bl	800da24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00b      	beq.n	8000b58 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60fb      	str	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000b58:	69fb      	ldr	r3, [r7, #28]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3728      	adds	r7, #40	@ 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	240043c4 	.word	0x240043c4
 8000b68:	240043d0 	.word	0x240043d0
 8000b6c:	240043c8 	.word	0x240043c8
 8000b70:	240043bc 	.word	0x240043bc
 8000b74:	240043cc 	.word	0x240043cc

08000b78 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d04a      	beq.n	8000c20 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10b      	bne.n	8000bbe <vPortFreeMicroROS+0x46>
	__asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	f3bf 8f6f 	isb	sy
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	60fb      	str	r3, [r7, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d00b      	beq.n	8000bde <vPortFreeMicroROS+0x66>
	__asm volatile
 8000bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bca:	f383 8811 	msr	BASEPRI, r3
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	f3bf 8f4f 	dsb	sy
 8000bd6:	60bb      	str	r3, [r7, #8]
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	e7fd      	b.n	8000bda <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d019      	beq.n	8000c20 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d115      	bne.n	8000c20 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <vPortFreeMicroROS+0xb0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000c04:	f00c ff00 	bl	800da08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <vPortFreeMicroROS+0xb4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <vPortFreeMicroROS+0xb4>)
 8000c14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000c16:	6938      	ldr	r0, [r7, #16]
 8000c18:	f000 f8dc 	bl	8000dd4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000c1c:	f00c ff02 	bl	800da24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240043d0 	.word	0x240043d0
 8000c2c:	240043c8 	.word	0x240043c8

08000c30 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000c3c:	2308      	movs	r3, #8
 8000c3e:	425b      	negs	r3, r3
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <getBlockSize+0x38>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

	return count;
 8000c58:	68fb      	ldr	r3, [r7, #12]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	371c      	adds	r7, #28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	240043d0 	.word	0x240043d0

08000c6c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000c76:	f00c fec7 	bl	800da08 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000c7a:	6838      	ldr	r0, [r7, #0]
 8000c7c:	f7ff feb4 	bl	80009e8 <pvPortMallocMicroROS>
 8000c80:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d017      	beq.n	8000cb8 <pvPortReallocMicroROS+0x4c>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d014      	beq.n	8000cb8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffce 	bl	8000c30 <getBlockSize>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2208      	movs	r2, #8
 8000c98:	1a9b      	subs	r3, r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d201      	bcs.n	8000ca8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	68b8      	ldr	r0, [r7, #8]
 8000cae:	f01c f9bc 	bl	801d02a <memcpy>

		vPortFreeMicroROS(pv);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ff60 	bl	8000b78 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000cb8:	f00c feb4 	bl	800da24 <xTaskResumeAll>

	return newmem;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000cd0:	f00c fe9a 	bl	800da08 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000cde:	6978      	ldr	r0, [r7, #20]
 8000ce0:	f7ff fe82 	bl	80009e8 <pvPortMallocMicroROS>
 8000ce4:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000cea:	e004      	b.n	8000cf6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	613a      	str	r2, [r7, #16]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1e5a      	subs	r2, r3, #1
 8000cfa:	617a      	str	r2, [r7, #20]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f5      	bne.n	8000cec <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000d00:	f00c fe90 	bl	800da24 <xTaskResumeAll>
  	return mem;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000d16:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000d1a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <prvHeapInit+0xac>)
 8000d1e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00c      	beq.n	8000d44 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3307      	adds	r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f023 0307 	bic.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <prvHeapInit+0xac>)
 8000d40:	4413      	add	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000d48:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc0 <prvHeapInit+0xb0>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <prvHeapInit+0xb0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4413      	add	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 0307 	bic.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4a15      	ldr	r2, [pc, #84]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d70:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	1ad2      	subs	r2, r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <prvHeapInit+0xb4>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <prvHeapInit+0xb8>)
 8000d9e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <prvHeapInit+0xbc>)
 8000da6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000da8:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <prvHeapInit+0xc0>)
 8000daa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000dae:	601a      	str	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	240007bc 	.word	0x240007bc
 8000dc0:	240043bc 	.word	0x240043bc
 8000dc4:	240043c4 	.word	0x240043c4
 8000dc8:	240043cc 	.word	0x240043cc
 8000dcc:	240043c8 	.word	0x240043c8
 8000dd0:	240043d0 	.word	0x240043d0

08000dd4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ddc:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <prvInsertBlockIntoFreeList+0xac>)
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e002      	b.n	8000de8 <prvInsertBlockIntoFreeList+0x14>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d8f7      	bhi.n	8000de2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d108      	bne.n	8000e16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	441a      	add	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d118      	bne.n	8000e5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <prvInsertBlockIntoFreeList+0xb0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d00d      	beq.n	8000e52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	441a      	add	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e008      	b.n	8000e64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <prvInsertBlockIntoFreeList+0xb0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e003      	b.n	8000e64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d002      	beq.n	8000e72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	240043bc 	.word	0x240043bc
 8000e84:	240043c4 	.word	0x240043c4

08000e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000e90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <MX_DMA_Init+0x4c>)
 8000ea0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2105      	movs	r1, #5
 8000eb0:	200b      	movs	r0, #11
 8000eb2:	f001 fbff 	bl	80026b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f001 fc16 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2105      	movs	r1, #5
 8000ec0:	200c      	movs	r0, #12
 8000ec2:	f001 fbf7 	bl	80026b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec6:	200c      	movs	r0, #12
 8000ec8:	f001 fc0e 	bl	80026e8 <HAL_NVIC_EnableIRQ>

}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ee6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ee8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eec:	4904      	ldr	r1, [pc, #16]	@ (8000f00 <cubemx_transport_open+0x28>)
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f008 fce4 	bl	80098bc <HAL_UART_Receive_DMA>
    return true;
 8000ef4:	2301      	movs	r3, #1
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	240043d4 	.word	0x240043d4

08000f04 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f12:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f008 fd1d 	bl	8009954 <HAL_UART_DMAStop>
    return true;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f38:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d11b      	bne.n	8000f7c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	6978      	ldr	r0, [r7, #20]
 8000f4e:	f008 fc35 	bl	80097bc <HAL_UART_Transmit_DMA>
 8000f52:	4603      	mov	r3, r0
 8000f54:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f56:	e002      	b.n	8000f5e <cubemx_transport_write+0x3a>
            osDelay(1);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f00b f8cf 	bl	800c0fc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d104      	bne.n	8000f6e <cubemx_transport_write+0x4a>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	2b20      	cmp	r3, #32
 8000f6c:	d1f4      	bne.n	8000f58 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000f6e:	7cfb      	ldrb	r3, [r7, #19]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <cubemx_transport_write+0x54>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	e002      	b.n	8000f7e <cubemx_transport_write+0x5a>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e000      	b.n	8000f7e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000f7c:	2300      	movs	r3, #0
    }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000f9c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa2:	b672      	cpsid	i
}
 8000fa4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5a      	ldr	r2, [pc, #360]	@ (8001118 <cubemx_transport_read+0x190>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d068      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a57      	ldr	r2, [pc, #348]	@ (800111c <cubemx_transport_read+0x194>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d061      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a55      	ldr	r2, [pc, #340]	@ (8001120 <cubemx_transport_read+0x198>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05a      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a52      	ldr	r2, [pc, #328]	@ (8001124 <cubemx_transport_read+0x19c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d053      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <cubemx_transport_read+0x1a0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d04c      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <cubemx_transport_read+0x1a4>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d045      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a4b      	ldr	r2, [pc, #300]	@ (8001130 <cubemx_transport_read+0x1a8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d03e      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a48      	ldr	r2, [pc, #288]	@ (8001134 <cubemx_transport_read+0x1ac>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d037      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a46      	ldr	r2, [pc, #280]	@ (8001138 <cubemx_transport_read+0x1b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d030      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a43      	ldr	r2, [pc, #268]	@ (800113c <cubemx_transport_read+0x1b4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d029      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a41      	ldr	r2, [pc, #260]	@ (8001140 <cubemx_transport_read+0x1b8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d022      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3e      	ldr	r2, [pc, #248]	@ (8001144 <cubemx_transport_read+0x1bc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01b      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a3c      	ldr	r2, [pc, #240]	@ (8001148 <cubemx_transport_read+0x1c0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d014      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a39      	ldr	r2, [pc, #228]	@ (800114c <cubemx_transport_read+0x1c4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <cubemx_transport_read+0xfe>
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a37      	ldr	r2, [pc, #220]	@ (8001150 <cubemx_transport_read+0x1c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d006      	beq.n	8001086 <cubemx_transport_read+0xfe>
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a34      	ldr	r2, [pc, #208]	@ (8001154 <cubemx_transport_read+0x1cc>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d107      	bne.n	8001096 <cubemx_transport_read+0x10e>
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001094:	e006      	b.n	80010a4 <cubemx_transport_read+0x11c>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80010a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80010a8:	b662      	cpsie	i
}
 80010aa:	bf00      	nop
        __enable_irq();
        ms_used++;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f00b f822 	bl	800c0fc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b26      	ldr	r3, [pc, #152]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d104      	bne.n	80010ce <cubemx_transport_read+0x146>
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f6ff af6a 	blt.w	8000fa2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010d2:	e011      	b.n	80010f8 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	440b      	add	r3, r1
 80010de:	4920      	ldr	r1, [pc, #128]	@ (8001160 <cubemx_transport_read+0x1d8>)
 80010e0:	5c8a      	ldrb	r2, [r1, r2]
 80010e2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010ee:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010f0:	6013      	str	r3, [r2, #0]
        wrote++;
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <cubemx_transport_read+0x1d4>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <cubemx_transport_read+0x1d0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d003      	beq.n	800110c <cubemx_transport_read+0x184>
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	d3e3      	bcc.n	80010d4 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 800110c:	69bb      	ldr	r3, [r7, #24]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020010 	.word	0x40020010
 800111c:	40020028 	.word	0x40020028
 8001120:	40020040 	.word	0x40020040
 8001124:	40020058 	.word	0x40020058
 8001128:	40020070 	.word	0x40020070
 800112c:	40020088 	.word	0x40020088
 8001130:	400200a0 	.word	0x400200a0
 8001134:	400200b8 	.word	0x400200b8
 8001138:	40020410 	.word	0x40020410
 800113c:	40020428 	.word	0x40020428
 8001140:	40020440 	.word	0x40020440
 8001144:	40020458 	.word	0x40020458
 8001148:	40020470 	.word	0x40020470
 800114c:	40020488 	.word	0x40020488
 8001150:	400204a0 	.word	0x400204a0
 8001154:	400204b8 	.word	0x400204b8
 8001158:	24004bd8 	.word	0x24004bd8
 800115c:	24004bd4 	.word	0x24004bd4
 8001160:	240043d4 	.word	0x240043d4

08001164 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ETH_Init+0x80>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <MX_ETH_Init+0x84>)
 800116c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_ETH_Init+0x88>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001174:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_ETH_Init+0x88>)
 8001176:	2280      	movs	r2, #128	@ 0x80
 8001178:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <MX_ETH_Init+0x88>)
 800117c:	22e1      	movs	r2, #225	@ 0xe1
 800117e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001180:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_ETH_Init+0x88>)
 8001182:	2200      	movs	r2, #0
 8001184:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <MX_ETH_Init+0x88>)
 8001188:	2200      	movs	r2, #0
 800118a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800118c:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <MX_ETH_Init+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_ETH_Init+0x80>)
 8001194:	4a15      	ldr	r2, [pc, #84]	@ (80011ec <MX_ETH_Init+0x88>)
 8001196:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_ETH_Init+0x80>)
 800119a:	2201      	movs	r2, #1
 800119c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011a0:	4a13      	ldr	r2, [pc, #76]	@ (80011f0 <MX_ETH_Init+0x8c>)
 80011a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011a6:	4a13      	ldr	r2, [pc, #76]	@ (80011f4 <MX_ETH_Init+0x90>)
 80011a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011ac:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80011b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <MX_ETH_Init+0x80>)
 80011b4:	f004 f8ee 	bl	8005394 <HAL_ETH_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80011be:	f000 fc11 	bl	80019e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011c2:	2238      	movs	r2, #56	@ 0x38
 80011c4:	2100      	movs	r1, #0
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011c8:	f01b fe66 	bl	801ce98 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011ce:	2221      	movs	r2, #33	@ 0x21
 80011d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <MX_ETH_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24004c14 	.word	0x24004c14
 80011e8:	40028000 	.word	0x40028000
 80011ec:	24004cc4 	.word	0x24004cc4
 80011f0:	2400073c 	.word	0x2400073c
 80011f4:	240006dc 	.word	0x240006dc
 80011f8:	24004bdc 	.word	0x24004bdc

080011fc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	@ 0x38
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a59      	ldr	r2, [pc, #356]	@ (8001380 <HAL_ETH_MspInit+0x184>)
 800121a:	4293      	cmp	r3, r2
 800121c:	f040 80ab 	bne.w	8001376 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001220:	4b58      	ldr	r3, [pc, #352]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001222:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001226:	4a57      	ldr	r2, [pc, #348]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800122c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001230:	4b54      	ldr	r3, [pc, #336]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800123e:	4b51      	ldr	r3, [pc, #324]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001240:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001244:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800124a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800124e:	4b4d      	ldr	r3, [pc, #308]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800125c:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001262:	4a48      	ldr	r2, [pc, #288]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001268:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800126c:	4b45      	ldr	r3, [pc, #276]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001280:	4a40      	ldr	r2, [pc, #256]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128a:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a39      	ldr	r2, [pc, #228]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b36      	ldr	r3, [pc, #216]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a31      	ldr	r2, [pc, #196]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012da:	4a2a      	ldr	r2, [pc, #168]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e4:	4b27      	ldr	r3, [pc, #156]	@ (8001384 <HAL_ETH_MspInit+0x188>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012f2:	2332      	movs	r3, #50	@ 0x32
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001302:	230b      	movs	r3, #11
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	@ (8001388 <HAL_ETH_MspInit+0x18c>)
 800130e:	f004 fc75 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001312:	2386      	movs	r3, #134	@ 0x86
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	4817      	ldr	r0, [pc, #92]	@ (800138c <HAL_ETH_MspInit+0x190>)
 800132e:	f004 fc65 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <HAL_ETH_MspInit+0x194>)
 8001350:	f004 fc54 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001354:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001366:	230b      	movs	r3, #11
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4808      	ldr	r0, [pc, #32]	@ (8001394 <HAL_ETH_MspInit+0x198>)
 8001372:	f004 fc43 	bl	8005bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3738      	adds	r7, #56	@ 0x38
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40028000 	.word	0x40028000
 8001384:	58024400 	.word	0x58024400
 8001388:	58020800 	.word	0x58020800
 800138c:	58020000 	.word	0x58020000
 8001390:	58020400 	.word	0x58020400
 8001394:	58021800 	.word	0x58021800

08001398 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <MX_FREERTOS_Init+0x18>)
 800139e:	2100      	movs	r1, #0
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_FREERTOS_Init+0x1c>)
 80013a2:	f00a fe19 	bl	800bfd8 <osThreadNew>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a03      	ldr	r2, [pc, #12]	@ (80013b8 <MX_FREERTOS_Init+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	0801ddb8 	.word	0x0801ddb8
 80013b4:	080017b9 	.word	0x080017b9
 80013b8:	24004ccc 	.word	0x24004ccc

080013bc <MX_GPIO_Init>:
/** Configure pins
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
*/
void MX_GPIO_Init(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d2:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_GPIO_Init+0xa8>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001404:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001440:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <MX_GPIO_Init+0xa8>)
 8001442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_GPIO_Init+0xa8>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

}
 8001458:	bf00      	nop
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	58024400 	.word	0x58024400

08001468 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <MX_IWDG1_Init+0x34>)
 800146e:	4a0c      	ldr	r2, [pc, #48]	@ (80014a0 <MX_IWDG1_Init+0x38>)
 8001470:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_IWDG1_Init+0x34>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <MX_IWDG1_Init+0x34>)
 800147a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800147e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8001480:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_IWDG1_Init+0x34>)
 8001482:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001486:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_IWDG1_Init+0x34>)
 800148a:	f004 fdc1 	bl	8006010 <HAL_IWDG_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001494:	f000 faa6 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	24009b4c 	.word	0x24009b4c
 80014a0:	58004800 	.word	0x58004800

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80014aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014ae:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80014b0:	bf00      	nop
 80014b2:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <main+0xb8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <main+0x24>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	dcf4      	bgt.n	80014b2 <main+0xe>
  if ( timeout < 0 )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da01      	bge.n	80014d2 <main+0x2e>
  {
  Error_Handler();
 80014ce:	f000 fa89 	bl	80019e4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d2:	f000 ff97 	bl	8002404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d6:	f000 f843 	bl	8001560 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <main+0xb8>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e0:	4a1e      	ldr	r2, [pc, #120]	@ (800155c <main+0xb8>)
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <main+0xb8>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 80014f8:	2001      	movs	r0, #1
 80014fa:	f004 fd5d 	bl	8005fb8 <HAL_HSEM_ActivateNotification>

/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80014fe:	2000      	movs	r0, #0
 8001500:	f004 fd2c 	bl	8005f5c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001504:	2100      	movs	r1, #0
 8001506:	2000      	movs	r0, #0
 8001508:	f004 fd42 	bl	8005f90 <HAL_HSEM_Release>

/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800150c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001510:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001512:	bf00      	nop
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <main+0xb8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d104      	bne.n	800152a <main+0x86>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1e5a      	subs	r2, r3, #1
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	dcf4      	bgt.n	8001514 <main+0x70>
if ( timeout < 0 )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	da01      	bge.n	8001534 <main+0x90>
{
Error_Handler();
 8001530:	f000 fa58 	bl	80019e4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001534:	f7ff ff42 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001538:	f7ff fca6 	bl	8000e88 <MX_DMA_Init>
  MX_ETH_Init();
 800153c:	f7ff fe12 	bl	8001164 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001540:	f000 fe78 	bl	8002234 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8001544:	f000 fd50 	bl	8001fe8 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8001548:	f7ff ff8e 	bl	8001468 <MX_IWDG1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800154c:	f00a fcfa 	bl	800bf44 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001550:	f7ff ff22 	bl	8001398 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001554:	f00a fd1a 	bl	800bf8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <main+0xb4>
 800155c:	58024400 	.word	0x58024400

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09c      	sub	sp, #112	@ 0x70
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156a:	224c      	movs	r2, #76	@ 0x4c
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f01b fc92 	bl	801ce98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2220      	movs	r2, #32
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f01b fc8c 	bl	801ce98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001580:	2004      	movs	r0, #4
 8001582:	f004 fed5 	bl	8006330 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b36      	ldr	r3, [pc, #216]	@ (8001664 <SystemClock_Config+0x104>)
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	4a35      	ldr	r2, [pc, #212]	@ (8001664 <SystemClock_Config+0x104>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001596:	4b33      	ldr	r3, [pc, #204]	@ (8001664 <SystemClock_Config+0x104>)
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4b31      	ldr	r3, [pc, #196]	@ (8001668 <SystemClock_Config+0x108>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001668 <SystemClock_Config+0x108>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <SystemClock_Config+0x108>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015bc:	bf00      	nop
 80015be:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <SystemClock_Config+0x108>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ca:	d1f8      	bne.n	80015be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015cc:	2309      	movs	r3, #9
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015de:	2302      	movs	r3, #2
 80015e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 80015e6:	232a      	movs	r3, #42	@ 0x2a
 80015e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ee:	2304      	movs	r3, #4
 80015f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015f6:	230c      	movs	r3, #12
 80015f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80015fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001602:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fefb 	bl	8006404 <HAL_RCC_OscConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001614:	f000 f9e6 	bl	80019e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001618:	233f      	movs	r3, #63	@ 0x3f
 800161a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161c:	2303      	movs	r3, #3
 800161e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800162c:	2350      	movs	r3, #80	@ 0x50
 800162e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001636:	2340      	movs	r3, #64	@ 0x40
 8001638:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2103      	movs	r1, #3
 800163e:	4618      	mov	r0, r3
 8001640:	f005 fb3a 	bl	8006cb8 <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800164a:	f000 f9cb 	bl	80019e4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800164e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001652:	2100      	movs	r1, #0
 8001654:	2001      	movs	r0, #1
 8001656:	f005 fce5 	bl	8007024 <HAL_RCC_MCOConfig>
}
 800165a:	bf00      	nop
 800165c:	3770      	adds	r7, #112	@ 0x70
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58000400 	.word	0x58000400
 8001668:	58024800 	.word	0x58024800

0800166c <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d012      	beq.n	80016a4 <timer_callback+0x38>

		if(HSEM1_FLAG == 1){
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <timer_callback+0x40>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <timer_callback+0x2a>
			HSEM1_FLAG = 0;
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <timer_callback+0x40>)
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
			BNO086_READ_HSEM(&IMU_086);
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <timer_callback+0x44>)
 800168e:	f7ff f857 	bl	8000740 <BNO086_READ_HSEM>
			BNO086_Published();
 8001692:	f000 f811 	bl	80016b8 <BNO086_Published>
		}

		// Synchronize time with the agent
		rmw_uros_sync_session(1000);
 8001696:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800169a:	f00f fa3f 	bl	8010b1c <rmw_uros_sync_session>
		HAL_IWDG_Refresh(&hiwdg1);
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <timer_callback+0x48>)
 80016a0:	f004 fd05 	bl	80060ae <HAL_IWDG_Refresh>
	}

}
 80016a4:	bf00      	nop
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24009fb8 	.word	0x24009fb8
 80016b0:	24009fbc 	.word	0x24009fbc
 80016b4:	24009b4c 	.word	0x24009b4c

080016b8 <BNO086_Published>:

void BNO086_Published(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

	bno086_imu_msg.orientation.x = IMU_086.quaternion.i;
 80016bc:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <BNO086_Published+0xec>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016c6:	4b38      	ldr	r3, [pc, #224]	@ (80017a8 <BNO086_Published+0xf0>)
 80016c8:	ed83 7b06 	vstr	d7, [r3, #24]
	bno086_imu_msg.orientation.y = IMU_086.quaternion.j;
 80016cc:	4b35      	ldr	r3, [pc, #212]	@ (80017a4 <BNO086_Published+0xec>)
 80016ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d6:	4b34      	ldr	r3, [pc, #208]	@ (80017a8 <BNO086_Published+0xf0>)
 80016d8:	ed83 7b08 	vstr	d7, [r3, #32]
	bno086_imu_msg.orientation.z = IMU_086.quaternion.k;
 80016dc:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <BNO086_Published+0xec>)
 80016de:	edd3 7a02 	vldr	s15, [r3, #8]
 80016e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016e6:	4b30      	ldr	r3, [pc, #192]	@ (80017a8 <BNO086_Published+0xf0>)
 80016e8:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	bno086_imu_msg.orientation.w = IMU_086.quaternion.w;
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <BNO086_Published+0xec>)
 80016ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <BNO086_Published+0xf0>)
 80016f8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	/*IMU_086.acceleration.x;
	 * IMU_086.acceleration.y;
	 * IMU_086.acceleration.z; For Acceleration data (g)*/

	bno086_imu_msg.linear_acceleration.x = IMU_086.linear_acceleration.x;
 80016fc:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <BNO086_Published+0xec>)
 80016fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001702:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <BNO086_Published+0xf0>)
 8001708:	ed83 7b38 	vstr	d7, [r3, #224]	@ 0xe0
	bno086_imu_msg.linear_acceleration.y = IMU_086.linear_acceleration.y;
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <BNO086_Published+0xec>)
 800170e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001712:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <BNO086_Published+0xf0>)
 8001718:	ed83 7b3a 	vstr	d7, [r3, #232]	@ 0xe8
	bno086_imu_msg.linear_acceleration.z = IMU_086.linear_acceleration.z;
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <BNO086_Published+0xec>)
 800171e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001722:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <BNO086_Published+0xf0>)
 8001728:	ed83 7b3c 	vstr	d7, [r3, #240]	@ 0xf0

	bno086_imu_msg.angular_velocity.x = IMU_086.angular_velocity.x;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <BNO086_Published+0xec>)
 800172e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001732:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <BNO086_Published+0xf0>)
 8001738:	ed83 7b20 	vstr	d7, [r3, #128]	@ 0x80
	bno086_imu_msg.angular_velocity.y = IMU_086.angular_velocity.y;
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <BNO086_Published+0xec>)
 800173e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001742:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <BNO086_Published+0xf0>)
 8001748:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
	bno086_imu_msg.angular_velocity.z = IMU_086.angular_velocity.z;
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <BNO086_Published+0xec>)
 800174e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001752:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <BNO086_Published+0xf0>)
 8001758:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90

	bno086_magnetic_field_msg.magnetic_field.x = IMU_086.magnetometer.x;
 800175c:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <BNO086_Published+0xec>)
 800175e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001766:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <BNO086_Published+0xf4>)
 8001768:	ed83 7b06 	vstr	d7, [r3, #24]
	bno086_magnetic_field_msg.magnetic_field.y = IMU_086.magnetometer.y;
 800176c:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <BNO086_Published+0xec>)
 800176e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001772:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <BNO086_Published+0xf4>)
 8001778:	ed83 7b08 	vstr	d7, [r3, #32]
	bno086_magnetic_field_msg.magnetic_field.z = IMU_086.magnetometer.z;
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <BNO086_Published+0xec>)
 800177e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001782:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <BNO086_Published+0xf4>)
 8001788:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28

	/*IMU_086.euler_angle.roll;
	 * IMU_086.euler_angle.pitch;
	 * IMU_086.euler_angle.yaw; For Euler Angle data (degree)*/

	RCCHECK(rcl_publish(&bno086_imu_pub, &bno086_imu_msg, NULL));
 800178c:	2200      	movs	r2, #0
 800178e:	4906      	ldr	r1, [pc, #24]	@ (80017a8 <BNO086_Published+0xf0>)
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <BNO086_Published+0xf8>)
 8001792:	f00d fb7d 	bl	800ee90 <rcl_publish>
	RCCHECK(rcl_publish(&bno086_magnetic_field_pub, &bno086_magnetic_field_msg, NULL));
 8001796:	2200      	movs	r2, #0
 8001798:	4904      	ldr	r1, [pc, #16]	@ (80017ac <BNO086_Published+0xf4>)
 800179a:	4806      	ldr	r0, [pc, #24]	@ (80017b4 <BNO086_Published+0xfc>)
 800179c:	f00d fb78 	bl	800ee90 <rcl_publish>

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	24009fbc 	.word	0x24009fbc
 80017a8:	24009c40 	.word	0x24009c40
 80017ac:	24009d88 	.word	0x24009d88
 80017b0:	24009c3c 	.word	0x24009c3c
 80017b4:	24009d80 	.word	0x24009d80

080017b8 <StartDefaultTask>:
void StartDefaultTask(void *argument)
{
 80017b8:	b5b0      	push	{r4, r5, r7, lr}
 80017ba:	b0b2      	sub	sp, #200	@ 0xc8
 80017bc:	af02      	add	r7, sp, #8
 80017be:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 80017c2:	4b58      	ldr	r3, [pc, #352]	@ (8001924 <StartDefaultTask+0x16c>)
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	4b58      	ldr	r3, [pc, #352]	@ (8001928 <StartDefaultTask+0x170>)
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4b58      	ldr	r3, [pc, #352]	@ (800192c <StartDefaultTask+0x174>)
 80017cc:	4a58      	ldr	r2, [pc, #352]	@ (8001930 <StartDefaultTask+0x178>)
 80017ce:	4959      	ldr	r1, [pc, #356]	@ (8001934 <StartDefaultTask+0x17c>)
 80017d0:	2001      	movs	r0, #1
 80017d2:	f00e fb95 	bl	800ff00 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80017d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017da:	4618      	mov	r0, r3
 80017dc:	f00e fab2 	bl	800fd44 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80017e0:	4b55      	ldr	r3, [pc, #340]	@ (8001938 <StartDefaultTask+0x180>)
 80017e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 80017e6:	4b55      	ldr	r3, [pc, #340]	@ (800193c <StartDefaultTask+0x184>)
 80017e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 80017ec:	4b54      	ldr	r3, [pc, #336]	@ (8001940 <StartDefaultTask+0x188>)
 80017ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80017f2:	4b54      	ldr	r3, [pc, #336]	@ (8001944 <StartDefaultTask+0x18c>)
 80017f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80017f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017fc:	4618      	mov	r0, r3
 80017fe:	f00e faaf 	bl	800fd60 <rcutils_set_default_allocator>
 8001802:	4603      	mov	r3, r0
 8001804:	f083 0301 	eor.w	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 800180e:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001812:	484d      	ldr	r0, [pc, #308]	@ (8001948 <StartDefaultTask+0x190>)
 8001814:	f01b f9c0 	bl	801cb98 <iprintf>
  }


  allocator = rcl_get_default_allocator();
 8001818:	4c4c      	ldr	r4, [pc, #304]	@ (800194c <StartDefaultTask+0x194>)
 800181a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800181e:	4618      	mov	r0, r3
 8001820:	f00e fabc 	bl	800fd9c <rcutils_get_default_allocator>
 8001824:	4625      	mov	r5, r4
 8001826:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800182a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	602b      	str	r3, [r5, #0]

  //create init_options
    init_options = rcl_get_zero_initialized_init_options();
 8001832:	f00d f957 	bl	800eae4 <rcl_get_zero_initialized_init_options>
 8001836:	4603      	mov	r3, r0
 8001838:	4a45      	ldr	r2, [pc, #276]	@ (8001950 <StartDefaultTask+0x198>)
 800183a:	6013      	str	r3, [r2, #0]
    RCCHECK(rcl_init_options_init(&init_options, allocator));
 800183c:	4b43      	ldr	r3, [pc, #268]	@ (800194c <StartDefaultTask+0x194>)
 800183e:	466c      	mov	r4, sp
 8001840:	f103 020c 	add.w	r2, r3, #12
 8001844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001848:	e884 0003 	stmia.w	r4, {r0, r1}
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	4840      	ldr	r0, [pc, #256]	@ (8001950 <StartDefaultTask+0x198>)
 8001850:	f00d f94a 	bl	800eae8 <rcl_init_options_init>
    RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8001854:	2158      	movs	r1, #88	@ 0x58
 8001856:	483e      	ldr	r0, [pc, #248]	@ (8001950 <StartDefaultTask+0x198>)
 8001858:	f00d fa44 	bl	800ece4 <rcl_init_options_set_domain_id>

  //  rclc_support_init(&support, 0, NULL, &allocator);
   rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 800185c:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <StartDefaultTask+0x194>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <StartDefaultTask+0x198>)
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	483b      	ldr	r0, [pc, #236]	@ (8001954 <StartDefaultTask+0x19c>)
 8001868:	f00e f982 	bl	800fb70 <rclc_support_init_with_options>

   rclc_node_init_default(&node, "BNO086_node", "", &support);
 800186c:	4b39      	ldr	r3, [pc, #228]	@ (8001954 <StartDefaultTask+0x19c>)
 800186e:	4a3a      	ldr	r2, [pc, #232]	@ (8001958 <StartDefaultTask+0x1a0>)
 8001870:	493a      	ldr	r1, [pc, #232]	@ (800195c <StartDefaultTask+0x1a4>)
 8001872:	483b      	ldr	r0, [pc, #236]	@ (8001960 <StartDefaultTask+0x1a8>)
 8001874:	f00e f9b2 	bl	800fbdc <rclc_node_init_default>

  // create publisher
   rclc_publisher_init_best_effort(
 8001878:	f00f fcd8 	bl	801122c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800187c:	4602      	mov	r2, r0
 800187e:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <StartDefaultTask+0x1ac>)
 8001880:	4937      	ldr	r1, [pc, #220]	@ (8001960 <StartDefaultTask+0x1a8>)
 8001882:	4839      	ldr	r0, [pc, #228]	@ (8001968 <StartDefaultTask+0x1b0>)
 8001884:	f00e f9ec 	bl	800fc60 <rclc_publisher_init_best_effort>
       &bno086_imu_pub,
       &node,
       ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
       "BNO086_IMU_Publihser");

   rclc_publisher_init_best_effort(
 8001888:	f00f fce8 	bl	801125c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>
 800188c:	4602      	mov	r2, r0
 800188e:	4b37      	ldr	r3, [pc, #220]	@ (800196c <StartDefaultTask+0x1b4>)
 8001890:	4933      	ldr	r1, [pc, #204]	@ (8001960 <StartDefaultTask+0x1a8>)
 8001892:	4837      	ldr	r0, [pc, #220]	@ (8001970 <StartDefaultTask+0x1b8>)
 8001894:	f00e f9e4 	bl	800fc60 <rclc_publisher_init_best_effort>
	 &bno086_magnetic_field_pub,
	 &node,
	 ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, MagneticField),
	 "BNO086_MagneticField_Publihser");

   bno055_imu_msg.header.frame_id = micro_ros_string_utilities_init("bno055_imu_frame");
 8001898:	4c36      	ldr	r4, [pc, #216]	@ (8001974 <StartDefaultTask+0x1bc>)
 800189a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800189e:	4936      	ldr	r1, [pc, #216]	@ (8001978 <StartDefaultTask+0x1c0>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00d f8fb 	bl	800ea9c <micro_ros_string_utilities_init>
 80018a6:	f104 0308 	add.w	r3, r4, #8
 80018aa:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80018ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80018b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   bno055_magnetic_field_msg.header.frame_id = micro_ros_string_utilities_init("bno055_magnetic_field_frame");
 80018b4:	4c31      	ldr	r4, [pc, #196]	@ (800197c <StartDefaultTask+0x1c4>)
 80018b6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80018ba:	4931      	ldr	r1, [pc, #196]	@ (8001980 <StartDefaultTask+0x1c8>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f00d f8ed 	bl	800ea9c <micro_ros_string_utilities_init>
 80018c2:	f104 0308 	add.w	r3, r4, #8
 80018c6:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80018ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80018cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  // create timer
  rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(10), timer_callback);
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <StartDefaultTask+0x1cc>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4a2c      	ldr	r2, [pc, #176]	@ (8001988 <StartDefaultTask+0x1d0>)
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	491e      	ldr	r1, [pc, #120]	@ (8001954 <StartDefaultTask+0x19c>)
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <StartDefaultTask+0x1d4>)
 80018de:	f00e f9f9 	bl	800fcd4 <rclc_timer_init_default>

  rmw_uros_sync_session(1000);
 80018e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018e6:	f00f f919 	bl	8010b1c <rmw_uros_sync_session>


  executor = rclc_executor_get_zero_initialized_executor();
 80018ea:	4c29      	ldr	r4, [pc, #164]	@ (8001990 <StartDefaultTask+0x1d8>)
 80018ec:	463b      	mov	r3, r7
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00d fe5c 	bl	800f5ac <rclc_executor_get_zero_initialized_executor>
 80018f4:	4620      	mov	r0, r4
 80018f6:	463b      	mov	r3, r7
 80018f8:	2288      	movs	r2, #136	@ 0x88
 80018fa:	4619      	mov	r1, r3
 80018fc:	f01b fb95 	bl	801d02a <memcpy>
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <StartDefaultTask+0x194>)
 8001902:	2201      	movs	r2, #1
 8001904:	4913      	ldr	r1, [pc, #76]	@ (8001954 <StartDefaultTask+0x19c>)
 8001906:	4822      	ldr	r0, [pc, #136]	@ (8001990 <StartDefaultTask+0x1d8>)
 8001908:	f00d fe5a 	bl	800f5c0 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer_); // add timer
 800190c:	491f      	ldr	r1, [pc, #124]	@ (800198c <StartDefaultTask+0x1d4>)
 800190e:	4820      	ldr	r0, [pc, #128]	@ (8001990 <StartDefaultTask+0x1d8>)
 8001910:	f00d fed2 	bl	800f6b8 <rclc_executor_add_timer>
  rclc_executor_spin(&executor);
 8001914:	481e      	ldr	r0, [pc, #120]	@ (8001990 <StartDefaultTask+0x1d8>)
 8001916:	f00e f8e9 	bl	800faec <rclc_executor_spin>

  for(;;)
  {
    osDelay(10);
 800191a:	200a      	movs	r0, #10
 800191c:	f00a fbee 	bl	800c0fc <osDelay>
 8001920:	e7fb      	b.n	800191a <StartDefaultTask+0x162>
 8001922:	bf00      	nop
 8001924:	08000f89 	.word	0x08000f89
 8001928:	08000f25 	.word	0x08000f25
 800192c:	08000f05 	.word	0x08000f05
 8001930:	08000ed9 	.word	0x08000ed9
 8001934:	2400a064 	.word	0x2400a064
 8001938:	080019f1 	.word	0x080019f1
 800193c:	08001a35 	.word	0x08001a35
 8001940:	08001a6d 	.word	0x08001a6d
 8001944:	08001ad9 	.word	0x08001ad9
 8001948:	0801dcd4 	.word	0x0801dcd4
 800194c:	24009b90 	.word	0x24009b90
 8001950:	24009bac 	.word	0x24009bac
 8001954:	24009b5c 	.word	0x24009b5c
 8001958:	0801dcfc 	.word	0x0801dcfc
 800195c:	0801dd00 	.word	0x0801dd00
 8001960:	24009ba4 	.word	0x24009ba4
 8001964:	0801dd0c 	.word	0x0801dd0c
 8001968:	24009c3c 	.word	0x24009c3c
 800196c:	0801dd24 	.word	0x0801dd24
 8001970:	24009d80 	.word	0x24009d80
 8001974:	24009e00 	.word	0x24009e00
 8001978:	0801dd44 	.word	0x0801dd44
 800197c:	24009f40 	.word	0x24009f40
 8001980:	0801dd58 	.word	0x0801dd58
 8001984:	0800166d 	.word	0x0800166d
 8001988:	00989680 	.word	0x00989680
 800198c:	24009c38 	.word	0x24009c38
 8001990:	24009bb0 	.word	0x24009bb0

08001994 <HAL_HSEM_FreeCallback>:
  }
  /* USER CODE END 5 */
}

void HAL_HSEM_FreeCallback(uint32_t SemMask){
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	if (SemMask & (1 << HSEM_ID_0)) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_HSEM_FreeCallback+0x1e>
		HSEM1_FLAG = 1;
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_HSEM_FreeCallback+0x28>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 80019ac:	2001      	movs	r0, #1
 80019ae:	f004 fb03 	bl	8005fb8 <HAL_HSEM_ActivateNotification>

	}
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	24009fb8 	.word	0x24009fb8

080019c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d101      	bne.n	80019d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019d2:	f000 fd53 	bl	800247c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40010000 	.word	0x40010000

080019e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <Error_Handler+0x8>

080019f0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <microros_allocate+0x3c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <microros_allocate+0x3c>)
 8001a08:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <microros_allocate+0x40>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <microros_allocate+0x40>)
 8001a18:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7fe ffe4 	bl	80009e8 <pvPortMallocMicroROS>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2400a008 	.word	0x2400a008
 8001a30:	2400a00c 	.word	0x2400a00c

08001a34 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00c      	beq.n	8001a5e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff f8f3 	bl	8000c30 <getBlockSize>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a06      	ldr	r2, [pc, #24]	@ (8001a68 <microros_deallocate+0x34>)
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <microros_deallocate+0x34>)
 8001a56:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff f88d 	bl	8000b78 <vPortFreeMicroROS>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2400a00c 	.word	0x2400a00c

08001a6c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <microros_reallocate+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4413      	add	r3, r2
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <microros_reallocate+0x64>)
 8001a86:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <microros_reallocate+0x68>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4413      	add	r3, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <microros_reallocate+0x68>)
 8001a96:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d104      	bne.n	8001aa8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001a9e:	68b8      	ldr	r0, [r7, #8]
 8001aa0:	f7fe ffa2 	bl	80009e8 <pvPortMallocMicroROS>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	e00e      	b.n	8001ac6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f7ff f8c1 	bl	8000c30 <getBlockSize>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <microros_reallocate+0x68>)
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <microros_reallocate+0x68>)
 8001aba:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7ff f8d4 	bl	8000c6c <pvPortReallocMicroROS>
 8001ac4:	4603      	mov	r3, r0
  }
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2400a008 	.word	0x2400a008
 8001ad4:	2400a00c 	.word	0x2400a00c

08001ad8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	fb02 f303 	mul.w	r3, r2, r3
 8001aec:	4a0c      	ldr	r2, [pc, #48]	@ (8001b20 <microros_zero_allocate+0x48>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <microros_zero_allocate+0x48>)
 8001af6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	4a08      	ldr	r2, [pc, #32]	@ (8001b24 <microros_zero_allocate+0x4c>)
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	4413      	add	r3, r2
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <microros_zero_allocate+0x4c>)
 8001b0a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff f8d9 	bl	8000cc6 <pvPortCallocMicroROS>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2400a008 	.word	0x2400a008
 8001b24:	2400a00c 	.word	0x2400a00c

08001b28 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001b3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b3e:	a320      	add	r3, pc, #128	@ (adr r3, 8001bc0 <UTILS_NanosecondsToTimespec+0x98>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fc34 	bl	80003b0 <__aeabi_ldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b56:	a31a      	add	r3, pc, #104	@ (adr r3, 8001bc0 <UTILS_NanosecondsToTimespec+0x98>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fc28 	bl	80003b0 <__aeabi_ldivmod>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da20      	bge.n	8001bae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <UTILS_NanosecondsToTimespec+0x90>)
 8001b72:	fb82 1203 	smull	r1, r2, r2, r3
 8001b76:	1712      	asrs	r2, r2, #28
 8001b78:	17db      	asrs	r3, r3, #31
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b86:	6979      	ldr	r1, [r7, #20]
 8001b88:	17c8      	asrs	r0, r1, #31
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4605      	mov	r5, r0
 8001b8e:	ebb2 0804 	subs.w	r8, r2, r4
 8001b92:	eb63 0905 	sbc.w	r9, r3, r5
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	4906      	ldr	r1, [pc, #24]	@ (8001bbc <UTILS_NanosecondsToTimespec+0x94>)
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	441a      	add	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	609a      	str	r2, [r3, #8]
    }
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb8:	44b82fa1 	.word	0x44b82fa1
 8001bbc:	3b9aca00 	.word	0x3b9aca00
 8001bc0:	3b9aca00 	.word	0x3b9aca00
 8001bc4:	00000000 	.word	0x00000000

08001bc8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bcc:	b08e      	sub	sp, #56	@ 0x38
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bd2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001bd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001bea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00c f994 	bl	800df1c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf6:	17da      	asrs	r2, r3, #31
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	61fa      	str	r2, [r7, #28]
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	000b      	movs	r3, r1
 8001c08:	2200      	movs	r2, #0
 8001c0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c10:	2200      	movs	r2, #0
 8001c12:	461c      	mov	r4, r3
 8001c14:	4615      	mov	r5, r2
 8001c16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c1a:	1911      	adds	r1, r2, r4
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	416b      	adcs	r3, r5
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c26:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001c2a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	f04f 0400 	mov.w	r4, #0
 8001c36:	f04f 0500 	mov.w	r5, #0
 8001c3a:	015d      	lsls	r5, r3, #5
 8001c3c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001c40:	0154      	lsls	r4, r2, #5
 8001c42:	4622      	mov	r2, r4
 8001c44:	462b      	mov	r3, r5
 8001c46:	ebb2 0800 	subs.w	r8, r2, r0
 8001c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c5a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c5e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001c62:	4690      	mov	r8, r2
 8001c64:	4699      	mov	r9, r3
 8001c66:	eb18 0a00 	adds.w	sl, r8, r0
 8001c6a:	eb49 0b01 	adc.w	fp, r9, r1
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c7a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c7e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c82:	ebb2 040a 	subs.w	r4, r2, sl
 8001c86:	603c      	str	r4, [r7, #0]
 8001c88:	eb63 030b 	sbc.w	r3, r3, fp
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c92:	4623      	mov	r3, r4
 8001c94:	181b      	adds	r3, r3, r0
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	462b      	mov	r3, r5
 8001c9a:	eb41 0303 	adc.w	r3, r1, r3
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	6a3a      	ldr	r2, [r7, #32]
 8001ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ca6:	f7ff ff3f 	bl	8001b28 <UTILS_NanosecondsToTimespec>

    return 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	4618      	mov	r0, r3
 8001cae:	3738      	adds	r7, #56	@ 0x38
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <HAL_MspInit+0x48>)
 8001cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_MspInit+0x48>)
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <HAL_MspInit+0x48>)
 8001cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	210f      	movs	r1, #15
 8001ce0:	f06f 0001 	mvn.w	r0, #1
 8001ce4:	f000 fce6 	bl	80026b4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2105      	movs	r1, #5
 8001cec:	207d      	movs	r0, #125	@ 0x7d
 8001cee:	f000 fce1 	bl	80026b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001cf2:	207d      	movs	r0, #125	@ 0x7d
 8001cf4:	f000 fcf8 	bl	80026e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	58024400 	.word	0x58024400

08001d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08e      	sub	sp, #56	@ 0x38
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	d844      	bhi.n	8001d9c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	2019      	movs	r0, #25
 8001d18:	f000 fccc 	bl	80026b4 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d1c:	2019      	movs	r0, #25
 8001d1e:	f000 fce3 	bl	80026e8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001d22:	4a24      	ldr	r2, [pc, #144]	@ (8001db4 <HAL_InitTick+0xb0>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d28:	4b23      	ldr	r3, [pc, #140]	@ (8001db8 <HAL_InitTick+0xb4>)
 8001d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d2e:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <HAL_InitTick+0xb4>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <HAL_InitTick+0xb4>)
 8001d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d46:	f107 020c 	add.w	r2, r7, #12
 8001d4a:	f107 0310 	add.w	r3, r7, #16
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f005 fba7 	bl	80074a4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d56:	f005 fb8f 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d62:	4a16      	ldr	r2, [pc, #88]	@ (8001dbc <HAL_InitTick+0xb8>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <HAL_InitTick+0xc0>)
 8001d72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001d76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d7a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d7c:	4a10      	ldr	r2, [pc, #64]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d82:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d8e:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001d90:	f007 f9f6 	bl	8009180 <HAL_TIM_Base_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_InitTick+0xa6>
 8001d9a:	e001      	b.n	8001da0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e005      	b.n	8001dac <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001da0:	4807      	ldr	r0, [pc, #28]	@ (8001dc0 <HAL_InitTick+0xbc>)
 8001da2:	f007 fa4f 	bl	8009244 <HAL_TIM_Base_Start_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3738      	adds	r7, #56	@ 0x38
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2400000c 	.word	0x2400000c
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	2400a010 	.word	0x2400a010
 8001dc4:	40010000 	.word	0x40010000

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <NMI_Handler+0x4>

08001dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	bf00      	nop
 8001dde:	e7fd      	b.n	8001ddc <MemManage_Handler+0x4>

08001de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <UsageFault_Handler+0x4>

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <DMA1_Stream0_IRQHandler+0x10>)
 8001e06:	f001 ffa7 	bl	8003d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2400a0f8 	.word	0x2400a0f8

08001e14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001e18:	4802      	ldr	r0, [pc, #8]	@ (8001e24 <DMA1_Stream1_IRQHandler+0x10>)
 8001e1a:	f001 ff9d 	bl	8003d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2400a170 	.word	0x2400a170

08001e28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <TIM1_UP_IRQHandler+0x10>)
 8001e2e:	f007 fa81 	bl	8009334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	2400a010 	.word	0x2400a010

08001e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e40:	4802      	ldr	r0, [pc, #8]	@ (8001e4c <USART3_IRQHandler+0x10>)
 8001e42:	f007 fe1d 	bl	8009a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2400a064 	.word	0x2400a064

08001e50 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e54:	f004 f8c2 	bl	8005fdc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e76:	f01b f8a3 	bl	801cfc0 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e9e:	bf00      	nop
 8001ea0:	e7fd      	b.n	8001e9e <_exit+0x12>

08001ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
  }

  return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e009      	b.n	8001f02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf1      	blt.n	8001eee <_write+0x12>
  }
  return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_isatty>:

int _isatty(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	@ (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f01b f808 	bl	801cfc0 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	@ (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	24080000 	.word	0x24080000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	2400a060 	.word	0x2400a060
 8001fe4:	24013c78 	.word	0x24013c78

08001fe8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fec:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8001fee:	4a23      	ldr	r2, [pc, #140]	@ (800207c <MX_USART3_UART_Init+0x94>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8001ff4:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <MX_USART3_UART_Init+0x98>)
 8001ff6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 800200c:	220c      	movs	r2, #12
 800200e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202e:	4812      	ldr	r0, [pc, #72]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002030:	f007 fb74 	bl	800971c <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800203a:	f7ff fcd3 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203e:	2100      	movs	r1, #0
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002042:	f009 fb69 	bl	800b718 <HAL_UARTEx_SetTxFifoThreshold>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800204c:	f7ff fcca 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002050:	2100      	movs	r1, #0
 8002052:	4809      	ldr	r0, [pc, #36]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002054:	f009 fb9e 	bl	800b794 <HAL_UARTEx_SetRxFifoThreshold>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800205e:	f7ff fcc1 	bl	80019e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_USART3_UART_Init+0x90>)
 8002064:	f009 fb1f 	bl	800b6a6 <HAL_UARTEx_DisableFifoMode>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800206e:	f7ff fcb9 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2400a064 	.word	0x2400a064
 800207c:	40004800 	.word	0x40004800
 8002080:	001e8480 	.word	0x001e8480

08002084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0ba      	sub	sp, #232	@ 0xe8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	22c0      	movs	r2, #192	@ 0xc0
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f01a fef7 	bl	801ce98 <memset>
  if(uartHandle->Instance==USART3)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002218 <HAL_UART_MspInit+0x194>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	f040 80ad 	bne.w	8002210 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020b6:	f04f 0202 	mov.w	r2, #2
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 fa2b 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80020d8:	f7ff fc84 	bl	80019e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020dc:	4b4f      	ldr	r3, [pc, #316]	@ (800221c <HAL_UART_MspInit+0x198>)
 80020de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020e2:	4a4e      	ldr	r2, [pc, #312]	@ (800221c <HAL_UART_MspInit+0x198>)
 80020e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ec:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <HAL_UART_MspInit+0x198>)
 80020ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	4b48      	ldr	r3, [pc, #288]	@ (800221c <HAL_UART_MspInit+0x198>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	4a46      	ldr	r2, [pc, #280]	@ (800221c <HAL_UART_MspInit+0x198>)
 8002102:	f043 0308 	orr.w	r3, r3, #8
 8002106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210a:	4b44      	ldr	r3, [pc, #272]	@ (800221c <HAL_UART_MspInit+0x198>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002118:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800211c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002132:	2307      	movs	r3, #7
 8002134:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002138:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800213c:	4619      	mov	r1, r3
 800213e:	4838      	ldr	r0, [pc, #224]	@ (8002220 <HAL_UART_MspInit+0x19c>)
 8002140:	f003 fd5c 	bl	8005bfc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002144:	4b37      	ldr	r3, [pc, #220]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002146:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_UART_MspInit+0x1a4>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 800214c:	222d      	movs	r2, #45	@ 0x2d
 800214e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002150:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002156:	4b33      	ldr	r3, [pc, #204]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800215c:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 800215e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002162:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002164:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216a:	4b2e      	ldr	r3, [pc, #184]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002170:	4b2c      	ldr	r3, [pc, #176]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002172:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002176:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002178:	4b2a      	ldr	r3, [pc, #168]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 800217a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800217e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002180:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002182:	2200      	movs	r2, #0
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002186:	4827      	ldr	r0, [pc, #156]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 8002188:	f000 fabc 	bl	8002704 <HAL_DMA_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002192:	f7ff fc27 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a22      	ldr	r2, [pc, #136]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 800219a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800219e:	4a21      	ldr	r2, [pc, #132]	@ (8002224 <HAL_UART_MspInit+0x1a0>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80021a4:	4b21      	ldr	r3, [pc, #132]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021a6:	4a22      	ldr	r2, [pc, #136]	@ (8002230 <HAL_UART_MspInit+0x1ac>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021ac:	222e      	movs	r2, #46	@ 0x2e
 80021ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b0:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b6:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c4:	4b19      	ldr	r3, [pc, #100]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ca:	4b18      	ldr	r3, [pc, #96]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021dc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021de:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021e4:	4811      	ldr	r0, [pc, #68]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021e6:	f000 fa8d 	bl	8002704 <HAL_DMA_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80021f0:	f7ff fbf8 	bl	80019e4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80021fa:	4a0c      	ldr	r2, [pc, #48]	@ (800222c <HAL_UART_MspInit+0x1a8>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2105      	movs	r1, #5
 8002204:	2027      	movs	r0, #39	@ 0x27
 8002206:	f000 fa55 	bl	80026b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800220a:	2027      	movs	r0, #39	@ 0x27
 800220c:	f000 fa6c 	bl	80026e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002210:	bf00      	nop
 8002212:	37e8      	adds	r7, #232	@ 0xe8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40004800 	.word	0x40004800
 800221c:	58024400 	.word	0x58024400
 8002220:	58020c00 	.word	0x58020c00
 8002224:	2400a0f8 	.word	0x2400a0f8
 8002228:	40020010 	.word	0x40020010
 800222c:	2400a170 	.word	0x2400a170
 8002230:	40020028 	.word	0x40020028

08002234 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800223a:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800223c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002240:	2209      	movs	r2, #9
 8002242:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002246:	2202      	movs	r2, #2
 8002248:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800224c:	2200      	movs	r2, #0
 800224e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002252:	2202      	movs	r2, #2
 8002254:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002256:	4b0e      	ldr	r3, [pc, #56]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002258:	2201      	movs	r2, #1
 800225a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800225e:	2200      	movs	r2, #0
 8002260:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002262:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002264:	2200      	movs	r2, #0
 8002266:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800226a:	2201      	movs	r2, #1
 800226c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002270:	2201      	movs	r2, #1
 8002272:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002276:	2200      	movs	r2, #0
 8002278:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800227a:	4805      	ldr	r0, [pc, #20]	@ (8002290 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800227c:	f003 ff27 	bl	80060ce <HAL_PCD_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002286:	f7ff fbad 	bl	80019e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2400a1e8 	.word	0x2400a1e8
 8002294:	40080000 	.word	0x40080000

08002298 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0ba      	sub	sp, #232	@ 0xe8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	22c0      	movs	r2, #192	@ 0xc0
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f01a fded 	bl	801ce98 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a38      	ldr	r2, [pc, #224]	@ (80023a4 <HAL_PCD_MspInit+0x10c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d168      	bne.n	800239a <HAL_PCD_MspInit+0x102>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80022c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 19;
 80022d8:	2313      	movs	r3, #19
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80022dc:	2302      	movs	r3, #2
 80022de:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80022e0:	2303      	movs	r3, #3
 80022e2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80022e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80022f2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 f912 	bl	8007528 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 800230a:	f7ff fb6b 	bl	80019e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800230e:	f004 f869 	bl	80063e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_PCD_MspInit+0x110>)
 8002314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002318:	4a23      	ldr	r2, [pc, #140]	@ (80023a8 <HAL_PCD_MspInit+0x110>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002322:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <HAL_PCD_MspInit+0x110>)
 8002324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002330:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8002334:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800234a:	230a      	movs	r3, #10
 800234c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002354:	4619      	mov	r1, r3
 8002356:	4815      	ldr	r0, [pc, #84]	@ (80023ac <HAL_PCD_MspInit+0x114>)
 8002358:	f003 fc50 	bl	8005bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800235c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002360:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002374:	4619      	mov	r1, r3
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <HAL_PCD_MspInit+0x114>)
 8002378:	f003 fc40 	bl	8005bfc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800237c:	4b0a      	ldr	r3, [pc, #40]	@ (80023a8 <HAL_PCD_MspInit+0x110>)
 800237e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <HAL_PCD_MspInit+0x110>)
 8002384:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002388:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800238c:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_PCD_MspInit+0x110>)
 800238e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002392:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800239a:	bf00      	nop
 800239c:	37e8      	adds	r7, #232	@ 0xe8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40080000 	.word	0x40080000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020000 	.word	0x58020000

080023b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80023b4:	f7fe fa82 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480c      	ldr	r0, [pc, #48]	@ (80023ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ba:	490d      	ldr	r1, [pc, #52]	@ (80023f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023bc:	4a0d      	ldr	r2, [pc, #52]	@ (80023f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0a      	ldr	r2, [pc, #40]	@ (80023f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d0:	4c0a      	ldr	r4, [pc, #40]	@ (80023fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023de:	f01a fdf5 	bl	801cfcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e2:	f7ff f85f 	bl	80014a4 <main>
  bx  lr
 80023e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023f0:	240006dc 	.word	0x240006dc
  ldr r2, =_sidata
 80023f4:	0801eea8 	.word	0x0801eea8
  ldr r2, =_sbss
 80023f8:	240007a0 	.word	0x240007a0
  ldr r4, =_ebss
 80023fc:	24013c78 	.word	0x24013c78

08002400 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002400:	e7fe      	b.n	8002400 <ADC3_IRQHandler>
	...

08002404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240a:	2003      	movs	r0, #3
 800240c:	f000 f947 	bl	800269e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002410:	f004 fe72 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_Init+0x68>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	4913      	ldr	r1, [pc, #76]	@ (8002470 <HAL_Init+0x6c>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
 800242c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <HAL_Init+0x68>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	4a0e      	ldr	r2, [pc, #56]	@ (8002470 <HAL_Init+0x6c>)
 8002438:	5cd3      	ldrb	r3, [r2, r3]
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_Init+0x70>)
 8002446:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002448:	4a0b      	ldr	r2, [pc, #44]	@ (8002478 <HAL_Init+0x74>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244e:	200f      	movs	r0, #15
 8002450:	f7ff fc58 	bl	8001d04 <HAL_InitTick>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e002      	b.n	8002464 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800245e:	f7ff fc2b 	bl	8001cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	58024400 	.word	0x58024400
 8002470:	0801dda8 	.word	0x0801dda8
 8002474:	24000004 	.word	0x24000004
 8002478:	24000000 	.word	0x24000000

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	24000010 	.word	0x24000010
 80024a0:	2400a6cc 	.word	0x2400a6cc

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	2400a6cc 	.word	0x2400a6cc

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	24000010 	.word	0x24000010

08002504 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <HAL_GetREVID+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	0c1b      	lsrs	r3, r3, #16
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	5c001000 	.word	0x5c001000

0800251c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800252c:	4904      	ldr	r1, [pc, #16]	@ (8002540 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	58000400 	.word	0x58000400

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <__NVIC_SetPriorityGrouping+0x40>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	4313      	orrs	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <__NVIC_SetPriorityGrouping+0x40>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00
 8002588:	05fa0000 	.word	0x05fa0000

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	@ (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	@ (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	@ (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	@ 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ff4c 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026c2:	f7ff ff63 	bl	800258c <__NVIC_GetPriorityGrouping>
 80026c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	6978      	ldr	r0, [r7, #20]
 80026ce:	f7ff ffb3 	bl	8002638 <NVIC_EncodePriority>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff82 	bl	80025e4 <__NVIC_SetPriority>
}
 80026e0:	bf00      	nop
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff56 	bl	80025a8 <__NVIC_EnableIRQ>
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff feca 	bl	80024a4 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e316      	b.n	8002d4a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a66      	ldr	r2, [pc, #408]	@ (80028bc <HAL_DMA_Init+0x1b8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04a      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a65      	ldr	r2, [pc, #404]	@ (80028c0 <HAL_DMA_Init+0x1bc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d045      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a63      	ldr	r2, [pc, #396]	@ (80028c4 <HAL_DMA_Init+0x1c0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d040      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a62      	ldr	r2, [pc, #392]	@ (80028c8 <HAL_DMA_Init+0x1c4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d03b      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a60      	ldr	r2, [pc, #384]	@ (80028cc <HAL_DMA_Init+0x1c8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d036      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5f      	ldr	r2, [pc, #380]	@ (80028d0 <HAL_DMA_Init+0x1cc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d031      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5d      	ldr	r2, [pc, #372]	@ (80028d4 <HAL_DMA_Init+0x1d0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02c      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5c      	ldr	r2, [pc, #368]	@ (80028d8 <HAL_DMA_Init+0x1d4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d027      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5a      	ldr	r2, [pc, #360]	@ (80028dc <HAL_DMA_Init+0x1d8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d022      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a59      	ldr	r2, [pc, #356]	@ (80028e0 <HAL_DMA_Init+0x1dc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d01d      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a57      	ldr	r2, [pc, #348]	@ (80028e4 <HAL_DMA_Init+0x1e0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d018      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a56      	ldr	r2, [pc, #344]	@ (80028e8 <HAL_DMA_Init+0x1e4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a54      	ldr	r2, [pc, #336]	@ (80028ec <HAL_DMA_Init+0x1e8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a53      	ldr	r2, [pc, #332]	@ (80028f0 <HAL_DMA_Init+0x1ec>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a51      	ldr	r2, [pc, #324]	@ (80028f4 <HAL_DMA_Init+0x1f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_DMA_Init+0xb8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a50      	ldr	r2, [pc, #320]	@ (80028f8 <HAL_DMA_Init+0x1f4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Init+0xbc>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_DMA_Init+0xbe>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 813b 	beq.w	8002a3e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a37      	ldr	r2, [pc, #220]	@ (80028bc <HAL_DMA_Init+0x1b8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04a      	beq.n	8002878 <HAL_DMA_Init+0x174>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <HAL_DMA_Init+0x1bc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d045      	beq.n	8002878 <HAL_DMA_Init+0x174>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a34      	ldr	r2, [pc, #208]	@ (80028c4 <HAL_DMA_Init+0x1c0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d040      	beq.n	8002878 <HAL_DMA_Init+0x174>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a33      	ldr	r2, [pc, #204]	@ (80028c8 <HAL_DMA_Init+0x1c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d03b      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a31      	ldr	r2, [pc, #196]	@ (80028cc <HAL_DMA_Init+0x1c8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d036      	beq.n	8002878 <HAL_DMA_Init+0x174>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a30      	ldr	r2, [pc, #192]	@ (80028d0 <HAL_DMA_Init+0x1cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d031      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2e      	ldr	r2, [pc, #184]	@ (80028d4 <HAL_DMA_Init+0x1d0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <HAL_DMA_Init+0x174>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2d      	ldr	r2, [pc, #180]	@ (80028d8 <HAL_DMA_Init+0x1d4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d027      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2b      	ldr	r2, [pc, #172]	@ (80028dc <HAL_DMA_Init+0x1d8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2a      	ldr	r2, [pc, #168]	@ (80028e0 <HAL_DMA_Init+0x1dc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01d      	beq.n	8002878 <HAL_DMA_Init+0x174>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a28      	ldr	r2, [pc, #160]	@ (80028e4 <HAL_DMA_Init+0x1e0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a27      	ldr	r2, [pc, #156]	@ (80028e8 <HAL_DMA_Init+0x1e4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a25      	ldr	r2, [pc, #148]	@ (80028ec <HAL_DMA_Init+0x1e8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_DMA_Init+0x174>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a24      	ldr	r2, [pc, #144]	@ (80028f0 <HAL_DMA_Init+0x1ec>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_DMA_Init+0x174>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a22      	ldr	r2, [pc, #136]	@ (80028f4 <HAL_DMA_Init+0x1f0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_DMA_Init+0x174>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a21      	ldr	r2, [pc, #132]	@ (80028f8 <HAL_DMA_Init+0x1f4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d108      	bne.n	800288a <HAL_DMA_Init+0x186>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	e007      	b.n	800289a <HAL_DMA_Init+0x196>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800289a:	e02f      	b.n	80028fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800289c:	f7ff fe02 	bl	80024a4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d928      	bls.n	80028fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2203      	movs	r2, #3
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e246      	b.n	8002d4a <HAL_DMA_Init+0x646>
 80028bc:	40020010 	.word	0x40020010
 80028c0:	40020028 	.word	0x40020028
 80028c4:	40020040 	.word	0x40020040
 80028c8:	40020058 	.word	0x40020058
 80028cc:	40020070 	.word	0x40020070
 80028d0:	40020088 	.word	0x40020088
 80028d4:	400200a0 	.word	0x400200a0
 80028d8:	400200b8 	.word	0x400200b8
 80028dc:	40020410 	.word	0x40020410
 80028e0:	40020428 	.word	0x40020428
 80028e4:	40020440 	.word	0x40020440
 80028e8:	40020458 	.word	0x40020458
 80028ec:	40020470 	.word	0x40020470
 80028f0:	40020488 	.word	0x40020488
 80028f4:	400204a0 	.word	0x400204a0
 80028f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1c8      	bne.n	800289c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4b83      	ldr	r3, [pc, #524]	@ (8002b24 <HAL_DMA_Init+0x420>)
 8002916:	4013      	ands	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002922:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	2b04      	cmp	r3, #4
 800294e:	d107      	bne.n	8002960 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	4313      	orrs	r3, r2
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002960:	4b71      	ldr	r3, [pc, #452]	@ (8002b28 <HAL_DMA_Init+0x424>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b71      	ldr	r3, [pc, #452]	@ (8002b2c <HAL_DMA_Init+0x428>)
 8002966:	4013      	ands	r3, r2
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800296c:	d328      	bcc.n	80029c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b28      	cmp	r3, #40	@ 0x28
 8002974:	d903      	bls.n	800297e <HAL_DMA_Init+0x27a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b2e      	cmp	r3, #46	@ 0x2e
 800297c:	d917      	bls.n	80029ae <HAL_DMA_Init+0x2aa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b3e      	cmp	r3, #62	@ 0x3e
 8002984:	d903      	bls.n	800298e <HAL_DMA_Init+0x28a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b42      	cmp	r3, #66	@ 0x42
 800298c:	d90f      	bls.n	80029ae <HAL_DMA_Init+0x2aa>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b46      	cmp	r3, #70	@ 0x46
 8002994:	d903      	bls.n	800299e <HAL_DMA_Init+0x29a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b48      	cmp	r3, #72	@ 0x48
 800299c:	d907      	bls.n	80029ae <HAL_DMA_Init+0x2aa>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80029a4:	d905      	bls.n	80029b2 <HAL_DMA_Init+0x2ae>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b52      	cmp	r3, #82	@ 0x52
 80029ac:	d801      	bhi.n	80029b2 <HAL_DMA_Init+0x2ae>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_DMA_Init+0x2b0>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d117      	bne.n	8002a1a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f002 fb3f 	bl	8005080 <DMA_CheckFifoParam>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2240      	movs	r2, #64	@ 0x40
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e197      	b.n	8002d4a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f002 fa7a 	bl	8004f1c <DMA_CalcBaseAndBitshift>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	223f      	movs	r2, #63	@ 0x3f
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	e0cd      	b.n	8002bda <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a3b      	ldr	r2, [pc, #236]	@ (8002b30 <HAL_DMA_Init+0x42c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a39      	ldr	r2, [pc, #228]	@ (8002b34 <HAL_DMA_Init+0x430>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a38      	ldr	r2, [pc, #224]	@ (8002b38 <HAL_DMA_Init+0x434>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a36      	ldr	r2, [pc, #216]	@ (8002b3c <HAL_DMA_Init+0x438>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a35      	ldr	r2, [pc, #212]	@ (8002b40 <HAL_DMA_Init+0x43c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a33      	ldr	r2, [pc, #204]	@ (8002b44 <HAL_DMA_Init+0x440>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a32      	ldr	r2, [pc, #200]	@ (8002b48 <HAL_DMA_Init+0x444>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_Init+0x38a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a30      	ldr	r2, [pc, #192]	@ (8002b4c <HAL_DMA_Init+0x448>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_DMA_Init+0x38e>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_DMA_Init+0x390>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8097 	beq.w	8002bc8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a24      	ldr	r2, [pc, #144]	@ (8002b30 <HAL_DMA_Init+0x42c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d021      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <HAL_DMA_Init+0x430>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01c      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a21      	ldr	r2, [pc, #132]	@ (8002b38 <HAL_DMA_Init+0x434>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d017      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_DMA_Init+0x438>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b40 <HAL_DMA_Init+0x43c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00d      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <HAL_DMA_Init+0x440>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d008      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1b      	ldr	r2, [pc, #108]	@ (8002b48 <HAL_DMA_Init+0x444>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <HAL_DMA_Init+0x3e4>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a19      	ldr	r2, [pc, #100]	@ (8002b4c <HAL_DMA_Init+0x448>)
 8002ae6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_DMA_Init+0x44c>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b40      	cmp	r3, #64	@ 0x40
 8002b0e:	d021      	beq.n	8002b54 <HAL_DMA_Init+0x450>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b80      	cmp	r3, #128	@ 0x80
 8002b16:	d102      	bne.n	8002b1e <HAL_DMA_Init+0x41a>
 8002b18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b1c:	e01b      	b.n	8002b56 <HAL_DMA_Init+0x452>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e019      	b.n	8002b56 <HAL_DMA_Init+0x452>
 8002b22:	bf00      	nop
 8002b24:	fe10803f 	.word	0xfe10803f
 8002b28:	5c001000 	.word	0x5c001000
 8002b2c:	ffff0000 	.word	0xffff0000
 8002b30:	58025408 	.word	0x58025408
 8002b34:	5802541c 	.word	0x5802541c
 8002b38:	58025430 	.word	0x58025430
 8002b3c:	58025444 	.word	0x58025444
 8002b40:	58025458 	.word	0x58025458
 8002b44:	5802546c 	.word	0x5802546c
 8002b48:	58025480 	.word	0x58025480
 8002b4c:	58025494 	.word	0x58025494
 8002b50:	fffe000f 	.word	0xfffe000f
 8002b54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002b84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d54 <HAL_DMA_Init+0x650>)
 8002b9c:	4413      	add	r3, r2
 8002b9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002d58 <HAL_DMA_Init+0x654>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	009a      	lsls	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f002 f9b5 	bl	8004f1c <DMA_CalcBaseAndBitshift>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e008      	b.n	8002bda <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0b7      	b.n	8002d4a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5f      	ldr	r2, [pc, #380]	@ (8002d5c <HAL_DMA_Init+0x658>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d072      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d60 <HAL_DMA_Init+0x65c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d06d      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5c      	ldr	r2, [pc, #368]	@ (8002d64 <HAL_DMA_Init+0x660>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d068      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8002d68 <HAL_DMA_Init+0x664>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d063      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a59      	ldr	r2, [pc, #356]	@ (8002d6c <HAL_DMA_Init+0x668>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d05e      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a57      	ldr	r2, [pc, #348]	@ (8002d70 <HAL_DMA_Init+0x66c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d059      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a56      	ldr	r2, [pc, #344]	@ (8002d74 <HAL_DMA_Init+0x670>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d054      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a54      	ldr	r2, [pc, #336]	@ (8002d78 <HAL_DMA_Init+0x674>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d04f      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a53      	ldr	r2, [pc, #332]	@ (8002d7c <HAL_DMA_Init+0x678>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a51      	ldr	r2, [pc, #324]	@ (8002d80 <HAL_DMA_Init+0x67c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a50      	ldr	r2, [pc, #320]	@ (8002d84 <HAL_DMA_Init+0x680>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002d88 <HAL_DMA_Init+0x684>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a4d      	ldr	r2, [pc, #308]	@ (8002d8c <HAL_DMA_Init+0x688>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a4b      	ldr	r2, [pc, #300]	@ (8002d90 <HAL_DMA_Init+0x68c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d94 <HAL_DMA_Init+0x690>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a48      	ldr	r2, [pc, #288]	@ (8002d98 <HAL_DMA_Init+0x694>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a47      	ldr	r2, [pc, #284]	@ (8002d9c <HAL_DMA_Init+0x698>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a45      	ldr	r2, [pc, #276]	@ (8002da0 <HAL_DMA_Init+0x69c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a44      	ldr	r2, [pc, #272]	@ (8002da4 <HAL_DMA_Init+0x6a0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a42      	ldr	r2, [pc, #264]	@ (8002da8 <HAL_DMA_Init+0x6a4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a41      	ldr	r2, [pc, #260]	@ (8002dac <HAL_DMA_Init+0x6a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8002db0 <HAL_DMA_Init+0x6ac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a3e      	ldr	r2, [pc, #248]	@ (8002db4 <HAL_DMA_Init+0x6b0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Init+0x5c6>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8002db8 <HAL_DMA_Init+0x6b4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_DMA_Init+0x5ca>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_DMA_Init+0x5cc>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d032      	beq.n	8002d3a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f002 fa4f 	bl	8005178 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b80      	cmp	r3, #128	@ 0x80
 8002ce0:	d102      	bne.n	8002ce8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002cfc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_DMA_Init+0x624>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d80c      	bhi.n	8002d28 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f002 facc 	bl	80052ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	e008      	b.n	8002d3a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	a7fdabf8 	.word	0xa7fdabf8
 8002d58:	cccccccd 	.word	0xcccccccd
 8002d5c:	40020010 	.word	0x40020010
 8002d60:	40020028 	.word	0x40020028
 8002d64:	40020040 	.word	0x40020040
 8002d68:	40020058 	.word	0x40020058
 8002d6c:	40020070 	.word	0x40020070
 8002d70:	40020088 	.word	0x40020088
 8002d74:	400200a0 	.word	0x400200a0
 8002d78:	400200b8 	.word	0x400200b8
 8002d7c:	40020410 	.word	0x40020410
 8002d80:	40020428 	.word	0x40020428
 8002d84:	40020440 	.word	0x40020440
 8002d88:	40020458 	.word	0x40020458
 8002d8c:	40020470 	.word	0x40020470
 8002d90:	40020488 	.word	0x40020488
 8002d94:	400204a0 	.word	0x400204a0
 8002d98:	400204b8 	.word	0x400204b8
 8002d9c:	58025408 	.word	0x58025408
 8002da0:	5802541c 	.word	0x5802541c
 8002da4:	58025430 	.word	0x58025430
 8002da8:	58025444 	.word	0x58025444
 8002dac:	58025458 	.word	0x58025458
 8002db0:	5802546c 	.word	0x5802546c
 8002db4:	58025480 	.word	0x58025480
 8002db8:	58025494 	.word	0x58025494

08002dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e226      	b.n	8003226 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_DMA_Start_IT+0x2a>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e21f      	b.n	8003226 <HAL_DMA_Start_IT+0x46a>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	f040 820a 	bne.w	8003210 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a68      	ldr	r2, [pc, #416]	@ (8002fb0 <HAL_DMA_Start_IT+0x1f4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d04a      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a66      	ldr	r2, [pc, #408]	@ (8002fb4 <HAL_DMA_Start_IT+0x1f8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d045      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a65      	ldr	r2, [pc, #404]	@ (8002fb8 <HAL_DMA_Start_IT+0x1fc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d040      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a63      	ldr	r2, [pc, #396]	@ (8002fbc <HAL_DMA_Start_IT+0x200>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d03b      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a62      	ldr	r2, [pc, #392]	@ (8002fc0 <HAL_DMA_Start_IT+0x204>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d036      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a60      	ldr	r2, [pc, #384]	@ (8002fc4 <HAL_DMA_Start_IT+0x208>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc8 <HAL_DMA_Start_IT+0x20c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d02c      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a5d      	ldr	r2, [pc, #372]	@ (8002fcc <HAL_DMA_Start_IT+0x210>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d027      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd0 <HAL_DMA_Start_IT+0x214>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_DMA_Start_IT+0x218>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01d      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a59      	ldr	r2, [pc, #356]	@ (8002fd8 <HAL_DMA_Start_IT+0x21c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d018      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a57      	ldr	r2, [pc, #348]	@ (8002fdc <HAL_DMA_Start_IT+0x220>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a56      	ldr	r2, [pc, #344]	@ (8002fe0 <HAL_DMA_Start_IT+0x224>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00e      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a54      	ldr	r2, [pc, #336]	@ (8002fe4 <HAL_DMA_Start_IT+0x228>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a53      	ldr	r2, [pc, #332]	@ (8002fe8 <HAL_DMA_Start_IT+0x22c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Start_IT+0xee>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a51      	ldr	r2, [pc, #324]	@ (8002fec <HAL_DMA_Start_IT+0x230>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <HAL_DMA_Start_IT+0x100>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e007      	b.n	8002ecc <HAL_DMA_Start_IT+0x110>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f001 fe76 	bl	8004bc4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a34      	ldr	r2, [pc, #208]	@ (8002fb0 <HAL_DMA_Start_IT+0x1f4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d04a      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a33      	ldr	r2, [pc, #204]	@ (8002fb4 <HAL_DMA_Start_IT+0x1f8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d045      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a31      	ldr	r2, [pc, #196]	@ (8002fb8 <HAL_DMA_Start_IT+0x1fc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d040      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <HAL_DMA_Start_IT+0x200>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d03b      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <HAL_DMA_Start_IT+0x204>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d036      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <HAL_DMA_Start_IT+0x208>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d031      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <HAL_DMA_Start_IT+0x20c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d02c      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2a      	ldr	r2, [pc, #168]	@ (8002fcc <HAL_DMA_Start_IT+0x210>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d027      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <HAL_DMA_Start_IT+0x214>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d022      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a27      	ldr	r2, [pc, #156]	@ (8002fd4 <HAL_DMA_Start_IT+0x218>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d01d      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a25      	ldr	r2, [pc, #148]	@ (8002fd8 <HAL_DMA_Start_IT+0x21c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d018      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a24      	ldr	r2, [pc, #144]	@ (8002fdc <HAL_DMA_Start_IT+0x220>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d013      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a22      	ldr	r2, [pc, #136]	@ (8002fe0 <HAL_DMA_Start_IT+0x224>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00e      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <HAL_DMA_Start_IT+0x228>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d009      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <HAL_DMA_Start_IT+0x22c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_DMA_Start_IT+0x1bc>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1e      	ldr	r2, [pc, #120]	@ (8002fec <HAL_DMA_Start_IT+0x230>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <HAL_DMA_Start_IT+0x1c0>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <HAL_DMA_Start_IT+0x1c2>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d036      	beq.n	8002ff0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 021e 	bic.w	r2, r3, #30
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0216 	orr.w	r2, r2, #22
 8002f94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d03e      	beq.n	800301c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0208 	orr.w	r2, r2, #8
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e035      	b.n	800301c <HAL_DMA_Start_IT+0x260>
 8002fb0:	40020010 	.word	0x40020010
 8002fb4:	40020028 	.word	0x40020028
 8002fb8:	40020040 	.word	0x40020040
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	40020070 	.word	0x40020070
 8002fc4:	40020088 	.word	0x40020088
 8002fc8:	400200a0 	.word	0x400200a0
 8002fcc:	400200b8 	.word	0x400200b8
 8002fd0:	40020410 	.word	0x40020410
 8002fd4:	40020428 	.word	0x40020428
 8002fd8:	40020440 	.word	0x40020440
 8002fdc:	40020458 	.word	0x40020458
 8002fe0:	40020470 	.word	0x40020470
 8002fe4:	40020488 	.word	0x40020488
 8002fe8:	400204a0 	.word	0x400204a0
 8002fec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 020e 	bic.w	r2, r3, #14
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 020a 	orr.w	r2, r2, #10
 8003002:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	2b00      	cmp	r3, #0
 800300a:	d007      	beq.n	800301c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0204 	orr.w	r2, r2, #4
 800301a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a83      	ldr	r2, [pc, #524]	@ (8003230 <HAL_DMA_Start_IT+0x474>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d072      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a82      	ldr	r2, [pc, #520]	@ (8003234 <HAL_DMA_Start_IT+0x478>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d06d      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a80      	ldr	r2, [pc, #512]	@ (8003238 <HAL_DMA_Start_IT+0x47c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d068      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a7f      	ldr	r2, [pc, #508]	@ (800323c <HAL_DMA_Start_IT+0x480>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d063      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7d      	ldr	r2, [pc, #500]	@ (8003240 <HAL_DMA_Start_IT+0x484>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d05e      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7c      	ldr	r2, [pc, #496]	@ (8003244 <HAL_DMA_Start_IT+0x488>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d059      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a7a      	ldr	r2, [pc, #488]	@ (8003248 <HAL_DMA_Start_IT+0x48c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d054      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a79      	ldr	r2, [pc, #484]	@ (800324c <HAL_DMA_Start_IT+0x490>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d04f      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a77      	ldr	r2, [pc, #476]	@ (8003250 <HAL_DMA_Start_IT+0x494>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d04a      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a76      	ldr	r2, [pc, #472]	@ (8003254 <HAL_DMA_Start_IT+0x498>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d045      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a74      	ldr	r2, [pc, #464]	@ (8003258 <HAL_DMA_Start_IT+0x49c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d040      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a73      	ldr	r2, [pc, #460]	@ (800325c <HAL_DMA_Start_IT+0x4a0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d03b      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a71      	ldr	r2, [pc, #452]	@ (8003260 <HAL_DMA_Start_IT+0x4a4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d036      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a70      	ldr	r2, [pc, #448]	@ (8003264 <HAL_DMA_Start_IT+0x4a8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d031      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003268 <HAL_DMA_Start_IT+0x4ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02c      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6d      	ldr	r2, [pc, #436]	@ (800326c <HAL_DMA_Start_IT+0x4b0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d027      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003270 <HAL_DMA_Start_IT+0x4b4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d022      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003274 <HAL_DMA_Start_IT+0x4b8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d01d      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a68      	ldr	r2, [pc, #416]	@ (8003278 <HAL_DMA_Start_IT+0x4bc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d018      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a67      	ldr	r2, [pc, #412]	@ (800327c <HAL_DMA_Start_IT+0x4c0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	@ (8003280 <HAL_DMA_Start_IT+0x4c4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a64      	ldr	r2, [pc, #400]	@ (8003284 <HAL_DMA_Start_IT+0x4c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a62      	ldr	r2, [pc, #392]	@ (8003288 <HAL_DMA_Start_IT+0x4cc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_DMA_Start_IT+0x350>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a61      	ldr	r2, [pc, #388]	@ (800328c <HAL_DMA_Start_IT+0x4d0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <HAL_DMA_Start_IT+0x354>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <HAL_DMA_Start_IT+0x356>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d01a      	beq.n	800314c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003132:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a37      	ldr	r2, [pc, #220]	@ (8003230 <HAL_DMA_Start_IT+0x474>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d04a      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a36      	ldr	r2, [pc, #216]	@ (8003234 <HAL_DMA_Start_IT+0x478>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d045      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a34      	ldr	r2, [pc, #208]	@ (8003238 <HAL_DMA_Start_IT+0x47c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d040      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a33      	ldr	r2, [pc, #204]	@ (800323c <HAL_DMA_Start_IT+0x480>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d03b      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <HAL_DMA_Start_IT+0x484>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d036      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <HAL_DMA_Start_IT+0x488>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d031      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2e      	ldr	r2, [pc, #184]	@ (8003248 <HAL_DMA_Start_IT+0x48c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02c      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2d      	ldr	r2, [pc, #180]	@ (800324c <HAL_DMA_Start_IT+0x490>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d027      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003250 <HAL_DMA_Start_IT+0x494>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d022      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <HAL_DMA_Start_IT+0x498>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d01d      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <HAL_DMA_Start_IT+0x49c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d018      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a27      	ldr	r2, [pc, #156]	@ (800325c <HAL_DMA_Start_IT+0x4a0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a25      	ldr	r2, [pc, #148]	@ (8003260 <HAL_DMA_Start_IT+0x4a4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00e      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a24      	ldr	r2, [pc, #144]	@ (8003264 <HAL_DMA_Start_IT+0x4a8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a22      	ldr	r2, [pc, #136]	@ (8003268 <HAL_DMA_Start_IT+0x4ac>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_DMA_Start_IT+0x430>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a21      	ldr	r2, [pc, #132]	@ (800326c <HAL_DMA_Start_IT+0x4b0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <HAL_DMA_Start_IT+0x442>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e012      	b.n	8003224 <HAL_DMA_Start_IT+0x468>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e009      	b.n	8003224 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003216:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003224:	7dfb      	ldrb	r3, [r7, #23]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
 8003270:	58025408 	.word	0x58025408
 8003274:	5802541c 	.word	0x5802541c
 8003278:	58025430 	.word	0x58025430
 800327c:	58025444 	.word	0x58025444
 8003280:	58025458 	.word	0x58025458
 8003284:	5802546c 	.word	0x5802546c
 8003288:	58025480 	.word	0x58025480
 800328c:	58025494 	.word	0x58025494

08003290 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003298:	f7ff f904 	bl	80024a4 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e2dc      	b.n	8003862 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d008      	beq.n	80032c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2280      	movs	r2, #128	@ 0x80
 80032b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e2cd      	b.n	8003862 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a76      	ldr	r2, [pc, #472]	@ (80034a4 <HAL_DMA_Abort+0x214>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d04a      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a74      	ldr	r2, [pc, #464]	@ (80034a8 <HAL_DMA_Abort+0x218>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d045      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a73      	ldr	r2, [pc, #460]	@ (80034ac <HAL_DMA_Abort+0x21c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d040      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a71      	ldr	r2, [pc, #452]	@ (80034b0 <HAL_DMA_Abort+0x220>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d03b      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a70      	ldr	r2, [pc, #448]	@ (80034b4 <HAL_DMA_Abort+0x224>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d036      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a6e      	ldr	r2, [pc, #440]	@ (80034b8 <HAL_DMA_Abort+0x228>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d031      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6d      	ldr	r2, [pc, #436]	@ (80034bc <HAL_DMA_Abort+0x22c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d02c      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a6b      	ldr	r2, [pc, #428]	@ (80034c0 <HAL_DMA_Abort+0x230>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d027      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6a      	ldr	r2, [pc, #424]	@ (80034c4 <HAL_DMA_Abort+0x234>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d022      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a68      	ldr	r2, [pc, #416]	@ (80034c8 <HAL_DMA_Abort+0x238>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01d      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a67      	ldr	r2, [pc, #412]	@ (80034cc <HAL_DMA_Abort+0x23c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a65      	ldr	r2, [pc, #404]	@ (80034d0 <HAL_DMA_Abort+0x240>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a64      	ldr	r2, [pc, #400]	@ (80034d4 <HAL_DMA_Abort+0x244>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a62      	ldr	r2, [pc, #392]	@ (80034d8 <HAL_DMA_Abort+0x248>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a61      	ldr	r2, [pc, #388]	@ (80034dc <HAL_DMA_Abort+0x24c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_Abort+0xd6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a5f      	ldr	r2, [pc, #380]	@ (80034e0 <HAL_DMA_Abort+0x250>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_DMA_Abort+0xda>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_DMA_Abort+0xdc>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d013      	beq.n	8003398 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 021e 	bic.w	r2, r2, #30
 800337e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800338e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e00a      	b.n	80033ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020e 	bic.w	r2, r2, #14
 80033a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3c      	ldr	r2, [pc, #240]	@ (80034a4 <HAL_DMA_Abort+0x214>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d072      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3a      	ldr	r2, [pc, #232]	@ (80034a8 <HAL_DMA_Abort+0x218>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d06d      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a39      	ldr	r2, [pc, #228]	@ (80034ac <HAL_DMA_Abort+0x21c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d068      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a37      	ldr	r2, [pc, #220]	@ (80034b0 <HAL_DMA_Abort+0x220>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d063      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a36      	ldr	r2, [pc, #216]	@ (80034b4 <HAL_DMA_Abort+0x224>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d05e      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a34      	ldr	r2, [pc, #208]	@ (80034b8 <HAL_DMA_Abort+0x228>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d059      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a33      	ldr	r2, [pc, #204]	@ (80034bc <HAL_DMA_Abort+0x22c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d054      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a31      	ldr	r2, [pc, #196]	@ (80034c0 <HAL_DMA_Abort+0x230>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d04f      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a30      	ldr	r2, [pc, #192]	@ (80034c4 <HAL_DMA_Abort+0x234>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d04a      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2e      	ldr	r2, [pc, #184]	@ (80034c8 <HAL_DMA_Abort+0x238>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d045      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_DMA_Abort+0x23c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d040      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2b      	ldr	r2, [pc, #172]	@ (80034d0 <HAL_DMA_Abort+0x240>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d03b      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2a      	ldr	r2, [pc, #168]	@ (80034d4 <HAL_DMA_Abort+0x244>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d036      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <HAL_DMA_Abort+0x248>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d031      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <HAL_DMA_Abort+0x24c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d02c      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a25      	ldr	r2, [pc, #148]	@ (80034e0 <HAL_DMA_Abort+0x250>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d027      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <HAL_DMA_Abort+0x254>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <HAL_DMA_Abort+0x258>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01d      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <HAL_DMA_Abort+0x25c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <HAL_DMA_Abort+0x260>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_DMA_Abort+0x264>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <HAL_DMA_Abort+0x268>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_DMA_Abort+0x26c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_DMA_Abort+0x20e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_DMA_Abort+0x270>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d132      	bne.n	8003504 <HAL_DMA_Abort+0x274>
 800349e:	2301      	movs	r3, #1
 80034a0:	e031      	b.n	8003506 <HAL_DMA_Abort+0x276>
 80034a2:	bf00      	nop
 80034a4:	40020010 	.word	0x40020010
 80034a8:	40020028 	.word	0x40020028
 80034ac:	40020040 	.word	0x40020040
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40020070 	.word	0x40020070
 80034b8:	40020088 	.word	0x40020088
 80034bc:	400200a0 	.word	0x400200a0
 80034c0:	400200b8 	.word	0x400200b8
 80034c4:	40020410 	.word	0x40020410
 80034c8:	40020428 	.word	0x40020428
 80034cc:	40020440 	.word	0x40020440
 80034d0:	40020458 	.word	0x40020458
 80034d4:	40020470 	.word	0x40020470
 80034d8:	40020488 	.word	0x40020488
 80034dc:	400204a0 	.word	0x400204a0
 80034e0:	400204b8 	.word	0x400204b8
 80034e4:	58025408 	.word	0x58025408
 80034e8:	5802541c 	.word	0x5802541c
 80034ec:	58025430 	.word	0x58025430
 80034f0:	58025444 	.word	0x58025444
 80034f4:	58025458 	.word	0x58025458
 80034f8:	5802546c 	.word	0x5802546c
 80034fc:	58025480 	.word	0x58025480
 8003500:	58025494 	.word	0x58025494
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003518:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a6d      	ldr	r2, [pc, #436]	@ (80036d4 <HAL_DMA_Abort+0x444>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04a      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6b      	ldr	r2, [pc, #428]	@ (80036d8 <HAL_DMA_Abort+0x448>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a6a      	ldr	r2, [pc, #424]	@ (80036dc <HAL_DMA_Abort+0x44c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a68      	ldr	r2, [pc, #416]	@ (80036e0 <HAL_DMA_Abort+0x450>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d03b      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a67      	ldr	r2, [pc, #412]	@ (80036e4 <HAL_DMA_Abort+0x454>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a65      	ldr	r2, [pc, #404]	@ (80036e8 <HAL_DMA_Abort+0x458>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a64      	ldr	r2, [pc, #400]	@ (80036ec <HAL_DMA_Abort+0x45c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a62      	ldr	r2, [pc, #392]	@ (80036f0 <HAL_DMA_Abort+0x460>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d027      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a61      	ldr	r2, [pc, #388]	@ (80036f4 <HAL_DMA_Abort+0x464>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5f      	ldr	r2, [pc, #380]	@ (80036f8 <HAL_DMA_Abort+0x468>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5e      	ldr	r2, [pc, #376]	@ (80036fc <HAL_DMA_Abort+0x46c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5c      	ldr	r2, [pc, #368]	@ (8003700 <HAL_DMA_Abort+0x470>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5b      	ldr	r2, [pc, #364]	@ (8003704 <HAL_DMA_Abort+0x474>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a59      	ldr	r2, [pc, #356]	@ (8003708 <HAL_DMA_Abort+0x478>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a58      	ldr	r2, [pc, #352]	@ (800370c <HAL_DMA_Abort+0x47c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_Abort+0x32a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a56      	ldr	r2, [pc, #344]	@ (8003710 <HAL_DMA_Abort+0x480>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <HAL_DMA_Abort+0x33c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e007      	b.n	80035dc <HAL_DMA_Abort+0x34c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0201 	bic.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80035dc:	e013      	b.n	8003606 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035de:	f7fe ff61 	bl	80024a4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d90c      	bls.n	8003606 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2203      	movs	r2, #3
 80035f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e12d      	b.n	8003862 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2f      	ldr	r2, [pc, #188]	@ (80036d4 <HAL_DMA_Abort+0x444>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <HAL_DMA_Abort+0x448>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <HAL_DMA_Abort+0x44c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2a      	ldr	r2, [pc, #168]	@ (80036e0 <HAL_DMA_Abort+0x450>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a29      	ldr	r2, [pc, #164]	@ (80036e4 <HAL_DMA_Abort+0x454>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a27      	ldr	r2, [pc, #156]	@ (80036e8 <HAL_DMA_Abort+0x458>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a26      	ldr	r2, [pc, #152]	@ (80036ec <HAL_DMA_Abort+0x45c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a24      	ldr	r2, [pc, #144]	@ (80036f0 <HAL_DMA_Abort+0x460>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a23      	ldr	r2, [pc, #140]	@ (80036f4 <HAL_DMA_Abort+0x464>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a21      	ldr	r2, [pc, #132]	@ (80036f8 <HAL_DMA_Abort+0x468>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a20      	ldr	r2, [pc, #128]	@ (80036fc <HAL_DMA_Abort+0x46c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1e      	ldr	r2, [pc, #120]	@ (8003700 <HAL_DMA_Abort+0x470>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_DMA_Abort+0x474>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_DMA_Abort+0x478>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <HAL_DMA_Abort+0x47c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Abort+0x422>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <HAL_DMA_Abort+0x480>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Abort+0x426>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_DMA_Abort+0x428>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02b      	beq.n	8003714 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	223f      	movs	r2, #63	@ 0x3f
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	e02a      	b.n	800372a <HAL_DMA_Abort+0x49a>
 80036d4:	40020010 	.word	0x40020010
 80036d8:	40020028 	.word	0x40020028
 80036dc:	40020040 	.word	0x40020040
 80036e0:	40020058 	.word	0x40020058
 80036e4:	40020070 	.word	0x40020070
 80036e8:	40020088 	.word	0x40020088
 80036ec:	400200a0 	.word	0x400200a0
 80036f0:	400200b8 	.word	0x400200b8
 80036f4:	40020410 	.word	0x40020410
 80036f8:	40020428 	.word	0x40020428
 80036fc:	40020440 	.word	0x40020440
 8003700:	40020458 	.word	0x40020458
 8003704:	40020470 	.word	0x40020470
 8003708:	40020488 	.word	0x40020488
 800370c:	400204a0 	.word	0x400204a0
 8003710:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003718:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2201      	movs	r2, #1
 8003724:	409a      	lsls	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4f      	ldr	r2, [pc, #316]	@ (800386c <HAL_DMA_Abort+0x5dc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d072      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a4d      	ldr	r2, [pc, #308]	@ (8003870 <HAL_DMA_Abort+0x5e0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d06d      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a4c      	ldr	r2, [pc, #304]	@ (8003874 <HAL_DMA_Abort+0x5e4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d068      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a4a      	ldr	r2, [pc, #296]	@ (8003878 <HAL_DMA_Abort+0x5e8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d063      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a49      	ldr	r2, [pc, #292]	@ (800387c <HAL_DMA_Abort+0x5ec>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d05e      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a47      	ldr	r2, [pc, #284]	@ (8003880 <HAL_DMA_Abort+0x5f0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d059      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a46      	ldr	r2, [pc, #280]	@ (8003884 <HAL_DMA_Abort+0x5f4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d054      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a44      	ldr	r2, [pc, #272]	@ (8003888 <HAL_DMA_Abort+0x5f8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d04f      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a43      	ldr	r2, [pc, #268]	@ (800388c <HAL_DMA_Abort+0x5fc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d04a      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a41      	ldr	r2, [pc, #260]	@ (8003890 <HAL_DMA_Abort+0x600>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d045      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a40      	ldr	r2, [pc, #256]	@ (8003894 <HAL_DMA_Abort+0x604>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d040      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3e      	ldr	r2, [pc, #248]	@ (8003898 <HAL_DMA_Abort+0x608>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d03b      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3d      	ldr	r2, [pc, #244]	@ (800389c <HAL_DMA_Abort+0x60c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d036      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3b      	ldr	r2, [pc, #236]	@ (80038a0 <HAL_DMA_Abort+0x610>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3a      	ldr	r2, [pc, #232]	@ (80038a4 <HAL_DMA_Abort+0x614>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a38      	ldr	r2, [pc, #224]	@ (80038a8 <HAL_DMA_Abort+0x618>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d027      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a37      	ldr	r2, [pc, #220]	@ (80038ac <HAL_DMA_Abort+0x61c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a35      	ldr	r2, [pc, #212]	@ (80038b0 <HAL_DMA_Abort+0x620>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01d      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a34      	ldr	r2, [pc, #208]	@ (80038b4 <HAL_DMA_Abort+0x624>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d018      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a32      	ldr	r2, [pc, #200]	@ (80038b8 <HAL_DMA_Abort+0x628>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a31      	ldr	r2, [pc, #196]	@ (80038bc <HAL_DMA_Abort+0x62c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2f      	ldr	r2, [pc, #188]	@ (80038c0 <HAL_DMA_Abort+0x630>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2e      	ldr	r2, [pc, #184]	@ (80038c4 <HAL_DMA_Abort+0x634>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_DMA_Abort+0x58a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2c      	ldr	r2, [pc, #176]	@ (80038c8 <HAL_DMA_Abort+0x638>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_DMA_Abort+0x58e>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <HAL_DMA_Abort+0x590>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800382c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003844:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800384e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40020010 	.word	0x40020010
 8003870:	40020028 	.word	0x40020028
 8003874:	40020040 	.word	0x40020040
 8003878:	40020058 	.word	0x40020058
 800387c:	40020070 	.word	0x40020070
 8003880:	40020088 	.word	0x40020088
 8003884:	400200a0 	.word	0x400200a0
 8003888:	400200b8 	.word	0x400200b8
 800388c:	40020410 	.word	0x40020410
 8003890:	40020428 	.word	0x40020428
 8003894:	40020440 	.word	0x40020440
 8003898:	40020458 	.word	0x40020458
 800389c:	40020470 	.word	0x40020470
 80038a0:	40020488 	.word	0x40020488
 80038a4:	400204a0 	.word	0x400204a0
 80038a8:	400204b8 	.word	0x400204b8
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494

080038cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e237      	b.n	8003d4e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d004      	beq.n	80038f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2280      	movs	r2, #128	@ 0x80
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e22c      	b.n	8003d4e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a5c      	ldr	r2, [pc, #368]	@ (8003a6c <HAL_DMA_Abort_IT+0x1a0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d04a      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a5b      	ldr	r2, [pc, #364]	@ (8003a70 <HAL_DMA_Abort_IT+0x1a4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d045      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a59      	ldr	r2, [pc, #356]	@ (8003a74 <HAL_DMA_Abort_IT+0x1a8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d040      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a58      	ldr	r2, [pc, #352]	@ (8003a78 <HAL_DMA_Abort_IT+0x1ac>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d03b      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a56      	ldr	r2, [pc, #344]	@ (8003a7c <HAL_DMA_Abort_IT+0x1b0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d036      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a55      	ldr	r2, [pc, #340]	@ (8003a80 <HAL_DMA_Abort_IT+0x1b4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d031      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a53      	ldr	r2, [pc, #332]	@ (8003a84 <HAL_DMA_Abort_IT+0x1b8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02c      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a52      	ldr	r2, [pc, #328]	@ (8003a88 <HAL_DMA_Abort_IT+0x1bc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d027      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a50      	ldr	r2, [pc, #320]	@ (8003a8c <HAL_DMA_Abort_IT+0x1c0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d022      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a4f      	ldr	r2, [pc, #316]	@ (8003a90 <HAL_DMA_Abort_IT+0x1c4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d01d      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a4d      	ldr	r2, [pc, #308]	@ (8003a94 <HAL_DMA_Abort_IT+0x1c8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a4c      	ldr	r2, [pc, #304]	@ (8003a98 <HAL_DMA_Abort_IT+0x1cc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a4a      	ldr	r2, [pc, #296]	@ (8003a9c <HAL_DMA_Abort_IT+0x1d0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a49      	ldr	r2, [pc, #292]	@ (8003aa0 <HAL_DMA_Abort_IT+0x1d4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a47      	ldr	r2, [pc, #284]	@ (8003aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_DMA_Abort_IT+0xc8>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a46      	ldr	r2, [pc, #280]	@ (8003aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <HAL_DMA_Abort_IT+0xcc>
 8003994:	2301      	movs	r3, #1
 8003996:	e000      	b.n	800399a <HAL_DMA_Abort_IT+0xce>
 8003998:	2300      	movs	r3, #0
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8086 	beq.w	8003aac <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	@ (8003a6c <HAL_DMA_Abort_IT+0x1a0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d04a      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003a70 <HAL_DMA_Abort_IT+0x1a4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d045      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a74 <HAL_DMA_Abort_IT+0x1a8>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d040      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003a78 <HAL_DMA_Abort_IT+0x1ac>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d03b      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a29      	ldr	r2, [pc, #164]	@ (8003a7c <HAL_DMA_Abort_IT+0x1b0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d036      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a28      	ldr	r2, [pc, #160]	@ (8003a80 <HAL_DMA_Abort_IT+0x1b4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d031      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a26      	ldr	r2, [pc, #152]	@ (8003a84 <HAL_DMA_Abort_IT+0x1b8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02c      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a25      	ldr	r2, [pc, #148]	@ (8003a88 <HAL_DMA_Abort_IT+0x1bc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d027      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	@ (8003a8c <HAL_DMA_Abort_IT+0x1c0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d022      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a22      	ldr	r2, [pc, #136]	@ (8003a90 <HAL_DMA_Abort_IT+0x1c4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d01d      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <HAL_DMA_Abort_IT+0x1c8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d018      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003a98 <HAL_DMA_Abort_IT+0x1cc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <HAL_DMA_Abort_IT+0x1d0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00e      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa0 <HAL_DMA_Abort_IT+0x1d4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d009      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <HAL_DMA_Abort_IT+0x1d8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x17c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a19      	ldr	r2, [pc, #100]	@ (8003aa8 <HAL_DMA_Abort_IT+0x1dc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <HAL_DMA_Abort_IT+0x18e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e178      	b.n	8003d4c <HAL_DMA_Abort_IT+0x480>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	e16f      	b.n	8003d4c <HAL_DMA_Abort_IT+0x480>
 8003a6c:	40020010 	.word	0x40020010
 8003a70:	40020028 	.word	0x40020028
 8003a74:	40020040 	.word	0x40020040
 8003a78:	40020058 	.word	0x40020058
 8003a7c:	40020070 	.word	0x40020070
 8003a80:	40020088 	.word	0x40020088
 8003a84:	400200a0 	.word	0x400200a0
 8003a88:	400200b8 	.word	0x400200b8
 8003a8c:	40020410 	.word	0x40020410
 8003a90:	40020428 	.word	0x40020428
 8003a94:	40020440 	.word	0x40020440
 8003a98:	40020458 	.word	0x40020458
 8003a9c:	40020470 	.word	0x40020470
 8003aa0:	40020488 	.word	0x40020488
 8003aa4:	400204a0 	.word	0x400204a0
 8003aa8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 020e 	bic.w	r2, r2, #14
 8003aba:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a6c      	ldr	r2, [pc, #432]	@ (8003c74 <HAL_DMA_Abort_IT+0x3a8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04a      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6b      	ldr	r2, [pc, #428]	@ (8003c78 <HAL_DMA_Abort_IT+0x3ac>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d045      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a69      	ldr	r2, [pc, #420]	@ (8003c7c <HAL_DMA_Abort_IT+0x3b0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d040      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a68      	ldr	r2, [pc, #416]	@ (8003c80 <HAL_DMA_Abort_IT+0x3b4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d03b      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a66      	ldr	r2, [pc, #408]	@ (8003c84 <HAL_DMA_Abort_IT+0x3b8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d036      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a65      	ldr	r2, [pc, #404]	@ (8003c88 <HAL_DMA_Abort_IT+0x3bc>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d031      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a63      	ldr	r2, [pc, #396]	@ (8003c8c <HAL_DMA_Abort_IT+0x3c0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d02c      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a62      	ldr	r2, [pc, #392]	@ (8003c90 <HAL_DMA_Abort_IT+0x3c4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d027      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a60      	ldr	r2, [pc, #384]	@ (8003c94 <HAL_DMA_Abort_IT+0x3c8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d022      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a5f      	ldr	r2, [pc, #380]	@ (8003c98 <HAL_DMA_Abort_IT+0x3cc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01d      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a5d      	ldr	r2, [pc, #372]	@ (8003c9c <HAL_DMA_Abort_IT+0x3d0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d018      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5a      	ldr	r2, [pc, #360]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00e      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a59      	ldr	r2, [pc, #356]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d009      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a57      	ldr	r2, [pc, #348]	@ (8003cac <HAL_DMA_Abort_IT+0x3e0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <HAL_DMA_Abort_IT+0x290>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a56      	ldr	r2, [pc, #344]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <HAL_DMA_Abort_IT+0x2a2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e007      	b.n	8003b7e <HAL_DMA_Abort_IT+0x2b2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3c      	ldr	r2, [pc, #240]	@ (8003c74 <HAL_DMA_Abort_IT+0x3a8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d072      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c78 <HAL_DMA_Abort_IT+0x3ac>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d06d      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a39      	ldr	r2, [pc, #228]	@ (8003c7c <HAL_DMA_Abort_IT+0x3b0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d068      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a37      	ldr	r2, [pc, #220]	@ (8003c80 <HAL_DMA_Abort_IT+0x3b4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d063      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a36      	ldr	r2, [pc, #216]	@ (8003c84 <HAL_DMA_Abort_IT+0x3b8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d05e      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a34      	ldr	r2, [pc, #208]	@ (8003c88 <HAL_DMA_Abort_IT+0x3bc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d059      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a33      	ldr	r2, [pc, #204]	@ (8003c8c <HAL_DMA_Abort_IT+0x3c0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d054      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a31      	ldr	r2, [pc, #196]	@ (8003c90 <HAL_DMA_Abort_IT+0x3c4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d04f      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a30      	ldr	r2, [pc, #192]	@ (8003c94 <HAL_DMA_Abort_IT+0x3c8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d04a      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003c98 <HAL_DMA_Abort_IT+0x3cc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d045      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c9c <HAL_DMA_Abort_IT+0x3d0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d040      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3d4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d03b      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3d8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d036      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a28      	ldr	r2, [pc, #160]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3dc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d031      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a27      	ldr	r2, [pc, #156]	@ (8003cac <HAL_DMA_Abort_IT+0x3e0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d02c      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a25      	ldr	r2, [pc, #148]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3e4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d027      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a24      	ldr	r2, [pc, #144]	@ (8003cb4 <HAL_DMA_Abort_IT+0x3e8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d022      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a22      	ldr	r2, [pc, #136]	@ (8003cb8 <HAL_DMA_Abort_IT+0x3ec>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a21      	ldr	r2, [pc, #132]	@ (8003cbc <HAL_DMA_Abort_IT+0x3f0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <HAL_DMA_Abort_IT+0x3f4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3f8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3fc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003ccc <HAL_DMA_Abort_IT+0x400>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_DMA_Abort_IT+0x3a2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a19      	ldr	r2, [pc, #100]	@ (8003cd0 <HAL_DMA_Abort_IT+0x404>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d132      	bne.n	8003cd4 <HAL_DMA_Abort_IT+0x408>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e031      	b.n	8003cd6 <HAL_DMA_Abort_IT+0x40a>
 8003c72:	bf00      	nop
 8003c74:	40020010 	.word	0x40020010
 8003c78:	40020028 	.word	0x40020028
 8003c7c:	40020040 	.word	0x40020040
 8003c80:	40020058 	.word	0x40020058
 8003c84:	40020070 	.word	0x40020070
 8003c88:	40020088 	.word	0x40020088
 8003c8c:	400200a0 	.word	0x400200a0
 8003c90:	400200b8 	.word	0x400200b8
 8003c94:	40020410 	.word	0x40020410
 8003c98:	40020428 	.word	0x40020428
 8003c9c:	40020440 	.word	0x40020440
 8003ca0:	40020458 	.word	0x40020458
 8003ca4:	40020470 	.word	0x40020470
 8003ca8:	40020488 	.word	0x40020488
 8003cac:	400204a0 	.word	0x400204a0
 8003cb0:	400204b8 	.word	0x400204b8
 8003cb4:	58025408 	.word	0x58025408
 8003cb8:	5802541c 	.word	0x5802541c
 8003cbc:	58025430 	.word	0x58025430
 8003cc0:	58025444 	.word	0x58025444
 8003cc4:	58025458 	.word	0x58025458
 8003cc8:	5802546c 	.word	0x5802546c
 8003ccc:	58025480 	.word	0x58025480
 8003cd0:	58025494 	.word	0x58025494
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d028      	beq.n	8003d2c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cee:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d08:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d20:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d2a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop

08003d58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	@ 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d64:	4b67      	ldr	r3, [pc, #412]	@ (8003f04 <HAL_DMA_IRQHandler+0x1ac>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a67      	ldr	r2, [pc, #412]	@ (8003f08 <HAL_DMA_IRQHandler+0x1b0>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	0a9b      	lsrs	r3, r3, #10
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d76:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a5f      	ldr	r2, [pc, #380]	@ (8003f0c <HAL_DMA_IRQHandler+0x1b4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d04a      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a5d      	ldr	r2, [pc, #372]	@ (8003f10 <HAL_DMA_IRQHandler+0x1b8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d045      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f14 <HAL_DMA_IRQHandler+0x1bc>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d040      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a5a      	ldr	r2, [pc, #360]	@ (8003f18 <HAL_DMA_IRQHandler+0x1c0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d03b      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a59      	ldr	r2, [pc, #356]	@ (8003f1c <HAL_DMA_IRQHandler+0x1c4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d036      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a57      	ldr	r2, [pc, #348]	@ (8003f20 <HAL_DMA_IRQHandler+0x1c8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d031      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a56      	ldr	r2, [pc, #344]	@ (8003f24 <HAL_DMA_IRQHandler+0x1cc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d02c      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a54      	ldr	r2, [pc, #336]	@ (8003f28 <HAL_DMA_IRQHandler+0x1d0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d027      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a53      	ldr	r2, [pc, #332]	@ (8003f2c <HAL_DMA_IRQHandler+0x1d4>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d022      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a51      	ldr	r2, [pc, #324]	@ (8003f30 <HAL_DMA_IRQHandler+0x1d8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01d      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a50      	ldr	r2, [pc, #320]	@ (8003f34 <HAL_DMA_IRQHandler+0x1dc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d018      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8003f38 <HAL_DMA_IRQHandler+0x1e0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a4d      	ldr	r2, [pc, #308]	@ (8003f3c <HAL_DMA_IRQHandler+0x1e4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a4b      	ldr	r2, [pc, #300]	@ (8003f40 <HAL_DMA_IRQHandler+0x1e8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f44 <HAL_DMA_IRQHandler+0x1ec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_DMA_IRQHandler+0xd2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a48      	ldr	r2, [pc, #288]	@ (8003f48 <HAL_DMA_IRQHandler+0x1f0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <HAL_DMA_IRQHandler+0xd6>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_DMA_IRQHandler+0xd8>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 842b 	beq.w	800468c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2208      	movs	r2, #8
 8003e40:	409a      	lsls	r2, r3
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80a2 	beq.w	8003f90 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a2e      	ldr	r2, [pc, #184]	@ (8003f0c <HAL_DMA_IRQHandler+0x1b4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04a      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f10 <HAL_DMA_IRQHandler+0x1b8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d045      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2b      	ldr	r2, [pc, #172]	@ (8003f14 <HAL_DMA_IRQHandler+0x1bc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d040      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f18 <HAL_DMA_IRQHandler+0x1c0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d03b      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a28      	ldr	r2, [pc, #160]	@ (8003f1c <HAL_DMA_IRQHandler+0x1c4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d036      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a27      	ldr	r2, [pc, #156]	@ (8003f20 <HAL_DMA_IRQHandler+0x1c8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a25      	ldr	r2, [pc, #148]	@ (8003f24 <HAL_DMA_IRQHandler+0x1cc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d02c      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a24      	ldr	r2, [pc, #144]	@ (8003f28 <HAL_DMA_IRQHandler+0x1d0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d027      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <HAL_DMA_IRQHandler+0x1d4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d022      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a21      	ldr	r2, [pc, #132]	@ (8003f30 <HAL_DMA_IRQHandler+0x1d8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d01d      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <HAL_DMA_IRQHandler+0x1dc>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d018      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8003f38 <HAL_DMA_IRQHandler+0x1e0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <HAL_DMA_IRQHandler+0x1e4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00e      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <HAL_DMA_IRQHandler+0x1e8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a19      	ldr	r2, [pc, #100]	@ (8003f44 <HAL_DMA_IRQHandler+0x1ec>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_IRQHandler+0x194>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_DMA_IRQHandler+0x1f0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d12f      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x1f4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e02e      	b.n	8003f60 <HAL_DMA_IRQHandler+0x208>
 8003f02:	bf00      	nop
 8003f04:	24000000 	.word	0x24000000
 8003f08:	1b4e81b5 	.word	0x1b4e81b5
 8003f0c:	40020010 	.word	0x40020010
 8003f10:	40020028 	.word	0x40020028
 8003f14:	40020040 	.word	0x40020040
 8003f18:	40020058 	.word	0x40020058
 8003f1c:	40020070 	.word	0x40020070
 8003f20:	40020088 	.word	0x40020088
 8003f24:	400200a0 	.word	0x400200a0
 8003f28:	400200b8 	.word	0x400200b8
 8003f2c:	40020410 	.word	0x40020410
 8003f30:	40020428 	.word	0x40020428
 8003f34:	40020440 	.word	0x40020440
 8003f38:	40020458 	.word	0x40020458
 8003f3c:	40020470 	.word	0x40020470
 8003f40:	40020488 	.word	0x40020488
 8003f44:	400204a0 	.word	0x400204a0
 8003f48:	400204b8 	.word	0x400204b8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d06e      	beq.n	8004084 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a69      	ldr	r2, [pc, #420]	@ (8004150 <HAL_DMA_IRQHandler+0x3f8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a67      	ldr	r2, [pc, #412]	@ (8004154 <HAL_DMA_IRQHandler+0x3fc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a66      	ldr	r2, [pc, #408]	@ (8004158 <HAL_DMA_IRQHandler+0x400>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a64      	ldr	r2, [pc, #400]	@ (800415c <HAL_DMA_IRQHandler+0x404>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a63      	ldr	r2, [pc, #396]	@ (8004160 <HAL_DMA_IRQHandler+0x408>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a61      	ldr	r2, [pc, #388]	@ (8004164 <HAL_DMA_IRQHandler+0x40c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a60      	ldr	r2, [pc, #384]	@ (8004168 <HAL_DMA_IRQHandler+0x410>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800416c <HAL_DMA_IRQHandler+0x414>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a5d      	ldr	r2, [pc, #372]	@ (8004170 <HAL_DMA_IRQHandler+0x418>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5b      	ldr	r2, [pc, #364]	@ (8004174 <HAL_DMA_IRQHandler+0x41c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a5a      	ldr	r2, [pc, #360]	@ (8004178 <HAL_DMA_IRQHandler+0x420>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a58      	ldr	r2, [pc, #352]	@ (800417c <HAL_DMA_IRQHandler+0x424>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a57      	ldr	r2, [pc, #348]	@ (8004180 <HAL_DMA_IRQHandler+0x428>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a55      	ldr	r2, [pc, #340]	@ (8004184 <HAL_DMA_IRQHandler+0x42c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a54      	ldr	r2, [pc, #336]	@ (8004188 <HAL_DMA_IRQHandler+0x430>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2ee>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a52      	ldr	r2, [pc, #328]	@ (800418c <HAL_DMA_IRQHandler+0x434>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10a      	bne.n	800405c <HAL_DMA_IRQHandler+0x304>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e003      	b.n	8004064 <HAL_DMA_IRQHandler+0x30c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	f043 0202 	orr.w	r2, r3, #2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	2204      	movs	r2, #4
 800408e:	409a      	lsls	r2, r3
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 808f 	beq.w	80041b8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2c      	ldr	r2, [pc, #176]	@ (8004150 <HAL_DMA_IRQHandler+0x3f8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d04a      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004154 <HAL_DMA_IRQHandler+0x3fc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d045      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a29      	ldr	r2, [pc, #164]	@ (8004158 <HAL_DMA_IRQHandler+0x400>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d040      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a27      	ldr	r2, [pc, #156]	@ (800415c <HAL_DMA_IRQHandler+0x404>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d03b      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a26      	ldr	r2, [pc, #152]	@ (8004160 <HAL_DMA_IRQHandler+0x408>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d036      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <HAL_DMA_IRQHandler+0x40c>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a23      	ldr	r2, [pc, #140]	@ (8004168 <HAL_DMA_IRQHandler+0x410>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d02c      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a21      	ldr	r2, [pc, #132]	@ (800416c <HAL_DMA_IRQHandler+0x414>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d027      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a20      	ldr	r2, [pc, #128]	@ (8004170 <HAL_DMA_IRQHandler+0x418>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d022      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004174 <HAL_DMA_IRQHandler+0x41c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d01d      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <HAL_DMA_IRQHandler+0x420>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d018      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <HAL_DMA_IRQHandler+0x424>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d013      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1a      	ldr	r2, [pc, #104]	@ (8004180 <HAL_DMA_IRQHandler+0x428>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00e      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a18      	ldr	r2, [pc, #96]	@ (8004184 <HAL_DMA_IRQHandler+0x42c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d009      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <HAL_DMA_IRQHandler+0x430>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d004      	beq.n	800413a <HAL_DMA_IRQHandler+0x3e2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a15      	ldr	r2, [pc, #84]	@ (800418c <HAL_DMA_IRQHandler+0x434>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d12a      	bne.n	8004190 <HAL_DMA_IRQHandler+0x438>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e023      	b.n	8004198 <HAL_DMA_IRQHandler+0x440>
 8004150:	40020010 	.word	0x40020010
 8004154:	40020028 	.word	0x40020028
 8004158:	40020040 	.word	0x40020040
 800415c:	40020058 	.word	0x40020058
 8004160:	40020070 	.word	0x40020070
 8004164:	40020088 	.word	0x40020088
 8004168:	400200a0 	.word	0x400200a0
 800416c:	400200b8 	.word	0x400200b8
 8004170:	40020410 	.word	0x40020410
 8004174:	40020428 	.word	0x40020428
 8004178:	40020440 	.word	0x40020440
 800417c:	40020458 	.word	0x40020458
 8004180:	40020470 	.word	0x40020470
 8004184:	40020488 	.word	0x40020488
 8004188:	400204a0 	.word	0x400204a0
 800418c:	400204b8 	.word	0x400204b8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2204      	movs	r2, #4
 80041a6:	409a      	lsls	r2, r3
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b0:	f043 0204 	orr.w	r2, r3, #4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2210      	movs	r2, #16
 80041c2:	409a      	lsls	r2, r3
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a6 	beq.w	800431a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a85      	ldr	r2, [pc, #532]	@ (80043e8 <HAL_DMA_IRQHandler+0x690>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a83      	ldr	r2, [pc, #524]	@ (80043ec <HAL_DMA_IRQHandler+0x694>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a82      	ldr	r2, [pc, #520]	@ (80043f0 <HAL_DMA_IRQHandler+0x698>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a80      	ldr	r2, [pc, #512]	@ (80043f4 <HAL_DMA_IRQHandler+0x69c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	@ (80043f8 <HAL_DMA_IRQHandler+0x6a0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a7d      	ldr	r2, [pc, #500]	@ (80043fc <HAL_DMA_IRQHandler+0x6a4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a7c      	ldr	r2, [pc, #496]	@ (8004400 <HAL_DMA_IRQHandler+0x6a8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a7a      	ldr	r2, [pc, #488]	@ (8004404 <HAL_DMA_IRQHandler+0x6ac>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a79      	ldr	r2, [pc, #484]	@ (8004408 <HAL_DMA_IRQHandler+0x6b0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a77      	ldr	r2, [pc, #476]	@ (800440c <HAL_DMA_IRQHandler+0x6b4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a76      	ldr	r2, [pc, #472]	@ (8004410 <HAL_DMA_IRQHandler+0x6b8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a74      	ldr	r2, [pc, #464]	@ (8004414 <HAL_DMA_IRQHandler+0x6bc>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a73      	ldr	r2, [pc, #460]	@ (8004418 <HAL_DMA_IRQHandler+0x6c0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a71      	ldr	r2, [pc, #452]	@ (800441c <HAL_DMA_IRQHandler+0x6c4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a70      	ldr	r2, [pc, #448]	@ (8004420 <HAL_DMA_IRQHandler+0x6c8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_IRQHandler+0x516>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6e      	ldr	r2, [pc, #440]	@ (8004424 <HAL_DMA_IRQHandler+0x6cc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10a      	bne.n	8004284 <HAL_DMA_IRQHandler+0x52c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e009      	b.n	8004298 <HAL_DMA_IRQHandler+0x540>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d03e      	beq.n	800431a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	2210      	movs	r2, #16
 80042a6:	409a      	lsls	r2, r3
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d024      	beq.n	800431a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
 80042d8:	e01f      	b.n	800431a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01b      	beq.n	800431a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e016      	b.n	800431a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 0208 	bic.w	r2, r2, #8
 8004308:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	2220      	movs	r2, #32
 8004324:	409a      	lsls	r2, r3
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8110 	beq.w	8004550 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2c      	ldr	r2, [pc, #176]	@ (80043e8 <HAL_DMA_IRQHandler+0x690>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d04a      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a2b      	ldr	r2, [pc, #172]	@ (80043ec <HAL_DMA_IRQHandler+0x694>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d045      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a29      	ldr	r2, [pc, #164]	@ (80043f0 <HAL_DMA_IRQHandler+0x698>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d040      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a28      	ldr	r2, [pc, #160]	@ (80043f4 <HAL_DMA_IRQHandler+0x69c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d03b      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a26      	ldr	r2, [pc, #152]	@ (80043f8 <HAL_DMA_IRQHandler+0x6a0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d036      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a25      	ldr	r2, [pc, #148]	@ (80043fc <HAL_DMA_IRQHandler+0x6a4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d031      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a23      	ldr	r2, [pc, #140]	@ (8004400 <HAL_DMA_IRQHandler+0x6a8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02c      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a22      	ldr	r2, [pc, #136]	@ (8004404 <HAL_DMA_IRQHandler+0x6ac>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d027      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a20      	ldr	r2, [pc, #128]	@ (8004408 <HAL_DMA_IRQHandler+0x6b0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d022      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1f      	ldr	r2, [pc, #124]	@ (800440c <HAL_DMA_IRQHandler+0x6b4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d01d      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <HAL_DMA_IRQHandler+0x6b8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d018      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004414 <HAL_DMA_IRQHandler+0x6bc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004418 <HAL_DMA_IRQHandler+0x6c0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a19      	ldr	r2, [pc, #100]	@ (800441c <HAL_DMA_IRQHandler+0x6c4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d009      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a17      	ldr	r2, [pc, #92]	@ (8004420 <HAL_DMA_IRQHandler+0x6c8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x678>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a16      	ldr	r2, [pc, #88]	@ (8004424 <HAL_DMA_IRQHandler+0x6cc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d12b      	bne.n	8004428 <HAL_DMA_IRQHandler+0x6d0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	e02a      	b.n	800443c <HAL_DMA_IRQHandler+0x6e4>
 80043e6:	bf00      	nop
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 8087 	beq.w	8004550 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	2220      	movs	r2, #32
 800444c:	409a      	lsls	r2, r3
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b04      	cmp	r3, #4
 800445c:	d139      	bne.n	80044d2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0216 	bic.w	r2, r2, #22
 800446c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800447c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <HAL_DMA_IRQHandler+0x736>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800448a:	2b00      	cmp	r3, #0
 800448c:	d007      	beq.n	800449e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0208 	bic.w	r2, r2, #8
 800449c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	223f      	movs	r2, #63	@ 0x3f
 80044a8:	409a      	lsls	r2, r3
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 834a 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
          }
          return;
 80044d0:	e344      	b.n	8004b5c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d018      	beq.n	8004512 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02c      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
 80044fe:	e027      	b.n	8004550 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d023      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
 8004510:	e01e      	b.n	8004550 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0210 	bic.w	r2, r2, #16
 800452e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8306 	beq.w	8004b66 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8088 	beq.w	8004678 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2204      	movs	r2, #4
 800456c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a7a      	ldr	r2, [pc, #488]	@ (8004760 <HAL_DMA_IRQHandler+0xa08>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d04a      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a79      	ldr	r2, [pc, #484]	@ (8004764 <HAL_DMA_IRQHandler+0xa0c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d045      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a77      	ldr	r2, [pc, #476]	@ (8004768 <HAL_DMA_IRQHandler+0xa10>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d040      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a76      	ldr	r2, [pc, #472]	@ (800476c <HAL_DMA_IRQHandler+0xa14>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d03b      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a74      	ldr	r2, [pc, #464]	@ (8004770 <HAL_DMA_IRQHandler+0xa18>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d036      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a73      	ldr	r2, [pc, #460]	@ (8004774 <HAL_DMA_IRQHandler+0xa1c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d031      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a71      	ldr	r2, [pc, #452]	@ (8004778 <HAL_DMA_IRQHandler+0xa20>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d02c      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a70      	ldr	r2, [pc, #448]	@ (800477c <HAL_DMA_IRQHandler+0xa24>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d027      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004780 <HAL_DMA_IRQHandler+0xa28>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d022      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6d      	ldr	r2, [pc, #436]	@ (8004784 <HAL_DMA_IRQHandler+0xa2c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d01d      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004788 <HAL_DMA_IRQHandler+0xa30>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d018      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6a      	ldr	r2, [pc, #424]	@ (800478c <HAL_DMA_IRQHandler+0xa34>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a68      	ldr	r2, [pc, #416]	@ (8004790 <HAL_DMA_IRQHandler+0xa38>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00e      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a67      	ldr	r2, [pc, #412]	@ (8004794 <HAL_DMA_IRQHandler+0xa3c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a65      	ldr	r2, [pc, #404]	@ (8004798 <HAL_DMA_IRQHandler+0xa40>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_DMA_IRQHandler+0x8b8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a64      	ldr	r2, [pc, #400]	@ (800479c <HAL_DMA_IRQHandler+0xa44>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d108      	bne.n	8004622 <HAL_DMA_IRQHandler+0x8ca>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e007      	b.n	8004632 <HAL_DMA_IRQHandler+0x8da>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3301      	adds	r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800463a:	429a      	cmp	r2, r3
 800463c:	d307      	bcc.n	800464e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f2      	bne.n	8004632 <HAL_DMA_IRQHandler+0x8da>
 800464c:	e000      	b.n	8004650 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800464e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004666:	e003      	b.n	8004670 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8272 	beq.w	8004b66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
 800468a:	e26c      	b.n	8004b66 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a43      	ldr	r2, [pc, #268]	@ (80047a0 <HAL_DMA_IRQHandler+0xa48>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d022      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a42      	ldr	r2, [pc, #264]	@ (80047a4 <HAL_DMA_IRQHandler+0xa4c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d01d      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a40      	ldr	r2, [pc, #256]	@ (80047a8 <HAL_DMA_IRQHandler+0xa50>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d018      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a3f      	ldr	r2, [pc, #252]	@ (80047ac <HAL_DMA_IRQHandler+0xa54>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a3d      	ldr	r2, [pc, #244]	@ (80047b0 <HAL_DMA_IRQHandler+0xa58>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00e      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	@ (80047b4 <HAL_DMA_IRQHandler+0xa5c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d009      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3a      	ldr	r2, [pc, #232]	@ (80047b8 <HAL_DMA_IRQHandler+0xa60>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_IRQHandler+0x984>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a39      	ldr	r2, [pc, #228]	@ (80047bc <HAL_DMA_IRQHandler+0xa64>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x988>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_DMA_IRQHandler+0x98a>
 80046e0:	2300      	movs	r3, #0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 823f 	beq.w	8004b66 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2204      	movs	r2, #4
 80046fa:	409a      	lsls	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 80cd 	beq.w	80048a0 <HAL_DMA_IRQHandler+0xb48>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80c7 	beq.w	80048a0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2204      	movs	r2, #4
 800471c:	409a      	lsls	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d049      	beq.n	80047c0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8210 	beq.w	8004b60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004748:	e20a      	b.n	8004b60 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8206 	beq.w	8004b60 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800475c:	e200      	b.n	8004b60 <HAL_DMA_IRQHandler+0xe08>
 800475e:	bf00      	nop
 8004760:	40020010 	.word	0x40020010
 8004764:	40020028 	.word	0x40020028
 8004768:	40020040 	.word	0x40020040
 800476c:	40020058 	.word	0x40020058
 8004770:	40020070 	.word	0x40020070
 8004774:	40020088 	.word	0x40020088
 8004778:	400200a0 	.word	0x400200a0
 800477c:	400200b8 	.word	0x400200b8
 8004780:	40020410 	.word	0x40020410
 8004784:	40020428 	.word	0x40020428
 8004788:	40020440 	.word	0x40020440
 800478c:	40020458 	.word	0x40020458
 8004790:	40020470 	.word	0x40020470
 8004794:	40020488 	.word	0x40020488
 8004798:	400204a0 	.word	0x400204a0
 800479c:	400204b8 	.word	0x400204b8
 80047a0:	58025408 	.word	0x58025408
 80047a4:	5802541c 	.word	0x5802541c
 80047a8:	58025430 	.word	0x58025430
 80047ac:	58025444 	.word	0x58025444
 80047b0:	58025458 	.word	0x58025458
 80047b4:	5802546c 	.word	0x5802546c
 80047b8:	58025480 	.word	0x58025480
 80047bc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d160      	bne.n	800488c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7f      	ldr	r2, [pc, #508]	@ (80049cc <HAL_DMA_IRQHandler+0xc74>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d04a      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a7d      	ldr	r2, [pc, #500]	@ (80049d0 <HAL_DMA_IRQHandler+0xc78>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d045      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7c      	ldr	r2, [pc, #496]	@ (80049d4 <HAL_DMA_IRQHandler+0xc7c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d040      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a7a      	ldr	r2, [pc, #488]	@ (80049d8 <HAL_DMA_IRQHandler+0xc80>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d03b      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a79      	ldr	r2, [pc, #484]	@ (80049dc <HAL_DMA_IRQHandler+0xc84>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d036      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a77      	ldr	r2, [pc, #476]	@ (80049e0 <HAL_DMA_IRQHandler+0xc88>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d031      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a76      	ldr	r2, [pc, #472]	@ (80049e4 <HAL_DMA_IRQHandler+0xc8c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d02c      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a74      	ldr	r2, [pc, #464]	@ (80049e8 <HAL_DMA_IRQHandler+0xc90>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d027      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a73      	ldr	r2, [pc, #460]	@ (80049ec <HAL_DMA_IRQHandler+0xc94>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a71      	ldr	r2, [pc, #452]	@ (80049f0 <HAL_DMA_IRQHandler+0xc98>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01d      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a70      	ldr	r2, [pc, #448]	@ (80049f4 <HAL_DMA_IRQHandler+0xc9c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6e      	ldr	r2, [pc, #440]	@ (80049f8 <HAL_DMA_IRQHandler+0xca0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a6d      	ldr	r2, [pc, #436]	@ (80049fc <HAL_DMA_IRQHandler+0xca4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00e      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6b      	ldr	r2, [pc, #428]	@ (8004a00 <HAL_DMA_IRQHandler+0xca8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d009      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6a      	ldr	r2, [pc, #424]	@ (8004a04 <HAL_DMA_IRQHandler+0xcac>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d004      	beq.n	800486a <HAL_DMA_IRQHandler+0xb12>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a68      	ldr	r2, [pc, #416]	@ (8004a08 <HAL_DMA_IRQHandler+0xcb0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <HAL_DMA_IRQHandler+0xb24>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e007      	b.n	800488c <HAL_DMA_IRQHandler+0xb34>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8165 	beq.w	8004b60 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800489e:	e15f      	b.n	8004b60 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2202      	movs	r2, #2
 80048aa:	409a      	lsls	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80c5 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xce8>
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80bf 	beq.w	8004a40 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2202      	movs	r2, #2
 80048cc:	409a      	lsls	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d018      	beq.n	800490e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 813a 	beq.w	8004b64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048f8:	e134      	b.n	8004b64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8130 	beq.w	8004b64 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800490c:	e12a      	b.n	8004b64 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 8089 	bne.w	8004a2c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2b      	ldr	r2, [pc, #172]	@ (80049cc <HAL_DMA_IRQHandler+0xc74>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d04a      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a29      	ldr	r2, [pc, #164]	@ (80049d0 <HAL_DMA_IRQHandler+0xc78>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d045      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a28      	ldr	r2, [pc, #160]	@ (80049d4 <HAL_DMA_IRQHandler+0xc7c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d040      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a26      	ldr	r2, [pc, #152]	@ (80049d8 <HAL_DMA_IRQHandler+0xc80>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d03b      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a25      	ldr	r2, [pc, #148]	@ (80049dc <HAL_DMA_IRQHandler+0xc84>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d036      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a23      	ldr	r2, [pc, #140]	@ (80049e0 <HAL_DMA_IRQHandler+0xc88>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a22      	ldr	r2, [pc, #136]	@ (80049e4 <HAL_DMA_IRQHandler+0xc8c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d02c      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a20      	ldr	r2, [pc, #128]	@ (80049e8 <HAL_DMA_IRQHandler+0xc90>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d027      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1f      	ldr	r2, [pc, #124]	@ (80049ec <HAL_DMA_IRQHandler+0xc94>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1d      	ldr	r2, [pc, #116]	@ (80049f0 <HAL_DMA_IRQHandler+0xc98>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01d      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1c      	ldr	r2, [pc, #112]	@ (80049f4 <HAL_DMA_IRQHandler+0xc9c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1a      	ldr	r2, [pc, #104]	@ (80049f8 <HAL_DMA_IRQHandler+0xca0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <HAL_DMA_IRQHandler+0xca4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a17      	ldr	r2, [pc, #92]	@ (8004a00 <HAL_DMA_IRQHandler+0xca8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_DMA_IRQHandler+0xcac>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_DMA_IRQHandler+0xc62>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a14      	ldr	r2, [pc, #80]	@ (8004a08 <HAL_DMA_IRQHandler+0xcb0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d128      	bne.n	8004a0c <HAL_DMA_IRQHandler+0xcb4>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0214 	bic.w	r2, r2, #20
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e027      	b.n	8004a1c <HAL_DMA_IRQHandler+0xcc4>
 80049cc:	40020010 	.word	0x40020010
 80049d0:	40020028 	.word	0x40020028
 80049d4:	40020040 	.word	0x40020040
 80049d8:	40020058 	.word	0x40020058
 80049dc:	40020070 	.word	0x40020070
 80049e0:	40020088 	.word	0x40020088
 80049e4:	400200a0 	.word	0x400200a0
 80049e8:	400200b8 	.word	0x400200b8
 80049ec:	40020410 	.word	0x40020410
 80049f0:	40020428 	.word	0x40020428
 80049f4:	40020440 	.word	0x40020440
 80049f8:	40020458 	.word	0x40020458
 80049fc:	40020470 	.word	0x40020470
 8004a00:	40020488 	.word	0x40020488
 8004a04:	400204a0 	.word	0x400204a0
 8004a08:	400204b8 	.word	0x400204b8
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 020a 	bic.w	r2, r2, #10
 8004a1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8097 	beq.w	8004b64 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a3e:	e091      	b.n	8004b64 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2208      	movs	r2, #8
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8088 	beq.w	8004b66 <HAL_DMA_IRQHandler+0xe0e>
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8082 	beq.w	8004b66 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a41      	ldr	r2, [pc, #260]	@ (8004b6c <HAL_DMA_IRQHandler+0xe14>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d04a      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a3f      	ldr	r2, [pc, #252]	@ (8004b70 <HAL_DMA_IRQHandler+0xe18>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d045      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004b74 <HAL_DMA_IRQHandler+0xe1c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d040      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3c      	ldr	r2, [pc, #240]	@ (8004b78 <HAL_DMA_IRQHandler+0xe20>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d03b      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8004b7c <HAL_DMA_IRQHandler+0xe24>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d036      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a39      	ldr	r2, [pc, #228]	@ (8004b80 <HAL_DMA_IRQHandler+0xe28>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d031      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a38      	ldr	r2, [pc, #224]	@ (8004b84 <HAL_DMA_IRQHandler+0xe2c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d02c      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a36      	ldr	r2, [pc, #216]	@ (8004b88 <HAL_DMA_IRQHandler+0xe30>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d027      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a35      	ldr	r2, [pc, #212]	@ (8004b8c <HAL_DMA_IRQHandler+0xe34>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d022      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a33      	ldr	r2, [pc, #204]	@ (8004b90 <HAL_DMA_IRQHandler+0xe38>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01d      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a32      	ldr	r2, [pc, #200]	@ (8004b94 <HAL_DMA_IRQHandler+0xe3c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d018      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a30      	ldr	r2, [pc, #192]	@ (8004b98 <HAL_DMA_IRQHandler+0xe40>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2f      	ldr	r2, [pc, #188]	@ (8004b9c <HAL_DMA_IRQHandler+0xe44>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ba0 <HAL_DMA_IRQHandler+0xe48>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <HAL_DMA_IRQHandler+0xe4c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_DMA_IRQHandler+0xdaa>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba8 <HAL_DMA_IRQHandler+0xe50>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <HAL_DMA_IRQHandler+0xdbc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 021c 	bic.w	r2, r2, #28
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e007      	b.n	8004b24 <HAL_DMA_IRQHandler+0xdcc>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020e 	bic.w	r2, r2, #14
 8004b22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	409a      	lsls	r2, r3
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
 8004b5a:	e004      	b.n	8004b66 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b5c:	bf00      	nop
 8004b5e:	e002      	b.n	8004b66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b60:	bf00      	nop
 8004b62:	e000      	b.n	8004b66 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b66:	3728      	adds	r7, #40	@ 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40020010 	.word	0x40020010
 8004b70:	40020028 	.word	0x40020028
 8004b74:	40020040 	.word	0x40020040
 8004b78:	40020058 	.word	0x40020058
 8004b7c:	40020070 	.word	0x40020070
 8004b80:	40020088 	.word	0x40020088
 8004b84:	400200a0 	.word	0x400200a0
 8004b88:	400200b8 	.word	0x400200b8
 8004b8c:	40020410 	.word	0x40020410
 8004b90:	40020428 	.word	0x40020428
 8004b94:	40020440 	.word	0x40020440
 8004b98:	40020458 	.word	0x40020458
 8004b9c:	40020470 	.word	0x40020470
 8004ba0:	40020488 	.word	0x40020488
 8004ba4:	400204a0 	.word	0x400204a0
 8004ba8:	400204b8 	.word	0x400204b8

08004bac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a7f      	ldr	r2, [pc, #508]	@ (8004de0 <DMA_SetConfig+0x21c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d072      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a7d      	ldr	r2, [pc, #500]	@ (8004de4 <DMA_SetConfig+0x220>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d06d      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7c      	ldr	r2, [pc, #496]	@ (8004de8 <DMA_SetConfig+0x224>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d068      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a7a      	ldr	r2, [pc, #488]	@ (8004dec <DMA_SetConfig+0x228>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d063      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a79      	ldr	r2, [pc, #484]	@ (8004df0 <DMA_SetConfig+0x22c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d05e      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a77      	ldr	r2, [pc, #476]	@ (8004df4 <DMA_SetConfig+0x230>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d059      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a76      	ldr	r2, [pc, #472]	@ (8004df8 <DMA_SetConfig+0x234>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d054      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a74      	ldr	r2, [pc, #464]	@ (8004dfc <DMA_SetConfig+0x238>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d04f      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a73      	ldr	r2, [pc, #460]	@ (8004e00 <DMA_SetConfig+0x23c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d04a      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a71      	ldr	r2, [pc, #452]	@ (8004e04 <DMA_SetConfig+0x240>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d045      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a70      	ldr	r2, [pc, #448]	@ (8004e08 <DMA_SetConfig+0x244>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d040      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a6e      	ldr	r2, [pc, #440]	@ (8004e0c <DMA_SetConfig+0x248>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d03b      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8004e10 <DMA_SetConfig+0x24c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d036      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a6b      	ldr	r2, [pc, #428]	@ (8004e14 <DMA_SetConfig+0x250>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d031      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e18 <DMA_SetConfig+0x254>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d02c      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a68      	ldr	r2, [pc, #416]	@ (8004e1c <DMA_SetConfig+0x258>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d027      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a67      	ldr	r2, [pc, #412]	@ (8004e20 <DMA_SetConfig+0x25c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d022      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a65      	ldr	r2, [pc, #404]	@ (8004e24 <DMA_SetConfig+0x260>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01d      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a64      	ldr	r2, [pc, #400]	@ (8004e28 <DMA_SetConfig+0x264>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d018      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a62      	ldr	r2, [pc, #392]	@ (8004e2c <DMA_SetConfig+0x268>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d013      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a61      	ldr	r2, [pc, #388]	@ (8004e30 <DMA_SetConfig+0x26c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5f      	ldr	r2, [pc, #380]	@ (8004e34 <DMA_SetConfig+0x270>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d009      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004e38 <DMA_SetConfig+0x274>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <DMA_SetConfig+0x10a>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e3c <DMA_SetConfig+0x278>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <DMA_SetConfig+0x10e>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <DMA_SetConfig+0x110>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00d      	beq.n	8004cf4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004ce0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cf2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a39      	ldr	r2, [pc, #228]	@ (8004de0 <DMA_SetConfig+0x21c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d04a      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a38      	ldr	r2, [pc, #224]	@ (8004de4 <DMA_SetConfig+0x220>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d045      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a36      	ldr	r2, [pc, #216]	@ (8004de8 <DMA_SetConfig+0x224>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d040      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a35      	ldr	r2, [pc, #212]	@ (8004dec <DMA_SetConfig+0x228>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d03b      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a33      	ldr	r2, [pc, #204]	@ (8004df0 <DMA_SetConfig+0x22c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d036      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a32      	ldr	r2, [pc, #200]	@ (8004df4 <DMA_SetConfig+0x230>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d031      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a30      	ldr	r2, [pc, #192]	@ (8004df8 <DMA_SetConfig+0x234>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d02c      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004dfc <DMA_SetConfig+0x238>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d027      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2d      	ldr	r2, [pc, #180]	@ (8004e00 <DMA_SetConfig+0x23c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2c      	ldr	r2, [pc, #176]	@ (8004e04 <DMA_SetConfig+0x240>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8004e08 <DMA_SetConfig+0x244>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a29      	ldr	r2, [pc, #164]	@ (8004e0c <DMA_SetConfig+0x248>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a27      	ldr	r2, [pc, #156]	@ (8004e10 <DMA_SetConfig+0x24c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a26      	ldr	r2, [pc, #152]	@ (8004e14 <DMA_SetConfig+0x250>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a24      	ldr	r2, [pc, #144]	@ (8004e18 <DMA_SetConfig+0x254>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <DMA_SetConfig+0x1d0>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a23      	ldr	r2, [pc, #140]	@ (8004e1c <DMA_SetConfig+0x258>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <DMA_SetConfig+0x1d4>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <DMA_SetConfig+0x1d6>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d059      	beq.n	8004e52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	223f      	movs	r2, #63	@ 0x3f
 8004da8:	409a      	lsls	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004dbc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b40      	cmp	r3, #64	@ 0x40
 8004dcc:	d138      	bne.n	8004e40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dde:	e086      	b.n	8004eee <DMA_SetConfig+0x32a>
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020088 	.word	0x40020088
 8004df8:	400200a0 	.word	0x400200a0
 8004dfc:	400200b8 	.word	0x400200b8
 8004e00:	40020410 	.word	0x40020410
 8004e04:	40020428 	.word	0x40020428
 8004e08:	40020440 	.word	0x40020440
 8004e0c:	40020458 	.word	0x40020458
 8004e10:	40020470 	.word	0x40020470
 8004e14:	40020488 	.word	0x40020488
 8004e18:	400204a0 	.word	0x400204a0
 8004e1c:	400204b8 	.word	0x400204b8
 8004e20:	58025408 	.word	0x58025408
 8004e24:	5802541c 	.word	0x5802541c
 8004e28:	58025430 	.word	0x58025430
 8004e2c:	58025444 	.word	0x58025444
 8004e30:	58025458 	.word	0x58025458
 8004e34:	5802546c 	.word	0x5802546c
 8004e38:	58025480 	.word	0x58025480
 8004e3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]
}
 8004e50:	e04d      	b.n	8004eee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a29      	ldr	r2, [pc, #164]	@ (8004efc <DMA_SetConfig+0x338>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d022      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a27      	ldr	r2, [pc, #156]	@ (8004f00 <DMA_SetConfig+0x33c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01d      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a26      	ldr	r2, [pc, #152]	@ (8004f04 <DMA_SetConfig+0x340>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d018      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <DMA_SetConfig+0x344>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a23      	ldr	r2, [pc, #140]	@ (8004f0c <DMA_SetConfig+0x348>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a21      	ldr	r2, [pc, #132]	@ (8004f10 <DMA_SetConfig+0x34c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a20      	ldr	r2, [pc, #128]	@ (8004f14 <DMA_SetConfig+0x350>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <DMA_SetConfig+0x2de>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004f18 <DMA_SetConfig+0x354>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <DMA_SetConfig+0x2e2>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <DMA_SetConfig+0x2e4>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d020      	beq.n	8004eee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d108      	bne.n	8004ede <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	60da      	str	r2, [r3, #12]
}
 8004edc:	e007      	b.n	8004eee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	60da      	str	r2, [r3, #12]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	58025408 	.word	0x58025408
 8004f00:	5802541c 	.word	0x5802541c
 8004f04:	58025430 	.word	0x58025430
 8004f08:	58025444 	.word	0x58025444
 8004f0c:	58025458 	.word	0x58025458
 8004f10:	5802546c 	.word	0x5802546c
 8004f14:	58025480 	.word	0x58025480
 8004f18:	58025494 	.word	0x58025494

08004f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a42      	ldr	r2, [pc, #264]	@ (8005034 <DMA_CalcBaseAndBitshift+0x118>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d04a      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a41      	ldr	r2, [pc, #260]	@ (8005038 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d045      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a3f      	ldr	r2, [pc, #252]	@ (800503c <DMA_CalcBaseAndBitshift+0x120>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d040      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3e      	ldr	r2, [pc, #248]	@ (8005040 <DMA_CalcBaseAndBitshift+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d03b      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3c      	ldr	r2, [pc, #240]	@ (8005044 <DMA_CalcBaseAndBitshift+0x128>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d036      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a3b      	ldr	r2, [pc, #236]	@ (8005048 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d031      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a39      	ldr	r2, [pc, #228]	@ (800504c <DMA_CalcBaseAndBitshift+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02c      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a38      	ldr	r2, [pc, #224]	@ (8005050 <DMA_CalcBaseAndBitshift+0x134>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d027      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a36      	ldr	r2, [pc, #216]	@ (8005054 <DMA_CalcBaseAndBitshift+0x138>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a35      	ldr	r2, [pc, #212]	@ (8005058 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a33      	ldr	r2, [pc, #204]	@ (800505c <DMA_CalcBaseAndBitshift+0x140>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a32      	ldr	r2, [pc, #200]	@ (8005060 <DMA_CalcBaseAndBitshift+0x144>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	@ (8005064 <DMA_CalcBaseAndBitshift+0x148>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2f      	ldr	r2, [pc, #188]	@ (8005068 <DMA_CalcBaseAndBitshift+0x14c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <DMA_CalcBaseAndBitshift+0x150>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005070 <DMA_CalcBaseAndBitshift+0x154>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <DMA_CalcBaseAndBitshift+0xac>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <DMA_CalcBaseAndBitshift+0xae>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d024      	beq.n	8005018 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3b10      	subs	r3, #16
 8004fd6:	4a27      	ldr	r2, [pc, #156]	@ (8005074 <DMA_CalcBaseAndBitshift+0x158>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	091b      	lsrs	r3, r3, #4
 8004fde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	4a24      	ldr	r2, [pc, #144]	@ (8005078 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d908      	bls.n	8005008 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800507c <DMA_CalcBaseAndBitshift+0x160>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	1d1a      	adds	r2, r3, #4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	659a      	str	r2, [r3, #88]	@ 0x58
 8005006:	e00d      	b.n	8005024 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	461a      	mov	r2, r3
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <DMA_CalcBaseAndBitshift+0x160>)
 8005010:	4013      	ands	r3, r2
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6593      	str	r3, [r2, #88]	@ 0x58
 8005016:	e005      	b.n	8005024 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40020010 	.word	0x40020010
 8005038:	40020028 	.word	0x40020028
 800503c:	40020040 	.word	0x40020040
 8005040:	40020058 	.word	0x40020058
 8005044:	40020070 	.word	0x40020070
 8005048:	40020088 	.word	0x40020088
 800504c:	400200a0 	.word	0x400200a0
 8005050:	400200b8 	.word	0x400200b8
 8005054:	40020410 	.word	0x40020410
 8005058:	40020428 	.word	0x40020428
 800505c:	40020440 	.word	0x40020440
 8005060:	40020458 	.word	0x40020458
 8005064:	40020470 	.word	0x40020470
 8005068:	40020488 	.word	0x40020488
 800506c:	400204a0 	.word	0x400204a0
 8005070:	400204b8 	.word	0x400204b8
 8005074:	aaaaaaab 	.word	0xaaaaaaab
 8005078:	0801dddc 	.word	0x0801dddc
 800507c:	fffffc00 	.word	0xfffffc00

08005080 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d120      	bne.n	80050d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	2b03      	cmp	r3, #3
 800509a:	d858      	bhi.n	800514e <DMA_CheckFifoParam+0xce>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <DMA_CheckFifoParam+0x24>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050b5 	.word	0x080050b5
 80050a8:	080050c7 	.word	0x080050c7
 80050ac:	080050b5 	.word	0x080050b5
 80050b0:	0800514f 	.word	0x0800514f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d048      	beq.n	8005152 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050c4:	e045      	b.n	8005152 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050ce:	d142      	bne.n	8005156 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050d4:	e03f      	b.n	8005156 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050de:	d123      	bne.n	8005128 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d838      	bhi.n	800515a <DMA_CheckFifoParam+0xda>
 80050e8:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <DMA_CheckFifoParam+0x70>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005107 	.word	0x08005107
 80050f8:	08005101 	.word	0x08005101
 80050fc:	08005119 	.word	0x08005119
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
        break;
 8005104:	e030      	b.n	8005168 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d025      	beq.n	800515e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005116:	e022      	b.n	800515e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005120:	d11f      	bne.n	8005162 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005126:	e01c      	b.n	8005162 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512c:	2b02      	cmp	r3, #2
 800512e:	d902      	bls.n	8005136 <DMA_CheckFifoParam+0xb6>
 8005130:	2b03      	cmp	r3, #3
 8005132:	d003      	beq.n	800513c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005134:	e018      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	73fb      	strb	r3, [r7, #15]
        break;
 800513a:	e015      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00e      	beq.n	8005166 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
    break;
 800514c:	e00b      	b.n	8005166 <DMA_CheckFifoParam+0xe6>
        break;
 800514e:	bf00      	nop
 8005150:	e00a      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        break;
 8005152:	bf00      	nop
 8005154:	e008      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        break;
 8005156:	bf00      	nop
 8005158:	e006      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        break;
 800515a:	bf00      	nop
 800515c:	e004      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        break;
 800515e:	bf00      	nop
 8005160:	e002      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
        break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <DMA_CheckFifoParam+0xe8>
    break;
 8005166:	bf00      	nop
    }
  }

  return status;
 8005168:	7bfb      	ldrb	r3, [r7, #15]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop

08005178 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a38      	ldr	r2, [pc, #224]	@ (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d022      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a36      	ldr	r2, [pc, #216]	@ (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01d      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a33      	ldr	r2, [pc, #204]	@ (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a32      	ldr	r2, [pc, #200]	@ (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a30      	ldr	r2, [pc, #192]	@ (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005288 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01a      	beq.n	8005216 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	3b08      	subs	r3, #8
 80051e8:	4a28      	ldr	r2, [pc, #160]	@ (800528c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051ea:	fba2 2303 	umull	r2, r3, r2, r3
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4b26      	ldr	r3, [pc, #152]	@ (8005290 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a24      	ldr	r2, [pc, #144]	@ (8005294 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005204:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 031f 	and.w	r3, r3, #31
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005214:	e024      	b.n	8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	3b10      	subs	r3, #16
 800521e:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005220:	fba2 2303 	umull	r2, r3, r2, r3
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4a1c      	ldr	r2, [pc, #112]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d806      	bhi.n	800523e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4a1b      	ldr	r2, [pc, #108]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d902      	bls.n	800523e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3308      	adds	r3, #8
 800523c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4b18      	ldr	r3, [pc, #96]	@ (80052a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005242:	4413      	add	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	461a      	mov	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005250:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	2201      	movs	r2, #1
 800525a:	409a      	lsls	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	58025408 	.word	0x58025408
 8005270:	5802541c 	.word	0x5802541c
 8005274:	58025430 	.word	0x58025430
 8005278:	58025444 	.word	0x58025444
 800527c:	58025458 	.word	0x58025458
 8005280:	5802546c 	.word	0x5802546c
 8005284:	58025480 	.word	0x58025480
 8005288:	58025494 	.word	0x58025494
 800528c:	cccccccd 	.word	0xcccccccd
 8005290:	16009600 	.word	0x16009600
 8005294:	58025880 	.word	0x58025880
 8005298:	aaaaaaab 	.word	0xaaaaaaab
 800529c:	400204b8 	.word	0x400204b8
 80052a0:	4002040f 	.word	0x4002040f
 80052a4:	10008200 	.word	0x10008200
 80052a8:	40020880 	.word	0x40020880

080052ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04a      	beq.n	8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d847      	bhi.n	8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a25      	ldr	r2, [pc, #148]	@ (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d022      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a24      	ldr	r2, [pc, #144]	@ (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d01d      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a22      	ldr	r2, [pc, #136]	@ (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d018      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a21      	ldr	r2, [pc, #132]	@ (8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00e      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d009      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d004      	beq.n	8005318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1b      	ldr	r2, [pc, #108]	@ (8005380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d101      	bne.n	800531c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800531c:	2300      	movs	r3, #0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4b17      	ldr	r3, [pc, #92]	@ (8005384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	461a      	mov	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005334:	671a      	str	r2, [r3, #112]	@ 0x70
 8005336:	e009      	b.n	800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4b14      	ldr	r3, [pc, #80]	@ (800538c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a11      	ldr	r2, [pc, #68]	@ (8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800534a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	2201      	movs	r2, #1
 8005352:	409a      	lsls	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	58025430 	.word	0x58025430
 8005370:	58025444 	.word	0x58025444
 8005374:	58025458 	.word	0x58025458
 8005378:	5802546c 	.word	0x5802546c
 800537c:	58025480 	.word	0x58025480
 8005380:	58025494 	.word	0x58025494
 8005384:	1600963f 	.word	0x1600963f
 8005388:	58025940 	.word	0x58025940
 800538c:	1000823f 	.word	0x1000823f
 8005390:	40020940 	.word	0x40020940

08005394 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e0e3      	b.n	800556e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2223      	movs	r2, #35	@ 0x23
 80053b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7fb ff1f 	bl	80011fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053be:	4b6e      	ldr	r3, [pc, #440]	@ (8005578 <HAL_ETH_Init+0x1e4>)
 80053c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005578 <HAL_ETH_Init+0x1e4>)
 80053c6:	f043 0302 	orr.w	r3, r3, #2
 80053ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005578 <HAL_ETH_Init+0x1e4>)
 80053d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7a1b      	ldrb	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fd f899 	bl	800251c <HAL_SYSCFG_ETHInterfaceSelect>
 80053ea:	e003      	b.n	80053f4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053ec:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80053f0:	f7fd f894 	bl	800251c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80053f4:	4b61      	ldr	r3, [pc, #388]	@ (800557c <HAL_ETH_Init+0x1e8>)
 80053f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800540e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005410:	f7fd f848 	bl	80024a4 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005416:	e011      	b.n	800543c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005418:	f7fd f844 	bl	80024a4 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005426:	d909      	bls.n	800543c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2204      	movs	r2, #4
 800542c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	22e0      	movs	r2, #224	@ 0xe0
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e098      	b.n	800556e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e4      	bne.n	8005418 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f89e 	bl	8005590 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005454:	f001 ffca 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8005458:	4603      	mov	r3, r0
 800545a:	4a49      	ldr	r2, [pc, #292]	@ (8005580 <HAL_ETH_Init+0x1ec>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	0c9a      	lsrs	r2, r3, #18
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	3a01      	subs	r2, #1
 8005468:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa81 	bl	8005974 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800547a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800547e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800548a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800548e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	22e0      	movs	r2, #224	@ 0xe0
 80054aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e05d      	b.n	800556e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054be:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <HAL_ETH_Init+0x1f0>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6952      	ldr	r2, [r2, #20]
 80054c6:	0051      	lsls	r1, r2, #1
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	430b      	orrs	r3, r1
 80054ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054d2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fae9 	bl	8005aae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb2f 	bl	8005b40 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	3305      	adds	r3, #5
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	3303      	adds	r3, #3
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	061a      	lsls	r2, r3, #24
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	3302      	adds	r3, #2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	3301      	adds	r3, #1
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005520:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800552e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005530:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b11      	ldr	r3, [pc, #68]	@ (8005588 <HAL_ETH_Init+0x1f4>)
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b0d      	ldr	r3, [pc, #52]	@ (800558c <HAL_ETH_Init+0x1f8>)
 8005556:	430b      	orrs	r3, r1
 8005558:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2210      	movs	r2, #16
 8005568:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
 800557c:	58000400 	.word	0x58000400
 8005580:	431bde83 	.word	0x431bde83
 8005584:	ffff8001 	.word	0xffff8001
 8005588:	0c020060 	.word	0x0c020060
 800558c:	0c20c000 	.word	0x0c20c000

08005590 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055aa:	f001 ff1f 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 80055ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d804      	bhi.n	80055c2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e022      	b.n	8005608 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a16      	ldr	r2, [pc, #88]	@ (8005620 <HAL_ETH_SetMDIOClockRange+0x90>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d204      	bcs.n	80055d4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e019      	b.n	8005608 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a13      	ldr	r2, [pc, #76]	@ (8005624 <HAL_ETH_SetMDIOClockRange+0x94>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d915      	bls.n	8005608 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a12      	ldr	r2, [pc, #72]	@ (8005628 <HAL_ETH_SetMDIOClockRange+0x98>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d804      	bhi.n	80055ee <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e00c      	b.n	8005608 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a0e      	ldr	r2, [pc, #56]	@ (800562c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d804      	bhi.n	8005600 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e003      	b.n	8005608 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8005606:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	02160ebf 	.word	0x02160ebf
 8005620:	03938700 	.word	0x03938700
 8005624:	05f5e0ff 	.word	0x05f5e0ff
 8005628:	08f0d17f 	.word	0x08f0d17f
 800562c:	0ee6b27f 	.word	0x0ee6b27f

08005630 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	791b      	ldrb	r3, [r3, #4]
 8005648:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800564a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	7b1b      	ldrb	r3, [r3, #12]
 8005650:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005652:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	7b5b      	ldrb	r3, [r3, #13]
 8005658:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800565a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	7b9b      	ldrb	r3, [r3, #14]
 8005660:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	7bdb      	ldrb	r3, [r3, #15]
 8005668:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800566a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	7c12      	ldrb	r2, [r2, #16]
 8005670:	2a00      	cmp	r2, #0
 8005672:	d102      	bne.n	800567a <ETH_SetMACConfig+0x4a>
 8005674:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005678:	e000      	b.n	800567c <ETH_SetMACConfig+0x4c>
 800567a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800567c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	7c52      	ldrb	r2, [r2, #17]
 8005682:	2a00      	cmp	r2, #0
 8005684:	d102      	bne.n	800568c <ETH_SetMACConfig+0x5c>
 8005686:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800568a:	e000      	b.n	800568e <ETH_SetMACConfig+0x5e>
 800568c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800568e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7c9b      	ldrb	r3, [r3, #18]
 8005694:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005696:	431a      	orrs	r2, r3
               macconf->Speed |
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800569c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80056a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	7f1b      	ldrb	r3, [r3, #28]
 80056a8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80056aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	7f5b      	ldrb	r3, [r3, #29]
 80056b0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	7f92      	ldrb	r2, [r2, #30]
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	d102      	bne.n	80056c2 <ETH_SetMACConfig+0x92>
 80056bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056c0:	e000      	b.n	80056c4 <ETH_SetMACConfig+0x94>
 80056c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	7fdb      	ldrb	r3, [r3, #31]
 80056ca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	d102      	bne.n	80056de <ETH_SetMACConfig+0xae>
 80056d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056dc:	e000      	b.n	80056e0 <ETH_SetMACConfig+0xb0>
 80056de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056e0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056ee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80056f0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b56      	ldr	r3, [pc, #344]	@ (800585c <ETH_SetMACConfig+0x22c>)
 8005702:	4013      	ands	r3, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	430b      	orrs	r3, r1
 800570c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005712:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800571a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800571c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005724:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005726:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800572e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005730:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005738:	2a00      	cmp	r2, #0
 800573a:	d102      	bne.n	8005742 <ETH_SetMACConfig+0x112>
 800573c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005740:	e000      	b.n	8005744 <ETH_SetMACConfig+0x114>
 8005742:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005744:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	4b42      	ldr	r3, [pc, #264]	@ (8005860 <ETH_SetMACConfig+0x230>)
 8005756:	4013      	ands	r3, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	430b      	orrs	r3, r1
 8005760:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005768:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	4b3a      	ldr	r3, [pc, #232]	@ (8005864 <ETH_SetMACConfig+0x234>)
 800577a:	4013      	ands	r3, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6812      	ldr	r2, [r2, #0]
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	430b      	orrs	r3, r1
 8005784:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800578c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005792:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800579a:	2a00      	cmp	r2, #0
 800579c:	d101      	bne.n	80057a2 <ETH_SetMACConfig+0x172>
 800579e:	2280      	movs	r2, #128	@ 0x80
 80057a0:	e000      	b.n	80057a4 <ETH_SetMACConfig+0x174>
 80057a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80057a4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057b6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80057ba:	4013      	ands	r3, r2
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	68f9      	ldr	r1, [r7, #12]
 80057c2:	430b      	orrs	r3, r1
 80057c4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80057cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80057d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e2:	f023 0103 	bic.w	r1, r3, #3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80057fa:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005810:	683a      	ldr	r2, [r7, #0]
 8005812:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005816:	2a00      	cmp	r2, #0
 8005818:	d101      	bne.n	800581e <ETH_SetMACConfig+0x1ee>
 800581a:	2240      	movs	r2, #64	@ 0x40
 800581c:	e000      	b.n	8005820 <ETH_SetMACConfig+0x1f0>
 800581e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005820:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005828:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800582a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005832:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005834:	4313      	orrs	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8005840:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	430a      	orrs	r2, r1
 800584c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	00048083 	.word	0x00048083
 8005860:	c0f88000 	.word	0xc0f88000
 8005864:	fffffef0 	.word	0xfffffef0

08005868 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4b38      	ldr	r3, [pc, #224]	@ (8005960 <ETH_SetDMAConfig+0xf8>)
 800587e:	4013      	ands	r3, r2
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	6811      	ldr	r1, [r2, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	430b      	orrs	r3, r1
 800588a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800588e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	791b      	ldrb	r3, [r3, #4]
 8005894:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800589a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	7b1b      	ldrb	r3, [r3, #12]
 80058a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005964 <ETH_SetDMAConfig+0xfc>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	68f9      	ldr	r1, [r7, #12]
 80058ba:	430b      	orrs	r3, r1
 80058bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058c0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	7b5b      	ldrb	r3, [r3, #13]
 80058c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80058dc:	4b22      	ldr	r3, [pc, #136]	@ (8005968 <ETH_SetDMAConfig+0x100>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ec:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	7d1b      	ldrb	r3, [r3, #20]
 80058f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80058fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	7f5b      	ldrb	r3, [r3, #29]
 8005900:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800590e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005912:	4b16      	ldr	r3, [pc, #88]	@ (800596c <ETH_SetDMAConfig+0x104>)
 8005914:	4013      	ands	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	430b      	orrs	r3, r1
 800591e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005922:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	7f1b      	ldrb	r3, [r3, #28]
 800592a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005940:	4b0b      	ldr	r3, [pc, #44]	@ (8005970 <ETH_SetDMAConfig+0x108>)
 8005942:	4013      	ands	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	68f9      	ldr	r1, [r7, #12]
 800594a:	430b      	orrs	r3, r1
 800594c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005950:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	ffff87fd 	.word	0xffff87fd
 8005964:	ffff2ffe 	.word	0xffff2ffe
 8005968:	fffec000 	.word	0xfffec000
 800596c:	ffc0efef 	.word	0xffc0efef
 8005970:	7fc0ffff 	.word	0x7fc0ffff

08005974 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b0a4      	sub	sp, #144	@ 0x90
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005982:	2300      	movs	r3, #0
 8005984:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005986:	2300      	movs	r3, #0
 8005988:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800598c:	2300      	movs	r3, #0
 800598e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80059b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059b4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80059cc:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80059d0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80059d8:	2300      	movs	r3, #0
 80059da:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80059ee:	2300      	movs	r3, #0
 80059f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80059f6:	2300      	movs	r3, #0
 80059f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a1e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a28:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a30:	2302      	movs	r3, #2
 8005a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fde6 	bl	8005630 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a7e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005a94:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fee1 	bl	8005868 <ETH_SetDMAConfig>
}
 8005aa6:	bf00      	nop
 8005aa8:	3790      	adds	r7, #144	@ 0x90
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e01d      	b.n	8005af8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68d9      	ldr	r1, [r3, #12]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	440b      	add	r3, r1
 8005acc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	3206      	adds	r2, #6
 8005aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d9de      	bls.n	8005abc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2303      	movs	r3, #3
 8005b10:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b20:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68da      	ldr	r2, [r3, #12]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b30:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	e023      	b.n	8005b96 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6919      	ldr	r1, [r3, #16]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4613      	mov	r3, r2
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	4413      	add	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	440b      	add	r3, r1
 8005b5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2200      	movs	r2, #0
 8005b82:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	3212      	adds	r2, #18
 8005b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d9d8      	bls.n	8005b4e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bd6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bea:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b089      	sub	sp, #36	@ 0x24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c0a:	4b89      	ldr	r3, [pc, #548]	@ (8005e30 <HAL_GPIO_Init+0x234>)
 8005c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c0e:	e194      	b.n	8005f3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2101      	movs	r1, #1
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8186 	beq.w	8005f34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d005      	beq.n	8005c40 <HAL_GPIO_Init+0x44>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d130      	bne.n	8005ca2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	43db      	mvns	r3, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4013      	ands	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c76:	2201      	movs	r2, #1
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4013      	ands	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f003 0201 	and.w	r2, r3, #1
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d017      	beq.n	8005cde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	2203      	movs	r2, #3
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d123      	bne.n	8005d32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	08da      	lsrs	r2, r3, #3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3208      	adds	r2, #8
 8005cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	220f      	movs	r2, #15
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	691a      	ldr	r2, [r3, #16]
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	08da      	lsrs	r2, r3, #3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3208      	adds	r2, #8
 8005d2c:	69b9      	ldr	r1, [r7, #24]
 8005d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d42:	43db      	mvns	r3, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4013      	ands	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 0203 	and.w	r2, r3, #3
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 80e0 	beq.w	8005f34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d74:	4b2f      	ldr	r3, [pc, #188]	@ (8005e34 <HAL_GPIO_Init+0x238>)
 8005d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e34 <HAL_GPIO_Init+0x238>)
 8005d7c:	f043 0302 	orr.w	r3, r3, #2
 8005d80:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005d84:	4b2b      	ldr	r3, [pc, #172]	@ (8005e34 <HAL_GPIO_Init+0x238>)
 8005d86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d92:	4a29      	ldr	r2, [pc, #164]	@ (8005e38 <HAL_GPIO_Init+0x23c>)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	089b      	lsrs	r3, r3, #2
 8005d98:	3302      	adds	r3, #2
 8005d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	220f      	movs	r2, #15
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43db      	mvns	r3, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4013      	ands	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a20      	ldr	r2, [pc, #128]	@ (8005e3c <HAL_GPIO_Init+0x240>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d052      	beq.n	8005e64 <HAL_GPIO_Init+0x268>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8005e40 <HAL_GPIO_Init+0x244>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d031      	beq.n	8005e2a <HAL_GPIO_Init+0x22e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e44 <HAL_GPIO_Init+0x248>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d02b      	beq.n	8005e26 <HAL_GPIO_Init+0x22a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e48 <HAL_GPIO_Init+0x24c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d025      	beq.n	8005e22 <HAL_GPIO_Init+0x226>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e4c <HAL_GPIO_Init+0x250>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01f      	beq.n	8005e1e <HAL_GPIO_Init+0x222>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <HAL_GPIO_Init+0x254>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d019      	beq.n	8005e1a <HAL_GPIO_Init+0x21e>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e54 <HAL_GPIO_Init+0x258>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_GPIO_Init+0x21a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a19      	ldr	r2, [pc, #100]	@ (8005e58 <HAL_GPIO_Init+0x25c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00d      	beq.n	8005e12 <HAL_GPIO_Init+0x216>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <HAL_GPIO_Init+0x260>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d007      	beq.n	8005e0e <HAL_GPIO_Init+0x212>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a17      	ldr	r2, [pc, #92]	@ (8005e60 <HAL_GPIO_Init+0x264>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d101      	bne.n	8005e0a <HAL_GPIO_Init+0x20e>
 8005e06:	2309      	movs	r3, #9
 8005e08:	e02d      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	e02b      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e0e:	2308      	movs	r3, #8
 8005e10:	e029      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e12:	2307      	movs	r3, #7
 8005e14:	e027      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e16:	2306      	movs	r3, #6
 8005e18:	e025      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e1a:	2305      	movs	r3, #5
 8005e1c:	e023      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e1e:	2304      	movs	r3, #4
 8005e20:	e021      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e22:	2303      	movs	r3, #3
 8005e24:	e01f      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e01d      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e01b      	b.n	8005e66 <HAL_GPIO_Init+0x26a>
 8005e2e:	bf00      	nop
 8005e30:	58000080 	.word	0x58000080
 8005e34:	58024400 	.word	0x58024400
 8005e38:	58000400 	.word	0x58000400
 8005e3c:	58020000 	.word	0x58020000
 8005e40:	58020400 	.word	0x58020400
 8005e44:	58020800 	.word	0x58020800
 8005e48:	58020c00 	.word	0x58020c00
 8005e4c:	58021000 	.word	0x58021000
 8005e50:	58021400 	.word	0x58021400
 8005e54:	58021800 	.word	0x58021800
 8005e58:	58021c00 	.word	0x58021c00
 8005e5c:	58022000 	.word	0x58022000
 8005e60:	58022400 	.word	0x58022400
 8005e64:	2300      	movs	r3, #0
 8005e66:	69fa      	ldr	r2, [r7, #28]
 8005e68:	f002 0203 	and.w	r2, r2, #3
 8005e6c:	0092      	lsls	r2, r2, #2
 8005e6e:	4093      	lsls	r3, r2
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e76:	4938      	ldr	r1, [pc, #224]	@ (8005f58 <HAL_GPIO_Init+0x35c>)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005ed8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	43db      	mvns	r3, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4013      	ands	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	3301      	adds	r3, #1
 8005f38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f47f ae63 	bne.w	8005c10 <HAL_GPIO_Init+0x14>
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	3724      	adds	r7, #36	@ 0x24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	58000400 	.word	0x58000400

08005f5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f64:	4a08      	ldr	r2, [pc, #32]	@ (8005f88 <HAL_HSEM_FastTake+0x2c>)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	3320      	adds	r3, #32
 8005f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6e:	4a07      	ldr	r2, [pc, #28]	@ (8005f8c <HAL_HSEM_FastTake+0x30>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d101      	bne.n	8005f78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e000      	b.n	8005f7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	58026400 	.word	0x58026400
 8005f8c:	80000300 	.word	0x80000300

08005f90 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005f9a:	4906      	ldr	r1, [pc, #24]	@ (8005fb4 <HAL_HSEM_Release+0x24>)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	58026400 	.word	0x58026400

08005fb8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8005fc0:	4b05      	ldr	r3, [pc, #20]	@ (8005fd8 <HAL_HSEM_ActivateNotification+0x20>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4904      	ldr	r1, [pc, #16]	@ (8005fd8 <HAL_HSEM_ActivateNotification+0x20>)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	600b      	str	r3, [r1, #0]
#endif
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	58026500 	.word	0x58026500

08005fdc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <HAL_HSEM_IRQHandler+0x30>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005fe8:	4b08      	ldr	r3, [pc, #32]	@ (800600c <HAL_HSEM_IRQHandler+0x30>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	4906      	ldr	r1, [pc, #24]	@ (800600c <HAL_HSEM_IRQHandler+0x30>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005ff6:	4a05      	ldr	r2, [pc, #20]	@ (800600c <HAL_HSEM_IRQHandler+0x30>)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fb fcc9 	bl	8001994 <HAL_HSEM_FreeCallback>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	58026500 	.word	0x58026500

08006010 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e041      	b.n	80060a6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800602a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006034:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6852      	ldr	r2, [r2, #4]
 800603e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6892      	ldr	r2, [r2, #8]
 8006048:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800604a:	f7fc fa2b 	bl	80024a4 <HAL_GetTick>
 800604e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006050:	e00f      	b.n	8006072 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006052:	f7fc fa27 	bl	80024a4 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b31      	cmp	r3, #49	@ 0x31
 800605e:	d908      	bls.n	8006072 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e019      	b.n	80060a6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e8      	bne.n	8006052 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	429a      	cmp	r2, r3
 800608c:	d005      	beq.n	800609a <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68d2      	ldr	r2, [r2, #12]
 8006096:	611a      	str	r2, [r3, #16]
 8006098:	e004      	b.n	80060a4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80060a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80060be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b086      	sub	sp, #24
 80060d2:	af02      	add	r7, sp, #8
 80060d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0fe      	b.n	80062de <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d106      	bne.n	80060fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fc f8cf 	bl	8002298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2203      	movs	r2, #3
 80060fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f005 fc42 	bl	800b990 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7c1a      	ldrb	r2, [r3, #16]
 8006114:	f88d 2000 	strb.w	r2, [sp]
 8006118:	3304      	adds	r3, #4
 800611a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800611c:	f005 fbc6 	bl	800b8ac <USB_CoreInit>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2202      	movs	r2, #2
 800612a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e0d5      	b.n	80062de <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f005 fc3a 	bl	800b9b2 <USB_SetCurrentMode>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0c6      	b.n	80062de <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e04a      	b.n	80061ec <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006156:	7bfa      	ldrb	r2, [r7, #15]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3315      	adds	r3, #21
 8006166:	2201      	movs	r2, #1
 8006168:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3314      	adds	r3, #20
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800617e:	7bfa      	ldrb	r2, [r7, #15]
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	b298      	uxth	r0, r3
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	00db      	lsls	r3, r3, #3
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	332e      	adds	r3, #46	@ 0x2e
 8006192:	4602      	mov	r2, r0
 8006194:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	3318      	adds	r3, #24
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80061aa:	7bfa      	ldrb	r2, [r7, #15]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	331c      	adds	r3, #28
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	4613      	mov	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	3320      	adds	r3, #32
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80061d2:	7bfa      	ldrb	r2, [r7, #15]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3324      	adds	r3, #36	@ 0x24
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061e6:	7bfb      	ldrb	r3, [r7, #15]
 80061e8:	3301      	adds	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	791b      	ldrb	r3, [r3, #4]
 80061f0:	7bfa      	ldrb	r2, [r7, #15]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3af      	bcc.n	8006156 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	e044      	b.n	8006286 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80061fc:	7bfa      	ldrb	r2, [r7, #15]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006212:	7bfa      	ldrb	r2, [r7, #15]
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006224:	7bfa      	ldrb	r2, [r7, #15]
 8006226:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006228:	7bfa      	ldrb	r2, [r7, #15]
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800623a:	2200      	movs	r2, #0
 800623c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800623e:	7bfa      	ldrb	r2, [r7, #15]
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006254:	7bfa      	ldrb	r2, [r7, #15]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800626a:	7bfa      	ldrb	r2, [r7, #15]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	3301      	adds	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	791b      	ldrb	r3, [r3, #4]
 800628a:	7bfa      	ldrb	r2, [r7, #15]
 800628c:	429a      	cmp	r2, r3
 800628e:	d3b5      	bcc.n	80061fc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7c1a      	ldrb	r2, [r3, #16]
 8006298:	f88d 2000 	strb.w	r2, [sp]
 800629c:	3304      	adds	r3, #4
 800629e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a0:	f005 fbd4 	bl	800ba4c <USB_DevInit>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e013      	b.n	80062de <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7b1b      	ldrb	r3, [r3, #12]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d102      	bne.n	80062d2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f80b 	bl	80062e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f005 fd8f 	bl	800bdfa <USB_DevDisconnect>

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006316:	4b05      	ldr	r3, [pc, #20]	@ (800632c <HAL_PCDEx_ActivateLPM+0x44>)
 8006318:	4313      	orrs	r3, r2
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	10000003 	.word	0x10000003

08006330 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006338:	4b29      	ldr	r3, [pc, #164]	@ (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	2b06      	cmp	r3, #6
 8006342:	d00a      	beq.n	800635a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006344:	4b26      	ldr	r3, [pc, #152]	@ (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d001      	beq.n	8006356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e040      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	e03e      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800635a:	4b21      	ldr	r3, [pc, #132]	@ (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006362:	491f      	ldr	r1, [pc, #124]	@ (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4313      	orrs	r3, r2
 8006368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800636a:	f7fc f89b 	bl	80024a4 <HAL_GetTick>
 800636e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006370:	e009      	b.n	8006386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006372:	f7fc f897 	bl	80024a4 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006380:	d901      	bls.n	8006386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e028      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006392:	d1ee      	bne.n	8006372 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b1e      	cmp	r3, #30
 8006398:	d008      	beq.n	80063ac <HAL_PWREx_ConfigSupply+0x7c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b2e      	cmp	r3, #46	@ 0x2e
 800639e:	d005      	beq.n	80063ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b1d      	cmp	r3, #29
 80063a4:	d002      	beq.n	80063ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80063aa:	d114      	bne.n	80063d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80063ac:	f7fc f87a 	bl	80024a4 <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063b2:	e009      	b.n	80063c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80063b4:	f7fc f876 	bl	80024a4 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c2:	d901      	bls.n	80063c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e007      	b.n	80063d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d4:	d1ee      	bne.n	80063b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	58024800 	.word	0x58024800

080063e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	4a04      	ldr	r2, [pc, #16]	@ (8006400 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80063ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063f2:	60d3      	str	r3, [r2, #12]
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	58024800 	.word	0x58024800

08006404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	@ 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d102      	bne.n	8006418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f000 bc48 	b.w	8006ca8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8088 	beq.w	8006536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006426:	4b99      	ldr	r3, [pc, #612]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006430:	4b96      	ldr	r3, [pc, #600]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	2b10      	cmp	r3, #16
 800643a:	d007      	beq.n	800644c <HAL_RCC_OscConfig+0x48>
 800643c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643e:	2b18      	cmp	r3, #24
 8006440:	d111      	bne.n	8006466 <HAL_RCC_OscConfig+0x62>
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d10c      	bne.n	8006466 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	4b8f      	ldr	r3, [pc, #572]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d06d      	beq.n	8006534 <HAL_RCC_OscConfig+0x130>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d169      	bne.n	8006534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f000 bc21 	b.w	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x7a>
 8006470:	4b86      	ldr	r3, [pc, #536]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a85      	ldr	r2, [pc, #532]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e02e      	b.n	80064dc <HAL_RCC_OscConfig+0xd8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x9c>
 8006486:	4b81      	ldr	r3, [pc, #516]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a80      	ldr	r2, [pc, #512]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 800648c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b7e      	ldr	r3, [pc, #504]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a7d      	ldr	r2, [pc, #500]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e01d      	b.n	80064dc <HAL_RCC_OscConfig+0xd8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCC_OscConfig+0xc0>
 80064aa:	4b78      	ldr	r3, [pc, #480]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a77      	ldr	r2, [pc, #476]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4b75      	ldr	r3, [pc, #468]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a74      	ldr	r2, [pc, #464]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e00b      	b.n	80064dc <HAL_RCC_OscConfig+0xd8>
 80064c4:	4b71      	ldr	r3, [pc, #452]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a70      	ldr	r2, [pc, #448]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	4b6e      	ldr	r3, [pc, #440]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a6d      	ldr	r2, [pc, #436]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80064d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d013      	beq.n	800650c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fb ffde 	bl	80024a4 <HAL_GetTick>
 80064e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064ec:	f7fb ffda 	bl	80024a4 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b64      	cmp	r3, #100	@ 0x64
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e3d4      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064fe:	4b63      	ldr	r3, [pc, #396]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <HAL_RCC_OscConfig+0xe8>
 800650a:	e014      	b.n	8006536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fb ffca 	bl	80024a4 <HAL_GetTick>
 8006510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006514:	f7fb ffc6 	bl	80024a4 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b64      	cmp	r3, #100	@ 0x64
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e3c0      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006526:	4b59      	ldr	r3, [pc, #356]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1f0      	bne.n	8006514 <HAL_RCC_OscConfig+0x110>
 8006532:	e000      	b.n	8006536 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0302 	and.w	r3, r3, #2
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80ca 	beq.w	80066d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006544:	4b51      	ldr	r3, [pc, #324]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800654c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800654e:	4b4f      	ldr	r3, [pc, #316]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <HAL_RCC_OscConfig+0x166>
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b18      	cmp	r3, #24
 800655e:	d156      	bne.n	800660e <HAL_RCC_OscConfig+0x20a>
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d151      	bne.n	800660e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800656a:	4b48      	ldr	r3, [pc, #288]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_RCC_OscConfig+0x17e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e392      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006582:	4b42      	ldr	r3, [pc, #264]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f023 0219 	bic.w	r2, r3, #25
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	493f      	ldr	r1, [pc, #252]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fb ff86 	bl	80024a4 <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659c:	f7fb ff82 	bl	80024a4 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e37c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ae:	4b37      	ldr	r3, [pc, #220]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ba:	f7fb ffa3 	bl	8002504 <HAL_GetREVID>
 80065be:	4603      	mov	r3, r0
 80065c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d817      	bhi.n	80065f8 <HAL_RCC_OscConfig+0x1f4>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b40      	cmp	r3, #64	@ 0x40
 80065ce:	d108      	bne.n	80065e2 <HAL_RCC_OscConfig+0x1de>
 80065d0:	4b2e      	ldr	r3, [pc, #184]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065d8:	4a2c      	ldr	r2, [pc, #176]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80065da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065e0:	e07a      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e2:	4b2a      	ldr	r3, [pc, #168]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	031b      	lsls	r3, r3, #12
 80065f0:	4926      	ldr	r1, [pc, #152]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065f6:	e06f      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f8:	4b24      	ldr	r3, [pc, #144]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	4921      	ldr	r1, [pc, #132]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006608:	4313      	orrs	r3, r2
 800660a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800660c:	e064      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d047      	beq.n	80066a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006616:	4b1d      	ldr	r3, [pc, #116]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 0219 	bic.w	r2, r3, #25
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	491a      	ldr	r1, [pc, #104]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006624:	4313      	orrs	r3, r2
 8006626:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fb ff3c 	bl	80024a4 <HAL_GetTick>
 800662c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006630:	f7fb ff38 	bl	80024a4 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e332      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006642:	4b12      	ldr	r3, [pc, #72]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0f0      	beq.n	8006630 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664e:	f7fb ff59 	bl	8002504 <HAL_GetREVID>
 8006652:	4603      	mov	r3, r0
 8006654:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006658:	4293      	cmp	r3, r2
 800665a:	d819      	bhi.n	8006690 <HAL_RCC_OscConfig+0x28c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b40      	cmp	r3, #64	@ 0x40
 8006662:	d108      	bne.n	8006676 <HAL_RCC_OscConfig+0x272>
 8006664:	4b09      	ldr	r3, [pc, #36]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800666c:	4a07      	ldr	r2, [pc, #28]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006672:	6053      	str	r3, [r2, #4]
 8006674:	e030      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
 8006676:	4b05      	ldr	r3, [pc, #20]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	031b      	lsls	r3, r3, #12
 8006684:	4901      	ldr	r1, [pc, #4]	@ (800668c <HAL_RCC_OscConfig+0x288>)
 8006686:	4313      	orrs	r3, r2
 8006688:	604b      	str	r3, [r1, #4]
 800668a:	e025      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
 800668c:	58024400 	.word	0x58024400
 8006690:	4b9a      	ldr	r3, [pc, #616]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	061b      	lsls	r3, r3, #24
 800669e:	4997      	ldr	r1, [pc, #604]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]
 80066a4:	e018      	b.n	80066d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066a6:	4b95      	ldr	r3, [pc, #596]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a94      	ldr	r2, [pc, #592]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b2:	f7fb fef7 	bl	80024a4 <HAL_GetTick>
 80066b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ba:	f7fb fef3 	bl	80024a4 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e2ed      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066cc:	4b8b      	ldr	r3, [pc, #556]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80a9 	beq.w	8006838 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066e6:	4b85      	ldr	r3, [pc, #532]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066f0:	4b82      	ldr	r3, [pc, #520]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d007      	beq.n	800670c <HAL_RCC_OscConfig+0x308>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b18      	cmp	r3, #24
 8006700:	d13a      	bne.n	8006778 <HAL_RCC_OscConfig+0x374>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d135      	bne.n	8006778 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800670c:	4b7b      	ldr	r3, [pc, #492]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_OscConfig+0x320>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	2b80      	cmp	r3, #128	@ 0x80
 800671e:	d001      	beq.n	8006724 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e2c1      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006724:	f7fb feee 	bl	8002504 <HAL_GetREVID>
 8006728:	4603      	mov	r3, r0
 800672a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800672e:	4293      	cmp	r3, r2
 8006730:	d817      	bhi.n	8006762 <HAL_RCC_OscConfig+0x35e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	2b20      	cmp	r3, #32
 8006738:	d108      	bne.n	800674c <HAL_RCC_OscConfig+0x348>
 800673a:	4b70      	ldr	r3, [pc, #448]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006742:	4a6e      	ldr	r2, [pc, #440]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006744:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006748:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800674a:	e075      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800674c:	4b6b      	ldr	r3, [pc, #428]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	069b      	lsls	r3, r3, #26
 800675a:	4968      	ldr	r1, [pc, #416]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006760:	e06a      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006762:	4b66      	ldr	r3, [pc, #408]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	061b      	lsls	r3, r3, #24
 8006770:	4962      	ldr	r1, [pc, #392]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006776:	e05f      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d042      	beq.n	8006806 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006780:	4b5e      	ldr	r3, [pc, #376]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a5d      	ldr	r2, [pc, #372]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800678a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678c:	f7fb fe8a 	bl	80024a4 <HAL_GetTick>
 8006790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006794:	f7fb fe86 	bl	80024a4 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e280      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80067a6:	4b55      	ldr	r3, [pc, #340]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067b2:	f7fb fea7 	bl	8002504 <HAL_GetREVID>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80067bc:	4293      	cmp	r3, r2
 80067be:	d817      	bhi.n	80067f0 <HAL_RCC_OscConfig+0x3ec>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d108      	bne.n	80067da <HAL_RCC_OscConfig+0x3d6>
 80067c8:	4b4c      	ldr	r3, [pc, #304]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80067d0:	4a4a      	ldr	r2, [pc, #296]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067d6:	6053      	str	r3, [r2, #4]
 80067d8:	e02e      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
 80067da:	4b48      	ldr	r3, [pc, #288]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	069b      	lsls	r3, r3, #26
 80067e8:	4944      	ldr	r1, [pc, #272]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	604b      	str	r3, [r1, #4]
 80067ee:	e023      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
 80067f0:	4b42      	ldr	r3, [pc, #264]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	061b      	lsls	r3, r3, #24
 80067fe:	493f      	ldr	r1, [pc, #252]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006800:	4313      	orrs	r3, r2
 8006802:	60cb      	str	r3, [r1, #12]
 8006804:	e018      	b.n	8006838 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006806:	4b3d      	ldr	r3, [pc, #244]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3c      	ldr	r2, [pc, #240]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800680c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006812:	f7fb fe47 	bl	80024a4 <HAL_GetTick>
 8006816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006818:	e008      	b.n	800682c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800681a:	f7fb fe43 	bl	80024a4 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e23d      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800682c:	4b33      	ldr	r3, [pc, #204]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1f0      	bne.n	800681a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d036      	beq.n	80068b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d019      	beq.n	8006880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684c:	4b2b      	ldr	r3, [pc, #172]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 800684e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006850:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fb fe24 	bl	80024a4 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006860:	f7fb fe20 	bl	80024a4 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e21a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006872:	4b22      	ldr	r3, [pc, #136]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x45c>
 800687e:	e018      	b.n	80068b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006880:	4b1e      	ldr	r3, [pc, #120]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006884:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 8006886:	f023 0301 	bic.w	r3, r3, #1
 800688a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688c:	f7fb fe0a 	bl	80024a4 <HAL_GetTick>
 8006890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006894:	f7fb fe06 	bl	80024a4 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e200      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80068a6:	4b15      	ldr	r3, [pc, #84]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f0      	bne.n	8006894 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d039      	beq.n	8006932 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01c      	beq.n	8006900 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068c6:	4b0d      	ldr	r3, [pc, #52]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a0c      	ldr	r2, [pc, #48]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80068d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068d2:	f7fb fde7 	bl	80024a4 <HAL_GetTick>
 80068d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068da:	f7fb fde3 	bl	80024a4 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e1dd      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80068ec:	4b03      	ldr	r3, [pc, #12]	@ (80068fc <HAL_RCC_OscConfig+0x4f8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x4d6>
 80068f8:	e01b      	b.n	8006932 <HAL_RCC_OscConfig+0x52e>
 80068fa:	bf00      	nop
 80068fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006900:	4b9b      	ldr	r3, [pc, #620]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a9a      	ldr	r2, [pc, #616]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800690a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800690c:	f7fb fdca 	bl	80024a4 <HAL_GetTick>
 8006910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006912:	e008      	b.n	8006926 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006914:	f7fb fdc6 	bl	80024a4 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e1c0      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006926:	4b92      	ldr	r3, [pc, #584]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1f0      	bne.n	8006914 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 8081 	beq.w	8006a42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006940:	4b8c      	ldr	r3, [pc, #560]	@ (8006b74 <HAL_RCC_OscConfig+0x770>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a8b      	ldr	r2, [pc, #556]	@ (8006b74 <HAL_RCC_OscConfig+0x770>)
 8006946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800694a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800694c:	f7fb fdaa 	bl	80024a4 <HAL_GetTick>
 8006950:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006954:	f7fb fda6 	bl	80024a4 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	@ 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e1a0      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006966:	4b83      	ldr	r3, [pc, #524]	@ (8006b74 <HAL_RCC_OscConfig+0x770>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f0      	beq.n	8006954 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d106      	bne.n	8006988 <HAL_RCC_OscConfig+0x584>
 800697a:	4b7d      	ldr	r3, [pc, #500]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6713      	str	r3, [r2, #112]	@ 0x70
 8006986:	e02d      	b.n	80069e4 <HAL_RCC_OscConfig+0x5e0>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10c      	bne.n	80069aa <HAL_RCC_OscConfig+0x5a6>
 8006990:	4b77      	ldr	r3, [pc, #476]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006994:	4a76      	ldr	r2, [pc, #472]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006996:	f023 0301 	bic.w	r3, r3, #1
 800699a:	6713      	str	r3, [r2, #112]	@ 0x70
 800699c:	4b74      	ldr	r3, [pc, #464]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 800699e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a0:	4a73      	ldr	r2, [pc, #460]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069a2:	f023 0304 	bic.w	r3, r3, #4
 80069a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a8:	e01c      	b.n	80069e4 <HAL_RCC_OscConfig+0x5e0>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x5c8>
 80069b2:	4b6f      	ldr	r3, [pc, #444]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b6:	4a6e      	ldr	r2, [pc, #440]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069b8:	f043 0304 	orr.w	r3, r3, #4
 80069bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80069be:	4b6c      	ldr	r3, [pc, #432]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c2:	4a6b      	ldr	r2, [pc, #428]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069c4:	f043 0301 	orr.w	r3, r3, #1
 80069c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80069ca:	e00b      	b.n	80069e4 <HAL_RCC_OscConfig+0x5e0>
 80069cc:	4b68      	ldr	r3, [pc, #416]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d0:	4a67      	ldr	r2, [pc, #412]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d8:	4b65      	ldr	r3, [pc, #404]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069dc:	4a64      	ldr	r2, [pc, #400]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 80069de:	f023 0304 	bic.w	r3, r3, #4
 80069e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fb fd5a 	bl	80024a4 <HAL_GetTick>
 80069f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fb fd56 	bl	80024a4 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e14e      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0a:	4b59      	ldr	r3, [pc, #356]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0ee      	beq.n	80069f4 <HAL_RCC_OscConfig+0x5f0>
 8006a16:	e014      	b.n	8006a42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fb fd44 	bl	80024a4 <HAL_GetTick>
 8006a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a1e:	e00a      	b.n	8006a36 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a20:	f7fb fd40 	bl	80024a4 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e138      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006a36:	4b4e      	ldr	r3, [pc, #312]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ee      	bne.n	8006a20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 812d 	beq.w	8006ca6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006a4c:	4b48      	ldr	r3, [pc, #288]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a54:	2b18      	cmp	r3, #24
 8006a56:	f000 80bd 	beq.w	8006bd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	f040 809e 	bne.w	8006ba0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a64:	4b42      	ldr	r3, [pc, #264]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a41      	ldr	r2, [pc, #260]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fb fd18 	bl	80024a4 <HAL_GetTick>
 8006a74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a78:	f7fb fd14 	bl	80024a4 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e10e      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a8a:	4b39      	ldr	r3, [pc, #228]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a96:	4b36      	ldr	r3, [pc, #216]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a9a:	4b37      	ldr	r3, [pc, #220]	@ (8006b78 <HAL_RCC_OscConfig+0x774>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006aa6:	0112      	lsls	r2, r2, #4
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	4931      	ldr	r1, [pc, #196]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	025b      	lsls	r3, r3, #9
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	3b01      	subs	r3, #1
 8006acc:	041b      	lsls	r3, r3, #16
 8006ace:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	061b      	lsls	r3, r3, #24
 8006adc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ae0:	4923      	ldr	r1, [pc, #140]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006ae6:	4b22      	ldr	r3, [pc, #136]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aea:	4a21      	ldr	r2, [pc, #132]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006af2:	4b1f      	ldr	r3, [pc, #124]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006af6:	4b21      	ldr	r3, [pc, #132]	@ (8006b7c <HAL_RCC_OscConfig+0x778>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006afe:	00d2      	lsls	r2, r2, #3
 8006b00:	491b      	ldr	r1, [pc, #108]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b06:	4b1a      	ldr	r3, [pc, #104]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	f023 020c 	bic.w	r2, r3, #12
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	4917      	ldr	r1, [pc, #92]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006b18:	4b15      	ldr	r3, [pc, #84]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1c:	f023 0202 	bic.w	r2, r3, #2
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	4912      	ldr	r1, [pc, #72]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b2a:	4b11      	ldr	r3, [pc, #68]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2e:	4a10      	ldr	r2, [pc, #64]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b36:	4b0e      	ldr	r3, [pc, #56]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006b42:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b46:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006b4e:	4b08      	ldr	r3, [pc, #32]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	4a07      	ldr	r2, [pc, #28]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a04      	ldr	r2, [pc, #16]	@ (8006b70 <HAL_RCC_OscConfig+0x76c>)
 8006b60:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fb fc9d 	bl	80024a4 <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b6c:	e011      	b.n	8006b92 <HAL_RCC_OscConfig+0x78e>
 8006b6e:	bf00      	nop
 8006b70:	58024400 	.word	0x58024400
 8006b74:	58024800 	.word	0x58024800
 8006b78:	fffffc0c 	.word	0xfffffc0c
 8006b7c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b80:	f7fb fc90 	bl	80024a4 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e08a      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b92:	4b47      	ldr	r3, [pc, #284]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <HAL_RCC_OscConfig+0x77c>
 8006b9e:	e082      	b.n	8006ca6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba0:	4b43      	ldr	r3, [pc, #268]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a42      	ldr	r2, [pc, #264]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006ba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fb fc7a 	bl	80024a4 <HAL_GetTick>
 8006bb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb4:	f7fb fc76 	bl	80024a4 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e070      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x7b0>
 8006bd2:	e068      	b.n	8006ca6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006bd4:	4b36      	ldr	r3, [pc, #216]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006bda:	4b35      	ldr	r3, [pc, #212]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d031      	beq.n	8006c4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	f003 0203 	and.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d12a      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	091b      	lsrs	r3, r3, #4
 8006bfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d122      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d11a      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	0a5b      	lsrs	r3, r3, #9
 8006c1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d111      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d108      	bne.n	8006c4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	0e1b      	lsrs	r3, r3, #24
 8006c3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d001      	beq.n	8006c50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e02b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006c50:	4b17      	ldr	r3, [pc, #92]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c54:	08db      	lsrs	r3, r3, #3
 8006c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d01f      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006c66:	4b12      	ldr	r3, [pc, #72]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	4a11      	ldr	r2, [pc, #68]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c72:	f7fb fc17 	bl	80024a4 <HAL_GetTick>
 8006c76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006c78:	bf00      	nop
 8006c7a:	f7fb fc13 	bl	80024a4 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d0f9      	beq.n	8006c7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c86:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006c88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <HAL_RCC_OscConfig+0x8b0>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c92:	00d2      	lsls	r2, r2, #3
 8006c94:	4906      	ldr	r1, [pc, #24]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c9a:	4b05      	ldr	r3, [pc, #20]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	4a04      	ldr	r2, [pc, #16]	@ (8006cb0 <HAL_RCC_OscConfig+0x8ac>)
 8006ca0:	f043 0301 	orr.w	r3, r3, #1
 8006ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3730      	adds	r7, #48	@ 0x30
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	ffff0007 	.word	0xffff0007

08006cb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e19c      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b8a      	ldr	r3, [pc, #552]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d910      	bls.n	8006cfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b87      	ldr	r3, [pc, #540]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f023 020f 	bic.w	r2, r3, #15
 8006ce2:	4985      	ldr	r1, [pc, #532]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cea:	4b83      	ldr	r3, [pc, #524]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d001      	beq.n	8006cfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e184      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d010      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	4b7b      	ldr	r3, [pc, #492]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d908      	bls.n	8006d2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d18:	4b78      	ldr	r3, [pc, #480]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	4975      	ldr	r1, [pc, #468]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695a      	ldr	r2, [r3, #20]
 8006d3a:	4b70      	ldr	r3, [pc, #448]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d908      	bls.n	8006d58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d46:	4b6d      	ldr	r3, [pc, #436]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	496a      	ldr	r1, [pc, #424]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d010      	beq.n	8006d86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699a      	ldr	r2, [r3, #24]
 8006d68:	4b64      	ldr	r3, [pc, #400]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d908      	bls.n	8006d86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d74:	4b61      	ldr	r3, [pc, #388]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	495e      	ldr	r1, [pc, #376]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d010      	beq.n	8006db4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	69da      	ldr	r2, [r3, #28]
 8006d96:	4b59      	ldr	r3, [pc, #356]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d908      	bls.n	8006db4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006da2:	4b56      	ldr	r3, [pc, #344]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	4953      	ldr	r1, [pc, #332]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d010      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	4b4d      	ldr	r3, [pc, #308]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d908      	bls.n	8006de2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f023 020f 	bic.w	r2, r3, #15
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4947      	ldr	r1, [pc, #284]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d055      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006dee:	4b43      	ldr	r3, [pc, #268]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	4940      	ldr	r1, [pc, #256]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d107      	bne.n	8006e18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e08:	4b3c      	ldr	r3, [pc, #240]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d121      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0f6      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d107      	bne.n	8006e30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e20:	4b36      	ldr	r3, [pc, #216]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d115      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0ea      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d107      	bne.n	8006e48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e38:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d109      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e0de      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e48:	4b2c      	ldr	r3, [pc, #176]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e0d6      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e58:	4b28      	ldr	r3, [pc, #160]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	f023 0207 	bic.w	r2, r3, #7
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4925      	ldr	r1, [pc, #148]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6a:	f7fb fb1b 	bl	80024a4 <HAL_GetTick>
 8006e6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e70:	e00a      	b.n	8006e88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e72:	f7fb fb17 	bl	80024a4 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e0be      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e88:	4b1c      	ldr	r3, [pc, #112]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	00db      	lsls	r3, r3, #3
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d1eb      	bne.n	8006e72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d010      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d208      	bcs.n	8006ec8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eb6:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f023 020f 	bic.w	r2, r3, #15
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	490e      	ldr	r1, [pc, #56]	@ (8006efc <HAL_RCC_ClockConfig+0x244>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d214      	bcs.n	8006f00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed6:	4b08      	ldr	r3, [pc, #32]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 020f 	bic.w	r2, r3, #15
 8006ede:	4906      	ldr	r1, [pc, #24]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	4b04      	ldr	r3, [pc, #16]	@ (8006ef8 <HAL_RCC_ClockConfig+0x240>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d005      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e086      	b.n	8007006 <HAL_RCC_ClockConfig+0x34e>
 8006ef8:	52002000 	.word	0x52002000
 8006efc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d010      	beq.n	8006f2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691a      	ldr	r2, [r3, #16]
 8006f10:	4b3f      	ldr	r3, [pc, #252]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d208      	bcs.n	8006f2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f1e:	699b      	ldr	r3, [r3, #24]
 8006f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	4939      	ldr	r1, [pc, #228]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d010      	beq.n	8006f5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	4b34      	ldr	r3, [pc, #208]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d208      	bcs.n	8006f5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f4a:	4b31      	ldr	r3, [pc, #196]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	492e      	ldr	r1, [pc, #184]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0310 	and.w	r3, r3, #16
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d010      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	4b28      	ldr	r3, [pc, #160]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d208      	bcs.n	8006f8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f78:	4b25      	ldr	r3, [pc, #148]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	4922      	ldr	r1, [pc, #136]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d010      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69da      	ldr	r2, [r3, #28]
 8006f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d208      	bcs.n	8006fb8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	4917      	ldr	r1, [pc, #92]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fb8:	f000 f89e 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b14      	ldr	r3, [pc, #80]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	4912      	ldr	r1, [pc, #72]	@ (8007014 <HAL_RCC_ClockConfig+0x35c>)
 8006fca:	5ccb      	ldrb	r3, [r1, r3]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007010 <HAL_RCC_ClockConfig+0x358>)
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	4a0d      	ldr	r2, [pc, #52]	@ (8007014 <HAL_RCC_ClockConfig+0x35c>)
 8006fe0:	5cd3      	ldrb	r3, [r2, r3]
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fec:	4a0a      	ldr	r2, [pc, #40]	@ (8007018 <HAL_RCC_ClockConfig+0x360>)
 8006fee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800701c <HAL_RCC_ClockConfig+0x364>)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8007020 <HAL_RCC_ClockConfig+0x368>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fa fe82 	bl	8001d04 <HAL_InitTick>
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	58024400 	.word	0x58024400
 8007014:	0801dda8 	.word	0x0801dda8
 8007018:	24000004 	.word	0x24000004
 800701c:	24000000 	.word	0x24000000
 8007020:	2400000c 	.word	0x2400000c

08007024 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	@ 0x30
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d12a      	bne.n	800708c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007036:	4b2d      	ldr	r3, [pc, #180]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 8007038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800703c:	4a2b      	ldr	r2, [pc, #172]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007046:	4b29      	ldr	r3, [pc, #164]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 8007048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705a:	2302      	movs	r3, #2
 800705c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800705e:	2303      	movs	r3, #3
 8007060:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007062:	2300      	movs	r3, #0
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007066:	2300      	movs	r3, #0
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800706a:	f107 031c 	add.w	r3, r7, #28
 800706e:	4619      	mov	r1, r3
 8007070:	481f      	ldr	r0, [pc, #124]	@ (80070f0 <HAL_RCC_MCOConfig+0xcc>)
 8007072:	f7fe fdc3 	bl	8005bfc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007076:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	430b      	orrs	r3, r1
 8007084:	4919      	ldr	r1, [pc, #100]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800708a:	e02a      	b.n	80070e2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800708c:	4b17      	ldr	r3, [pc, #92]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 800708e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007092:	4a16      	ldr	r2, [pc, #88]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 8007094:	f043 0304 	orr.w	r3, r3, #4
 8007098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800709c:	4b13      	ldr	r3, [pc, #76]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 800709e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80070aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b0:	2302      	movs	r3, #2
 80070b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b4:	2303      	movs	r3, #3
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80070bc:	2300      	movs	r3, #0
 80070be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80070c0:	f107 031c 	add.w	r3, r7, #28
 80070c4:	4619      	mov	r1, r3
 80070c6:	480b      	ldr	r0, [pc, #44]	@ (80070f4 <HAL_RCC_MCOConfig+0xd0>)
 80070c8:	f7fe fd98 	bl	8005bfc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80070cc:	4b07      	ldr	r3, [pc, #28]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	01d9      	lsls	r1, r3, #7
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	430b      	orrs	r3, r1
 80070dc:	4903      	ldr	r1, [pc, #12]	@ (80070ec <HAL_RCC_MCOConfig+0xc8>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	610b      	str	r3, [r1, #16]
}
 80070e2:	bf00      	nop
 80070e4:	3730      	adds	r7, #48	@ 0x30
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	58024400 	.word	0x58024400
 80070f0:	58020000 	.word	0x58020000
 80070f4:	58020800 	.word	0x58020800

080070f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	@ 0x24
 80070fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070fe:	4bb3      	ldr	r3, [pc, #716]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007106:	2b18      	cmp	r3, #24
 8007108:	f200 8155 	bhi.w	80073b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800710c:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <HAL_RCC_GetSysClockFreq+0x1c>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007179 	.word	0x08007179
 8007118:	080073b7 	.word	0x080073b7
 800711c:	080073b7 	.word	0x080073b7
 8007120:	080073b7 	.word	0x080073b7
 8007124:	080073b7 	.word	0x080073b7
 8007128:	080073b7 	.word	0x080073b7
 800712c:	080073b7 	.word	0x080073b7
 8007130:	080073b7 	.word	0x080073b7
 8007134:	0800719f 	.word	0x0800719f
 8007138:	080073b7 	.word	0x080073b7
 800713c:	080073b7 	.word	0x080073b7
 8007140:	080073b7 	.word	0x080073b7
 8007144:	080073b7 	.word	0x080073b7
 8007148:	080073b7 	.word	0x080073b7
 800714c:	080073b7 	.word	0x080073b7
 8007150:	080073b7 	.word	0x080073b7
 8007154:	080071a5 	.word	0x080071a5
 8007158:	080073b7 	.word	0x080073b7
 800715c:	080073b7 	.word	0x080073b7
 8007160:	080073b7 	.word	0x080073b7
 8007164:	080073b7 	.word	0x080073b7
 8007168:	080073b7 	.word	0x080073b7
 800716c:	080073b7 	.word	0x080073b7
 8007170:	080073b7 	.word	0x080073b7
 8007174:	080071ab 	.word	0x080071ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007178:	4b94      	ldr	r3, [pc, #592]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d009      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007184:	4b91      	ldr	r3, [pc, #580]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	08db      	lsrs	r3, r3, #3
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	4a90      	ldr	r2, [pc, #576]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007190:	fa22 f303 	lsr.w	r3, r2, r3
 8007194:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007196:	e111      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007198:	4b8d      	ldr	r3, [pc, #564]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800719a:	61bb      	str	r3, [r7, #24]
      break;
 800719c:	e10e      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800719e:	4b8d      	ldr	r3, [pc, #564]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071a0:	61bb      	str	r3, [r7, #24]
      break;
 80071a2:	e10b      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80071a4:	4b8c      	ldr	r3, [pc, #560]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071a6:	61bb      	str	r3, [r7, #24]
      break;
 80071a8:	e108      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071aa:	4b88      	ldr	r3, [pc, #544]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80071b4:	4b85      	ldr	r3, [pc, #532]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b8:	091b      	lsrs	r3, r3, #4
 80071ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071c0:	4b82      	ldr	r3, [pc, #520]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80071ca:	4b80      	ldr	r3, [pc, #512]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ce:	08db      	lsrs	r3, r3, #3
 80071d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	fb02 f303 	mul.w	r3, r2, r3
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80e1 	beq.w	80073b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f000 8083 	beq.w	80072fc <HAL_RCC_GetSysClockFreq+0x204>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	f200 80a1 	bhi.w	8007340 <HAL_RCC_GetSysClockFreq+0x248>
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x114>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d056      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800720a:	e099      	b.n	8007340 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800720c:	4b6f      	ldr	r3, [pc, #444]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0320 	and.w	r3, r3, #32
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02d      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007218:	4b6c      	ldr	r3, [pc, #432]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a6b      	ldr	r2, [pc, #428]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007242:	4b62      	ldr	r3, [pc, #392]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007252:	ed97 6a02 	vldr	s12, [r7, #8]
 8007256:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800725a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800725e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800726a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007272:	e087      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80073e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	4b51      	ldr	r3, [pc, #324]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007296:	ed97 6a02 	vldr	s12, [r7, #8]
 800729a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800729e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072b6:	e065      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ca:	4b40      	ldr	r3, [pc, #256]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072da:	ed97 6a02 	vldr	s12, [r7, #8]
 80072de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80072e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80072fa:	e043      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007306:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800730a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800730e:	4b2f      	ldr	r3, [pc, #188]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800731e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007322:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800732a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800732e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800733e:	e021      	b.n	8007384 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80073e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800734e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007352:	4b1e      	ldr	r3, [pc, #120]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007362:	ed97 6a02 	vldr	s12, [r7, #8]
 8007366:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80073dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800736a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007372:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007382:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007384:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007388:	0a5b      	lsrs	r3, r3, #9
 800738a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800738e:	3301      	adds	r3, #1
 8007390:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	ee07 3a90 	vmov	s15, r3
 8007398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800739c:	edd7 6a07 	vldr	s13, [r7, #28]
 80073a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a8:	ee17 3a90 	vmov	r3, s15
 80073ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80073ae:	e005      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
      break;
 80073b4:	e002      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80073b6:	4b07      	ldr	r3, [pc, #28]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073b8:	61bb      	str	r3, [r7, #24]
      break;
 80073ba:	bf00      	nop
  }

  return sysclockfreq;
 80073bc:	69bb      	ldr	r3, [r7, #24]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	@ 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	58024400 	.word	0x58024400
 80073d0:	03d09000 	.word	0x03d09000
 80073d4:	003d0900 	.word	0x003d0900
 80073d8:	007a1200 	.word	0x007a1200
 80073dc:	46000000 	.word	0x46000000
 80073e0:	4c742400 	.word	0x4c742400
 80073e4:	4a742400 	.word	0x4a742400
 80073e8:	4af42400 	.word	0x4af42400

080073ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073f2:	f7ff fe81 	bl	80070f8 <HAL_RCC_GetSysClockFreq>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b10      	ldr	r3, [pc, #64]	@ (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	490f      	ldr	r1, [pc, #60]	@ (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 8007404:	5ccb      	ldrb	r3, [r1, r3]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	fa22 f303 	lsr.w	r3, r2, r3
 800740e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007410:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <HAL_RCC_GetHCLKFreq+0x50>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	4a09      	ldr	r2, [pc, #36]	@ (8007440 <HAL_RCC_GetHCLKFreq+0x54>)
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	f003 031f 	and.w	r3, r3, #31
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	4a07      	ldr	r2, [pc, #28]	@ (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007428:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800742a:	4a07      	ldr	r2, [pc, #28]	@ (8007448 <HAL_RCC_GetHCLKFreq+0x5c>)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007430:	4b04      	ldr	r3, [pc, #16]	@ (8007444 <HAL_RCC_GetHCLKFreq+0x58>)
 8007432:	681b      	ldr	r3, [r3, #0]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	58024400 	.word	0x58024400
 8007440:	0801dda8 	.word	0x0801dda8
 8007444:	24000004 	.word	0x24000004
 8007448:	24000000 	.word	0x24000000

0800744c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007450:	f7ff ffcc 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007454:	4602      	mov	r2, r0
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	4904      	ldr	r1, [pc, #16]	@ (8007474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007462:	5ccb      	ldrb	r3, [r1, r3]
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	58024400 	.word	0x58024400
 8007474:	0801dda8 	.word	0x0801dda8

08007478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800747c:	f7ff ffb6 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8007480:	4602      	mov	r2, r0
 8007482:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	0a1b      	lsrs	r3, r3, #8
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	4904      	ldr	r1, [pc, #16]	@ (80074a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800748e:	5ccb      	ldrb	r3, [r1, r3]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	58024400 	.word	0x58024400
 80074a0:	0801dda8 	.word	0x0801dda8

080074a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	223f      	movs	r2, #63	@ 0x3f
 80074b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	f003 0207 	and.w	r2, r3, #7
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80074c0:	4b17      	ldr	r3, [pc, #92]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80074cc:	4b14      	ldr	r3, [pc, #80]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f003 020f 	and.w	r2, r3, #15
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80074d8:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80074e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80074f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074f2:	69db      	ldr	r3, [r3, #28]
 80074f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80074fc:	4b08      	ldr	r3, [pc, #32]	@ (8007520 <HAL_RCC_GetClockConfig+0x7c>)
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_RCC_GetClockConfig+0x80>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	601a      	str	r2, [r3, #0]
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	58024400 	.word	0x58024400
 8007524:	52002000 	.word	0x52002000

08007528 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800752c:	b0ca      	sub	sp, #296	@ 0x128
 800752e:	af00      	add	r7, sp, #0
 8007530:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800753a:	2300      	movs	r3, #0
 800753c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800754c:	2500      	movs	r5, #0
 800754e:	ea54 0305 	orrs.w	r3, r4, r5
 8007552:	d049      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007558:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800755a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800755e:	d02f      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007560:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007564:	d828      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800756a:	d01a      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800756c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007570:	d822      	bhi.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800757a:	d007      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800757c:	e01c      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757e:	4bb8      	ldr	r3, [pc, #736]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	4ab7      	ldr	r2, [pc, #732]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007588:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800758a:	e01a      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007590:	3308      	adds	r3, #8
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f001 fc8f 	bl	8008eb8 <RCCEx_PLL2_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075a0:	e00f      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	3328      	adds	r3, #40	@ 0x28
 80075a8:	2102      	movs	r1, #2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f001 fd36 	bl	800901c <RCCEx_PLL3_Config>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80075b6:	e004      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075be:	e000      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80075c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10a      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075ca:	4ba5      	ldr	r3, [pc, #660]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075d8:	4aa1      	ldr	r2, [pc, #644]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075da:	430b      	orrs	r3, r1
 80075dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80075de:	e003      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80075f4:	f04f 0900 	mov.w	r9, #0
 80075f8:	ea58 0309 	orrs.w	r3, r8, r9
 80075fc:	d047      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007604:	2b04      	cmp	r3, #4
 8007606:	d82a      	bhi.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007608:	a201      	add	r2, pc, #4	@ (adr r2, 8007610 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	08007625 	.word	0x08007625
 8007614:	08007633 	.word	0x08007633
 8007618:	08007649 	.word	0x08007649
 800761c:	08007667 	.word	0x08007667
 8007620:	08007667 	.word	0x08007667
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007624:	4b8e      	ldr	r3, [pc, #568]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	4a8d      	ldr	r2, [pc, #564]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800762a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800762e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007630:	e01a      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007636:	3308      	adds	r3, #8
 8007638:	2100      	movs	r1, #0
 800763a:	4618      	mov	r0, r3
 800763c:	f001 fc3c 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007646:	e00f      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800764c:	3328      	adds	r3, #40	@ 0x28
 800764e:	2100      	movs	r1, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f001 fce3 	bl	800901c <RCCEx_PLL3_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800765c:	e004      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007664:	e000      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007670:	4b7b      	ldr	r3, [pc, #492]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007674:	f023 0107 	bic.w	r1, r3, #7
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800767e:	4a78      	ldr	r2, [pc, #480]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007680:	430b      	orrs	r3, r1
 8007682:	6513      	str	r3, [r2, #80]	@ 0x50
 8007684:	e003      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800768a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800769a:	f04f 0b00 	mov.w	fp, #0
 800769e:	ea5a 030b 	orrs.w	r3, sl, fp
 80076a2:	d04c      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ae:	d030      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80076b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076b4:	d829      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80076b8:	d02d      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80076ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80076bc:	d825      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076be:	2b80      	cmp	r3, #128	@ 0x80
 80076c0:	d018      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80076c2:	2b80      	cmp	r3, #128	@ 0x80
 80076c4:	d821      	bhi.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80076ca:	2b40      	cmp	r3, #64	@ 0x40
 80076cc:	d007      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80076ce:	e01c      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4b63      	ldr	r3, [pc, #396]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d4:	4a62      	ldr	r2, [pc, #392]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076dc:	e01c      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e2:	3308      	adds	r3, #8
 80076e4:	2100      	movs	r1, #0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f001 fbe6 	bl	8008eb8 <RCCEx_PLL2_Config>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80076f2:	e011      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f8:	3328      	adds	r3, #40	@ 0x28
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fc8d 	bl	800901c <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007708:	e006      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007710:	e002      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007712:	bf00      	nop
 8007714:	e000      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007720:	4b4f      	ldr	r3, [pc, #316]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007724:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772e:	4a4c      	ldr	r2, [pc, #304]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007730:	430b      	orrs	r3, r1
 8007732:	6513      	str	r3, [r2, #80]	@ 0x50
 8007734:	e003      	b.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800773a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800774a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007754:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007758:	460b      	mov	r3, r1
 800775a:	4313      	orrs	r3, r2
 800775c:	d053      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800775e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800776a:	d035      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800776c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007770:	d82e      	bhi.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007776:	d031      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007778:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800777c:	d828      	bhi.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800777e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007782:	d01a      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007788:	d822      	bhi.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d003      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800778e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007792:	d007      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007794:	e01c      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007796:	4b32      	ldr	r3, [pc, #200]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	4a31      	ldr	r2, [pc, #196]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800779c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077a2:	e01c      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a8:	3308      	adds	r3, #8
 80077aa:	2100      	movs	r1, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 fb83 	bl	8008eb8 <RCCEx_PLL2_Config>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80077b8:	e011      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	3328      	adds	r3, #40	@ 0x28
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 fc2a 	bl	800901c <RCCEx_PLL3_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80077ce:	e006      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077d6:	e002      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077d8:	bf00      	nop
 80077da:	e000      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80077dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10b      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80077e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077f8:	430b      	orrs	r3, r1
 80077fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80077fc:	e003      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007812:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007816:	2300      	movs	r3, #0
 8007818:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800781c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d056      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800782e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007832:	d038      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007838:	d831      	bhi.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800783a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800783e:	d034      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007840:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007844:	d82b      	bhi.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800784a:	d01d      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800784c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007850:	d825      	bhi.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d006      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800785c:	e01f      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800785e:	bf00      	nop
 8007860:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007864:	4ba2      	ldr	r3, [pc, #648]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	4aa1      	ldr	r2, [pc, #644]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800786a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800786e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007870:	e01c      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	3308      	adds	r3, #8
 8007878:	2100      	movs	r1, #0
 800787a:	4618      	mov	r0, r3
 800787c:	f001 fb1c 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007886:	e011      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788c:	3328      	adds	r3, #40	@ 0x28
 800788e:	2100      	movs	r1, #0
 8007890:	4618      	mov	r0, r3
 8007892:	f001 fbc3 	bl	800901c <RCCEx_PLL3_Config>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800789c:	e006      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078a4:	e002      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80078aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10b      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80078b4:	4b8e      	ldr	r3, [pc, #568]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80078c4:	4a8a      	ldr	r2, [pc, #552]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078c6:	430b      	orrs	r3, r1
 80078c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80078ca:	e003      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80078d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80078e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80078e4:	2300      	movs	r3, #0
 80078e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80078ee:	460b      	mov	r3, r1
 80078f0:	4313      	orrs	r3, r2
 80078f2:	d03a      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078fa:	2b30      	cmp	r3, #48	@ 0x30
 80078fc:	d01f      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80078fe:	2b30      	cmp	r3, #48	@ 0x30
 8007900:	d819      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007902:	2b20      	cmp	r3, #32
 8007904:	d00c      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007906:	2b20      	cmp	r3, #32
 8007908:	d815      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800790a:	2b00      	cmp	r3, #0
 800790c:	d019      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800790e:	2b10      	cmp	r3, #16
 8007910:	d111      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007912:	4b77      	ldr	r3, [pc, #476]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	4a76      	ldr	r2, [pc, #472]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800791c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800791e:	e011      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007924:	3308      	adds	r3, #8
 8007926:	2102      	movs	r1, #2
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fac5 	bl	8008eb8 <RCCEx_PLL2_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007934:	e006      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800793c:	e002      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800793e:	bf00      	nop
 8007940:	e000      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800794c:	4b68      	ldr	r3, [pc, #416]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800794e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007950:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795a:	4a65      	ldr	r2, [pc, #404]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800795c:	430b      	orrs	r3, r1
 800795e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007960:	e003      	b.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007966:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007976:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800797a:	2300      	movs	r3, #0
 800797c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007980:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007984:	460b      	mov	r3, r1
 8007986:	4313      	orrs	r3, r2
 8007988:	d051      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007994:	d035      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800799a:	d82e      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800799c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079a0:	d031      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80079a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80079a6:	d828      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80079a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ac:	d01a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80079ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079b2:	d822      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80079b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079bc:	d007      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80079be:	e01c      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c0:	4b4b      	ldr	r3, [pc, #300]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c4:	4a4a      	ldr	r2, [pc, #296]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80079c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079cc:	e01c      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	3308      	adds	r3, #8
 80079d4:	2100      	movs	r1, #0
 80079d6:	4618      	mov	r0, r3
 80079d8:	f001 fa6e 	bl	8008eb8 <RCCEx_PLL2_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079e2:	e011      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e8:	3328      	adds	r3, #40	@ 0x28
 80079ea:	2100      	movs	r1, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f001 fb15 	bl	800901c <RCCEx_PLL3_Config>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a00:	e002      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007a02:	bf00      	nop
 8007a04:	e000      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a10:	4b37      	ldr	r3, [pc, #220]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a1e:	4a34      	ldr	r2, [pc, #208]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a24:	e003      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007a44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	d056      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a58:	d033      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a5e:	d82c      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a64:	d02f      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007a66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a6a:	d826      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a70:	d02b      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007a72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a76:	d820      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7c:	d012      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007a7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a82:	d81a      	bhi.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d022      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a8c:	d115      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	3308      	adds	r3, #8
 8007a94:	2101      	movs	r1, #1
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 fa0e 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e015      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa8:	3328      	adds	r3, #40	@ 0x28
 8007aaa:	2101      	movs	r1, #1
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 fab5 	bl	800901c <RCCEx_PLL3_Config>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ab8:	e00a      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ac0:	e006      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ac2:	bf00      	nop
 8007ac4:	e004      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ac6:	bf00      	nop
 8007ac8:	e002      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007aca:	bf00      	nop
 8007acc:	e000      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10d      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007adc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae6:	4a02      	ldr	r2, [pc, #8]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	6513      	str	r3, [r2, #80]	@ 0x50
 8007aec:	e006      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007aee:	bf00      	nop
 8007af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	d055      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b28:	d033      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b2e:	d82c      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b34:	d02f      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3a:	d826      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b40:	d02b      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007b46:	d820      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b4c:	d012      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b52:	d81a      	bhi.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d022      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b5c:	d115      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b62:	3308      	adds	r3, #8
 8007b64:	2101      	movs	r1, #1
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 f9a6 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b72:	e015      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b78:	3328      	adds	r3, #40	@ 0x28
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 fa4d 	bl	800901c <RCCEx_PLL3_Config>
 8007b82:	4603      	mov	r3, r0
 8007b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007b88:	e00a      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b90:	e006      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b92:	bf00      	nop
 8007b94:	e004      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b96:	bf00      	nop
 8007b98:	e002      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b9a:	bf00      	nop
 8007b9c:	e000      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d10b      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ba8:	4ba3      	ldr	r3, [pc, #652]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007bb8:	4a9f      	ldr	r2, [pc, #636]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8007bbe:	e003      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007be2:	460b      	mov	r3, r1
 8007be4:	4313      	orrs	r3, r2
 8007be6:	d037      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bf2:	d00e      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bf8:	d816      	bhi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d018      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c02:	d111      	bne.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c04:	4b8c      	ldr	r3, [pc, #560]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	4a8b      	ldr	r2, [pc, #556]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c10:	e00f      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	3308      	adds	r3, #8
 8007c18:	2101      	movs	r1, #1
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f94c 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007c26:	e004      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c2e:	e000      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c48:	4a7b      	ldr	r2, [pc, #492]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c4e:	e003      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	d039      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d81c      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007c82:	a201      	add	r2, pc, #4	@ (adr r2, 8007c88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c88:	08007cc5 	.word	0x08007cc5
 8007c8c:	08007c99 	.word	0x08007c99
 8007c90:	08007ca7 	.word	0x08007ca7
 8007c94:	08007cc5 	.word	0x08007cc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c98:	4b67      	ldr	r3, [pc, #412]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c9c:	4a66      	ldr	r2, [pc, #408]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ca4:	e00f      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007caa:	3308      	adds	r3, #8
 8007cac:	2102      	movs	r1, #2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 f902 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007cba:	e004      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cc2:	e000      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007cce:	4b5a      	ldr	r3, [pc, #360]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cd2:	f023 0103 	bic.w	r1, r3, #3
 8007cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cdc:	4a56      	ldr	r2, [pc, #344]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ce2:	e003      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007d06:	460b      	mov	r3, r1
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	f000 809f 	beq.w	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a4a      	ldr	r2, [pc, #296]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d1a:	f7fa fbc3 	bl	80024a4 <HAL_GetTick>
 8007d1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d22:	e00b      	b.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d24:	f7fa fbbe 	bl	80024a4 <HAL_GetTick>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b64      	cmp	r3, #100	@ 0x64
 8007d32:	d903      	bls.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d3a:	e005      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ed      	beq.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d179      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007d50:	4b39      	ldr	r3, [pc, #228]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d5c:	4053      	eors	r3, r2
 8007d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d015      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d66:	4b34      	ldr	r3, [pc, #208]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d72:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d76:	4a30      	ldr	r2, [pc, #192]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d7e:	4b2e      	ldr	r3, [pc, #184]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d82:	4a2d      	ldr	r2, [pc, #180]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007d90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d9e:	d118      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da0:	f7fa fb80 	bl	80024a4 <HAL_GetTick>
 8007da4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da8:	e00d      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007daa:	f7fa fb7b 	bl	80024a4 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007db4:	1ad2      	subs	r2, r2, r3
 8007db6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d903      	bls.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007dc4:	e005      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0eb      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d129      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dea:	d10e      	bne.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007dec:	4b12      	ldr	r3, [pc, #72]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007dfc:	091a      	lsrs	r2, r3, #4
 8007dfe:	4b10      	ldr	r3, [pc, #64]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	4a0d      	ldr	r2, [pc, #52]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e04:	430b      	orrs	r3, r1
 8007e06:	6113      	str	r3, [r2, #16]
 8007e08:	e005      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e14:	6113      	str	r3, [r2, #16]
 8007e16:	4b08      	ldr	r3, [pc, #32]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e26:	4a04      	ldr	r2, [pc, #16]	@ (8007e38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e28:	430b      	orrs	r3, r1
 8007e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e2c:	e00e      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007e36:	e009      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	58024800 	.word	0x58024800
 8007e40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f002 0301 	and.w	r3, r2, #1
 8007e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e66:	460b      	mov	r3, r1
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f000 8089 	beq.w	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e74:	2b28      	cmp	r3, #40	@ 0x28
 8007e76:	d86b      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007e78:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7e:	bf00      	nop
 8007e80:	08007f59 	.word	0x08007f59
 8007e84:	08007f51 	.word	0x08007f51
 8007e88:	08007f51 	.word	0x08007f51
 8007e8c:	08007f51 	.word	0x08007f51
 8007e90:	08007f51 	.word	0x08007f51
 8007e94:	08007f51 	.word	0x08007f51
 8007e98:	08007f51 	.word	0x08007f51
 8007e9c:	08007f51 	.word	0x08007f51
 8007ea0:	08007f25 	.word	0x08007f25
 8007ea4:	08007f51 	.word	0x08007f51
 8007ea8:	08007f51 	.word	0x08007f51
 8007eac:	08007f51 	.word	0x08007f51
 8007eb0:	08007f51 	.word	0x08007f51
 8007eb4:	08007f51 	.word	0x08007f51
 8007eb8:	08007f51 	.word	0x08007f51
 8007ebc:	08007f51 	.word	0x08007f51
 8007ec0:	08007f3b 	.word	0x08007f3b
 8007ec4:	08007f51 	.word	0x08007f51
 8007ec8:	08007f51 	.word	0x08007f51
 8007ecc:	08007f51 	.word	0x08007f51
 8007ed0:	08007f51 	.word	0x08007f51
 8007ed4:	08007f51 	.word	0x08007f51
 8007ed8:	08007f51 	.word	0x08007f51
 8007edc:	08007f51 	.word	0x08007f51
 8007ee0:	08007f59 	.word	0x08007f59
 8007ee4:	08007f51 	.word	0x08007f51
 8007ee8:	08007f51 	.word	0x08007f51
 8007eec:	08007f51 	.word	0x08007f51
 8007ef0:	08007f51 	.word	0x08007f51
 8007ef4:	08007f51 	.word	0x08007f51
 8007ef8:	08007f51 	.word	0x08007f51
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007f59 	.word	0x08007f59
 8007f04:	08007f51 	.word	0x08007f51
 8007f08:	08007f51 	.word	0x08007f51
 8007f0c:	08007f51 	.word	0x08007f51
 8007f10:	08007f51 	.word	0x08007f51
 8007f14:	08007f51 	.word	0x08007f51
 8007f18:	08007f51 	.word	0x08007f51
 8007f1c:	08007f51 	.word	0x08007f51
 8007f20:	08007f59 	.word	0x08007f59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 ffc3 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f38:	e00f      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	3328      	adds	r3, #40	@ 0x28
 8007f40:	2101      	movs	r1, #1
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 f86a 	bl	800901c <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007f4e:	e004      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f62:	4bbf      	ldr	r3, [pc, #764]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f70:	4abb      	ldr	r2, [pc, #748]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f72:	430b      	orrs	r3, r1
 8007f74:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f76:	e003      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f002 0302 	and.w	r3, r2, #2
 8007f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f90:	2300      	movs	r3, #0
 8007f92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007f96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	d041      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	d824      	bhi.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007faa:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08007ffd 	.word	0x08007ffd
 8007fb4:	08007fc9 	.word	0x08007fc9
 8007fb8:	08007fdf 	.word	0x08007fdf
 8007fbc:	08007ffd 	.word	0x08007ffd
 8007fc0:	08007ffd 	.word	0x08007ffd
 8007fc4:	08007ffd 	.word	0x08007ffd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fcc:	3308      	adds	r3, #8
 8007fce:	2101      	movs	r1, #1
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 ff71 	bl	8008eb8 <RCCEx_PLL2_Config>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007fdc:	e00f      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe2:	3328      	adds	r3, #40	@ 0x28
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 f818 	bl	800901c <RCCEx_PLL3_Config>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007ff2:	e004      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ffa:	e000      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10a      	bne.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008006:	4b96      	ldr	r3, [pc, #600]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800a:	f023 0107 	bic.w	r1, r3, #7
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008014:	4a92      	ldr	r2, [pc, #584]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6553      	str	r3, [r2, #84]	@ 0x54
 800801a:	e003      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f002 0304 	and.w	r3, r2, #4
 8008030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008034:	2300      	movs	r3, #0
 8008036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800803a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800803e:	460b      	mov	r3, r1
 8008040:	4313      	orrs	r3, r2
 8008042:	d044      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800804c:	2b05      	cmp	r3, #5
 800804e:	d825      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008050:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	080080a5 	.word	0x080080a5
 800805c:	08008071 	.word	0x08008071
 8008060:	08008087 	.word	0x08008087
 8008064:	080080a5 	.word	0x080080a5
 8008068:	080080a5 	.word	0x080080a5
 800806c:	080080a5 	.word	0x080080a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008074:	3308      	adds	r3, #8
 8008076:	2101      	movs	r1, #1
 8008078:	4618      	mov	r0, r3
 800807a:	f000 ff1d 	bl	8008eb8 <RCCEx_PLL2_Config>
 800807e:	4603      	mov	r3, r0
 8008080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008084:	e00f      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808a:	3328      	adds	r3, #40	@ 0x28
 800808c:	2101      	movs	r1, #1
 800808e:	4618      	mov	r0, r3
 8008090:	f000 ffc4 	bl	800901c <RCCEx_PLL3_Config>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800809a:	e004      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080a2:	e000      	b.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80080a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10b      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080ae:	4b6c      	ldr	r3, [pc, #432]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b2:	f023 0107 	bic.w	r1, r3, #7
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080be:	4a68      	ldr	r2, [pc, #416]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80080c0:	430b      	orrs	r3, r1
 80080c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80080c4:	e003      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	f002 0320 	and.w	r3, r2, #32
 80080da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080de:	2300      	movs	r3, #0
 80080e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080e8:	460b      	mov	r3, r1
 80080ea:	4313      	orrs	r3, r2
 80080ec:	d055      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80080ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080fa:	d033      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80080fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008100:	d82c      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008106:	d02f      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800810c:	d826      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800810e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008112:	d02b      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008114:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008118:	d820      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800811a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800811e:	d012      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008124:	d81a      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d022      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800812a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800812e:	d115      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008134:	3308      	adds	r3, #8
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f000 febd 	bl	8008eb8 <RCCEx_PLL2_Config>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008144:	e015      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	3328      	adds	r3, #40	@ 0x28
 800814c:	2102      	movs	r1, #2
 800814e:	4618      	mov	r0, r3
 8008150:	f000 ff64 	bl	800901c <RCCEx_PLL3_Config>
 8008154:	4603      	mov	r3, r0
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800815a:	e00a      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008162:	e006      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008164:	bf00      	nop
 8008166:	e004      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800817a:	4b39      	ldr	r3, [pc, #228]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800817c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818a:	4a35      	ldr	r2, [pc, #212]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800818c:	430b      	orrs	r3, r1
 800818e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008190:	e003      	b.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80081a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80081b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4313      	orrs	r3, r2
 80081b8:	d058      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80081ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081c6:	d033      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80081c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80081cc:	d82c      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	d02f      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d8:	d826      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081de:	d02b      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80081e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80081e4:	d820      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ea:	d012      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f0:	d81a      	bhi.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d022      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80081f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081fa:	d115      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	3308      	adds	r3, #8
 8008202:	2100      	movs	r1, #0
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fe57 	bl	8008eb8 <RCCEx_PLL2_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008210:	e015      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008216:	3328      	adds	r3, #40	@ 0x28
 8008218:	2102      	movs	r1, #2
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fefe 	bl	800901c <RCCEx_PLL3_Config>
 8008220:	4603      	mov	r3, r0
 8008222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008226:	e00a      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800822e:	e006      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008230:	bf00      	nop
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008234:	bf00      	nop
 8008236:	e002      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008238:	bf00      	nop
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800823c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800823e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10e      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008246:	4b06      	ldr	r3, [pc, #24]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800824e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008252:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008256:	4a02      	ldr	r2, [pc, #8]	@ (8008260 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6593      	str	r3, [r2, #88]	@ 0x58
 800825c:	e006      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800825e:	bf00      	nop
 8008260:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800827c:	2300      	movs	r3, #0
 800827e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008282:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d055      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008294:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008298:	d033      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800829a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800829e:	d82c      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082a4:	d02f      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80082a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082aa:	d826      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082b0:	d02b      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80082b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80082b6:	d820      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082bc:	d012      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80082be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082c2:	d81a      	bhi.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d022      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80082c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082cc:	d115      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d2:	3308      	adds	r3, #8
 80082d4:	2100      	movs	r1, #0
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fdee 	bl	8008eb8 <RCCEx_PLL2_Config>
 80082dc:	4603      	mov	r3, r0
 80082de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082e2:	e015      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e8:	3328      	adds	r3, #40	@ 0x28
 80082ea:	2102      	movs	r1, #2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fe95 	bl	800901c <RCCEx_PLL3_Config>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80082f8:	e00a      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008300:	e006      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008302:	bf00      	nop
 8008304:	e004      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008306:	bf00      	nop
 8008308:	e002      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800830a:	bf00      	nop
 800830c:	e000      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800830e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10b      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008318:	4ba1      	ldr	r3, [pc, #644]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800831a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800831c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008324:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008328:	4a9d      	ldr	r2, [pc, #628]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800832a:	430b      	orrs	r3, r1
 800832c:	6593      	str	r3, [r2, #88]	@ 0x58
 800832e:	e003      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f002 0308 	and.w	r3, r2, #8
 8008344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008348:	2300      	movs	r3, #0
 800834a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800834e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008352:	460b      	mov	r3, r1
 8008354:	4313      	orrs	r3, r2
 8008356:	d01e      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008364:	d10c      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800836a:	3328      	adds	r3, #40	@ 0x28
 800836c:	2102      	movs	r1, #2
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fe54 	bl	800901c <RCCEx_PLL3_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008380:	4b87      	ldr	r3, [pc, #540]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008384:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008390:	4a83      	ldr	r2, [pc, #524]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008392:	430b      	orrs	r3, r1
 8008394:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839e:	f002 0310 	and.w	r3, r2, #16
 80083a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083a6:	2300      	movs	r3, #0
 80083a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80083b0:	460b      	mov	r3, r1
 80083b2:	4313      	orrs	r3, r2
 80083b4:	d01e      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083c2:	d10c      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	3328      	adds	r3, #40	@ 0x28
 80083ca:	2102      	movs	r1, #2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fe25 	bl	800901c <RCCEx_PLL3_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083de:	4b70      	ldr	r3, [pc, #448]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083ee:	4a6c      	ldr	r2, [pc, #432]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083f0:	430b      	orrs	r3, r1
 80083f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008404:	2300      	movs	r3, #0
 8008406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800840a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800840e:	460b      	mov	r3, r1
 8008410:	4313      	orrs	r3, r2
 8008412:	d03e      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800841c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008420:	d022      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008426:	d81b      	bhi.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d003      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008430:	d00b      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008432:	e015      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008438:	3308      	adds	r3, #8
 800843a:	2100      	movs	r1, #0
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fd3b 	bl	8008eb8 <RCCEx_PLL2_Config>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008448:	e00f      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800844a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800844e:	3328      	adds	r3, #40	@ 0x28
 8008450:	2102      	movs	r1, #2
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fde2 	bl	800901c <RCCEx_PLL3_Config>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800845e:	e004      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008466:	e000      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800846a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008472:	4b4b      	ldr	r3, [pc, #300]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008476:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800847a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800847e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008482:	4a47      	ldr	r2, [pc, #284]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008484:	430b      	orrs	r3, r1
 8008486:	6593      	str	r3, [r2, #88]	@ 0x58
 8008488:	e003      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800848e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800849e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084a0:	2300      	movs	r3, #0
 80084a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80084a8:	460b      	mov	r3, r1
 80084aa:	4313      	orrs	r3, r2
 80084ac:	d03b      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084ba:	d01f      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80084bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80084c0:	d818      	bhi.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80084c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084c6:	d003      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80084c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084cc:	d007      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80084ce:	e011      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084d0:	4b33      	ldr	r3, [pc, #204]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d4:	4a32      	ldr	r2, [pc, #200]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80084d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80084dc:	e00f      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e2:	3328      	adds	r3, #40	@ 0x28
 80084e4:	2101      	movs	r1, #1
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fd98 	bl	800901c <RCCEx_PLL3_Config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80084f2:	e004      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084fa:	e000      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80084fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008506:	4b26      	ldr	r3, [pc, #152]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008516:	4a22      	ldr	r2, [pc, #136]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008518:	430b      	orrs	r3, r1
 800851a:	6553      	str	r3, [r2, #84]	@ 0x54
 800851c:	e003      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008532:	673b      	str	r3, [r7, #112]	@ 0x70
 8008534:	2300      	movs	r3, #0
 8008536:	677b      	str	r3, [r7, #116]	@ 0x74
 8008538:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800853c:	460b      	mov	r3, r1
 800853e:	4313      	orrs	r3, r2
 8008540:	d034      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800854c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008550:	d007      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008552:	e011      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008554:	4b12      	ldr	r3, [pc, #72]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008558:	4a11      	ldr	r2, [pc, #68]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800855a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800855e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008560:	e00e      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	3308      	adds	r3, #8
 8008568:	2102      	movs	r1, #2
 800856a:	4618      	mov	r0, r3
 800856c:	f000 fca4 	bl	8008eb8 <RCCEx_PLL2_Config>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008576:	e003      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800857e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10d      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008588:	4b05      	ldr	r3, [pc, #20]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800858a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800858c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008596:	4a02      	ldr	r2, [pc, #8]	@ (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008598:	430b      	orrs	r3, r1
 800859a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800859c:	e006      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800859e:	bf00      	nop
 80085a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80085b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085ba:	2300      	movs	r3, #0
 80085bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80085c2:	460b      	mov	r3, r1
 80085c4:	4313      	orrs	r3, r2
 80085c6:	d00c      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085cc:	3328      	adds	r3, #40	@ 0x28
 80085ce:	2102      	movs	r1, #2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 fd23 	bl	800901c <RCCEx_PLL3_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80085e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80085ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80085f0:	2300      	movs	r3, #0
 80085f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80085f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80085f8:	460b      	mov	r3, r1
 80085fa:	4313      	orrs	r3, r2
 80085fc:	d038      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80085fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800860a:	d018      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800860c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008610:	d811      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008616:	d014      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800861c:	d80b      	bhi.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d011      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008626:	d106      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008628:	4bc3      	ldr	r3, [pc, #780]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	4ac2      	ldr	r2, [pc, #776]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800862e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008634:	e008      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800863c:	e004      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800863e:	bf00      	nop
 8008640:	e002      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008642:	bf00      	nop
 8008644:	e000      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008650:	4bb9      	ldr	r3, [pc, #740]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008654:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008660:	4ab5      	ldr	r2, [pc, #724]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008662:	430b      	orrs	r3, r1
 8008664:	6553      	str	r3, [r2, #84]	@ 0x54
 8008666:	e003      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800867c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800867e:	2300      	movs	r3, #0
 8008680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008682:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008686:	460b      	mov	r3, r1
 8008688:	4313      	orrs	r3, r2
 800868a:	d009      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800868c:	4baa      	ldr	r3, [pc, #680]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800868e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008690:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869a:	4aa7      	ldr	r2, [pc, #668]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800869c:	430b      	orrs	r3, r1
 800869e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80086a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80086ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80086ae:	2300      	movs	r3, #0
 80086b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80086b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80086b6:	460b      	mov	r3, r1
 80086b8:	4313      	orrs	r3, r2
 80086ba:	d00a      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80086bc:	4b9e      	ldr	r3, [pc, #632]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086cc:	4a9a      	ldr	r2, [pc, #616]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086ce:	430b      	orrs	r3, r1
 80086d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80086de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086e0:	2300      	movs	r3, #0
 80086e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80086e8:	460b      	mov	r3, r1
 80086ea:	4313      	orrs	r3, r2
 80086ec:	d009      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086ee:	4b92      	ldr	r3, [pc, #584]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086fc:	4a8e      	ldr	r2, [pc, #568]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80086fe:	430b      	orrs	r3, r1
 8008700:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800870e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008710:	2300      	movs	r3, #0
 8008712:	647b      	str	r3, [r7, #68]	@ 0x44
 8008714:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008718:	460b      	mov	r3, r1
 800871a:	4313      	orrs	r3, r2
 800871c:	d00e      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800871e:	4b86      	ldr	r3, [pc, #536]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	4a85      	ldr	r2, [pc, #532]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008724:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008728:	6113      	str	r3, [r2, #16]
 800872a:	4b83      	ldr	r3, [pc, #524]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800872c:	6919      	ldr	r1, [r3, #16]
 800872e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008732:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008736:	4a80      	ldr	r2, [pc, #512]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008738:	430b      	orrs	r3, r1
 800873a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008748:	63bb      	str	r3, [r7, #56]	@ 0x38
 800874a:	2300      	movs	r3, #0
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008752:	460b      	mov	r3, r1
 8008754:	4313      	orrs	r3, r2
 8008756:	d009      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008758:	4b77      	ldr	r3, [pc, #476]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800875a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800875c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008766:	4a74      	ldr	r2, [pc, #464]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008768:	430b      	orrs	r3, r1
 800876a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008778:	633b      	str	r3, [r7, #48]	@ 0x30
 800877a:	2300      	movs	r3, #0
 800877c:	637b      	str	r3, [r7, #52]	@ 0x34
 800877e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008782:	460b      	mov	r3, r1
 8008784:	4313      	orrs	r3, r2
 8008786:	d00a      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008788:	4b6b      	ldr	r3, [pc, #428]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800878a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800878c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008798:	4a67      	ldr	r2, [pc, #412]	@ (8008938 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800879a:	430b      	orrs	r3, r1
 800879c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800879e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a6:	2100      	movs	r1, #0
 80087a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80087b4:	460b      	mov	r3, r1
 80087b6:	4313      	orrs	r3, r2
 80087b8:	d011      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087be:	3308      	adds	r3, #8
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fb78 	bl	8008eb8 <RCCEx_PLL2_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80087ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80087de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	2100      	movs	r1, #0
 80087e8:	6239      	str	r1, [r7, #32]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80087f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80087f4:	460b      	mov	r3, r1
 80087f6:	4313      	orrs	r3, r2
 80087f8:	d011      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087fe:	3308      	adds	r3, #8
 8008800:	2101      	movs	r1, #1
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fb58 	bl	8008eb8 <RCCEx_PLL2_Config>
 8008808:	4603      	mov	r3, r0
 800880a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800880e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800881a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	2100      	movs	r1, #0
 8008828:	61b9      	str	r1, [r7, #24]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	61fb      	str	r3, [r7, #28]
 8008830:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008834:	460b      	mov	r3, r1
 8008836:	4313      	orrs	r3, r2
 8008838:	d011      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	3308      	adds	r3, #8
 8008840:	2102      	movs	r1, #2
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fb38 	bl	8008eb8 <RCCEx_PLL2_Config>
 8008848:	4603      	mov	r3, r0
 800884a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800884e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800885a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800885e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	2100      	movs	r1, #0
 8008868:	6139      	str	r1, [r7, #16]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008874:	460b      	mov	r3, r1
 8008876:	4313      	orrs	r3, r2
 8008878:	d011      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887e:	3328      	adds	r3, #40	@ 0x28
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f000 fbca 	bl	800901c <RCCEx_PLL3_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800888e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800889a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800889e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	2100      	movs	r1, #0
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80088b4:	460b      	mov	r3, r1
 80088b6:	4313      	orrs	r3, r2
 80088b8:	d011      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088be:	3328      	adds	r3, #40	@ 0x28
 80088c0:	2101      	movs	r1, #1
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fbaa 	bl	800901c <RCCEx_PLL3_Config>
 80088c8:	4603      	mov	r3, r0
 80088ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80088ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	2100      	movs	r1, #0
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	607b      	str	r3, [r7, #4]
 80088f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80088f4:	460b      	mov	r3, r1
 80088f6:	4313      	orrs	r3, r2
 80088f8:	d011      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fe:	3328      	adds	r3, #40	@ 0x28
 8008900:	2102      	movs	r1, #2
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fb8a 	bl	800901c <RCCEx_PLL3_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800890e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800891a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800891e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	e000      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
}
 800892c:	4618      	mov	r0, r3
 800892e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008932:	46bd      	mov	sp, r7
 8008934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008938:	58024400 	.word	0x58024400

0800893c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008940:	f7fe fd54 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8008944:	4602      	mov	r2, r0
 8008946:	4b06      	ldr	r3, [pc, #24]	@ (8008960 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	091b      	lsrs	r3, r3, #4
 800894c:	f003 0307 	and.w	r3, r3, #7
 8008950:	4904      	ldr	r1, [pc, #16]	@ (8008964 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008952:	5ccb      	ldrb	r3, [r1, r3]
 8008954:	f003 031f 	and.w	r3, r3, #31
 8008958:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800895c:	4618      	mov	r0, r3
 800895e:	bd80      	pop	{r7, pc}
 8008960:	58024400 	.word	0x58024400
 8008964:	0801dda8 	.word	0x0801dda8

08008968 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008968:	b480      	push	{r7}
 800896a:	b089      	sub	sp, #36	@ 0x24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008970:	4ba1      	ldr	r3, [pc, #644]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800897a:	4b9f      	ldr	r3, [pc, #636]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800897c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897e:	0b1b      	lsrs	r3, r3, #12
 8008980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008984:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008986:	4b9c      	ldr	r3, [pc, #624]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	091b      	lsrs	r3, r3, #4
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008992:	4b99      	ldr	r3, [pc, #612]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f000 8111 	beq.w	8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	f000 8083 	beq.w	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	f200 80a1 	bhi.w	8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d056      	beq.n	8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80089d2:	e099      	b.n	8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d4:	4b88      	ldr	r3, [pc, #544]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02d      	beq.n	8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089e0:	4b85      	ldr	r3, [pc, #532]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	08db      	lsrs	r3, r3, #3
 80089e6:	f003 0303 	and.w	r3, r3, #3
 80089ea:	4a84      	ldr	r2, [pc, #528]	@ (8008bfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	ee07 3a90 	vmov	s15, r3
 80089f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a3a:	e087      	b.n	8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b6a      	ldr	r3, [pc, #424]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7e:	e065      	b.n	8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b59      	ldr	r3, [pc, #356]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac2:	e043      	b.n	8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b48      	ldr	r3, [pc, #288]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b06:	e021      	b.n	8008b4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	ee07 3a90 	vmov	s15, r3
 8008b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	4b37      	ldr	r3, [pc, #220]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b22:	ee07 3a90 	vmov	s15, r3
 8008b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b50:	0a5b      	lsrs	r3, r3, #9
 8008b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b56:	ee07 3a90 	vmov	s15, r3
 8008b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b72:	ee17 2a90 	vmov	r2, s15
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7e:	0c1b      	lsrs	r3, r3, #16
 8008b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b84:	ee07 3a90 	vmov	s15, r3
 8008b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba0:	ee17 2a90 	vmov	r2, s15
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008ba8:	4b13      	ldr	r3, [pc, #76]	@ (8008bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bac:	0e1b      	lsrs	r3, r3, #24
 8008bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bce:	ee17 2a90 	vmov	r2, s15
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008bd6:	e008      	b.n	8008bea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	609a      	str	r2, [r3, #8]
}
 8008bea:	bf00      	nop
 8008bec:	3724      	adds	r7, #36	@ 0x24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	03d09000 	.word	0x03d09000
 8008c00:	46000000 	.word	0x46000000
 8008c04:	4c742400 	.word	0x4c742400
 8008c08:	4a742400 	.word	0x4a742400
 8008c0c:	4af42400 	.word	0x4af42400

08008c10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b089      	sub	sp, #36	@ 0x24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c18:	4ba1      	ldr	r3, [pc, #644]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	f003 0303 	and.w	r3, r3, #3
 8008c20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008c22:	4b9f      	ldr	r3, [pc, #636]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c26:	0d1b      	lsrs	r3, r3, #20
 8008c28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008c2e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c32:	0a1b      	lsrs	r3, r3, #8
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008c3a:	4b99      	ldr	r3, [pc, #612]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3e:	08db      	lsrs	r3, r3, #3
 8008c40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	fb02 f303 	mul.w	r3, r2, r3
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8111 	beq.w	8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	f000 8083 	beq.w	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	f200 80a1 	bhi.w	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d056      	beq.n	8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c7a:	e099      	b.n	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c7c:	4b88      	ldr	r3, [pc, #544]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0320 	and.w	r3, r3, #32
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d02d      	beq.n	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c88:	4b85      	ldr	r3, [pc, #532]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	08db      	lsrs	r3, r3, #3
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	4a84      	ldr	r2, [pc, #528]	@ (8008ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c94:	fa22 f303 	lsr.w	r3, r2, r3
 8008c98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	ee07 3a90 	vmov	s15, r3
 8008ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ce2:	e087      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008eac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d26:	e065      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3a:	4b59      	ldr	r3, [pc, #356]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d6a:	e043      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7e:	4b48      	ldr	r3, [pc, #288]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dae:	e021      	b.n	8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc2:	4b37      	ldr	r3, [pc, #220]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dca:	ee07 3a90 	vmov	s15, r3
 8008dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008df2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008df4:	4b2a      	ldr	r3, [pc, #168]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df8:	0a5b      	lsrs	r3, r3, #9
 8008dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e1a:	ee17 2a90 	vmov	r2, s15
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008e22:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e26:	0c1b      	lsrs	r3, r3, #16
 8008e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e2c:	ee07 3a90 	vmov	s15, r3
 8008e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e48:	ee17 2a90 	vmov	r2, s15
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008e50:	4b13      	ldr	r3, [pc, #76]	@ (8008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e54:	0e1b      	lsrs	r3, r3, #24
 8008e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e76:	ee17 2a90 	vmov	r2, s15
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e7e:	e008      	b.n	8008e92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	609a      	str	r2, [r3, #8]
}
 8008e92:	bf00      	nop
 8008e94:	3724      	adds	r7, #36	@ 0x24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	58024400 	.word	0x58024400
 8008ea4:	03d09000 	.word	0x03d09000
 8008ea8:	46000000 	.word	0x46000000
 8008eac:	4c742400 	.word	0x4c742400
 8008eb0:	4a742400 	.word	0x4a742400
 8008eb4:	4af42400 	.word	0x4af42400

08008eb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ec6:	4b53      	ldr	r3, [pc, #332]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d101      	bne.n	8008ed6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e099      	b.n	800900a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a4e      	ldr	r2, [pc, #312]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008edc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ee2:	f7f9 fadf 	bl	80024a4 <HAL_GetTick>
 8008ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ee8:	e008      	b.n	8008efc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008eea:	f7f9 fadb 	bl	80024a4 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d901      	bls.n	8008efc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e086      	b.n	800900a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008efc:	4b45      	ldr	r3, [pc, #276]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1f0      	bne.n	8008eea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f08:	4b42      	ldr	r3, [pc, #264]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	031b      	lsls	r3, r3, #12
 8008f16:	493f      	ldr	r1, [pc, #252]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	3b01      	subs	r3, #1
 8008f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	025b      	lsls	r3, r3, #9
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	431a      	orrs	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	041b      	lsls	r3, r3, #16
 8008f3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	061b      	lsls	r3, r3, #24
 8008f48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008f4c:	4931      	ldr	r1, [pc, #196]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f52:	4b30      	ldr	r3, [pc, #192]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	492d      	ldr	r1, [pc, #180]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f64:	4b2b      	ldr	r3, [pc, #172]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f68:	f023 0220 	bic.w	r2, r3, #32
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	699b      	ldr	r3, [r3, #24]
 8008f70:	4928      	ldr	r1, [pc, #160]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f76:	4b27      	ldr	r3, [pc, #156]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7a:	4a26      	ldr	r2, [pc, #152]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	f023 0310 	bic.w	r3, r3, #16
 8008f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f82:	4b24      	ldr	r3, [pc, #144]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f86:	4b24      	ldr	r3, [pc, #144]	@ (8009018 <RCCEx_PLL2_Config+0x160>)
 8008f88:	4013      	ands	r3, r2
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	69d2      	ldr	r2, [r2, #28]
 8008f8e:	00d2      	lsls	r2, r2, #3
 8008f90:	4920      	ldr	r1, [pc, #128]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f96:	4b1f      	ldr	r3, [pc, #124]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008f9c:	f043 0310 	orr.w	r3, r3, #16
 8008fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d106      	bne.n	8008fb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fac:	4a19      	ldr	r2, [pc, #100]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fb4:	e00f      	b.n	8008fd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d106      	bne.n	8008fca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fbc:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc0:	4a14      	ldr	r2, [pc, #80]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008fc8:	e005      	b.n	8008fd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fca:	4b12      	ldr	r3, [pc, #72]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fce:	4a11      	ldr	r2, [pc, #68]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a0e      	ldr	r2, [pc, #56]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008fdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fe2:	f7f9 fa5f 	bl	80024a4 <HAL_GetTick>
 8008fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fe8:	e008      	b.n	8008ffc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fea:	f7f9 fa5b 	bl	80024a4 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d901      	bls.n	8008ffc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e006      	b.n	800900a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <RCCEx_PLL2_Config+0x15c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0f0      	beq.n	8008fea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	58024400 	.word	0x58024400
 8009018:	ffff0007 	.word	0xffff0007

0800901c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800902a:	4b53      	ldr	r3, [pc, #332]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 800902c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902e:	f003 0303 	and.w	r3, r3, #3
 8009032:	2b03      	cmp	r3, #3
 8009034:	d101      	bne.n	800903a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e099      	b.n	800916e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800903a:	4b4f      	ldr	r3, [pc, #316]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a4e      	ldr	r2, [pc, #312]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009046:	f7f9 fa2d 	bl	80024a4 <HAL_GetTick>
 800904a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800904c:	e008      	b.n	8009060 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800904e:	f7f9 fa29 	bl	80024a4 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e086      	b.n	800916e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009060:	4b45      	ldr	r3, [pc, #276]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f0      	bne.n	800904e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800906c:	4b42      	ldr	r3, [pc, #264]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 800906e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009070:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	051b      	lsls	r3, r3, #20
 800907a:	493f      	ldr	r1, [pc, #252]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	3b01      	subs	r3, #1
 8009086:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	3b01      	subs	r3, #1
 8009090:	025b      	lsls	r3, r3, #9
 8009092:	b29b      	uxth	r3, r3
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	3b01      	subs	r3, #1
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	061b      	lsls	r3, r3, #24
 80090ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80090b0:	4931      	ldr	r1, [pc, #196]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80090b6:	4b30      	ldr	r3, [pc, #192]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	492d      	ldr	r1, [pc, #180]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090c8:	4b2b      	ldr	r3, [pc, #172]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	4928      	ldr	r1, [pc, #160]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090da:	4b27      	ldr	r3, [pc, #156]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	4a26      	ldr	r2, [pc, #152]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090e6:	4b24      	ldr	r3, [pc, #144]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ea:	4b24      	ldr	r3, [pc, #144]	@ (800917c <RCCEx_PLL3_Config+0x160>)
 80090ec:	4013      	ands	r3, r2
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	69d2      	ldr	r2, [r2, #28]
 80090f2:	00d2      	lsls	r2, r2, #3
 80090f4:	4920      	ldr	r1, [pc, #128]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 80090fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009104:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d106      	bne.n	800911a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800910c:	4b1a      	ldr	r3, [pc, #104]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	4a19      	ldr	r2, [pc, #100]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009112:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009116:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009118:	e00f      	b.n	800913a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d106      	bne.n	800912e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009120:	4b15      	ldr	r3, [pc, #84]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009124:	4a14      	ldr	r2, [pc, #80]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009126:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800912a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800912c:	e005      	b.n	800913a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800912e:	4b12      	ldr	r3, [pc, #72]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009132:	4a11      	ldr	r2, [pc, #68]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009134:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009138:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800913a:	4b0f      	ldr	r3, [pc, #60]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a0e      	ldr	r2, [pc, #56]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009146:	f7f9 f9ad 	bl	80024a4 <HAL_GetTick>
 800914a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800914c:	e008      	b.n	8009160 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800914e:	f7f9 f9a9 	bl	80024a4 <HAL_GetTick>
 8009152:	4602      	mov	r2, r0
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	2b02      	cmp	r3, #2
 800915a:	d901      	bls.n	8009160 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e006      	b.n	800916e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009160:	4b05      	ldr	r3, [pc, #20]	@ (8009178 <RCCEx_PLL3_Config+0x15c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0f0      	beq.n	800914e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	58024400 	.word	0x58024400
 800917c:	ffff0007 	.word	0xffff0007

08009180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e049      	b.n	8009226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f841 	bl	800922e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f000 f9e8 	bl	8009594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b01      	cmp	r3, #1
 8009256:	d001      	beq.n	800925c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e054      	b.n	8009306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a26      	ldr	r2, [pc, #152]	@ (8009314 <HAL_TIM_Base_Start_IT+0xd0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d022      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009286:	d01d      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a22      	ldr	r2, [pc, #136]	@ (8009318 <HAL_TIM_Base_Start_IT+0xd4>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d018      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a21      	ldr	r2, [pc, #132]	@ (800931c <HAL_TIM_Base_Start_IT+0xd8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d013      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009320 <HAL_TIM_Base_Start_IT+0xdc>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d00e      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009324 <HAL_TIM_Base_Start_IT+0xe0>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d009      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009328 <HAL_TIM_Base_Start_IT+0xe4>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d004      	beq.n	80092c4 <HAL_TIM_Base_Start_IT+0x80>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1b      	ldr	r2, [pc, #108]	@ (800932c <HAL_TIM_Base_Start_IT+0xe8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d115      	bne.n	80092f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	4b19      	ldr	r3, [pc, #100]	@ (8009330 <HAL_TIM_Base_Start_IT+0xec>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b06      	cmp	r3, #6
 80092d4:	d015      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0xbe>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092dc:	d011      	beq.n	8009302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ee:	e008      	b.n	8009302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	e000      	b.n	8009304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	40010000 	.word	0x40010000
 8009318:	40000400 	.word	0x40000400
 800931c:	40000800 	.word	0x40000800
 8009320:	40000c00 	.word	0x40000c00
 8009324:	40010400 	.word	0x40010400
 8009328:	40001800 	.word	0x40001800
 800932c:	40014000 	.word	0x40014000
 8009330:	00010007 	.word	0x00010007

08009334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d020      	beq.n	8009398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01b      	beq.n	8009398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f06f 0202 	mvn.w	r2, #2
 8009368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	f003 0303 	and.w	r3, r3, #3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f8e9 	bl	8009556 <HAL_TIM_IC_CaptureCallback>
 8009384:	e005      	b.n	8009392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f8db 	bl	8009542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8ec 	bl	800956a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d020      	beq.n	80093e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d01b      	beq.n	80093e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f06f 0204 	mvn.w	r2, #4
 80093b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8c3 	bl	8009556 <HAL_TIM_IC_CaptureCallback>
 80093d0:	e005      	b.n	80093de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8b5 	bl	8009542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f8c6 	bl	800956a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d020      	beq.n	8009430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f003 0308 	and.w	r3, r3, #8
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01b      	beq.n	8009430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f06f 0208 	mvn.w	r2, #8
 8009400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2204      	movs	r2, #4
 8009406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f89d 	bl	8009556 <HAL_TIM_IC_CaptureCallback>
 800941c:	e005      	b.n	800942a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f88f 	bl	8009542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f8a0 	bl	800956a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 0310 	and.w	r3, r3, #16
 8009436:	2b00      	cmp	r3, #0
 8009438:	d020      	beq.n	800947c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f003 0310 	and.w	r3, r3, #16
 8009440:	2b00      	cmp	r3, #0
 8009442:	d01b      	beq.n	800947c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0210 	mvn.w	r2, #16
 800944c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2208      	movs	r2, #8
 8009452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f877 	bl	8009556 <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f869 	bl	8009542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f87a 	bl	800956a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00c      	beq.n	80094a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f06f 0201 	mvn.w	r2, #1
 8009498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7f8 fa90 	bl	80019c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d104      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00c      	beq.n	80094ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d007      	beq.n	80094ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f913 	bl	80096f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00c      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d007      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80094ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f90b 	bl	8009708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d007      	beq.n	8009516 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800950e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f834 	bl	800957e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00c      	beq.n	800953a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f06f 0220 	mvn.w	r2, #32
 8009532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f8d3 	bl	80096e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800953a:	bf00      	nop
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a46      	ldr	r2, [pc, #280]	@ (80096c0 <TIM_Base_SetConfig+0x12c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d013      	beq.n	80095d4 <TIM_Base_SetConfig+0x40>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b2:	d00f      	beq.n	80095d4 <TIM_Base_SetConfig+0x40>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a43      	ldr	r2, [pc, #268]	@ (80096c4 <TIM_Base_SetConfig+0x130>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00b      	beq.n	80095d4 <TIM_Base_SetConfig+0x40>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a42      	ldr	r2, [pc, #264]	@ (80096c8 <TIM_Base_SetConfig+0x134>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d007      	beq.n	80095d4 <TIM_Base_SetConfig+0x40>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a41      	ldr	r2, [pc, #260]	@ (80096cc <TIM_Base_SetConfig+0x138>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d003      	beq.n	80095d4 <TIM_Base_SetConfig+0x40>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a40      	ldr	r2, [pc, #256]	@ (80096d0 <TIM_Base_SetConfig+0x13c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d108      	bne.n	80095e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a35      	ldr	r2, [pc, #212]	@ (80096c0 <TIM_Base_SetConfig+0x12c>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d01f      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095f4:	d01b      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a32      	ldr	r2, [pc, #200]	@ (80096c4 <TIM_Base_SetConfig+0x130>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d017      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a31      	ldr	r2, [pc, #196]	@ (80096c8 <TIM_Base_SetConfig+0x134>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d013      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a30      	ldr	r2, [pc, #192]	@ (80096cc <TIM_Base_SetConfig+0x138>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d00f      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a2f      	ldr	r2, [pc, #188]	@ (80096d0 <TIM_Base_SetConfig+0x13c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00b      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a2e      	ldr	r2, [pc, #184]	@ (80096d4 <TIM_Base_SetConfig+0x140>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d007      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a2d      	ldr	r2, [pc, #180]	@ (80096d8 <TIM_Base_SetConfig+0x144>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d003      	beq.n	800962e <TIM_Base_SetConfig+0x9a>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a2c      	ldr	r2, [pc, #176]	@ (80096dc <TIM_Base_SetConfig+0x148>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d108      	bne.n	8009640 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	689a      	ldr	r2, [r3, #8]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a16      	ldr	r2, [pc, #88]	@ (80096c0 <TIM_Base_SetConfig+0x12c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d00f      	beq.n	800968c <TIM_Base_SetConfig+0xf8>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a18      	ldr	r2, [pc, #96]	@ (80096d0 <TIM_Base_SetConfig+0x13c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00b      	beq.n	800968c <TIM_Base_SetConfig+0xf8>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a17      	ldr	r2, [pc, #92]	@ (80096d4 <TIM_Base_SetConfig+0x140>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d007      	beq.n	800968c <TIM_Base_SetConfig+0xf8>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a16      	ldr	r2, [pc, #88]	@ (80096d8 <TIM_Base_SetConfig+0x144>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d003      	beq.n	800968c <TIM_Base_SetConfig+0xf8>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a15      	ldr	r2, [pc, #84]	@ (80096dc <TIM_Base_SetConfig+0x148>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d103      	bne.n	8009694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d105      	bne.n	80096b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	f023 0201 	bic.w	r2, r3, #1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	611a      	str	r2, [r3, #16]
  }
}
 80096b2:	bf00      	nop
 80096b4:	3714      	adds	r7, #20
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40010000 	.word	0x40010000
 80096c4:	40000400 	.word	0x40000400
 80096c8:	40000800 	.word	0x40000800
 80096cc:	40000c00 	.word	0x40000c00
 80096d0:	40010400 	.word	0x40010400
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800

080096e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e042      	b.n	80097b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7f8 fc9f 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2224      	movs	r2, #36	@ 0x24
 800974a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 faea 	bl	800ad40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fd7f 	bl	800a270 <UART_SetConfig>
 8009772:	4603      	mov	r3, r0
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e01b      	b.n	80097b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800978a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689a      	ldr	r2, [r3, #8]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800979a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 fb69 	bl	800ae84 <UART_CheckIdleState>
 80097b2:	4603      	mov	r3, r0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	@ 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4613      	mov	r3, r2
 80097c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	d167      	bne.n	80098a4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_UART_Transmit_DMA+0x24>
 80097da:	88fb      	ldrh	r3, [r7, #6]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e060      	b.n	80098a6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2221      	movs	r2, #33	@ 0x21
 8009806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d028      	beq.n	8009864 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009816:	4a26      	ldr	r2, [pc, #152]	@ (80098b0 <HAL_UART_Transmit_DMA+0xf4>)
 8009818:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800981e:	4a25      	ldr	r2, [pc, #148]	@ (80098b4 <HAL_UART_Transmit_DMA+0xf8>)
 8009820:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009826:	4a24      	ldr	r2, [pc, #144]	@ (80098b8 <HAL_UART_Transmit_DMA+0xfc>)
 8009828:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800982e:	2200      	movs	r2, #0
 8009830:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800983a:	4619      	mov	r1, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3328      	adds	r3, #40	@ 0x28
 8009842:	461a      	mov	r2, r3
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	f7f9 fab9 	bl	8002dbc <HAL_DMA_Start_IT>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d009      	beq.n	8009864 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2210      	movs	r2, #16
 8009854:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e020      	b.n	80098a6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2240      	movs	r2, #64	@ 0x40
 800986a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	3308      	adds	r3, #8
 8009872:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	613b      	str	r3, [r7, #16]
   return(result);
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009882:	627b      	str	r3, [r7, #36]	@ 0x24
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3308      	adds	r3, #8
 800988a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800988c:	623a      	str	r2, [r7, #32]
 800988e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	69f9      	ldr	r1, [r7, #28]
 8009892:	6a3a      	ldr	r2, [r7, #32]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	61bb      	str	r3, [r7, #24]
   return(result);
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e5      	bne.n	800986c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	e000      	b.n	80098a6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80098a4:	2302      	movs	r3, #2
  }
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3728      	adds	r7, #40	@ 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	0800b351 	.word	0x0800b351
 80098b4:	0800b3e7 	.word	0x0800b3e7
 80098b8:	0800b569 	.word	0x0800b569

080098bc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	@ 0x28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	4613      	mov	r3, r2
 80098c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098d0:	2b20      	cmp	r3, #32
 80098d2:	d137      	bne.n	8009944 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <HAL_UART_Receive_DMA+0x24>
 80098da:	88fb      	ldrh	r3, [r7, #6]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e030      	b.n	8009946 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a18      	ldr	r2, [pc, #96]	@ (8009950 <HAL_UART_Receive_DMA+0x94>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d01f      	beq.n	8009934 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d018      	beq.n	8009934 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	613b      	str	r3, [r7, #16]
   return(result);
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009916:	627b      	str	r3, [r7, #36]	@ 0x24
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009920:	623b      	str	r3, [r7, #32]
 8009922:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	69f9      	ldr	r1, [r7, #28]
 8009926:	6a3a      	ldr	r2, [r7, #32]
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	61bb      	str	r3, [r7, #24]
   return(result);
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009934:	88fb      	ldrh	r3, [r7, #6]
 8009936:	461a      	mov	r2, r3
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f001 fbba 	bl	800b0b4 <UART_Start_Receive_DMA>
 8009940:	4603      	mov	r3, r0
 8009942:	e000      	b.n	8009946 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009944:	2302      	movs	r3, #2
  }
}
 8009946:	4618      	mov	r0, r3
 8009948:	3728      	adds	r7, #40	@ 0x28
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	58000c00 	.word	0x58000c00

08009954 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b090      	sub	sp, #64	@ 0x40
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800996a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689b      	ldr	r3, [r3, #8]
 8009972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009976:	2b80      	cmp	r3, #128	@ 0x80
 8009978:	d139      	bne.n	80099ee <HAL_UART_DMAStop+0x9a>
 800997a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800997c:	2b21      	cmp	r3, #33	@ 0x21
 800997e:	d136      	bne.n	80099ee <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009996:	637b      	str	r3, [r7, #52]	@ 0x34
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e5      	bne.n	8009980 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d015      	beq.n	80099e8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7f9 fc65 	bl	8003290 <HAL_DMA_Abort>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00d      	beq.n	80099e8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fb f8eb 	bl	8004bac <HAL_DMA_GetError>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b20      	cmp	r3, #32
 80099da:	d105      	bne.n	80099e8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2210      	movs	r2, #16
 80099e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e047      	b.n	8009a78 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f001 fc09 	bl	800b200 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f8:	2b40      	cmp	r3, #64	@ 0x40
 80099fa:	d13c      	bne.n	8009a76 <HAL_UART_DMAStop+0x122>
 80099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fe:	2b22      	cmp	r3, #34	@ 0x22
 8009a00:	d139      	bne.n	8009a76 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a22:	61ba      	str	r2, [r7, #24]
 8009a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	6979      	ldr	r1, [r7, #20]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e5      	bne.n	8009a02 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d017      	beq.n	8009a70 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7f9 fc22 	bl	8003290 <HAL_DMA_Abort>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00e      	beq.n	8009a70 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fb f8a7 	bl	8004bac <HAL_DMA_GetError>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b20      	cmp	r3, #32
 8009a62:	d105      	bne.n	8009a70 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2210      	movs	r2, #16
 8009a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e003      	b.n	8009a78 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fc07 	bl	800b284 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3740      	adds	r7, #64	@ 0x40
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b0ba      	sub	sp, #232	@ 0xe8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009aaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009aae:	4013      	ands	r3, r2
 8009ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d11b      	bne.n	8009af4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d015      	beq.n	8009af4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d105      	bne.n	8009ae0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8377 	beq.w	800a1d8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	4798      	blx	r3
      }
      return;
 8009af2:	e371      	b.n	800a1d8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 8123 	beq.w	8009d44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009afe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b02:	4b8d      	ldr	r3, [pc, #564]	@ (8009d38 <HAL_UART_IRQHandler+0x2b8>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d3c <HAL_UART_IRQHandler+0x2bc>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 8116 	beq.w	8009d44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d011      	beq.n	8009b48 <HAL_UART_IRQHandler+0xc8>
 8009b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2201      	movs	r2, #1
 8009b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3e:	f043 0201 	orr.w	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d011      	beq.n	8009b78 <HAL_UART_IRQHandler+0xf8>
 8009b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2202      	movs	r2, #2
 8009b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b6e:	f043 0204 	orr.w	r2, r3, #4
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d011      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x128>
 8009b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2204      	movs	r2, #4
 8009b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9e:	f043 0202 	orr.w	r2, r3, #2
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d017      	beq.n	8009be4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb8:	f003 0320 	and.w	r3, r3, #32
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d105      	bne.n	8009bcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8009d38 <HAL_UART_IRQHandler+0x2b8>)
 8009bc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f043 0208 	orr.w	r2, r3, #8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d012      	beq.n	8009c16 <HAL_UART_IRQHandler+0x196>
 8009bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00c      	beq.n	8009c16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0c:	f043 0220 	orr.w	r2, r3, #32
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 82dd 	beq.w	800a1dc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c26:	f003 0320 	and.w	r3, r3, #32
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d013      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6a:	2b40      	cmp	r3, #64	@ 0x40
 8009c6c:	d005      	beq.n	8009c7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d054      	beq.n	8009d24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fb02 	bl	800b284 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8a:	2b40      	cmp	r3, #64	@ 0x40
 8009c8c:	d146      	bne.n	8009d1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1d9      	bne.n	8009c8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d017      	beq.n	8009d14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cea:	4a15      	ldr	r2, [pc, #84]	@ (8009d40 <HAL_UART_IRQHandler+0x2c0>)
 8009cec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7f9 fde9 	bl	80038cc <HAL_DMA_Abort_IT>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d019      	beq.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d0e:	4610      	mov	r0, r2
 8009d10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d12:	e00f      	b.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa95 	bl	800a244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1a:	e00b      	b.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa91 	bl	800a244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d22:	e007      	b.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fa8d 	bl	800a244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d32:	e253      	b.n	800a1dc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d34:	bf00      	nop
    return;
 8009d36:	e251      	b.n	800a1dc <HAL_UART_IRQHandler+0x75c>
 8009d38:	10000001 	.word	0x10000001
 8009d3c:	04000120 	.word	0x04000120
 8009d40:	0800b5e9 	.word	0x0800b5e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	f040 81e7 	bne.w	800a11c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 81e0 	beq.w	800a11c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 81d9 	beq.w	800a11c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2210      	movs	r2, #16
 8009d70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7c:	2b40      	cmp	r3, #64	@ 0x40
 8009d7e:	f040 8151 	bne.w	800a024 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a96      	ldr	r2, [pc, #600]	@ (8009fe4 <HAL_UART_IRQHandler+0x564>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d068      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a93      	ldr	r2, [pc, #588]	@ (8009fe8 <HAL_UART_IRQHandler+0x568>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d061      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a91      	ldr	r2, [pc, #580]	@ (8009fec <HAL_UART_IRQHandler+0x56c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d05a      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a8e      	ldr	r2, [pc, #568]	@ (8009ff0 <HAL_UART_IRQHandler+0x570>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d053      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a8c      	ldr	r2, [pc, #560]	@ (8009ff4 <HAL_UART_IRQHandler+0x574>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d04c      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a89      	ldr	r2, [pc, #548]	@ (8009ff8 <HAL_UART_IRQHandler+0x578>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d045      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a87      	ldr	r2, [pc, #540]	@ (8009ffc <HAL_UART_IRQHandler+0x57c>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d03e      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a84      	ldr	r2, [pc, #528]	@ (800a000 <HAL_UART_IRQHandler+0x580>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d037      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a82      	ldr	r2, [pc, #520]	@ (800a004 <HAL_UART_IRQHandler+0x584>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d030      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a7f      	ldr	r2, [pc, #508]	@ (800a008 <HAL_UART_IRQHandler+0x588>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d029      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a7d      	ldr	r2, [pc, #500]	@ (800a00c <HAL_UART_IRQHandler+0x58c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d022      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a7a      	ldr	r2, [pc, #488]	@ (800a010 <HAL_UART_IRQHandler+0x590>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d01b      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a78      	ldr	r2, [pc, #480]	@ (800a014 <HAL_UART_IRQHandler+0x594>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d014      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a75      	ldr	r2, [pc, #468]	@ (800a018 <HAL_UART_IRQHandler+0x598>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d00d      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a73      	ldr	r2, [pc, #460]	@ (800a01c <HAL_UART_IRQHandler+0x59c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d006      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a70      	ldr	r2, [pc, #448]	@ (800a020 <HAL_UART_IRQHandler+0x5a0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d106      	bne.n	8009e70 <HAL_UART_IRQHandler+0x3f0>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	e005      	b.n	8009e7c <HAL_UART_IRQHandler+0x3fc>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 81ab 	beq.w	800a1e0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e94:	429a      	cmp	r2, r3
 8009e96:	f080 81a3 	bcs.w	800a1e0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb0:	f000 8087 	beq.w	8009fc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ee2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1da      	bne.n	8009eb4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3308      	adds	r3, #8
 8009f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f08:	e853 3f00 	ldrex	r3, [r3]
 8009f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f10:	f023 0301 	bic.w	r3, r3, #1
 8009f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e1      	bne.n	8009efe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e3      	bne.n	8009f3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2220      	movs	r2, #32
 8009f76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f90:	f023 0310 	bic.w	r3, r3, #16
 8009f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e4      	bne.n	8009f80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f9 f967 	bl	8003290 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f93b 	bl	800a258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fe2:	e0fd      	b.n	800a1e0 <HAL_UART_IRQHandler+0x760>
 8009fe4:	40020010 	.word	0x40020010
 8009fe8:	40020028 	.word	0x40020028
 8009fec:	40020040 	.word	0x40020040
 8009ff0:	40020058 	.word	0x40020058
 8009ff4:	40020070 	.word	0x40020070
 8009ff8:	40020088 	.word	0x40020088
 8009ffc:	400200a0 	.word	0x400200a0
 800a000:	400200b8 	.word	0x400200b8
 800a004:	40020410 	.word	0x40020410
 800a008:	40020428 	.word	0x40020428
 800a00c:	40020440 	.word	0x40020440
 800a010:	40020458 	.word	0x40020458
 800a014:	40020470 	.word	0x40020470
 800a018:	40020488 	.word	0x40020488
 800a01c:	400204a0 	.word	0x400204a0
 800a020:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a030:	b29b      	uxth	r3, r3
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 80cf 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 80ca 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a072:	647b      	str	r3, [r7, #68]	@ 0x44
 800a074:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a076:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a07a:	e841 2300 	strex	r3, r2, [r1]
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e4      	bne.n	800a050 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3308      	adds	r3, #8
 800a08c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	623b      	str	r3, [r7, #32]
   return(result);
 800a096:	6a3a      	ldr	r2, [r7, #32]
 800a098:	4b55      	ldr	r3, [pc, #340]	@ (800a1f0 <HAL_UART_IRQHandler+0x770>)
 800a09a:	4013      	ands	r3, r2
 800a09c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a0aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e3      	bne.n	800a086 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0310 	bic.w	r3, r3, #16
 800a0e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0f4:	61fb      	str	r3, [r7, #28]
 800a0f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	69b9      	ldr	r1, [r7, #24]
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	617b      	str	r3, [r7, #20]
   return(result);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e4      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a10e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f89f 	bl	800a258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a11a:	e063      	b.n	800a1e4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00e      	beq.n	800a146 <HAL_UART_IRQHandler+0x6c6>
 800a128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a12c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d008      	beq.n	800a146 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a13c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 fa93 	bl	800b66a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a144:	e051      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d014      	beq.n	800a17c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a15e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d03a      	beq.n	800a1e8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
    }
    return;
 800a17a:	e035      	b.n	800a1e8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <HAL_UART_IRQHandler+0x71c>
 800a188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 fa3d 	bl	800b614 <UART_EndTransmit_IT>
    return;
 800a19a:	e026      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d009      	beq.n	800a1bc <HAL_UART_IRQHandler+0x73c>
 800a1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 fa6c 	bl	800b692 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1ba:	e016      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d010      	beq.n	800a1ea <HAL_UART_IRQHandler+0x76a>
 800a1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da0c      	bge.n	800a1ea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 fa54 	bl	800b67e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1d6:	e008      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
      return;
 800a1d8:	bf00      	nop
 800a1da:	e006      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
    return;
 800a1dc:	bf00      	nop
 800a1de:	e004      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
      return;
 800a1e0:	bf00      	nop
 800a1e2:	e002      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
      return;
 800a1e4:	bf00      	nop
 800a1e6:	e000      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
    return;
 800a1e8:	bf00      	nop
  }
}
 800a1ea:	37e8      	adds	r7, #232	@ 0xe8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	effffffe 	.word	0xeffffffe

0800a1f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a274:	b092      	sub	sp, #72	@ 0x48
 800a276:	af00      	add	r7, sp, #0
 800a278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	431a      	orrs	r2, r3
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	431a      	orrs	r2, r3
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	4313      	orrs	r3, r2
 800a296:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4bbe      	ldr	r3, [pc, #760]	@ (800a598 <UART_SetConfig+0x328>)
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	6812      	ldr	r2, [r2, #0]
 800a2a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685b      	ldr	r3, [r3, #4]
 800a2b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	68da      	ldr	r2, [r3, #12]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	430a      	orrs	r2, r1
 800a2c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4ab3      	ldr	r2, [pc, #716]	@ (800a59c <UART_SetConfig+0x32c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	4baf      	ldr	r3, [pc, #700]	@ (800a5a0 <UART_SetConfig+0x330>)
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	6812      	ldr	r2, [r2, #0]
 800a2ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2ec:	430b      	orrs	r3, r1
 800a2ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f6:	f023 010f 	bic.w	r1, r3, #15
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4aa6      	ldr	r2, [pc, #664]	@ (800a5a4 <UART_SetConfig+0x334>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d177      	bne.n	800a400 <UART_SetConfig+0x190>
 800a310:	4ba5      	ldr	r3, [pc, #660]	@ (800a5a8 <UART_SetConfig+0x338>)
 800a312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a318:	2b28      	cmp	r3, #40	@ 0x28
 800a31a:	d86d      	bhi.n	800a3f8 <UART_SetConfig+0x188>
 800a31c:	a201      	add	r2, pc, #4	@ (adr r2, 800a324 <UART_SetConfig+0xb4>)
 800a31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a322:	bf00      	nop
 800a324:	0800a3c9 	.word	0x0800a3c9
 800a328:	0800a3f9 	.word	0x0800a3f9
 800a32c:	0800a3f9 	.word	0x0800a3f9
 800a330:	0800a3f9 	.word	0x0800a3f9
 800a334:	0800a3f9 	.word	0x0800a3f9
 800a338:	0800a3f9 	.word	0x0800a3f9
 800a33c:	0800a3f9 	.word	0x0800a3f9
 800a340:	0800a3f9 	.word	0x0800a3f9
 800a344:	0800a3d1 	.word	0x0800a3d1
 800a348:	0800a3f9 	.word	0x0800a3f9
 800a34c:	0800a3f9 	.word	0x0800a3f9
 800a350:	0800a3f9 	.word	0x0800a3f9
 800a354:	0800a3f9 	.word	0x0800a3f9
 800a358:	0800a3f9 	.word	0x0800a3f9
 800a35c:	0800a3f9 	.word	0x0800a3f9
 800a360:	0800a3f9 	.word	0x0800a3f9
 800a364:	0800a3d9 	.word	0x0800a3d9
 800a368:	0800a3f9 	.word	0x0800a3f9
 800a36c:	0800a3f9 	.word	0x0800a3f9
 800a370:	0800a3f9 	.word	0x0800a3f9
 800a374:	0800a3f9 	.word	0x0800a3f9
 800a378:	0800a3f9 	.word	0x0800a3f9
 800a37c:	0800a3f9 	.word	0x0800a3f9
 800a380:	0800a3f9 	.word	0x0800a3f9
 800a384:	0800a3e1 	.word	0x0800a3e1
 800a388:	0800a3f9 	.word	0x0800a3f9
 800a38c:	0800a3f9 	.word	0x0800a3f9
 800a390:	0800a3f9 	.word	0x0800a3f9
 800a394:	0800a3f9 	.word	0x0800a3f9
 800a398:	0800a3f9 	.word	0x0800a3f9
 800a39c:	0800a3f9 	.word	0x0800a3f9
 800a3a0:	0800a3f9 	.word	0x0800a3f9
 800a3a4:	0800a3e9 	.word	0x0800a3e9
 800a3a8:	0800a3f9 	.word	0x0800a3f9
 800a3ac:	0800a3f9 	.word	0x0800a3f9
 800a3b0:	0800a3f9 	.word	0x0800a3f9
 800a3b4:	0800a3f9 	.word	0x0800a3f9
 800a3b8:	0800a3f9 	.word	0x0800a3f9
 800a3bc:	0800a3f9 	.word	0x0800a3f9
 800a3c0:	0800a3f9 	.word	0x0800a3f9
 800a3c4:	0800a3f1 	.word	0x0800a3f1
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e222      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e21e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a3d8:	2308      	movs	r3, #8
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e21a      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a3e0:	2310      	movs	r3, #16
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e216      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a3e8:	2320      	movs	r3, #32
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e212      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a3f0:	2340      	movs	r3, #64	@ 0x40
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3f6:	e20e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a3f8:	2380      	movs	r3, #128	@ 0x80
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e20a      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a69      	ldr	r2, [pc, #420]	@ (800a5ac <UART_SetConfig+0x33c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d130      	bne.n	800a46c <UART_SetConfig+0x1fc>
 800a40a:	4b67      	ldr	r3, [pc, #412]	@ (800a5a8 <UART_SetConfig+0x338>)
 800a40c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b05      	cmp	r3, #5
 800a414:	d826      	bhi.n	800a464 <UART_SetConfig+0x1f4>
 800a416:	a201      	add	r2, pc, #4	@ (adr r2, 800a41c <UART_SetConfig+0x1ac>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a435 	.word	0x0800a435
 800a420:	0800a43d 	.word	0x0800a43d
 800a424:	0800a445 	.word	0x0800a445
 800a428:	0800a44d 	.word	0x0800a44d
 800a42c:	0800a455 	.word	0x0800a455
 800a430:	0800a45d 	.word	0x0800a45d
 800a434:	2300      	movs	r3, #0
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e1ec      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a43c:	2304      	movs	r3, #4
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e1e8      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a444:	2308      	movs	r3, #8
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e1e4      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a44c:	2310      	movs	r3, #16
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e1e0      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a454:	2320      	movs	r3, #32
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e1dc      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a45c:	2340      	movs	r3, #64	@ 0x40
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e1d8      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a464:	2380      	movs	r3, #128	@ 0x80
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e1d4      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a4f      	ldr	r2, [pc, #316]	@ (800a5b0 <UART_SetConfig+0x340>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d130      	bne.n	800a4d8 <UART_SetConfig+0x268>
 800a476:	4b4c      	ldr	r3, [pc, #304]	@ (800a5a8 <UART_SetConfig+0x338>)
 800a478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a47a:	f003 0307 	and.w	r3, r3, #7
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d826      	bhi.n	800a4d0 <UART_SetConfig+0x260>
 800a482:	a201      	add	r2, pc, #4	@ (adr r2, 800a488 <UART_SetConfig+0x218>)
 800a484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a488:	0800a4a1 	.word	0x0800a4a1
 800a48c:	0800a4a9 	.word	0x0800a4a9
 800a490:	0800a4b1 	.word	0x0800a4b1
 800a494:	0800a4b9 	.word	0x0800a4b9
 800a498:	0800a4c1 	.word	0x0800a4c1
 800a49c:	0800a4c9 	.word	0x0800a4c9
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e1b6      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4a8:	2304      	movs	r3, #4
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e1b2      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e1ae      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4b8:	2310      	movs	r3, #16
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e1aa      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4c0:	2320      	movs	r3, #32
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e1a6      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4c8:	2340      	movs	r3, #64	@ 0x40
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e1a2      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4d0:	2380      	movs	r3, #128	@ 0x80
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e19e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a35      	ldr	r2, [pc, #212]	@ (800a5b4 <UART_SetConfig+0x344>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d130      	bne.n	800a544 <UART_SetConfig+0x2d4>
 800a4e2:	4b31      	ldr	r3, [pc, #196]	@ (800a5a8 <UART_SetConfig+0x338>)
 800a4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e6:	f003 0307 	and.w	r3, r3, #7
 800a4ea:	2b05      	cmp	r3, #5
 800a4ec:	d826      	bhi.n	800a53c <UART_SetConfig+0x2cc>
 800a4ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f4 <UART_SetConfig+0x284>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a50d 	.word	0x0800a50d
 800a4f8:	0800a515 	.word	0x0800a515
 800a4fc:	0800a51d 	.word	0x0800a51d
 800a500:	0800a525 	.word	0x0800a525
 800a504:	0800a52d 	.word	0x0800a52d
 800a508:	0800a535 	.word	0x0800a535
 800a50c:	2300      	movs	r3, #0
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e180      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a514:	2304      	movs	r3, #4
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e17c      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a51c:	2308      	movs	r3, #8
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e178      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a524:	2310      	movs	r3, #16
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e174      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a52c:	2320      	movs	r3, #32
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e170      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a534:	2340      	movs	r3, #64	@ 0x40
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e16c      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a53c:	2380      	movs	r3, #128	@ 0x80
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e168      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a1b      	ldr	r2, [pc, #108]	@ (800a5b8 <UART_SetConfig+0x348>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d142      	bne.n	800a5d4 <UART_SetConfig+0x364>
 800a54e:	4b16      	ldr	r3, [pc, #88]	@ (800a5a8 <UART_SetConfig+0x338>)
 800a550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	2b05      	cmp	r3, #5
 800a558:	d838      	bhi.n	800a5cc <UART_SetConfig+0x35c>
 800a55a:	a201      	add	r2, pc, #4	@ (adr r2, 800a560 <UART_SetConfig+0x2f0>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a581 	.word	0x0800a581
 800a568:	0800a589 	.word	0x0800a589
 800a56c:	0800a591 	.word	0x0800a591
 800a570:	0800a5bd 	.word	0x0800a5bd
 800a574:	0800a5c5 	.word	0x0800a5c5
 800a578:	2300      	movs	r3, #0
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e14a      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a580:	2304      	movs	r3, #4
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e146      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a588:	2308      	movs	r3, #8
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e142      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a590:	2310      	movs	r3, #16
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e13e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a598:	cfff69f3 	.word	0xcfff69f3
 800a59c:	58000c00 	.word	0x58000c00
 800a5a0:	11fff4ff 	.word	0x11fff4ff
 800a5a4:	40011000 	.word	0x40011000
 800a5a8:	58024400 	.word	0x58024400
 800a5ac:	40004400 	.word	0x40004400
 800a5b0:	40004800 	.word	0x40004800
 800a5b4:	40004c00 	.word	0x40004c00
 800a5b8:	40005000 	.word	0x40005000
 800a5bc:	2320      	movs	r3, #32
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e128      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a5c4:	2340      	movs	r3, #64	@ 0x40
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ca:	e124      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a5cc:	2380      	movs	r3, #128	@ 0x80
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	e120      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4acb      	ldr	r2, [pc, #812]	@ (800a908 <UART_SetConfig+0x698>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d176      	bne.n	800a6cc <UART_SetConfig+0x45c>
 800a5de:	4bcb      	ldr	r3, [pc, #812]	@ (800a90c <UART_SetConfig+0x69c>)
 800a5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5e6:	2b28      	cmp	r3, #40	@ 0x28
 800a5e8:	d86c      	bhi.n	800a6c4 <UART_SetConfig+0x454>
 800a5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a5f0 <UART_SetConfig+0x380>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a695 	.word	0x0800a695
 800a5f4:	0800a6c5 	.word	0x0800a6c5
 800a5f8:	0800a6c5 	.word	0x0800a6c5
 800a5fc:	0800a6c5 	.word	0x0800a6c5
 800a600:	0800a6c5 	.word	0x0800a6c5
 800a604:	0800a6c5 	.word	0x0800a6c5
 800a608:	0800a6c5 	.word	0x0800a6c5
 800a60c:	0800a6c5 	.word	0x0800a6c5
 800a610:	0800a69d 	.word	0x0800a69d
 800a614:	0800a6c5 	.word	0x0800a6c5
 800a618:	0800a6c5 	.word	0x0800a6c5
 800a61c:	0800a6c5 	.word	0x0800a6c5
 800a620:	0800a6c5 	.word	0x0800a6c5
 800a624:	0800a6c5 	.word	0x0800a6c5
 800a628:	0800a6c5 	.word	0x0800a6c5
 800a62c:	0800a6c5 	.word	0x0800a6c5
 800a630:	0800a6a5 	.word	0x0800a6a5
 800a634:	0800a6c5 	.word	0x0800a6c5
 800a638:	0800a6c5 	.word	0x0800a6c5
 800a63c:	0800a6c5 	.word	0x0800a6c5
 800a640:	0800a6c5 	.word	0x0800a6c5
 800a644:	0800a6c5 	.word	0x0800a6c5
 800a648:	0800a6c5 	.word	0x0800a6c5
 800a64c:	0800a6c5 	.word	0x0800a6c5
 800a650:	0800a6ad 	.word	0x0800a6ad
 800a654:	0800a6c5 	.word	0x0800a6c5
 800a658:	0800a6c5 	.word	0x0800a6c5
 800a65c:	0800a6c5 	.word	0x0800a6c5
 800a660:	0800a6c5 	.word	0x0800a6c5
 800a664:	0800a6c5 	.word	0x0800a6c5
 800a668:	0800a6c5 	.word	0x0800a6c5
 800a66c:	0800a6c5 	.word	0x0800a6c5
 800a670:	0800a6b5 	.word	0x0800a6b5
 800a674:	0800a6c5 	.word	0x0800a6c5
 800a678:	0800a6c5 	.word	0x0800a6c5
 800a67c:	0800a6c5 	.word	0x0800a6c5
 800a680:	0800a6c5 	.word	0x0800a6c5
 800a684:	0800a6c5 	.word	0x0800a6c5
 800a688:	0800a6c5 	.word	0x0800a6c5
 800a68c:	0800a6c5 	.word	0x0800a6c5
 800a690:	0800a6bd 	.word	0x0800a6bd
 800a694:	2301      	movs	r3, #1
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e0bc      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a69c:	2304      	movs	r3, #4
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e0b8      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a6a4:	2308      	movs	r3, #8
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e0b4      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a6ac:	2310      	movs	r3, #16
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e0b0      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a6b4:	2320      	movs	r3, #32
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e0ac      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a6bc:	2340      	movs	r3, #64	@ 0x40
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c2:	e0a8      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a6c4:	2380      	movs	r3, #128	@ 0x80
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ca:	e0a4      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a8f      	ldr	r2, [pc, #572]	@ (800a910 <UART_SetConfig+0x6a0>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d130      	bne.n	800a738 <UART_SetConfig+0x4c8>
 800a6d6:	4b8d      	ldr	r3, [pc, #564]	@ (800a90c <UART_SetConfig+0x69c>)
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	2b05      	cmp	r3, #5
 800a6e0:	d826      	bhi.n	800a730 <UART_SetConfig+0x4c0>
 800a6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e8 <UART_SetConfig+0x478>)
 800a6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e8:	0800a701 	.word	0x0800a701
 800a6ec:	0800a709 	.word	0x0800a709
 800a6f0:	0800a711 	.word	0x0800a711
 800a6f4:	0800a719 	.word	0x0800a719
 800a6f8:	0800a721 	.word	0x0800a721
 800a6fc:	0800a729 	.word	0x0800a729
 800a700:	2300      	movs	r3, #0
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e086      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a708:	2304      	movs	r3, #4
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e082      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a710:	2308      	movs	r3, #8
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e07e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a718:	2310      	movs	r3, #16
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e07a      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a720:	2320      	movs	r3, #32
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e076      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a728:	2340      	movs	r3, #64	@ 0x40
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72e:	e072      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a730:	2380      	movs	r3, #128	@ 0x80
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e06e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a75      	ldr	r2, [pc, #468]	@ (800a914 <UART_SetConfig+0x6a4>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d130      	bne.n	800a7a4 <UART_SetConfig+0x534>
 800a742:	4b72      	ldr	r3, [pc, #456]	@ (800a90c <UART_SetConfig+0x69c>)
 800a744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	2b05      	cmp	r3, #5
 800a74c:	d826      	bhi.n	800a79c <UART_SetConfig+0x52c>
 800a74e:	a201      	add	r2, pc, #4	@ (adr r2, 800a754 <UART_SetConfig+0x4e4>)
 800a750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a754:	0800a76d 	.word	0x0800a76d
 800a758:	0800a775 	.word	0x0800a775
 800a75c:	0800a77d 	.word	0x0800a77d
 800a760:	0800a785 	.word	0x0800a785
 800a764:	0800a78d 	.word	0x0800a78d
 800a768:	0800a795 	.word	0x0800a795
 800a76c:	2300      	movs	r3, #0
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e050      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a774:	2304      	movs	r3, #4
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e04c      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a77c:	2308      	movs	r3, #8
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e048      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a784:	2310      	movs	r3, #16
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e044      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a78c:	2320      	movs	r3, #32
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e040      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a794:	2340      	movs	r3, #64	@ 0x40
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79a:	e03c      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a79c:	2380      	movs	r3, #128	@ 0x80
 800a79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7a2:	e038      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a5b      	ldr	r2, [pc, #364]	@ (800a918 <UART_SetConfig+0x6a8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d130      	bne.n	800a810 <UART_SetConfig+0x5a0>
 800a7ae:	4b57      	ldr	r3, [pc, #348]	@ (800a90c <UART_SetConfig+0x69c>)
 800a7b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7b2:	f003 0307 	and.w	r3, r3, #7
 800a7b6:	2b05      	cmp	r3, #5
 800a7b8:	d826      	bhi.n	800a808 <UART_SetConfig+0x598>
 800a7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <UART_SetConfig+0x550>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a7d9 	.word	0x0800a7d9
 800a7c4:	0800a7e1 	.word	0x0800a7e1
 800a7c8:	0800a7e9 	.word	0x0800a7e9
 800a7cc:	0800a7f1 	.word	0x0800a7f1
 800a7d0:	0800a7f9 	.word	0x0800a7f9
 800a7d4:	0800a801 	.word	0x0800a801
 800a7d8:	2302      	movs	r3, #2
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e01a      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e016      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a7e8:	2308      	movs	r3, #8
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e012      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a7f0:	2310      	movs	r3, #16
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e00e      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a7f8:	2320      	movs	r3, #32
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e00a      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a800:	2340      	movs	r3, #64	@ 0x40
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e006      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a808:	2380      	movs	r3, #128	@ 0x80
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e002      	b.n	800a816 <UART_SetConfig+0x5a6>
 800a810:	2380      	movs	r3, #128	@ 0x80
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a3f      	ldr	r2, [pc, #252]	@ (800a918 <UART_SetConfig+0x6a8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	f040 80f8 	bne.w	800aa12 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a822:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a826:	2b20      	cmp	r3, #32
 800a828:	dc46      	bgt.n	800a8b8 <UART_SetConfig+0x648>
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	f2c0 8082 	blt.w	800a934 <UART_SetConfig+0x6c4>
 800a830:	3b02      	subs	r3, #2
 800a832:	2b1e      	cmp	r3, #30
 800a834:	d87e      	bhi.n	800a934 <UART_SetConfig+0x6c4>
 800a836:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <UART_SetConfig+0x5cc>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a8bf 	.word	0x0800a8bf
 800a840:	0800a935 	.word	0x0800a935
 800a844:	0800a8c7 	.word	0x0800a8c7
 800a848:	0800a935 	.word	0x0800a935
 800a84c:	0800a935 	.word	0x0800a935
 800a850:	0800a935 	.word	0x0800a935
 800a854:	0800a8d7 	.word	0x0800a8d7
 800a858:	0800a935 	.word	0x0800a935
 800a85c:	0800a935 	.word	0x0800a935
 800a860:	0800a935 	.word	0x0800a935
 800a864:	0800a935 	.word	0x0800a935
 800a868:	0800a935 	.word	0x0800a935
 800a86c:	0800a935 	.word	0x0800a935
 800a870:	0800a935 	.word	0x0800a935
 800a874:	0800a8e7 	.word	0x0800a8e7
 800a878:	0800a935 	.word	0x0800a935
 800a87c:	0800a935 	.word	0x0800a935
 800a880:	0800a935 	.word	0x0800a935
 800a884:	0800a935 	.word	0x0800a935
 800a888:	0800a935 	.word	0x0800a935
 800a88c:	0800a935 	.word	0x0800a935
 800a890:	0800a935 	.word	0x0800a935
 800a894:	0800a935 	.word	0x0800a935
 800a898:	0800a935 	.word	0x0800a935
 800a89c:	0800a935 	.word	0x0800a935
 800a8a0:	0800a935 	.word	0x0800a935
 800a8a4:	0800a935 	.word	0x0800a935
 800a8a8:	0800a935 	.word	0x0800a935
 800a8ac:	0800a935 	.word	0x0800a935
 800a8b0:	0800a935 	.word	0x0800a935
 800a8b4:	0800a927 	.word	0x0800a927
 800a8b8:	2b40      	cmp	r3, #64	@ 0x40
 800a8ba:	d037      	beq.n	800a92c <UART_SetConfig+0x6bc>
 800a8bc:	e03a      	b.n	800a934 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a8be:	f7fe f83d 	bl	800893c <HAL_RCCEx_GetD3PCLK1Freq>
 800a8c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a8c4:	e03c      	b.n	800a940 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe f84c 	bl	8008968 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d4:	e034      	b.n	800a940 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8d6:	f107 0318 	add.w	r3, r7, #24
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe f998 	bl	8008c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e4:	e02c      	b.n	800a940 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8e6:	4b09      	ldr	r3, [pc, #36]	@ (800a90c <UART_SetConfig+0x69c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d016      	beq.n	800a920 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8f2:	4b06      	ldr	r3, [pc, #24]	@ (800a90c <UART_SetConfig+0x69c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	08db      	lsrs	r3, r3, #3
 800a8f8:	f003 0303 	and.w	r3, r3, #3
 800a8fc:	4a07      	ldr	r2, [pc, #28]	@ (800a91c <UART_SetConfig+0x6ac>)
 800a8fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a904:	e01c      	b.n	800a940 <UART_SetConfig+0x6d0>
 800a906:	bf00      	nop
 800a908:	40011400 	.word	0x40011400
 800a90c:	58024400 	.word	0x58024400
 800a910:	40007800 	.word	0x40007800
 800a914:	40007c00 	.word	0x40007c00
 800a918:	58000c00 	.word	0x58000c00
 800a91c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a920:	4b9d      	ldr	r3, [pc, #628]	@ (800ab98 <UART_SetConfig+0x928>)
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a924:	e00c      	b.n	800a940 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a926:	4b9d      	ldr	r3, [pc, #628]	@ (800ab9c <UART_SetConfig+0x92c>)
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92a:	e009      	b.n	800a940 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a92c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a932:	e005      	b.n	800a940 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a93e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 81de 	beq.w	800ad04 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94c:	4a94      	ldr	r2, [pc, #592]	@ (800aba0 <UART_SetConfig+0x930>)
 800a94e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a952:	461a      	mov	r2, r3
 800a954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a956:	fbb3 f3f2 	udiv	r3, r3, r2
 800a95a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	4613      	mov	r3, r2
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	4413      	add	r3, r2
 800a966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a968:	429a      	cmp	r2, r3
 800a96a:	d305      	bcc.n	800a978 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a974:	429a      	cmp	r2, r3
 800a976:	d903      	bls.n	800a980 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a97e:	e1c1      	b.n	800ad04 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a982:	2200      	movs	r2, #0
 800a984:	60bb      	str	r3, [r7, #8]
 800a986:	60fa      	str	r2, [r7, #12]
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	4a84      	ldr	r2, [pc, #528]	@ (800aba0 <UART_SetConfig+0x930>)
 800a98e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a992:	b29b      	uxth	r3, r3
 800a994:	2200      	movs	r2, #0
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	607a      	str	r2, [r7, #4]
 800a99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a99e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9a2:	f7f5 fd55 	bl	8000450 <__aeabi_uldivmod>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	f04f 0200 	mov.w	r2, #0
 800a9b2:	f04f 0300 	mov.w	r3, #0
 800a9b6:	020b      	lsls	r3, r1, #8
 800a9b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9bc:	0202      	lsls	r2, r0, #8
 800a9be:	6979      	ldr	r1, [r7, #20]
 800a9c0:	6849      	ldr	r1, [r1, #4]
 800a9c2:	0849      	lsrs	r1, r1, #1
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	eb12 0804 	adds.w	r8, r2, r4
 800a9ce:	eb43 0905 	adc.w	r9, r3, r5
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	469a      	mov	sl, r3
 800a9da:	4693      	mov	fp, r2
 800a9dc:	4652      	mov	r2, sl
 800a9de:	465b      	mov	r3, fp
 800a9e0:	4640      	mov	r0, r8
 800a9e2:	4649      	mov	r1, r9
 800a9e4:	f7f5 fd34 	bl	8000450 <__aeabi_uldivmod>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a9f6:	d308      	bcc.n	800aa0a <UART_SetConfig+0x79a>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9fe:	d204      	bcs.n	800aa0a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa06:	60da      	str	r2, [r3, #12]
 800aa08:	e17c      	b.n	800ad04 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa10:	e178      	b.n	800ad04 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa1a:	f040 80c5 	bne.w	800aba8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	dc48      	bgt.n	800aab8 <UART_SetConfig+0x848>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	db7b      	blt.n	800ab22 <UART_SetConfig+0x8b2>
 800aa2a:	2b20      	cmp	r3, #32
 800aa2c:	d879      	bhi.n	800ab22 <UART_SetConfig+0x8b2>
 800aa2e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa34 <UART_SetConfig+0x7c4>)
 800aa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa34:	0800aabf 	.word	0x0800aabf
 800aa38:	0800aac7 	.word	0x0800aac7
 800aa3c:	0800ab23 	.word	0x0800ab23
 800aa40:	0800ab23 	.word	0x0800ab23
 800aa44:	0800aacf 	.word	0x0800aacf
 800aa48:	0800ab23 	.word	0x0800ab23
 800aa4c:	0800ab23 	.word	0x0800ab23
 800aa50:	0800ab23 	.word	0x0800ab23
 800aa54:	0800aadf 	.word	0x0800aadf
 800aa58:	0800ab23 	.word	0x0800ab23
 800aa5c:	0800ab23 	.word	0x0800ab23
 800aa60:	0800ab23 	.word	0x0800ab23
 800aa64:	0800ab23 	.word	0x0800ab23
 800aa68:	0800ab23 	.word	0x0800ab23
 800aa6c:	0800ab23 	.word	0x0800ab23
 800aa70:	0800ab23 	.word	0x0800ab23
 800aa74:	0800aaef 	.word	0x0800aaef
 800aa78:	0800ab23 	.word	0x0800ab23
 800aa7c:	0800ab23 	.word	0x0800ab23
 800aa80:	0800ab23 	.word	0x0800ab23
 800aa84:	0800ab23 	.word	0x0800ab23
 800aa88:	0800ab23 	.word	0x0800ab23
 800aa8c:	0800ab23 	.word	0x0800ab23
 800aa90:	0800ab23 	.word	0x0800ab23
 800aa94:	0800ab23 	.word	0x0800ab23
 800aa98:	0800ab23 	.word	0x0800ab23
 800aa9c:	0800ab23 	.word	0x0800ab23
 800aaa0:	0800ab23 	.word	0x0800ab23
 800aaa4:	0800ab23 	.word	0x0800ab23
 800aaa8:	0800ab23 	.word	0x0800ab23
 800aaac:	0800ab23 	.word	0x0800ab23
 800aab0:	0800ab23 	.word	0x0800ab23
 800aab4:	0800ab15 	.word	0x0800ab15
 800aab8:	2b40      	cmp	r3, #64	@ 0x40
 800aaba:	d02e      	beq.n	800ab1a <UART_SetConfig+0x8aa>
 800aabc:	e031      	b.n	800ab22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aabe:	f7fc fcc5 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800aac2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aac4:	e033      	b.n	800ab2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aac6:	f7fc fcd7 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800aaca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aacc:	e02f      	b.n	800ab2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fd ff48 	bl	8008968 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aadc:	e027      	b.n	800ab2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aade:	f107 0318 	add.w	r3, r7, #24
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe f894 	bl	8008c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaec:	e01f      	b.n	800ab2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaee:	4b2d      	ldr	r3, [pc, #180]	@ (800aba4 <UART_SetConfig+0x934>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 0320 	and.w	r3, r3, #32
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d009      	beq.n	800ab0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aafa:	4b2a      	ldr	r3, [pc, #168]	@ (800aba4 <UART_SetConfig+0x934>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	08db      	lsrs	r3, r3, #3
 800ab00:	f003 0303 	and.w	r3, r3, #3
 800ab04:	4a24      	ldr	r2, [pc, #144]	@ (800ab98 <UART_SetConfig+0x928>)
 800ab06:	fa22 f303 	lsr.w	r3, r2, r3
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab0c:	e00f      	b.n	800ab2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab0e:	4b22      	ldr	r3, [pc, #136]	@ (800ab98 <UART_SetConfig+0x928>)
 800ab10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab12:	e00c      	b.n	800ab2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab14:	4b21      	ldr	r3, [pc, #132]	@ (800ab9c <UART_SetConfig+0x92c>)
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab18:	e009      	b.n	800ab2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab20:	e005      	b.n	800ab2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 80e7 	beq.w	800ad04 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3a:	4a19      	ldr	r2, [pc, #100]	@ (800aba0 <UART_SetConfig+0x930>)
 800ab3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab40:	461a      	mov	r2, r3
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab48:	005a      	lsls	r2, r3, #1
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	085b      	lsrs	r3, r3, #1
 800ab50:	441a      	add	r2, r3
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5e:	2b0f      	cmp	r3, #15
 800ab60:	d916      	bls.n	800ab90 <UART_SetConfig+0x920>
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab68:	d212      	bcs.n	800ab90 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f023 030f 	bic.w	r3, r3, #15
 800ab72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab76:	085b      	lsrs	r3, r3, #1
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	f003 0307 	and.w	r3, r3, #7
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab82:	4313      	orrs	r3, r2
 800ab84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ab8c:	60da      	str	r2, [r3, #12]
 800ab8e:	e0b9      	b.n	800ad04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab96:	e0b5      	b.n	800ad04 <UART_SetConfig+0xa94>
 800ab98:	03d09000 	.word	0x03d09000
 800ab9c:	003d0900 	.word	0x003d0900
 800aba0:	0801dde4 	.word	0x0801dde4
 800aba4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aba8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abac:	2b20      	cmp	r3, #32
 800abae:	dc49      	bgt.n	800ac44 <UART_SetConfig+0x9d4>
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	db7c      	blt.n	800acae <UART_SetConfig+0xa3e>
 800abb4:	2b20      	cmp	r3, #32
 800abb6:	d87a      	bhi.n	800acae <UART_SetConfig+0xa3e>
 800abb8:	a201      	add	r2, pc, #4	@ (adr r2, 800abc0 <UART_SetConfig+0x950>)
 800abba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abbe:	bf00      	nop
 800abc0:	0800ac4b 	.word	0x0800ac4b
 800abc4:	0800ac53 	.word	0x0800ac53
 800abc8:	0800acaf 	.word	0x0800acaf
 800abcc:	0800acaf 	.word	0x0800acaf
 800abd0:	0800ac5b 	.word	0x0800ac5b
 800abd4:	0800acaf 	.word	0x0800acaf
 800abd8:	0800acaf 	.word	0x0800acaf
 800abdc:	0800acaf 	.word	0x0800acaf
 800abe0:	0800ac6b 	.word	0x0800ac6b
 800abe4:	0800acaf 	.word	0x0800acaf
 800abe8:	0800acaf 	.word	0x0800acaf
 800abec:	0800acaf 	.word	0x0800acaf
 800abf0:	0800acaf 	.word	0x0800acaf
 800abf4:	0800acaf 	.word	0x0800acaf
 800abf8:	0800acaf 	.word	0x0800acaf
 800abfc:	0800acaf 	.word	0x0800acaf
 800ac00:	0800ac7b 	.word	0x0800ac7b
 800ac04:	0800acaf 	.word	0x0800acaf
 800ac08:	0800acaf 	.word	0x0800acaf
 800ac0c:	0800acaf 	.word	0x0800acaf
 800ac10:	0800acaf 	.word	0x0800acaf
 800ac14:	0800acaf 	.word	0x0800acaf
 800ac18:	0800acaf 	.word	0x0800acaf
 800ac1c:	0800acaf 	.word	0x0800acaf
 800ac20:	0800acaf 	.word	0x0800acaf
 800ac24:	0800acaf 	.word	0x0800acaf
 800ac28:	0800acaf 	.word	0x0800acaf
 800ac2c:	0800acaf 	.word	0x0800acaf
 800ac30:	0800acaf 	.word	0x0800acaf
 800ac34:	0800acaf 	.word	0x0800acaf
 800ac38:	0800acaf 	.word	0x0800acaf
 800ac3c:	0800acaf 	.word	0x0800acaf
 800ac40:	0800aca1 	.word	0x0800aca1
 800ac44:	2b40      	cmp	r3, #64	@ 0x40
 800ac46:	d02e      	beq.n	800aca6 <UART_SetConfig+0xa36>
 800ac48:	e031      	b.n	800acae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac4a:	f7fc fbff 	bl	800744c <HAL_RCC_GetPCLK1Freq>
 800ac4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac50:	e033      	b.n	800acba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac52:	f7fc fc11 	bl	8007478 <HAL_RCC_GetPCLK2Freq>
 800ac56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac58:	e02f      	b.n	800acba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fd fe82 	bl	8008968 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac68:	e027      	b.n	800acba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac6a:	f107 0318 	add.w	r3, r7, #24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd ffce 	bl	8008c10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac78:	e01f      	b.n	800acba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac7a:	4b2d      	ldr	r3, [pc, #180]	@ (800ad30 <UART_SetConfig+0xac0>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac86:	4b2a      	ldr	r3, [pc, #168]	@ (800ad30 <UART_SetConfig+0xac0>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	08db      	lsrs	r3, r3, #3
 800ac8c:	f003 0303 	and.w	r3, r3, #3
 800ac90:	4a28      	ldr	r2, [pc, #160]	@ (800ad34 <UART_SetConfig+0xac4>)
 800ac92:	fa22 f303 	lsr.w	r3, r2, r3
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac98:	e00f      	b.n	800acba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac9a:	4b26      	ldr	r3, [pc, #152]	@ (800ad34 <UART_SetConfig+0xac4>)
 800ac9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac9e:	e00c      	b.n	800acba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aca0:	4b25      	ldr	r3, [pc, #148]	@ (800ad38 <UART_SetConfig+0xac8>)
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca4:	e009      	b.n	800acba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acac:	e005      	b.n	800acba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800acb8:	bf00      	nop
    }

    if (pclk != 0U)
 800acba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d021      	beq.n	800ad04 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad3c <UART_SetConfig+0xacc>)
 800acc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acca:	461a      	mov	r2, r3
 800accc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acce:	fbb3 f2f2 	udiv	r2, r3, r2
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	085b      	lsrs	r3, r3, #1
 800acd8:	441a      	add	r2, r3
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ace2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	2b0f      	cmp	r3, #15
 800ace8:	d909      	bls.n	800acfe <UART_SetConfig+0xa8e>
 800acea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acf0:	d205      	bcs.n	800acfe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60da      	str	r2, [r3, #12]
 800acfc:	e002      	b.n	800ad04 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	2200      	movs	r2, #0
 800ad18:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad20:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3748      	adds	r7, #72	@ 0x48
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad2e:	bf00      	nop
 800ad30:	58024400 	.word	0x58024400
 800ad34:	03d09000 	.word	0x03d09000
 800ad38:	003d0900 	.word	0x003d0900
 800ad3c:	0801dde4 	.word	0x0801dde4

0800ad40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4c:	f003 0308 	and.w	r3, r3, #8
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00a      	beq.n	800ad6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	430a      	orrs	r2, r1
 800ad8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00a      	beq.n	800adae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	430a      	orrs	r2, r1
 800adac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00a      	beq.n	800adf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf6:	f003 0320 	and.w	r3, r3, #32
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d01a      	beq.n	800ae56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae3e:	d10a      	bne.n	800ae56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	605a      	str	r2, [r3, #4]
  }
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b098      	sub	sp, #96	@ 0x60
 800ae88:	af02      	add	r7, sp, #8
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae94:	f7f7 fb06 	bl	80024a4 <HAL_GetTick>
 800ae98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 0308 	and.w	r3, r3, #8
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d12f      	bne.n	800af08 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aea8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f88e 	bl	800afd8 <UART_WaitOnFlagUntilTimeout>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d022      	beq.n	800af08 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aed6:	653b      	str	r3, [r7, #80]	@ 0x50
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aee0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aee2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e6      	bne.n	800aec2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2220      	movs	r2, #32
 800aef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af04:	2303      	movs	r3, #3
 800af06:	e063      	b.n	800afd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 0304 	and.w	r3, r3, #4
 800af12:	2b04      	cmp	r3, #4
 800af14:	d149      	bne.n	800afaa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af16:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af1e:	2200      	movs	r2, #0
 800af20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f857 	bl	800afd8 <UART_WaitOnFlagUntilTimeout>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d03c      	beq.n	800afaa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af38:	e853 3f00 	ldrex	r3, [r3]
 800af3c:	623b      	str	r3, [r7, #32]
   return(result);
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800af50:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af56:	e841 2300 	strex	r3, r2, [r1]
 800af5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1e6      	bne.n	800af30 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3308      	adds	r3, #8
 800af68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	e853 3f00 	ldrex	r3, [r3]
 800af70:	60fb      	str	r3, [r7, #12]
   return(result);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f023 0301 	bic.w	r3, r3, #1
 800af78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3308      	adds	r3, #8
 800af80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af82:	61fa      	str	r2, [r7, #28]
 800af84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af86:	69b9      	ldr	r1, [r7, #24]
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	e841 2300 	strex	r3, r2, [r1]
 800af8e:	617b      	str	r3, [r7, #20]
   return(result);
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e5      	bne.n	800af62 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2220      	movs	r2, #32
 800af9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e012      	b.n	800afd0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2220      	movs	r2, #32
 800afae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3758      	adds	r7, #88	@ 0x58
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	4613      	mov	r3, r2
 800afe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afe8:	e04f      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff0:	d04b      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff2:	f7f7 fa57 	bl	80024a4 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	429a      	cmp	r2, r3
 800b000:	d302      	bcc.n	800b008 <UART_WaitOnFlagUntilTimeout+0x30>
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e04e      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0304 	and.w	r3, r3, #4
 800b016:	2b00      	cmp	r3, #0
 800b018:	d037      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b80      	cmp	r3, #128	@ 0x80
 800b01e:	d034      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b40      	cmp	r3, #64	@ 0x40
 800b024:	d031      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b08      	cmp	r3, #8
 800b032:	d110      	bne.n	800b056 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2208      	movs	r2, #8
 800b03a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 f921 	bl	800b284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2208      	movs	r2, #8
 800b046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e029      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69db      	ldr	r3, [r3, #28]
 800b05c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b064:	d111      	bne.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b06e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f907 	bl	800b284 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2220      	movs	r2, #32
 800b07a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e00f      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69da      	ldr	r2, [r3, #28]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4013      	ands	r3, r2
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	429a      	cmp	r2, r3
 800b098:	bf0c      	ite	eq
 800b09a:	2301      	moveq	r3, #1
 800b09c:	2300      	movne	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d0a0      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b096      	sub	sp, #88	@ 0x58
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	88fa      	ldrh	r2, [r7, #6]
 800b0cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2222      	movs	r2, #34	@ 0x22
 800b0dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d02d      	beq.n	800b146 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0f0:	4a40      	ldr	r2, [pc, #256]	@ (800b1f4 <UART_Start_Receive_DMA+0x140>)
 800b0f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0fa:	4a3f      	ldr	r2, [pc, #252]	@ (800b1f8 <UART_Start_Receive_DMA+0x144>)
 800b0fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b104:	4a3d      	ldr	r2, [pc, #244]	@ (800b1fc <UART_Start_Receive_DMA+0x148>)
 800b106:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b10e:	2200      	movs	r2, #0
 800b110:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3324      	adds	r3, #36	@ 0x24
 800b11e:	4619      	mov	r1, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b124:	461a      	mov	r2, r3
 800b126:	88fb      	ldrh	r3, [r7, #6]
 800b128:	f7f7 fe48 	bl	8002dbc <HAL_DMA_Start_IT>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d009      	beq.n	800b146 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2210      	movs	r2, #16
 800b136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e051      	b.n	800b1ea <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d018      	beq.n	800b180 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b162:	657b      	str	r3, [r7, #84]	@ 0x54
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	461a      	mov	r2, r3
 800b16a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b170:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b174:	e841 2300 	strex	r3, r2, [r1]
 800b178:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1e6      	bne.n	800b14e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18a:	e853 3f00 	ldrex	r3, [r3]
 800b18e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b192:	f043 0301 	orr.w	r3, r3, #1
 800b196:	653b      	str	r3, [r7, #80]	@ 0x50
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3308      	adds	r3, #8
 800b19e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1a0:	637a      	str	r2, [r7, #52]	@ 0x34
 800b1a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b1a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1a8:	e841 2300 	strex	r3, r2, [r1]
 800b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1e5      	bne.n	800b180 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	e853 3f00 	ldrex	r3, [r3]
 800b1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1d4:	623a      	str	r2, [r7, #32]
 800b1d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d8:	69f9      	ldr	r1, [r7, #28]
 800b1da:	6a3a      	ldr	r2, [r7, #32]
 800b1dc:	e841 2300 	strex	r3, r2, [r1]
 800b1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1e5      	bne.n	800b1b4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3758      	adds	r7, #88	@ 0x58
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	0800b403 	.word	0x0800b403
 800b1f8:	0800b52b 	.word	0x0800b52b
 800b1fc:	0800b569 	.word	0x0800b569

0800b200 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b200:	b480      	push	{r7}
 800b202:	b08f      	sub	sp, #60	@ 0x3c
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	6a3b      	ldr	r3, [r7, #32]
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	61fb      	str	r3, [r7, #28]
   return(result);
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b226:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b228:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b22c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e6      	bne.n	800b208 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3308      	adds	r3, #8
 800b240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	60bb      	str	r3, [r7, #8]
   return(result);
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b250:	633b      	str	r3, [r7, #48]	@ 0x30
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b25a:	61ba      	str	r2, [r7, #24]
 800b25c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6979      	ldr	r1, [r7, #20]
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	613b      	str	r3, [r7, #16]
   return(result);
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e5      	bne.n	800b23a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2220      	movs	r2, #32
 800b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b276:	bf00      	nop
 800b278:	373c      	adds	r7, #60	@ 0x3c
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
	...

0800b284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b284:	b480      	push	{r7}
 800b286:	b095      	sub	sp, #84	@ 0x54
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b2a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e6      	bne.n	800b28c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	e853 3f00 	ldrex	r3, [r3]
 800b2cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b34c <UART_EndRxTransfer+0xc8>)
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3308      	adds	r3, #8
 800b2dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2e6:	e841 2300 	strex	r3, r2, [r1]
 800b2ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1e5      	bne.n	800b2be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d118      	bne.n	800b32c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	60bb      	str	r3, [r7, #8]
   return(result);
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f023 0310 	bic.w	r3, r3, #16
 800b30e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b318:	61bb      	str	r3, [r7, #24]
 800b31a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31c:	6979      	ldr	r1, [r7, #20]
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	e841 2300 	strex	r3, r2, [r1]
 800b324:	613b      	str	r3, [r7, #16]
   return(result);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e6      	bne.n	800b2fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2220      	movs	r2, #32
 800b330:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b340:	bf00      	nop
 800b342:	3754      	adds	r7, #84	@ 0x54
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	effffffe 	.word	0xeffffffe

0800b350 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b090      	sub	sp, #64	@ 0x40
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b35c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b366:	d037      	beq.n	800b3d8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3308      	adds	r3, #8
 800b376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	e853 3f00 	ldrex	r3, [r3]
 800b37e:	623b      	str	r3, [r7, #32]
   return(result);
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b386:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3308      	adds	r3, #8
 800b38e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b390:	633a      	str	r2, [r7, #48]	@ 0x30
 800b392:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b398:	e841 2300 	strex	r3, r2, [r1]
 800b39c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1e5      	bne.n	800b370 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	e853 3f00 	ldrex	r3, [r3]
 800b3b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c2:	61fb      	str	r3, [r7, #28]
 800b3c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	69b9      	ldr	r1, [r7, #24]
 800b3c8:	69fa      	ldr	r2, [r7, #28]
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	617b      	str	r3, [r7, #20]
   return(result);
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e6      	bne.n	800b3a4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b3d6:	e002      	b.n	800b3de <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b3d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b3da:	f7fe ff0b 	bl	800a1f4 <HAL_UART_TxCpltCallback>
}
 800b3de:	bf00      	nop
 800b3e0:	3740      	adds	r7, #64	@ 0x40
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f7fe ff07 	bl	800a208 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3fa:	bf00      	nop
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b09c      	sub	sp, #112	@ 0x70
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b418:	d071      	beq.n	800b4fe <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b41a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b432:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b436:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	461a      	mov	r2, r3
 800b43e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b440:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b442:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b44e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e6      	bne.n	800b422 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	3308      	adds	r3, #8
 800b45a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45e:	e853 3f00 	ldrex	r3, [r3]
 800b462:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b466:	f023 0301 	bic.w	r3, r3, #1
 800b46a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b46c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	3308      	adds	r3, #8
 800b472:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b474:	647a      	str	r2, [r7, #68]	@ 0x44
 800b476:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b47a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e5      	bne.n	800b454 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3308      	adds	r3, #8
 800b48e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	e853 3f00 	ldrex	r3, [r3]
 800b496:	623b      	str	r3, [r7, #32]
   return(result);
 800b498:	6a3b      	ldr	r3, [r7, #32]
 800b49a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b49e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b4a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4b0:	e841 2300 	strex	r3, r2, [r1]
 800b4b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1e5      	bne.n	800b488 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4be:	2220      	movs	r2, #32
 800b4c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d118      	bne.n	800b4fe <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	e853 3f00 	ldrex	r3, [r3]
 800b4d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f023 0310 	bic.w	r3, r3, #16
 800b4e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4ea:	61fb      	str	r3, [r7, #28]
 800b4ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ee:	69b9      	ldr	r1, [r7, #24]
 800b4f0:	69fa      	ldr	r2, [r7, #28]
 800b4f2:	e841 2300 	strex	r3, r2, [r1]
 800b4f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1e6      	bne.n	800b4cc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b4fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b500:	2200      	movs	r2, #0
 800b502:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d107      	bne.n	800b51c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b50c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b50e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b512:	4619      	mov	r1, r3
 800b514:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b516:	f7fe fe9f 	bl	800a258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b51a:	e002      	b.n	800b522 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b51c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b51e:	f7fe fe7d 	bl	800a21c <HAL_UART_RxCpltCallback>
}
 800b522:	bf00      	nop
 800b524:	3770      	adds	r7, #112	@ 0x70
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b536:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2201      	movs	r2, #1
 800b53c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b542:	2b01      	cmp	r3, #1
 800b544:	d109      	bne.n	800b55a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b54c:	085b      	lsrs	r3, r3, #1
 800b54e:	b29b      	uxth	r3, r3
 800b550:	4619      	mov	r1, r3
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7fe fe80 	bl	800a258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b558:	e002      	b.n	800b560 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7fe fe68 	bl	800a230 <HAL_UART_RxHalfCpltCallback>
}
 800b560:	bf00      	nop
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b574:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b57c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b584:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b590:	2b80      	cmp	r3, #128	@ 0x80
 800b592:	d109      	bne.n	800b5a8 <UART_DMAError+0x40>
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b21      	cmp	r3, #33	@ 0x21
 800b598:	d106      	bne.n	800b5a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b5a2:	6978      	ldr	r0, [r7, #20]
 800b5a4:	f7ff fe2c 	bl	800b200 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5b2:	2b40      	cmp	r3, #64	@ 0x40
 800b5b4:	d109      	bne.n	800b5ca <UART_DMAError+0x62>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b22      	cmp	r3, #34	@ 0x22
 800b5ba:	d106      	bne.n	800b5ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b5c4:	6978      	ldr	r0, [r7, #20]
 800b5c6:	f7ff fe5d 	bl	800b284 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5d0:	f043 0210 	orr.w	r2, r3, #16
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5da:	6978      	ldr	r0, [r7, #20]
 800b5dc:	f7fe fe32 	bl	800a244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5e0:	bf00      	nop
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7fe fe1c 	bl	800a244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	60bb      	str	r3, [r7, #8]
   return(result);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b630:	61fb      	str	r3, [r7, #28]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	61bb      	str	r3, [r7, #24]
 800b63c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6979      	ldr	r1, [r7, #20]
 800b640:	69ba      	ldr	r2, [r7, #24]
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	613b      	str	r3, [r7, #16]
   return(result);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e6      	bne.n	800b61c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7fe fdc9 	bl	800a1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b662:	bf00      	nop
 800b664:	3720      	adds	r7, #32
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b083      	sub	sp, #12
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b672:	bf00      	nop
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b67e:	b480      	push	{r7}
 800b680:	b083      	sub	sp, #12
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b686:	bf00      	nop
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr

0800b692 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b085      	sub	sp, #20
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d101      	bne.n	800b6bc <HAL_UARTEx_DisableFifoMode+0x16>
 800b6b8:	2302      	movs	r3, #2
 800b6ba:	e027      	b.n	800b70c <HAL_UARTEx_DisableFifoMode+0x66>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2224      	movs	r2, #36	@ 0x24
 800b6c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0201 	bic.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b6ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d101      	bne.n	800b730 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b72c:	2302      	movs	r3, #2
 800b72e:	e02d      	b.n	800b78c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2224      	movs	r2, #36	@ 0x24
 800b73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f022 0201 	bic.w	r2, r2, #1
 800b756:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	430a      	orrs	r2, r1
 800b76a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f84f 	bl	800b810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d101      	bne.n	800b7ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	e02d      	b.n	800b808 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2224      	movs	r2, #36	@ 0x24
 800b7b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f022 0201 	bic.w	r2, r2, #1
 800b7d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f811 	bl	800b810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2220      	movs	r2, #32
 800b7fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d108      	bne.n	800b832 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b830:	e031      	b.n	800b896 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b832:	2310      	movs	r3, #16
 800b834:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b836:	2310      	movs	r3, #16
 800b838:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	0e5b      	lsrs	r3, r3, #25
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f003 0307 	and.w	r3, r3, #7
 800b848:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	0f5b      	lsrs	r3, r3, #29
 800b852:	b2db      	uxtb	r3, r3
 800b854:	f003 0307 	and.w	r3, r3, #7
 800b858:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
 800b85c:	7b3a      	ldrb	r2, [r7, #12]
 800b85e:	4911      	ldr	r1, [pc, #68]	@ (800b8a4 <UARTEx_SetNbDataToProcess+0x94>)
 800b860:	5c8a      	ldrb	r2, [r1, r2]
 800b862:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b866:	7b3a      	ldrb	r2, [r7, #12]
 800b868:	490f      	ldr	r1, [pc, #60]	@ (800b8a8 <UARTEx_SetNbDataToProcess+0x98>)
 800b86a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b86c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b870:	b29a      	uxth	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	7b7a      	ldrb	r2, [r7, #13]
 800b87c:	4909      	ldr	r1, [pc, #36]	@ (800b8a4 <UARTEx_SetNbDataToProcess+0x94>)
 800b87e:	5c8a      	ldrb	r2, [r1, r2]
 800b880:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b884:	7b7a      	ldrb	r2, [r7, #13]
 800b886:	4908      	ldr	r1, [pc, #32]	@ (800b8a8 <UARTEx_SetNbDataToProcess+0x98>)
 800b888:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b88a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	0801ddfc 	.word	0x0801ddfc
 800b8a8:	0801de04 	.word	0x0801de04

0800b8ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	f107 001c 	add.w	r0, r7, #28
 800b8ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d121      	bne.n	800b90a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	4b2c      	ldr	r3, [pc, #176]	@ (800b988 <USB_CoreInit+0xdc>)
 800b8d8:	4013      	ands	r3, r2
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d105      	bne.n	800b8fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 faaa 	bl	800be58 <USB_CoreReset>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]
 800b908:	e01b      	b.n	800b942 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa9e 	bl	800be58 <USB_CoreReset>
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b920:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b924:	2b00      	cmp	r3, #0
 800b926:	d106      	bne.n	800b936 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b92c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	639a      	str	r2, [r3, #56]	@ 0x38
 800b934:	e005      	b.n	800b942 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b942:	7fbb      	ldrb	r3, [r7, #30]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d116      	bne.n	800b976 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b956:	4b0d      	ldr	r3, [pc, #52]	@ (800b98c <USB_CoreInit+0xe0>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f043 0206 	orr.w	r2, r3, #6
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f043 0220 	orr.w	r2, r3, #32
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b982:	b004      	add	sp, #16
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	ffbdffbf 	.word	0xffbdffbf
 800b98c:	03ee0000 	.word	0x03ee0000

0800b990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f023 0201 	bic.w	r2, r3, #1
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d115      	bne.n	800ba00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b9e0:	200a      	movs	r0, #10
 800b9e2:	f7f6 fd6b 	bl	80024bc <HAL_Delay>
      ms += 10U;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	330a      	adds	r3, #10
 800b9ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 fa25 	bl	800be3c <USB_GetMode>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d01e      	beq.n	800ba36 <USB_SetCurrentMode+0x84>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2bc7      	cmp	r3, #199	@ 0xc7
 800b9fc:	d9f0      	bls.n	800b9e0 <USB_SetCurrentMode+0x2e>
 800b9fe:	e01a      	b.n	800ba36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d115      	bne.n	800ba32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ba12:	200a      	movs	r0, #10
 800ba14:	f7f6 fd52 	bl	80024bc <HAL_Delay>
      ms += 10U;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	330a      	adds	r3, #10
 800ba1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa0c 	bl	800be3c <USB_GetMode>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d005      	beq.n	800ba36 <USB_SetCurrentMode+0x84>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ba2e:	d9f0      	bls.n	800ba12 <USB_SetCurrentMode+0x60>
 800ba30:	e001      	b.n	800ba36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e005      	b.n	800ba42 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2bc8      	cmp	r3, #200	@ 0xc8
 800ba3a:	d101      	bne.n	800ba40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e000      	b.n	800ba42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b086      	sub	sp, #24
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ba5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba66:	2300      	movs	r3, #0
 800ba68:	613b      	str	r3, [r7, #16]
 800ba6a:	e009      	b.n	800ba80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3340      	adds	r3, #64	@ 0x40
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	3301      	adds	r3, #1
 800ba7e:	613b      	str	r3, [r7, #16]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2b0e      	cmp	r3, #14
 800ba84:	d9f2      	bls.n	800ba6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba86:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d11c      	bne.n	800bac8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba9c:	f043 0302 	orr.w	r3, r3, #2
 800baa0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	e005      	b.n	800bad4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bacc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bada:	461a      	mov	r2, r3
 800badc:	2300      	movs	r3, #0
 800bade:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bae0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d10d      	bne.n	800bb04 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baec:	2b00      	cmp	r3, #0
 800baee:	d104      	bne.n	800bafa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800baf0:	2100      	movs	r1, #0
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f968 	bl	800bdc8 <USB_SetDevSpeed>
 800baf8:	e008      	b.n	800bb0c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bafa:	2101      	movs	r1, #1
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f963 	bl	800bdc8 <USB_SetDevSpeed>
 800bb02:	e003      	b.n	800bb0c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb04:	2103      	movs	r1, #3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f95e 	bl	800bdc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb0c:	2110      	movs	r1, #16
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f8fa 	bl	800bd08 <USB_FlushTxFifo>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d001      	beq.n	800bb1e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f924 	bl	800bd6c <USB_FlushRxFifo>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb34:	461a      	mov	r2, r3
 800bb36:	2300      	movs	r3, #0
 800bb38:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb40:	461a      	mov	r2, r3
 800bb42:	2300      	movs	r3, #0
 800bb44:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	2300      	movs	r3, #0
 800bb50:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb52:	2300      	movs	r3, #0
 800bb54:	613b      	str	r3, [r7, #16]
 800bb56:	e043      	b.n	800bbe0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb6e:	d118      	bne.n	800bba2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	015a      	lsls	r2, r3, #5
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb82:	461a      	mov	r2, r3
 800bb84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	e013      	b.n	800bbb4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	015a      	lsls	r2, r3, #5
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4413      	add	r3, r2
 800bb94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb98:	461a      	mov	r2, r3
 800bb9a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	e008      	b.n	800bbb4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbae:	461a      	mov	r2, r3
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	015a      	lsls	r2, r3, #5
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	015a      	lsls	r2, r3, #5
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	4413      	add	r3, r2
 800bbce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bbd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d3b5      	bcc.n	800bb58 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bbec:	2300      	movs	r3, #0
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	e043      	b.n	800bc7a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc08:	d118      	bne.n	800bc3c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10a      	bne.n	800bc26 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	e013      	b.n	800bc4e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc32:	461a      	mov	r2, r3
 800bc34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800bc38:	6013      	str	r3, [r2, #0]
 800bc3a:	e008      	b.n	800bc4e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc48:	461a      	mov	r2, r3
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	3301      	adds	r3, #1
 800bc78:	613b      	str	r3, [r7, #16]
 800bc7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bc7e:	461a      	mov	r2, r3
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d3b5      	bcc.n	800bbf2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc98:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800bca6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bca8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d105      	bne.n	800bcbc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	f043 0210 	orr.w	r2, r3, #16
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	699a      	ldr	r2, [r3, #24]
 800bcc0:	4b0f      	ldr	r3, [pc, #60]	@ (800bd00 <USB_DevInit+0x2b4>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bcc8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d005      	beq.n	800bcdc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	699b      	ldr	r3, [r3, #24]
 800bcd4:	f043 0208 	orr.w	r2, r3, #8
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bcdc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d105      	bne.n	800bcf0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	699a      	ldr	r2, [r3, #24]
 800bce8:	4b06      	ldr	r3, [pc, #24]	@ (800bd04 <USB_DevInit+0x2b8>)
 800bcea:	4313      	orrs	r3, r2
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bcfc:	b004      	add	sp, #16
 800bcfe:	4770      	bx	lr
 800bd00:	803c3800 	.word	0x803c3800
 800bd04:	40000004 	.word	0x40000004

0800bd08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd22:	d901      	bls.n	800bd28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e01b      	b.n	800bd60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	daf2      	bge.n	800bd16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	019b      	lsls	r3, r3, #6
 800bd38:	f043 0220 	orr.w	r2, r3, #32
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3301      	adds	r3, #1
 800bd44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd4c:	d901      	bls.n	800bd52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e006      	b.n	800bd60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d0f0      	beq.n	800bd40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd74:	2300      	movs	r3, #0
 800bd76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bd84:	d901      	bls.n	800bd8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e018      	b.n	800bdbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	daf2      	bge.n	800bd78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2210      	movs	r2, #16
 800bd9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bda8:	d901      	bls.n	800bdae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	e006      	b.n	800bdbc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	f003 0310 	and.w	r3, r3, #16
 800bdb6:	2b10      	cmp	r3, #16
 800bdb8:	d0f0      	beq.n	800bd9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bdba:	2300      	movs	r3, #0
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	78fb      	ldrb	r3, [r7, #3]
 800bde2:	68f9      	ldr	r1, [r7, #12]
 800bde4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bde8:	4313      	orrs	r3, r2
 800bdea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bdec:	2300      	movs	r3, #0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3714      	adds	r7, #20
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800be14:	f023 0303 	bic.w	r3, r3, #3
 800be18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be28:	f043 0302 	orr.w	r3, r3, #2
 800be2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	f003 0301 	and.w	r3, r3, #1
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	370c      	adds	r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be70:	d901      	bls.n	800be76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e01b      	b.n	800beae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	daf2      	bge.n	800be64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	f043 0201 	orr.w	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3301      	adds	r3, #1
 800be92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800be9a:	d901      	bls.n	800bea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e006      	b.n	800beae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d0f0      	beq.n	800be8e <USB_CoreReset+0x36>

  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
	...

0800bebc <__NVIC_SetPriority>:
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	4603      	mov	r3, r0
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800becc:	2b00      	cmp	r3, #0
 800bece:	db0a      	blt.n	800bee6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	490c      	ldr	r1, [pc, #48]	@ (800bf08 <__NVIC_SetPriority+0x4c>)
 800bed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beda:	0112      	lsls	r2, r2, #4
 800bedc:	b2d2      	uxtb	r2, r2
 800bede:	440b      	add	r3, r1
 800bee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bee4:	e00a      	b.n	800befc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	4908      	ldr	r1, [pc, #32]	@ (800bf0c <__NVIC_SetPriority+0x50>)
 800beec:	88fb      	ldrh	r3, [r7, #6]
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	3b04      	subs	r3, #4
 800bef4:	0112      	lsls	r2, r2, #4
 800bef6:	b2d2      	uxtb	r2, r2
 800bef8:	440b      	add	r3, r1
 800befa:	761a      	strb	r2, [r3, #24]
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	e000e100 	.word	0xe000e100
 800bf0c:	e000ed00 	.word	0xe000ed00

0800bf10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf10:	b580      	push	{r7, lr}
 800bf12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf14:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <SysTick_Handler+0x1c>)
 800bf16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf18:	f002 f984 	bl	800e224 <xTaskGetSchedulerState>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d001      	beq.n	800bf26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf22:	f000 fda1 	bl	800ca68 <xPortSysTickHandler>
  }
}
 800bf26:	bf00      	nop
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	e000e010 	.word	0xe000e010

0800bf30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf34:	2100      	movs	r1, #0
 800bf36:	f06f 0004 	mvn.w	r0, #4
 800bf3a:	f7ff ffbf 	bl	800bebc <__NVIC_SetPriority>
#endif
}
 800bf3e:	bf00      	nop
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf4a:	f3ef 8305 	mrs	r3, IPSR
 800bf4e:	603b      	str	r3, [r7, #0]
  return(result);
 800bf50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bf56:	f06f 0305 	mvn.w	r3, #5
 800bf5a:	607b      	str	r3, [r7, #4]
 800bf5c:	e00c      	b.n	800bf78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bf5e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf88 <osKernelInitialize+0x44>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d105      	bne.n	800bf72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bf66:	4b08      	ldr	r3, [pc, #32]	@ (800bf88 <osKernelInitialize+0x44>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	607b      	str	r3, [r7, #4]
 800bf70:	e002      	b.n	800bf78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bf72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf78:	687b      	ldr	r3, [r7, #4]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	370c      	adds	r7, #12
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	2400a6d0 	.word	0x2400a6d0

0800bf8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf92:	f3ef 8305 	mrs	r3, IPSR
 800bf96:	603b      	str	r3, [r7, #0]
  return(result);
 800bf98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bf9e:	f06f 0305 	mvn.w	r3, #5
 800bfa2:	607b      	str	r3, [r7, #4]
 800bfa4:	e010      	b.n	800bfc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800bfd4 <osKernelStart+0x48>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d109      	bne.n	800bfc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bfae:	f7ff ffbf 	bl	800bf30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bfb2:	4b08      	ldr	r3, [pc, #32]	@ (800bfd4 <osKernelStart+0x48>)
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bfb8:	f001 fcbe 	bl	800d938 <vTaskStartScheduler>
      stat = osOK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	607b      	str	r3, [r7, #4]
 800bfc0:	e002      	b.n	800bfc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bfc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfc8:	687b      	ldr	r3, [r7, #4]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	2400a6d0 	.word	0x2400a6d0

0800bfd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08e      	sub	sp, #56	@ 0x38
 800bfdc:	af04      	add	r7, sp, #16
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfe8:	f3ef 8305 	mrs	r3, IPSR
 800bfec:	617b      	str	r3, [r7, #20]
  return(result);
 800bfee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d17e      	bne.n	800c0f2 <osThreadNew+0x11a>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d07b      	beq.n	800c0f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bffa:	2380      	movs	r3, #128	@ 0x80
 800bffc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bffe:	2318      	movs	r3, #24
 800c000:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c002:	2300      	movs	r3, #0
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c00a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d045      	beq.n	800c09e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d002      	beq.n	800c020 <osThreadNew+0x48>
        name = attr->name;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d008      	beq.n	800c046 <osThreadNew+0x6e>
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	2b38      	cmp	r3, #56	@ 0x38
 800c038:	d805      	bhi.n	800c046 <osThreadNew+0x6e>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	f003 0301 	and.w	r3, r3, #1
 800c042:	2b00      	cmp	r3, #0
 800c044:	d001      	beq.n	800c04a <osThreadNew+0x72>
        return (NULL);
 800c046:	2300      	movs	r3, #0
 800c048:	e054      	b.n	800c0f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	089b      	lsrs	r3, r3, #2
 800c058:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00e      	beq.n	800c080 <osThreadNew+0xa8>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	2b5b      	cmp	r3, #91	@ 0x5b
 800c068:	d90a      	bls.n	800c080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d006      	beq.n	800c080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d002      	beq.n	800c080 <osThreadNew+0xa8>
        mem = 1;
 800c07a:	2301      	movs	r3, #1
 800c07c:	61bb      	str	r3, [r7, #24]
 800c07e:	e010      	b.n	800c0a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10c      	bne.n	800c0a2 <osThreadNew+0xca>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d108      	bne.n	800c0a2 <osThreadNew+0xca>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d104      	bne.n	800c0a2 <osThreadNew+0xca>
          mem = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	61bb      	str	r3, [r7, #24]
 800c09c:	e001      	b.n	800c0a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d110      	bne.n	800c0ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	6a3a      	ldr	r2, [r7, #32]
 800c0bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f001 fa5e 	bl	800d580 <xTaskCreateStatic>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	e013      	b.n	800c0f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d110      	bne.n	800c0f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	f107 0310 	add.w	r3, r7, #16
 800c0d8:	9301      	str	r3, [sp, #4]
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f001 faac 	bl	800d640 <xTaskCreate>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d001      	beq.n	800c0f2 <osThreadNew+0x11a>
            hTask = NULL;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c0f2:	693b      	ldr	r3, [r7, #16]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3728      	adds	r7, #40	@ 0x28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c104:	f3ef 8305 	mrs	r3, IPSR
 800c108:	60bb      	str	r3, [r7, #8]
  return(result);
 800c10a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d003      	beq.n	800c118 <osDelay+0x1c>
    stat = osErrorISR;
 800c110:	f06f 0305 	mvn.w	r3, #5
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	e007      	b.n	800c128 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c118:	2300      	movs	r3, #0
 800c11a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f001 fbd2 	bl	800d8cc <vTaskDelay>
    }
  }

  return (stat);
 800c128:	68fb      	ldr	r3, [r7, #12]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
	...

0800c134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4a07      	ldr	r2, [pc, #28]	@ (800c160 <vApplicationGetIdleTaskMemory+0x2c>)
 800c144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	4a06      	ldr	r2, [pc, #24]	@ (800c164 <vApplicationGetIdleTaskMemory+0x30>)
 800c14a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2280      	movs	r2, #128	@ 0x80
 800c150:	601a      	str	r2, [r3, #0]
}
 800c152:	bf00      	nop
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	2400a6d4 	.word	0x2400a6d4
 800c164:	2400a730 	.word	0x2400a730

0800c168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4a07      	ldr	r2, [pc, #28]	@ (800c194 <vApplicationGetTimerTaskMemory+0x2c>)
 800c178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	4a06      	ldr	r2, [pc, #24]	@ (800c198 <vApplicationGetTimerTaskMemory+0x30>)
 800c17e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c186:	601a      	str	r2, [r3, #0]
}
 800c188:	bf00      	nop
 800c18a:	3714      	adds	r7, #20
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	2400a930 	.word	0x2400a930
 800c198:	2400a98c 	.word	0x2400a98c

0800c19c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	@ 0x28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c1a8:	f001 fc2e 	bl	800da08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c1ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c320 <pvPortMalloc+0x184>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c1b4:	f000 f924 	bl	800c400 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c1b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c324 <pvPortMalloc+0x188>)
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4013      	ands	r3, r2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f040 8095 	bne.w	800c2f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d01e      	beq.n	800c20a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c1cc:	2208      	movs	r2, #8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d015      	beq.n	800c20a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f023 0307 	bic.w	r3, r3, #7
 800c1e4:	3308      	adds	r3, #8
 800c1e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f003 0307 	and.w	r3, r3, #7
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00b      	beq.n	800c20a <pvPortMalloc+0x6e>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	617b      	str	r3, [r7, #20]
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	e7fd      	b.n	800c206 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d06f      	beq.n	800c2f0 <pvPortMalloc+0x154>
 800c210:	4b45      	ldr	r3, [pc, #276]	@ (800c328 <pvPortMalloc+0x18c>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	429a      	cmp	r2, r3
 800c218:	d86a      	bhi.n	800c2f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c21a:	4b44      	ldr	r3, [pc, #272]	@ (800c32c <pvPortMalloc+0x190>)
 800c21c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c21e:	4b43      	ldr	r3, [pc, #268]	@ (800c32c <pvPortMalloc+0x190>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c224:	e004      	b.n	800c230 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	429a      	cmp	r2, r3
 800c238:	d903      	bls.n	800c242 <pvPortMalloc+0xa6>
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1f1      	bne.n	800c226 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c242:	4b37      	ldr	r3, [pc, #220]	@ (800c320 <pvPortMalloc+0x184>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c248:	429a      	cmp	r2, r3
 800c24a:	d051      	beq.n	800c2f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c24c:	6a3b      	ldr	r3, [r7, #32]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2208      	movs	r2, #8
 800c252:	4413      	add	r3, r2
 800c254:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	685a      	ldr	r2, [r3, #4]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	1ad2      	subs	r2, r2, r3
 800c266:	2308      	movs	r3, #8
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d920      	bls.n	800c2b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4413      	add	r3, r2
 800c274:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	f003 0307 	and.w	r3, r3, #7
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00b      	beq.n	800c298 <pvPortMalloc+0xfc>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	613b      	str	r3, [r7, #16]
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c2aa:	69b8      	ldr	r0, [r7, #24]
 800c2ac:	f000 f90a 	bl	800c4c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c2b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c328 <pvPortMalloc+0x18c>)
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c328 <pvPortMalloc+0x18c>)
 800c2bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c2be:	4b1a      	ldr	r3, [pc, #104]	@ (800c328 <pvPortMalloc+0x18c>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c330 <pvPortMalloc+0x194>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d203      	bcs.n	800c2d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c2ca:	4b17      	ldr	r3, [pc, #92]	@ (800c328 <pvPortMalloc+0x18c>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a18      	ldr	r2, [pc, #96]	@ (800c330 <pvPortMalloc+0x194>)
 800c2d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	4b13      	ldr	r3, [pc, #76]	@ (800c324 <pvPortMalloc+0x188>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	431a      	orrs	r2, r3
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c2e6:	4b13      	ldr	r3, [pc, #76]	@ (800c334 <pvPortMalloc+0x198>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	4a11      	ldr	r2, [pc, #68]	@ (800c334 <pvPortMalloc+0x198>)
 800c2ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2f0:	f001 fb98 	bl	800da24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00b      	beq.n	800c316 <pvPortMalloc+0x17a>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	60fb      	str	r3, [r7, #12]
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	e7fd      	b.n	800c312 <pvPortMalloc+0x176>
	return pvReturn;
 800c316:	69fb      	ldr	r3, [r7, #28]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3728      	adds	r7, #40	@ 0x28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	2400e994 	.word	0x2400e994
 800c324:	2400e9a8 	.word	0x2400e9a8
 800c328:	2400e998 	.word	0x2400e998
 800c32c:	2400e98c 	.word	0x2400e98c
 800c330:	2400e99c 	.word	0x2400e99c
 800c334:	2400e9a0 	.word	0x2400e9a0

0800c338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d04f      	beq.n	800c3ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c34a:	2308      	movs	r3, #8
 800c34c:	425b      	negs	r3, r3
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	4413      	add	r3, r2
 800c352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	4b25      	ldr	r3, [pc, #148]	@ (800c3f4 <vPortFree+0xbc>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4013      	ands	r3, r2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10b      	bne.n	800c37e <vPortFree+0x46>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60fb      	str	r3, [r7, #12]
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00b      	beq.n	800c39e <vPortFree+0x66>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	60bb      	str	r3, [r7, #8]
}
 800c398:	bf00      	nop
 800c39a:	bf00      	nop
 800c39c:	e7fd      	b.n	800c39a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	685a      	ldr	r2, [r3, #4]
 800c3a2:	4b14      	ldr	r3, [pc, #80]	@ (800c3f4 <vPortFree+0xbc>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01e      	beq.n	800c3ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d11a      	bne.n	800c3ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f4 <vPortFree+0xbc>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	43db      	mvns	r3, r3
 800c3be:	401a      	ands	r2, r3
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c3c4:	f001 fb20 	bl	800da08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f8 <vPortFree+0xc0>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	4a09      	ldr	r2, [pc, #36]	@ (800c3f8 <vPortFree+0xc0>)
 800c3d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3d6:	6938      	ldr	r0, [r7, #16]
 800c3d8:	f000 f874 	bl	800c4c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c3dc:	4b07      	ldr	r3, [pc, #28]	@ (800c3fc <vPortFree+0xc4>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	4a06      	ldr	r2, [pc, #24]	@ (800c3fc <vPortFree+0xc4>)
 800c3e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c3e6:	f001 fb1d 	bl	800da24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3ea:	bf00      	nop
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	2400e9a8 	.word	0x2400e9a8
 800c3f8:	2400e998 	.word	0x2400e998
 800c3fc:	2400e9a4 	.word	0x2400e9a4

0800c400 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c406:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c40a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c40c:	4b27      	ldr	r3, [pc, #156]	@ (800c4ac <prvHeapInit+0xac>)
 800c40e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f003 0307 	and.w	r3, r3, #7
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00c      	beq.n	800c434 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3307      	adds	r3, #7
 800c41e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0307 	bic.w	r3, r3, #7
 800c426:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	4a1f      	ldr	r2, [pc, #124]	@ (800c4ac <prvHeapInit+0xac>)
 800c430:	4413      	add	r3, r2
 800c432:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c438:	4a1d      	ldr	r2, [pc, #116]	@ (800c4b0 <prvHeapInit+0xb0>)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c43e:	4b1c      	ldr	r3, [pc, #112]	@ (800c4b0 <prvHeapInit+0xb0>)
 800c440:	2200      	movs	r2, #0
 800c442:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	4413      	add	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c44c:	2208      	movs	r2, #8
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	1a9b      	subs	r3, r3, r2
 800c452:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f023 0307 	bic.w	r3, r3, #7
 800c45a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	4a15      	ldr	r2, [pc, #84]	@ (800c4b4 <prvHeapInit+0xb4>)
 800c460:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c462:	4b14      	ldr	r3, [pc, #80]	@ (800c4b4 <prvHeapInit+0xb4>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2200      	movs	r2, #0
 800c468:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c46a:	4b12      	ldr	r3, [pc, #72]	@ (800c4b4 <prvHeapInit+0xb4>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	1ad2      	subs	r2, r2, r3
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c480:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b4 <prvHeapInit+0xb4>)
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	4a0a      	ldr	r2, [pc, #40]	@ (800c4b8 <prvHeapInit+0xb8>)
 800c48e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4a09      	ldr	r2, [pc, #36]	@ (800c4bc <prvHeapInit+0xbc>)
 800c496:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c498:	4b09      	ldr	r3, [pc, #36]	@ (800c4c0 <prvHeapInit+0xc0>)
 800c49a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c49e:	601a      	str	r2, [r3, #0]
}
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	2400ad8c 	.word	0x2400ad8c
 800c4b0:	2400e98c 	.word	0x2400e98c
 800c4b4:	2400e994 	.word	0x2400e994
 800c4b8:	2400e99c 	.word	0x2400e99c
 800c4bc:	2400e998 	.word	0x2400e998
 800c4c0:	2400e9a8 	.word	0x2400e9a8

0800c4c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c4cc:	4b28      	ldr	r3, [pc, #160]	@ (800c570 <prvInsertBlockIntoFreeList+0xac>)
 800c4ce:	60fb      	str	r3, [r7, #12]
 800c4d0:	e002      	b.n	800c4d8 <prvInsertBlockIntoFreeList+0x14>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	60fb      	str	r3, [r7, #12]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d8f7      	bhi.n	800c4d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	68ba      	ldr	r2, [r7, #8]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d108      	bne.n	800c506 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	685a      	ldr	r2, [r3, #4]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	441a      	add	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	441a      	add	r2, r3
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	429a      	cmp	r2, r3
 800c518:	d118      	bne.n	800c54c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	4b15      	ldr	r3, [pc, #84]	@ (800c574 <prvInsertBlockIntoFreeList+0xb0>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d00d      	beq.n	800c542 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	441a      	add	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	e008      	b.n	800c554 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c542:	4b0c      	ldr	r3, [pc, #48]	@ (800c574 <prvInsertBlockIntoFreeList+0xb0>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	e003      	b.n	800c554 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d002      	beq.n	800c562 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c562:	bf00      	nop
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	2400e98c 	.word	0x2400e98c
 800c574:	2400e994 	.word	0x2400e994

0800c578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f103 0208 	add.w	r2, r3, #8
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f103 0208 	add.w	r2, r3, #8
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f103 0208 	add.w	r2, r3, #8
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c5ac:	bf00      	nop
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr

0800c5d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c5d2:	b480      	push	{r7}
 800c5d4:	b085      	sub	sp, #20
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
 800c5da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	1c5a      	adds	r2, r3, #1
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	601a      	str	r2, [r3, #0]
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c61a:	b480      	push	{r7}
 800c61c:	b085      	sub	sp, #20
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
 800c622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c630:	d103      	bne.n	800c63a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e00c      	b.n	800c654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3308      	adds	r3, #8
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e002      	b.n	800c648 <vListInsert+0x2e>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	429a      	cmp	r2, r3
 800c652:	d2f6      	bcs.n	800c642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	683a      	ldr	r2, [r7, #0]
 800c662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	601a      	str	r2, [r3, #0]
}
 800c680:	bf00      	nop
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	6892      	ldr	r2, [r2, #8]
 800c6a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	6852      	ldr	r2, [r2, #4]
 800c6ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d103      	bne.n	800c6c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689a      	ldr	r2, [r3, #8]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	1e5a      	subs	r2, r3, #1
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	3b04      	subs	r3, #4
 800c6f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c6f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3b04      	subs	r3, #4
 800c6fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f023 0201 	bic.w	r2, r3, #1
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3b04      	subs	r3, #4
 800c70e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c710:	4a0c      	ldr	r2, [pc, #48]	@ (800c744 <pxPortInitialiseStack+0x64>)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3b14      	subs	r3, #20
 800c71a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c71c:	687a      	ldr	r2, [r7, #4]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3b04      	subs	r3, #4
 800c726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f06f 0202 	mvn.w	r2, #2
 800c72e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3b20      	subs	r3, #32
 800c734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c736:	68fb      	ldr	r3, [r7, #12]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3714      	adds	r7, #20
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	0800c749 	.word	0x0800c749

0800c748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c74e:	2300      	movs	r3, #0
 800c750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c752:	4b13      	ldr	r3, [pc, #76]	@ (800c7a0 <prvTaskExitError+0x58>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c75a:	d00b      	beq.n	800c774 <prvTaskExitError+0x2c>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	60fb      	str	r3, [r7, #12]
}
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
 800c772:	e7fd      	b.n	800c770 <prvTaskExitError+0x28>
	__asm volatile
 800c774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c778:	f383 8811 	msr	BASEPRI, r3
 800c77c:	f3bf 8f6f 	isb	sy
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	60bb      	str	r3, [r7, #8]
}
 800c786:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c788:	bf00      	nop
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0fc      	beq.n	800c78a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c790:	bf00      	nop
 800c792:	bf00      	nop
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	24000014 	.word	0x24000014
	...

0800c7b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7b0:	4b07      	ldr	r3, [pc, #28]	@ (800c7d0 <pxCurrentTCBConst2>)
 800c7b2:	6819      	ldr	r1, [r3, #0]
 800c7b4:	6808      	ldr	r0, [r1, #0]
 800c7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ba:	f380 8809 	msr	PSP, r0
 800c7be:	f3bf 8f6f 	isb	sy
 800c7c2:	f04f 0000 	mov.w	r0, #0
 800c7c6:	f380 8811 	msr	BASEPRI, r0
 800c7ca:	4770      	bx	lr
 800c7cc:	f3af 8000 	nop.w

0800c7d0 <pxCurrentTCBConst2>:
 800c7d0:	2400e9f4 	.word	0x2400e9f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop

0800c7d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7d8:	4808      	ldr	r0, [pc, #32]	@ (800c7fc <prvPortStartFirstTask+0x24>)
 800c7da:	6800      	ldr	r0, [r0, #0]
 800c7dc:	6800      	ldr	r0, [r0, #0]
 800c7de:	f380 8808 	msr	MSP, r0
 800c7e2:	f04f 0000 	mov.w	r0, #0
 800c7e6:	f380 8814 	msr	CONTROL, r0
 800c7ea:	b662      	cpsie	i
 800c7ec:	b661      	cpsie	f
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	df00      	svc	0
 800c7f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c7fa:	bf00      	nop
 800c7fc:	e000ed08 	.word	0xe000ed08

0800c800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c806:	4b47      	ldr	r3, [pc, #284]	@ (800c924 <xPortStartScheduler+0x124>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a47      	ldr	r2, [pc, #284]	@ (800c928 <xPortStartScheduler+0x128>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d10b      	bne.n	800c828 <xPortStartScheduler+0x28>
	__asm volatile
 800c810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	613b      	str	r3, [r7, #16]
}
 800c822:	bf00      	nop
 800c824:	bf00      	nop
 800c826:	e7fd      	b.n	800c824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c828:	4b3e      	ldr	r3, [pc, #248]	@ (800c924 <xPortStartScheduler+0x124>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a3f      	ldr	r2, [pc, #252]	@ (800c92c <xPortStartScheduler+0x12c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d10b      	bne.n	800c84a <xPortStartScheduler+0x4a>
	__asm volatile
 800c832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	60fb      	str	r3, [r7, #12]
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	e7fd      	b.n	800c846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c84a:	4b39      	ldr	r3, [pc, #228]	@ (800c930 <xPortStartScheduler+0x130>)
 800c84c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	22ff      	movs	r2, #255	@ 0xff
 800c85a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	b2db      	uxtb	r3, r3
 800c862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	b2db      	uxtb	r3, r3
 800c868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	4b31      	ldr	r3, [pc, #196]	@ (800c934 <xPortStartScheduler+0x134>)
 800c870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c872:	4b31      	ldr	r3, [pc, #196]	@ (800c938 <xPortStartScheduler+0x138>)
 800c874:	2207      	movs	r2, #7
 800c876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c878:	e009      	b.n	800c88e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c87a:	4b2f      	ldr	r3, [pc, #188]	@ (800c938 <xPortStartScheduler+0x138>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3b01      	subs	r3, #1
 800c880:	4a2d      	ldr	r2, [pc, #180]	@ (800c938 <xPortStartScheduler+0x138>)
 800c882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	005b      	lsls	r3, r3, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c88e:	78fb      	ldrb	r3, [r7, #3]
 800c890:	b2db      	uxtb	r3, r3
 800c892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c896:	2b80      	cmp	r3, #128	@ 0x80
 800c898:	d0ef      	beq.n	800c87a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c89a:	4b27      	ldr	r3, [pc, #156]	@ (800c938 <xPortStartScheduler+0x138>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f1c3 0307 	rsb	r3, r3, #7
 800c8a2:	2b04      	cmp	r3, #4
 800c8a4:	d00b      	beq.n	800c8be <xPortStartScheduler+0xbe>
	__asm volatile
 800c8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8aa:	f383 8811 	msr	BASEPRI, r3
 800c8ae:	f3bf 8f6f 	isb	sy
 800c8b2:	f3bf 8f4f 	dsb	sy
 800c8b6:	60bb      	str	r3, [r7, #8]
}
 800c8b8:	bf00      	nop
 800c8ba:	bf00      	nop
 800c8bc:	e7fd      	b.n	800c8ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8be:	4b1e      	ldr	r3, [pc, #120]	@ (800c938 <xPortStartScheduler+0x138>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	021b      	lsls	r3, r3, #8
 800c8c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c938 <xPortStartScheduler+0x138>)
 800c8c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c938 <xPortStartScheduler+0x138>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c8d0:	4a19      	ldr	r2, [pc, #100]	@ (800c938 <xPortStartScheduler+0x138>)
 800c8d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8dc:	4b17      	ldr	r3, [pc, #92]	@ (800c93c <xPortStartScheduler+0x13c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a16      	ldr	r2, [pc, #88]	@ (800c93c <xPortStartScheduler+0x13c>)
 800c8e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c8e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8e8:	4b14      	ldr	r3, [pc, #80]	@ (800c93c <xPortStartScheduler+0x13c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a13      	ldr	r2, [pc, #76]	@ (800c93c <xPortStartScheduler+0x13c>)
 800c8ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c8f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8f4:	f000 f8da 	bl	800caac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c8f8:	4b11      	ldr	r3, [pc, #68]	@ (800c940 <xPortStartScheduler+0x140>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c8fe:	f000 f8f9 	bl	800caf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c902:	4b10      	ldr	r3, [pc, #64]	@ (800c944 <xPortStartScheduler+0x144>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a0f      	ldr	r2, [pc, #60]	@ (800c944 <xPortStartScheduler+0x144>)
 800c908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c90c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c90e:	f7ff ff63 	bl	800c7d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c912:	f001 f9ef 	bl	800dcf4 <vTaskSwitchContext>
	prvTaskExitError();
 800c916:	f7ff ff17 	bl	800c748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3718      	adds	r7, #24
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	e000ed00 	.word	0xe000ed00
 800c928:	410fc271 	.word	0x410fc271
 800c92c:	410fc270 	.word	0x410fc270
 800c930:	e000e400 	.word	0xe000e400
 800c934:	2400e9ac 	.word	0x2400e9ac
 800c938:	2400e9b0 	.word	0x2400e9b0
 800c93c:	e000ed20 	.word	0xe000ed20
 800c940:	24000014 	.word	0x24000014
 800c944:	e000ef34 	.word	0xe000ef34

0800c948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	607b      	str	r3, [r7, #4]
}
 800c960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c962:	4b10      	ldr	r3, [pc, #64]	@ (800c9a4 <vPortEnterCritical+0x5c>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	3301      	adds	r3, #1
 800c968:	4a0e      	ldr	r2, [pc, #56]	@ (800c9a4 <vPortEnterCritical+0x5c>)
 800c96a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c96c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a4 <vPortEnterCritical+0x5c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d110      	bne.n	800c996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c974:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <vPortEnterCritical+0x60>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <vPortEnterCritical+0x4e>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	603b      	str	r3, [r7, #0]
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	e7fd      	b.n	800c992 <vPortEnterCritical+0x4a>
	}
}
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	24000014 	.word	0x24000014
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9b2:	4b12      	ldr	r3, [pc, #72]	@ (800c9fc <vPortExitCritical+0x50>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d10b      	bne.n	800c9d2 <vPortExitCritical+0x26>
	__asm volatile
 800c9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	607b      	str	r3, [r7, #4]
}
 800c9cc:	bf00      	nop
 800c9ce:	bf00      	nop
 800c9d0:	e7fd      	b.n	800c9ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9fc <vPortExitCritical+0x50>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	4a08      	ldr	r2, [pc, #32]	@ (800c9fc <vPortExitCritical+0x50>)
 800c9da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9dc:	4b07      	ldr	r3, [pc, #28]	@ (800c9fc <vPortExitCritical+0x50>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d105      	bne.n	800c9f0 <vPortExitCritical+0x44>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c9ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	24000014 	.word	0x24000014

0800ca00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca00:	f3ef 8009 	mrs	r0, PSP
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	4b15      	ldr	r3, [pc, #84]	@ (800ca60 <pxCurrentTCBConst>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	f01e 0f10 	tst.w	lr, #16
 800ca10:	bf08      	it	eq
 800ca12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1a:	6010      	str	r0, [r2, #0]
 800ca1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca24:	f380 8811 	msr	BASEPRI, r0
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f001 f960 	bl	800dcf4 <vTaskSwitchContext>
 800ca34:	f04f 0000 	mov.w	r0, #0
 800ca38:	f380 8811 	msr	BASEPRI, r0
 800ca3c:	bc09      	pop	{r0, r3}
 800ca3e:	6819      	ldr	r1, [r3, #0]
 800ca40:	6808      	ldr	r0, [r1, #0]
 800ca42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca46:	f01e 0f10 	tst.w	lr, #16
 800ca4a:	bf08      	it	eq
 800ca4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca50:	f380 8809 	msr	PSP, r0
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	f3af 8000 	nop.w

0800ca60 <pxCurrentTCBConst>:
 800ca60:	2400e9f4 	.word	0x2400e9f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca64:	bf00      	nop
 800ca66:	bf00      	nop

0800ca68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	607b      	str	r3, [r7, #4]
}
 800ca80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca82:	f001 f87d 	bl	800db80 <xTaskIncrementTick>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca8c:	4b06      	ldr	r3, [pc, #24]	@ (800caa8 <xPortSysTickHandler+0x40>)
 800ca8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	2300      	movs	r3, #0
 800ca96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	f383 8811 	msr	BASEPRI, r3
}
 800ca9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	e000ed04 	.word	0xe000ed04

0800caac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800caac:	b480      	push	{r7}
 800caae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cab0:	4b0b      	ldr	r3, [pc, #44]	@ (800cae0 <vPortSetupTimerInterrupt+0x34>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cab6:	4b0b      	ldr	r3, [pc, #44]	@ (800cae4 <vPortSetupTimerInterrupt+0x38>)
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cabc:	4b0a      	ldr	r3, [pc, #40]	@ (800cae8 <vPortSetupTimerInterrupt+0x3c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a0a      	ldr	r2, [pc, #40]	@ (800caec <vPortSetupTimerInterrupt+0x40>)
 800cac2:	fba2 2303 	umull	r2, r3, r2, r3
 800cac6:	099b      	lsrs	r3, r3, #6
 800cac8:	4a09      	ldr	r2, [pc, #36]	@ (800caf0 <vPortSetupTimerInterrupt+0x44>)
 800caca:	3b01      	subs	r3, #1
 800cacc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cace:	4b04      	ldr	r3, [pc, #16]	@ (800cae0 <vPortSetupTimerInterrupt+0x34>)
 800cad0:	2207      	movs	r2, #7
 800cad2:	601a      	str	r2, [r3, #0]
}
 800cad4:	bf00      	nop
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	e000e010 	.word	0xe000e010
 800cae4:	e000e018 	.word	0xe000e018
 800cae8:	24000000 	.word	0x24000000
 800caec:	10624dd3 	.word	0x10624dd3
 800caf0:	e000e014 	.word	0xe000e014

0800caf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800caf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cb04 <vPortEnableVFP+0x10>
 800caf8:	6801      	ldr	r1, [r0, #0]
 800cafa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cafe:	6001      	str	r1, [r0, #0]
 800cb00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb02:	bf00      	nop
 800cb04:	e000ed88 	.word	0xe000ed88

0800cb08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb0e:	f3ef 8305 	mrs	r3, IPSR
 800cb12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b0f      	cmp	r3, #15
 800cb18:	d915      	bls.n	800cb46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb1a:	4a18      	ldr	r2, [pc, #96]	@ (800cb7c <vPortValidateInterruptPriority+0x74>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	4413      	add	r3, r2
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb24:	4b16      	ldr	r3, [pc, #88]	@ (800cb80 <vPortValidateInterruptPriority+0x78>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	7afa      	ldrb	r2, [r7, #11]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d20b      	bcs.n	800cb46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	607b      	str	r3, [r7, #4]
}
 800cb40:	bf00      	nop
 800cb42:	bf00      	nop
 800cb44:	e7fd      	b.n	800cb42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb46:	4b0f      	ldr	r3, [pc, #60]	@ (800cb84 <vPortValidateInterruptPriority+0x7c>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb4e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb88 <vPortValidateInterruptPriority+0x80>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d90b      	bls.n	800cb6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	603b      	str	r3, [r7, #0]
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	e7fd      	b.n	800cb6a <vPortValidateInterruptPriority+0x62>
	}
 800cb6e:	bf00      	nop
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	e000e3f0 	.word	0xe000e3f0
 800cb80:	2400e9ac 	.word	0x2400e9ac
 800cb84:	e000ed0c 	.word	0xe000ed0c
 800cb88:	2400e9b0 	.word	0x2400e9b0

0800cb8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10b      	bne.n	800cbb8 <xQueueGenericReset+0x2c>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	60bb      	str	r3, [r7, #8]
}
 800cbb2:	bf00      	nop
 800cbb4:	bf00      	nop
 800cbb6:	e7fd      	b.n	800cbb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cbb8:	f7ff fec6 	bl	800c948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681a      	ldr	r2, [r3, #0]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	441a      	add	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	68f9      	ldr	r1, [r7, #12]
 800cbec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cbee:	fb01 f303 	mul.w	r3, r1, r3
 800cbf2:	441a      	add	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	22ff      	movs	r2, #255	@ 0xff
 800cbfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	22ff      	movs	r2, #255	@ 0xff
 800cc04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d114      	bne.n	800cc38 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	691b      	ldr	r3, [r3, #16]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d01a      	beq.n	800cc4c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	3310      	adds	r3, #16
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 f91a 	bl	800de54 <xTaskRemoveFromEventList>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d012      	beq.n	800cc4c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc26:	4b0d      	ldr	r3, [pc, #52]	@ (800cc5c <xQueueGenericReset+0xd0>)
 800cc28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc2c:	601a      	str	r2, [r3, #0]
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	f3bf 8f6f 	isb	sy
 800cc36:	e009      	b.n	800cc4c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	3310      	adds	r3, #16
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff fc9b 	bl	800c578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3324      	adds	r3, #36	@ 0x24
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7ff fc96 	bl	800c578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc4c:	f7ff feae 	bl	800c9ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc50:	2301      	movs	r3, #1
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	e000ed04 	.word	0xe000ed04

0800cc60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b08e      	sub	sp, #56	@ 0x38
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
 800cc6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10b      	bne.n	800cc8c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	e7fd      	b.n	800cc88 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10b      	bne.n	800ccaa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop
 800cca8:	e7fd      	b.n	800cca6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <xQueueGenericCreateStatic+0x56>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <xQueueGenericCreateStatic+0x5a>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <xQueueGenericCreateStatic+0x5c>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10b      	bne.n	800ccd8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	623b      	str	r3, [r7, #32]
}
 800ccd2:	bf00      	nop
 800ccd4:	bf00      	nop
 800ccd6:	e7fd      	b.n	800ccd4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d102      	bne.n	800cce4 <xQueueGenericCreateStatic+0x84>
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <xQueueGenericCreateStatic+0x88>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e000      	b.n	800ccea <xQueueGenericCreateStatic+0x8a>
 800cce8:	2300      	movs	r3, #0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10b      	bne.n	800cd06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ccee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	61fb      	str	r3, [r7, #28]
}
 800cd00:	bf00      	nop
 800cd02:	bf00      	nop
 800cd04:	e7fd      	b.n	800cd02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd06:	2350      	movs	r3, #80	@ 0x50
 800cd08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b50      	cmp	r3, #80	@ 0x50
 800cd0e:	d00b      	beq.n	800cd28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61bb      	str	r3, [r7, #24]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800cd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00d      	beq.n	800cd50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800cd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	4613      	mov	r3, r2
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f000 f805 	bl	800cd5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3730      	adds	r7, #48	@ 0x30
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
 800cd66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d103      	bne.n	800cd76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	69ba      	ldr	r2, [r7, #24]
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	e002      	b.n	800cd7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd7c:	69bb      	ldr	r3, [r7, #24]
 800cd7e:	68fa      	ldr	r2, [r7, #12]
 800cd80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd88:	2101      	movs	r1, #1
 800cd8a:	69b8      	ldr	r0, [r7, #24]
 800cd8c:	f7ff fefe 	bl	800cb8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	78fa      	ldrb	r2, [r7, #3]
 800cd94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd98:	bf00      	nop
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b08e      	sub	sp, #56	@ 0x38
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
 800cdac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10b      	bne.n	800cdd4 <xQueueGenericSend+0x34>
	__asm volatile
 800cdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc0:	f383 8811 	msr	BASEPRI, r3
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	f3bf 8f4f 	dsb	sy
 800cdcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cdce:	bf00      	nop
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d103      	bne.n	800cde2 <xQueueGenericSend+0x42>
 800cdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d101      	bne.n	800cde6 <xQueueGenericSend+0x46>
 800cde2:	2301      	movs	r3, #1
 800cde4:	e000      	b.n	800cde8 <xQueueGenericSend+0x48>
 800cde6:	2300      	movs	r3, #0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10b      	bne.n	800ce04 <xQueueGenericSend+0x64>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf0:	f383 8811 	msr	BASEPRI, r3
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cdfe:	bf00      	nop
 800ce00:	bf00      	nop
 800ce02:	e7fd      	b.n	800ce00 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d103      	bne.n	800ce12 <xQueueGenericSend+0x72>
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d101      	bne.n	800ce16 <xQueueGenericSend+0x76>
 800ce12:	2301      	movs	r3, #1
 800ce14:	e000      	b.n	800ce18 <xQueueGenericSend+0x78>
 800ce16:	2300      	movs	r3, #0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d10b      	bne.n	800ce34 <xQueueGenericSend+0x94>
	__asm volatile
 800ce1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	623b      	str	r3, [r7, #32]
}
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
 800ce32:	e7fd      	b.n	800ce30 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce34:	f001 f9f6 	bl	800e224 <xTaskGetSchedulerState>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <xQueueGenericSend+0xa4>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d101      	bne.n	800ce48 <xQueueGenericSend+0xa8>
 800ce44:	2301      	movs	r3, #1
 800ce46:	e000      	b.n	800ce4a <xQueueGenericSend+0xaa>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10b      	bne.n	800ce66 <xQueueGenericSend+0xc6>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	61fb      	str	r3, [r7, #28]
}
 800ce60:	bf00      	nop
 800ce62:	bf00      	nop
 800ce64:	e7fd      	b.n	800ce62 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce66:	f7ff fd6f 	bl	800c948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d302      	bcc.n	800ce7c <xQueueGenericSend+0xdc>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d129      	bne.n	800ced0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce82:	f000 fa0f 	bl	800d2a4 <prvCopyDataToQueue>
 800ce86:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d010      	beq.n	800ceb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce92:	3324      	adds	r3, #36	@ 0x24
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 ffdd 	bl	800de54 <xTaskRemoveFromEventList>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d013      	beq.n	800cec8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cea0:	4b3f      	ldr	r3, [pc, #252]	@ (800cfa0 <xQueueGenericSend+0x200>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	e00a      	b.n	800cec8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d007      	beq.n	800cec8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ceb8:	4b39      	ldr	r3, [pc, #228]	@ (800cfa0 <xQueueGenericSend+0x200>)
 800ceba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cebe:	601a      	str	r2, [r3, #0]
 800cec0:	f3bf 8f4f 	dsb	sy
 800cec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cec8:	f7ff fd70 	bl	800c9ac <vPortExitCritical>
				return pdPASS;
 800cecc:	2301      	movs	r3, #1
 800cece:	e063      	b.n	800cf98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d103      	bne.n	800cede <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ced6:	f7ff fd69 	bl	800c9ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ceda:	2300      	movs	r3, #0
 800cedc:	e05c      	b.n	800cf98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d106      	bne.n	800cef2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cee4:	f107 0314 	add.w	r3, r7, #20
 800cee8:	4618      	mov	r0, r3
 800ceea:	f001 f83f 	bl	800df6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ceee:	2301      	movs	r3, #1
 800cef0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cef2:	f7ff fd5b 	bl	800c9ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cef6:	f000 fd87 	bl	800da08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cefa:	f7ff fd25 	bl	800c948 <vPortEnterCritical>
 800cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf04:	b25b      	sxtb	r3, r3
 800cf06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf0a:	d103      	bne.n	800cf14 <xQueueGenericSend+0x174>
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf20:	d103      	bne.n	800cf2a <xQueueGenericSend+0x18a>
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf2a:	f7ff fd3f 	bl	800c9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf2e:	1d3a      	adds	r2, r7, #4
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	4611      	mov	r1, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 f82e 	bl	800df98 <xTaskCheckForTimeOut>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d124      	bne.n	800cf8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf44:	f000 faa6 	bl	800d494 <prvIsQueueFull>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d018      	beq.n	800cf80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf50:	3310      	adds	r3, #16
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	4611      	mov	r1, r2
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 ff2a 	bl	800ddb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf5e:	f000 fa31 	bl	800d3c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf62:	f000 fd5f 	bl	800da24 <xTaskResumeAll>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f47f af7c 	bne.w	800ce66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cf6e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfa0 <xQueueGenericSend+0x200>)
 800cf70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	e772      	b.n	800ce66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf82:	f000 fa1f 	bl	800d3c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf86:	f000 fd4d 	bl	800da24 <xTaskResumeAll>
 800cf8a:	e76c      	b.n	800ce66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf8e:	f000 fa19 	bl	800d3c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf92:	f000 fd47 	bl	800da24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3738      	adds	r7, #56	@ 0x38
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	e000ed04 	.word	0xe000ed04

0800cfa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b090      	sub	sp, #64	@ 0x40
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10b      	bne.n	800cfd4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cfce:	bf00      	nop
 800cfd0:	bf00      	nop
 800cfd2:	e7fd      	b.n	800cfd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <xQueueGenericSendFromISR+0x3e>
 800cfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d101      	bne.n	800cfe6 <xQueueGenericSendFromISR+0x42>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e000      	b.n	800cfe8 <xQueueGenericSendFromISR+0x44>
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10b      	bne.n	800d004 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cffe:	bf00      	nop
 800d000:	bf00      	nop
 800d002:	e7fd      	b.n	800d000 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	2b02      	cmp	r3, #2
 800d008:	d103      	bne.n	800d012 <xQueueGenericSendFromISR+0x6e>
 800d00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d101      	bne.n	800d016 <xQueueGenericSendFromISR+0x72>
 800d012:	2301      	movs	r3, #1
 800d014:	e000      	b.n	800d018 <xQueueGenericSendFromISR+0x74>
 800d016:	2300      	movs	r3, #0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10b      	bne.n	800d034 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	623b      	str	r3, [r7, #32]
}
 800d02e:	bf00      	nop
 800d030:	bf00      	nop
 800d032:	e7fd      	b.n	800d030 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d034:	f7ff fd68 	bl	800cb08 <vPortValidateInterruptPriority>
	__asm volatile
 800d038:	f3ef 8211 	mrs	r2, BASEPRI
 800d03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	61fa      	str	r2, [r7, #28]
 800d04e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d050:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d052:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d302      	bcc.n	800d066 <xQueueGenericSendFromISR+0xc2>
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d12f      	bne.n	800d0c6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d068:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d06c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d074:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	68b9      	ldr	r1, [r7, #8]
 800d07a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d07c:	f000 f912 	bl	800d2a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d080:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d088:	d112      	bne.n	800d0b0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d016      	beq.n	800d0c0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d094:	3324      	adds	r3, #36	@ 0x24
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fedc 	bl	800de54 <xTaskRemoveFromEventList>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00e      	beq.n	800d0c0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00b      	beq.n	800d0c0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	e007      	b.n	800d0c0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	b25a      	sxtb	r2, r3
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d0c4:	e001      	b.n	800d0ca <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0cc:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f383 8811 	msr	BASEPRI, r3
}
 800d0d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3740      	adds	r7, #64	@ 0x40
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b08c      	sub	sp, #48	@ 0x30
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10b      	bne.n	800d112 <xQueueReceive+0x32>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	623b      	str	r3, [r7, #32]
}
 800d10c:	bf00      	nop
 800d10e:	bf00      	nop
 800d110:	e7fd      	b.n	800d10e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d103      	bne.n	800d120 <xQueueReceive+0x40>
 800d118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <xQueueReceive+0x44>
 800d120:	2301      	movs	r3, #1
 800d122:	e000      	b.n	800d126 <xQueueReceive+0x46>
 800d124:	2300      	movs	r3, #0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d10b      	bne.n	800d142 <xQueueReceive+0x62>
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	61fb      	str	r3, [r7, #28]
}
 800d13c:	bf00      	nop
 800d13e:	bf00      	nop
 800d140:	e7fd      	b.n	800d13e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d142:	f001 f86f 	bl	800e224 <xTaskGetSchedulerState>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d102      	bne.n	800d152 <xQueueReceive+0x72>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <xQueueReceive+0x76>
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <xQueueReceive+0x78>
 800d156:	2300      	movs	r3, #0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10b      	bne.n	800d174 <xQueueReceive+0x94>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	61bb      	str	r3, [r7, #24]
}
 800d16e:	bf00      	nop
 800d170:	bf00      	nop
 800d172:	e7fd      	b.n	800d170 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d174:	f7ff fbe8 	bl	800c948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d17c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d180:	2b00      	cmp	r3, #0
 800d182:	d01f      	beq.n	800d1c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d184:	68b9      	ldr	r1, [r7, #8]
 800d186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d188:	f000 f8f6 	bl	800d378 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18e:	1e5a      	subs	r2, r3, #1
 800d190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d192:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00f      	beq.n	800d1bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19e:	3310      	adds	r3, #16
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f000 fe57 	bl	800de54 <xTaskRemoveFromEventList>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d007      	beq.n	800d1bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d1ac:	4b3c      	ldr	r3, [pc, #240]	@ (800d2a0 <xQueueReceive+0x1c0>)
 800d1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d1bc:	f7ff fbf6 	bl	800c9ac <vPortExitCritical>
				return pdPASS;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e069      	b.n	800d298 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d103      	bne.n	800d1d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1ca:	f7ff fbef 	bl	800c9ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e062      	b.n	800d298 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d106      	bne.n	800d1e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d1d8:	f107 0310 	add.w	r3, r7, #16
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f000 fec5 	bl	800df6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1e6:	f7ff fbe1 	bl	800c9ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1ea:	f000 fc0d 	bl	800da08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1ee:	f7ff fbab 	bl	800c948 <vPortEnterCritical>
 800d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d1f8:	b25b      	sxtb	r3, r3
 800d1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1fe:	d103      	bne.n	800d208 <xQueueReceive+0x128>
 800d200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d202:	2200      	movs	r2, #0
 800d204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d20e:	b25b      	sxtb	r3, r3
 800d210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d214:	d103      	bne.n	800d21e <xQueueReceive+0x13e>
 800d216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d21e:	f7ff fbc5 	bl	800c9ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d222:	1d3a      	adds	r2, r7, #4
 800d224:	f107 0310 	add.w	r3, r7, #16
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f000 feb4 	bl	800df98 <xTaskCheckForTimeOut>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d123      	bne.n	800d27e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d238:	f000 f916 	bl	800d468 <prvIsQueueEmpty>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d017      	beq.n	800d272 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d244:	3324      	adds	r3, #36	@ 0x24
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	4611      	mov	r1, r2
 800d24a:	4618      	mov	r0, r3
 800d24c:	f000 fdb0 	bl	800ddb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d252:	f000 f8b7 	bl	800d3c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d256:	f000 fbe5 	bl	800da24 <xTaskResumeAll>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d189      	bne.n	800d174 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d260:	4b0f      	ldr	r3, [pc, #60]	@ (800d2a0 <xQueueReceive+0x1c0>)
 800d262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d266:	601a      	str	r2, [r3, #0]
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	f3bf 8f6f 	isb	sy
 800d270:	e780      	b.n	800d174 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d274:	f000 f8a6 	bl	800d3c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d278:	f000 fbd4 	bl	800da24 <xTaskResumeAll>
 800d27c:	e77a      	b.n	800d174 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d27e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d280:	f000 f8a0 	bl	800d3c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d284:	f000 fbce 	bl	800da24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d28a:	f000 f8ed 	bl	800d468 <prvIsQueueEmpty>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	f43f af6f 	beq.w	800d174 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d296:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3730      	adds	r7, #48	@ 0x30
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	e000ed04 	.word	0xe000ed04

0800d2a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b086      	sub	sp, #24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	60b9      	str	r1, [r7, #8]
 800d2ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10d      	bne.n	800d2de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d14d      	bne.n	800d366 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 ffc6 	bl	800e260 <xTaskPriorityDisinherit>
 800d2d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	609a      	str	r2, [r3, #8]
 800d2dc:	e043      	b.n	800d366 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d119      	bne.n	800d318 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6858      	ldr	r0, [r3, #4]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	f00f fe9b 	bl	801d02a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2fc:	441a      	add	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d32b      	bcc.n	800d366 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	605a      	str	r2, [r3, #4]
 800d316:	e026      	b.n	800d366 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	68d8      	ldr	r0, [r3, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d320:	461a      	mov	r2, r3
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	f00f fe81 	bl	801d02a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68da      	ldr	r2, [r3, #12]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d330:	425b      	negs	r3, r3
 800d332:	441a      	add	r2, r3
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	68da      	ldr	r2, [r3, #12]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d207      	bcs.n	800d354 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d34c:	425b      	negs	r3, r3
 800d34e:	441a      	add	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b02      	cmp	r3, #2
 800d358:	d105      	bne.n	800d366 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	3b01      	subs	r3, #1
 800d364:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	1c5a      	adds	r2, r3, #1
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d36e:	697b      	ldr	r3, [r7, #20]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3718      	adds	r7, #24
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
 800d380:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d386:	2b00      	cmp	r3, #0
 800d388:	d018      	beq.n	800d3bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	68da      	ldr	r2, [r3, #12]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d392:	441a      	add	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68da      	ldr	r2, [r3, #12]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d303      	bcc.n	800d3ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68d9      	ldr	r1, [r3, #12]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	6838      	ldr	r0, [r7, #0]
 800d3b8:	f00f fe37 	bl	801d02a <memcpy>
	}
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3cc:	f7ff fabc 	bl	800c948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d3d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3d8:	e011      	b.n	800d3fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d012      	beq.n	800d408 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	3324      	adds	r3, #36	@ 0x24
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f000 fd34 	bl	800de54 <xTaskRemoveFromEventList>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3f2:	f000 fe35 	bl	800e060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3f6:	7bfb      	ldrb	r3, [r7, #15]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d402:	2b00      	cmp	r3, #0
 800d404:	dce9      	bgt.n	800d3da <prvUnlockQueue+0x16>
 800d406:	e000      	b.n	800d40a <prvUnlockQueue+0x46>
					break;
 800d408:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	22ff      	movs	r2, #255	@ 0xff
 800d40e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d412:	f7ff facb 	bl	800c9ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d416:	f7ff fa97 	bl	800c948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d420:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d422:	e011      	b.n	800d448 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d012      	beq.n	800d452 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3310      	adds	r3, #16
 800d430:	4618      	mov	r0, r3
 800d432:	f000 fd0f 	bl	800de54 <xTaskRemoveFromEventList>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d43c:	f000 fe10 	bl	800e060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d440:	7bbb      	ldrb	r3, [r7, #14]
 800d442:	3b01      	subs	r3, #1
 800d444:	b2db      	uxtb	r3, r3
 800d446:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	dce9      	bgt.n	800d424 <prvUnlockQueue+0x60>
 800d450:	e000      	b.n	800d454 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d452:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	22ff      	movs	r2, #255	@ 0xff
 800d458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d45c:	f7ff faa6 	bl	800c9ac <vPortExitCritical>
}
 800d460:	bf00      	nop
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d470:	f7ff fa6a 	bl	800c948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d102      	bne.n	800d482 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e001      	b.n	800d486 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d482:	2300      	movs	r3, #0
 800d484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d486:	f7ff fa91 	bl	800c9ac <vPortExitCritical>

	return xReturn;
 800d48a:	68fb      	ldr	r3, [r7, #12]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d49c:	f7ff fa54 	bl	800c948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d102      	bne.n	800d4b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e001      	b.n	800d4b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4b6:	f7ff fa79 	bl	800c9ac <vPortExitCritical>

	return xReturn;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
 800d4d2:	e014      	b.n	800d4fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d4d4:	4a0f      	ldr	r2, [pc, #60]	@ (800d514 <vQueueAddToRegistry+0x50>)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10b      	bne.n	800d4f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4e0:	490c      	ldr	r1, [pc, #48]	@ (800d514 <vQueueAddToRegistry+0x50>)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	683a      	ldr	r2, [r7, #0]
 800d4e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4ea:	4a0a      	ldr	r2, [pc, #40]	@ (800d514 <vQueueAddToRegistry+0x50>)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	4413      	add	r3, r2
 800d4f2:	687a      	ldr	r2, [r7, #4]
 800d4f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4f6:	e006      	b.n	800d506 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b07      	cmp	r3, #7
 800d502:	d9e7      	bls.n	800d4d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d504:	bf00      	nop
 800d506:	bf00      	nop
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	2400e9b4 	.word	0x2400e9b4

0800d518 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d528:	f7ff fa0e 	bl	800c948 <vPortEnterCritical>
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d532:	b25b      	sxtb	r3, r3
 800d534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d538:	d103      	bne.n	800d542 <vQueueWaitForMessageRestricted+0x2a>
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d548:	b25b      	sxtb	r3, r3
 800d54a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d54e:	d103      	bne.n	800d558 <vQueueWaitForMessageRestricted+0x40>
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	2200      	movs	r2, #0
 800d554:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d558:	f7ff fa28 	bl	800c9ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d560:	2b00      	cmp	r3, #0
 800d562:	d106      	bne.n	800d572 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	3324      	adds	r3, #36	@ 0x24
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	68b9      	ldr	r1, [r7, #8]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 fc45 	bl	800ddfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d572:	6978      	ldr	r0, [r7, #20]
 800d574:	f7ff ff26 	bl	800d3c4 <prvUnlockQueue>
	}
 800d578:	bf00      	nop
 800d57a:	3718      	adds	r7, #24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08e      	sub	sp, #56	@ 0x38
 800d584:	af04      	add	r7, sp, #16
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10b      	bne.n	800d5ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800d594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	623b      	str	r3, [r7, #32]
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	e7fd      	b.n	800d5a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10b      	bne.n	800d5ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	61fb      	str	r3, [r7, #28]
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop
 800d5c8:	e7fd      	b.n	800d5c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d5ca:	235c      	movs	r3, #92	@ 0x5c
 800d5cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800d5d2:	d00b      	beq.n	800d5ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800d5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	61bb      	str	r3, [r7, #24]
}
 800d5e6:	bf00      	nop
 800d5e8:	bf00      	nop
 800d5ea:	e7fd      	b.n	800d5e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d01e      	beq.n	800d632 <xTaskCreateStatic+0xb2>
 800d5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d01b      	beq.n	800d632 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d600:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d602:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	2202      	movs	r2, #2
 800d608:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d60c:	2300      	movs	r3, #0
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d612:	9302      	str	r3, [sp, #8]
 800d614:	f107 0314 	add.w	r3, r7, #20
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	68b9      	ldr	r1, [r7, #8]
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f000 f850 	bl	800d6ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d62a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d62c:	f000 f8de 	bl	800d7ec <prvAddNewTaskToReadyList>
 800d630:	e001      	b.n	800d636 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d632:	2300      	movs	r3, #0
 800d634:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d636:	697b      	ldr	r3, [r7, #20]
	}
 800d638:	4618      	mov	r0, r3
 800d63a:	3728      	adds	r7, #40	@ 0x28
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08c      	sub	sp, #48	@ 0x30
 800d644:	af04      	add	r7, sp, #16
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	603b      	str	r3, [r7, #0]
 800d64c:	4613      	mov	r3, r2
 800d64e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d650:	88fb      	ldrh	r3, [r7, #6]
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe fda1 	bl	800c19c <pvPortMalloc>
 800d65a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00e      	beq.n	800d680 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d662:	205c      	movs	r0, #92	@ 0x5c
 800d664:	f7fe fd9a 	bl	800c19c <pvPortMalloc>
 800d668:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d003      	beq.n	800d678 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	697a      	ldr	r2, [r7, #20]
 800d674:	631a      	str	r2, [r3, #48]	@ 0x30
 800d676:	e005      	b.n	800d684 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d678:	6978      	ldr	r0, [r7, #20]
 800d67a:	f7fe fe5d 	bl	800c338 <vPortFree>
 800d67e:	e001      	b.n	800d684 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d680:	2300      	movs	r3, #0
 800d682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d017      	beq.n	800d6ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d692:	88fa      	ldrh	r2, [r7, #6]
 800d694:	2300      	movs	r3, #0
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	9302      	str	r3, [sp, #8]
 800d69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	68b9      	ldr	r1, [r7, #8]
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 f80e 	bl	800d6ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6ae:	69f8      	ldr	r0, [r7, #28]
 800d6b0:	f000 f89c 	bl	800d7ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	61bb      	str	r3, [r7, #24]
 800d6b8:	e002      	b.n	800d6c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d6ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d6c0:	69bb      	ldr	r3, [r7, #24]
	}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3720      	adds	r7, #32
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b088      	sub	sp, #32
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	60f8      	str	r0, [r7, #12]
 800d6d2:	60b9      	str	r1, [r7, #8]
 800d6d4:	607a      	str	r2, [r7, #4]
 800d6d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	21a5      	movs	r1, #165	@ 0xa5
 800d6e4:	f00f fbd8 	bl	801ce98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d6f2:	440b      	add	r3, r1
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	f023 0307 	bic.w	r3, r3, #7
 800d700:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	f003 0307 	and.w	r3, r3, #7
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d00b      	beq.n	800d724 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	617b      	str	r3, [r7, #20]
}
 800d71e:	bf00      	nop
 800d720:	bf00      	nop
 800d722:	e7fd      	b.n	800d720 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d01f      	beq.n	800d76a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d72a:	2300      	movs	r3, #0
 800d72c:	61fb      	str	r3, [r7, #28]
 800d72e:	e012      	b.n	800d756 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d730:	68ba      	ldr	r2, [r7, #8]
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	4413      	add	r3, r2
 800d736:	7819      	ldrb	r1, [r3, #0]
 800d738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	4413      	add	r3, r2
 800d73e:	3334      	adds	r3, #52	@ 0x34
 800d740:	460a      	mov	r2, r1
 800d742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	4413      	add	r3, r2
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d006      	beq.n	800d75e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	3301      	adds	r3, #1
 800d754:	61fb      	str	r3, [r7, #28]
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	2b0f      	cmp	r3, #15
 800d75a:	d9e9      	bls.n	800d730 <prvInitialiseNewTask+0x66>
 800d75c:	e000      	b.n	800d760 <prvInitialiseNewTask+0x96>
			{
				break;
 800d75e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d768:	e003      	b.n	800d772 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d774:	2b37      	cmp	r3, #55	@ 0x37
 800d776:	d901      	bls.n	800d77c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d778:	2337      	movs	r3, #55	@ 0x37
 800d77a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d77e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d780:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d786:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78a:	2200      	movs	r2, #0
 800d78c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d790:	3304      	adds	r3, #4
 800d792:	4618      	mov	r0, r3
 800d794:	f7fe ff10 	bl	800c5b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79a:	3318      	adds	r3, #24
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe ff0b 	bl	800c5b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7b6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	68f9      	ldr	r1, [r7, #12]
 800d7ca:	69b8      	ldr	r0, [r7, #24]
 800d7cc:	f7fe ff88 	bl	800c6e0 <pxPortInitialiseStack>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7e2:	bf00      	nop
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
	...

0800d7ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7f4:	f7ff f8a8 	bl	800c948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7f8:	4b2d      	ldr	r3, [pc, #180]	@ (800d8b0 <prvAddNewTaskToReadyList+0xc4>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	4a2c      	ldr	r2, [pc, #176]	@ (800d8b0 <prvAddNewTaskToReadyList+0xc4>)
 800d800:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d802:	4b2c      	ldr	r3, [pc, #176]	@ (800d8b4 <prvAddNewTaskToReadyList+0xc8>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d109      	bne.n	800d81e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d80a:	4a2a      	ldr	r2, [pc, #168]	@ (800d8b4 <prvAddNewTaskToReadyList+0xc8>)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d810:	4b27      	ldr	r3, [pc, #156]	@ (800d8b0 <prvAddNewTaskToReadyList+0xc4>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d110      	bne.n	800d83a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d818:	f000 fc46 	bl	800e0a8 <prvInitialiseTaskLists>
 800d81c:	e00d      	b.n	800d83a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d81e:	4b26      	ldr	r3, [pc, #152]	@ (800d8b8 <prvAddNewTaskToReadyList+0xcc>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d109      	bne.n	800d83a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d826:	4b23      	ldr	r3, [pc, #140]	@ (800d8b4 <prvAddNewTaskToReadyList+0xc8>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d830:	429a      	cmp	r2, r3
 800d832:	d802      	bhi.n	800d83a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d834:	4a1f      	ldr	r2, [pc, #124]	@ (800d8b4 <prvAddNewTaskToReadyList+0xc8>)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d83a:	4b20      	ldr	r3, [pc, #128]	@ (800d8bc <prvAddNewTaskToReadyList+0xd0>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3301      	adds	r3, #1
 800d840:	4a1e      	ldr	r2, [pc, #120]	@ (800d8bc <prvAddNewTaskToReadyList+0xd0>)
 800d842:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d844:	4b1d      	ldr	r3, [pc, #116]	@ (800d8bc <prvAddNewTaskToReadyList+0xd0>)
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d850:	4b1b      	ldr	r3, [pc, #108]	@ (800d8c0 <prvAddNewTaskToReadyList+0xd4>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d903      	bls.n	800d860 <prvAddNewTaskToReadyList+0x74>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d85c:	4a18      	ldr	r2, [pc, #96]	@ (800d8c0 <prvAddNewTaskToReadyList+0xd4>)
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d864:	4613      	mov	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	4a15      	ldr	r2, [pc, #84]	@ (800d8c4 <prvAddNewTaskToReadyList+0xd8>)
 800d86e:	441a      	add	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3304      	adds	r3, #4
 800d874:	4619      	mov	r1, r3
 800d876:	4610      	mov	r0, r2
 800d878:	f7fe feab 	bl	800c5d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d87c:	f7ff f896 	bl	800c9ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d880:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b8 <prvAddNewTaskToReadyList+0xcc>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00e      	beq.n	800d8a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d888:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <prvAddNewTaskToReadyList+0xc8>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d892:	429a      	cmp	r2, r3
 800d894:	d207      	bcs.n	800d8a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d896:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c8 <prvAddNewTaskToReadyList+0xdc>)
 800d898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a6:	bf00      	nop
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	2400eec8 	.word	0x2400eec8
 800d8b4:	2400e9f4 	.word	0x2400e9f4
 800d8b8:	2400eed4 	.word	0x2400eed4
 800d8bc:	2400eee4 	.word	0x2400eee4
 800d8c0:	2400eed0 	.word	0x2400eed0
 800d8c4:	2400e9f8 	.word	0x2400e9f8
 800d8c8:	e000ed04 	.word	0xe000ed04

0800d8cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d018      	beq.n	800d910 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8de:	4b14      	ldr	r3, [pc, #80]	@ (800d930 <vTaskDelay+0x64>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00b      	beq.n	800d8fe <vTaskDelay+0x32>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	60bb      	str	r3, [r7, #8]
}
 800d8f8:	bf00      	nop
 800d8fa:	bf00      	nop
 800d8fc:	e7fd      	b.n	800d8fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8fe:	f000 f883 	bl	800da08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d902:	2100      	movs	r1, #0
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f000 fd1b 	bl	800e340 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d90a:	f000 f88b 	bl	800da24 <xTaskResumeAll>
 800d90e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d107      	bne.n	800d926 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d916:	4b07      	ldr	r3, [pc, #28]	@ (800d934 <vTaskDelay+0x68>)
 800d918:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d926:	bf00      	nop
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	2400eef0 	.word	0x2400eef0
 800d934:	e000ed04 	.word	0xe000ed04

0800d938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	@ 0x28
 800d93c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d942:	2300      	movs	r3, #0
 800d944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d946:	463a      	mov	r2, r7
 800d948:	1d39      	adds	r1, r7, #4
 800d94a:	f107 0308 	add.w	r3, r7, #8
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fe fbf0 	bl	800c134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68ba      	ldr	r2, [r7, #8]
 800d95a:	9202      	str	r2, [sp, #8]
 800d95c:	9301      	str	r3, [sp, #4]
 800d95e:	2300      	movs	r3, #0
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	2300      	movs	r3, #0
 800d964:	460a      	mov	r2, r1
 800d966:	4922      	ldr	r1, [pc, #136]	@ (800d9f0 <vTaskStartScheduler+0xb8>)
 800d968:	4822      	ldr	r0, [pc, #136]	@ (800d9f4 <vTaskStartScheduler+0xbc>)
 800d96a:	f7ff fe09 	bl	800d580 <xTaskCreateStatic>
 800d96e:	4603      	mov	r3, r0
 800d970:	4a21      	ldr	r2, [pc, #132]	@ (800d9f8 <vTaskStartScheduler+0xc0>)
 800d972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d974:	4b20      	ldr	r3, [pc, #128]	@ (800d9f8 <vTaskStartScheduler+0xc0>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d97c:	2301      	movs	r3, #1
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	e001      	b.n	800d986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d982:	2300      	movs	r3, #0
 800d984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d102      	bne.n	800d992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d98c:	f000 fd2c 	bl	800e3e8 <xTimerCreateTimerTask>
 800d990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d116      	bne.n	800d9c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d99c:	f383 8811 	msr	BASEPRI, r3
 800d9a0:	f3bf 8f6f 	isb	sy
 800d9a4:	f3bf 8f4f 	dsb	sy
 800d9a8:	613b      	str	r3, [r7, #16]
}
 800d9aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d9ac:	4b13      	ldr	r3, [pc, #76]	@ (800d9fc <vTaskStartScheduler+0xc4>)
 800d9ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d9b4:	4b12      	ldr	r3, [pc, #72]	@ (800da00 <vTaskStartScheduler+0xc8>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9ba:	4b12      	ldr	r3, [pc, #72]	@ (800da04 <vTaskStartScheduler+0xcc>)
 800d9bc:	2200      	movs	r2, #0
 800d9be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9c0:	f7fe ff1e 	bl	800c800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9c4:	e00f      	b.n	800d9e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9cc:	d10b      	bne.n	800d9e6 <vTaskStartScheduler+0xae>
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	60fb      	str	r3, [r7, #12]
}
 800d9e0:	bf00      	nop
 800d9e2:	bf00      	nop
 800d9e4:	e7fd      	b.n	800d9e2 <vTaskStartScheduler+0xaa>
}
 800d9e6:	bf00      	nop
 800d9e8:	3718      	adds	r7, #24
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	0801dd74 	.word	0x0801dd74
 800d9f4:	0800e079 	.word	0x0800e079
 800d9f8:	2400eeec 	.word	0x2400eeec
 800d9fc:	2400eee8 	.word	0x2400eee8
 800da00:	2400eed4 	.word	0x2400eed4
 800da04:	2400eecc 	.word	0x2400eecc

0800da08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800da0c:	4b04      	ldr	r3, [pc, #16]	@ (800da20 <vTaskSuspendAll+0x18>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3301      	adds	r3, #1
 800da12:	4a03      	ldr	r2, [pc, #12]	@ (800da20 <vTaskSuspendAll+0x18>)
 800da14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da16:	bf00      	nop
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	2400eef0 	.word	0x2400eef0

0800da24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da2e:	2300      	movs	r3, #0
 800da30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da32:	4b42      	ldr	r3, [pc, #264]	@ (800db3c <xTaskResumeAll+0x118>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10b      	bne.n	800da52 <xTaskResumeAll+0x2e>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	603b      	str	r3, [r7, #0]
}
 800da4c:	bf00      	nop
 800da4e:	bf00      	nop
 800da50:	e7fd      	b.n	800da4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da52:	f7fe ff79 	bl	800c948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da56:	4b39      	ldr	r3, [pc, #228]	@ (800db3c <xTaskResumeAll+0x118>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3b01      	subs	r3, #1
 800da5c:	4a37      	ldr	r2, [pc, #220]	@ (800db3c <xTaskResumeAll+0x118>)
 800da5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da60:	4b36      	ldr	r3, [pc, #216]	@ (800db3c <xTaskResumeAll+0x118>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d162      	bne.n	800db2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da68:	4b35      	ldr	r3, [pc, #212]	@ (800db40 <xTaskResumeAll+0x11c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d05e      	beq.n	800db2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da70:	e02f      	b.n	800dad2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da72:	4b34      	ldr	r3, [pc, #208]	@ (800db44 <xTaskResumeAll+0x120>)
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	3318      	adds	r3, #24
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe fe04 	bl	800c68c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3304      	adds	r3, #4
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fe fdff 	bl	800c68c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da92:	4b2d      	ldr	r3, [pc, #180]	@ (800db48 <xTaskResumeAll+0x124>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	429a      	cmp	r2, r3
 800da98:	d903      	bls.n	800daa2 <xTaskResumeAll+0x7e>
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9e:	4a2a      	ldr	r2, [pc, #168]	@ (800db48 <xTaskResumeAll+0x124>)
 800daa0:	6013      	str	r3, [r2, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daa6:	4613      	mov	r3, r2
 800daa8:	009b      	lsls	r3, r3, #2
 800daaa:	4413      	add	r3, r2
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	4a27      	ldr	r2, [pc, #156]	@ (800db4c <xTaskResumeAll+0x128>)
 800dab0:	441a      	add	r2, r3
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3304      	adds	r3, #4
 800dab6:	4619      	mov	r1, r3
 800dab8:	4610      	mov	r0, r2
 800daba:	f7fe fd8a 	bl	800c5d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dac2:	4b23      	ldr	r3, [pc, #140]	@ (800db50 <xTaskResumeAll+0x12c>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dac8:	429a      	cmp	r2, r3
 800daca:	d302      	bcc.n	800dad2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dacc:	4b21      	ldr	r3, [pc, #132]	@ (800db54 <xTaskResumeAll+0x130>)
 800dace:	2201      	movs	r2, #1
 800dad0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dad2:	4b1c      	ldr	r3, [pc, #112]	@ (800db44 <xTaskResumeAll+0x120>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1cb      	bne.n	800da72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dae0:	f000 fb80 	bl	800e1e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dae4:	4b1c      	ldr	r3, [pc, #112]	@ (800db58 <xTaskResumeAll+0x134>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d010      	beq.n	800db12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800daf0:	f000 f846 	bl	800db80 <xTaskIncrementTick>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d002      	beq.n	800db00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dafa:	4b16      	ldr	r3, [pc, #88]	@ (800db54 <xTaskResumeAll+0x130>)
 800dafc:	2201      	movs	r2, #1
 800dafe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	3b01      	subs	r3, #1
 800db04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1f1      	bne.n	800daf0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800db0c:	4b12      	ldr	r3, [pc, #72]	@ (800db58 <xTaskResumeAll+0x134>)
 800db0e:	2200      	movs	r2, #0
 800db10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db12:	4b10      	ldr	r3, [pc, #64]	@ (800db54 <xTaskResumeAll+0x130>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d009      	beq.n	800db2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db1a:	2301      	movs	r3, #1
 800db1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db1e:	4b0f      	ldr	r3, [pc, #60]	@ (800db5c <xTaskResumeAll+0x138>)
 800db20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db24:	601a      	str	r2, [r3, #0]
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db2e:	f7fe ff3d 	bl	800c9ac <vPortExitCritical>

	return xAlreadyYielded;
 800db32:	68bb      	ldr	r3, [r7, #8]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	2400eef0 	.word	0x2400eef0
 800db40:	2400eec8 	.word	0x2400eec8
 800db44:	2400ee88 	.word	0x2400ee88
 800db48:	2400eed0 	.word	0x2400eed0
 800db4c:	2400e9f8 	.word	0x2400e9f8
 800db50:	2400e9f4 	.word	0x2400e9f4
 800db54:	2400eedc 	.word	0x2400eedc
 800db58:	2400eed8 	.word	0x2400eed8
 800db5c:	e000ed04 	.word	0xe000ed04

0800db60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db66:	4b05      	ldr	r3, [pc, #20]	@ (800db7c <xTaskGetTickCount+0x1c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db6c:	687b      	ldr	r3, [r7, #4]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	2400eecc 	.word	0x2400eecc

0800db80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db86:	2300      	movs	r3, #0
 800db88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db8a:	4b4f      	ldr	r3, [pc, #316]	@ (800dcc8 <xTaskIncrementTick+0x148>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f040 8090 	bne.w	800dcb4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db94:	4b4d      	ldr	r3, [pc, #308]	@ (800dccc <xTaskIncrementTick+0x14c>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	3301      	adds	r3, #1
 800db9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db9c:	4a4b      	ldr	r2, [pc, #300]	@ (800dccc <xTaskIncrementTick+0x14c>)
 800db9e:	693b      	ldr	r3, [r7, #16]
 800dba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d121      	bne.n	800dbec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800dba8:	4b49      	ldr	r3, [pc, #292]	@ (800dcd0 <xTaskIncrementTick+0x150>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00b      	beq.n	800dbca <xTaskIncrementTick+0x4a>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	603b      	str	r3, [r7, #0]
}
 800dbc4:	bf00      	nop
 800dbc6:	bf00      	nop
 800dbc8:	e7fd      	b.n	800dbc6 <xTaskIncrementTick+0x46>
 800dbca:	4b41      	ldr	r3, [pc, #260]	@ (800dcd0 <xTaskIncrementTick+0x150>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	4b40      	ldr	r3, [pc, #256]	@ (800dcd4 <xTaskIncrementTick+0x154>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a3e      	ldr	r2, [pc, #248]	@ (800dcd0 <xTaskIncrementTick+0x150>)
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	4a3e      	ldr	r2, [pc, #248]	@ (800dcd4 <xTaskIncrementTick+0x154>)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6013      	str	r3, [r2, #0]
 800dbde:	4b3e      	ldr	r3, [pc, #248]	@ (800dcd8 <xTaskIncrementTick+0x158>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	4a3c      	ldr	r2, [pc, #240]	@ (800dcd8 <xTaskIncrementTick+0x158>)
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	f000 fafc 	bl	800e1e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbec:	4b3b      	ldr	r3, [pc, #236]	@ (800dcdc <xTaskIncrementTick+0x15c>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	693a      	ldr	r2, [r7, #16]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d349      	bcc.n	800dc8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbf6:	4b36      	ldr	r3, [pc, #216]	@ (800dcd0 <xTaskIncrementTick+0x150>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d104      	bne.n	800dc0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc00:	4b36      	ldr	r3, [pc, #216]	@ (800dcdc <xTaskIncrementTick+0x15c>)
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dc06:	601a      	str	r2, [r3, #0]
					break;
 800dc08:	e03f      	b.n	800dc8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc0a:	4b31      	ldr	r3, [pc, #196]	@ (800dcd0 <xTaskIncrementTick+0x150>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d203      	bcs.n	800dc2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc22:	4a2e      	ldr	r2, [pc, #184]	@ (800dcdc <xTaskIncrementTick+0x15c>)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc28:	e02f      	b.n	800dc8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe fd2c 	bl	800c68c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	3318      	adds	r3, #24
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fd23 	bl	800c68c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4a:	4b25      	ldr	r3, [pc, #148]	@ (800dce0 <xTaskIncrementTick+0x160>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d903      	bls.n	800dc5a <xTaskIncrementTick+0xda>
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc56:	4a22      	ldr	r2, [pc, #136]	@ (800dce0 <xTaskIncrementTick+0x160>)
 800dc58:	6013      	str	r3, [r2, #0]
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc5e:	4613      	mov	r3, r2
 800dc60:	009b      	lsls	r3, r3, #2
 800dc62:	4413      	add	r3, r2
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	4a1f      	ldr	r2, [pc, #124]	@ (800dce4 <xTaskIncrementTick+0x164>)
 800dc68:	441a      	add	r2, r3
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4619      	mov	r1, r3
 800dc70:	4610      	mov	r0, r2
 800dc72:	f7fe fcae 	bl	800c5d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc7a:	4b1b      	ldr	r3, [pc, #108]	@ (800dce8 <xTaskIncrementTick+0x168>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d3b8      	bcc.n	800dbf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800dc84:	2301      	movs	r3, #1
 800dc86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc88:	e7b5      	b.n	800dbf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc8a:	4b17      	ldr	r3, [pc, #92]	@ (800dce8 <xTaskIncrementTick+0x168>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc90:	4914      	ldr	r1, [pc, #80]	@ (800dce4 <xTaskIncrementTick+0x164>)
 800dc92:	4613      	mov	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	440b      	add	r3, r1
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d901      	bls.n	800dca6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800dca2:	2301      	movs	r3, #1
 800dca4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dca6:	4b11      	ldr	r3, [pc, #68]	@ (800dcec <xTaskIncrementTick+0x16c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e004      	b.n	800dcbe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dcb4:	4b0e      	ldr	r3, [pc, #56]	@ (800dcf0 <xTaskIncrementTick+0x170>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	4a0d      	ldr	r2, [pc, #52]	@ (800dcf0 <xTaskIncrementTick+0x170>)
 800dcbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dcbe:	697b      	ldr	r3, [r7, #20]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3718      	adds	r7, #24
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	2400eef0 	.word	0x2400eef0
 800dccc:	2400eecc 	.word	0x2400eecc
 800dcd0:	2400ee80 	.word	0x2400ee80
 800dcd4:	2400ee84 	.word	0x2400ee84
 800dcd8:	2400eee0 	.word	0x2400eee0
 800dcdc:	2400eee8 	.word	0x2400eee8
 800dce0:	2400eed0 	.word	0x2400eed0
 800dce4:	2400e9f8 	.word	0x2400e9f8
 800dce8:	2400e9f4 	.word	0x2400e9f4
 800dcec:	2400eedc 	.word	0x2400eedc
 800dcf0:	2400eed8 	.word	0x2400eed8

0800dcf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcfa:	4b28      	ldr	r3, [pc, #160]	@ (800dd9c <vTaskSwitchContext+0xa8>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d003      	beq.n	800dd0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dd02:	4b27      	ldr	r3, [pc, #156]	@ (800dda0 <vTaskSwitchContext+0xac>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dd08:	e042      	b.n	800dd90 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800dd0a:	4b25      	ldr	r3, [pc, #148]	@ (800dda0 <vTaskSwitchContext+0xac>)
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd10:	4b24      	ldr	r3, [pc, #144]	@ (800dda4 <vTaskSwitchContext+0xb0>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	e011      	b.n	800dd3c <vTaskSwitchContext+0x48>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10b      	bne.n	800dd36 <vTaskSwitchContext+0x42>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	607b      	str	r3, [r7, #4]
}
 800dd30:	bf00      	nop
 800dd32:	bf00      	nop
 800dd34:	e7fd      	b.n	800dd32 <vTaskSwitchContext+0x3e>
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	491a      	ldr	r1, [pc, #104]	@ (800dda8 <vTaskSwitchContext+0xb4>)
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4613      	mov	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	440b      	add	r3, r1
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0e3      	beq.n	800dd18 <vTaskSwitchContext+0x24>
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	4613      	mov	r3, r2
 800dd54:	009b      	lsls	r3, r3, #2
 800dd56:	4413      	add	r3, r2
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	4a13      	ldr	r2, [pc, #76]	@ (800dda8 <vTaskSwitchContext+0xb4>)
 800dd5c:	4413      	add	r3, r2
 800dd5e:	60bb      	str	r3, [r7, #8]
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	605a      	str	r2, [r3, #4]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	685a      	ldr	r2, [r3, #4]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	3308      	adds	r3, #8
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d104      	bne.n	800dd80 <vTaskSwitchContext+0x8c>
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	685b      	ldr	r3, [r3, #4]
 800dd7a:	685a      	ldr	r2, [r3, #4]
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	605a      	str	r2, [r3, #4]
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	4a09      	ldr	r2, [pc, #36]	@ (800ddac <vTaskSwitchContext+0xb8>)
 800dd88:	6013      	str	r3, [r2, #0]
 800dd8a:	4a06      	ldr	r2, [pc, #24]	@ (800dda4 <vTaskSwitchContext+0xb0>)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6013      	str	r3, [r2, #0]
}
 800dd90:	bf00      	nop
 800dd92:	3714      	adds	r7, #20
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr
 800dd9c:	2400eef0 	.word	0x2400eef0
 800dda0:	2400eedc 	.word	0x2400eedc
 800dda4:	2400eed0 	.word	0x2400eed0
 800dda8:	2400e9f8 	.word	0x2400e9f8
 800ddac:	2400e9f4 	.word	0x2400e9f4

0800ddb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10b      	bne.n	800ddd8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	60fb      	str	r3, [r7, #12]
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	e7fd      	b.n	800ddd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddd8:	4b07      	ldr	r3, [pc, #28]	@ (800ddf8 <vTaskPlaceOnEventList+0x48>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	3318      	adds	r3, #24
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7fe fc1a 	bl	800c61a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dde6:	2101      	movs	r1, #1
 800dde8:	6838      	ldr	r0, [r7, #0]
 800ddea:	f000 faa9 	bl	800e340 <prvAddCurrentTaskToDelayedList>
}
 800ddee:	bf00      	nop
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	2400e9f4 	.word	0x2400e9f4

0800ddfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d10b      	bne.n	800de26 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800de0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de12:	f383 8811 	msr	BASEPRI, r3
 800de16:	f3bf 8f6f 	isb	sy
 800de1a:	f3bf 8f4f 	dsb	sy
 800de1e:	617b      	str	r3, [r7, #20]
}
 800de20:	bf00      	nop
 800de22:	bf00      	nop
 800de24:	e7fd      	b.n	800de22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de26:	4b0a      	ldr	r3, [pc, #40]	@ (800de50 <vTaskPlaceOnEventListRestricted+0x54>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3318      	adds	r3, #24
 800de2c:	4619      	mov	r1, r3
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	f7fe fbcf 	bl	800c5d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d002      	beq.n	800de40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800de3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de40:	6879      	ldr	r1, [r7, #4]
 800de42:	68b8      	ldr	r0, [r7, #8]
 800de44:	f000 fa7c 	bl	800e340 <prvAddCurrentTaskToDelayedList>
	}
 800de48:	bf00      	nop
 800de4a:	3718      	adds	r7, #24
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	2400e9f4 	.word	0x2400e9f4

0800de54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b086      	sub	sp, #24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	68db      	ldr	r3, [r3, #12]
 800de62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10b      	bne.n	800de82 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de6e:	f383 8811 	msr	BASEPRI, r3
 800de72:	f3bf 8f6f 	isb	sy
 800de76:	f3bf 8f4f 	dsb	sy
 800de7a:	60fb      	str	r3, [r7, #12]
}
 800de7c:	bf00      	nop
 800de7e:	bf00      	nop
 800de80:	e7fd      	b.n	800de7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	3318      	adds	r3, #24
 800de86:	4618      	mov	r0, r3
 800de88:	f7fe fc00 	bl	800c68c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de8c:	4b1d      	ldr	r3, [pc, #116]	@ (800df04 <xTaskRemoveFromEventList+0xb0>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d11d      	bne.n	800ded0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	3304      	adds	r3, #4
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fe fbf7 	bl	800c68c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dea2:	4b19      	ldr	r3, [pc, #100]	@ (800df08 <xTaskRemoveFromEventList+0xb4>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d903      	bls.n	800deb2 <xTaskRemoveFromEventList+0x5e>
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deae:	4a16      	ldr	r2, [pc, #88]	@ (800df08 <xTaskRemoveFromEventList+0xb4>)
 800deb0:	6013      	str	r3, [r2, #0]
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deb6:	4613      	mov	r3, r2
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	4413      	add	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4a13      	ldr	r2, [pc, #76]	@ (800df0c <xTaskRemoveFromEventList+0xb8>)
 800dec0:	441a      	add	r2, r3
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	3304      	adds	r3, #4
 800dec6:	4619      	mov	r1, r3
 800dec8:	4610      	mov	r0, r2
 800deca:	f7fe fb82 	bl	800c5d2 <vListInsertEnd>
 800dece:	e005      	b.n	800dedc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	3318      	adds	r3, #24
 800ded4:	4619      	mov	r1, r3
 800ded6:	480e      	ldr	r0, [pc, #56]	@ (800df10 <xTaskRemoveFromEventList+0xbc>)
 800ded8:	f7fe fb7b 	bl	800c5d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dee0:	4b0c      	ldr	r3, [pc, #48]	@ (800df14 <xTaskRemoveFromEventList+0xc0>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d905      	bls.n	800def6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800deea:	2301      	movs	r3, #1
 800deec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800deee:	4b0a      	ldr	r3, [pc, #40]	@ (800df18 <xTaskRemoveFromEventList+0xc4>)
 800def0:	2201      	movs	r2, #1
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	e001      	b.n	800defa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800def6:	2300      	movs	r3, #0
 800def8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800defa:	697b      	ldr	r3, [r7, #20]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	2400eef0 	.word	0x2400eef0
 800df08:	2400eed0 	.word	0x2400eed0
 800df0c:	2400e9f8 	.word	0x2400e9f8
 800df10:	2400ee88 	.word	0x2400ee88
 800df14:	2400e9f4 	.word	0x2400e9f4
 800df18:	2400eedc 	.word	0x2400eedc

0800df1c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d10b      	bne.n	800df42 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800df2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2e:	f383 8811 	msr	BASEPRI, r3
 800df32:	f3bf 8f6f 	isb	sy
 800df36:	f3bf 8f4f 	dsb	sy
 800df3a:	60fb      	str	r3, [r7, #12]
}
 800df3c:	bf00      	nop
 800df3e:	bf00      	nop
 800df40:	e7fd      	b.n	800df3e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800df42:	f7fe fd01 	bl	800c948 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df46:	4b07      	ldr	r3, [pc, #28]	@ (800df64 <vTaskSetTimeOutState+0x48>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800df4e:	4b06      	ldr	r3, [pc, #24]	@ (800df68 <vTaskSetTimeOutState+0x4c>)
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800df56:	f7fe fd29 	bl	800c9ac <vPortExitCritical>
}
 800df5a:	bf00      	nop
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	2400eee0 	.word	0x2400eee0
 800df68:	2400eecc 	.word	0x2400eecc

0800df6c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df74:	4b06      	ldr	r3, [pc, #24]	@ (800df90 <vTaskInternalSetTimeOutState+0x24>)
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df7c:	4b05      	ldr	r3, [pc, #20]	@ (800df94 <vTaskInternalSetTimeOutState+0x28>)
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	605a      	str	r2, [r3, #4]
}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	2400eee0 	.word	0x2400eee0
 800df94:	2400eecc 	.word	0x2400eecc

0800df98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b088      	sub	sp, #32
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10b      	bne.n	800dfc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfac:	f383 8811 	msr	BASEPRI, r3
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	613b      	str	r3, [r7, #16]
}
 800dfba:	bf00      	nop
 800dfbc:	bf00      	nop
 800dfbe:	e7fd      	b.n	800dfbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10b      	bne.n	800dfde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	60fb      	str	r3, [r7, #12]
}
 800dfd8:	bf00      	nop
 800dfda:	bf00      	nop
 800dfdc:	e7fd      	b.n	800dfda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dfde:	f7fe fcb3 	bl	800c948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfe2:	4b1d      	ldr	r3, [pc, #116]	@ (800e058 <xTaskCheckForTimeOut+0xc0>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	69ba      	ldr	r2, [r7, #24]
 800dfee:	1ad3      	subs	r3, r2, r3
 800dff0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dffa:	d102      	bne.n	800e002 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	61fb      	str	r3, [r7, #28]
 800e000:	e023      	b.n	800e04a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	4b15      	ldr	r3, [pc, #84]	@ (800e05c <xTaskCheckForTimeOut+0xc4>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d007      	beq.n	800e01e <xTaskCheckForTimeOut+0x86>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	69ba      	ldr	r2, [r7, #24]
 800e014:	429a      	cmp	r2, r3
 800e016:	d302      	bcc.n	800e01e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e018:	2301      	movs	r3, #1
 800e01a:	61fb      	str	r3, [r7, #28]
 800e01c:	e015      	b.n	800e04a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	429a      	cmp	r2, r3
 800e026:	d20b      	bcs.n	800e040 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	1ad2      	subs	r2, r2, r3
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7ff ff99 	bl	800df6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e03a:	2300      	movs	r3, #0
 800e03c:	61fb      	str	r3, [r7, #28]
 800e03e:	e004      	b.n	800e04a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e046:	2301      	movs	r3, #1
 800e048:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e04a:	f7fe fcaf 	bl	800c9ac <vPortExitCritical>

	return xReturn;
 800e04e:	69fb      	ldr	r3, [r7, #28]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3720      	adds	r7, #32
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}
 800e058:	2400eecc 	.word	0x2400eecc
 800e05c:	2400eee0 	.word	0x2400eee0

0800e060 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e060:	b480      	push	{r7}
 800e062:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e064:	4b03      	ldr	r3, [pc, #12]	@ (800e074 <vTaskMissedYield+0x14>)
 800e066:	2201      	movs	r2, #1
 800e068:	601a      	str	r2, [r3, #0]
}
 800e06a:	bf00      	nop
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	2400eedc 	.word	0x2400eedc

0800e078 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e080:	f000 f852 	bl	800e128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e084:	4b06      	ldr	r3, [pc, #24]	@ (800e0a0 <prvIdleTask+0x28>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d9f9      	bls.n	800e080 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e08c:	4b05      	ldr	r3, [pc, #20]	@ (800e0a4 <prvIdleTask+0x2c>)
 800e08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e092:	601a      	str	r2, [r3, #0]
 800e094:	f3bf 8f4f 	dsb	sy
 800e098:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e09c:	e7f0      	b.n	800e080 <prvIdleTask+0x8>
 800e09e:	bf00      	nop
 800e0a0:	2400e9f8 	.word	0x2400e9f8
 800e0a4:	e000ed04 	.word	0xe000ed04

0800e0a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	607b      	str	r3, [r7, #4]
 800e0b2:	e00c      	b.n	800e0ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	4a12      	ldr	r2, [pc, #72]	@ (800e108 <prvInitialiseTaskLists+0x60>)
 800e0c0:	4413      	add	r3, r2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fe fa58 	bl	800c578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	607b      	str	r3, [r7, #4]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2b37      	cmp	r3, #55	@ 0x37
 800e0d2:	d9ef      	bls.n	800e0b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0d4:	480d      	ldr	r0, [pc, #52]	@ (800e10c <prvInitialiseTaskLists+0x64>)
 800e0d6:	f7fe fa4f 	bl	800c578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0da:	480d      	ldr	r0, [pc, #52]	@ (800e110 <prvInitialiseTaskLists+0x68>)
 800e0dc:	f7fe fa4c 	bl	800c578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0e0:	480c      	ldr	r0, [pc, #48]	@ (800e114 <prvInitialiseTaskLists+0x6c>)
 800e0e2:	f7fe fa49 	bl	800c578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0e6:	480c      	ldr	r0, [pc, #48]	@ (800e118 <prvInitialiseTaskLists+0x70>)
 800e0e8:	f7fe fa46 	bl	800c578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0ec:	480b      	ldr	r0, [pc, #44]	@ (800e11c <prvInitialiseTaskLists+0x74>)
 800e0ee:	f7fe fa43 	bl	800c578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0f2:	4b0b      	ldr	r3, [pc, #44]	@ (800e120 <prvInitialiseTaskLists+0x78>)
 800e0f4:	4a05      	ldr	r2, [pc, #20]	@ (800e10c <prvInitialiseTaskLists+0x64>)
 800e0f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e124 <prvInitialiseTaskLists+0x7c>)
 800e0fa:	4a05      	ldr	r2, [pc, #20]	@ (800e110 <prvInitialiseTaskLists+0x68>)
 800e0fc:	601a      	str	r2, [r3, #0]
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	2400e9f8 	.word	0x2400e9f8
 800e10c:	2400ee58 	.word	0x2400ee58
 800e110:	2400ee6c 	.word	0x2400ee6c
 800e114:	2400ee88 	.word	0x2400ee88
 800e118:	2400ee9c 	.word	0x2400ee9c
 800e11c:	2400eeb4 	.word	0x2400eeb4
 800e120:	2400ee80 	.word	0x2400ee80
 800e124:	2400ee84 	.word	0x2400ee84

0800e128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e12e:	e019      	b.n	800e164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e130:	f7fe fc0a 	bl	800c948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e134:	4b10      	ldr	r3, [pc, #64]	@ (800e178 <prvCheckTasksWaitingTermination+0x50>)
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3304      	adds	r3, #4
 800e140:	4618      	mov	r0, r3
 800e142:	f7fe faa3 	bl	800c68c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e146:	4b0d      	ldr	r3, [pc, #52]	@ (800e17c <prvCheckTasksWaitingTermination+0x54>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	3b01      	subs	r3, #1
 800e14c:	4a0b      	ldr	r2, [pc, #44]	@ (800e17c <prvCheckTasksWaitingTermination+0x54>)
 800e14e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e150:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <prvCheckTasksWaitingTermination+0x58>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	3b01      	subs	r3, #1
 800e156:	4a0a      	ldr	r2, [pc, #40]	@ (800e180 <prvCheckTasksWaitingTermination+0x58>)
 800e158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e15a:	f7fe fc27 	bl	800c9ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f810 	bl	800e184 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e164:	4b06      	ldr	r3, [pc, #24]	@ (800e180 <prvCheckTasksWaitingTermination+0x58>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d1e1      	bne.n	800e130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e16c:	bf00      	nop
 800e16e:	bf00      	nop
 800e170:	3708      	adds	r7, #8
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	2400ee9c 	.word	0x2400ee9c
 800e17c:	2400eec8 	.word	0x2400eec8
 800e180:	2400eeb0 	.word	0x2400eeb0

0800e184 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e192:	2b00      	cmp	r3, #0
 800e194:	d108      	bne.n	800e1a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe f8cc 	bl	800c338 <vPortFree>
				vPortFree( pxTCB );
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7fe f8c9 	bl	800c338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e1a6:	e019      	b.n	800e1dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d103      	bne.n	800e1ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7fe f8c0 	bl	800c338 <vPortFree>
	}
 800e1b8:	e010      	b.n	800e1dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800e1c0:	2b02      	cmp	r3, #2
 800e1c2:	d00b      	beq.n	800e1dc <prvDeleteTCB+0x58>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	60fb      	str	r3, [r7, #12]
}
 800e1d6:	bf00      	nop
 800e1d8:	bf00      	nop
 800e1da:	e7fd      	b.n	800e1d8 <prvDeleteTCB+0x54>
	}
 800e1dc:	bf00      	nop
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e21c <prvResetNextTaskUnblockTime+0x38>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d104      	bne.n	800e1fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1f4:	4b0a      	ldr	r3, [pc, #40]	@ (800e220 <prvResetNextTaskUnblockTime+0x3c>)
 800e1f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1fc:	e008      	b.n	800e210 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1fe:	4b07      	ldr	r3, [pc, #28]	@ (800e21c <prvResetNextTaskUnblockTime+0x38>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	4a04      	ldr	r2, [pc, #16]	@ (800e220 <prvResetNextTaskUnblockTime+0x3c>)
 800e20e:	6013      	str	r3, [r2, #0]
}
 800e210:	bf00      	nop
 800e212:	370c      	adds	r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr
 800e21c:	2400ee80 	.word	0x2400ee80
 800e220:	2400eee8 	.word	0x2400eee8

0800e224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e22a:	4b0b      	ldr	r3, [pc, #44]	@ (800e258 <xTaskGetSchedulerState+0x34>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d102      	bne.n	800e238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e232:	2301      	movs	r3, #1
 800e234:	607b      	str	r3, [r7, #4]
 800e236:	e008      	b.n	800e24a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e238:	4b08      	ldr	r3, [pc, #32]	@ (800e25c <xTaskGetSchedulerState+0x38>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d102      	bne.n	800e246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e240:	2302      	movs	r3, #2
 800e242:	607b      	str	r3, [r7, #4]
 800e244:	e001      	b.n	800e24a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e246:	2300      	movs	r3, #0
 800e248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e24a:	687b      	ldr	r3, [r7, #4]
	}
 800e24c:	4618      	mov	r0, r3
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	2400eed4 	.word	0x2400eed4
 800e25c:	2400eef0 	.word	0x2400eef0

0800e260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e26c:	2300      	movs	r3, #0
 800e26e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d058      	beq.n	800e328 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e276:	4b2f      	ldr	r3, [pc, #188]	@ (800e334 <xTaskPriorityDisinherit+0xd4>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	693a      	ldr	r2, [r7, #16]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d00b      	beq.n	800e298 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	60fb      	str	r3, [r7, #12]
}
 800e292:	bf00      	nop
 800e294:	bf00      	nop
 800e296:	e7fd      	b.n	800e294 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d10b      	bne.n	800e2b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	60bb      	str	r3, [r7, #8]
}
 800e2b2:	bf00      	nop
 800e2b4:	bf00      	nop
 800e2b6:	e7fd      	b.n	800e2b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2bc:	1e5a      	subs	r2, r3, #1
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d02c      	beq.n	800e328 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d128      	bne.n	800e328 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fe f9d6 	bl	800c68c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2f8:	4b0f      	ldr	r3, [pc, #60]	@ (800e338 <xTaskPriorityDisinherit+0xd8>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d903      	bls.n	800e308 <xTaskPriorityDisinherit+0xa8>
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e304:	4a0c      	ldr	r2, [pc, #48]	@ (800e338 <xTaskPriorityDisinherit+0xd8>)
 800e306:	6013      	str	r3, [r2, #0]
 800e308:	693b      	ldr	r3, [r7, #16]
 800e30a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4a09      	ldr	r2, [pc, #36]	@ (800e33c <xTaskPriorityDisinherit+0xdc>)
 800e316:	441a      	add	r2, r3
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7fe f957 	bl	800c5d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e324:	2301      	movs	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e328:	697b      	ldr	r3, [r7, #20]
	}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3718      	adds	r7, #24
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	2400e9f4 	.word	0x2400e9f4
 800e338:	2400eed0 	.word	0x2400eed0
 800e33c:	2400e9f8 	.word	0x2400e9f8

0800e340 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e34a:	4b21      	ldr	r3, [pc, #132]	@ (800e3d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e350:	4b20      	ldr	r3, [pc, #128]	@ (800e3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	3304      	adds	r3, #4
 800e356:	4618      	mov	r0, r3
 800e358:	f7fe f998 	bl	800c68c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e362:	d10a      	bne.n	800e37a <prvAddCurrentTaskToDelayedList+0x3a>
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d007      	beq.n	800e37a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e36a:	4b1a      	ldr	r3, [pc, #104]	@ (800e3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3304      	adds	r3, #4
 800e370:	4619      	mov	r1, r3
 800e372:	4819      	ldr	r0, [pc, #100]	@ (800e3d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e374:	f7fe f92d 	bl	800c5d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e378:	e026      	b.n	800e3c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4413      	add	r3, r2
 800e380:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e382:	4b14      	ldr	r3, [pc, #80]	@ (800e3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	68ba      	ldr	r2, [r7, #8]
 800e388:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d209      	bcs.n	800e3a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e392:	4b12      	ldr	r3, [pc, #72]	@ (800e3dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	4b0f      	ldr	r3, [pc, #60]	@ (800e3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3304      	adds	r3, #4
 800e39c:	4619      	mov	r1, r3
 800e39e:	4610      	mov	r0, r2
 800e3a0:	f7fe f93b 	bl	800c61a <vListInsert>
}
 800e3a4:	e010      	b.n	800e3c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e3a6:	4b0e      	ldr	r3, [pc, #56]	@ (800e3e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7fe f931 	bl	800c61a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800e3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d202      	bcs.n	800e3c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e3c2:	4a08      	ldr	r2, [pc, #32]	@ (800e3e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	6013      	str	r3, [r2, #0]
}
 800e3c8:	bf00      	nop
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	2400eecc 	.word	0x2400eecc
 800e3d4:	2400e9f4 	.word	0x2400e9f4
 800e3d8:	2400eeb4 	.word	0x2400eeb4
 800e3dc:	2400ee84 	.word	0x2400ee84
 800e3e0:	2400ee80 	.word	0x2400ee80
 800e3e4:	2400eee8 	.word	0x2400eee8

0800e3e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08a      	sub	sp, #40	@ 0x28
 800e3ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3f2:	f000 fb13 	bl	800ea1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3f6:	4b1d      	ldr	r3, [pc, #116]	@ (800e46c <xTimerCreateTimerTask+0x84>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d021      	beq.n	800e442 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e406:	1d3a      	adds	r2, r7, #4
 800e408:	f107 0108 	add.w	r1, r7, #8
 800e40c:	f107 030c 	add.w	r3, r7, #12
 800e410:	4618      	mov	r0, r3
 800e412:	f7fd fea9 	bl	800c168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e416:	6879      	ldr	r1, [r7, #4]
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	9202      	str	r2, [sp, #8]
 800e41e:	9301      	str	r3, [sp, #4]
 800e420:	2302      	movs	r3, #2
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	2300      	movs	r3, #0
 800e426:	460a      	mov	r2, r1
 800e428:	4911      	ldr	r1, [pc, #68]	@ (800e470 <xTimerCreateTimerTask+0x88>)
 800e42a:	4812      	ldr	r0, [pc, #72]	@ (800e474 <xTimerCreateTimerTask+0x8c>)
 800e42c:	f7ff f8a8 	bl	800d580 <xTaskCreateStatic>
 800e430:	4603      	mov	r3, r0
 800e432:	4a11      	ldr	r2, [pc, #68]	@ (800e478 <xTimerCreateTimerTask+0x90>)
 800e434:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e436:	4b10      	ldr	r3, [pc, #64]	@ (800e478 <xTimerCreateTimerTask+0x90>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e43e:	2301      	movs	r3, #1
 800e440:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10b      	bne.n	800e460 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	613b      	str	r3, [r7, #16]
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	e7fd      	b.n	800e45c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e460:	697b      	ldr	r3, [r7, #20]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	2400ef24 	.word	0x2400ef24
 800e470:	0801dd7c 	.word	0x0801dd7c
 800e474:	0800e5b5 	.word	0x0800e5b5
 800e478:	2400ef28 	.word	0x2400ef28

0800e47c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08a      	sub	sp, #40	@ 0x28
 800e480:	af00      	add	r7, sp, #0
 800e482:	60f8      	str	r0, [r7, #12]
 800e484:	60b9      	str	r1, [r7, #8]
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e48a:	2300      	movs	r3, #0
 800e48c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d10b      	bne.n	800e4ac <xTimerGenericCommand+0x30>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e498:	f383 8811 	msr	BASEPRI, r3
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f3bf 8f4f 	dsb	sy
 800e4a4:	623b      	str	r3, [r7, #32]
}
 800e4a6:	bf00      	nop
 800e4a8:	bf00      	nop
 800e4aa:	e7fd      	b.n	800e4a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e4ac:	4b19      	ldr	r3, [pc, #100]	@ (800e514 <xTimerGenericCommand+0x98>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d02a      	beq.n	800e50a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	2b05      	cmp	r3, #5
 800e4c4:	dc18      	bgt.n	800e4f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4c6:	f7ff fead 	bl	800e224 <xTaskGetSchedulerState>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b02      	cmp	r3, #2
 800e4ce:	d109      	bne.n	800e4e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4d0:	4b10      	ldr	r3, [pc, #64]	@ (800e514 <xTimerGenericCommand+0x98>)
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	f107 0110 	add.w	r1, r7, #16
 800e4d8:	2300      	movs	r3, #0
 800e4da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4dc:	f7fe fc60 	bl	800cda0 <xQueueGenericSend>
 800e4e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e4e2:	e012      	b.n	800e50a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800e514 <xTimerGenericCommand+0x98>)
 800e4e6:	6818      	ldr	r0, [r3, #0]
 800e4e8:	f107 0110 	add.w	r1, r7, #16
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	f7fe fc56 	bl	800cda0 <xQueueGenericSend>
 800e4f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e4f6:	e008      	b.n	800e50a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4f8:	4b06      	ldr	r3, [pc, #24]	@ (800e514 <xTimerGenericCommand+0x98>)
 800e4fa:	6818      	ldr	r0, [r3, #0]
 800e4fc:	f107 0110 	add.w	r1, r7, #16
 800e500:	2300      	movs	r3, #0
 800e502:	683a      	ldr	r2, [r7, #0]
 800e504:	f7fe fd4e 	bl	800cfa4 <xQueueGenericSendFromISR>
 800e508:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3728      	adds	r7, #40	@ 0x28
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	2400ef24 	.word	0x2400ef24

0800e518 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b088      	sub	sp, #32
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e522:	4b23      	ldr	r3, [pc, #140]	@ (800e5b0 <prvProcessExpiredTimer+0x98>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	3304      	adds	r3, #4
 800e530:	4618      	mov	r0, r3
 800e532:	f7fe f8ab 	bl	800c68c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e53c:	f003 0304 	and.w	r3, r3, #4
 800e540:	2b00      	cmp	r3, #0
 800e542:	d023      	beq.n	800e58c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	699a      	ldr	r2, [r3, #24]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	18d1      	adds	r1, r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	683a      	ldr	r2, [r7, #0]
 800e550:	6978      	ldr	r0, [r7, #20]
 800e552:	f000 f8d5 	bl	800e700 <prvInsertTimerInActiveList>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d020      	beq.n	800e59e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e55c:	2300      	movs	r3, #0
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	2300      	movs	r3, #0
 800e562:	687a      	ldr	r2, [r7, #4]
 800e564:	2100      	movs	r1, #0
 800e566:	6978      	ldr	r0, [r7, #20]
 800e568:	f7ff ff88 	bl	800e47c <xTimerGenericCommand>
 800e56c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d114      	bne.n	800e59e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60fb      	str	r3, [r7, #12]
}
 800e586:	bf00      	nop
 800e588:	bf00      	nop
 800e58a:	e7fd      	b.n	800e588 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e592:	f023 0301 	bic.w	r3, r3, #1
 800e596:	b2da      	uxtb	r2, r3
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	6a1b      	ldr	r3, [r3, #32]
 800e5a2:	6978      	ldr	r0, [r7, #20]
 800e5a4:	4798      	blx	r3
}
 800e5a6:	bf00      	nop
 800e5a8:	3718      	adds	r7, #24
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	2400ef1c 	.word	0x2400ef1c

0800e5b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5bc:	f107 0308 	add.w	r3, r7, #8
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f000 f859 	bl	800e678 <prvGetNextExpireTime>
 800e5c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f000 f805 	bl	800e5dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5d2:	f000 f8d7 	bl	800e784 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5d6:	bf00      	nop
 800e5d8:	e7f0      	b.n	800e5bc <prvTimerTask+0x8>
	...

0800e5dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5e6:	f7ff fa0f 	bl	800da08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5ea:	f107 0308 	add.w	r3, r7, #8
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 f866 	bl	800e6c0 <prvSampleTimeNow>
 800e5f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d130      	bne.n	800e65e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10a      	bne.n	800e618 <prvProcessTimerOrBlockTask+0x3c>
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	429a      	cmp	r2, r3
 800e608:	d806      	bhi.n	800e618 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e60a:	f7ff fa0b 	bl	800da24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e60e:	68f9      	ldr	r1, [r7, #12]
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff ff81 	bl	800e518 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e616:	e024      	b.n	800e662 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d008      	beq.n	800e630 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e61e:	4b13      	ldr	r3, [pc, #76]	@ (800e66c <prvProcessTimerOrBlockTask+0x90>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d101      	bne.n	800e62c <prvProcessTimerOrBlockTask+0x50>
 800e628:	2301      	movs	r3, #1
 800e62a:	e000      	b.n	800e62e <prvProcessTimerOrBlockTask+0x52>
 800e62c:	2300      	movs	r3, #0
 800e62e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e630:	4b0f      	ldr	r3, [pc, #60]	@ (800e670 <prvProcessTimerOrBlockTask+0x94>)
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	683a      	ldr	r2, [r7, #0]
 800e63c:	4619      	mov	r1, r3
 800e63e:	f7fe ff6b 	bl	800d518 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e642:	f7ff f9ef 	bl	800da24 <xTaskResumeAll>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10a      	bne.n	800e662 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e64c:	4b09      	ldr	r3, [pc, #36]	@ (800e674 <prvProcessTimerOrBlockTask+0x98>)
 800e64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e652:	601a      	str	r2, [r3, #0]
 800e654:	f3bf 8f4f 	dsb	sy
 800e658:	f3bf 8f6f 	isb	sy
}
 800e65c:	e001      	b.n	800e662 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e65e:	f7ff f9e1 	bl	800da24 <xTaskResumeAll>
}
 800e662:	bf00      	nop
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	2400ef20 	.word	0x2400ef20
 800e670:	2400ef24 	.word	0x2400ef24
 800e674:	e000ed04 	.word	0xe000ed04

0800e678 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e680:	4b0e      	ldr	r3, [pc, #56]	@ (800e6bc <prvGetNextExpireTime+0x44>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <prvGetNextExpireTime+0x16>
 800e68a:	2201      	movs	r2, #1
 800e68c:	e000      	b.n	800e690 <prvGetNextExpireTime+0x18>
 800e68e:	2200      	movs	r2, #0
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d105      	bne.n	800e6a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e69c:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <prvGetNextExpireTime+0x44>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	e001      	b.n	800e6ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop
 800e6bc:	2400ef1c 	.word	0x2400ef1c

0800e6c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6c8:	f7ff fa4a 	bl	800db60 <xTaskGetTickCount>
 800e6cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e6fc <prvSampleTimeNow+0x3c>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	68fa      	ldr	r2, [r7, #12]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d205      	bcs.n	800e6e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6d8:	f000 f93a 	bl	800e950 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	e002      	b.n	800e6ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6ea:	4a04      	ldr	r2, [pc, #16]	@ (800e6fc <prvSampleTimeNow+0x3c>)
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	2400ef2c 	.word	0x2400ef2c

0800e700 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
 800e70c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e70e:	2300      	movs	r3, #0
 800e710:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	68ba      	ldr	r2, [r7, #8]
 800e716:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	68fa      	ldr	r2, [r7, #12]
 800e71c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	429a      	cmp	r2, r3
 800e724:	d812      	bhi.n	800e74c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	1ad2      	subs	r2, r2, r3
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	429a      	cmp	r2, r3
 800e732:	d302      	bcc.n	800e73a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e734:	2301      	movs	r3, #1
 800e736:	617b      	str	r3, [r7, #20]
 800e738:	e01b      	b.n	800e772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e73a:	4b10      	ldr	r3, [pc, #64]	@ (800e77c <prvInsertTimerInActiveList+0x7c>)
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3304      	adds	r3, #4
 800e742:	4619      	mov	r1, r3
 800e744:	4610      	mov	r0, r2
 800e746:	f7fd ff68 	bl	800c61a <vListInsert>
 800e74a:	e012      	b.n	800e772 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d206      	bcs.n	800e762 <prvInsertTimerInActiveList+0x62>
 800e754:	68ba      	ldr	r2, [r7, #8]
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d302      	bcc.n	800e762 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e75c:	2301      	movs	r3, #1
 800e75e:	617b      	str	r3, [r7, #20]
 800e760:	e007      	b.n	800e772 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e762:	4b07      	ldr	r3, [pc, #28]	@ (800e780 <prvInsertTimerInActiveList+0x80>)
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	3304      	adds	r3, #4
 800e76a:	4619      	mov	r1, r3
 800e76c:	4610      	mov	r0, r2
 800e76e:	f7fd ff54 	bl	800c61a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e772:	697b      	ldr	r3, [r7, #20]
}
 800e774:	4618      	mov	r0, r3
 800e776:	3718      	adds	r7, #24
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	2400ef20 	.word	0x2400ef20
 800e780:	2400ef1c 	.word	0x2400ef1c

0800e784 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b08e      	sub	sp, #56	@ 0x38
 800e788:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e78a:	e0ce      	b.n	800e92a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	da19      	bge.n	800e7c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e792:	1d3b      	adds	r3, r7, #4
 800e794:	3304      	adds	r3, #4
 800e796:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10b      	bne.n	800e7b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	61fb      	str	r3, [r7, #28]
}
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop
 800e7b4:	e7fd      	b.n	800e7b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7bc:	6850      	ldr	r0, [r2, #4]
 800e7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7c0:	6892      	ldr	r2, [r2, #8]
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f2c0 80ae 	blt.w	800e92a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d4:	695b      	ldr	r3, [r3, #20]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d004      	beq.n	800e7e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7dc:	3304      	adds	r3, #4
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fd ff54 	bl	800c68c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7e4:	463b      	mov	r3, r7
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff ff6a 	bl	800e6c0 <prvSampleTimeNow>
 800e7ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2b09      	cmp	r3, #9
 800e7f2:	f200 8097 	bhi.w	800e924 <prvProcessReceivedCommands+0x1a0>
 800e7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7fc <prvProcessReceivedCommands+0x78>)
 800e7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7fc:	0800e825 	.word	0x0800e825
 800e800:	0800e825 	.word	0x0800e825
 800e804:	0800e825 	.word	0x0800e825
 800e808:	0800e89b 	.word	0x0800e89b
 800e80c:	0800e8af 	.word	0x0800e8af
 800e810:	0800e8fb 	.word	0x0800e8fb
 800e814:	0800e825 	.word	0x0800e825
 800e818:	0800e825 	.word	0x0800e825
 800e81c:	0800e89b 	.word	0x0800e89b
 800e820:	0800e8af 	.word	0x0800e8af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e82a:	f043 0301 	orr.w	r3, r3, #1
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83a:	699b      	ldr	r3, [r3, #24]
 800e83c:	18d1      	adds	r1, r2, r3
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e844:	f7ff ff5c 	bl	800e700 <prvInsertTimerInActiveList>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d06c      	beq.n	800e928 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e854:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e858:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e85c:	f003 0304 	and.w	r3, r3, #4
 800e860:	2b00      	cmp	r3, #0
 800e862:	d061      	beq.n	800e928 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e864:	68ba      	ldr	r2, [r7, #8]
 800e866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	441a      	add	r2, r3
 800e86c:	2300      	movs	r3, #0
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	2300      	movs	r3, #0
 800e872:	2100      	movs	r1, #0
 800e874:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e876:	f7ff fe01 	bl	800e47c <xTimerGenericCommand>
 800e87a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e87c:	6a3b      	ldr	r3, [r7, #32]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d152      	bne.n	800e928 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	61bb      	str	r3, [r7, #24]
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	e7fd      	b.n	800e896 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8a0:	f023 0301 	bic.w	r3, r3, #1
 800e8a4:	b2da      	uxtb	r2, r3
 800e8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e8ac:	e03d      	b.n	800e92a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e8b4:	f043 0301 	orr.w	r3, r3, #1
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c8:	699b      	ldr	r3, [r3, #24]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d10b      	bne.n	800e8e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	617b      	str	r3, [r7, #20]
}
 800e8e0:	bf00      	nop
 800e8e2:	bf00      	nop
 800e8e4:	e7fd      	b.n	800e8e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e8:	699a      	ldr	r2, [r3, #24]
 800e8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ec:	18d1      	adds	r1, r2, r3
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8f4:	f7ff ff04 	bl	800e700 <prvInsertTimerInActiveList>
					break;
 800e8f8:	e017      	b.n	800e92a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e900:	f003 0302 	and.w	r3, r3, #2
 800e904:	2b00      	cmp	r3, #0
 800e906:	d103      	bne.n	800e910 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e90a:	f7fd fd15 	bl	800c338 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e90e:	e00c      	b.n	800e92a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e912:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e916:	f023 0301 	bic.w	r3, r3, #1
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e922:	e002      	b.n	800e92a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e924:	bf00      	nop
 800e926:	e000      	b.n	800e92a <prvProcessReceivedCommands+0x1a6>
					break;
 800e928:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e92a:	4b08      	ldr	r3, [pc, #32]	@ (800e94c <prvProcessReceivedCommands+0x1c8>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	1d39      	adds	r1, r7, #4
 800e930:	2200      	movs	r2, #0
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fbd4 	bl	800d0e0 <xQueueReceive>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f47f af26 	bne.w	800e78c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e940:	bf00      	nop
 800e942:	bf00      	nop
 800e944:	3730      	adds	r7, #48	@ 0x30
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	2400ef24 	.word	0x2400ef24

0800e950 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b088      	sub	sp, #32
 800e954:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e956:	e049      	b.n	800e9ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e958:	4b2e      	ldr	r3, [pc, #184]	@ (800ea14 <prvSwitchTimerLists+0xc4>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	68db      	ldr	r3, [r3, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e962:	4b2c      	ldr	r3, [pc, #176]	@ (800ea14 <prvSwitchTimerLists+0xc4>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	3304      	adds	r3, #4
 800e970:	4618      	mov	r0, r3
 800e972:	f7fd fe8b 	bl	800c68c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6a1b      	ldr	r3, [r3, #32]
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e984:	f003 0304 	and.w	r3, r3, #4
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d02f      	beq.n	800e9ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	4413      	add	r3, r2
 800e994:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d90e      	bls.n	800e9bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	68ba      	ldr	r2, [r7, #8]
 800e9a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e9aa:	4b1a      	ldr	r3, [pc, #104]	@ (800ea14 <prvSwitchTimerLists+0xc4>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3304      	adds	r3, #4
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	f7fd fe30 	bl	800c61a <vListInsert>
 800e9ba:	e017      	b.n	800e9ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7ff fd58 	bl	800e47c <xTimerGenericCommand>
 800e9cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10b      	bne.n	800e9ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	603b      	str	r3, [r7, #0]
}
 800e9e6:	bf00      	nop
 800e9e8:	bf00      	nop
 800e9ea:	e7fd      	b.n	800e9e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9ec:	4b09      	ldr	r3, [pc, #36]	@ (800ea14 <prvSwitchTimerLists+0xc4>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1b0      	bne.n	800e958 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9f6:	4b07      	ldr	r3, [pc, #28]	@ (800ea14 <prvSwitchTimerLists+0xc4>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9fc:	4b06      	ldr	r3, [pc, #24]	@ (800ea18 <prvSwitchTimerLists+0xc8>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a04      	ldr	r2, [pc, #16]	@ (800ea14 <prvSwitchTimerLists+0xc4>)
 800ea02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ea04:	4a04      	ldr	r2, [pc, #16]	@ (800ea18 <prvSwitchTimerLists+0xc8>)
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	6013      	str	r3, [r2, #0]
}
 800ea0a:	bf00      	nop
 800ea0c:	3718      	adds	r7, #24
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2400ef1c 	.word	0x2400ef1c
 800ea18:	2400ef20 	.word	0x2400ef20

0800ea1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ea22:	f7fd ff91 	bl	800c948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea26:	4b15      	ldr	r3, [pc, #84]	@ (800ea7c <prvCheckForValidListAndQueue+0x60>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d120      	bne.n	800ea70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea2e:	4814      	ldr	r0, [pc, #80]	@ (800ea80 <prvCheckForValidListAndQueue+0x64>)
 800ea30:	f7fd fda2 	bl	800c578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea34:	4813      	ldr	r0, [pc, #76]	@ (800ea84 <prvCheckForValidListAndQueue+0x68>)
 800ea36:	f7fd fd9f 	bl	800c578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea3a:	4b13      	ldr	r3, [pc, #76]	@ (800ea88 <prvCheckForValidListAndQueue+0x6c>)
 800ea3c:	4a10      	ldr	r2, [pc, #64]	@ (800ea80 <prvCheckForValidListAndQueue+0x64>)
 800ea3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea40:	4b12      	ldr	r3, [pc, #72]	@ (800ea8c <prvCheckForValidListAndQueue+0x70>)
 800ea42:	4a10      	ldr	r2, [pc, #64]	@ (800ea84 <prvCheckForValidListAndQueue+0x68>)
 800ea44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea46:	2300      	movs	r3, #0
 800ea48:	9300      	str	r3, [sp, #0]
 800ea4a:	4b11      	ldr	r3, [pc, #68]	@ (800ea90 <prvCheckForValidListAndQueue+0x74>)
 800ea4c:	4a11      	ldr	r2, [pc, #68]	@ (800ea94 <prvCheckForValidListAndQueue+0x78>)
 800ea4e:	2110      	movs	r1, #16
 800ea50:	200a      	movs	r0, #10
 800ea52:	f7fe f905 	bl	800cc60 <xQueueGenericCreateStatic>
 800ea56:	4603      	mov	r3, r0
 800ea58:	4a08      	ldr	r2, [pc, #32]	@ (800ea7c <prvCheckForValidListAndQueue+0x60>)
 800ea5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea5c:	4b07      	ldr	r3, [pc, #28]	@ (800ea7c <prvCheckForValidListAndQueue+0x60>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d005      	beq.n	800ea70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea64:	4b05      	ldr	r3, [pc, #20]	@ (800ea7c <prvCheckForValidListAndQueue+0x60>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	490b      	ldr	r1, [pc, #44]	@ (800ea98 <prvCheckForValidListAndQueue+0x7c>)
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f7fe fd2a 	bl	800d4c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea70:	f7fd ff9c 	bl	800c9ac <vPortExitCritical>
}
 800ea74:	bf00      	nop
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	2400ef24 	.word	0x2400ef24
 800ea80:	2400eef4 	.word	0x2400eef4
 800ea84:	2400ef08 	.word	0x2400ef08
 800ea88:	2400ef1c 	.word	0x2400ef1c
 800ea8c:	2400ef20 	.word	0x2400ef20
 800ea90:	2400efd0 	.word	0x2400efd0
 800ea94:	2400ef30 	.word	0x2400ef30
 800ea98:	0801dd84 	.word	0x0801dd84

0800ea9c <micro_ros_string_utilities_init>:
 800ea9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa0:	b086      	sub	sp, #24
 800eaa2:	460f      	mov	r7, r1
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	a801      	add	r0, sp, #4
 800eaa8:	f001 f978 	bl	800fd9c <rcutils_get_default_allocator>
 800eaac:	4638      	mov	r0, r7
 800eaae:	f7f1 fc21 	bl	80002f4 <strlen>
 800eab2:	f100 0801 	add.w	r8, r0, #1
 800eab6:	9b01      	ldr	r3, [sp, #4]
 800eab8:	4605      	mov	r5, r0
 800eaba:	9905      	ldr	r1, [sp, #20]
 800eabc:	4640      	mov	r0, r8
 800eabe:	4798      	blx	r3
 800eac0:	4606      	mov	r6, r0
 800eac2:	4642      	mov	r2, r8
 800eac4:	2100      	movs	r1, #0
 800eac6:	f00e f9e7 	bl	801ce98 <memset>
 800eaca:	462a      	mov	r2, r5
 800eacc:	4639      	mov	r1, r7
 800eace:	4630      	mov	r0, r6
 800ead0:	f00e faab 	bl	801d02a <memcpy>
 800ead4:	4620      	mov	r0, r4
 800ead6:	f8c4 8008 	str.w	r8, [r4, #8]
 800eada:	e9c4 6500 	strd	r6, r5, [r4]
 800eade:	b006      	add	sp, #24
 800eae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eae4 <rcl_get_zero_initialized_init_options>:
 800eae4:	2000      	movs	r0, #0
 800eae6:	4770      	bx	lr

0800eae8 <rcl_init_options_init>:
 800eae8:	b084      	sub	sp, #16
 800eaea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaec:	b097      	sub	sp, #92	@ 0x5c
 800eaee:	ae1d      	add	r6, sp, #116	@ 0x74
 800eaf0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d058      	beq.n	800ebaa <rcl_init_options_init+0xc2>
 800eaf8:	6803      	ldr	r3, [r0, #0]
 800eafa:	4605      	mov	r5, r0
 800eafc:	b133      	cbz	r3, 800eb0c <rcl_init_options_init+0x24>
 800eafe:	2464      	movs	r4, #100	@ 0x64
 800eb00:	4620      	mov	r0, r4
 800eb02:	b017      	add	sp, #92	@ 0x5c
 800eb04:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eb08:	b004      	add	sp, #16
 800eb0a:	4770      	bx	lr
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f001 f953 	bl	800fdb8 <rcutils_allocator_is_valid>
 800eb12:	2800      	cmp	r0, #0
 800eb14:	d049      	beq.n	800ebaa <rcl_init_options_init+0xc2>
 800eb16:	46b4      	mov	ip, r6
 800eb18:	ac11      	add	r4, sp, #68	@ 0x44
 800eb1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb20:	f8dc 3000 	ldr.w	r3, [ip]
 800eb24:	2050      	movs	r0, #80	@ 0x50
 800eb26:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eb2c:	4798      	blx	r3
 800eb2e:	4604      	mov	r4, r0
 800eb30:	6028      	str	r0, [r5, #0]
 800eb32:	2800      	cmp	r0, #0
 800eb34:	d03b      	beq.n	800ebae <rcl_init_options_init+0xc6>
 800eb36:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800eb3a:	4686      	mov	lr, r0
 800eb3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb44:	f8dc 3000 	ldr.w	r3, [ip]
 800eb48:	a802      	add	r0, sp, #8
 800eb4a:	f8ce 3000 	str.w	r3, [lr]
 800eb4e:	f001 f9bf 	bl	800fed0 <rmw_get_zero_initialized_init_options>
 800eb52:	f10d 0e08 	add.w	lr, sp, #8
 800eb56:	f104 0c18 	add.w	ip, r4, #24
 800eb5a:	682f      	ldr	r7, [r5, #0]
 800eb5c:	ac20      	add	r4, sp, #128	@ 0x80
 800eb5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb76:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eb7a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eb7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eb82:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb86:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800eb8a:	f107 0018 	add.w	r0, r7, #24
 800eb8e:	f001 f9cd 	bl	800ff2c <rmw_init_options_init>
 800eb92:	4604      	mov	r4, r0
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d0b3      	beq.n	800eb00 <rcl_init_options_init+0x18>
 800eb98:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eb9a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800eb9c:	6828      	ldr	r0, [r5, #0]
 800eb9e:	4798      	blx	r3
 800eba0:	4620      	mov	r0, r4
 800eba2:	f008 f9ff 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 800eba6:	4604      	mov	r4, r0
 800eba8:	e7aa      	b.n	800eb00 <rcl_init_options_init+0x18>
 800ebaa:	240b      	movs	r4, #11
 800ebac:	e7a8      	b.n	800eb00 <rcl_init_options_init+0x18>
 800ebae:	240a      	movs	r4, #10
 800ebb0:	e7a6      	b.n	800eb00 <rcl_init_options_init+0x18>
 800ebb2:	bf00      	nop

0800ebb4 <rcl_init_options_fini>:
 800ebb4:	b530      	push	{r4, r5, lr}
 800ebb6:	b087      	sub	sp, #28
 800ebb8:	b1f0      	cbz	r0, 800ebf8 <rcl_init_options_fini+0x44>
 800ebba:	6803      	ldr	r3, [r0, #0]
 800ebbc:	4604      	mov	r4, r0
 800ebbe:	b1db      	cbz	r3, 800ebf8 <rcl_init_options_fini+0x44>
 800ebc0:	469c      	mov	ip, r3
 800ebc2:	f10d 0e04 	add.w	lr, sp, #4
 800ebc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ebca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ebce:	f8dc 3000 	ldr.w	r3, [ip]
 800ebd2:	a801      	add	r0, sp, #4
 800ebd4:	f8ce 3000 	str.w	r3, [lr]
 800ebd8:	f001 f8ee 	bl	800fdb8 <rcutils_allocator_is_valid>
 800ebdc:	b160      	cbz	r0, 800ebf8 <rcl_init_options_fini+0x44>
 800ebde:	6820      	ldr	r0, [r4, #0]
 800ebe0:	3018      	adds	r0, #24
 800ebe2:	f001 fa5d 	bl	80100a0 <rmw_init_options_fini>
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	b950      	cbnz	r0, 800ec00 <rcl_init_options_fini+0x4c>
 800ebea:	6820      	ldr	r0, [r4, #0]
 800ebec:	9b02      	ldr	r3, [sp, #8]
 800ebee:	9905      	ldr	r1, [sp, #20]
 800ebf0:	4798      	blx	r3
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	b007      	add	sp, #28
 800ebf6:	bd30      	pop	{r4, r5, pc}
 800ebf8:	250b      	movs	r5, #11
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	b007      	add	sp, #28
 800ebfe:	bd30      	pop	{r4, r5, pc}
 800ec00:	f008 f9d0 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 800ec04:	4605      	mov	r5, r0
 800ec06:	e7f8      	b.n	800ebfa <rcl_init_options_fini+0x46>

0800ec08 <rcl_init_options_copy>:
 800ec08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0c:	b094      	sub	sp, #80	@ 0x50
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	d05b      	beq.n	800ecca <rcl_init_options_copy+0xc2>
 800ec12:	4604      	mov	r4, r0
 800ec14:	6800      	ldr	r0, [r0, #0]
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d057      	beq.n	800ecca <rcl_init_options_copy+0xc2>
 800ec1a:	460e      	mov	r6, r1
 800ec1c:	f001 f8cc 	bl	800fdb8 <rcutils_allocator_is_valid>
 800ec20:	2e00      	cmp	r6, #0
 800ec22:	d052      	beq.n	800ecca <rcl_init_options_copy+0xc2>
 800ec24:	f080 0001 	eor.w	r0, r0, #1
 800ec28:	b2c0      	uxtb	r0, r0
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d14d      	bne.n	800ecca <rcl_init_options_copy+0xc2>
 800ec2e:	6833      	ldr	r3, [r6, #0]
 800ec30:	b123      	cbz	r3, 800ec3c <rcl_init_options_copy+0x34>
 800ec32:	2464      	movs	r4, #100	@ 0x64
 800ec34:	4620      	mov	r0, r4
 800ec36:	b014      	add	sp, #80	@ 0x50
 800ec38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec3c:	6827      	ldr	r7, [r4, #0]
 800ec3e:	ad0f      	add	r5, sp, #60	@ 0x3c
 800ec40:	46bc      	mov	ip, r7
 800ec42:	f8d7 8000 	ldr.w	r8, [r7]
 800ec46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec4c:	f8dc 3000 	ldr.w	r3, [ip]
 800ec50:	2050      	movs	r0, #80	@ 0x50
 800ec52:	4619      	mov	r1, r3
 800ec54:	602b      	str	r3, [r5, #0]
 800ec56:	47c0      	blx	r8
 800ec58:	4605      	mov	r5, r0
 800ec5a:	6030      	str	r0, [r6, #0]
 800ec5c:	b3d0      	cbz	r0, 800ecd4 <rcl_init_options_copy+0xcc>
 800ec5e:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ec62:	4686      	mov	lr, r0
 800ec64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec6c:	f8dc 3000 	ldr.w	r3, [ip]
 800ec70:	4668      	mov	r0, sp
 800ec72:	f8ce 3000 	str.w	r3, [lr]
 800ec76:	f001 f92b 	bl	800fed0 <rmw_get_zero_initialized_init_options>
 800ec7a:	46ee      	mov	lr, sp
 800ec7c:	f105 0c18 	add.w	ip, r5, #24
 800ec80:	6824      	ldr	r4, [r4, #0]
 800ec82:	6835      	ldr	r5, [r6, #0]
 800ec84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ec98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec9c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eca0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eca4:	f104 0018 	add.w	r0, r4, #24
 800eca8:	f105 0118 	add.w	r1, r5, #24
 800ecac:	f001 f9a6 	bl	800fffc <rmw_init_options_copy>
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	2800      	cmp	r0, #0
 800ecb4:	d0be      	beq.n	800ec34 <rcl_init_options_copy+0x2c>
 800ecb6:	f001 f88d 	bl	800fdd4 <rcutils_get_error_string>
 800ecba:	f001 f8a1 	bl	800fe00 <rcutils_reset_error>
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f7ff ff78 	bl	800ebb4 <rcl_init_options_fini>
 800ecc4:	b140      	cbz	r0, 800ecd8 <rcl_init_options_copy+0xd0>
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	e7b4      	b.n	800ec34 <rcl_init_options_copy+0x2c>
 800ecca:	240b      	movs	r4, #11
 800eccc:	4620      	mov	r0, r4
 800ecce:	b014      	add	sp, #80	@ 0x50
 800ecd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd4:	240a      	movs	r4, #10
 800ecd6:	e7ad      	b.n	800ec34 <rcl_init_options_copy+0x2c>
 800ecd8:	4620      	mov	r0, r4
 800ecda:	b014      	add	sp, #80	@ 0x50
 800ecdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	f008 b960 	b.w	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>

0800ece4 <rcl_init_options_set_domain_id>:
 800ece4:	b120      	cbz	r0, 800ecf0 <rcl_init_options_set_domain_id+0xc>
 800ece6:	6803      	ldr	r3, [r0, #0]
 800ece8:	b113      	cbz	r3, 800ecf0 <rcl_init_options_set_domain_id+0xc>
 800ecea:	2000      	movs	r0, #0
 800ecec:	6259      	str	r1, [r3, #36]	@ 0x24
 800ecee:	4770      	bx	lr
 800ecf0:	200b      	movs	r0, #11
 800ecf2:	4770      	bx	lr

0800ecf4 <rcl_get_zero_initialized_publisher>:
 800ecf4:	4b01      	ldr	r3, [pc, #4]	@ (800ecfc <rcl_get_zero_initialized_publisher+0x8>)
 800ecf6:	6818      	ldr	r0, [r3, #0]
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	0801de0c 	.word	0x0801de0c

0800ed00 <rcl_publisher_init>:
 800ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed04:	b088      	sub	sp, #32
 800ed06:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ed08:	2e00      	cmp	r6, #0
 800ed0a:	d06b      	beq.n	800ede4 <rcl_publisher_init+0xe4>
 800ed0c:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800ed10:	4605      	mov	r5, r0
 800ed12:	460f      	mov	r7, r1
 800ed14:	4690      	mov	r8, r2
 800ed16:	4650      	mov	r0, sl
 800ed18:	4699      	mov	r9, r3
 800ed1a:	f001 f84d 	bl	800fdb8 <rcutils_allocator_is_valid>
 800ed1e:	f080 0401 	eor.w	r4, r0, #1
 800ed22:	b2e4      	uxtb	r4, r4
 800ed24:	2c00      	cmp	r4, #0
 800ed26:	d15d      	bne.n	800ede4 <rcl_publisher_init+0xe4>
 800ed28:	2d00      	cmp	r5, #0
 800ed2a:	d05b      	beq.n	800ede4 <rcl_publisher_init+0xe4>
 800ed2c:	682b      	ldr	r3, [r5, #0]
 800ed2e:	b123      	cbz	r3, 800ed3a <rcl_publisher_init+0x3a>
 800ed30:	2464      	movs	r4, #100	@ 0x64
 800ed32:	4620      	mov	r0, r4
 800ed34:	b008      	add	sp, #32
 800ed36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed3a:	4638      	mov	r0, r7
 800ed3c:	f008 fc30 	bl	80175a0 <rcl_node_is_valid>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d054      	beq.n	800edee <rcl_publisher_init+0xee>
 800ed44:	f1b8 0f00 	cmp.w	r8, #0
 800ed48:	d04c      	beq.n	800ede4 <rcl_publisher_init+0xe4>
 800ed4a:	fab9 f389 	clz	r3, r9
 800ed4e:	095b      	lsrs	r3, r3, #5
 800ed50:	f1b9 0f00 	cmp.w	r9, #0
 800ed54:	d046      	beq.n	800ede4 <rcl_publisher_init+0xe4>
 800ed56:	aa07      	add	r2, sp, #28
 800ed58:	9307      	str	r3, [sp, #28]
 800ed5a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ed5e:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ed62:	9205      	str	r2, [sp, #20]
 800ed64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed68:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ed6c:	4649      	mov	r1, r9
 800ed6e:	4638      	mov	r0, r7
 800ed70:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800ed74:	f008 fc6c 	bl	8017650 <rcl_node_resolve_name>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d14f      	bne.n	800ee1c <rcl_publisher_init+0x11c>
 800ed7c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800ed7e:	20c8      	movs	r0, #200	@ 0xc8
 800ed80:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ed82:	4798      	blx	r3
 800ed84:	6028      	str	r0, [r5, #0]
 800ed86:	2800      	cmp	r0, #0
 800ed88:	d050      	beq.n	800ee2c <rcl_publisher_init+0x12c>
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	f008 fc2a 	bl	80175e4 <rcl_node_get_rmw_handle>
 800ed90:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ed94:	4641      	mov	r1, r8
 800ed96:	9a07      	ldr	r2, [sp, #28]
 800ed98:	9300      	str	r3, [sp, #0]
 800ed9a:	4633      	mov	r3, r6
 800ed9c:	682c      	ldr	r4, [r5, #0]
 800ed9e:	f001 fca5 	bl	80106ec <rmw_create_publisher>
 800eda2:	682b      	ldr	r3, [r5, #0]
 800eda4:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800eda8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800edac:	b370      	cbz	r0, 800ee0c <rcl_publisher_init+0x10c>
 800edae:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800edb2:	f001 fd7f 	bl	80108b4 <rmw_publisher_get_actual_qos>
 800edb6:	682b      	ldr	r3, [r5, #0]
 800edb8:	4604      	mov	r4, r0
 800edba:	b9d0      	cbnz	r0, 800edf2 <rcl_publisher_init+0xf2>
 800edbc:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800edc0:	4631      	mov	r1, r6
 800edc2:	4618      	mov	r0, r3
 800edc4:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800edc8:	2270      	movs	r2, #112	@ 0x70
 800edca:	f00e f92e 	bl	801d02a <memcpy>
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800edd4:	9807      	ldr	r0, [sp, #28]
 800edd6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800edd8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800edda:	4798      	blx	r3
 800eddc:	4620      	mov	r0, r4
 800edde:	b008      	add	sp, #32
 800ede0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ede4:	240b      	movs	r4, #11
 800ede6:	4620      	mov	r0, r4
 800ede8:	b008      	add	sp, #32
 800edea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edee:	24c8      	movs	r4, #200	@ 0xc8
 800edf0:	e79f      	b.n	800ed32 <rcl_publisher_init+0x32>
 800edf2:	b1cb      	cbz	r3, 800ee28 <rcl_publisher_init+0x128>
 800edf4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800edf8:	b142      	cbz	r2, 800ee0c <rcl_publisher_init+0x10c>
 800edfa:	4638      	mov	r0, r7
 800edfc:	f008 fbf2 	bl	80175e4 <rcl_node_get_rmw_handle>
 800ee00:	682b      	ldr	r3, [r5, #0]
 800ee02:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ee06:	f001 fd69 	bl	80108dc <rmw_destroy_publisher>
 800ee0a:	682b      	ldr	r3, [r5, #0]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800ee10:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ee12:	2401      	movs	r4, #1
 800ee14:	4790      	blx	r2
 800ee16:	2300      	movs	r3, #0
 800ee18:	602b      	str	r3, [r5, #0]
 800ee1a:	e7db      	b.n	800edd4 <rcl_publisher_init+0xd4>
 800ee1c:	2867      	cmp	r0, #103	@ 0x67
 800ee1e:	d007      	beq.n	800ee30 <rcl_publisher_init+0x130>
 800ee20:	2869      	cmp	r0, #105	@ 0x69
 800ee22:	d005      	beq.n	800ee30 <rcl_publisher_init+0x130>
 800ee24:	280a      	cmp	r0, #10
 800ee26:	d001      	beq.n	800ee2c <rcl_publisher_init+0x12c>
 800ee28:	2401      	movs	r4, #1
 800ee2a:	e7d3      	b.n	800edd4 <rcl_publisher_init+0xd4>
 800ee2c:	240a      	movs	r4, #10
 800ee2e:	e7d1      	b.n	800edd4 <rcl_publisher_init+0xd4>
 800ee30:	2467      	movs	r4, #103	@ 0x67
 800ee32:	e7cf      	b.n	800edd4 <rcl_publisher_init+0xd4>

0800ee34 <rcl_publisher_get_default_options>:
 800ee34:	b570      	push	{r4, r5, r6, lr}
 800ee36:	4d14      	ldr	r5, [pc, #80]	@ (800ee88 <rcl_publisher_get_default_options+0x54>)
 800ee38:	b088      	sub	sp, #32
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	2250      	movs	r2, #80	@ 0x50
 800ee3e:	4913      	ldr	r1, [pc, #76]	@ (800ee8c <rcl_publisher_get_default_options+0x58>)
 800ee40:	4628      	mov	r0, r5
 800ee42:	f00e f8f2 	bl	801d02a <memcpy>
 800ee46:	a802      	add	r0, sp, #8
 800ee48:	f000 ffa8 	bl	800fd9c <rcutils_get_default_allocator>
 800ee4c:	f10d 0c08 	add.w	ip, sp, #8
 800ee50:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ee54:	466e      	mov	r6, sp
 800ee56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ee62:	4630      	mov	r0, r6
 800ee64:	f8ce 3000 	str.w	r3, [lr]
 800ee68:	f001 f842 	bl	800fef0 <rmw_get_default_publisher_options>
 800ee6c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ee70:	2270      	movs	r2, #112	@ 0x70
 800ee72:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ee76:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f00e f8d4 	bl	801d02a <memcpy>
 800ee82:	4620      	mov	r0, r4
 800ee84:	b008      	add	sp, #32
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	2400f020 	.word	0x2400f020
 800ee8c:	0801de10 	.word	0x0801de10

0800ee90 <rcl_publish>:
 800ee90:	b1f8      	cbz	r0, 800eed2 <rcl_publish+0x42>
 800ee92:	6803      	ldr	r3, [r0, #0]
 800ee94:	b570      	push	{r4, r5, r6, lr}
 800ee96:	4604      	mov	r4, r0
 800ee98:	b1b3      	cbz	r3, 800eec8 <rcl_publish+0x38>
 800ee9a:	4616      	mov	r6, r2
 800ee9c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eea0:	b192      	cbz	r2, 800eec8 <rcl_publish+0x38>
 800eea2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eea6:	460d      	mov	r5, r1
 800eea8:	f008 f89a 	bl	8016fe0 <rcl_context_is_valid>
 800eeac:	b160      	cbz	r0, 800eec8 <rcl_publish+0x38>
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eeb4:	b140      	cbz	r0, 800eec8 <rcl_publish+0x38>
 800eeb6:	b155      	cbz	r5, 800eece <rcl_publish+0x3e>
 800eeb8:	4632      	mov	r2, r6
 800eeba:	4629      	mov	r1, r5
 800eebc:	f001 fbb6 	bl	801062c <rmw_publish>
 800eec0:	3800      	subs	r0, #0
 800eec2:	bf18      	it	ne
 800eec4:	2001      	movne	r0, #1
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eecc:	bd70      	pop	{r4, r5, r6, pc}
 800eece:	200b      	movs	r0, #11
 800eed0:	bd70      	pop	{r4, r5, r6, pc}
 800eed2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eed6:	4770      	bx	lr

0800eed8 <rcl_publisher_is_valid>:
 800eed8:	b1a0      	cbz	r0, 800ef04 <rcl_publisher_is_valid+0x2c>
 800eeda:	6803      	ldr	r3, [r0, #0]
 800eedc:	b510      	push	{r4, lr}
 800eede:	4604      	mov	r4, r0
 800eee0:	b173      	cbz	r3, 800ef00 <rcl_publisher_is_valid+0x28>
 800eee2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eee6:	b15a      	cbz	r2, 800ef00 <rcl_publisher_is_valid+0x28>
 800eee8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eeec:	f008 f878 	bl	8016fe0 <rcl_context_is_valid>
 800eef0:	b130      	cbz	r0, 800ef00 <rcl_publisher_is_valid+0x28>
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eef8:	3800      	subs	r0, #0
 800eefa:	bf18      	it	ne
 800eefc:	2001      	movne	r0, #1
 800eefe:	bd10      	pop	{r4, pc}
 800ef00:	2000      	movs	r0, #0
 800ef02:	bd10      	pop	{r4, pc}
 800ef04:	2000      	movs	r0, #0
 800ef06:	4770      	bx	lr

0800ef08 <rcl_publisher_is_valid_except_context>:
 800ef08:	b130      	cbz	r0, 800ef18 <rcl_publisher_is_valid_except_context+0x10>
 800ef0a:	6800      	ldr	r0, [r0, #0]
 800ef0c:	b120      	cbz	r0, 800ef18 <rcl_publisher_is_valid_except_context+0x10>
 800ef0e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ef12:	3800      	subs	r0, #0
 800ef14:	bf18      	it	ne
 800ef16:	2001      	movne	r0, #1
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop

0800ef1c <_rclc_check_for_new_data>:
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d046      	beq.n	800efae <_rclc_check_for_new_data+0x92>
 800ef20:	4603      	mov	r3, r0
 800ef22:	b530      	push	{r4, r5, lr}
 800ef24:	7802      	ldrb	r2, [r0, #0]
 800ef26:	b085      	sub	sp, #20
 800ef28:	2a0a      	cmp	r2, #10
 800ef2a:	d842      	bhi.n	800efb2 <_rclc_check_for_new_data+0x96>
 800ef2c:	e8df f002 	tbb	[pc, r2]
 800ef30:	14181212 	.word	0x14181212
 800ef34:	06060614 	.word	0x06060614
 800ef38:	2e1a      	.short	0x2e1a
 800ef3a:	16          	.byte	0x16
 800ef3b:	00          	.byte	0x00
 800ef3c:	6a0a      	ldr	r2, [r1, #32]
 800ef3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ef40:	2000      	movs	r0, #0
 800ef42:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ef46:	1a12      	subs	r2, r2, r0
 800ef48:	bf18      	it	ne
 800ef4a:	2201      	movne	r2, #1
 800ef4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ef50:	b005      	add	sp, #20
 800ef52:	bd30      	pop	{r4, r5, pc}
 800ef54:	680a      	ldr	r2, [r1, #0]
 800ef56:	e7f2      	b.n	800ef3e <_rclc_check_for_new_data+0x22>
 800ef58:	698a      	ldr	r2, [r1, #24]
 800ef5a:	e7f0      	b.n	800ef3e <_rclc_check_for_new_data+0x22>
 800ef5c:	688a      	ldr	r2, [r1, #8]
 800ef5e:	e7ee      	b.n	800ef3e <_rclc_check_for_new_data+0x22>
 800ef60:	690a      	ldr	r2, [r1, #16]
 800ef62:	e7ec      	b.n	800ef3e <_rclc_check_for_new_data+0x22>
 800ef64:	685c      	ldr	r4, [r3, #4]
 800ef66:	4608      	mov	r0, r1
 800ef68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ef6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef70:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800ef74:	f104 0110 	add.w	r1, r4, #16
 800ef78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ef7c:	9500      	str	r5, [sp, #0]
 800ef7e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ef82:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ef86:	f00a f9bf 	bl	8019308 <rcl_action_client_wait_set_get_entities_ready>
 800ef8a:	e7e1      	b.n	800ef50 <_rclc_check_for_new_data+0x34>
 800ef8c:	685c      	ldr	r4, [r3, #4]
 800ef8e:	4608      	mov	r0, r1
 800ef90:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800ef94:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800ef98:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ef9c:	e9cd 2100 	strd	r2, r1, [sp]
 800efa0:	f104 0220 	add.w	r2, r4, #32
 800efa4:	f104 0110 	add.w	r1, r4, #16
 800efa8:	f00a fbc8 	bl	801973c <rcl_action_server_wait_set_get_entities_ready>
 800efac:	e7d0      	b.n	800ef50 <_rclc_check_for_new_data+0x34>
 800efae:	200b      	movs	r0, #11
 800efb0:	4770      	bx	lr
 800efb2:	2001      	movs	r0, #1
 800efb4:	e7cc      	b.n	800ef50 <_rclc_check_for_new_data+0x34>
 800efb6:	bf00      	nop

0800efb8 <_rclc_take_new_data>:
 800efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efba:	b09b      	sub	sp, #108	@ 0x6c
 800efbc:	2800      	cmp	r0, #0
 800efbe:	f000 8088 	beq.w	800f0d2 <_rclc_take_new_data+0x11a>
 800efc2:	7803      	ldrb	r3, [r0, #0]
 800efc4:	4604      	mov	r4, r0
 800efc6:	2b0a      	cmp	r3, #10
 800efc8:	f200 8167 	bhi.w	800f29a <_rclc_take_new_data+0x2e2>
 800efcc:	e8df f003 	tbb	[pc, r3]
 800efd0:	44152d2d 	.word	0x44152d2d
 800efd4:	19191944 	.word	0x19191944
 800efd8:	065a      	.short	0x065a
 800efda:	15          	.byte	0x15
 800efdb:	00          	.byte	0x00
 800efdc:	6840      	ldr	r0, [r0, #4]
 800efde:	f890 3020 	ldrb.w	r3, [r0, #32]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f040 80b2 	bne.w	800f14c <_rclc_take_new_data+0x194>
 800efe8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800efec:	2b00      	cmp	r3, #0
 800efee:	f040 80e4 	bne.w	800f1ba <_rclc_take_new_data+0x202>
 800eff2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d16f      	bne.n	800f0da <_rclc_take_new_data+0x122>
 800effa:	2500      	movs	r5, #0
 800effc:	4628      	mov	r0, r5
 800effe:	b01b      	add	sp, #108	@ 0x6c
 800f000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f002:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f004:	6a0b      	ldr	r3, [r1, #32]
 800f006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d0f5      	beq.n	800effa <_rclc_take_new_data+0x42>
 800f00e:	6882      	ldr	r2, [r0, #8]
 800f010:	f100 0110 	add.w	r1, r0, #16
 800f014:	6840      	ldr	r0, [r0, #4]
 800f016:	f008 fcf5 	bl	8017a04 <rcl_take_request>
 800f01a:	4605      	mov	r5, r0
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d0ec      	beq.n	800effa <_rclc_take_new_data+0x42>
 800f020:	f240 2359 	movw	r3, #601	@ 0x259
 800f024:	4298      	cmp	r0, r3
 800f026:	d013      	beq.n	800f050 <_rclc_take_new_data+0x98>
 800f028:	e029      	b.n	800f07e <_rclc_take_new_data+0xc6>
 800f02a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f02c:	680b      	ldr	r3, [r1, #0]
 800f02e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d0e1      	beq.n	800effa <_rclc_take_new_data+0x42>
 800f036:	2300      	movs	r3, #0
 800f038:	aa0a      	add	r2, sp, #40	@ 0x28
 800f03a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f03e:	f008 fd43 	bl	8017ac8 <rcl_take>
 800f042:	4605      	mov	r5, r0
 800f044:	2800      	cmp	r0, #0
 800f046:	d0d9      	beq.n	800effc <_rclc_take_new_data+0x44>
 800f048:	f240 1391 	movw	r3, #401	@ 0x191
 800f04c:	4298      	cmp	r0, r3
 800f04e:	d116      	bne.n	800f07e <_rclc_take_new_data+0xc6>
 800f050:	2300      	movs	r3, #0
 800f052:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f056:	e7d1      	b.n	800effc <_rclc_take_new_data+0x44>
 800f058:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f05a:	698b      	ldr	r3, [r1, #24]
 800f05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d0ca      	beq.n	800effa <_rclc_take_new_data+0x42>
 800f064:	6882      	ldr	r2, [r0, #8]
 800f066:	f100 0110 	add.w	r1, r0, #16
 800f06a:	6840      	ldr	r0, [r0, #4]
 800f06c:	f007 ff48 	bl	8016f00 <rcl_take_response>
 800f070:	4605      	mov	r5, r0
 800f072:	2800      	cmp	r0, #0
 800f074:	d0c1      	beq.n	800effa <_rclc_take_new_data+0x42>
 800f076:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f07a:	4298      	cmp	r0, r3
 800f07c:	d0be      	beq.n	800effc <_rclc_take_new_data+0x44>
 800f07e:	f000 febf 	bl	800fe00 <rcutils_reset_error>
 800f082:	e7bb      	b.n	800effc <_rclc_take_new_data+0x44>
 800f084:	6840      	ldr	r0, [r0, #4]
 800f086:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d17d      	bne.n	800f18a <_rclc_take_new_data+0x1d2>
 800f08e:	69c3      	ldr	r3, [r0, #28]
 800f090:	b11b      	cbz	r3, 800f09a <_rclc_take_new_data+0xe2>
 800f092:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f096:	2b00      	cmp	r3, #0
 800f098:	d144      	bne.n	800f124 <_rclc_take_new_data+0x16c>
 800f09a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f040 80ac 	bne.w	800f1fc <_rclc_take_new_data+0x244>
 800f0a4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d0a6      	beq.n	800effa <_rclc_take_new_data+0x42>
 800f0ac:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f0ae:	a90a      	add	r1, sp, #40	@ 0x28
 800f0b0:	3010      	adds	r0, #16
 800f0b2:	f00a f801 	bl	80190b8 <rcl_action_take_result_response>
 800f0b6:	4605      	mov	r5, r0
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d1e0      	bne.n	800f07e <_rclc_take_new_data+0xc6>
 800f0bc:	6860      	ldr	r0, [r4, #4]
 800f0be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0c2:	f00a fc6b 	bl	801999c <rclc_action_find_handle_by_result_request_sequence_number>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	d098      	beq.n	800effc <_rclc_take_new_data+0x44>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f0d0:	e794      	b.n	800effc <_rclc_take_new_data+0x44>
 800f0d2:	250b      	movs	r5, #11
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	b01b      	add	sp, #108	@ 0x6c
 800f0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0da:	ae04      	add	r6, sp, #16
 800f0dc:	3010      	adds	r0, #16
 800f0de:	aa0a      	add	r2, sp, #40	@ 0x28
 800f0e0:	4631      	mov	r1, r6
 800f0e2:	f00a fa5f 	bl	80195a4 <rcl_action_take_cancel_request>
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d1c8      	bne.n	800f07e <_rclc_take_new_data+0xc6>
 800f0ec:	a90a      	add	r1, sp, #40	@ 0x28
 800f0ee:	6860      	ldr	r0, [r4, #4]
 800f0f0:	f00a fc14 	bl	801991c <rclc_action_find_goal_handle_by_uuid>
 800f0f4:	4607      	mov	r7, r0
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	f000 80bb 	beq.w	800f272 <_rclc_take_new_data+0x2ba>
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f102:	f00a fb95 	bl	8019830 <rcl_action_transition_goal_state>
 800f106:	2803      	cmp	r0, #3
 800f108:	4684      	mov	ip, r0
 800f10a:	f040 80a7 	bne.w	800f25c <_rclc_take_new_data+0x2a4>
 800f10e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f112:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f116:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f11a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f11e:	f887 c008 	strb.w	ip, [r7, #8]
 800f122:	e76b      	b.n	800effc <_rclc_take_new_data+0x44>
 800f124:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f126:	3010      	adds	r0, #16
 800f128:	f00a f846 	bl	80191b8 <rcl_action_take_feedback>
 800f12c:	4605      	mov	r5, r0
 800f12e:	2800      	cmp	r0, #0
 800f130:	d1a5      	bne.n	800f07e <_rclc_take_new_data+0xc6>
 800f132:	6860      	ldr	r0, [r4, #4]
 800f134:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f136:	f00a fbf1 	bl	801991c <rclc_action_find_goal_handle_by_uuid>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2800      	cmp	r0, #0
 800f13e:	f000 80a3 	beq.w	800f288 <_rclc_take_new_data+0x2d0>
 800f142:	2201      	movs	r2, #1
 800f144:	6860      	ldr	r0, [r4, #4]
 800f146:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f14a:	e7a6      	b.n	800f09a <_rclc_take_new_data+0xe2>
 800f14c:	f00a fbc0 	bl	80198d0 <rclc_action_take_goal_handle>
 800f150:	4606      	mov	r6, r0
 800f152:	6860      	ldr	r0, [r4, #4]
 800f154:	2e00      	cmp	r6, #0
 800f156:	f43f af47 	beq.w	800efe8 <_rclc_take_new_data+0x30>
 800f15a:	6070      	str	r0, [r6, #4]
 800f15c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800f160:	69f2      	ldr	r2, [r6, #28]
 800f162:	3010      	adds	r0, #16
 800f164:	f00a f966 	bl	8019434 <rcl_action_take_goal_request>
 800f168:	4605      	mov	r5, r0
 800f16a:	2800      	cmp	r0, #0
 800f16c:	f040 808e 	bne.w	800f28c <_rclc_take_new_data+0x2d4>
 800f170:	69f7      	ldr	r7, [r6, #28]
 800f172:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f174:	7235      	strb	r5, [r6, #8]
 800f176:	f8c6 0009 	str.w	r0, [r6, #9]
 800f17a:	f8c6 100d 	str.w	r1, [r6, #13]
 800f17e:	6860      	ldr	r0, [r4, #4]
 800f180:	f8c6 2011 	str.w	r2, [r6, #17]
 800f184:	f8c6 3015 	str.w	r3, [r6, #21]
 800f188:	e72e      	b.n	800efe8 <_rclc_take_new_data+0x30>
 800f18a:	aa04      	add	r2, sp, #16
 800f18c:	a90a      	add	r1, sp, #40	@ 0x28
 800f18e:	3010      	adds	r0, #16
 800f190:	f009 ff1a 	bl	8018fc8 <rcl_action_take_goal_response>
 800f194:	4605      	mov	r5, r0
 800f196:	2800      	cmp	r0, #0
 800f198:	f47f af71 	bne.w	800f07e <_rclc_take_new_data+0xc6>
 800f19c:	6860      	ldr	r0, [r4, #4]
 800f19e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f1a2:	f00a fbe9 	bl	8019978 <rclc_action_find_handle_by_goal_request_sequence_number>
 800f1a6:	b130      	cbz	r0, 800f1b6 <_rclc_take_new_data+0x1fe>
 800f1a8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f1ac:	2201      	movs	r2, #1
 800f1ae:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f1b2:	f880 2020 	strb.w	r2, [r0, #32]
 800f1b6:	6860      	ldr	r0, [r4, #4]
 800f1b8:	e769      	b.n	800f08e <_rclc_take_new_data+0xd6>
 800f1ba:	3010      	adds	r0, #16
 800f1bc:	aa04      	add	r2, sp, #16
 800f1be:	a90a      	add	r1, sp, #40	@ 0x28
 800f1c0:	f00a f9b0 	bl	8019524 <rcl_action_take_result_request>
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f47f af59 	bne.w	800f07e <_rclc_take_new_data+0xc6>
 800f1cc:	a904      	add	r1, sp, #16
 800f1ce:	6860      	ldr	r0, [r4, #4]
 800f1d0:	f00a fba4 	bl	801991c <rclc_action_find_goal_handle_by_uuid>
 800f1d4:	4607      	mov	r7, r0
 800f1d6:	b160      	cbz	r0, 800f1f2 <_rclc_take_new_data+0x23a>
 800f1d8:	ad0a      	add	r5, sp, #40	@ 0x28
 800f1da:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800f1de:	f04f 0c02 	mov.w	ip, #2
 800f1e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f1ea:	e886 0003 	stmia.w	r6, {r0, r1}
 800f1ee:	f887 c008 	strb.w	ip, [r7, #8]
 800f1f2:	6860      	ldr	r0, [r4, #4]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800f1fa:	e6fa      	b.n	800eff2 <_rclc_take_new_data+0x3a>
 800f1fc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800f200:	a90a      	add	r1, sp, #40	@ 0x28
 800f202:	3010      	adds	r0, #16
 800f204:	f009 ff98 	bl	8019138 <rcl_action_take_cancel_response>
 800f208:	4605      	mov	r5, r0
 800f20a:	2800      	cmp	r0, #0
 800f20c:	f47f af37 	bne.w	800f07e <_rclc_take_new_data+0xc6>
 800f210:	6860      	ldr	r0, [r4, #4]
 800f212:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f216:	f00a fbd3 	bl	80199c0 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800f21a:	4606      	mov	r6, r0
 800f21c:	6860      	ldr	r0, [r4, #4]
 800f21e:	2e00      	cmp	r6, #0
 800f220:	f43f af40 	beq.w	800f0a4 <_rclc_take_new_data+0xec>
 800f224:	2701      	movs	r7, #1
 800f226:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f228:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f43f af3a 	beq.w	800f0a4 <_rclc_take_new_data+0xec>
 800f230:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f232:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800f236:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f23a:	f00a fb6f 	bl	801991c <rclc_action_find_goal_handle_by_uuid>
 800f23e:	b138      	cbz	r0, 800f250 <_rclc_take_new_data+0x298>
 800f240:	6860      	ldr	r0, [r4, #4]
 800f242:	3501      	adds	r5, #1
 800f244:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800f248:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f24a:	42ab      	cmp	r3, r5
 800f24c:	d8f0      	bhi.n	800f230 <_rclc_take_new_data+0x278>
 800f24e:	e729      	b.n	800f0a4 <_rclc_take_new_data+0xec>
 800f250:	6860      	ldr	r0, [r4, #4]
 800f252:	3501      	adds	r5, #1
 800f254:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f256:	42ab      	cmp	r3, r5
 800f258:	d8ea      	bhi.n	800f230 <_rclc_take_new_data+0x278>
 800f25a:	e723      	b.n	800f0a4 <_rclc_take_new_data+0xec>
 800f25c:	ab06      	add	r3, sp, #24
 800f25e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f260:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f264:	2103      	movs	r1, #3
 800f266:	6860      	ldr	r0, [r4, #4]
 800f268:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f26c:	f00a fc1c 	bl	8019aa8 <rclc_action_server_goal_cancel_reject>
 800f270:	e6c4      	b.n	800effc <_rclc_take_new_data+0x44>
 800f272:	ab06      	add	r3, sp, #24
 800f274:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f276:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f27a:	2102      	movs	r1, #2
 800f27c:	6860      	ldr	r0, [r4, #4]
 800f27e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f282:	f00a fc11 	bl	8019aa8 <rclc_action_server_goal_cancel_reject>
 800f286:	e6b9      	b.n	800effc <_rclc_take_new_data+0x44>
 800f288:	6860      	ldr	r0, [r4, #4]
 800f28a:	e706      	b.n	800f09a <_rclc_take_new_data+0xe2>
 800f28c:	4631      	mov	r1, r6
 800f28e:	6860      	ldr	r0, [r4, #4]
 800f290:	f00a fb2e 	bl	80198f0 <rclc_action_remove_used_goal_handle>
 800f294:	f000 fdb4 	bl	800fe00 <rcutils_reset_error>
 800f298:	e6b0      	b.n	800effc <_rclc_take_new_data+0x44>
 800f29a:	2501      	movs	r5, #1
 800f29c:	e6ae      	b.n	800effc <_rclc_take_new_data+0x44>
 800f29e:	bf00      	nop

0800f2a0 <_rclc_execute.part.0>:
 800f2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2a2:	7803      	ldrb	r3, [r0, #0]
 800f2a4:	b085      	sub	sp, #20
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	2b0a      	cmp	r3, #10
 800f2aa:	f200 8139 	bhi.w	800f520 <_rclc_execute.part.0+0x280>
 800f2ae:	e8df f003 	tbb	[pc, r3]
 800f2b2:	4268      	.short	0x4268
 800f2b4:	06a75b4d 	.word	0x06a75b4d
 800f2b8:	721d0606 	.word	0x721d0606
 800f2bc:	62          	.byte	0x62
 800f2bd:	00          	.byte	0x00
 800f2be:	2b06      	cmp	r3, #6
 800f2c0:	f000 8126 	beq.w	800f510 <_rclc_execute.part.0+0x270>
 800f2c4:	2b07      	cmp	r3, #7
 800f2c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f2c8:	f040 811c 	bne.w	800f504 <_rclc_execute.part.0+0x264>
 800f2cc:	f104 0510 	add.w	r5, r4, #16
 800f2d0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f2d4:	6880      	ldr	r0, [r0, #8]
 800f2d6:	4798      	blx	r3
 800f2d8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f2da:	4629      	mov	r1, r5
 800f2dc:	6860      	ldr	r0, [r4, #4]
 800f2de:	f008 fbd1 	bl	8017a84 <rcl_send_response>
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	b378      	cbz	r0, 800f346 <_rclc_execute.part.0+0xa6>
 800f2e6:	f000 fd8b 	bl	800fe00 <rcutils_reset_error>
 800f2ea:	e02c      	b.n	800f346 <_rclc_execute.part.0+0xa6>
 800f2ec:	6840      	ldr	r0, [r0, #4]
 800f2ee:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f000 808e 	beq.w	800f414 <_rclc_execute.part.0+0x174>
 800f2f8:	2600      	movs	r6, #0
 800f2fa:	2701      	movs	r7, #1
 800f2fc:	e004      	b.n	800f308 <_rclc_execute.part.0+0x68>
 800f2fe:	f00a fac1 	bl	8019884 <rclc_action_send_result_request>
 800f302:	b998      	cbnz	r0, 800f32c <_rclc_execute.part.0+0x8c>
 800f304:	722f      	strb	r7, [r5, #8]
 800f306:	6860      	ldr	r0, [r4, #4]
 800f308:	f00a fb6c 	bl	80199e4 <rclc_action_find_first_handle_with_goal_response>
 800f30c:	4605      	mov	r5, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	d07f      	beq.n	800f412 <_rclc_execute.part.0+0x172>
 800f312:	6863      	ldr	r3, [r4, #4]
 800f314:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f316:	699b      	ldr	r3, [r3, #24]
 800f318:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f31c:	f885 6020 	strb.w	r6, [r5, #32]
 800f320:	4798      	blx	r3
 800f322:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f326:	4628      	mov	r0, r5
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d1e8      	bne.n	800f2fe <_rclc_execute.part.0+0x5e>
 800f32c:	6860      	ldr	r0, [r4, #4]
 800f32e:	4629      	mov	r1, r5
 800f330:	f00a fade 	bl	80198f0 <rclc_action_remove_used_goal_handle>
 800f334:	e7e7      	b.n	800f306 <_rclc_execute.part.0+0x66>
 800f336:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f33a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800f33e:	b100      	cbz	r0, 800f342 <_rclc_execute.part.0+0xa2>
 800f340:	68a0      	ldr	r0, [r4, #8]
 800f342:	2400      	movs	r4, #0
 800f344:	4798      	blx	r3
 800f346:	4620      	mov	r0, r4
 800f348:	b005      	add	sp, #20
 800f34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f34c:	6840      	ldr	r0, [r0, #4]
 800f34e:	f008 fef1 	bl	8018134 <rcl_timer_call>
 800f352:	f240 3321 	movw	r3, #801	@ 0x321
 800f356:	4604      	mov	r4, r0
 800f358:	4298      	cmp	r0, r3
 800f35a:	d001      	beq.n	800f360 <_rclc_execute.part.0+0xc0>
 800f35c:	2800      	cmp	r0, #0
 800f35e:	d1c2      	bne.n	800f2e6 <_rclc_execute.part.0+0x46>
 800f360:	2400      	movs	r4, #0
 800f362:	4620      	mov	r0, r4
 800f364:	b005      	add	sp, #20
 800f366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f368:	2400      	movs	r4, #0
 800f36a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f36c:	6880      	ldr	r0, [r0, #8]
 800f36e:	4798      	blx	r3
 800f370:	4620      	mov	r0, r4
 800f372:	b005      	add	sp, #20
 800f374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f376:	2400      	movs	r4, #0
 800f378:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f37a:	4798      	blx	r3
 800f37c:	4620      	mov	r0, r4
 800f37e:	b005      	add	sp, #20
 800f380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f382:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800f386:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f388:	b100      	cbz	r0, 800f38c <_rclc_execute.part.0+0xec>
 800f38a:	68a0      	ldr	r0, [r4, #8]
 800f38c:	2400      	movs	r4, #0
 800f38e:	4798      	blx	r3
 800f390:	4620      	mov	r0, r4
 800f392:	b005      	add	sp, #20
 800f394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f396:	6840      	ldr	r0, [r0, #4]
 800f398:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f39c:	bb3b      	cbnz	r3, 800f3ee <_rclc_execute.part.0+0x14e>
 800f39e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d07d      	beq.n	800f4a2 <_rclc_execute.part.0+0x202>
 800f3a6:	f640 0634 	movw	r6, #2100	@ 0x834
 800f3aa:	2701      	movs	r7, #1
 800f3ac:	e007      	b.n	800f3be <_rclc_execute.part.0+0x11e>
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	f00a fb30 	bl	8019a14 <rclc_action_server_response_goal_request>
 800f3b4:	4629      	mov	r1, r5
 800f3b6:	6860      	ldr	r0, [r4, #4]
 800f3b8:	f00a fa9a 	bl	80198f0 <rclc_action_remove_used_goal_handle>
 800f3bc:	6860      	ldr	r0, [r4, #4]
 800f3be:	2100      	movs	r1, #0
 800f3c0:	f00a fac2 	bl	8019948 <rclc_action_find_first_handle_by_status>
 800f3c4:	4605      	mov	r5, r0
 800f3c6:	2800      	cmp	r0, #0
 800f3c8:	d068      	beq.n	800f49c <_rclc_execute.part.0+0x1fc>
 800f3ca:	6863      	ldr	r3, [r4, #4]
 800f3cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	4798      	blx	r3
 800f3d2:	42b0      	cmp	r0, r6
 800f3d4:	f04f 0100 	mov.w	r1, #0
 800f3d8:	d1e9      	bne.n	800f3ae <_rclc_execute.part.0+0x10e>
 800f3da:	2101      	movs	r1, #1
 800f3dc:	4628      	mov	r0, r5
 800f3de:	f00a fb19 	bl	8019a14 <rclc_action_server_response_goal_request>
 800f3e2:	722f      	strb	r7, [r5, #8]
 800f3e4:	e7ea      	b.n	800f3bc <_rclc_execute.part.0+0x11c>
 800f3e6:	6848      	ldr	r0, [r1, #4]
 800f3e8:	f00a fa82 	bl	80198f0 <rclc_action_remove_used_goal_handle>
 800f3ec:	6860      	ldr	r0, [r4, #4]
 800f3ee:	f00a fab7 	bl	8019960 <rclc_action_find_first_terminated_handle>
 800f3f2:	4601      	mov	r1, r0
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d1f6      	bne.n	800f3e6 <_rclc_execute.part.0+0x146>
 800f3f8:	6860      	ldr	r0, [r4, #4]
 800f3fa:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f3fe:	e7ce      	b.n	800f39e <_rclc_execute.part.0+0xfe>
 800f400:	2400      	movs	r4, #0
 800f402:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f404:	f100 0110 	add.w	r1, r0, #16
 800f408:	6880      	ldr	r0, [r0, #8]
 800f40a:	4798      	blx	r3
 800f40c:	4620      	mov	r0, r4
 800f40e:	b005      	add	sp, #20
 800f410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f412:	6860      	ldr	r0, [r4, #4]
 800f414:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f418:	b18b      	cbz	r3, 800f43e <_rclc_execute.part.0+0x19e>
 800f41a:	68c5      	ldr	r5, [r0, #12]
 800f41c:	b32d      	cbz	r5, 800f46a <_rclc_execute.part.0+0x1ca>
 800f41e:	2600      	movs	r6, #0
 800f420:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f424:	b143      	cbz	r3, 800f438 <_rclc_execute.part.0+0x198>
 800f426:	69c3      	ldr	r3, [r0, #28]
 800f428:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f42c:	b123      	cbz	r3, 800f438 <_rclc_execute.part.0+0x198>
 800f42e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f430:	4628      	mov	r0, r5
 800f432:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f434:	4798      	blx	r3
 800f436:	6860      	ldr	r0, [r4, #4]
 800f438:	682d      	ldr	r5, [r5, #0]
 800f43a:	2d00      	cmp	r5, #0
 800f43c:	d1f0      	bne.n	800f420 <_rclc_execute.part.0+0x180>
 800f43e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f442:	b193      	cbz	r3, 800f46a <_rclc_execute.part.0+0x1ca>
 800f444:	68c5      	ldr	r5, [r0, #12]
 800f446:	b185      	cbz	r5, 800f46a <_rclc_execute.part.0+0x1ca>
 800f448:	2600      	movs	r6, #0
 800f44a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f44e:	b14b      	cbz	r3, 800f464 <_rclc_execute.part.0+0x1c4>
 800f450:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f452:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f456:	b12b      	cbz	r3, 800f464 <_rclc_execute.part.0+0x1c4>
 800f458:	4628      	mov	r0, r5
 800f45a:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f45e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f460:	4798      	blx	r3
 800f462:	6860      	ldr	r0, [r4, #4]
 800f464:	682d      	ldr	r5, [r5, #0]
 800f466:	2d00      	cmp	r5, #0
 800f468:	d1ef      	bne.n	800f44a <_rclc_execute.part.0+0x1aa>
 800f46a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f46e:	2b00      	cmp	r3, #0
 800f470:	f43f af76 	beq.w	800f360 <_rclc_execute.part.0+0xc0>
 800f474:	2700      	movs	r7, #0
 800f476:	e00b      	b.n	800f490 <_rclc_execute.part.0+0x1f0>
 800f478:	6863      	ldr	r3, [r4, #4]
 800f47a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f47c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f47e:	6a1e      	ldr	r6, [r3, #32]
 800f480:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f484:	47b0      	blx	r6
 800f486:	6860      	ldr	r0, [r4, #4]
 800f488:	4629      	mov	r1, r5
 800f48a:	f00a fa31 	bl	80198f0 <rclc_action_remove_used_goal_handle>
 800f48e:	6860      	ldr	r0, [r4, #4]
 800f490:	f00a fab4 	bl	80199fc <rclc_action_find_first_handle_with_result_response>
 800f494:	4605      	mov	r5, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d1ee      	bne.n	800f478 <_rclc_execute.part.0+0x1d8>
 800f49a:	e761      	b.n	800f360 <_rclc_execute.part.0+0xc0>
 800f49c:	6860      	ldr	r0, [r4, #4]
 800f49e:	f880 5020 	strb.w	r5, [r0, #32]
 800f4a2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f43f af5a 	beq.w	800f360 <_rclc_execute.part.0+0xc0>
 800f4ac:	68c5      	ldr	r5, [r0, #12]
 800f4ae:	b1b5      	cbz	r5, 800f4de <_rclc_execute.part.0+0x23e>
 800f4b0:	2602      	movs	r6, #2
 800f4b2:	e001      	b.n	800f4b8 <_rclc_execute.part.0+0x218>
 800f4b4:	682d      	ldr	r5, [r5, #0]
 800f4b6:	b195      	cbz	r5, 800f4de <_rclc_execute.part.0+0x23e>
 800f4b8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f4bc:	2b03      	cmp	r3, #3
 800f4be:	d1f9      	bne.n	800f4b4 <_rclc_execute.part.0+0x214>
 800f4c0:	69c3      	ldr	r3, [r0, #28]
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f4c6:	4798      	blx	r3
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f4d4:	b143      	cbz	r3, 800f4e8 <_rclc_execute.part.0+0x248>
 800f4d6:	f00a fabb 	bl	8019a50 <rclc_action_server_goal_cancel_accept>
 800f4da:	6860      	ldr	r0, [r4, #4]
 800f4dc:	e7ea      	b.n	800f4b4 <_rclc_execute.part.0+0x214>
 800f4de:	2300      	movs	r3, #0
 800f4e0:	461c      	mov	r4, r3
 800f4e2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f4e6:	e72e      	b.n	800f346 <_rclc_execute.part.0+0xa6>
 800f4e8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f4ea:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f4ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f4f2:	2101      	movs	r1, #1
 800f4f4:	6860      	ldr	r0, [r4, #4]
 800f4f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4fa:	f00a fad5 	bl	8019aa8 <rclc_action_server_goal_cancel_reject>
 800f4fe:	722e      	strb	r6, [r5, #8]
 800f500:	6860      	ldr	r0, [r4, #4]
 800f502:	e7d7      	b.n	800f4b4 <_rclc_execute.part.0+0x214>
 800f504:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f506:	f104 0510 	add.w	r5, r4, #16
 800f50a:	6880      	ldr	r0, [r0, #8]
 800f50c:	4798      	blx	r3
 800f50e:	e6e3      	b.n	800f2d8 <_rclc_execute.part.0+0x38>
 800f510:	f100 0510 	add.w	r5, r0, #16
 800f514:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f516:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f518:	4629      	mov	r1, r5
 800f51a:	6880      	ldr	r0, [r0, #8]
 800f51c:	4798      	blx	r3
 800f51e:	e6db      	b.n	800f2d8 <_rclc_execute.part.0+0x38>
 800f520:	2401      	movs	r4, #1
 800f522:	e710      	b.n	800f346 <_rclc_execute.part.0+0xa6>

0800f524 <rclc_executor_trigger_any>:
 800f524:	2800      	cmp	r0, #0
 800f526:	d03d      	beq.n	800f5a4 <rclc_executor_trigger_any+0x80>
 800f528:	2900      	cmp	r1, #0
 800f52a:	d03c      	beq.n	800f5a6 <rclc_executor_trigger_any+0x82>
 800f52c:	4603      	mov	r3, r0
 800f52e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f532:	2200      	movs	r2, #0
 800f534:	2800      	cmp	r0, #0
 800f536:	d035      	beq.n	800f5a4 <rclc_executor_trigger_any+0x80>
 800f538:	b430      	push	{r4, r5}
 800f53a:	f893 c000 	ldrb.w	ip, [r3]
 800f53e:	f1bc 0f08 	cmp.w	ip, #8
 800f542:	d11d      	bne.n	800f580 <rclc_executor_trigger_any+0x5c>
 800f544:	685c      	ldr	r4, [r3, #4]
 800f546:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f548:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f54c:	d105      	bne.n	800f55a <rclc_executor_trigger_any+0x36>
 800f54e:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f552:	b910      	cbnz	r0, 800f55a <rclc_executor_trigger_any+0x36>
 800f554:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f558:	b128      	cbz	r0, 800f566 <rclc_executor_trigger_any+0x42>
 800f55a:	bc30      	pop	{r4, r5}
 800f55c:	4770      	bx	lr
 800f55e:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f562:	2800      	cmp	r0, #0
 800f564:	d1f9      	bne.n	800f55a <rclc_executor_trigger_any+0x36>
 800f566:	3201      	adds	r2, #1
 800f568:	3340      	adds	r3, #64	@ 0x40
 800f56a:	4291      	cmp	r1, r2
 800f56c:	d017      	beq.n	800f59e <rclc_executor_trigger_any+0x7a>
 800f56e:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f572:	2800      	cmp	r0, #0
 800f574:	d0f1      	beq.n	800f55a <rclc_executor_trigger_any+0x36>
 800f576:	f893 c000 	ldrb.w	ip, [r3]
 800f57a:	f1bc 0f08 	cmp.w	ip, #8
 800f57e:	d0e1      	beq.n	800f544 <rclc_executor_trigger_any+0x20>
 800f580:	f1bc 0f09 	cmp.w	ip, #9
 800f584:	d1eb      	bne.n	800f55e <rclc_executor_trigger_any+0x3a>
 800f586:	685c      	ldr	r4, [r3, #4]
 800f588:	6a25      	ldr	r5, [r4, #32]
 800f58a:	2d00      	cmp	r5, #0
 800f58c:	d1e5      	bne.n	800f55a <rclc_executor_trigger_any+0x36>
 800f58e:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f592:	2800      	cmp	r0, #0
 800f594:	d1e1      	bne.n	800f55a <rclc_executor_trigger_any+0x36>
 800f596:	3201      	adds	r2, #1
 800f598:	3340      	adds	r3, #64	@ 0x40
 800f59a:	4291      	cmp	r1, r2
 800f59c:	d1e7      	bne.n	800f56e <rclc_executor_trigger_any+0x4a>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	bc30      	pop	{r4, r5}
 800f5a2:	4770      	bx	lr
 800f5a4:	4770      	bx	lr
 800f5a6:	4608      	mov	r0, r1
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop

0800f5ac <rclc_executor_get_zero_initialized_executor>:
 800f5ac:	b510      	push	{r4, lr}
 800f5ae:	4604      	mov	r4, r0
 800f5b0:	2288      	movs	r2, #136	@ 0x88
 800f5b2:	4902      	ldr	r1, [pc, #8]	@ (800f5bc <rclc_executor_get_zero_initialized_executor+0x10>)
 800f5b4:	f00d fd39 	bl	801d02a <memcpy>
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	bd10      	pop	{r4, pc}
 800f5bc:	0801de60 	.word	0x0801de60

0800f5c0 <rclc_executor_init>:
 800f5c0:	2900      	cmp	r1, #0
 800f5c2:	d06a      	beq.n	800f69a <rclc_executor_init+0xda>
 800f5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	b0b0      	sub	sp, #192	@ 0xc0
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d05c      	beq.n	800f68a <rclc_executor_init+0xca>
 800f5d0:	4616      	mov	r6, r2
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	4688      	mov	r8, r1
 800f5d6:	461f      	mov	r7, r3
 800f5d8:	f000 fbee 	bl	800fdb8 <rcutils_allocator_is_valid>
 800f5dc:	2e00      	cmp	r6, #0
 800f5de:	d054      	beq.n	800f68a <rclc_executor_init+0xca>
 800f5e0:	f080 0401 	eor.w	r4, r0, #1
 800f5e4:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800f5e8:	d14f      	bne.n	800f68a <rclc_executor_init+0xca>
 800f5ea:	2288      	movs	r2, #136	@ 0x88
 800f5ec:	4930      	ldr	r1, [pc, #192]	@ (800f6b0 <rclc_executor_init+0xf0>)
 800f5ee:	a80e      	add	r0, sp, #56	@ 0x38
 800f5f0:	f00d fd1b 	bl	801d02a <memcpy>
 800f5f4:	a90e      	add	r1, sp, #56	@ 0x38
 800f5f6:	2288      	movs	r2, #136	@ 0x88
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	f00d fd16 	bl	801d02a <memcpy>
 800f5fe:	4668      	mov	r0, sp
 800f600:	f8c5 8000 	str.w	r8, [r5]
 800f604:	60ae      	str	r6, [r5, #8]
 800f606:	f008 ff0b 	bl	8018420 <rcl_get_zero_initialized_wait_set>
 800f60a:	46ec      	mov	ip, sp
 800f60c:	f105 0e14 	add.w	lr, r5, #20
 800f610:	f8d7 8000 	ldr.w	r8, [r7]
 800f614:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f618:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f61c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f620:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f624:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f628:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800f6a8 <rclc_executor_init+0xe8>
 800f62c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f630:	f8dc 3000 	ldr.w	r3, [ip]
 800f634:	01b0      	lsls	r0, r6, #6
 800f636:	6939      	ldr	r1, [r7, #16]
 800f638:	f8ce 3000 	str.w	r3, [lr]
 800f63c:	612f      	str	r7, [r5, #16]
 800f63e:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800f642:	47c0      	blx	r8
 800f644:	6068      	str	r0, [r5, #4]
 800f646:	b908      	cbnz	r0, 800f64c <rclc_executor_init+0x8c>
 800f648:	e029      	b.n	800f69e <rclc_executor_init+0xde>
 800f64a:	6868      	ldr	r0, [r5, #4]
 800f64c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f650:	3401      	adds	r4, #1
 800f652:	4631      	mov	r1, r6
 800f654:	f000 fa74 	bl	800fb40 <rclc_executor_handle_init>
 800f658:	42a6      	cmp	r6, r4
 800f65a:	d8f6      	bhi.n	800f64a <rclc_executor_init+0x8a>
 800f65c:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800f660:	f000 fa62 	bl	800fb28 <rclc_executor_handle_counters_zero_init>
 800f664:	4a13      	ldr	r2, [pc, #76]	@ (800f6b4 <rclc_executor_init+0xf4>)
 800f666:	2300      	movs	r3, #0
 800f668:	6868      	ldr	r0, [r5, #4]
 800f66a:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800f66e:	b168      	cbz	r0, 800f68c <rclc_executor_init+0xcc>
 800f670:	68ab      	ldr	r3, [r5, #8]
 800f672:	b173      	cbz	r3, 800f692 <rclc_executor_init+0xd2>
 800f674:	692a      	ldr	r2, [r5, #16]
 800f676:	fab2 f382 	clz	r3, r2
 800f67a:	095b      	lsrs	r3, r3, #5
 800f67c:	b14a      	cbz	r2, 800f692 <rclc_executor_init+0xd2>
 800f67e:	4618      	mov	r0, r3
 800f680:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800f684:	b030      	add	sp, #192	@ 0xc0
 800f686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f68a:	200b      	movs	r0, #11
 800f68c:	b030      	add	sp, #192	@ 0xc0
 800f68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f692:	2000      	movs	r0, #0
 800f694:	b030      	add	sp, #192	@ 0xc0
 800f696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f69a:	200b      	movs	r0, #11
 800f69c:	4770      	bx	lr
 800f69e:	200a      	movs	r0, #10
 800f6a0:	e7f4      	b.n	800f68c <rclc_executor_init+0xcc>
 800f6a2:	bf00      	nop
 800f6a4:	f3af 8000 	nop.w
 800f6a8:	3b9aca00 	.word	0x3b9aca00
 800f6ac:	00000000 	.word	0x00000000
 800f6b0:	0801de60 	.word	0x0801de60
 800f6b4:	0800f525 	.word	0x0800f525

0800f6b8 <rclc_executor_add_timer>:
 800f6b8:	b351      	cbz	r1, 800f710 <rclc_executor_add_timer+0x58>
 800f6ba:	fab0 f280 	clz	r2, r0
 800f6be:	b570      	push	{r4, r5, r6, lr}
 800f6c0:	0952      	lsrs	r2, r2, #5
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	b1e0      	cbz	r0, 800f700 <rclc_executor_add_timer+0x48>
 800f6c6:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800f6ca:	4283      	cmp	r3, r0
 800f6cc:	d301      	bcc.n	800f6d2 <rclc_executor_add_timer+0x1a>
 800f6ce:	2001      	movs	r0, #1
 800f6d0:	bd70      	pop	{r4, r5, r6, pc}
 800f6d2:	6860      	ldr	r0, [r4, #4]
 800f6d4:	019d      	lsls	r5, r3, #6
 800f6d6:	1c5e      	adds	r6, r3, #1
 800f6d8:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800f6dc:	6059      	str	r1, [r3, #4]
 800f6de:	2102      	movs	r1, #2
 800f6e0:	5341      	strh	r1, [r0, r5]
 800f6e2:	2101      	movs	r1, #1
 800f6e4:	f104 0514 	add.w	r5, r4, #20
 800f6e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f6ea:	8719      	strh	r1, [r3, #56]	@ 0x38
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	60e6      	str	r6, [r4, #12]
 800f6f0:	f008 feaa 	bl	8018448 <rcl_wait_set_is_valid>
 800f6f4:	b930      	cbnz	r0, 800f704 <rclc_executor_add_timer+0x4c>
 800f6f6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f6f8:	2000      	movs	r0, #0
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}
 800f700:	200b      	movs	r0, #11
 800f702:	bd70      	pop	{r4, r5, r6, pc}
 800f704:	4628      	mov	r0, r5
 800f706:	f008 fea5 	bl	8018454 <rcl_wait_set_fini>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d0f3      	beq.n	800f6f6 <rclc_executor_add_timer+0x3e>
 800f70e:	bd70      	pop	{r4, r5, r6, pc}
 800f710:	200b      	movs	r0, #11
 800f712:	4770      	bx	lr

0800f714 <rclc_executor_prepare>:
 800f714:	2800      	cmp	r0, #0
 800f716:	d044      	beq.n	800f7a2 <rclc_executor_prepare+0x8e>
 800f718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71a:	f100 0514 	add.w	r5, r0, #20
 800f71e:	b09b      	sub	sp, #108	@ 0x6c
 800f720:	4604      	mov	r4, r0
 800f722:	4628      	mov	r0, r5
 800f724:	f008 fe90 	bl	8018448 <rcl_wait_set_is_valid>
 800f728:	b110      	cbz	r0, 800f730 <rclc_executor_prepare+0x1c>
 800f72a:	2000      	movs	r0, #0
 800f72c:	b01b      	add	sp, #108	@ 0x6c
 800f72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f730:	4628      	mov	r0, r5
 800f732:	f008 fe8f 	bl	8018454 <rcl_wait_set_fini>
 800f736:	2800      	cmp	r0, #0
 800f738:	d130      	bne.n	800f79c <rclc_executor_prepare+0x88>
 800f73a:	a80c      	add	r0, sp, #48	@ 0x30
 800f73c:	ae04      	add	r6, sp, #16
 800f73e:	f008 fe6f 	bl	8018420 <rcl_get_zero_initialized_wait_set>
 800f742:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f746:	46ae      	mov	lr, r5
 800f748:	6927      	ldr	r7, [r4, #16]
 800f74a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f74e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f752:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f756:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f75a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f75e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f762:	f8dc 3000 	ldr.w	r3, [ip]
 800f766:	f8ce 3000 	str.w	r3, [lr]
 800f76a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f76c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	4628      	mov	r0, r5
 800f772:	6822      	ldr	r2, [r4, #0]
 800f774:	6033      	str	r3, [r6, #0]
 800f776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f778:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800f77a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f77e:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800f782:	e9cd 2100 	strd	r2, r1, [sp]
 800f786:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800f788:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f78a:	f009 f963 	bl	8018a54 <rcl_wait_set_init>
 800f78e:	2800      	cmp	r0, #0
 800f790:	d0cc      	beq.n	800f72c <rclc_executor_prepare+0x18>
 800f792:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f794:	f000 fb34 	bl	800fe00 <rcutils_reset_error>
 800f798:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f79a:	e7c7      	b.n	800f72c <rclc_executor_prepare+0x18>
 800f79c:	f000 fb30 	bl	800fe00 <rcutils_reset_error>
 800f7a0:	e7cb      	b.n	800f73a <rclc_executor_prepare+0x26>
 800f7a2:	200b      	movs	r0, #11
 800f7a4:	4770      	bx	lr
 800f7a6:	bf00      	nop

0800f7a8 <rclc_executor_spin_some.part.0>:
 800f7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ac:	4605      	mov	r5, r0
 800f7ae:	4691      	mov	r9, r2
 800f7b0:	4698      	mov	r8, r3
 800f7b2:	f7ff ffaf 	bl	800f714 <rclc_executor_prepare>
 800f7b6:	f105 0614 	add.w	r6, r5, #20
 800f7ba:	4630      	mov	r0, r6
 800f7bc:	f008 ff16 	bl	80185ec <rcl_wait_set_clear>
 800f7c0:	4607      	mov	r7, r0
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	f040 80a8 	bne.w	800f918 <rclc_executor_spin_some.part.0+0x170>
 800f7c8:	68ab      	ldr	r3, [r5, #8]
 800f7ca:	b30b      	cbz	r3, 800f810 <rclc_executor_spin_some.part.0+0x68>
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	6869      	ldr	r1, [r5, #4]
 800f7d0:	01a2      	lsls	r2, r4, #6
 800f7d2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800f7d6:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800f7da:	b1cb      	cbz	r3, 800f810 <rclc_executor_spin_some.part.0+0x68>
 800f7dc:	5c8b      	ldrb	r3, [r1, r2]
 800f7de:	2b0a      	cmp	r3, #10
 800f7e0:	f200 80de 	bhi.w	800f9a0 <rclc_executor_spin_some.part.0+0x1f8>
 800f7e4:	e8df f003 	tbb	[pc, r3]
 800f7e8:	8da99d9d 	.word	0x8da99d9d
 800f7ec:	0606068d 	.word	0x0606068d
 800f7f0:	c1ce      	.short	0xc1ce
 800f7f2:	b5          	.byte	0xb5
 800f7f3:	00          	.byte	0x00
 800f7f4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f7f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f009 fa45 	bl	8018c8c <rcl_wait_set_add_service>
 800f802:	2800      	cmp	r0, #0
 800f804:	f040 8087 	bne.w	800f916 <rclc_executor_spin_some.part.0+0x16e>
 800f808:	3401      	adds	r4, #1
 800f80a:	68ab      	ldr	r3, [r5, #8]
 800f80c:	429c      	cmp	r4, r3
 800f80e:	d3de      	bcc.n	800f7ce <rclc_executor_spin_some.part.0+0x26>
 800f810:	4643      	mov	r3, r8
 800f812:	464a      	mov	r2, r9
 800f814:	4630      	mov	r0, r6
 800f816:	f009 fa67 	bl	8018ce8 <rcl_wait>
 800f81a:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f000 80c6 	beq.w	800f9b0 <rclc_executor_spin_some.part.0+0x208>
 800f824:	2b01      	cmp	r3, #1
 800f826:	f040 80bb 	bne.w	800f9a0 <rclc_executor_spin_some.part.0+0x1f8>
 800f82a:	68ab      	ldr	r3, [r5, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f000 8159 	beq.w	800fae4 <rclc_executor_spin_some.part.0+0x33c>
 800f832:	2400      	movs	r4, #0
 800f834:	f240 1991 	movw	r9, #401	@ 0x191
 800f838:	46a0      	mov	r8, r4
 800f83a:	e00a      	b.n	800f852 <rclc_executor_spin_some.part.0+0xaa>
 800f83c:	f7ff fb6e 	bl	800ef1c <_rclc_check_for_new_data>
 800f840:	4604      	mov	r4, r0
 800f842:	b110      	cbz	r0, 800f84a <rclc_executor_spin_some.part.0+0xa2>
 800f844:	4548      	cmp	r0, r9
 800f846:	f040 80b1 	bne.w	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f84a:	68ab      	ldr	r3, [r5, #8]
 800f84c:	4598      	cmp	r8, r3
 800f84e:	f080 8126 	bcs.w	800fa9e <rclc_executor_spin_some.part.0+0x2f6>
 800f852:	686a      	ldr	r2, [r5, #4]
 800f854:	4631      	mov	r1, r6
 800f856:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f85a:	f108 0801 	add.w	r8, r8, #1
 800f85e:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f862:	f1bc 0f00 	cmp.w	ip, #0
 800f866:	d1e9      	bne.n	800f83c <rclc_executor_spin_some.part.0+0x94>
 800f868:	4619      	mov	r1, r3
 800f86a:	4610      	mov	r0, r2
 800f86c:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f870:	4798      	blx	r3
 800f872:	2800      	cmp	r0, #0
 800f874:	f000 809a 	beq.w	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f878:	68ab      	ldr	r3, [r5, #8]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 8096 	beq.w	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f880:	f04f 0800 	mov.w	r8, #0
 800f884:	f240 1991 	movw	r9, #401	@ 0x191
 800f888:	e009      	b.n	800f89e <rclc_executor_spin_some.part.0+0xf6>
 800f88a:	f7ff fb95 	bl	800efb8 <_rclc_take_new_data>
 800f88e:	4604      	mov	r4, r0
 800f890:	b110      	cbz	r0, 800f898 <rclc_executor_spin_some.part.0+0xf0>
 800f892:	4548      	cmp	r0, r9
 800f894:	f040 808a 	bne.w	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f898:	68ab      	ldr	r3, [r5, #8]
 800f89a:	4598      	cmp	r8, r3
 800f89c:	d209      	bcs.n	800f8b2 <rclc_executor_spin_some.part.0+0x10a>
 800f89e:	6868      	ldr	r0, [r5, #4]
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800f8a6:	f108 0801 	add.w	r8, r8, #1
 800f8aa:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800f8ae:	2a00      	cmp	r2, #0
 800f8b0:	d1eb      	bne.n	800f88a <rclc_executor_spin_some.part.0+0xe2>
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d07a      	beq.n	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f8b6:	2600      	movs	r6, #0
 800f8b8:	e00e      	b.n	800f8d8 <rclc_executor_spin_some.part.0+0x130>
 800f8ba:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f8be:	2a08      	cmp	r2, #8
 800f8c0:	f000 80fc 	beq.w	800fabc <rclc_executor_spin_some.part.0+0x314>
 800f8c4:	2a09      	cmp	r2, #9
 800f8c6:	f000 80ee 	beq.w	800faa6 <rclc_executor_spin_some.part.0+0x2fe>
 800f8ca:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f8ce:	b98a      	cbnz	r2, 800f8f4 <rclc_executor_spin_some.part.0+0x14c>
 800f8d0:	3601      	adds	r6, #1
 800f8d2:	429e      	cmp	r6, r3
 800f8d4:	d267      	bcs.n	800f9a6 <rclc_executor_spin_some.part.0+0x1fe>
 800f8d6:	2400      	movs	r4, #0
 800f8d8:	686a      	ldr	r2, [r5, #4]
 800f8da:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f8de:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f8e2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f8e6:	2900      	cmp	r1, #0
 800f8e8:	d060      	beq.n	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f8ea:	7841      	ldrb	r1, [r0, #1]
 800f8ec:	2900      	cmp	r1, #0
 800f8ee:	d0e4      	beq.n	800f8ba <rclc_executor_spin_some.part.0+0x112>
 800f8f0:	2901      	cmp	r1, #1
 800f8f2:	d1ed      	bne.n	800f8d0 <rclc_executor_spin_some.part.0+0x128>
 800f8f4:	f7ff fcd4 	bl	800f2a0 <_rclc_execute.part.0>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	f040 80b5 	bne.w	800fa68 <rclc_executor_spin_some.part.0+0x2c0>
 800f8fe:	68ab      	ldr	r3, [r5, #8]
 800f900:	e7e6      	b.n	800f8d0 <rclc_executor_spin_some.part.0+0x128>
 800f902:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f906:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f90a:	4630      	mov	r0, r6
 800f90c:	f009 f992 	bl	8018c34 <rcl_wait_set_add_client>
 800f910:	2800      	cmp	r0, #0
 800f912:	f43f af79 	beq.w	800f808 <rclc_executor_spin_some.part.0+0x60>
 800f916:	4607      	mov	r7, r0
 800f918:	f000 fa72 	bl	800fe00 <rcutils_reset_error>
 800f91c:	4638      	mov	r0, r7
 800f91e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f922:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f926:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f92a:	4630      	mov	r0, r6
 800f92c:	f008 fe32 	bl	8018594 <rcl_wait_set_add_subscription>
 800f930:	2800      	cmp	r0, #0
 800f932:	f43f af69 	beq.w	800f808 <rclc_executor_spin_some.part.0+0x60>
 800f936:	4607      	mov	r7, r0
 800f938:	e7ee      	b.n	800f918 <rclc_executor_spin_some.part.0+0x170>
 800f93a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f93e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f942:	4630      	mov	r0, r6
 800f944:	f009 f946 	bl	8018bd4 <rcl_wait_set_add_timer>
 800f948:	2800      	cmp	r0, #0
 800f94a:	f43f af5d 	beq.w	800f808 <rclc_executor_spin_some.part.0+0x60>
 800f94e:	4607      	mov	r7, r0
 800f950:	e7e2      	b.n	800f918 <rclc_executor_spin_some.part.0+0x170>
 800f952:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f956:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f95a:	4630      	mov	r0, r6
 800f95c:	f009 f90e 	bl	8018b7c <rcl_wait_set_add_guard_condition>
 800f960:	2800      	cmp	r0, #0
 800f962:	f43f af51 	beq.w	800f808 <rclc_executor_spin_some.part.0+0x60>
 800f966:	4607      	mov	r7, r0
 800f968:	e7d6      	b.n	800f918 <rclc_executor_spin_some.part.0+0x170>
 800f96a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f96e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f972:	4630      	mov	r0, r6
 800f974:	3110      	adds	r1, #16
 800f976:	f009 fe8d 	bl	8019694 <rcl_action_wait_set_add_action_server>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	f43f af44 	beq.w	800f808 <rclc_executor_spin_some.part.0+0x60>
 800f980:	4607      	mov	r7, r0
 800f982:	e7c9      	b.n	800f918 <rclc_executor_spin_some.part.0+0x170>
 800f984:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f988:	2300      	movs	r3, #0
 800f98a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f98e:	4630      	mov	r0, r6
 800f990:	3110      	adds	r1, #16
 800f992:	f009 fc55 	bl	8019240 <rcl_action_wait_set_add_action_client>
 800f996:	2800      	cmp	r0, #0
 800f998:	f43f af36 	beq.w	800f808 <rclc_executor_spin_some.part.0+0x60>
 800f99c:	4607      	mov	r7, r0
 800f99e:	e7bb      	b.n	800f918 <rclc_executor_spin_some.part.0+0x170>
 800f9a0:	2701      	movs	r7, #1
 800f9a2:	f000 fa2d 	bl	800fe00 <rcutils_reset_error>
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ac:	4627      	mov	r7, r4
 800f9ae:	e7fa      	b.n	800f9a6 <rclc_executor_spin_some.part.0+0x1fe>
 800f9b0:	68ab      	ldr	r3, [r5, #8]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f000 8093 	beq.w	800fade <rclc_executor_spin_some.part.0+0x336>
 800f9b8:	2400      	movs	r4, #0
 800f9ba:	f240 1991 	movw	r9, #401	@ 0x191
 800f9be:	46a0      	mov	r8, r4
 800f9c0:	e008      	b.n	800f9d4 <rclc_executor_spin_some.part.0+0x22c>
 800f9c2:	f7ff faab 	bl	800ef1c <_rclc_check_for_new_data>
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	b108      	cbz	r0, 800f9ce <rclc_executor_spin_some.part.0+0x226>
 800f9ca:	4548      	cmp	r0, r9
 800f9cc:	d1ee      	bne.n	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f9ce:	68ab      	ldr	r3, [r5, #8]
 800f9d0:	4598      	cmp	r8, r3
 800f9d2:	d266      	bcs.n	800faa2 <rclc_executor_spin_some.part.0+0x2fa>
 800f9d4:	686a      	ldr	r2, [r5, #4]
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f9dc:	f108 0801 	add.w	r8, r8, #1
 800f9e0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f9e4:	f1bc 0f00 	cmp.w	ip, #0
 800f9e8:	d1eb      	bne.n	800f9c2 <rclc_executor_spin_some.part.0+0x21a>
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f9f2:	4798      	blx	r3
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d0d9      	beq.n	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f9f8:	68ab      	ldr	r3, [r5, #8]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0d6      	beq.n	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800f9fe:	f04f 0a00 	mov.w	sl, #0
 800fa02:	f240 1891 	movw	r8, #401	@ 0x191
 800fa06:	f240 2959 	movw	r9, #601	@ 0x259
 800fa0a:	e00e      	b.n	800fa2a <rclc_executor_spin_some.part.0+0x282>
 800fa0c:	f813 300b 	ldrb.w	r3, [r3, fp]
 800fa10:	2b08      	cmp	r3, #8
 800fa12:	d034      	beq.n	800fa7e <rclc_executor_spin_some.part.0+0x2d6>
 800fa14:	2b09      	cmp	r3, #9
 800fa16:	d029      	beq.n	800fa6c <rclc_executor_spin_some.part.0+0x2c4>
 800fa18:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800fa1c:	bb03      	cbnz	r3, 800fa60 <rclc_executor_spin_some.part.0+0x2b8>
 800fa1e:	f10a 0a01 	add.w	sl, sl, #1
 800fa22:	68ab      	ldr	r3, [r5, #8]
 800fa24:	459a      	cmp	sl, r3
 800fa26:	d2be      	bcs.n	800f9a6 <rclc_executor_spin_some.part.0+0x1fe>
 800fa28:	2400      	movs	r4, #0
 800fa2a:	6868      	ldr	r0, [r5, #4]
 800fa2c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800fa30:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800fa34:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0b7      	beq.n	800f9ac <rclc_executor_spin_some.part.0+0x204>
 800fa3c:	4631      	mov	r1, r6
 800fa3e:	f7ff fabb 	bl	800efb8 <_rclc_take_new_data>
 800fa42:	2800      	cmp	r0, #0
 800fa44:	bf18      	it	ne
 800fa46:	4540      	cmpne	r0, r8
 800fa48:	d001      	beq.n	800fa4e <rclc_executor_spin_some.part.0+0x2a6>
 800fa4a:	4548      	cmp	r0, r9
 800fa4c:	d10c      	bne.n	800fa68 <rclc_executor_spin_some.part.0+0x2c0>
 800fa4e:	686b      	ldr	r3, [r5, #4]
 800fa50:	eb13 000b 	adds.w	r0, r3, fp
 800fa54:	d021      	beq.n	800fa9a <rclc_executor_spin_some.part.0+0x2f2>
 800fa56:	7842      	ldrb	r2, [r0, #1]
 800fa58:	2a00      	cmp	r2, #0
 800fa5a:	d0d7      	beq.n	800fa0c <rclc_executor_spin_some.part.0+0x264>
 800fa5c:	2a01      	cmp	r2, #1
 800fa5e:	d1de      	bne.n	800fa1e <rclc_executor_spin_some.part.0+0x276>
 800fa60:	f7ff fc1e 	bl	800f2a0 <_rclc_execute.part.0>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d0da      	beq.n	800fa1e <rclc_executor_spin_some.part.0+0x276>
 800fa68:	4607      	mov	r7, r0
 800fa6a:	e79c      	b.n	800f9a6 <rclc_executor_spin_some.part.0+0x1fe>
 800fa6c:	6843      	ldr	r3, [r0, #4]
 800fa6e:	6a1a      	ldr	r2, [r3, #32]
 800fa70:	2a00      	cmp	r2, #0
 800fa72:	d1f5      	bne.n	800fa60 <rclc_executor_spin_some.part.0+0x2b8>
 800fa74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d0d0      	beq.n	800fa1e <rclc_executor_spin_some.part.0+0x276>
 800fa7c:	e7f0      	b.n	800fa60 <rclc_executor_spin_some.part.0+0x2b8>
 800fa7e:	6843      	ldr	r3, [r0, #4]
 800fa80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fa82:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800fa86:	d1eb      	bne.n	800fa60 <rclc_executor_spin_some.part.0+0x2b8>
 800fa88:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fa8c:	2a00      	cmp	r2, #0
 800fa8e:	d1e7      	bne.n	800fa60 <rclc_executor_spin_some.part.0+0x2b8>
 800fa90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d0c2      	beq.n	800fa1e <rclc_executor_spin_some.part.0+0x276>
 800fa98:	e7e2      	b.n	800fa60 <rclc_executor_spin_some.part.0+0x2b8>
 800fa9a:	270b      	movs	r7, #11
 800fa9c:	e783      	b.n	800f9a6 <rclc_executor_spin_some.part.0+0x1fe>
 800fa9e:	686a      	ldr	r2, [r5, #4]
 800faa0:	e6e2      	b.n	800f868 <rclc_executor_spin_some.part.0+0xc0>
 800faa2:	686a      	ldr	r2, [r5, #4]
 800faa4:	e7a1      	b.n	800f9ea <rclc_executor_spin_some.part.0+0x242>
 800faa6:	6842      	ldr	r2, [r0, #4]
 800faa8:	6a11      	ldr	r1, [r2, #32]
 800faaa:	2900      	cmp	r1, #0
 800faac:	f47f af22 	bne.w	800f8f4 <rclc_executor_spin_some.part.0+0x14c>
 800fab0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800fab4:	2a00      	cmp	r2, #0
 800fab6:	f43f af0b 	beq.w	800f8d0 <rclc_executor_spin_some.part.0+0x128>
 800faba:	e71b      	b.n	800f8f4 <rclc_executor_spin_some.part.0+0x14c>
 800fabc:	6842      	ldr	r2, [r0, #4]
 800fabe:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800fac0:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800fac4:	f47f af16 	bne.w	800f8f4 <rclc_executor_spin_some.part.0+0x14c>
 800fac8:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800facc:	2900      	cmp	r1, #0
 800face:	f47f af11 	bne.w	800f8f4 <rclc_executor_spin_some.part.0+0x14c>
 800fad2:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800fad6:	2a00      	cmp	r2, #0
 800fad8:	f43f aefa 	beq.w	800f8d0 <rclc_executor_spin_some.part.0+0x128>
 800fadc:	e70a      	b.n	800f8f4 <rclc_executor_spin_some.part.0+0x14c>
 800fade:	686a      	ldr	r2, [r5, #4]
 800fae0:	461c      	mov	r4, r3
 800fae2:	e782      	b.n	800f9ea <rclc_executor_spin_some.part.0+0x242>
 800fae4:	686a      	ldr	r2, [r5, #4]
 800fae6:	461c      	mov	r4, r3
 800fae8:	e6be      	b.n	800f868 <rclc_executor_spin_some.part.0+0xc0>
 800faea:	bf00      	nop

0800faec <rclc_executor_spin>:
 800faec:	b1d0      	cbz	r0, 800fb24 <rclc_executor_spin+0x38>
 800faee:	b510      	push	{r4, lr}
 800faf0:	4604      	mov	r4, r0
 800faf2:	b082      	sub	sp, #8
 800faf4:	e004      	b.n	800fb00 <rclc_executor_spin+0x14>
 800faf6:	f7ff fe57 	bl	800f7a8 <rclc_executor_spin_some.part.0>
 800fafa:	f030 0302 	bics.w	r3, r0, #2
 800fafe:	d10f      	bne.n	800fb20 <rclc_executor_spin+0x34>
 800fb00:	6820      	ldr	r0, [r4, #0]
 800fb02:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800fb06:	e9cd 2300 	strd	r2, r3, [sp]
 800fb0a:	f007 fa69 	bl	8016fe0 <rcl_context_is_valid>
 800fb0e:	4601      	mov	r1, r0
 800fb10:	4620      	mov	r0, r4
 800fb12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb16:	2900      	cmp	r1, #0
 800fb18:	d1ed      	bne.n	800faf6 <rclc_executor_spin+0xa>
 800fb1a:	f000 f971 	bl	800fe00 <rcutils_reset_error>
 800fb1e:	2001      	movs	r0, #1
 800fb20:	b002      	add	sp, #8
 800fb22:	bd10      	pop	{r4, pc}
 800fb24:	200b      	movs	r0, #11
 800fb26:	4770      	bx	lr

0800fb28 <rclc_executor_handle_counters_zero_init>:
 800fb28:	b130      	cbz	r0, 800fb38 <rclc_executor_handle_counters_zero_init+0x10>
 800fb2a:	2220      	movs	r2, #32
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	b508      	push	{r3, lr}
 800fb30:	f00d f9b2 	bl	801ce98 <memset>
 800fb34:	2000      	movs	r0, #0
 800fb36:	bd08      	pop	{r3, pc}
 800fb38:	200b      	movs	r0, #11
 800fb3a:	4770      	bx	lr
 800fb3c:	0000      	movs	r0, r0
	...

0800fb40 <rclc_executor_handle_init>:
 800fb40:	4603      	mov	r3, r0
 800fb42:	b178      	cbz	r0, 800fb64 <rclc_executor_handle_init+0x24>
 800fb44:	2200      	movs	r2, #0
 800fb46:	f04f 0c0b 	mov.w	ip, #11
 800fb4a:	6341      	str	r1, [r0, #52]	@ 0x34
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f8a3 c000 	strh.w	ip, [r3]
 800fb52:	631a      	str	r2, [r3, #48]	@ 0x30
 800fb54:	871a      	strh	r2, [r3, #56]	@ 0x38
 800fb56:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800fb68 <rclc_executor_handle_init+0x28>
 800fb5a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800fb5e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800fb62:	4770      	bx	lr
 800fb64:	200b      	movs	r0, #11
 800fb66:	4770      	bx	lr
	...

0800fb70 <rclc_support_init_with_options>:
 800fb70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb74:	b083      	sub	sp, #12
 800fb76:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	bf18      	it	ne
 800fb7c:	2f00      	cmpne	r7, #0
 800fb7e:	d027      	beq.n	800fbd0 <rclc_support_init_with_options+0x60>
 800fb80:	4604      	mov	r4, r0
 800fb82:	b328      	cbz	r0, 800fbd0 <rclc_support_init_with_options+0x60>
 800fb84:	46e9      	mov	r9, sp
 800fb86:	461d      	mov	r5, r3
 800fb88:	460e      	mov	r6, r1
 800fb8a:	4690      	mov	r8, r2
 800fb8c:	4648      	mov	r0, r9
 800fb8e:	f007 fa1d 	bl	8016fcc <rcl_get_zero_initialized_context>
 800fb92:	462a      	mov	r2, r5
 800fb94:	4623      	mov	r3, r4
 800fb96:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fb9a:	e884 0003 	stmia.w	r4, {r0, r1}
 800fb9e:	4641      	mov	r1, r8
 800fba0:	4630      	mov	r0, r6
 800fba2:	f007 fa83 	bl	80170ac <rcl_init>
 800fba6:	4605      	mov	r5, r0
 800fba8:	b960      	cbnz	r0, 800fbc4 <rclc_support_init_with_options+0x54>
 800fbaa:	463a      	mov	r2, r7
 800fbac:	f104 010c 	add.w	r1, r4, #12
 800fbb0:	2003      	movs	r0, #3
 800fbb2:	60a7      	str	r7, [r4, #8]
 800fbb4:	f008 f808 	bl	8017bc8 <rcl_clock_init>
 800fbb8:	4605      	mov	r5, r0
 800fbba:	b918      	cbnz	r0, 800fbc4 <rclc_support_init_with_options+0x54>
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	b003      	add	sp, #12
 800fbc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbc4:	f000 f91c 	bl	800fe00 <rcutils_reset_error>
 800fbc8:	4628      	mov	r0, r5
 800fbca:	b003      	add	sp, #12
 800fbcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd0:	250b      	movs	r5, #11
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	b003      	add	sp, #12
 800fbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbda:	bf00      	nop

0800fbdc <rclc_node_init_default>:
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	bf18      	it	ne
 800fbe0:	2a00      	cmpne	r2, #0
 800fbe2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbe6:	4616      	mov	r6, r2
 800fbe8:	bf0c      	ite	eq
 800fbea:	2201      	moveq	r2, #1
 800fbec:	2200      	movne	r2, #0
 800fbee:	b0a1      	sub	sp, #132	@ 0x84
 800fbf0:	2900      	cmp	r1, #0
 800fbf2:	bf08      	it	eq
 800fbf4:	f042 0201 	orreq.w	r2, r2, #1
 800fbf8:	bb22      	cbnz	r2, 800fc44 <rclc_node_init_default+0x68>
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	b310      	cbz	r0, 800fc44 <rclc_node_init_default+0x68>
 800fbfe:	f10d 0810 	add.w	r8, sp, #16
 800fc02:	461f      	mov	r7, r3
 800fc04:	460d      	mov	r5, r1
 800fc06:	f10d 0918 	add.w	r9, sp, #24
 800fc0a:	4640      	mov	r0, r8
 800fc0c:	f007 fb76 	bl	80172fc <rcl_get_zero_initialized_node>
 800fc10:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fc14:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc18:	4648      	mov	r0, r9
 800fc1a:	f007 fce9 	bl	80175f0 <rcl_node_get_default_options>
 800fc1e:	4640      	mov	r0, r8
 800fc20:	f007 fb6c 	bl	80172fc <rcl_get_zero_initialized_node>
 800fc24:	f8cd 9000 	str.w	r9, [sp]
 800fc28:	463b      	mov	r3, r7
 800fc2a:	4632      	mov	r2, r6
 800fc2c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fc30:	e884 0003 	stmia.w	r4, {r0, r1}
 800fc34:	4629      	mov	r1, r5
 800fc36:	4620      	mov	r0, r4
 800fc38:	f007 fb6a 	bl	8017310 <rcl_node_init>
 800fc3c:	b930      	cbnz	r0, 800fc4c <rclc_node_init_default+0x70>
 800fc3e:	b021      	add	sp, #132	@ 0x84
 800fc40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc44:	200b      	movs	r0, #11
 800fc46:	b021      	add	sp, #132	@ 0x84
 800fc48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc4c:	9003      	str	r0, [sp, #12]
 800fc4e:	f000 f8d7 	bl	800fe00 <rcutils_reset_error>
 800fc52:	f000 f8d5 	bl	800fe00 <rcutils_reset_error>
 800fc56:	9803      	ldr	r0, [sp, #12]
 800fc58:	b021      	add	sp, #132	@ 0x84
 800fc5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc5e:	bf00      	nop

0800fc60 <rclc_publisher_init_best_effort>:
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	bf18      	it	ne
 800fc64:	2a00      	cmpne	r2, #0
 800fc66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6a:	4616      	mov	r6, r2
 800fc6c:	bf0c      	ite	eq
 800fc6e:	2201      	moveq	r2, #1
 800fc70:	2200      	movne	r2, #0
 800fc72:	b0a0      	sub	sp, #128	@ 0x80
 800fc74:	2900      	cmp	r1, #0
 800fc76:	bf08      	it	eq
 800fc78:	f042 0201 	orreq.w	r2, r2, #1
 800fc7c:	bb1a      	cbnz	r2, 800fcc6 <rclc_publisher_init_best_effort+0x66>
 800fc7e:	4604      	mov	r4, r0
 800fc80:	b308      	cbz	r0, 800fcc6 <rclc_publisher_init_best_effort+0x66>
 800fc82:	f10d 0810 	add.w	r8, sp, #16
 800fc86:	461f      	mov	r7, r3
 800fc88:	460d      	mov	r5, r1
 800fc8a:	f7ff f833 	bl	800ecf4 <rcl_get_zero_initialized_publisher>
 800fc8e:	6020      	str	r0, [r4, #0]
 800fc90:	4640      	mov	r0, r8
 800fc92:	f7ff f8cf 	bl	800ee34 <rcl_publisher_get_default_options>
 800fc96:	2250      	movs	r2, #80	@ 0x50
 800fc98:	490d      	ldr	r1, [pc, #52]	@ (800fcd0 <rclc_publisher_init_best_effort+0x70>)
 800fc9a:	4640      	mov	r0, r8
 800fc9c:	f00d f9c5 	bl	801d02a <memcpy>
 800fca0:	463b      	mov	r3, r7
 800fca2:	4632      	mov	r2, r6
 800fca4:	4629      	mov	r1, r5
 800fca6:	4620      	mov	r0, r4
 800fca8:	f8cd 8000 	str.w	r8, [sp]
 800fcac:	f7ff f828 	bl	800ed00 <rcl_publisher_init>
 800fcb0:	b910      	cbnz	r0, 800fcb8 <rclc_publisher_init_best_effort+0x58>
 800fcb2:	b020      	add	sp, #128	@ 0x80
 800fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb8:	9003      	str	r0, [sp, #12]
 800fcba:	f000 f8a1 	bl	800fe00 <rcutils_reset_error>
 800fcbe:	9803      	ldr	r0, [sp, #12]
 800fcc0:	b020      	add	sp, #128	@ 0x80
 800fcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc6:	200b      	movs	r0, #11
 800fcc8:	b020      	add	sp, #128	@ 0x80
 800fcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcce:	bf00      	nop
 800fcd0:	0801dee8 	.word	0x0801dee8

0800fcd4 <rclc_timer_init_default>:
 800fcd4:	b361      	cbz	r1, 800fd30 <rclc_timer_init_default+0x5c>
 800fcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcda:	4606      	mov	r6, r0
 800fcdc:	b08a      	sub	sp, #40	@ 0x28
 800fcde:	b318      	cbz	r0, 800fd28 <rclc_timer_init_default+0x54>
 800fce0:	460d      	mov	r5, r1
 800fce2:	4690      	mov	r8, r2
 800fce4:	461f      	mov	r7, r3
 800fce6:	f008 f967 	bl	8017fb8 <rcl_get_zero_initialized_timer>
 800fcea:	68ac      	ldr	r4, [r5, #8]
 800fcec:	f10d 0c0c 	add.w	ip, sp, #12
 800fcf0:	6030      	str	r0, [r6, #0]
 800fcf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	462a      	mov	r2, r5
 800fcfc:	f105 010c 	add.w	r1, r5, #12
 800fd00:	4630      	mov	r0, r6
 800fd02:	f8cc 3000 	str.w	r3, [ip]
 800fd06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd08:	e9cd 8700 	strd	r8, r7, [sp]
 800fd0c:	9302      	str	r3, [sp, #8]
 800fd0e:	f008 f95b 	bl	8017fc8 <rcl_timer_init>
 800fd12:	b910      	cbnz	r0, 800fd1a <rclc_timer_init_default+0x46>
 800fd14:	b00a      	add	sp, #40	@ 0x28
 800fd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd1a:	9009      	str	r0, [sp, #36]	@ 0x24
 800fd1c:	f000 f870 	bl	800fe00 <rcutils_reset_error>
 800fd20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd22:	b00a      	add	sp, #40	@ 0x28
 800fd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd28:	200b      	movs	r0, #11
 800fd2a:	b00a      	add	sp, #40	@ 0x28
 800fd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd30:	200b      	movs	r0, #11
 800fd32:	4770      	bx	lr

0800fd34 <__default_zero_allocate>:
 800fd34:	f00c bbc6 	b.w	801c4c4 <calloc>

0800fd38 <__default_reallocate>:
 800fd38:	f00c bd64 	b.w	801c804 <realloc>

0800fd3c <__default_deallocate>:
 800fd3c:	f00c bc40 	b.w	801c5c0 <free>

0800fd40 <__default_allocate>:
 800fd40:	f00c bc36 	b.w	801c5b0 <malloc>

0800fd44 <rcutils_get_zero_initialized_allocator>:
 800fd44:	b510      	push	{r4, lr}
 800fd46:	4c05      	ldr	r4, [pc, #20]	@ (800fd5c <rcutils_get_zero_initialized_allocator+0x18>)
 800fd48:	4686      	mov	lr, r0
 800fd4a:	4684      	mov	ip, r0
 800fd4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd4e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd52:	6823      	ldr	r3, [r4, #0]
 800fd54:	4670      	mov	r0, lr
 800fd56:	f8cc 3000 	str.w	r3, [ip]
 800fd5a:	bd10      	pop	{r4, pc}
 800fd5c:	0801df38 	.word	0x0801df38

0800fd60 <rcutils_set_default_allocator>:
 800fd60:	b1a8      	cbz	r0, 800fd8e <rcutils_set_default_allocator+0x2e>
 800fd62:	6802      	ldr	r2, [r0, #0]
 800fd64:	b1a2      	cbz	r2, 800fd90 <rcutils_set_default_allocator+0x30>
 800fd66:	6841      	ldr	r1, [r0, #4]
 800fd68:	b1a1      	cbz	r1, 800fd94 <rcutils_set_default_allocator+0x34>
 800fd6a:	b410      	push	{r4}
 800fd6c:	68c4      	ldr	r4, [r0, #12]
 800fd6e:	b164      	cbz	r4, 800fd8a <rcutils_set_default_allocator+0x2a>
 800fd70:	6880      	ldr	r0, [r0, #8]
 800fd72:	b138      	cbz	r0, 800fd84 <rcutils_set_default_allocator+0x24>
 800fd74:	4b08      	ldr	r3, [pc, #32]	@ (800fd98 <rcutils_set_default_allocator+0x38>)
 800fd76:	601a      	str	r2, [r3, #0]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800fd7e:	2001      	movs	r0, #1
 800fd80:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800fd84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd88:	4770      	bx	lr
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	e7fa      	b.n	800fd84 <rcutils_set_default_allocator+0x24>
 800fd8e:	4770      	bx	lr
 800fd90:	4610      	mov	r0, r2
 800fd92:	4770      	bx	lr
 800fd94:	4608      	mov	r0, r1
 800fd96:	4770      	bx	lr
 800fd98:	24000018 	.word	0x24000018

0800fd9c <rcutils_get_default_allocator>:
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	4c05      	ldr	r4, [pc, #20]	@ (800fdb4 <rcutils_get_default_allocator+0x18>)
 800fda0:	4686      	mov	lr, r0
 800fda2:	4684      	mov	ip, r0
 800fda4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fda6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	4670      	mov	r0, lr
 800fdae:	f8cc 3000 	str.w	r3, [ip]
 800fdb2:	bd10      	pop	{r4, pc}
 800fdb4:	24000018 	.word	0x24000018

0800fdb8 <rcutils_allocator_is_valid>:
 800fdb8:	b158      	cbz	r0, 800fdd2 <rcutils_allocator_is_valid+0x1a>
 800fdba:	6803      	ldr	r3, [r0, #0]
 800fdbc:	b143      	cbz	r3, 800fdd0 <rcutils_allocator_is_valid+0x18>
 800fdbe:	6843      	ldr	r3, [r0, #4]
 800fdc0:	b133      	cbz	r3, 800fdd0 <rcutils_allocator_is_valid+0x18>
 800fdc2:	68c3      	ldr	r3, [r0, #12]
 800fdc4:	b123      	cbz	r3, 800fdd0 <rcutils_allocator_is_valid+0x18>
 800fdc6:	6880      	ldr	r0, [r0, #8]
 800fdc8:	3800      	subs	r0, #0
 800fdca:	bf18      	it	ne
 800fdcc:	2001      	movne	r0, #1
 800fdce:	4770      	bx	lr
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	4770      	bx	lr

0800fdd4 <rcutils_get_error_string>:
 800fdd4:	4b06      	ldr	r3, [pc, #24]	@ (800fdf0 <rcutils_get_error_string+0x1c>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	b13b      	cbz	r3, 800fdea <rcutils_get_error_string+0x16>
 800fdda:	4b06      	ldr	r3, [pc, #24]	@ (800fdf4 <rcutils_get_error_string+0x20>)
 800fddc:	781a      	ldrb	r2, [r3, #0]
 800fdde:	b90a      	cbnz	r2, 800fde4 <rcutils_get_error_string+0x10>
 800fde0:	2201      	movs	r2, #1
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	4b04      	ldr	r3, [pc, #16]	@ (800fdf8 <rcutils_get_error_string+0x24>)
 800fde6:	7818      	ldrb	r0, [r3, #0]
 800fde8:	4770      	bx	lr
 800fdea:	4b04      	ldr	r3, [pc, #16]	@ (800fdfc <rcutils_get_error_string+0x28>)
 800fdec:	7818      	ldrb	r0, [r3, #0]
 800fdee:	4770      	bx	lr
 800fdf0:	2400f090 	.word	0x2400f090
 800fdf4:	2400f0a9 	.word	0x2400f0a9
 800fdf8:	2400f0a8 	.word	0x2400f0a8
 800fdfc:	0801e29c 	.word	0x0801e29c

0800fe00 <rcutils_reset_error>:
 800fe00:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800fe20 <rcutils_reset_error+0x20>
 800fe04:	2300      	movs	r3, #0
 800fe06:	4a08      	ldr	r2, [pc, #32]	@ (800fe28 <rcutils_reset_error+0x28>)
 800fe08:	4808      	ldr	r0, [pc, #32]	@ (800fe2c <rcutils_reset_error+0x2c>)
 800fe0a:	8013      	strh	r3, [r2, #0]
 800fe0c:	4908      	ldr	r1, [pc, #32]	@ (800fe30 <rcutils_reset_error+0x30>)
 800fe0e:	7003      	strb	r3, [r0, #0]
 800fe10:	700b      	strb	r3, [r1, #0]
 800fe12:	ed82 7b02 	vstr	d7, [r2, #8]
 800fe16:	4a07      	ldr	r2, [pc, #28]	@ (800fe34 <rcutils_reset_error+0x34>)
 800fe18:	7013      	strb	r3, [r2, #0]
 800fe1a:	4770      	bx	lr
 800fe1c:	f3af 8000 	nop.w
	...
 800fe28:	2400f098 	.word	0x2400f098
 800fe2c:	2400f0a9 	.word	0x2400f0a9
 800fe30:	2400f0a8 	.word	0x2400f0a8
 800fe34:	2400f090 	.word	0x2400f090

0800fe38 <rcutils_system_time_now>:
 800fe38:	b300      	cbz	r0, 800fe7c <rcutils_system_time_now+0x44>
 800fe3a:	b570      	push	{r4, r5, r6, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	4604      	mov	r4, r0
 800fe40:	2001      	movs	r0, #1
 800fe42:	4669      	mov	r1, sp
 800fe44:	f7f1 fec0 	bl	8001bc8 <clock_gettime>
 800fe48:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe4c:	2900      	cmp	r1, #0
 800fe4e:	db12      	blt.n	800fe76 <rcutils_system_time_now+0x3e>
 800fe50:	ea53 0201 	orrs.w	r2, r3, r1
 800fe54:	9d02      	ldr	r5, [sp, #8]
 800fe56:	d101      	bne.n	800fe5c <rcutils_system_time_now+0x24>
 800fe58:	2d00      	cmp	r5, #0
 800fe5a:	db0c      	blt.n	800fe76 <rcutils_system_time_now+0x3e>
 800fe5c:	4e08      	ldr	r6, [pc, #32]	@ (800fe80 <rcutils_system_time_now+0x48>)
 800fe5e:	2000      	movs	r0, #0
 800fe60:	fba3 3206 	umull	r3, r2, r3, r6
 800fe64:	195b      	adds	r3, r3, r5
 800fe66:	fb06 2201 	mla	r2, r6, r1, r2
 800fe6a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800fe6e:	e9c4 3200 	strd	r3, r2, [r4]
 800fe72:	b004      	add	sp, #16
 800fe74:	bd70      	pop	{r4, r5, r6, pc}
 800fe76:	2002      	movs	r0, #2
 800fe78:	b004      	add	sp, #16
 800fe7a:	bd70      	pop	{r4, r5, r6, pc}
 800fe7c:	200b      	movs	r0, #11
 800fe7e:	4770      	bx	lr
 800fe80:	3b9aca00 	.word	0x3b9aca00

0800fe84 <rcutils_steady_time_now>:
 800fe84:	b300      	cbz	r0, 800fec8 <rcutils_steady_time_now+0x44>
 800fe86:	b570      	push	{r4, r5, r6, lr}
 800fe88:	b084      	sub	sp, #16
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	4669      	mov	r1, sp
 800fe90:	f7f1 fe9a 	bl	8001bc8 <clock_gettime>
 800fe94:	e9dd 3100 	ldrd	r3, r1, [sp]
 800fe98:	2900      	cmp	r1, #0
 800fe9a:	db12      	blt.n	800fec2 <rcutils_steady_time_now+0x3e>
 800fe9c:	ea53 0201 	orrs.w	r2, r3, r1
 800fea0:	9d02      	ldr	r5, [sp, #8]
 800fea2:	d101      	bne.n	800fea8 <rcutils_steady_time_now+0x24>
 800fea4:	2d00      	cmp	r5, #0
 800fea6:	db0c      	blt.n	800fec2 <rcutils_steady_time_now+0x3e>
 800fea8:	4e08      	ldr	r6, [pc, #32]	@ (800fecc <rcutils_steady_time_now+0x48>)
 800feaa:	2000      	movs	r0, #0
 800feac:	fba3 3206 	umull	r3, r2, r3, r6
 800feb0:	195b      	adds	r3, r3, r5
 800feb2:	fb06 2201 	mla	r2, r6, r1, r2
 800feb6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800feba:	e9c4 3200 	strd	r3, r2, [r4]
 800febe:	b004      	add	sp, #16
 800fec0:	bd70      	pop	{r4, r5, r6, pc}
 800fec2:	2002      	movs	r0, #2
 800fec4:	b004      	add	sp, #16
 800fec6:	bd70      	pop	{r4, r5, r6, pc}
 800fec8:	200b      	movs	r0, #11
 800feca:	4770      	bx	lr
 800fecc:	3b9aca00 	.word	0x3b9aca00

0800fed0 <rmw_get_zero_initialized_init_options>:
 800fed0:	b510      	push	{r4, lr}
 800fed2:	4604      	mov	r4, r0
 800fed4:	2238      	movs	r2, #56	@ 0x38
 800fed6:	2100      	movs	r1, #0
 800fed8:	f00c ffde 	bl	801ce98 <memset>
 800fedc:	f104 0010 	add.w	r0, r4, #16
 800fee0:	f000 f80a 	bl	800fef8 <rmw_get_default_security_options>
 800fee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fee8:	4620      	mov	r0, r4
 800feea:	60e3      	str	r3, [r4, #12]
 800feec:	bd10      	pop	{r4, pc}
 800feee:	bf00      	nop

0800fef0 <rmw_get_default_publisher_options>:
 800fef0:	2200      	movs	r2, #0
 800fef2:	6002      	str	r2, [r0, #0]
 800fef4:	7102      	strb	r2, [r0, #4]
 800fef6:	4770      	bx	lr

0800fef8 <rmw_get_default_security_options>:
 800fef8:	2200      	movs	r2, #0
 800fefa:	7002      	strb	r2, [r0, #0]
 800fefc:	6042      	str	r2, [r0, #4]
 800fefe:	4770      	bx	lr

0800ff00 <rmw_uros_set_custom_transport>:
 800ff00:	b470      	push	{r4, r5, r6}
 800ff02:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ff06:	b162      	cbz	r2, 800ff22 <rmw_uros_set_custom_transport+0x22>
 800ff08:	b15b      	cbz	r3, 800ff22 <rmw_uros_set_custom_transport+0x22>
 800ff0a:	b155      	cbz	r5, 800ff22 <rmw_uros_set_custom_transport+0x22>
 800ff0c:	b14e      	cbz	r6, 800ff22 <rmw_uros_set_custom_transport+0x22>
 800ff0e:	4c06      	ldr	r4, [pc, #24]	@ (800ff28 <rmw_uros_set_custom_transport+0x28>)
 800ff10:	7020      	strb	r0, [r4, #0]
 800ff12:	2000      	movs	r0, #0
 800ff14:	6166      	str	r6, [r4, #20]
 800ff16:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ff1a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ff1e:	bc70      	pop	{r4, r5, r6}
 800ff20:	4770      	bx	lr
 800ff22:	200b      	movs	r0, #11
 800ff24:	bc70      	pop	{r4, r5, r6}
 800ff26:	4770      	bx	lr
 800ff28:	2400f0ac 	.word	0x2400f0ac

0800ff2c <rmw_init_options_init>:
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff30:	b083      	sub	sp, #12
 800ff32:	ad09      	add	r5, sp, #36	@ 0x24
 800ff34:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ff38:	b130      	cbz	r0, 800ff48 <rmw_init_options_init+0x1c>
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	f7ff ff3b 	bl	800fdb8 <rcutils_allocator_is_valid>
 800ff42:	b108      	cbz	r0, 800ff48 <rmw_init_options_init+0x1c>
 800ff44:	68a6      	ldr	r6, [r4, #8]
 800ff46:	b12e      	cbz	r6, 800ff54 <rmw_init_options_init+0x28>
 800ff48:	200b      	movs	r0, #11
 800ff4a:	b003      	add	sp, #12
 800ff4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ff50:	b004      	add	sp, #16
 800ff52:	4770      	bx	lr
 800ff54:	2200      	movs	r2, #0
 800ff56:	2300      	movs	r3, #0
 800ff58:	f104 0c20 	add.w	ip, r4, #32
 800ff5c:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800fff8 <rmw_init_options_init+0xcc>
 800ff60:	466f      	mov	r7, sp
 800ff62:	e9c4 2300 	strd	r2, r3, [r4]
 800ff66:	4b20      	ldr	r3, [pc, #128]	@ (800ffe8 <rmw_init_options_init+0xbc>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	60a3      	str	r3, [r4, #8]
 800ff6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff72:	682b      	ldr	r3, [r5, #0]
 800ff74:	4638      	mov	r0, r7
 800ff76:	f8cc 3000 	str.w	r3, [ip]
 800ff7a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ff7e:	60e6      	str	r6, [r4, #12]
 800ff80:	f7ff ffba 	bl	800fef8 <rmw_get_default_security_options>
 800ff84:	f104 0310 	add.w	r3, r4, #16
 800ff88:	2203      	movs	r2, #3
 800ff8a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ff8e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff92:	4816      	ldr	r0, [pc, #88]	@ (800ffec <rmw_init_options_init+0xc0>)
 800ff94:	4916      	ldr	r1, [pc, #88]	@ (800fff0 <rmw_init_options_init+0xc4>)
 800ff96:	7626      	strb	r6, [r4, #24]
 800ff98:	f000 fed2 	bl	8010d40 <rmw_uxrce_init_init_options_impl_memory>
 800ff9c:	4813      	ldr	r0, [pc, #76]	@ (800ffec <rmw_init_options_init+0xc0>)
 800ff9e:	f00a fbf1 	bl	801a784 <get_memory>
 800ffa2:	b1f0      	cbz	r0, 800ffe2 <rmw_init_options_init+0xb6>
 800ffa4:	4a13      	ldr	r2, [pc, #76]	@ (800fff4 <rmw_init_options_init+0xc8>)
 800ffa6:	6883      	ldr	r3, [r0, #8]
 800ffa8:	6851      	ldr	r1, [r2, #4]
 800ffaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800ffac:	7810      	ldrb	r0, [r2, #0]
 800ffae:	6159      	str	r1, [r3, #20]
 800ffb0:	68d1      	ldr	r1, [r2, #12]
 800ffb2:	7418      	strb	r0, [r3, #16]
 800ffb4:	61d9      	str	r1, [r3, #28]
 800ffb6:	6911      	ldr	r1, [r2, #16]
 800ffb8:	6219      	str	r1, [r3, #32]
 800ffba:	6951      	ldr	r1, [r2, #20]
 800ffbc:	6892      	ldr	r2, [r2, #8]
 800ffbe:	6259      	str	r1, [r3, #36]	@ 0x24
 800ffc0:	619a      	str	r2, [r3, #24]
 800ffc2:	f005 fe15 	bl	8015bf0 <uxr_nanos>
 800ffc6:	f00c fbb1 	bl	801c72c <srand>
 800ffca:	f00c fbdd 	bl	801c788 <rand>
 800ffce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ffd0:	6298      	str	r0, [r3, #40]	@ 0x28
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d0f9      	beq.n	800ffca <rmw_init_options_init+0x9e>
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	b003      	add	sp, #12
 800ffda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffde:	b004      	add	sp, #16
 800ffe0:	4770      	bx	lr
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	e7b1      	b.n	800ff4a <rmw_init_options_init+0x1e>
 800ffe6:	bf00      	nop
 800ffe8:	0801eb64 	.word	0x0801eb64
 800ffec:	240139c4 	.word	0x240139c4
 800fff0:	2400f260 	.word	0x2400f260
 800fff4:	2400f0ac 	.word	0x2400f0ac
 800fff8:	0801df4c 	.word	0x0801df4c

0800fffc <rmw_init_options_copy>:
 800fffc:	2800      	cmp	r0, #0
 800fffe:	d047      	beq.n	8010090 <rmw_init_options_copy+0x94>
 8010000:	b570      	push	{r4, r5, r6, lr}
 8010002:	460d      	mov	r5, r1
 8010004:	b149      	cbz	r1, 801001a <rmw_init_options_copy+0x1e>
 8010006:	4604      	mov	r4, r0
 8010008:	6880      	ldr	r0, [r0, #8]
 801000a:	b120      	cbz	r0, 8010016 <rmw_init_options_copy+0x1a>
 801000c:	4b22      	ldr	r3, [pc, #136]	@ (8010098 <rmw_init_options_copy+0x9c>)
 801000e:	6819      	ldr	r1, [r3, #0]
 8010010:	f7f0 f966 	bl	80002e0 <strcmp>
 8010014:	bba8      	cbnz	r0, 8010082 <rmw_init_options_copy+0x86>
 8010016:	68ab      	ldr	r3, [r5, #8]
 8010018:	b11b      	cbz	r3, 8010022 <rmw_init_options_copy+0x26>
 801001a:	f04f 0c0b 	mov.w	ip, #11
 801001e:	4660      	mov	r0, ip
 8010020:	bd70      	pop	{r4, r5, r6, pc}
 8010022:	4623      	mov	r3, r4
 8010024:	462a      	mov	r2, r5
 8010026:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801002a:	f8d3 e000 	ldr.w	lr, [r3]
 801002e:	3310      	adds	r3, #16
 8010030:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8010034:	3210      	adds	r2, #16
 8010036:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801003a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801003e:	42b3      	cmp	r3, r6
 8010040:	f842 ec10 	str.w	lr, [r2, #-16]
 8010044:	f842 cc0c 	str.w	ip, [r2, #-12]
 8010048:	f842 0c08 	str.w	r0, [r2, #-8]
 801004c:	f842 1c04 	str.w	r1, [r2, #-4]
 8010050:	d1eb      	bne.n	801002a <rmw_init_options_copy+0x2e>
 8010052:	6819      	ldr	r1, [r3, #0]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	4811      	ldr	r0, [pc, #68]	@ (801009c <rmw_init_options_copy+0xa0>)
 8010058:	6011      	str	r1, [r2, #0]
 801005a:	6053      	str	r3, [r2, #4]
 801005c:	f00a fb92 	bl	801a784 <get_memory>
 8010060:	b198      	cbz	r0, 801008a <rmw_init_options_copy+0x8e>
 8010062:	6883      	ldr	r3, [r0, #8]
 8010064:	f04f 0c00 	mov.w	ip, #0
 8010068:	636b      	str	r3, [r5, #52]	@ 0x34
 801006a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 801006c:	f103 0410 	add.w	r4, r3, #16
 8010070:	3510      	adds	r5, #16
 8010072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801007a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801007e:	4660      	mov	r0, ip
 8010080:	bd70      	pop	{r4, r5, r6, pc}
 8010082:	f04f 0c0c 	mov.w	ip, #12
 8010086:	4660      	mov	r0, ip
 8010088:	bd70      	pop	{r4, r5, r6, pc}
 801008a:	f04f 0c01 	mov.w	ip, #1
 801008e:	e7c6      	b.n	801001e <rmw_init_options_copy+0x22>
 8010090:	f04f 0c0b 	mov.w	ip, #11
 8010094:	4660      	mov	r0, ip
 8010096:	4770      	bx	lr
 8010098:	0801eb64 	.word	0x0801eb64
 801009c:	240139c4 	.word	0x240139c4

080100a0 <rmw_init_options_fini>:
 80100a0:	b510      	push	{r4, lr}
 80100a2:	b08e      	sub	sp, #56	@ 0x38
 80100a4:	b388      	cbz	r0, 801010a <rmw_init_options_fini+0x6a>
 80100a6:	4604      	mov	r4, r0
 80100a8:	3020      	adds	r0, #32
 80100aa:	f7ff fe85 	bl	800fdb8 <rcutils_allocator_is_valid>
 80100ae:	b360      	cbz	r0, 801010a <rmw_init_options_fini+0x6a>
 80100b0:	68a0      	ldr	r0, [r4, #8]
 80100b2:	b120      	cbz	r0, 80100be <rmw_init_options_fini+0x1e>
 80100b4:	4b1a      	ldr	r3, [pc, #104]	@ (8010120 <rmw_init_options_fini+0x80>)
 80100b6:	6819      	ldr	r1, [r3, #0]
 80100b8:	f7f0 f912 	bl	80002e0 <strcmp>
 80100bc:	bb68      	cbnz	r0, 801011a <rmw_init_options_fini+0x7a>
 80100be:	4b19      	ldr	r3, [pc, #100]	@ (8010124 <rmw_init_options_fini+0x84>)
 80100c0:	6819      	ldr	r1, [r3, #0]
 80100c2:	b331      	cbz	r1, 8010112 <rmw_init_options_fini+0x72>
 80100c4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80100c6:	e001      	b.n	80100cc <rmw_init_options_fini+0x2c>
 80100c8:	6849      	ldr	r1, [r1, #4]
 80100ca:	b311      	cbz	r1, 8010112 <rmw_init_options_fini+0x72>
 80100cc:	688b      	ldr	r3, [r1, #8]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d1fa      	bne.n	80100c8 <rmw_init_options_fini+0x28>
 80100d2:	4814      	ldr	r0, [pc, #80]	@ (8010124 <rmw_init_options_fini+0x84>)
 80100d4:	f00a fb66 	bl	801a7a4 <put_memory>
 80100d8:	4668      	mov	r0, sp
 80100da:	f7ff fef9 	bl	800fed0 <rmw_get_zero_initialized_init_options>
 80100de:	46ee      	mov	lr, sp
 80100e0:	46a4      	mov	ip, r4
 80100e2:	2400      	movs	r4, #0
 80100e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80100fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010100:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010104:	4620      	mov	r0, r4
 8010106:	b00e      	add	sp, #56	@ 0x38
 8010108:	bd10      	pop	{r4, pc}
 801010a:	240b      	movs	r4, #11
 801010c:	4620      	mov	r0, r4
 801010e:	b00e      	add	sp, #56	@ 0x38
 8010110:	bd10      	pop	{r4, pc}
 8010112:	2401      	movs	r4, #1
 8010114:	4620      	mov	r0, r4
 8010116:	b00e      	add	sp, #56	@ 0x38
 8010118:	bd10      	pop	{r4, pc}
 801011a:	240c      	movs	r4, #12
 801011c:	e7f2      	b.n	8010104 <rmw_init_options_fini+0x64>
 801011e:	bf00      	nop
 8010120:	0801eb64 	.word	0x0801eb64
 8010124:	240139c4 	.word	0x240139c4

08010128 <rmw_init>:
 8010128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801012c:	b083      	sub	sp, #12
 801012e:	2800      	cmp	r0, #0
 8010130:	f000 80d3 	beq.w	80102da <rmw_init+0x1b2>
 8010134:	460e      	mov	r6, r1
 8010136:	2900      	cmp	r1, #0
 8010138:	f000 80cf 	beq.w	80102da <rmw_init+0x1b2>
 801013c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801013e:	4605      	mov	r5, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 80ca 	beq.w	80102da <rmw_init+0x1b2>
 8010146:	4b78      	ldr	r3, [pc, #480]	@ (8010328 <rmw_init+0x200>)
 8010148:	6880      	ldr	r0, [r0, #8]
 801014a:	681f      	ldr	r7, [r3, #0]
 801014c:	b128      	cbz	r0, 801015a <rmw_init+0x32>
 801014e:	4639      	mov	r1, r7
 8010150:	f7f0 f8c6 	bl	80002e0 <strcmp>
 8010154:	2800      	cmp	r0, #0
 8010156:	f040 80ca 	bne.w	80102ee <rmw_init+0x1c6>
 801015a:	4c74      	ldr	r4, [pc, #464]	@ (801032c <rmw_init+0x204>)
 801015c:	f04f 0800 	mov.w	r8, #0
 8010160:	4973      	ldr	r1, [pc, #460]	@ (8010330 <rmw_init+0x208>)
 8010162:	4874      	ldr	r0, [pc, #464]	@ (8010334 <rmw_init+0x20c>)
 8010164:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010168:	60b7      	str	r7, [r6, #8]
 801016a:	e9c6 2300 	strd	r2, r3, [r6]
 801016e:	68eb      	ldr	r3, [r5, #12]
 8010170:	2201      	movs	r2, #1
 8010172:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010174:	f000 fd84 	bl	8010c80 <rmw_uxrce_init_session_memory>
 8010178:	4620      	mov	r0, r4
 801017a:	2204      	movs	r2, #4
 801017c:	496e      	ldr	r1, [pc, #440]	@ (8010338 <rmw_init+0x210>)
 801017e:	f000 fdbf 	bl	8010d00 <rmw_uxrce_init_static_input_buffer_memory>
 8010182:	486c      	ldr	r0, [pc, #432]	@ (8010334 <rmw_init+0x20c>)
 8010184:	f884 800d 	strb.w	r8, [r4, #13]
 8010188:	f00a fafc 	bl	801a784 <get_memory>
 801018c:	2800      	cmp	r0, #0
 801018e:	f000 80a9 	beq.w	80102e4 <rmw_init+0x1bc>
 8010192:	6884      	ldr	r4, [r0, #8]
 8010194:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010196:	f104 0910 	add.w	r9, r4, #16
 801019a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801019c:	f890 c010 	ldrb.w	ip, [r0, #16]
 80101a0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80101a4:	9101      	str	r1, [sp, #4]
 80101a6:	4661      	mov	r1, ip
 80101a8:	6a00      	ldr	r0, [r0, #32]
 80101aa:	9000      	str	r0, [sp, #0]
 80101ac:	4648      	mov	r0, r9
 80101ae:	f003 fcad 	bl	8013b0c <uxr_set_custom_transport_callbacks>
 80101b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80101b6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80101ba:	4960      	ldr	r1, [pc, #384]	@ (801033c <rmw_init+0x214>)
 80101bc:	4860      	ldr	r0, [pc, #384]	@ (8010340 <rmw_init+0x218>)
 80101be:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80101c2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80101c6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80101ca:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80101ce:	2201      	movs	r2, #1
 80101d0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80101d4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80101d8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80101dc:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80101e0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80101e2:	f000 fd2d 	bl	8010c40 <rmw_uxrce_init_node_memory>
 80101e6:	2205      	movs	r2, #5
 80101e8:	4956      	ldr	r1, [pc, #344]	@ (8010344 <rmw_init+0x21c>)
 80101ea:	4857      	ldr	r0, [pc, #348]	@ (8010348 <rmw_init+0x220>)
 80101ec:	f000 fd08 	bl	8010c00 <rmw_uxrce_init_subscription_memory>
 80101f0:	220a      	movs	r2, #10
 80101f2:	4956      	ldr	r1, [pc, #344]	@ (801034c <rmw_init+0x224>)
 80101f4:	4856      	ldr	r0, [pc, #344]	@ (8010350 <rmw_init+0x228>)
 80101f6:	f000 fce3 	bl	8010bc0 <rmw_uxrce_init_publisher_memory>
 80101fa:	2201      	movs	r2, #1
 80101fc:	4955      	ldr	r1, [pc, #340]	@ (8010354 <rmw_init+0x22c>)
 80101fe:	4856      	ldr	r0, [pc, #344]	@ (8010358 <rmw_init+0x230>)
 8010200:	f000 fc9e 	bl	8010b40 <rmw_uxrce_init_service_memory>
 8010204:	2201      	movs	r2, #1
 8010206:	4955      	ldr	r1, [pc, #340]	@ (801035c <rmw_init+0x234>)
 8010208:	4855      	ldr	r0, [pc, #340]	@ (8010360 <rmw_init+0x238>)
 801020a:	f000 fcb9 	bl	8010b80 <rmw_uxrce_init_client_memory>
 801020e:	220f      	movs	r2, #15
 8010210:	4954      	ldr	r1, [pc, #336]	@ (8010364 <rmw_init+0x23c>)
 8010212:	4855      	ldr	r0, [pc, #340]	@ (8010368 <rmw_init+0x240>)
 8010214:	f000 fd54 	bl	8010cc0 <rmw_uxrce_init_topic_memory>
 8010218:	2203      	movs	r2, #3
 801021a:	4954      	ldr	r1, [pc, #336]	@ (801036c <rmw_init+0x244>)
 801021c:	4854      	ldr	r0, [pc, #336]	@ (8010370 <rmw_init+0x248>)
 801021e:	f000 fd8f 	bl	8010d40 <rmw_uxrce_init_init_options_impl_memory>
 8010222:	2204      	movs	r2, #4
 8010224:	4953      	ldr	r1, [pc, #332]	@ (8010374 <rmw_init+0x24c>)
 8010226:	4854      	ldr	r0, [pc, #336]	@ (8010378 <rmw_init+0x250>)
 8010228:	f000 fdaa 	bl	8010d80 <rmw_uxrce_init_wait_set_memory>
 801022c:	4953      	ldr	r1, [pc, #332]	@ (801037c <rmw_init+0x254>)
 801022e:	4854      	ldr	r0, [pc, #336]	@ (8010380 <rmw_init+0x258>)
 8010230:	2204      	movs	r2, #4
 8010232:	f000 fdc5 	bl	8010dc0 <rmw_uxrce_init_guard_condition_memory>
 8010236:	4642      	mov	r2, r8
 8010238:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801023a:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801023c:	f000 fc48 	bl	8010ad0 <rmw_uxrce_transport_init>
 8010240:	4607      	mov	r7, r0
 8010242:	2800      	cmp	r0, #0
 8010244:	d158      	bne.n	80102f8 <rmw_init+0x1d0>
 8010246:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010248:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801024c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010252:	4628      	mov	r0, r5
 8010254:	f003 fe50 	bl	8013ef8 <uxr_init_session>
 8010258:	4622      	mov	r2, r4
 801025a:	494a      	ldr	r1, [pc, #296]	@ (8010384 <rmw_init+0x25c>)
 801025c:	4628      	mov	r0, r5
 801025e:	f003 fe6f 	bl	8013f40 <uxr_set_topic_callback>
 8010262:	463a      	mov	r2, r7
 8010264:	4948      	ldr	r1, [pc, #288]	@ (8010388 <rmw_init+0x260>)
 8010266:	4628      	mov	r0, r5
 8010268:	f003 fe66 	bl	8013f38 <uxr_set_status_callback>
 801026c:	463a      	mov	r2, r7
 801026e:	4947      	ldr	r1, [pc, #284]	@ (801038c <rmw_init+0x264>)
 8010270:	4628      	mov	r0, r5
 8010272:	f003 fe69 	bl	8013f48 <uxr_set_request_callback>
 8010276:	463a      	mov	r2, r7
 8010278:	4945      	ldr	r1, [pc, #276]	@ (8010390 <rmw_init+0x268>)
 801027a:	4628      	mov	r0, r5
 801027c:	f003 fe68 	bl	8013f50 <uxr_set_reply_callback>
 8010280:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010284:	2304      	movs	r3, #4
 8010286:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801028a:	0092      	lsls	r2, r2, #2
 801028c:	4628      	mov	r0, r5
 801028e:	f003 fe9f 	bl	8013fd0 <uxr_create_input_reliable_stream>
 8010292:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010296:	2304      	movs	r3, #4
 8010298:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801029c:	0092      	lsls	r2, r2, #2
 801029e:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80102a2:	4628      	mov	r0, r5
 80102a4:	f003 fe6a 	bl	8013f7c <uxr_create_output_reliable_stream>
 80102a8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80102ac:	4628      	mov	r0, r5
 80102ae:	f003 fe89 	bl	8013fc4 <uxr_create_input_best_effort_stream>
 80102b2:	f241 3194 	movw	r1, #5012	@ 0x1394
 80102b6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80102ba:	4628      	mov	r0, r5
 80102bc:	4421      	add	r1, r4
 80102be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80102c2:	f003 fe49 	bl	8013f58 <uxr_create_output_best_effort_stream>
 80102c6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80102ca:	4628      	mov	r0, r5
 80102cc:	f004 fc28 	bl	8014b20 <uxr_create_session>
 80102d0:	b1f8      	cbz	r0, 8010312 <rmw_init+0x1ea>
 80102d2:	4638      	mov	r0, r7
 80102d4:	b003      	add	sp, #12
 80102d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102da:	270b      	movs	r7, #11
 80102dc:	4638      	mov	r0, r7
 80102de:	b003      	add	sp, #12
 80102e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e4:	2701      	movs	r7, #1
 80102e6:	4638      	mov	r0, r7
 80102e8:	b003      	add	sp, #12
 80102ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102ee:	270c      	movs	r7, #12
 80102f0:	4638      	mov	r0, r7
 80102f2:	b003      	add	sp, #12
 80102f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f8:	4648      	mov	r0, r9
 80102fa:	f003 fc45 	bl	8013b88 <uxr_close_custom_transport>
 80102fe:	4621      	mov	r1, r4
 8010300:	480c      	ldr	r0, [pc, #48]	@ (8010334 <rmw_init+0x20c>)
 8010302:	f00a fa4f 	bl	801a7a4 <put_memory>
 8010306:	4638      	mov	r0, r7
 8010308:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801030c:	b003      	add	sp, #12
 801030e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010312:	4648      	mov	r0, r9
 8010314:	f003 fc38 	bl	8013b88 <uxr_close_custom_transport>
 8010318:	4621      	mov	r1, r4
 801031a:	4806      	ldr	r0, [pc, #24]	@ (8010334 <rmw_init+0x20c>)
 801031c:	f00a fa42 	bl	801a7a4 <put_memory>
 8010320:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010322:	2701      	movs	r7, #1
 8010324:	e7d5      	b.n	80102d2 <rmw_init+0x1aa>
 8010326:	bf00      	nop
 8010328:	0801eb64 	.word	0x0801eb64
 801032c:	24013a14 	.word	0x24013a14
 8010330:	2400fcc0 	.word	0x2400fcc0
 8010334:	24013a04 	.word	0x24013a04
 8010338:	24011268 	.word	0x24011268
 801033c:	2400f2e4 	.word	0x2400f2e4
 8010340:	240139d4 	.word	0x240139d4
 8010344:	24013368 	.word	0x24013368
 8010348:	24013a24 	.word	0x24013a24
 801034c:	2400f388 	.word	0x2400f388
 8010350:	240139e4 	.word	0x240139e4
 8010354:	2400fbf8 	.word	0x2400fbf8
 8010358:	240139f4 	.word	0x240139f4
 801035c:	2400f118 	.word	0x2400f118
 8010360:	2400f104 	.word	0x2400f104
 8010364:	240137a0 	.word	0x240137a0
 8010368:	24013a34 	.word	0x24013a34
 801036c:	2400f260 	.word	0x2400f260
 8010370:	240139c4 	.word	0x240139c4
 8010374:	24013944 	.word	0x24013944
 8010378:	24013a44 	.word	0x24013a44
 801037c:	2400f1e0 	.word	0x2400f1e0
 8010380:	240139b4 	.word	0x240139b4
 8010384:	0801a5bd 	.word	0x0801a5bd
 8010388:	0801a5b5 	.word	0x0801a5b5
 801038c:	0801a655 	.word	0x0801a655
 8010390:	0801a6f1 	.word	0x0801a6f1

08010394 <rmw_context_fini>:
 8010394:	4b17      	ldr	r3, [pc, #92]	@ (80103f4 <rmw_context_fini+0x60>)
 8010396:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	681c      	ldr	r4, [r3, #0]
 801039c:	4605      	mov	r5, r0
 801039e:	b334      	cbz	r4, 80103ee <rmw_context_fini+0x5a>
 80103a0:	2600      	movs	r6, #0
 80103a2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80103a6:	6902      	ldr	r2, [r0, #16]
 80103a8:	428a      	cmp	r2, r1
 80103aa:	d018      	beq.n	80103de <rmw_context_fini+0x4a>
 80103ac:	2c00      	cmp	r4, #0
 80103ae:	d1f8      	bne.n	80103a2 <rmw_context_fini+0xe>
 80103b0:	b189      	cbz	r1, 80103d6 <rmw_context_fini+0x42>
 80103b2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80103b6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80103ba:	789b      	ldrb	r3, [r3, #2]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	bf14      	ite	ne
 80103c0:	210a      	movne	r1, #10
 80103c2:	2100      	moveq	r1, #0
 80103c4:	f004 fb84 	bl	8014ad0 <uxr_delete_session_retries>
 80103c8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80103ca:	f000 fd19 	bl	8010e00 <rmw_uxrce_fini_session_memory>
 80103ce:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80103d0:	3010      	adds	r0, #16
 80103d2:	f003 fbd9 	bl	8013b88 <uxr_close_custom_transport>
 80103d6:	2300      	movs	r3, #0
 80103d8:	4630      	mov	r0, r6
 80103da:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80103dc:	bd70      	pop	{r4, r5, r6, pc}
 80103de:	3018      	adds	r0, #24
 80103e0:	f000 f89c 	bl	801051c <rmw_destroy_node>
 80103e4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80103e6:	4606      	mov	r6, r0
 80103e8:	2c00      	cmp	r4, #0
 80103ea:	d1da      	bne.n	80103a2 <rmw_context_fini+0xe>
 80103ec:	e7e0      	b.n	80103b0 <rmw_context_fini+0x1c>
 80103ee:	4626      	mov	r6, r4
 80103f0:	e7de      	b.n	80103b0 <rmw_context_fini+0x1c>
 80103f2:	bf00      	nop
 80103f4:	240139d4 	.word	0x240139d4

080103f8 <create_node>:
 80103f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103fc:	b083      	sub	sp, #12
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d064      	beq.n	80104cc <create_node+0xd4>
 8010402:	4606      	mov	r6, r0
 8010404:	4838      	ldr	r0, [pc, #224]	@ (80104e8 <create_node+0xf0>)
 8010406:	460f      	mov	r7, r1
 8010408:	4690      	mov	r8, r2
 801040a:	461d      	mov	r5, r3
 801040c:	f00a f9ba 	bl	801a784 <get_memory>
 8010410:	2800      	cmp	r0, #0
 8010412:	d05b      	beq.n	80104cc <create_node+0xd4>
 8010414:	6884      	ldr	r4, [r0, #8]
 8010416:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8010418:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801041c:	f104 0518 	add.w	r5, r4, #24
 8010420:	6123      	str	r3, [r4, #16]
 8010422:	f00a fa17 	bl	801a854 <rmw_get_implementation_identifier>
 8010426:	f8c4 9020 	str.w	r9, [r4, #32]
 801042a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801042e:	4630      	mov	r0, r6
 8010430:	f7ef ff60 	bl	80002f4 <strlen>
 8010434:	1c42      	adds	r2, r0, #1
 8010436:	2a3c      	cmp	r2, #60	@ 0x3c
 8010438:	d840      	bhi.n	80104bc <create_node+0xc4>
 801043a:	4648      	mov	r0, r9
 801043c:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8010440:	4631      	mov	r1, r6
 8010442:	f00c fdf2 	bl	801d02a <memcpy>
 8010446:	4638      	mov	r0, r7
 8010448:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801044c:	f7ef ff52 	bl	80002f4 <strlen>
 8010450:	1c42      	adds	r2, r0, #1
 8010452:	2a3c      	cmp	r2, #60	@ 0x3c
 8010454:	d832      	bhi.n	80104bc <create_node+0xc4>
 8010456:	4639      	mov	r1, r7
 8010458:	4648      	mov	r0, r9
 801045a:	f00c fde6 	bl	801d02a <memcpy>
 801045e:	6923      	ldr	r3, [r4, #16]
 8010460:	2101      	movs	r1, #1
 8010462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010466:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801046a:	1842      	adds	r2, r0, r1
 801046c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010470:	f003 fb8e 	bl	8013b90 <uxr_object_id>
 8010474:	6160      	str	r0, [r4, #20]
 8010476:	783b      	ldrb	r3, [r7, #0]
 8010478:	2b2f      	cmp	r3, #47	@ 0x2f
 801047a:	d12c      	bne.n	80104d6 <create_node+0xde>
 801047c:	787b      	ldrb	r3, [r7, #1]
 801047e:	bb53      	cbnz	r3, 80104d6 <create_node+0xde>
 8010480:	4633      	mov	r3, r6
 8010482:	4a1a      	ldr	r2, [pc, #104]	@ (80104ec <create_node+0xf4>)
 8010484:	213c      	movs	r1, #60	@ 0x3c
 8010486:	481a      	ldr	r0, [pc, #104]	@ (80104f0 <create_node+0xf8>)
 8010488:	f00c fb98 	bl	801cbbc <sniprintf>
 801048c:	6920      	ldr	r0, [r4, #16]
 801048e:	2106      	movs	r1, #6
 8010490:	fa1f f388 	uxth.w	r3, r8
 8010494:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010498:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801049c:	9101      	str	r1, [sp, #4]
 801049e:	4914      	ldr	r1, [pc, #80]	@ (80104f0 <create_node+0xf8>)
 80104a0:	9100      	str	r1, [sp, #0]
 80104a2:	6811      	ldr	r1, [r2, #0]
 80104a4:	6962      	ldr	r2, [r4, #20]
 80104a6:	f003 f9a7 	bl	80137f8 <uxr_buffer_create_participant_bin>
 80104aa:	4602      	mov	r2, r0
 80104ac:	6920      	ldr	r0, [r4, #16]
 80104ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80104b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80104b6:	f000 fe25 	bl	8011104 <run_xrce_session>
 80104ba:	b918      	cbnz	r0, 80104c4 <create_node+0xcc>
 80104bc:	4628      	mov	r0, r5
 80104be:	2500      	movs	r5, #0
 80104c0:	f000 fca4 	bl	8010e0c <rmw_uxrce_fini_node_memory>
 80104c4:	4628      	mov	r0, r5
 80104c6:	b003      	add	sp, #12
 80104c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104cc:	2500      	movs	r5, #0
 80104ce:	4628      	mov	r0, r5
 80104d0:	b003      	add	sp, #12
 80104d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104d6:	463b      	mov	r3, r7
 80104d8:	4a06      	ldr	r2, [pc, #24]	@ (80104f4 <create_node+0xfc>)
 80104da:	213c      	movs	r1, #60	@ 0x3c
 80104dc:	9600      	str	r6, [sp, #0]
 80104de:	4804      	ldr	r0, [pc, #16]	@ (80104f0 <create_node+0xf8>)
 80104e0:	f00c fb6c 	bl	801cbbc <sniprintf>
 80104e4:	e7d2      	b.n	801048c <create_node+0x94>
 80104e6:	bf00      	nop
 80104e8:	240139d4 	.word	0x240139d4
 80104ec:	0801df8c 	.word	0x0801df8c
 80104f0:	2400f0c8 	.word	0x2400f0c8
 80104f4:	0801df50 	.word	0x0801df50

080104f8 <rmw_create_node>:
 80104f8:	468c      	mov	ip, r1
 80104fa:	4611      	mov	r1, r2
 80104fc:	f1bc 0f00 	cmp.w	ip, #0
 8010500:	d00a      	beq.n	8010518 <rmw_create_node+0x20>
 8010502:	f89c 3000 	ldrb.w	r3, [ip]
 8010506:	b13b      	cbz	r3, 8010518 <rmw_create_node+0x20>
 8010508:	b132      	cbz	r2, 8010518 <rmw_create_node+0x20>
 801050a:	7813      	ldrb	r3, [r2, #0]
 801050c:	b123      	cbz	r3, 8010518 <rmw_create_node+0x20>
 801050e:	4603      	mov	r3, r0
 8010510:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8010512:	4660      	mov	r0, ip
 8010514:	f7ff bf70 	b.w	80103f8 <create_node>
 8010518:	2000      	movs	r0, #0
 801051a:	4770      	bx	lr

0801051c <rmw_destroy_node>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	b328      	cbz	r0, 801056c <rmw_destroy_node+0x50>
 8010520:	4607      	mov	r7, r0
 8010522:	6800      	ldr	r0, [r0, #0]
 8010524:	b120      	cbz	r0, 8010530 <rmw_destroy_node+0x14>
 8010526:	4b37      	ldr	r3, [pc, #220]	@ (8010604 <rmw_destroy_node+0xe8>)
 8010528:	6819      	ldr	r1, [r3, #0]
 801052a:	f7ef fed9 	bl	80002e0 <strcmp>
 801052e:	b9e8      	cbnz	r0, 801056c <rmw_destroy_node+0x50>
 8010530:	687d      	ldr	r5, [r7, #4]
 8010532:	b1dd      	cbz	r5, 801056c <rmw_destroy_node+0x50>
 8010534:	4b34      	ldr	r3, [pc, #208]	@ (8010608 <rmw_destroy_node+0xec>)
 8010536:	681c      	ldr	r4, [r3, #0]
 8010538:	2c00      	cmp	r4, #0
 801053a:	d060      	beq.n	80105fe <rmw_destroy_node+0xe2>
 801053c:	2600      	movs	r6, #0
 801053e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010542:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8010546:	429d      	cmp	r5, r3
 8010548:	d013      	beq.n	8010572 <rmw_destroy_node+0x56>
 801054a:	2c00      	cmp	r4, #0
 801054c:	d1f7      	bne.n	801053e <rmw_destroy_node+0x22>
 801054e:	4b2f      	ldr	r3, [pc, #188]	@ (801060c <rmw_destroy_node+0xf0>)
 8010550:	681c      	ldr	r4, [r3, #0]
 8010552:	b1c4      	cbz	r4, 8010586 <rmw_destroy_node+0x6a>
 8010554:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010558:	6a0b      	ldr	r3, [r1, #32]
 801055a:	429d      	cmp	r5, r3
 801055c:	d1f9      	bne.n	8010552 <rmw_destroy_node+0x36>
 801055e:	317c      	adds	r1, #124	@ 0x7c
 8010560:	4638      	mov	r0, r7
 8010562:	f000 fa53 	bl	8010a0c <rmw_destroy_subscription>
 8010566:	2801      	cmp	r0, #1
 8010568:	4606      	mov	r6, r0
 801056a:	d1f2      	bne.n	8010552 <rmw_destroy_node+0x36>
 801056c:	2601      	movs	r6, #1
 801056e:	4630      	mov	r0, r6
 8010570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010572:	3184      	adds	r1, #132	@ 0x84
 8010574:	4638      	mov	r0, r7
 8010576:	f000 f9b1 	bl	80108dc <rmw_destroy_publisher>
 801057a:	2801      	cmp	r0, #1
 801057c:	4606      	mov	r6, r0
 801057e:	d0f5      	beq.n	801056c <rmw_destroy_node+0x50>
 8010580:	2c00      	cmp	r4, #0
 8010582:	d1dc      	bne.n	801053e <rmw_destroy_node+0x22>
 8010584:	e7e3      	b.n	801054e <rmw_destroy_node+0x32>
 8010586:	4b22      	ldr	r3, [pc, #136]	@ (8010610 <rmw_destroy_node+0xf4>)
 8010588:	681c      	ldr	r4, [r3, #0]
 801058a:	b16c      	cbz	r4, 80105a8 <rmw_destroy_node+0x8c>
 801058c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010590:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010592:	429d      	cmp	r5, r3
 8010594:	d1f9      	bne.n	801058a <rmw_destroy_node+0x6e>
 8010596:	317c      	adds	r1, #124	@ 0x7c
 8010598:	4638      	mov	r0, r7
 801059a:	f000 f9f3 	bl	8010984 <rmw_destroy_service>
 801059e:	2801      	cmp	r0, #1
 80105a0:	4606      	mov	r6, r0
 80105a2:	d0e3      	beq.n	801056c <rmw_destroy_node+0x50>
 80105a4:	2c00      	cmp	r4, #0
 80105a6:	d1f1      	bne.n	801058c <rmw_destroy_node+0x70>
 80105a8:	4b1a      	ldr	r3, [pc, #104]	@ (8010614 <rmw_destroy_node+0xf8>)
 80105aa:	681c      	ldr	r4, [r3, #0]
 80105ac:	b16c      	cbz	r4, 80105ca <rmw_destroy_node+0xae>
 80105ae:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80105b2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80105b4:	429d      	cmp	r5, r3
 80105b6:	d1f9      	bne.n	80105ac <rmw_destroy_node+0x90>
 80105b8:	317c      	adds	r1, #124	@ 0x7c
 80105ba:	4638      	mov	r0, r7
 80105bc:	f00a f906 	bl	801a7cc <rmw_destroy_client>
 80105c0:	2801      	cmp	r0, #1
 80105c2:	4606      	mov	r6, r0
 80105c4:	d0d2      	beq.n	801056c <rmw_destroy_node+0x50>
 80105c6:	2c00      	cmp	r4, #0
 80105c8:	d1f1      	bne.n	80105ae <rmw_destroy_node+0x92>
 80105ca:	6928      	ldr	r0, [r5, #16]
 80105cc:	696a      	ldr	r2, [r5, #20]
 80105ce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80105d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80105d6:	6819      	ldr	r1, [r3, #0]
 80105d8:	f003 f8c2 	bl	8013760 <uxr_buffer_delete_entity>
 80105dc:	4602      	mov	r2, r0
 80105de:	6928      	ldr	r0, [r5, #16]
 80105e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105e8:	f000 fd8c 	bl	8011104 <run_xrce_session>
 80105ec:	4603      	mov	r3, r0
 80105ee:	4638      	mov	r0, r7
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	bf08      	it	eq
 80105f4:	2602      	moveq	r6, #2
 80105f6:	f000 fc09 	bl	8010e0c <rmw_uxrce_fini_node_memory>
 80105fa:	4630      	mov	r0, r6
 80105fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105fe:	4626      	mov	r6, r4
 8010600:	e7a5      	b.n	801054e <rmw_destroy_node+0x32>
 8010602:	bf00      	nop
 8010604:	0801eb64 	.word	0x0801eb64
 8010608:	240139e4 	.word	0x240139e4
 801060c:	24013a24 	.word	0x24013a24
 8010610:	240139f4 	.word	0x240139f4
 8010614:	2400f104 	.word	0x2400f104

08010618 <rmw_node_get_graph_guard_condition>:
 8010618:	6843      	ldr	r3, [r0, #4]
 801061a:	6918      	ldr	r0, [r3, #16]
 801061c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop

08010624 <flush_session>:
 8010624:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8010626:	f004 b8b3 	b.w	8014790 <uxr_run_session_until_confirm_delivery>
 801062a:	bf00      	nop

0801062c <rmw_publish>:
 801062c:	2800      	cmp	r0, #0
 801062e:	d053      	beq.n	80106d8 <rmw_publish+0xac>
 8010630:	b570      	push	{r4, r5, r6, lr}
 8010632:	460d      	mov	r5, r1
 8010634:	b08e      	sub	sp, #56	@ 0x38
 8010636:	2900      	cmp	r1, #0
 8010638:	d04b      	beq.n	80106d2 <rmw_publish+0xa6>
 801063a:	4604      	mov	r4, r0
 801063c:	6800      	ldr	r0, [r0, #0]
 801063e:	f000 fddb 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 8010642:	2800      	cmp	r0, #0
 8010644:	d045      	beq.n	80106d2 <rmw_publish+0xa6>
 8010646:	6866      	ldr	r6, [r4, #4]
 8010648:	2e00      	cmp	r6, #0
 801064a:	d042      	beq.n	80106d2 <rmw_publish+0xa6>
 801064c:	69b4      	ldr	r4, [r6, #24]
 801064e:	4628      	mov	r0, r5
 8010650:	6923      	ldr	r3, [r4, #16]
 8010652:	4798      	blx	r3
 8010654:	69f3      	ldr	r3, [r6, #28]
 8010656:	9005      	str	r0, [sp, #20]
 8010658:	b113      	cbz	r3, 8010660 <rmw_publish+0x34>
 801065a:	a805      	add	r0, sp, #20
 801065c:	4798      	blx	r3
 801065e:	9805      	ldr	r0, [sp, #20]
 8010660:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010664:	691b      	ldr	r3, [r3, #16]
 8010666:	9000      	str	r0, [sp, #0]
 8010668:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801066c:	6972      	ldr	r2, [r6, #20]
 801066e:	ab06      	add	r3, sp, #24
 8010670:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8010672:	f005 fb5d 	bl	8015d30 <uxr_prepare_output_stream>
 8010676:	b1d8      	cbz	r0, 80106b0 <rmw_publish+0x84>
 8010678:	68a3      	ldr	r3, [r4, #8]
 801067a:	a906      	add	r1, sp, #24
 801067c:	4628      	mov	r0, r5
 801067e:	4798      	blx	r3
 8010680:	6a33      	ldr	r3, [r6, #32]
 8010682:	4604      	mov	r4, r0
 8010684:	b10b      	cbz	r3, 801068a <rmw_publish+0x5e>
 8010686:	a806      	add	r0, sp, #24
 8010688:	4798      	blx	r3
 801068a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 801068e:	2b01      	cmp	r3, #1
 8010690:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010694:	d022      	beq.n	80106dc <rmw_publish+0xb0>
 8010696:	6918      	ldr	r0, [r3, #16]
 8010698:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801069a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801069e:	f004 f877 	bl	8014790 <uxr_run_session_until_confirm_delivery>
 80106a2:	4020      	ands	r0, r4
 80106a4:	b2c4      	uxtb	r4, r0
 80106a6:	f084 0001 	eor.w	r0, r4, #1
 80106aa:	b2c0      	uxtb	r0, r0
 80106ac:	b00e      	add	sp, #56	@ 0x38
 80106ae:	bd70      	pop	{r4, r5, r6, pc}
 80106b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80106b4:	6918      	ldr	r0, [r3, #16]
 80106b6:	9b05      	ldr	r3, [sp, #20]
 80106b8:	9602      	str	r6, [sp, #8]
 80106ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	4b09      	ldr	r3, [pc, #36]	@ (80106e8 <rmw_publish+0xbc>)
 80106c2:	9301      	str	r3, [sp, #4]
 80106c4:	ab06      	add	r3, sp, #24
 80106c6:	6972      	ldr	r2, [r6, #20]
 80106c8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80106ca:	f005 fb61 	bl	8015d90 <uxr_prepare_output_stream_fragmented>
 80106ce:	2800      	cmp	r0, #0
 80106d0:	d1d2      	bne.n	8010678 <rmw_publish+0x4c>
 80106d2:	2001      	movs	r0, #1
 80106d4:	b00e      	add	sp, #56	@ 0x38
 80106d6:	bd70      	pop	{r4, r5, r6, pc}
 80106d8:	2001      	movs	r0, #1
 80106da:	4770      	bx	lr
 80106dc:	6918      	ldr	r0, [r3, #16]
 80106de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80106e2:	f003 fc9b 	bl	801401c <uxr_flash_output_streams>
 80106e6:	e7de      	b.n	80106a6 <rmw_publish+0x7a>
 80106e8:	08010625 	.word	0x08010625

080106ec <rmw_create_publisher>:
 80106ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	b087      	sub	sp, #28
 80106f2:	2800      	cmp	r0, #0
 80106f4:	f000 80d2 	beq.w	801089c <rmw_create_publisher+0x1b0>
 80106f8:	460e      	mov	r6, r1
 80106fa:	2900      	cmp	r1, #0
 80106fc:	f000 80ce 	beq.w	801089c <rmw_create_publisher+0x1b0>
 8010700:	4604      	mov	r4, r0
 8010702:	6800      	ldr	r0, [r0, #0]
 8010704:	4615      	mov	r5, r2
 8010706:	461f      	mov	r7, r3
 8010708:	f000 fd76 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 801070c:	f080 0001 	eor.w	r0, r0, #1
 8010710:	b2c0      	uxtb	r0, r0
 8010712:	2800      	cmp	r0, #0
 8010714:	f040 80c2 	bne.w	801089c <rmw_create_publisher+0x1b0>
 8010718:	2d00      	cmp	r5, #0
 801071a:	f000 80bf 	beq.w	801089c <rmw_create_publisher+0x1b0>
 801071e:	782b      	ldrb	r3, [r5, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 80bb 	beq.w	801089c <rmw_create_publisher+0x1b0>
 8010726:	2f00      	cmp	r7, #0
 8010728:	f000 80b8 	beq.w	801089c <rmw_create_publisher+0x1b0>
 801072c:	485e      	ldr	r0, [pc, #376]	@ (80108a8 <rmw_create_publisher+0x1bc>)
 801072e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010732:	f00a f827 	bl	801a784 <get_memory>
 8010736:	2800      	cmp	r0, #0
 8010738:	f000 80b0 	beq.w	801089c <rmw_create_publisher+0x1b0>
 801073c:	6884      	ldr	r4, [r0, #8]
 801073e:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8010742:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8010746:	f00a f885 	bl	801a854 <rmw_get_implementation_identifier>
 801074a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801074e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8010752:	4628      	mov	r0, r5
 8010754:	f7ef fdce 	bl	80002f4 <strlen>
 8010758:	3001      	adds	r0, #1
 801075a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 801075e:	283c      	cmp	r0, #60	@ 0x3c
 8010760:	f200 808f 	bhi.w	8010882 <rmw_create_publisher+0x196>
 8010764:	462b      	mov	r3, r5
 8010766:	4a51      	ldr	r2, [pc, #324]	@ (80108ac <rmw_create_publisher+0x1c0>)
 8010768:	213c      	movs	r1, #60	@ 0x3c
 801076a:	4650      	mov	r0, sl
 801076c:	f00c fa26 	bl	801cbbc <sniprintf>
 8010770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010774:	4639      	mov	r1, r7
 8010776:	2250      	movs	r2, #80	@ 0x50
 8010778:	67e3      	str	r3, [r4, #124]	@ 0x7c
 801077a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801077e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8010782:	f00c fc52 	bl	801d02a <memcpy>
 8010786:	7a3b      	ldrb	r3, [r7, #8]
 8010788:	4630      	mov	r0, r6
 801078a:	4949      	ldr	r1, [pc, #292]	@ (80108b0 <rmw_create_publisher+0x1c4>)
 801078c:	2b02      	cmp	r3, #2
 801078e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010792:	bf0c      	ite	eq
 8010794:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8010798:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801079c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801079e:	2300      	movs	r3, #0
 80107a0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80107a4:	f000 fd36 	bl	8011214 <get_message_typesupport_handle>
 80107a8:	2800      	cmp	r0, #0
 80107aa:	d06a      	beq.n	8010882 <rmw_create_publisher+0x196>
 80107ac:	6842      	ldr	r2, [r0, #4]
 80107ae:	61a2      	str	r2, [r4, #24]
 80107b0:	2a00      	cmp	r2, #0
 80107b2:	d066      	beq.n	8010882 <rmw_create_publisher+0x196>
 80107b4:	4629      	mov	r1, r5
 80107b6:	463b      	mov	r3, r7
 80107b8:	4648      	mov	r0, r9
 80107ba:	f00a f851 	bl	801a860 <create_topic>
 80107be:	6260      	str	r0, [r4, #36]	@ 0x24
 80107c0:	2800      	cmp	r0, #0
 80107c2:	d062      	beq.n	801088a <rmw_create_publisher+0x19e>
 80107c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107c8:	2103      	movs	r1, #3
 80107ca:	2506      	movs	r5, #6
 80107cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80107d0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 80107d4:	1c42      	adds	r2, r0, #1
 80107d6:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 80107da:	f003 f9d9 	bl	8013b90 <uxr_object_id>
 80107de:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80107e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107e6:	6120      	str	r0, [r4, #16]
 80107e8:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 80107ec:	6910      	ldr	r0, [r2, #16]
 80107ee:	9500      	str	r5, [sp, #0]
 80107f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80107f4:	6819      	ldr	r1, [r3, #0]
 80107f6:	6922      	ldr	r2, [r4, #16]
 80107f8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80107fc:	f003 f864 	bl	80138c8 <uxr_buffer_create_publisher_bin>
 8010800:	4602      	mov	r2, r0
 8010802:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010806:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801080a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801080e:	f000 fc79 	bl	8011104 <run_xrce_session>
 8010812:	b3b0      	cbz	r0, 8010882 <rmw_create_publisher+0x196>
 8010814:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010818:	2105      	movs	r1, #5
 801081a:	f10d 0a10 	add.w	sl, sp, #16
 801081e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010822:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8010826:	1c42      	adds	r2, r0, #1
 8010828:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801082c:	f003 f9b0 	bl	8013b90 <uxr_object_id>
 8010830:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8010834:	4639      	mov	r1, r7
 8010836:	6160      	str	r0, [r4, #20]
 8010838:	691e      	ldr	r6, [r3, #16]
 801083a:	4650      	mov	r0, sl
 801083c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010840:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8010844:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8010848:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 801084c:	f000 fc76 	bl	801113c <convert_qos_profile>
 8010850:	9503      	str	r5, [sp, #12]
 8010852:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8010856:	9001      	str	r0, [sp, #4]
 8010858:	4630      	mov	r0, r6
 801085a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801085e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010862:	9300      	str	r3, [sp, #0]
 8010864:	6839      	ldr	r1, [r7, #0]
 8010866:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801086a:	f003 f85d 	bl	8013928 <uxr_buffer_create_datawriter_bin>
 801086e:	4602      	mov	r2, r0
 8010870:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010874:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010878:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801087c:	f000 fc42 	bl	8011104 <run_xrce_session>
 8010880:	b970      	cbnz	r0, 80108a0 <rmw_create_publisher+0x1b4>
 8010882:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8010884:	b108      	cbz	r0, 801088a <rmw_create_publisher+0x19e>
 8010886:	f000 fb31 	bl	8010eec <rmw_uxrce_fini_topic_memory>
 801088a:	4640      	mov	r0, r8
 801088c:	f04f 0800 	mov.w	r8, #0
 8010890:	f000 fad4 	bl	8010e3c <rmw_uxrce_fini_publisher_memory>
 8010894:	4640      	mov	r0, r8
 8010896:	b007      	add	sp, #28
 8010898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	f04f 0800 	mov.w	r8, #0
 80108a0:	4640      	mov	r0, r8
 80108a2:	b007      	add	sp, #28
 80108a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a8:	240139e4 	.word	0x240139e4
 80108ac:	0801df8c 	.word	0x0801df8c
 80108b0:	0801df58 	.word	0x0801df58

080108b4 <rmw_publisher_get_actual_qos>:
 80108b4:	b178      	cbz	r0, 80108d6 <rmw_publisher_get_actual_qos+0x22>
 80108b6:	b510      	push	{r4, lr}
 80108b8:	fab1 f481 	clz	r4, r1
 80108bc:	0964      	lsrs	r4, r4, #5
 80108be:	b141      	cbz	r1, 80108d2 <rmw_publisher_get_actual_qos+0x1e>
 80108c0:	6843      	ldr	r3, [r0, #4]
 80108c2:	2250      	movs	r2, #80	@ 0x50
 80108c4:	4608      	mov	r0, r1
 80108c6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80108ca:	f00c fbae 	bl	801d02a <memcpy>
 80108ce:	4620      	mov	r0, r4
 80108d0:	bd10      	pop	{r4, pc}
 80108d2:	200b      	movs	r0, #11
 80108d4:	bd10      	pop	{r4, pc}
 80108d6:	200b      	movs	r0, #11
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop

080108dc <rmw_destroy_publisher>:
 80108dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e0:	b128      	cbz	r0, 80108ee <rmw_destroy_publisher+0x12>
 80108e2:	4604      	mov	r4, r0
 80108e4:	6800      	ldr	r0, [r0, #0]
 80108e6:	460d      	mov	r5, r1
 80108e8:	f000 fc86 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 80108ec:	b918      	cbnz	r0, 80108f6 <rmw_destroy_publisher+0x1a>
 80108ee:	2401      	movs	r4, #1
 80108f0:	4620      	mov	r0, r4
 80108f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f6:	6863      	ldr	r3, [r4, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d0f8      	beq.n	80108ee <rmw_destroy_publisher+0x12>
 80108fc:	fab5 f485 	clz	r4, r5
 8010900:	0964      	lsrs	r4, r4, #5
 8010902:	2d00      	cmp	r5, #0
 8010904:	d0f3      	beq.n	80108ee <rmw_destroy_publisher+0x12>
 8010906:	6828      	ldr	r0, [r5, #0]
 8010908:	f000 fc76 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 801090c:	2800      	cmp	r0, #0
 801090e:	d0ee      	beq.n	80108ee <rmw_destroy_publisher+0x12>
 8010910:	686e      	ldr	r6, [r5, #4]
 8010912:	2e00      	cmp	r6, #0
 8010914:	d0eb      	beq.n	80108ee <rmw_destroy_publisher+0x12>
 8010916:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8010918:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 801091c:	f009 fff0 	bl	801a900 <destroy_topic>
 8010920:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010924:	6972      	ldr	r2, [r6, #20]
 8010926:	6918      	ldr	r0, [r3, #16]
 8010928:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801092c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010930:	6819      	ldr	r1, [r3, #0]
 8010932:	f002 ff15 	bl	8013760 <uxr_buffer_delete_entity>
 8010936:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801093a:	4680      	mov	r8, r0
 801093c:	6932      	ldr	r2, [r6, #16]
 801093e:	6918      	ldr	r0, [r3, #16]
 8010940:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010944:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010948:	6819      	ldr	r1, [r3, #0]
 801094a:	f002 ff09 	bl	8013760 <uxr_buffer_delete_entity>
 801094e:	4606      	mov	r6, r0
 8010950:	6938      	ldr	r0, [r7, #16]
 8010952:	4642      	mov	r2, r8
 8010954:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010958:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801095c:	f000 fbd2 	bl	8011104 <run_xrce_session>
 8010960:	693f      	ldr	r7, [r7, #16]
 8010962:	4632      	mov	r2, r6
 8010964:	4606      	mov	r6, r0
 8010966:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801096a:	4638      	mov	r0, r7
 801096c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010970:	f000 fbc8 	bl	8011104 <run_xrce_session>
 8010974:	b126      	cbz	r6, 8010980 <rmw_destroy_publisher+0xa4>
 8010976:	b118      	cbz	r0, 8010980 <rmw_destroy_publisher+0xa4>
 8010978:	4628      	mov	r0, r5
 801097a:	f000 fa5f 	bl	8010e3c <rmw_uxrce_fini_publisher_memory>
 801097e:	e7b7      	b.n	80108f0 <rmw_destroy_publisher+0x14>
 8010980:	2402      	movs	r4, #2
 8010982:	e7f9      	b.n	8010978 <rmw_destroy_publisher+0x9c>

08010984 <rmw_destroy_service>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	b128      	cbz	r0, 8010994 <rmw_destroy_service+0x10>
 8010988:	4604      	mov	r4, r0
 801098a:	6800      	ldr	r0, [r0, #0]
 801098c:	460d      	mov	r5, r1
 801098e:	f000 fc33 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 8010992:	b910      	cbnz	r0, 801099a <rmw_destroy_service+0x16>
 8010994:	2401      	movs	r4, #1
 8010996:	4620      	mov	r0, r4
 8010998:	bd70      	pop	{r4, r5, r6, pc}
 801099a:	6863      	ldr	r3, [r4, #4]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d0f9      	beq.n	8010994 <rmw_destroy_service+0x10>
 80109a0:	2d00      	cmp	r5, #0
 80109a2:	d0f7      	beq.n	8010994 <rmw_destroy_service+0x10>
 80109a4:	6828      	ldr	r0, [r5, #0]
 80109a6:	f000 fc27 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 80109aa:	2800      	cmp	r0, #0
 80109ac:	d0f2      	beq.n	8010994 <rmw_destroy_service+0x10>
 80109ae:	686e      	ldr	r6, [r5, #4]
 80109b0:	2e00      	cmp	r6, #0
 80109b2:	d0ef      	beq.n	8010994 <rmw_destroy_service+0x10>
 80109b4:	6864      	ldr	r4, [r4, #4]
 80109b6:	6932      	ldr	r2, [r6, #16]
 80109b8:	6920      	ldr	r0, [r4, #16]
 80109ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80109be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109c2:	6819      	ldr	r1, [r3, #0]
 80109c4:	f003 f914 	bl	8013bf0 <uxr_buffer_cancel_data>
 80109c8:	4602      	mov	r2, r0
 80109ca:	6920      	ldr	r0, [r4, #16]
 80109cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109d4:	f000 fb96 	bl	8011104 <run_xrce_session>
 80109d8:	6920      	ldr	r0, [r4, #16]
 80109da:	6932      	ldr	r2, [r6, #16]
 80109dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80109e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80109e4:	6819      	ldr	r1, [r3, #0]
 80109e6:	f002 febb 	bl	8013760 <uxr_buffer_delete_entity>
 80109ea:	4602      	mov	r2, r0
 80109ec:	6920      	ldr	r0, [r4, #16]
 80109ee:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80109f2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80109f6:	f000 fb85 	bl	8011104 <run_xrce_session>
 80109fa:	4603      	mov	r3, r0
 80109fc:	4628      	mov	r0, r5
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	bf14      	ite	ne
 8010a02:	2400      	movne	r4, #0
 8010a04:	2402      	moveq	r4, #2
 8010a06:	f000 fa45 	bl	8010e94 <rmw_uxrce_fini_service_memory>
 8010a0a:	e7c4      	b.n	8010996 <rmw_destroy_service+0x12>

08010a0c <rmw_destroy_subscription>:
 8010a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a10:	b128      	cbz	r0, 8010a1e <rmw_destroy_subscription+0x12>
 8010a12:	4604      	mov	r4, r0
 8010a14:	6800      	ldr	r0, [r0, #0]
 8010a16:	460d      	mov	r5, r1
 8010a18:	f000 fbee 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 8010a1c:	b918      	cbnz	r0, 8010a26 <rmw_destroy_subscription+0x1a>
 8010a1e:	2401      	movs	r4, #1
 8010a20:	4620      	mov	r0, r4
 8010a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a26:	6863      	ldr	r3, [r4, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d0f8      	beq.n	8010a1e <rmw_destroy_subscription+0x12>
 8010a2c:	fab5 f485 	clz	r4, r5
 8010a30:	0964      	lsrs	r4, r4, #5
 8010a32:	2d00      	cmp	r5, #0
 8010a34:	d0f3      	beq.n	8010a1e <rmw_destroy_subscription+0x12>
 8010a36:	6828      	ldr	r0, [r5, #0]
 8010a38:	f000 fbde 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d0ee      	beq.n	8010a1e <rmw_destroy_subscription+0x12>
 8010a40:	686e      	ldr	r6, [r5, #4]
 8010a42:	2e00      	cmp	r6, #0
 8010a44:	d0eb      	beq.n	8010a1e <rmw_destroy_subscription+0x12>
 8010a46:	6a37      	ldr	r7, [r6, #32]
 8010a48:	6972      	ldr	r2, [r6, #20]
 8010a4a:	6938      	ldr	r0, [r7, #16]
 8010a4c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a54:	6819      	ldr	r1, [r3, #0]
 8010a56:	f003 f8cb 	bl	8013bf0 <uxr_buffer_cancel_data>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	6938      	ldr	r0, [r7, #16]
 8010a5e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010a62:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010a66:	f000 fb4d 	bl	8011104 <run_xrce_session>
 8010a6a:	69f0      	ldr	r0, [r6, #28]
 8010a6c:	f009 ff48 	bl	801a900 <destroy_topic>
 8010a70:	6a33      	ldr	r3, [r6, #32]
 8010a72:	6972      	ldr	r2, [r6, #20]
 8010a74:	6918      	ldr	r0, [r3, #16]
 8010a76:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a7e:	6819      	ldr	r1, [r3, #0]
 8010a80:	f002 fe6e 	bl	8013760 <uxr_buffer_delete_entity>
 8010a84:	6a33      	ldr	r3, [r6, #32]
 8010a86:	4680      	mov	r8, r0
 8010a88:	6932      	ldr	r2, [r6, #16]
 8010a8a:	6918      	ldr	r0, [r3, #16]
 8010a8c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010a90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010a94:	6819      	ldr	r1, [r3, #0]
 8010a96:	f002 fe63 	bl	8013760 <uxr_buffer_delete_entity>
 8010a9a:	4606      	mov	r6, r0
 8010a9c:	6938      	ldr	r0, [r7, #16]
 8010a9e:	4642      	mov	r2, r8
 8010aa0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010aa4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010aa8:	f000 fb2c 	bl	8011104 <run_xrce_session>
 8010aac:	693f      	ldr	r7, [r7, #16]
 8010aae:	4632      	mov	r2, r6
 8010ab0:	4606      	mov	r6, r0
 8010ab2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010abc:	f000 fb22 	bl	8011104 <run_xrce_session>
 8010ac0:	b126      	cbz	r6, 8010acc <rmw_destroy_subscription+0xc0>
 8010ac2:	b118      	cbz	r0, 8010acc <rmw_destroy_subscription+0xc0>
 8010ac4:	4628      	mov	r0, r5
 8010ac6:	f000 f9cf 	bl	8010e68 <rmw_uxrce_fini_subscription_memory>
 8010aca:	e7a9      	b.n	8010a20 <rmw_destroy_subscription+0x14>
 8010acc:	2402      	movs	r4, #2
 8010ace:	e7f9      	b.n	8010ac4 <rmw_destroy_subscription+0xb8>

08010ad0 <rmw_uxrce_transport_init>:
 8010ad0:	b508      	push	{r3, lr}
 8010ad2:	b108      	cbz	r0, 8010ad8 <rmw_uxrce_transport_init+0x8>
 8010ad4:	f100 0210 	add.w	r2, r0, #16
 8010ad8:	b139      	cbz	r1, 8010aea <rmw_uxrce_transport_init+0x1a>
 8010ada:	6949      	ldr	r1, [r1, #20]
 8010adc:	4610      	mov	r0, r2
 8010ade:	f003 f81f 	bl	8013b20 <uxr_init_custom_transport>
 8010ae2:	f080 0001 	eor.w	r0, r0, #1
 8010ae6:	b2c0      	uxtb	r0, r0
 8010ae8:	bd08      	pop	{r3, pc}
 8010aea:	4b04      	ldr	r3, [pc, #16]	@ (8010afc <rmw_uxrce_transport_init+0x2c>)
 8010aec:	4610      	mov	r0, r2
 8010aee:	6859      	ldr	r1, [r3, #4]
 8010af0:	f003 f816 	bl	8013b20 <uxr_init_custom_transport>
 8010af4:	f080 0001 	eor.w	r0, r0, #1
 8010af8:	b2c0      	uxtb	r0, r0
 8010afa:	bd08      	pop	{r3, pc}
 8010afc:	2400f0ac 	.word	0x2400f0ac

08010b00 <rmw_uros_epoch_nanos>:
 8010b00:	4b05      	ldr	r3, [pc, #20]	@ (8010b18 <rmw_uros_epoch_nanos+0x18>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	b123      	cbz	r3, 8010b10 <rmw_uros_epoch_nanos+0x10>
 8010b06:	6898      	ldr	r0, [r3, #8]
 8010b08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b0c:	f003 ba7c 	b.w	8014008 <uxr_epoch_nanos>
 8010b10:	2000      	movs	r0, #0
 8010b12:	2100      	movs	r1, #0
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop
 8010b18:	24013a04 	.word	0x24013a04

08010b1c <rmw_uros_sync_session>:
 8010b1c:	b508      	push	{r3, lr}
 8010b1e:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <rmw_uros_sync_session+0x20>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	b14b      	cbz	r3, 8010b38 <rmw_uros_sync_session+0x1c>
 8010b24:	4601      	mov	r1, r0
 8010b26:	6898      	ldr	r0, [r3, #8]
 8010b28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b2c:	f003 feac 	bl	8014888 <uxr_sync_session>
 8010b30:	f080 0001 	eor.w	r0, r0, #1
 8010b34:	b2c0      	uxtb	r0, r0
 8010b36:	bd08      	pop	{r3, pc}
 8010b38:	2001      	movs	r0, #1
 8010b3a:	bd08      	pop	{r3, pc}
 8010b3c:	24013a04 	.word	0x24013a04

08010b40 <rmw_uxrce_init_service_memory>:
 8010b40:	b1e2      	cbz	r2, 8010b7c <rmw_uxrce_init_service_memory+0x3c>
 8010b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b46:	7b05      	ldrb	r5, [r0, #12]
 8010b48:	4606      	mov	r6, r0
 8010b4a:	b9ad      	cbnz	r5, 8010b78 <rmw_uxrce_init_service_memory+0x38>
 8010b4c:	23c8      	movs	r3, #200	@ 0xc8
 8010b4e:	4617      	mov	r7, r2
 8010b50:	460c      	mov	r4, r1
 8010b52:	46a8      	mov	r8, r5
 8010b54:	6083      	str	r3, [r0, #8]
 8010b56:	f240 1301 	movw	r3, #257	@ 0x101
 8010b5a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b5e:	8183      	strh	r3, [r0, #12]
 8010b60:	3501      	adds	r5, #1
 8010b62:	4621      	mov	r1, r4
 8010b64:	4630      	mov	r0, r6
 8010b66:	f009 fe1d 	bl	801a7a4 <put_memory>
 8010b6a:	42af      	cmp	r7, r5
 8010b6c:	60a4      	str	r4, [r4, #8]
 8010b6e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010b72:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8010b76:	d1f3      	bne.n	8010b60 <rmw_uxrce_init_service_memory+0x20>
 8010b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop

08010b80 <rmw_uxrce_init_client_memory>:
 8010b80:	b1e2      	cbz	r2, 8010bbc <rmw_uxrce_init_client_memory+0x3c>
 8010b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b86:	7b05      	ldrb	r5, [r0, #12]
 8010b88:	4606      	mov	r6, r0
 8010b8a:	b9ad      	cbnz	r5, 8010bb8 <rmw_uxrce_init_client_memory+0x38>
 8010b8c:	23c8      	movs	r3, #200	@ 0xc8
 8010b8e:	4617      	mov	r7, r2
 8010b90:	460c      	mov	r4, r1
 8010b92:	46a8      	mov	r8, r5
 8010b94:	6083      	str	r3, [r0, #8]
 8010b96:	f240 1301 	movw	r3, #257	@ 0x101
 8010b9a:	e9c0 5500 	strd	r5, r5, [r0]
 8010b9e:	8183      	strh	r3, [r0, #12]
 8010ba0:	3501      	adds	r5, #1
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f009 fdfd 	bl	801a7a4 <put_memory>
 8010baa:	42af      	cmp	r7, r5
 8010bac:	60a4      	str	r4, [r4, #8]
 8010bae:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8010bb2:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8010bb6:	d1f3      	bne.n	8010ba0 <rmw_uxrce_init_client_memory+0x20>
 8010bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop

08010bc0 <rmw_uxrce_init_publisher_memory>:
 8010bc0:	b1e2      	cbz	r2, 8010bfc <rmw_uxrce_init_publisher_memory+0x3c>
 8010bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc6:	7b05      	ldrb	r5, [r0, #12]
 8010bc8:	4606      	mov	r6, r0
 8010bca:	b9ad      	cbnz	r5, 8010bf8 <rmw_uxrce_init_publisher_memory+0x38>
 8010bcc:	23d8      	movs	r3, #216	@ 0xd8
 8010bce:	4617      	mov	r7, r2
 8010bd0:	460c      	mov	r4, r1
 8010bd2:	46a8      	mov	r8, r5
 8010bd4:	6083      	str	r3, [r0, #8]
 8010bd6:	f240 1301 	movw	r3, #257	@ 0x101
 8010bda:	e9c0 5500 	strd	r5, r5, [r0]
 8010bde:	8183      	strh	r3, [r0, #12]
 8010be0:	3501      	adds	r5, #1
 8010be2:	4621      	mov	r1, r4
 8010be4:	4630      	mov	r0, r6
 8010be6:	f009 fddd 	bl	801a7a4 <put_memory>
 8010bea:	42af      	cmp	r7, r5
 8010bec:	60a4      	str	r4, [r4, #8]
 8010bee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010bf2:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8010bf6:	d1f3      	bne.n	8010be0 <rmw_uxrce_init_publisher_memory+0x20>
 8010bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop

08010c00 <rmw_uxrce_init_subscription_memory>:
 8010c00:	b1e2      	cbz	r2, 8010c3c <rmw_uxrce_init_subscription_memory+0x3c>
 8010c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c06:	7b05      	ldrb	r5, [r0, #12]
 8010c08:	4606      	mov	r6, r0
 8010c0a:	b9ad      	cbnz	r5, 8010c38 <rmw_uxrce_init_subscription_memory+0x38>
 8010c0c:	23d8      	movs	r3, #216	@ 0xd8
 8010c0e:	4617      	mov	r7, r2
 8010c10:	460c      	mov	r4, r1
 8010c12:	46a8      	mov	r8, r5
 8010c14:	6083      	str	r3, [r0, #8]
 8010c16:	f240 1301 	movw	r3, #257	@ 0x101
 8010c1a:	e9c0 5500 	strd	r5, r5, [r0]
 8010c1e:	8183      	strh	r3, [r0, #12]
 8010c20:	3501      	adds	r5, #1
 8010c22:	4621      	mov	r1, r4
 8010c24:	4630      	mov	r0, r6
 8010c26:	f009 fdbd 	bl	801a7a4 <put_memory>
 8010c2a:	42af      	cmp	r7, r5
 8010c2c:	60a4      	str	r4, [r4, #8]
 8010c2e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8010c32:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8010c36:	d1f3      	bne.n	8010c20 <rmw_uxrce_init_subscription_memory+0x20>
 8010c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop

08010c40 <rmw_uxrce_init_node_memory>:
 8010c40:	b1e2      	cbz	r2, 8010c7c <rmw_uxrce_init_node_memory+0x3c>
 8010c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c46:	7b05      	ldrb	r5, [r0, #12]
 8010c48:	4606      	mov	r6, r0
 8010c4a:	b9ad      	cbnz	r5, 8010c78 <rmw_uxrce_init_node_memory+0x38>
 8010c4c:	23a4      	movs	r3, #164	@ 0xa4
 8010c4e:	4617      	mov	r7, r2
 8010c50:	460c      	mov	r4, r1
 8010c52:	46a8      	mov	r8, r5
 8010c54:	6083      	str	r3, [r0, #8]
 8010c56:	f240 1301 	movw	r3, #257	@ 0x101
 8010c5a:	e9c0 5500 	strd	r5, r5, [r0]
 8010c5e:	8183      	strh	r3, [r0, #12]
 8010c60:	3501      	adds	r5, #1
 8010c62:	4621      	mov	r1, r4
 8010c64:	4630      	mov	r0, r6
 8010c66:	f009 fd9d 	bl	801a7a4 <put_memory>
 8010c6a:	42af      	cmp	r7, r5
 8010c6c:	60a4      	str	r4, [r4, #8]
 8010c6e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8010c72:	f804 8c98 	strb.w	r8, [r4, #-152]
 8010c76:	d1f3      	bne.n	8010c60 <rmw_uxrce_init_node_memory+0x20>
 8010c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop

08010c80 <rmw_uxrce_init_session_memory>:
 8010c80:	b1ea      	cbz	r2, 8010cbe <rmw_uxrce_init_session_memory+0x3e>
 8010c82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c86:	7b05      	ldrb	r5, [r0, #12]
 8010c88:	4606      	mov	r6, r0
 8010c8a:	b9b5      	cbnz	r5, 8010cba <rmw_uxrce_init_session_memory+0x3a>
 8010c8c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8010c90:	f240 1301 	movw	r3, #257	@ 0x101
 8010c94:	4617      	mov	r7, r2
 8010c96:	460c      	mov	r4, r1
 8010c98:	46a9      	mov	r9, r5
 8010c9a:	f8c0 8008 	str.w	r8, [r0, #8]
 8010c9e:	8183      	strh	r3, [r0, #12]
 8010ca0:	e9c0 5500 	strd	r5, r5, [r0]
 8010ca4:	3501      	adds	r5, #1
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f009 fd7b 	bl	801a7a4 <put_memory>
 8010cae:	42af      	cmp	r7, r5
 8010cb0:	60a4      	str	r4, [r4, #8]
 8010cb2:	f884 900c 	strb.w	r9, [r4, #12]
 8010cb6:	4444      	add	r4, r8
 8010cb8:	d1f4      	bne.n	8010ca4 <rmw_uxrce_init_session_memory+0x24>
 8010cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cbe:	4770      	bx	lr

08010cc0 <rmw_uxrce_init_topic_memory>:
 8010cc0:	b1e2      	cbz	r2, 8010cfc <rmw_uxrce_init_topic_memory+0x3c>
 8010cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc6:	7b05      	ldrb	r5, [r0, #12]
 8010cc8:	4606      	mov	r6, r0
 8010cca:	b9ad      	cbnz	r5, 8010cf8 <rmw_uxrce_init_topic_memory+0x38>
 8010ccc:	231c      	movs	r3, #28
 8010cce:	4617      	mov	r7, r2
 8010cd0:	460c      	mov	r4, r1
 8010cd2:	46a8      	mov	r8, r5
 8010cd4:	6083      	str	r3, [r0, #8]
 8010cd6:	f240 1301 	movw	r3, #257	@ 0x101
 8010cda:	e9c0 5500 	strd	r5, r5, [r0]
 8010cde:	8183      	strh	r3, [r0, #12]
 8010ce0:	3501      	adds	r5, #1
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	4630      	mov	r0, r6
 8010ce6:	f009 fd5d 	bl	801a7a4 <put_memory>
 8010cea:	42af      	cmp	r7, r5
 8010cec:	60a4      	str	r4, [r4, #8]
 8010cee:	f104 041c 	add.w	r4, r4, #28
 8010cf2:	f804 8c10 	strb.w	r8, [r4, #-16]
 8010cf6:	d1f3      	bne.n	8010ce0 <rmw_uxrce_init_topic_memory+0x20>
 8010cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop

08010d00 <rmw_uxrce_init_static_input_buffer_memory>:
 8010d00:	b1ea      	cbz	r2, 8010d3e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8010d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d06:	7b05      	ldrb	r5, [r0, #12]
 8010d08:	4606      	mov	r6, r0
 8010d0a:	b9b5      	cbnz	r5, 8010d3a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010d0c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010d10:	4617      	mov	r7, r2
 8010d12:	460c      	mov	r4, r1
 8010d14:	46a8      	mov	r8, r5
 8010d16:	6083      	str	r3, [r0, #8]
 8010d18:	f240 1301 	movw	r3, #257	@ 0x101
 8010d1c:	e9c0 5500 	strd	r5, r5, [r0]
 8010d20:	8183      	strh	r3, [r0, #12]
 8010d22:	3501      	adds	r5, #1
 8010d24:	4621      	mov	r1, r4
 8010d26:	4630      	mov	r0, r6
 8010d28:	f009 fd3c 	bl	801a7a4 <put_memory>
 8010d2c:	42af      	cmp	r7, r5
 8010d2e:	60a4      	str	r4, [r4, #8]
 8010d30:	f884 800c 	strb.w	r8, [r4, #12]
 8010d34:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010d38:	d1f3      	bne.n	8010d22 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d3e:	4770      	bx	lr

08010d40 <rmw_uxrce_init_init_options_impl_memory>:
 8010d40:	b1e2      	cbz	r2, 8010d7c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8010d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d46:	7b05      	ldrb	r5, [r0, #12]
 8010d48:	4606      	mov	r6, r0
 8010d4a:	b9ad      	cbnz	r5, 8010d78 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010d4c:	232c      	movs	r3, #44	@ 0x2c
 8010d4e:	4617      	mov	r7, r2
 8010d50:	460c      	mov	r4, r1
 8010d52:	46a8      	mov	r8, r5
 8010d54:	6083      	str	r3, [r0, #8]
 8010d56:	f240 1301 	movw	r3, #257	@ 0x101
 8010d5a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d5e:	8183      	strh	r3, [r0, #12]
 8010d60:	3501      	adds	r5, #1
 8010d62:	4621      	mov	r1, r4
 8010d64:	4630      	mov	r0, r6
 8010d66:	f009 fd1d 	bl	801a7a4 <put_memory>
 8010d6a:	42af      	cmp	r7, r5
 8010d6c:	60a4      	str	r4, [r4, #8]
 8010d6e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8010d72:	f804 8c20 	strb.w	r8, [r4, #-32]
 8010d76:	d1f3      	bne.n	8010d60 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop

08010d80 <rmw_uxrce_init_wait_set_memory>:
 8010d80:	b1e2      	cbz	r2, 8010dbc <rmw_uxrce_init_wait_set_memory+0x3c>
 8010d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d86:	7b05      	ldrb	r5, [r0, #12]
 8010d88:	4606      	mov	r6, r0
 8010d8a:	b9ad      	cbnz	r5, 8010db8 <rmw_uxrce_init_wait_set_memory+0x38>
 8010d8c:	231c      	movs	r3, #28
 8010d8e:	4617      	mov	r7, r2
 8010d90:	460c      	mov	r4, r1
 8010d92:	46a8      	mov	r8, r5
 8010d94:	6083      	str	r3, [r0, #8]
 8010d96:	f240 1301 	movw	r3, #257	@ 0x101
 8010d9a:	e9c0 5500 	strd	r5, r5, [r0]
 8010d9e:	8183      	strh	r3, [r0, #12]
 8010da0:	3501      	adds	r5, #1
 8010da2:	4621      	mov	r1, r4
 8010da4:	4630      	mov	r0, r6
 8010da6:	f009 fcfd 	bl	801a7a4 <put_memory>
 8010daa:	42af      	cmp	r7, r5
 8010dac:	60a4      	str	r4, [r4, #8]
 8010dae:	f104 041c 	add.w	r4, r4, #28
 8010db2:	f804 8c10 	strb.w	r8, [r4, #-16]
 8010db6:	d1f3      	bne.n	8010da0 <rmw_uxrce_init_wait_set_memory+0x20>
 8010db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop

08010dc0 <rmw_uxrce_init_guard_condition_memory>:
 8010dc0:	b1e2      	cbz	r2, 8010dfc <rmw_uxrce_init_guard_condition_memory+0x3c>
 8010dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc6:	7b05      	ldrb	r5, [r0, #12]
 8010dc8:	4606      	mov	r6, r0
 8010dca:	b9ad      	cbnz	r5, 8010df8 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010dcc:	2320      	movs	r3, #32
 8010dce:	4617      	mov	r7, r2
 8010dd0:	460c      	mov	r4, r1
 8010dd2:	46a8      	mov	r8, r5
 8010dd4:	6083      	str	r3, [r0, #8]
 8010dd6:	f240 1301 	movw	r3, #257	@ 0x101
 8010dda:	e9c0 5500 	strd	r5, r5, [r0]
 8010dde:	8183      	strh	r3, [r0, #12]
 8010de0:	3501      	adds	r5, #1
 8010de2:	4621      	mov	r1, r4
 8010de4:	4630      	mov	r0, r6
 8010de6:	f009 fcdd 	bl	801a7a4 <put_memory>
 8010dea:	42af      	cmp	r7, r5
 8010dec:	60a4      	str	r4, [r4, #8]
 8010dee:	f104 0420 	add.w	r4, r4, #32
 8010df2:	f804 8c14 	strb.w	r8, [r4, #-20]
 8010df6:	d1f3      	bne.n	8010de0 <rmw_uxrce_init_guard_condition_memory+0x20>
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <rmw_uxrce_fini_session_memory>:
 8010e00:	4601      	mov	r1, r0
 8010e02:	4801      	ldr	r0, [pc, #4]	@ (8010e08 <rmw_uxrce_fini_session_memory+0x8>)
 8010e04:	f009 bcce 	b.w	801a7a4 <put_memory>
 8010e08:	24013a04 	.word	0x24013a04

08010e0c <rmw_uxrce_fini_node_memory>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4604      	mov	r4, r0
 8010e10:	6800      	ldr	r0, [r0, #0]
 8010e12:	b128      	cbz	r0, 8010e20 <rmw_uxrce_fini_node_memory+0x14>
 8010e14:	4b07      	ldr	r3, [pc, #28]	@ (8010e34 <rmw_uxrce_fini_node_memory+0x28>)
 8010e16:	6819      	ldr	r1, [r3, #0]
 8010e18:	f7ef fa62 	bl	80002e0 <strcmp>
 8010e1c:	b940      	cbnz	r0, 8010e30 <rmw_uxrce_fini_node_memory+0x24>
 8010e1e:	6020      	str	r0, [r4, #0]
 8010e20:	6861      	ldr	r1, [r4, #4]
 8010e22:	b129      	cbz	r1, 8010e30 <rmw_uxrce_fini_node_memory+0x24>
 8010e24:	2500      	movs	r5, #0
 8010e26:	4804      	ldr	r0, [pc, #16]	@ (8010e38 <rmw_uxrce_fini_node_memory+0x2c>)
 8010e28:	610d      	str	r5, [r1, #16]
 8010e2a:	f009 fcbb 	bl	801a7a4 <put_memory>
 8010e2e:	6065      	str	r5, [r4, #4]
 8010e30:	bd38      	pop	{r3, r4, r5, pc}
 8010e32:	bf00      	nop
 8010e34:	0801eb64 	.word	0x0801eb64
 8010e38:	240139d4 	.word	0x240139d4

08010e3c <rmw_uxrce_fini_publisher_memory>:
 8010e3c:	b510      	push	{r4, lr}
 8010e3e:	4604      	mov	r4, r0
 8010e40:	6800      	ldr	r0, [r0, #0]
 8010e42:	b128      	cbz	r0, 8010e50 <rmw_uxrce_fini_publisher_memory+0x14>
 8010e44:	4b06      	ldr	r3, [pc, #24]	@ (8010e60 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010e46:	6819      	ldr	r1, [r3, #0]
 8010e48:	f7ef fa4a 	bl	80002e0 <strcmp>
 8010e4c:	b938      	cbnz	r0, 8010e5e <rmw_uxrce_fini_publisher_memory+0x22>
 8010e4e:	6020      	str	r0, [r4, #0]
 8010e50:	6861      	ldr	r1, [r4, #4]
 8010e52:	b121      	cbz	r1, 8010e5e <rmw_uxrce_fini_publisher_memory+0x22>
 8010e54:	4803      	ldr	r0, [pc, #12]	@ (8010e64 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010e56:	f009 fca5 	bl	801a7a4 <put_memory>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	6063      	str	r3, [r4, #4]
 8010e5e:	bd10      	pop	{r4, pc}
 8010e60:	0801eb64 	.word	0x0801eb64
 8010e64:	240139e4 	.word	0x240139e4

08010e68 <rmw_uxrce_fini_subscription_memory>:
 8010e68:	b510      	push	{r4, lr}
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	6800      	ldr	r0, [r0, #0]
 8010e6e:	b128      	cbz	r0, 8010e7c <rmw_uxrce_fini_subscription_memory+0x14>
 8010e70:	4b06      	ldr	r3, [pc, #24]	@ (8010e8c <rmw_uxrce_fini_subscription_memory+0x24>)
 8010e72:	6819      	ldr	r1, [r3, #0]
 8010e74:	f7ef fa34 	bl	80002e0 <strcmp>
 8010e78:	b938      	cbnz	r0, 8010e8a <rmw_uxrce_fini_subscription_memory+0x22>
 8010e7a:	6020      	str	r0, [r4, #0]
 8010e7c:	6861      	ldr	r1, [r4, #4]
 8010e7e:	b121      	cbz	r1, 8010e8a <rmw_uxrce_fini_subscription_memory+0x22>
 8010e80:	4803      	ldr	r0, [pc, #12]	@ (8010e90 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010e82:	f009 fc8f 	bl	801a7a4 <put_memory>
 8010e86:	2300      	movs	r3, #0
 8010e88:	6063      	str	r3, [r4, #4]
 8010e8a:	bd10      	pop	{r4, pc}
 8010e8c:	0801eb64 	.word	0x0801eb64
 8010e90:	24013a24 	.word	0x24013a24

08010e94 <rmw_uxrce_fini_service_memory>:
 8010e94:	b510      	push	{r4, lr}
 8010e96:	4604      	mov	r4, r0
 8010e98:	6800      	ldr	r0, [r0, #0]
 8010e9a:	b128      	cbz	r0, 8010ea8 <rmw_uxrce_fini_service_memory+0x14>
 8010e9c:	4b06      	ldr	r3, [pc, #24]	@ (8010eb8 <rmw_uxrce_fini_service_memory+0x24>)
 8010e9e:	6819      	ldr	r1, [r3, #0]
 8010ea0:	f7ef fa1e 	bl	80002e0 <strcmp>
 8010ea4:	b938      	cbnz	r0, 8010eb6 <rmw_uxrce_fini_service_memory+0x22>
 8010ea6:	6020      	str	r0, [r4, #0]
 8010ea8:	6861      	ldr	r1, [r4, #4]
 8010eaa:	b121      	cbz	r1, 8010eb6 <rmw_uxrce_fini_service_memory+0x22>
 8010eac:	4803      	ldr	r0, [pc, #12]	@ (8010ebc <rmw_uxrce_fini_service_memory+0x28>)
 8010eae:	f009 fc79 	bl	801a7a4 <put_memory>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	6063      	str	r3, [r4, #4]
 8010eb6:	bd10      	pop	{r4, pc}
 8010eb8:	0801eb64 	.word	0x0801eb64
 8010ebc:	240139f4 	.word	0x240139f4

08010ec0 <rmw_uxrce_fini_client_memory>:
 8010ec0:	b510      	push	{r4, lr}
 8010ec2:	4604      	mov	r4, r0
 8010ec4:	6800      	ldr	r0, [r0, #0]
 8010ec6:	b128      	cbz	r0, 8010ed4 <rmw_uxrce_fini_client_memory+0x14>
 8010ec8:	4b06      	ldr	r3, [pc, #24]	@ (8010ee4 <rmw_uxrce_fini_client_memory+0x24>)
 8010eca:	6819      	ldr	r1, [r3, #0]
 8010ecc:	f7ef fa08 	bl	80002e0 <strcmp>
 8010ed0:	b938      	cbnz	r0, 8010ee2 <rmw_uxrce_fini_client_memory+0x22>
 8010ed2:	6020      	str	r0, [r4, #0]
 8010ed4:	6861      	ldr	r1, [r4, #4]
 8010ed6:	b121      	cbz	r1, 8010ee2 <rmw_uxrce_fini_client_memory+0x22>
 8010ed8:	4803      	ldr	r0, [pc, #12]	@ (8010ee8 <rmw_uxrce_fini_client_memory+0x28>)
 8010eda:	f009 fc63 	bl	801a7a4 <put_memory>
 8010ede:	2300      	movs	r3, #0
 8010ee0:	6063      	str	r3, [r4, #4]
 8010ee2:	bd10      	pop	{r4, pc}
 8010ee4:	0801eb64 	.word	0x0801eb64
 8010ee8:	2400f104 	.word	0x2400f104

08010eec <rmw_uxrce_fini_topic_memory>:
 8010eec:	b510      	push	{r4, lr}
 8010eee:	4604      	mov	r4, r0
 8010ef0:	4803      	ldr	r0, [pc, #12]	@ (8010f00 <rmw_uxrce_fini_topic_memory+0x14>)
 8010ef2:	4621      	mov	r1, r4
 8010ef4:	f009 fc56 	bl	801a7a4 <put_memory>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	61a3      	str	r3, [r4, #24]
 8010efc:	bd10      	pop	{r4, pc}
 8010efe:	bf00      	nop
 8010f00:	24013a34 	.word	0x24013a34

08010f04 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010f04:	b082      	sub	sp, #8
 8010f06:	492b      	ldr	r1, [pc, #172]	@ (8010fb4 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010f08:	b530      	push	{r4, r5, lr}
 8010f0a:	680d      	ldr	r5, [r1, #0]
 8010f0c:	ac03      	add	r4, sp, #12
 8010f0e:	e884 000c 	stmia.w	r4, {r2, r3}
 8010f12:	461c      	mov	r4, r3
 8010f14:	2d00      	cmp	r5, #0
 8010f16:	d04b      	beq.n	8010fb0 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8010f18:	462b      	mov	r3, r5
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	689a      	ldr	r2, [r3, #8]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8010f24:	4290      	cmp	r0, r2
 8010f26:	bf08      	it	eq
 8010f28:	3101      	addeq	r1, #1
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1f6      	bne.n	8010f1c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010f2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010f32:	2b02      	cmp	r3, #2
 8010f34:	d029      	beq.n	8010f8a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010f36:	d820      	bhi.n	8010f7a <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8010f38:	428c      	cmp	r4, r1
 8010f3a:	d828      	bhi.n	8010f8e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010f3c:	fab4 f284 	clz	r2, r4
 8010f40:	0952      	lsrs	r2, r2, #5
 8010f42:	b324      	cbz	r4, 8010f8e <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010f44:	b1dd      	cbz	r5, 8010f7e <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8010f46:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010f4a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010f4e:	e001      	b.n	8010f54 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010f50:	686d      	ldr	r5, [r5, #4]
 8010f52:	b1ad      	cbz	r5, 8010f80 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010f54:	68ab      	ldr	r3, [r5, #8]
 8010f56:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 8010f5a:	4288      	cmp	r0, r1
 8010f5c:	d1f8      	bne.n	8010f50 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f5e:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 8010f62:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8010f66:	4561      	cmp	r1, ip
 8010f68:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010f6c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8010f70:	daee      	bge.n	8010f50 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f72:	468c      	mov	ip, r1
 8010f74:	461c      	mov	r4, r3
 8010f76:	462a      	mov	r2, r5
 8010f78:	e7ea      	b.n	8010f50 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8010f7a:	2b03      	cmp	r3, #3
 8010f7c:	d0dc      	beq.n	8010f38 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8010f7e:	2200      	movs	r2, #0
 8010f80:	4610      	mov	r0, r2
 8010f82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f86:	b002      	add	sp, #8
 8010f88:	4770      	bx	lr
 8010f8a:	428c      	cmp	r4, r1
 8010f8c:	d905      	bls.n	8010f9a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8010f8e:	4809      	ldr	r0, [pc, #36]	@ (8010fb4 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f94:	b002      	add	sp, #8
 8010f96:	f009 bbf5 	b.w	801a784 <get_memory>
 8010f9a:	fab4 f284 	clz	r2, r4
 8010f9e:	0952      	lsrs	r2, r2, #5
 8010fa0:	2c00      	cmp	r4, #0
 8010fa2:	d1ed      	bne.n	8010f80 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8010fa4:	4803      	ldr	r0, [pc, #12]	@ (8010fb4 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010fa6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010faa:	b002      	add	sp, #8
 8010fac:	f009 bbea 	b.w	801a784 <get_memory>
 8010fb0:	4629      	mov	r1, r5
 8010fb2:	e7bc      	b.n	8010f2e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010fb4:	24013a14 	.word	0x24013a14

08010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010fb8:	4b12      	ldr	r3, [pc, #72]	@ (8011004 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	b530      	push	{r4, r5, lr}
 8010fbe:	b1f3      	cbz	r3, 8010ffe <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010fc0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8010fc4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010fc8:	2400      	movs	r4, #0
 8010fca:	e001      	b.n	8010fd0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	b1a3      	cbz	r3, 8010ffa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010fd0:	689a      	ldr	r2, [r3, #8]
 8010fd2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010fd6:	4288      	cmp	r0, r1
 8010fd8:	d1f8      	bne.n	8010fcc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010fda:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010fde:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 8010fe2:	4571      	cmp	r1, lr
 8010fe4:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010fe8:	eb72 050c 	sbcs.w	r5, r2, ip
 8010fec:	daee      	bge.n	8010fcc <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010fee:	461c      	mov	r4, r3
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	468e      	mov	lr, r1
 8010ff4:	4694      	mov	ip, r2
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d1ea      	bne.n	8010fd0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	bd30      	pop	{r4, r5, pc}
 8010ffe:	461c      	mov	r4, r3
 8011000:	4620      	mov	r0, r4
 8011002:	bd30      	pop	{r4, r5, pc}
 8011004:	24013a14 	.word	0x24013a14

08011008 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011008:	4b3d      	ldr	r3, [pc, #244]	@ (8011100 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801100a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100e:	681f      	ldr	r7, [r3, #0]
 8011010:	ed2d 8b06 	vpush	{d8-d10}
 8011014:	b08d      	sub	sp, #52	@ 0x34
 8011016:	f7ff fd73 	bl	8010b00 <rmw_uros_epoch_nanos>
 801101a:	2f00      	cmp	r7, #0
 801101c:	d05d      	beq.n	80110da <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801101e:	46b8      	mov	r8, r7
 8011020:	4681      	mov	r9, r0
 8011022:	468a      	mov	sl, r1
 8011024:	ac04      	add	r4, sp, #16
 8011026:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801102a:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801102e:	2b04      	cmp	r3, #4
 8011030:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 80110e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011034:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 80110f0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011038:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 80110f8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801103c:	d03f      	beq.n	80110be <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801103e:	2b05      	cmp	r3, #5
 8011040:	d044      	beq.n	80110cc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011042:	2b03      	cmp	r3, #3
 8011044:	d03b      	beq.n	80110be <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011046:	ed8d 8b04 	vstr	d8, [sp, #16]
 801104a:	ed8d ab06 	vstr	d10, [sp, #24]
 801104e:	ab08      	add	r3, sp, #32
 8011050:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011054:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801105a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801105e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011062:	f009 f8c9 	bl	801a1f8 <rmw_time_equal>
 8011066:	b118      	cbz	r0, 8011070 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011068:	ed8d 9b04 	vstr	d9, [sp, #16]
 801106c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011070:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011074:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8011078:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801107c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011080:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011084:	f009 f90e 	bl	801a2a4 <rmw_time_total_nsec>
 8011088:	1830      	adds	r0, r6, r0
 801108a:	eb47 0101 	adc.w	r1, r7, r1
 801108e:	4548      	cmp	r0, r9
 8011090:	eb71 030a 	sbcs.w	r3, r1, sl
 8011094:	db05      	blt.n	80110a2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8011096:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801109a:	4591      	cmp	r9, r2
 801109c:	eb7a 0303 	sbcs.w	r3, sl, r3
 80110a0:	da03      	bge.n	80110aa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80110a2:	4641      	mov	r1, r8
 80110a4:	4816      	ldr	r0, [pc, #88]	@ (8011100 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80110a6:	f009 fb7d 	bl	801a7a4 <put_memory>
 80110aa:	f1bb 0f00 	cmp.w	fp, #0
 80110ae:	d014      	beq.n	80110da <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80110b0:	46d8      	mov	r8, fp
 80110b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80110b6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	d1bf      	bne.n	801103e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80110be:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80110c2:	3340      	adds	r3, #64	@ 0x40
 80110c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80110ca:	e7c0      	b.n	801104e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80110cc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80110d0:	3348      	adds	r3, #72	@ 0x48
 80110d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80110d8:	e7b9      	b.n	801104e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80110da:	b00d      	add	sp, #52	@ 0x34
 80110dc:	ecbd 8b06 	vpop	{d8-d10}
 80110e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e4:	f3af 8000 	nop.w
	...
 80110f0:	00000001 	.word	0x00000001
 80110f4:	00000000 	.word	0x00000000
 80110f8:	0000001e 	.word	0x0000001e
 80110fc:	00000000 	.word	0x00000000
 8011100:	24013a14 	.word	0x24013a14

08011104 <run_xrce_session>:
 8011104:	b510      	push	{r4, lr}
 8011106:	788c      	ldrb	r4, [r1, #2]
 8011108:	b086      	sub	sp, #24
 801110a:	2c01      	cmp	r4, #1
 801110c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8011110:	d00c      	beq.n	801112c <run_xrce_session+0x28>
 8011112:	2401      	movs	r4, #1
 8011114:	4619      	mov	r1, r3
 8011116:	f10d 020e 	add.w	r2, sp, #14
 801111a:	f10d 0317 	add.w	r3, sp, #23
 801111e:	9400      	str	r4, [sp, #0]
 8011120:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011124:	f003 fb58 	bl	80147d8 <uxr_run_session_until_all_status>
 8011128:	b006      	add	sp, #24
 801112a:	bd10      	pop	{r4, pc}
 801112c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011130:	f002 ff74 	bl	801401c <uxr_flash_output_streams>
 8011134:	4620      	mov	r0, r4
 8011136:	b006      	add	sp, #24
 8011138:	bd10      	pop	{r4, pc}
 801113a:	bf00      	nop

0801113c <convert_qos_profile>:
 801113c:	7a4a      	ldrb	r2, [r1, #9]
 801113e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8011142:	2a02      	cmp	r2, #2
 8011144:	bf18      	it	ne
 8011146:	2200      	movne	r2, #0
 8011148:	7002      	strb	r2, [r0, #0]
 801114a:	f1ac 0202 	sub.w	r2, ip, #2
 801114e:	fab2 f282 	clz	r2, r2
 8011152:	0952      	lsrs	r2, r2, #5
 8011154:	7042      	strb	r2, [r0, #1]
 8011156:	780a      	ldrb	r2, [r1, #0]
 8011158:	8889      	ldrh	r1, [r1, #4]
 801115a:	f1a2 0202 	sub.w	r2, r2, #2
 801115e:	8081      	strh	r1, [r0, #4]
 8011160:	fab2 f282 	clz	r2, r2
 8011164:	0952      	lsrs	r2, r2, #5
 8011166:	7082      	strb	r2, [r0, #2]
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <generate_type_name>:
 801116c:	2300      	movs	r3, #0
 801116e:	b530      	push	{r4, r5, lr}
 8011170:	700b      	strb	r3, [r1, #0]
 8011172:	b087      	sub	sp, #28
 8011174:	6803      	ldr	r3, [r0, #0]
 8011176:	4614      	mov	r4, r2
 8011178:	b1bb      	cbz	r3, 80111aa <generate_type_name+0x3e>
 801117a:	4a0e      	ldr	r2, [pc, #56]	@ (80111b4 <generate_type_name+0x48>)
 801117c:	4615      	mov	r5, r2
 801117e:	9500      	str	r5, [sp, #0]
 8011180:	9203      	str	r2, [sp, #12]
 8011182:	4d0d      	ldr	r5, [pc, #52]	@ (80111b8 <generate_type_name+0x4c>)
 8011184:	6842      	ldr	r2, [r0, #4]
 8011186:	4608      	mov	r0, r1
 8011188:	490c      	ldr	r1, [pc, #48]	@ (80111bc <generate_type_name+0x50>)
 801118a:	9204      	str	r2, [sp, #16]
 801118c:	9105      	str	r1, [sp, #20]
 801118e:	9102      	str	r1, [sp, #8]
 8011190:	4621      	mov	r1, r4
 8011192:	4a0b      	ldr	r2, [pc, #44]	@ (80111c0 <generate_type_name+0x54>)
 8011194:	9501      	str	r5, [sp, #4]
 8011196:	f00b fd11 	bl	801cbbc <sniprintf>
 801119a:	2800      	cmp	r0, #0
 801119c:	bfa8      	it	ge
 801119e:	4284      	cmpge	r4, r0
 80111a0:	bfcc      	ite	gt
 80111a2:	2001      	movgt	r0, #1
 80111a4:	2000      	movle	r0, #0
 80111a6:	b007      	add	sp, #28
 80111a8:	bd30      	pop	{r4, r5, pc}
 80111aa:	4b06      	ldr	r3, [pc, #24]	@ (80111c4 <generate_type_name+0x58>)
 80111ac:	4a01      	ldr	r2, [pc, #4]	@ (80111b4 <generate_type_name+0x48>)
 80111ae:	461d      	mov	r5, r3
 80111b0:	e7e5      	b.n	801117e <generate_type_name+0x12>
 80111b2:	bf00      	nop
 80111b4:	0801df7c 	.word	0x0801df7c
 80111b8:	0801df94 	.word	0x0801df94
 80111bc:	0801df90 	.word	0x0801df90
 80111c0:	0801df80 	.word	0x0801df80
 80111c4:	0801ec08 	.word	0x0801ec08

080111c8 <generate_topic_name>:
 80111c8:	b530      	push	{r4, r5, lr}
 80111ca:	4614      	mov	r4, r2
 80111cc:	b083      	sub	sp, #12
 80111ce:	4605      	mov	r5, r0
 80111d0:	4b07      	ldr	r3, [pc, #28]	@ (80111f0 <generate_topic_name+0x28>)
 80111d2:	4a08      	ldr	r2, [pc, #32]	@ (80111f4 <generate_topic_name+0x2c>)
 80111d4:	4608      	mov	r0, r1
 80111d6:	9500      	str	r5, [sp, #0]
 80111d8:	4621      	mov	r1, r4
 80111da:	f00b fcef 	bl	801cbbc <sniprintf>
 80111de:	2800      	cmp	r0, #0
 80111e0:	bfa8      	it	ge
 80111e2:	4284      	cmpge	r4, r0
 80111e4:	bfcc      	ite	gt
 80111e6:	2001      	movgt	r0, #1
 80111e8:	2000      	movle	r0, #0
 80111ea:	b003      	add	sp, #12
 80111ec:	bd30      	pop	{r4, r5, pc}
 80111ee:	bf00      	nop
 80111f0:	0801dfa0 	.word	0x0801dfa0
 80111f4:	0801df98 	.word	0x0801df98

080111f8 <is_uxrce_rmw_identifier_valid>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	4604      	mov	r4, r0
 80111fc:	b140      	cbz	r0, 8011210 <is_uxrce_rmw_identifier_valid+0x18>
 80111fe:	f009 fb29 	bl	801a854 <rmw_get_implementation_identifier>
 8011202:	4601      	mov	r1, r0
 8011204:	4620      	mov	r0, r4
 8011206:	f7ef f86b 	bl	80002e0 <strcmp>
 801120a:	fab0 f080 	clz	r0, r0
 801120e:	0940      	lsrs	r0, r0, #5
 8011210:	bd10      	pop	{r4, pc}
 8011212:	bf00      	nop

08011214 <get_message_typesupport_handle>:
 8011214:	6883      	ldr	r3, [r0, #8]
 8011216:	4718      	bx	r3

08011218 <get_message_typesupport_handle_function>:
 8011218:	b510      	push	{r4, lr}
 801121a:	4604      	mov	r4, r0
 801121c:	6800      	ldr	r0, [r0, #0]
 801121e:	f7ef f85f 	bl	80002e0 <strcmp>
 8011222:	2800      	cmp	r0, #0
 8011224:	bf0c      	ite	eq
 8011226:	4620      	moveq	r0, r4
 8011228:	2000      	movne	r0, #0
 801122a:	bd10      	pop	{r4, pc}

0801122c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 801122c:	4b04      	ldr	r3, [pc, #16]	@ (8011240 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801122e:	681a      	ldr	r2, [r3, #0]
 8011230:	b10a      	cbz	r2, 8011236 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 8011232:	4803      	ldr	r0, [pc, #12]	@ (8011240 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 8011234:	4770      	bx	lr
 8011236:	4a03      	ldr	r2, [pc, #12]	@ (8011244 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 8011238:	4801      	ldr	r0, [pc, #4]	@ (8011240 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 801123a:	6812      	ldr	r2, [r2, #0]
 801123c:	601a      	str	r2, [r3, #0]
 801123e:	4770      	bx	lr
 8011240:	24000034 	.word	0x24000034
 8011244:	24000678 	.word	0x24000678

08011248 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011248:	4a02      	ldr	r2, [pc, #8]	@ (8011254 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 801124a:	4b03      	ldr	r3, [pc, #12]	@ (8011258 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 801124c:	6812      	ldr	r2, [r2, #0]
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	24000678 	.word	0x24000678
 8011258:	24000034 	.word	0x24000034

0801125c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 801125c:	4b04      	ldr	r3, [pc, #16]	@ (8011270 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	b10a      	cbz	r2, 8011266 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xa>
 8011262:	4803      	ldr	r0, [pc, #12]	@ (8011270 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 8011264:	4770      	bx	lr
 8011266:	4a03      	ldr	r2, [pc, #12]	@ (8011274 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x18>)
 8011268:	4801      	ldr	r0, [pc, #4]	@ (8011270 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x14>)
 801126a:	6812      	ldr	r2, [r2, #0]
 801126c:	601a      	str	r2, [r3, #0]
 801126e:	4770      	bx	lr
 8011270:	24000048 	.word	0x24000048
 8011274:	24000678 	.word	0x24000678

08011278 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 8011278:	4a02      	ldr	r2, [pc, #8]	@ (8011284 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0xc>)
 801127a:	4b03      	ldr	r3, [pc, #12]	@ (8011288 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x10>)
 801127c:	6812      	ldr	r2, [r2, #0]
 801127e:	601a      	str	r2, [r3, #0]
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	24000678 	.word	0x24000678
 8011288:	24000048 	.word	0x24000048

0801128c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 801128c:	2009      	movs	r0, #9
 801128e:	4770      	bx	lr

08011290 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 8011290:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop

08011298 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 8011298:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801129c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112a0:	e9c2 0100 	strd	r0, r1, [r2]
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop

080112a8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 80112a8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80112ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112b0:	e9c1 2300 	strd	r2, r3, [r1]
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop

080112b8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 80112b8:	f009 be98 	b.w	801afec <sensor_msgs__msg__Imu__init>

080112bc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 80112bc:	f009 beec 	b.w	801b098 <sensor_msgs__msg__Imu__fini>

080112c0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 80112c0:	2009      	movs	r0, #9
 80112c2:	4770      	bx	lr

080112c4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 80112c4:	2009      	movs	r0, #9
 80112c6:	4770      	bx	lr

080112c8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 80112c8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop

080112d0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 80112d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop

080112d8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 80112d8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop

080112e0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 80112e0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop

080112e8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 80112e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 80112f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80112f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112f8:	e9c2 0100 	strd	r0, r1, [r2]
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop

08011300 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 8011300:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011304:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011308:	e9c1 2300 	strd	r2, r3, [r1]
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop

08011310 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 8011310:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011318:	e9c2 0100 	strd	r0, r1, [r2]
 801131c:	4770      	bx	lr
 801131e:	bf00      	nop

08011320 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 8011320:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011324:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011328:	e9c1 2300 	strd	r2, r3, [r1]
 801132c:	4770      	bx	lr
 801132e:	bf00      	nop

08011330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 8011330:	b510      	push	{r4, lr}
 8011332:	4c0c      	ldr	r4, [pc, #48]	@ (8011364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 8011334:	f000 f9d8 	bl	80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011338:	60e0      	str	r0, [r4, #12]
 801133a:	f000 faff 	bl	801193c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801133e:	64a0      	str	r0, [r4, #72]	@ 0x48
 8011340:	f000 fb0e 	bl	8011960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011344:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 8011348:	f000 fb0a 	bl	8011960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801134c:	4b06      	ldr	r3, [pc, #24]	@ (8011368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801134e:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	b10a      	cbz	r2, 801135a <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 8011356:	4804      	ldr	r0, [pc, #16]	@ (8011368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 8011358:	bd10      	pop	{r4, pc}
 801135a:	4a04      	ldr	r2, [pc, #16]	@ (801136c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 801135c:	4802      	ldr	r0, [pc, #8]	@ (8011368 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 801135e:	6812      	ldr	r2, [r2, #0]
 8011360:	601a      	str	r2, [r3, #0]
 8011362:	bd10      	pop	{r4, pc}
 8011364:	24000054 	.word	0x24000054
 8011368:	240001f8 	.word	0x240001f8
 801136c:	2400067c 	.word	0x2400067c

08011370 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__size_function__MagneticField__magnetic_field_covariance>:
 8011370:	2009      	movs	r0, #9
 8011372:	4770      	bx	lr

08011374 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_const_function__MagneticField__magnetic_field_covariance>:
 8011374:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop

0801137c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__fetch_function__MagneticField__magnetic_field_covariance>:
 801137c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011384:	e9c2 0100 	strd	r0, r1, [r2]
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop

0801138c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__assign_function__MagneticField__magnetic_field_covariance>:
 801138c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011390:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8011394:	e9c1 2300 	strd	r2, r3, [r1]
 8011398:	4770      	bx	lr
 801139a:	bf00      	nop

0801139c <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_init_function>:
 801139c:	f009 be90 	b.w	801b0c0 <sensor_msgs__msg__MagneticField__init>

080113a0 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__MagneticField_fini_function>:
 80113a0:	f009 beb2 	b.w	801b108 <sensor_msgs__msg__MagneticField__fini>

080113a4 <sensor_msgs__msg__MagneticField__rosidl_typesupport_introspection_c__get_function__MagneticField__magnetic_field_covariance>:
 80113a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80113a8:	4770      	bx	lr
 80113aa:	bf00      	nop

080113ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 80113ac:	b510      	push	{r4, lr}
 80113ae:	4c08      	ldr	r4, [pc, #32]	@ (80113d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x24>)
 80113b0:	f000 f99a 	bl	80116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80113b4:	60e0      	str	r0, [r4, #12]
 80113b6:	f000 fad3 	bl	8011960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80113ba:	4b06      	ldr	r3, [pc, #24]	@ (80113d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80113bc:	64a0      	str	r0, [r4, #72]	@ 0x48
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	b10a      	cbz	r2, 80113c6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x1a>
 80113c2:	4804      	ldr	r0, [pc, #16]	@ (80113d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80113c4:	bd10      	pop	{r4, pc}
 80113c6:	4a04      	ldr	r2, [pc, #16]	@ (80113d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x2c>)
 80113c8:	4802      	ldr	r0, [pc, #8]	@ (80113d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x28>)
 80113ca:	6812      	ldr	r2, [r2, #0]
 80113cc:	601a      	str	r2, [r3, #0]
 80113ce:	bd10      	pop	{r4, pc}
 80113d0:	24000204 	.word	0x24000204
 80113d4:	240002b8 	.word	0x240002b8
 80113d8:	2400067c 	.word	0x2400067c

080113dc <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 80113dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e0:	4680      	mov	r8, r0
 80113e2:	460f      	mov	r7, r1
 80113e4:	f000 f9a4 	bl	8011730 <get_serialized_size_std_msgs__msg__Header>
 80113e8:	4604      	mov	r4, r0
 80113ea:	f108 0018 	add.w	r0, r8, #24
 80113ee:	443c      	add	r4, r7
 80113f0:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 80113f4:	4621      	mov	r1, r4
 80113f6:	f000 fac1 	bl	801197c <get_serialized_size_geometry_msgs__msg__Quaternion>
 80113fa:	4404      	add	r4, r0
 80113fc:	2108      	movs	r1, #8
 80113fe:	4620      	mov	r0, r4
 8011400:	f002 f8e6 	bl	80135d0 <ucdr_alignment>
 8011404:	4606      	mov	r6, r0
 8011406:	f108 0080 	add.w	r0, r8, #128	@ 0x80
 801140a:	3648      	adds	r6, #72	@ 0x48
 801140c:	4426      	add	r6, r4
 801140e:	4631      	mov	r1, r6
 8011410:	f000 fb64 	bl	8011adc <get_serialized_size_geometry_msgs__msg__Vector3>
 8011414:	1835      	adds	r5, r6, r0
 8011416:	2108      	movs	r1, #8
 8011418:	4628      	mov	r0, r5
 801141a:	f002 f8d9 	bl	80135d0 <ucdr_alignment>
 801141e:	4604      	mov	r4, r0
 8011420:	f108 00e0 	add.w	r0, r8, #224	@ 0xe0
 8011424:	3448      	adds	r4, #72	@ 0x48
 8011426:	4425      	add	r5, r4
 8011428:	4629      	mov	r1, r5
 801142a:	f000 fb57 	bl	8011adc <get_serialized_size_geometry_msgs__msg__Vector3>
 801142e:	4405      	add	r5, r0
 8011430:	2108      	movs	r1, #8
 8011432:	4628      	mov	r0, r5
 8011434:	f002 f8cc 	bl	80135d0 <ucdr_alignment>
 8011438:	4438      	add	r0, r7
 801143a:	4428      	add	r0, r5
 801143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011440 <get_serialized_size_sensor_msgs__msg__Imu>:
 8011440:	b108      	cbz	r0, 8011446 <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 8011442:	f7ff bfcb 	b.w	80113dc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011446:	4770      	bx	lr

08011448 <_Imu__get_serialized_size>:
 8011448:	b110      	cbz	r0, 8011450 <_Imu__get_serialized_size+0x8>
 801144a:	2100      	movs	r1, #0
 801144c:	f7ff bfc6 	b.w	80113dc <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop

08011454 <_Imu__cdr_deserialize>:
 8011454:	b538      	push	{r3, r4, r5, lr}
 8011456:	460c      	mov	r4, r1
 8011458:	2900      	cmp	r1, #0
 801145a:	d037      	beq.n	80114cc <_Imu__cdr_deserialize+0x78>
 801145c:	4605      	mov	r5, r0
 801145e:	f000 f9eb 	bl	8011838 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011462:	4603      	mov	r3, r0
 8011464:	4621      	mov	r1, r4
 8011466:	4628      	mov	r0, r5
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	4798      	blx	r3
 801146e:	f000 fb31 	bl	8011ad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8011472:	4603      	mov	r3, r0
 8011474:	f104 0118 	add.w	r1, r4, #24
 8011478:	4628      	mov	r0, r5
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	4798      	blx	r3
 8011480:	2209      	movs	r2, #9
 8011482:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011486:	4628      	mov	r0, r5
 8011488:	f000 fd3a 	bl	8011f00 <ucdr_deserialize_array_double>
 801148c:	f000 fbae 	bl	8011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011490:	4603      	mov	r3, r0
 8011492:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 8011496:	4628      	mov	r0, r5
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	68db      	ldr	r3, [r3, #12]
 801149c:	4798      	blx	r3
 801149e:	2209      	movs	r2, #9
 80114a0:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 80114a4:	4628      	mov	r0, r5
 80114a6:	f000 fd2b 	bl	8011f00 <ucdr_deserialize_array_double>
 80114aa:	f000 fb9f 	bl	8011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80114ae:	4603      	mov	r3, r0
 80114b0:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 80114b4:	4628      	mov	r0, r5
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	4798      	blx	r3
 80114bc:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80114c0:	4628      	mov	r0, r5
 80114c2:	2209      	movs	r2, #9
 80114c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114c8:	f000 bd1a 	b.w	8011f00 <ucdr_deserialize_array_double>
 80114cc:	4608      	mov	r0, r1
 80114ce:	bd38      	pop	{r3, r4, r5, pc}

080114d0 <_Imu__cdr_serialize>:
 80114d0:	2800      	cmp	r0, #0
 80114d2:	d039      	beq.n	8011548 <_Imu__cdr_serialize+0x78>
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	460d      	mov	r5, r1
 80114da:	f000 f9ad 	bl	8011838 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80114de:	4603      	mov	r3, r0
 80114e0:	4629      	mov	r1, r5
 80114e2:	4620      	mov	r0, r4
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	4798      	blx	r3
 80114ea:	f000 faf3 	bl	8011ad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4629      	mov	r1, r5
 80114f2:	f104 0018 	add.w	r0, r4, #24
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	689b      	ldr	r3, [r3, #8]
 80114fa:	4798      	blx	r3
 80114fc:	2209      	movs	r2, #9
 80114fe:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8011502:	4628      	mov	r0, r5
 8011504:	f000 fca8 	bl	8011e58 <ucdr_serialize_array_double>
 8011508:	f000 fb70 	bl	8011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801150c:	4603      	mov	r3, r0
 801150e:	4629      	mov	r1, r5
 8011510:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	689b      	ldr	r3, [r3, #8]
 8011518:	4798      	blx	r3
 801151a:	2209      	movs	r2, #9
 801151c:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 8011520:	4628      	mov	r0, r5
 8011522:	f000 fc99 	bl	8011e58 <ucdr_serialize_array_double>
 8011526:	f000 fb61 	bl	8011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801152a:	4603      	mov	r3, r0
 801152c:	4629      	mov	r1, r5
 801152e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	4798      	blx	r3
 8011538:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 801153c:	4628      	mov	r0, r5
 801153e:	2209      	movs	r2, #9
 8011540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011544:	f000 bc88 	b.w	8011e58 <ucdr_serialize_array_double>
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop

0801154c <max_serialized_size_sensor_msgs__msg__Imu>:
 801154c:	2301      	movs	r3, #1
 801154e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011552:	7003      	strb	r3, [r0, #0]
 8011554:	4680      	mov	r8, r0
 8011556:	460f      	mov	r7, r1
 8011558:	f000 f964 	bl	8011824 <max_serialized_size_std_msgs__msg__Header>
 801155c:	4604      	mov	r4, r0
 801155e:	4640      	mov	r0, r8
 8011560:	443c      	add	r4, r7
 8011562:	f1c7 0748 	rsb	r7, r7, #72	@ 0x48
 8011566:	4621      	mov	r1, r4
 8011568:	f000 fa94 	bl	8011a94 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801156c:	4404      	add	r4, r0
 801156e:	2108      	movs	r1, #8
 8011570:	4620      	mov	r0, r4
 8011572:	f002 f82d 	bl	80135d0 <ucdr_alignment>
 8011576:	4606      	mov	r6, r0
 8011578:	4640      	mov	r0, r8
 801157a:	3648      	adds	r6, #72	@ 0x48
 801157c:	4426      	add	r6, r4
 801157e:	4631      	mov	r1, r6
 8011580:	f000 fb1a 	bl	8011bb8 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011584:	1835      	adds	r5, r6, r0
 8011586:	2108      	movs	r1, #8
 8011588:	4628      	mov	r0, r5
 801158a:	f002 f821 	bl	80135d0 <ucdr_alignment>
 801158e:	4604      	mov	r4, r0
 8011590:	4640      	mov	r0, r8
 8011592:	3448      	adds	r4, #72	@ 0x48
 8011594:	4425      	add	r5, r4
 8011596:	4629      	mov	r1, r5
 8011598:	f000 fb0e 	bl	8011bb8 <max_serialized_size_geometry_msgs__msg__Vector3>
 801159c:	4405      	add	r5, r0
 801159e:	2108      	movs	r1, #8
 80115a0:	4628      	mov	r0, r5
 80115a2:	f002 f815 	bl	80135d0 <ucdr_alignment>
 80115a6:	4438      	add	r0, r7
 80115a8:	4428      	add	r0, r5
 80115aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ae:	bf00      	nop

080115b0 <_Imu__max_serialized_size>:
 80115b0:	b500      	push	{lr}
 80115b2:	b083      	sub	sp, #12
 80115b4:	2100      	movs	r1, #0
 80115b6:	f10d 0007 	add.w	r0, sp, #7
 80115ba:	f7ff ffc7 	bl	801154c <max_serialized_size_sensor_msgs__msg__Imu>
 80115be:	b003      	add	sp, #12
 80115c0:	f85d fb04 	ldr.w	pc, [sp], #4

080115c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 80115c4:	4800      	ldr	r0, [pc, #0]	@ (80115c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 80115c6:	4770      	bx	lr
 80115c8:	240002c4 	.word	0x240002c4

080115cc <get_serialized_size_sensor_msgs__msg__MagneticField>:
 80115cc:	b570      	push	{r4, r5, r6, lr}
 80115ce:	4605      	mov	r5, r0
 80115d0:	b190      	cbz	r0, 80115f8 <get_serialized_size_sensor_msgs__msg__MagneticField+0x2c>
 80115d2:	460c      	mov	r4, r1
 80115d4:	f000 f8ac 	bl	8011730 <get_serialized_size_std_msgs__msg__Header>
 80115d8:	4606      	mov	r6, r0
 80115da:	f105 0018 	add.w	r0, r5, #24
 80115de:	4426      	add	r6, r4
 80115e0:	f1c4 0448 	rsb	r4, r4, #72	@ 0x48
 80115e4:	4631      	mov	r1, r6
 80115e6:	f000 fa79 	bl	8011adc <get_serialized_size_geometry_msgs__msg__Vector3>
 80115ea:	4406      	add	r6, r0
 80115ec:	2108      	movs	r1, #8
 80115ee:	4630      	mov	r0, r6
 80115f0:	f001 ffee 	bl	80135d0 <ucdr_alignment>
 80115f4:	4404      	add	r4, r0
 80115f6:	19a0      	adds	r0, r4, r6
 80115f8:	bd70      	pop	{r4, r5, r6, pc}
 80115fa:	bf00      	nop

080115fc <_MagneticField__cdr_deserialize>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	460c      	mov	r4, r1
 8011600:	b1c9      	cbz	r1, 8011636 <_MagneticField__cdr_deserialize+0x3a>
 8011602:	4605      	mov	r5, r0
 8011604:	f000 f918 	bl	8011838 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011608:	4603      	mov	r3, r0
 801160a:	4621      	mov	r1, r4
 801160c:	4628      	mov	r0, r5
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	4798      	blx	r3
 8011614:	f000 faea 	bl	8011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011618:	4603      	mov	r3, r0
 801161a:	f104 0118 	add.w	r1, r4, #24
 801161e:	4628      	mov	r0, r5
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	4798      	blx	r3
 8011626:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801162a:	4628      	mov	r0, r5
 801162c:	2209      	movs	r2, #9
 801162e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011632:	f000 bc65 	b.w	8011f00 <ucdr_deserialize_array_double>
 8011636:	4608      	mov	r0, r1
 8011638:	bd38      	pop	{r3, r4, r5, pc}
 801163a:	bf00      	nop

0801163c <_MagneticField__cdr_serialize>:
 801163c:	b1d8      	cbz	r0, 8011676 <_MagneticField__cdr_serialize+0x3a>
 801163e:	b538      	push	{r3, r4, r5, lr}
 8011640:	4604      	mov	r4, r0
 8011642:	460d      	mov	r5, r1
 8011644:	f000 f8f8 	bl	8011838 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8011648:	4603      	mov	r3, r0
 801164a:	4629      	mov	r1, r5
 801164c:	4620      	mov	r0, r4
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	689b      	ldr	r3, [r3, #8]
 8011652:	4798      	blx	r3
 8011654:	f000 faca 	bl	8011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011658:	4603      	mov	r3, r0
 801165a:	4629      	mov	r1, r5
 801165c:	f104 0018 	add.w	r0, r4, #24
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	4798      	blx	r3
 8011666:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801166a:	4628      	mov	r0, r5
 801166c:	2209      	movs	r2, #9
 801166e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011672:	f000 bbf1 	b.w	8011e58 <ucdr_serialize_array_double>
 8011676:	4770      	bx	lr

08011678 <_MagneticField__get_serialized_size>:
 8011678:	b538      	push	{r3, r4, r5, lr}
 801167a:	4604      	mov	r4, r0
 801167c:	b180      	cbz	r0, 80116a0 <_MagneticField__get_serialized_size+0x28>
 801167e:	2100      	movs	r1, #0
 8011680:	f000 f856 	bl	8011730 <get_serialized_size_std_msgs__msg__Header>
 8011684:	4605      	mov	r5, r0
 8011686:	f104 0018 	add.w	r0, r4, #24
 801168a:	4629      	mov	r1, r5
 801168c:	f000 fa26 	bl	8011adc <get_serialized_size_geometry_msgs__msg__Vector3>
 8011690:	4405      	add	r5, r0
 8011692:	2108      	movs	r1, #8
 8011694:	4628      	mov	r0, r5
 8011696:	f001 ff9b 	bl	80135d0 <ucdr_alignment>
 801169a:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 801169e:	1960      	adds	r0, r4, r5
 80116a0:	bd38      	pop	{r3, r4, r5, pc}
 80116a2:	bf00      	nop

080116a4 <_MagneticField__max_serialized_size>:
 80116a4:	b510      	push	{r4, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	2301      	movs	r3, #1
 80116aa:	2100      	movs	r1, #0
 80116ac:	f10d 0007 	add.w	r0, sp, #7
 80116b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80116b4:	f000 f8b6 	bl	8011824 <max_serialized_size_std_msgs__msg__Header>
 80116b8:	4604      	mov	r4, r0
 80116ba:	f10d 0007 	add.w	r0, sp, #7
 80116be:	4621      	mov	r1, r4
 80116c0:	f000 fa7a 	bl	8011bb8 <max_serialized_size_geometry_msgs__msg__Vector3>
 80116c4:	4404      	add	r4, r0
 80116c6:	2108      	movs	r1, #8
 80116c8:	4620      	mov	r0, r4
 80116ca:	f001 ff81 	bl	80135d0 <ucdr_alignment>
 80116ce:	3048      	adds	r0, #72	@ 0x48
 80116d0:	4420      	add	r0, r4
 80116d2:	b002      	add	sp, #8
 80116d4:	bd10      	pop	{r4, pc}
 80116d6:	bf00      	nop

080116d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField>:
 80116d8:	4800      	ldr	r0, [pc, #0]	@ (80116dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__MagneticField+0x4>)
 80116da:	4770      	bx	lr
 80116dc:	240002ec 	.word	0x240002ec

080116e0 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80116e0:	f009 bd1e 	b.w	801b120 <std_msgs__msg__Header__init>

080116e4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80116e4:	f009 bd40 	b.w	801b168 <std_msgs__msg__Header__fini>

080116e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80116e8:	b508      	push	{r3, lr}
 80116ea:	f000 f8ad 	bl	8011848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80116ee:	4b06      	ldr	r3, [pc, #24]	@ (8011708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116f0:	4906      	ldr	r1, [pc, #24]	@ (801170c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	60c8      	str	r0, [r1, #12]
 80116f6:	b10a      	cbz	r2, 80116fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80116f8:	4803      	ldr	r0, [pc, #12]	@ (8011708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80116fa:	bd08      	pop	{r3, pc}
 80116fc:	4a04      	ldr	r2, [pc, #16]	@ (8011710 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80116fe:	4802      	ldr	r0, [pc, #8]	@ (8011708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011700:	6812      	ldr	r2, [r2, #0]
 8011702:	601a      	str	r2, [r3, #0]
 8011704:	bd08      	pop	{r3, pc}
 8011706:	bf00      	nop
 8011708:	2400038c 	.word	0x2400038c
 801170c:	24000314 	.word	0x24000314
 8011710:	2400067c 	.word	0x2400067c

08011714 <_Header__max_serialized_size>:
 8011714:	b500      	push	{lr}
 8011716:	b083      	sub	sp, #12
 8011718:	2301      	movs	r3, #1
 801171a:	2100      	movs	r1, #0
 801171c:	f10d 0007 	add.w	r0, sp, #7
 8011720:	f88d 3007 	strb.w	r3, [sp, #7]
 8011724:	f000 f8ee 	bl	8011904 <max_serialized_size_builtin_interfaces__msg__Time>
 8011728:	b003      	add	sp, #12
 801172a:	f85d fb04 	ldr.w	pc, [sp], #4
 801172e:	bf00      	nop

08011730 <get_serialized_size_std_msgs__msg__Header>:
 8011730:	b570      	push	{r4, r5, r6, lr}
 8011732:	4605      	mov	r5, r0
 8011734:	b168      	cbz	r0, 8011752 <get_serialized_size_std_msgs__msg__Header+0x22>
 8011736:	460c      	mov	r4, r1
 8011738:	f000 f894 	bl	8011864 <get_serialized_size_builtin_interfaces__msg__Time>
 801173c:	2104      	movs	r1, #4
 801173e:	1826      	adds	r6, r4, r0
 8011740:	f1c4 0405 	rsb	r4, r4, #5
 8011744:	4630      	mov	r0, r6
 8011746:	f001 ff43 	bl	80135d0 <ucdr_alignment>
 801174a:	68e9      	ldr	r1, [r5, #12]
 801174c:	440c      	add	r4, r1
 801174e:	4404      	add	r4, r0
 8011750:	19a0      	adds	r0, r4, r6
 8011752:	bd70      	pop	{r4, r5, r6, pc}

08011754 <_Header__cdr_deserialize>:
 8011754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011756:	460c      	mov	r4, r1
 8011758:	b083      	sub	sp, #12
 801175a:	b1e9      	cbz	r1, 8011798 <_Header__cdr_deserialize+0x44>
 801175c:	4606      	mov	r6, r0
 801175e:	f000 f8e5 	bl	801192c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011762:	4603      	mov	r3, r0
 8011764:	4621      	mov	r1, r4
 8011766:	4630      	mov	r0, r6
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	4798      	blx	r3
 801176e:	6927      	ldr	r7, [r4, #16]
 8011770:	ab01      	add	r3, sp, #4
 8011772:	68a1      	ldr	r1, [r4, #8]
 8011774:	463a      	mov	r2, r7
 8011776:	4630      	mov	r0, r6
 8011778:	f001 ffac 	bl	80136d4 <ucdr_deserialize_sequence_char>
 801177c:	9b01      	ldr	r3, [sp, #4]
 801177e:	4605      	mov	r5, r0
 8011780:	b920      	cbnz	r0, 801178c <_Header__cdr_deserialize+0x38>
 8011782:	429f      	cmp	r7, r3
 8011784:	d30c      	bcc.n	80117a0 <_Header__cdr_deserialize+0x4c>
 8011786:	4628      	mov	r0, r5
 8011788:	b003      	add	sp, #12
 801178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801178c:	b103      	cbz	r3, 8011790 <_Header__cdr_deserialize+0x3c>
 801178e:	3b01      	subs	r3, #1
 8011790:	4628      	mov	r0, r5
 8011792:	60e3      	str	r3, [r4, #12]
 8011794:	b003      	add	sp, #12
 8011796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011798:	460d      	mov	r5, r1
 801179a:	4628      	mov	r0, r5
 801179c:	b003      	add	sp, #12
 801179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117a0:	2101      	movs	r1, #1
 80117a2:	4630      	mov	r0, r6
 80117a4:	75b5      	strb	r5, [r6, #22]
 80117a6:	7571      	strb	r1, [r6, #21]
 80117a8:	60e5      	str	r5, [r4, #12]
 80117aa:	f001 ff29 	bl	8013600 <ucdr_align_to>
 80117ae:	4630      	mov	r0, r6
 80117b0:	9901      	ldr	r1, [sp, #4]
 80117b2:	f001 ff5d 	bl	8013670 <ucdr_advance_buffer>
 80117b6:	4628      	mov	r0, r5
 80117b8:	b003      	add	sp, #12
 80117ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117bc <_Header__cdr_serialize>:
 80117bc:	b308      	cbz	r0, 8011802 <_Header__cdr_serialize+0x46>
 80117be:	b570      	push	{r4, r5, r6, lr}
 80117c0:	4604      	mov	r4, r0
 80117c2:	460d      	mov	r5, r1
 80117c4:	f000 f8b2 	bl	801192c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80117c8:	4603      	mov	r3, r0
 80117ca:	4629      	mov	r1, r5
 80117cc:	4620      	mov	r0, r4
 80117ce:	685b      	ldr	r3, [r3, #4]
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	4798      	blx	r3
 80117d4:	68a6      	ldr	r6, [r4, #8]
 80117d6:	b15e      	cbz	r6, 80117f0 <_Header__cdr_serialize+0x34>
 80117d8:	4630      	mov	r0, r6
 80117da:	f7ee fd8b 	bl	80002f4 <strlen>
 80117de:	4603      	mov	r3, r0
 80117e0:	1c42      	adds	r2, r0, #1
 80117e2:	4631      	mov	r1, r6
 80117e4:	4628      	mov	r0, r5
 80117e6:	60e3      	str	r3, [r4, #12]
 80117e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117ec:	f001 bf60 	b.w	80136b0 <ucdr_serialize_sequence_char>
 80117f0:	4633      	mov	r3, r6
 80117f2:	4632      	mov	r2, r6
 80117f4:	4631      	mov	r1, r6
 80117f6:	4628      	mov	r0, r5
 80117f8:	60e3      	str	r3, [r4, #12]
 80117fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117fe:	f001 bf57 	b.w	80136b0 <ucdr_serialize_sequence_char>
 8011802:	4770      	bx	lr

08011804 <_Header__get_serialized_size>:
 8011804:	b538      	push	{r3, r4, r5, lr}
 8011806:	4604      	mov	r4, r0
 8011808:	b150      	cbz	r0, 8011820 <_Header__get_serialized_size+0x1c>
 801180a:	2100      	movs	r1, #0
 801180c:	f000 f82a 	bl	8011864 <get_serialized_size_builtin_interfaces__msg__Time>
 8011810:	2104      	movs	r1, #4
 8011812:	4605      	mov	r5, r0
 8011814:	f001 fedc 	bl	80135d0 <ucdr_alignment>
 8011818:	68e2      	ldr	r2, [r4, #12]
 801181a:	3205      	adds	r2, #5
 801181c:	1953      	adds	r3, r2, r5
 801181e:	4418      	add	r0, r3
 8011820:	bd38      	pop	{r3, r4, r5, pc}
 8011822:	bf00      	nop

08011824 <max_serialized_size_std_msgs__msg__Header>:
 8011824:	2301      	movs	r3, #1
 8011826:	b510      	push	{r4, lr}
 8011828:	7003      	strb	r3, [r0, #0]
 801182a:	4604      	mov	r4, r0
 801182c:	f000 f86a 	bl	8011904 <max_serialized_size_builtin_interfaces__msg__Time>
 8011830:	2300      	movs	r3, #0
 8011832:	7023      	strb	r3, [r4, #0]
 8011834:	bd10      	pop	{r4, pc}
 8011836:	bf00      	nop

08011838 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011838:	4800      	ldr	r0, [pc, #0]	@ (801183c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801183a:	4770      	bx	lr
 801183c:	24000398 	.word	0x24000398

08011840 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8011840:	f009 bc9e 	b.w	801b180 <builtin_interfaces__msg__Time__init>

08011844 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8011844:	f009 bca0 	b.w	801b188 <builtin_interfaces__msg__Time__fini>

08011848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8011848:	4b04      	ldr	r3, [pc, #16]	@ (801185c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	b10a      	cbz	r2, 8011852 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801184e:	4803      	ldr	r0, [pc, #12]	@ (801185c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011850:	4770      	bx	lr
 8011852:	4a03      	ldr	r2, [pc, #12]	@ (8011860 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8011854:	4801      	ldr	r0, [pc, #4]	@ (801185c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8011856:	6812      	ldr	r2, [r2, #0]
 8011858:	601a      	str	r2, [r3, #0]
 801185a:	4770      	bx	lr
 801185c:	24000438 	.word	0x24000438
 8011860:	2400067c 	.word	0x2400067c

08011864 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011864:	b180      	cbz	r0, 8011888 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011866:	b538      	push	{r3, r4, r5, lr}
 8011868:	460d      	mov	r5, r1
 801186a:	2104      	movs	r1, #4
 801186c:	4628      	mov	r0, r5
 801186e:	f001 feaf 	bl	80135d0 <ucdr_alignment>
 8011872:	1d2b      	adds	r3, r5, #4
 8011874:	f1c5 0504 	rsb	r5, r5, #4
 8011878:	2104      	movs	r1, #4
 801187a:	181c      	adds	r4, r3, r0
 801187c:	4620      	mov	r0, r4
 801187e:	f001 fea7 	bl	80135d0 <ucdr_alignment>
 8011882:	4428      	add	r0, r5
 8011884:	4420      	add	r0, r4
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop

0801188c <_Time__cdr_deserialize>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	460c      	mov	r4, r1
 8011890:	b141      	cbz	r1, 80118a4 <_Time__cdr_deserialize+0x18>
 8011892:	4605      	mov	r5, r0
 8011894:	f001 fa7e 	bl	8012d94 <ucdr_deserialize_int32_t>
 8011898:	1d21      	adds	r1, r4, #4
 801189a:	4628      	mov	r0, r5
 801189c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118a0:	f000 bef6 	b.w	8012690 <ucdr_deserialize_uint32_t>
 80118a4:	4608      	mov	r0, r1
 80118a6:	bd38      	pop	{r3, r4, r5, pc}

080118a8 <_Time__cdr_serialize>:
 80118a8:	b160      	cbz	r0, 80118c4 <_Time__cdr_serialize+0x1c>
 80118aa:	b538      	push	{r3, r4, r5, lr}
 80118ac:	460d      	mov	r5, r1
 80118ae:	4604      	mov	r4, r0
 80118b0:	6801      	ldr	r1, [r0, #0]
 80118b2:	4628      	mov	r0, r5
 80118b4:	f001 f9d6 	bl	8012c64 <ucdr_serialize_int32_t>
 80118b8:	6861      	ldr	r1, [r4, #4]
 80118ba:	4628      	mov	r0, r5
 80118bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118c0:	f000 bdb6 	b.w	8012430 <ucdr_serialize_uint32_t>
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop

080118c8 <_Time__get_serialized_size>:
 80118c8:	b160      	cbz	r0, 80118e4 <_Time__get_serialized_size+0x1c>
 80118ca:	2104      	movs	r1, #4
 80118cc:	2000      	movs	r0, #0
 80118ce:	b510      	push	{r4, lr}
 80118d0:	f001 fe7e 	bl	80135d0 <ucdr_alignment>
 80118d4:	2104      	movs	r1, #4
 80118d6:	1844      	adds	r4, r0, r1
 80118d8:	4620      	mov	r0, r4
 80118da:	f001 fe79 	bl	80135d0 <ucdr_alignment>
 80118de:	3004      	adds	r0, #4
 80118e0:	4420      	add	r0, r4
 80118e2:	bd10      	pop	{r4, pc}
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop

080118e8 <_Time__max_serialized_size>:
 80118e8:	b510      	push	{r4, lr}
 80118ea:	2104      	movs	r1, #4
 80118ec:	2000      	movs	r0, #0
 80118ee:	f001 fe6f 	bl	80135d0 <ucdr_alignment>
 80118f2:	2104      	movs	r1, #4
 80118f4:	1844      	adds	r4, r0, r1
 80118f6:	4620      	mov	r0, r4
 80118f8:	f001 fe6a 	bl	80135d0 <ucdr_alignment>
 80118fc:	3004      	adds	r0, #4
 80118fe:	4420      	add	r0, r4
 8011900:	bd10      	pop	{r4, pc}
 8011902:	bf00      	nop

08011904 <max_serialized_size_builtin_interfaces__msg__Time>:
 8011904:	b538      	push	{r3, r4, r5, lr}
 8011906:	460c      	mov	r4, r1
 8011908:	2301      	movs	r3, #1
 801190a:	2104      	movs	r1, #4
 801190c:	1d25      	adds	r5, r4, #4
 801190e:	7003      	strb	r3, [r0, #0]
 8011910:	4620      	mov	r0, r4
 8011912:	f1c4 0404 	rsb	r4, r4, #4
 8011916:	f001 fe5b 	bl	80135d0 <ucdr_alignment>
 801191a:	4405      	add	r5, r0
 801191c:	2104      	movs	r1, #4
 801191e:	4628      	mov	r0, r5
 8011920:	f001 fe56 	bl	80135d0 <ucdr_alignment>
 8011924:	4420      	add	r0, r4
 8011926:	4428      	add	r0, r5
 8011928:	bd38      	pop	{r3, r4, r5, pc}
 801192a:	bf00      	nop

0801192c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801192c:	4800      	ldr	r0, [pc, #0]	@ (8011930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801192e:	4770      	bx	lr
 8011930:	24000444 	.word	0x24000444

08011934 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8011934:	f009 bc2a 	b.w	801b18c <geometry_msgs__msg__Quaternion__init>

08011938 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8011938:	f009 bc38 	b.w	801b1ac <geometry_msgs__msg__Quaternion__fini>

0801193c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801193c:	4b04      	ldr	r3, [pc, #16]	@ (8011950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	b10a      	cbz	r2, 8011946 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8011942:	4803      	ldr	r0, [pc, #12]	@ (8011950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8011944:	4770      	bx	lr
 8011946:	4a03      	ldr	r2, [pc, #12]	@ (8011954 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8011948:	4801      	ldr	r0, [pc, #4]	@ (8011950 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801194a:	6812      	ldr	r2, [r2, #0]
 801194c:	601a      	str	r2, [r3, #0]
 801194e:	4770      	bx	lr
 8011950:	2400055c 	.word	0x2400055c
 8011954:	2400067c 	.word	0x2400067c

08011958 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8011958:	f009 bc2a 	b.w	801b1b0 <geometry_msgs__msg__Vector3__init>

0801195c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 801195c:	f009 bc2c 	b.w	801b1b8 <geometry_msgs__msg__Vector3__fini>

08011960 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8011960:	4b04      	ldr	r3, [pc, #16]	@ (8011974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	b10a      	cbz	r2, 801196a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8011966:	4803      	ldr	r0, [pc, #12]	@ (8011974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8011968:	4770      	bx	lr
 801196a:	4a03      	ldr	r2, [pc, #12]	@ (8011978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 801196c:	4801      	ldr	r0, [pc, #4]	@ (8011974 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801196e:	6812      	ldr	r2, [r2, #0]
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	4770      	bx	lr
 8011974:	2400061c 	.word	0x2400061c
 8011978:	2400067c 	.word	0x2400067c

0801197c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 801197c:	b1e8      	cbz	r0, 80119ba <get_serialized_size_geometry_msgs__msg__Quaternion+0x3e>
 801197e:	b570      	push	{r4, r5, r6, lr}
 8011980:	460d      	mov	r5, r1
 8011982:	2108      	movs	r1, #8
 8011984:	4628      	mov	r0, r5
 8011986:	f001 fe23 	bl	80135d0 <ucdr_alignment>
 801198a:	f105 0308 	add.w	r3, r5, #8
 801198e:	2108      	movs	r1, #8
 8011990:	f1c5 0508 	rsb	r5, r5, #8
 8011994:	181e      	adds	r6, r3, r0
 8011996:	4630      	mov	r0, r6
 8011998:	f001 fe1a 	bl	80135d0 <ucdr_alignment>
 801199c:	2108      	movs	r1, #8
 801199e:	1844      	adds	r4, r0, r1
 80119a0:	4434      	add	r4, r6
 80119a2:	4620      	mov	r0, r4
 80119a4:	f001 fe14 	bl	80135d0 <ucdr_alignment>
 80119a8:	2108      	movs	r1, #8
 80119aa:	4408      	add	r0, r1
 80119ac:	4404      	add	r4, r0
 80119ae:	4620      	mov	r0, r4
 80119b0:	f001 fe0e 	bl	80135d0 <ucdr_alignment>
 80119b4:	4428      	add	r0, r5
 80119b6:	4420      	add	r0, r4
 80119b8:	bd70      	pop	{r4, r5, r6, pc}
 80119ba:	4770      	bx	lr

080119bc <_Quaternion__cdr_deserialize>:
 80119bc:	b538      	push	{r3, r4, r5, lr}
 80119be:	460c      	mov	r4, r1
 80119c0:	b199      	cbz	r1, 80119ea <_Quaternion__cdr_deserialize+0x2e>
 80119c2:	4605      	mov	r5, r0
 80119c4:	f001 fc18 	bl	80131f8 <ucdr_deserialize_double>
 80119c8:	f104 0108 	add.w	r1, r4, #8
 80119cc:	4628      	mov	r0, r5
 80119ce:	f001 fc13 	bl	80131f8 <ucdr_deserialize_double>
 80119d2:	f104 0110 	add.w	r1, r4, #16
 80119d6:	4628      	mov	r0, r5
 80119d8:	f001 fc0e 	bl	80131f8 <ucdr_deserialize_double>
 80119dc:	f104 0118 	add.w	r1, r4, #24
 80119e0:	4628      	mov	r0, r5
 80119e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119e6:	f001 bc07 	b.w	80131f8 <ucdr_deserialize_double>
 80119ea:	4608      	mov	r0, r1
 80119ec:	bd38      	pop	{r3, r4, r5, pc}
 80119ee:	bf00      	nop

080119f0 <_Quaternion__cdr_serialize>:
 80119f0:	b1c0      	cbz	r0, 8011a24 <_Quaternion__cdr_serialize+0x34>
 80119f2:	b538      	push	{r3, r4, r5, lr}
 80119f4:	460d      	mov	r5, r1
 80119f6:	4604      	mov	r4, r0
 80119f8:	ed90 0b00 	vldr	d0, [r0]
 80119fc:	4608      	mov	r0, r1
 80119fe:	f001 fa59 	bl	8012eb4 <ucdr_serialize_double>
 8011a02:	4628      	mov	r0, r5
 8011a04:	ed94 0b02 	vldr	d0, [r4, #8]
 8011a08:	f001 fa54 	bl	8012eb4 <ucdr_serialize_double>
 8011a0c:	4628      	mov	r0, r5
 8011a0e:	ed94 0b04 	vldr	d0, [r4, #16]
 8011a12:	f001 fa4f 	bl	8012eb4 <ucdr_serialize_double>
 8011a16:	4628      	mov	r0, r5
 8011a18:	ed94 0b06 	vldr	d0, [r4, #24]
 8011a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a20:	f001 ba48 	b.w	8012eb4 <ucdr_serialize_double>
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop

08011a28 <_Quaternion__get_serialized_size>:
 8011a28:	b1c0      	cbz	r0, 8011a5c <_Quaternion__get_serialized_size+0x34>
 8011a2a:	2108      	movs	r1, #8
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	b538      	push	{r3, r4, r5, lr}
 8011a30:	f001 fdce 	bl	80135d0 <ucdr_alignment>
 8011a34:	2108      	movs	r1, #8
 8011a36:	1845      	adds	r5, r0, r1
 8011a38:	4628      	mov	r0, r5
 8011a3a:	f001 fdc9 	bl	80135d0 <ucdr_alignment>
 8011a3e:	2108      	movs	r1, #8
 8011a40:	1844      	adds	r4, r0, r1
 8011a42:	442c      	add	r4, r5
 8011a44:	4620      	mov	r0, r4
 8011a46:	f001 fdc3 	bl	80135d0 <ucdr_alignment>
 8011a4a:	2108      	movs	r1, #8
 8011a4c:	4408      	add	r0, r1
 8011a4e:	4404      	add	r4, r0
 8011a50:	4620      	mov	r0, r4
 8011a52:	f001 fdbd 	bl	80135d0 <ucdr_alignment>
 8011a56:	3008      	adds	r0, #8
 8011a58:	4420      	add	r0, r4
 8011a5a:	bd38      	pop	{r3, r4, r5, pc}
 8011a5c:	4770      	bx	lr
 8011a5e:	bf00      	nop

08011a60 <_Quaternion__max_serialized_size>:
 8011a60:	b538      	push	{r3, r4, r5, lr}
 8011a62:	2108      	movs	r1, #8
 8011a64:	2000      	movs	r0, #0
 8011a66:	f001 fdb3 	bl	80135d0 <ucdr_alignment>
 8011a6a:	2108      	movs	r1, #8
 8011a6c:	1845      	adds	r5, r0, r1
 8011a6e:	4628      	mov	r0, r5
 8011a70:	f001 fdae 	bl	80135d0 <ucdr_alignment>
 8011a74:	2108      	movs	r1, #8
 8011a76:	1844      	adds	r4, r0, r1
 8011a78:	442c      	add	r4, r5
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f001 fda8 	bl	80135d0 <ucdr_alignment>
 8011a80:	2108      	movs	r1, #8
 8011a82:	4408      	add	r0, r1
 8011a84:	4404      	add	r4, r0
 8011a86:	4620      	mov	r0, r4
 8011a88:	f001 fda2 	bl	80135d0 <ucdr_alignment>
 8011a8c:	3008      	adds	r0, #8
 8011a8e:	4420      	add	r0, r4
 8011a90:	bd38      	pop	{r3, r4, r5, pc}
 8011a92:	bf00      	nop

08011a94 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8011a94:	b570      	push	{r4, r5, r6, lr}
 8011a96:	460c      	mov	r4, r1
 8011a98:	2301      	movs	r3, #1
 8011a9a:	2108      	movs	r1, #8
 8011a9c:	f104 0508 	add.w	r5, r4, #8
 8011aa0:	7003      	strb	r3, [r0, #0]
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f1c4 0408 	rsb	r4, r4, #8
 8011aa8:	f001 fd92 	bl	80135d0 <ucdr_alignment>
 8011aac:	1946      	adds	r6, r0, r5
 8011aae:	2108      	movs	r1, #8
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	f001 fd8d 	bl	80135d0 <ucdr_alignment>
 8011ab6:	2108      	movs	r1, #8
 8011ab8:	1845      	adds	r5, r0, r1
 8011aba:	4435      	add	r5, r6
 8011abc:	4628      	mov	r0, r5
 8011abe:	f001 fd87 	bl	80135d0 <ucdr_alignment>
 8011ac2:	2108      	movs	r1, #8
 8011ac4:	4408      	add	r0, r1
 8011ac6:	4405      	add	r5, r0
 8011ac8:	4628      	mov	r0, r5
 8011aca:	f001 fd81 	bl	80135d0 <ucdr_alignment>
 8011ace:	4420      	add	r0, r4
 8011ad0:	4428      	add	r0, r5
 8011ad2:	bd70      	pop	{r4, r5, r6, pc}

08011ad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8011ad4:	4800      	ldr	r0, [pc, #0]	@ (8011ad8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8011ad6:	4770      	bx	lr
 8011ad8:	24000628 	.word	0x24000628

08011adc <get_serialized_size_geometry_msgs__msg__Vector3>:
 8011adc:	b1b8      	cbz	r0, 8011b0e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8011ade:	b538      	push	{r3, r4, r5, lr}
 8011ae0:	460d      	mov	r5, r1
 8011ae2:	2108      	movs	r1, #8
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	f001 fd73 	bl	80135d0 <ucdr_alignment>
 8011aea:	f105 0308 	add.w	r3, r5, #8
 8011aee:	2108      	movs	r1, #8
 8011af0:	f1c5 0508 	rsb	r5, r5, #8
 8011af4:	181c      	adds	r4, r3, r0
 8011af6:	4620      	mov	r0, r4
 8011af8:	f001 fd6a 	bl	80135d0 <ucdr_alignment>
 8011afc:	2108      	movs	r1, #8
 8011afe:	4408      	add	r0, r1
 8011b00:	4404      	add	r4, r0
 8011b02:	4620      	mov	r0, r4
 8011b04:	f001 fd64 	bl	80135d0 <ucdr_alignment>
 8011b08:	4428      	add	r0, r5
 8011b0a:	4420      	add	r0, r4
 8011b0c:	bd38      	pop	{r3, r4, r5, pc}
 8011b0e:	4770      	bx	lr

08011b10 <_Vector3__cdr_deserialize>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	460c      	mov	r4, r1
 8011b14:	b171      	cbz	r1, 8011b34 <_Vector3__cdr_deserialize+0x24>
 8011b16:	4605      	mov	r5, r0
 8011b18:	f001 fb6e 	bl	80131f8 <ucdr_deserialize_double>
 8011b1c:	f104 0108 	add.w	r1, r4, #8
 8011b20:	4628      	mov	r0, r5
 8011b22:	f001 fb69 	bl	80131f8 <ucdr_deserialize_double>
 8011b26:	f104 0110 	add.w	r1, r4, #16
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b30:	f001 bb62 	b.w	80131f8 <ucdr_deserialize_double>
 8011b34:	4608      	mov	r0, r1
 8011b36:	bd38      	pop	{r3, r4, r5, pc}

08011b38 <_Vector3__cdr_serialize>:
 8011b38:	b198      	cbz	r0, 8011b62 <_Vector3__cdr_serialize+0x2a>
 8011b3a:	b538      	push	{r3, r4, r5, lr}
 8011b3c:	460d      	mov	r5, r1
 8011b3e:	4604      	mov	r4, r0
 8011b40:	ed90 0b00 	vldr	d0, [r0]
 8011b44:	4608      	mov	r0, r1
 8011b46:	f001 f9b5 	bl	8012eb4 <ucdr_serialize_double>
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	ed94 0b02 	vldr	d0, [r4, #8]
 8011b50:	f001 f9b0 	bl	8012eb4 <ucdr_serialize_double>
 8011b54:	4628      	mov	r0, r5
 8011b56:	ed94 0b04 	vldr	d0, [r4, #16]
 8011b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b5e:	f001 b9a9 	b.w	8012eb4 <ucdr_serialize_double>
 8011b62:	4770      	bx	lr

08011b64 <_Vector3__get_serialized_size>:
 8011b64:	b190      	cbz	r0, 8011b8c <_Vector3__get_serialized_size+0x28>
 8011b66:	2108      	movs	r1, #8
 8011b68:	2000      	movs	r0, #0
 8011b6a:	b510      	push	{r4, lr}
 8011b6c:	f001 fd30 	bl	80135d0 <ucdr_alignment>
 8011b70:	2108      	movs	r1, #8
 8011b72:	1844      	adds	r4, r0, r1
 8011b74:	4620      	mov	r0, r4
 8011b76:	f001 fd2b 	bl	80135d0 <ucdr_alignment>
 8011b7a:	2108      	movs	r1, #8
 8011b7c:	4408      	add	r0, r1
 8011b7e:	4404      	add	r4, r0
 8011b80:	4620      	mov	r0, r4
 8011b82:	f001 fd25 	bl	80135d0 <ucdr_alignment>
 8011b86:	3008      	adds	r0, #8
 8011b88:	4420      	add	r0, r4
 8011b8a:	bd10      	pop	{r4, pc}
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop

08011b90 <_Vector3__max_serialized_size>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	2108      	movs	r1, #8
 8011b94:	2000      	movs	r0, #0
 8011b96:	f001 fd1b 	bl	80135d0 <ucdr_alignment>
 8011b9a:	2108      	movs	r1, #8
 8011b9c:	1845      	adds	r5, r0, r1
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f001 fd16 	bl	80135d0 <ucdr_alignment>
 8011ba4:	2108      	movs	r1, #8
 8011ba6:	1844      	adds	r4, r0, r1
 8011ba8:	442c      	add	r4, r5
 8011baa:	4620      	mov	r0, r4
 8011bac:	f001 fd10 	bl	80135d0 <ucdr_alignment>
 8011bb0:	3008      	adds	r0, #8
 8011bb2:	4420      	add	r0, r4
 8011bb4:	bd38      	pop	{r3, r4, r5, pc}
 8011bb6:	bf00      	nop

08011bb8 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8011bb8:	b570      	push	{r4, r5, r6, lr}
 8011bba:	460c      	mov	r4, r1
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	2108      	movs	r1, #8
 8011bc0:	f104 0508 	add.w	r5, r4, #8
 8011bc4:	7003      	strb	r3, [r0, #0]
 8011bc6:	4620      	mov	r0, r4
 8011bc8:	f1c4 0408 	rsb	r4, r4, #8
 8011bcc:	f001 fd00 	bl	80135d0 <ucdr_alignment>
 8011bd0:	1946      	adds	r6, r0, r5
 8011bd2:	2108      	movs	r1, #8
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f001 fcfb 	bl	80135d0 <ucdr_alignment>
 8011bda:	2108      	movs	r1, #8
 8011bdc:	1845      	adds	r5, r0, r1
 8011bde:	4435      	add	r5, r6
 8011be0:	4628      	mov	r0, r5
 8011be2:	f001 fcf5 	bl	80135d0 <ucdr_alignment>
 8011be6:	4420      	add	r0, r4
 8011be8:	4428      	add	r0, r5
 8011bea:	bd70      	pop	{r4, r5, r6, pc}

08011bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8011bec:	4800      	ldr	r0, [pc, #0]	@ (8011bf0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8011bee:	4770      	bx	lr
 8011bf0:	24000650 	.word	0x24000650

08011bf4 <ucdr_serialize_endian_array_char>:
 8011bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	4619      	mov	r1, r3
 8011bfa:	461f      	mov	r7, r3
 8011bfc:	4605      	mov	r5, r0
 8011bfe:	4690      	mov	r8, r2
 8011c00:	f001 fc8e 	bl	8013520 <ucdr_check_buffer_available_for>
 8011c04:	b9e0      	cbnz	r0, 8011c40 <ucdr_serialize_endian_array_char+0x4c>
 8011c06:	463e      	mov	r6, r7
 8011c08:	e00b      	b.n	8011c22 <ucdr_serialize_endian_array_char+0x2e>
 8011c0a:	4441      	add	r1, r8
 8011c0c:	68a8      	ldr	r0, [r5, #8]
 8011c0e:	4622      	mov	r2, r4
 8011c10:	1b36      	subs	r6, r6, r4
 8011c12:	f00b fa0a 	bl	801d02a <memcpy>
 8011c16:	68ab      	ldr	r3, [r5, #8]
 8011c18:	6928      	ldr	r0, [r5, #16]
 8011c1a:	4423      	add	r3, r4
 8011c1c:	4420      	add	r0, r4
 8011c1e:	60ab      	str	r3, [r5, #8]
 8011c20:	6128      	str	r0, [r5, #16]
 8011c22:	4631      	mov	r1, r6
 8011c24:	2201      	movs	r2, #1
 8011c26:	4628      	mov	r0, r5
 8011c28:	f001 fd04 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011c2c:	1bb9      	subs	r1, r7, r6
 8011c2e:	4604      	mov	r4, r0
 8011c30:	2800      	cmp	r0, #0
 8011c32:	d1ea      	bne.n	8011c0a <ucdr_serialize_endian_array_char+0x16>
 8011c34:	2301      	movs	r3, #1
 8011c36:	7da8      	ldrb	r0, [r5, #22]
 8011c38:	756b      	strb	r3, [r5, #21]
 8011c3a:	4058      	eors	r0, r3
 8011c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c40:	463a      	mov	r2, r7
 8011c42:	4641      	mov	r1, r8
 8011c44:	68a8      	ldr	r0, [r5, #8]
 8011c46:	f00b f9f0 	bl	801d02a <memcpy>
 8011c4a:	68aa      	ldr	r2, [r5, #8]
 8011c4c:	692b      	ldr	r3, [r5, #16]
 8011c4e:	443a      	add	r2, r7
 8011c50:	443b      	add	r3, r7
 8011c52:	60aa      	str	r2, [r5, #8]
 8011c54:	612b      	str	r3, [r5, #16]
 8011c56:	e7ed      	b.n	8011c34 <ucdr_serialize_endian_array_char+0x40>

08011c58 <ucdr_deserialize_endian_array_char>:
 8011c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	461f      	mov	r7, r3
 8011c60:	4605      	mov	r5, r0
 8011c62:	4690      	mov	r8, r2
 8011c64:	f001 fc5c 	bl	8013520 <ucdr_check_buffer_available_for>
 8011c68:	b9e8      	cbnz	r0, 8011ca6 <ucdr_deserialize_endian_array_char+0x4e>
 8011c6a:	463e      	mov	r6, r7
 8011c6c:	e00c      	b.n	8011c88 <ucdr_deserialize_endian_array_char+0x30>
 8011c6e:	eb08 0003 	add.w	r0, r8, r3
 8011c72:	68a9      	ldr	r1, [r5, #8]
 8011c74:	4622      	mov	r2, r4
 8011c76:	1b36      	subs	r6, r6, r4
 8011c78:	f00b f9d7 	bl	801d02a <memcpy>
 8011c7c:	68ab      	ldr	r3, [r5, #8]
 8011c7e:	6928      	ldr	r0, [r5, #16]
 8011c80:	4423      	add	r3, r4
 8011c82:	4420      	add	r0, r4
 8011c84:	60ab      	str	r3, [r5, #8]
 8011c86:	6128      	str	r0, [r5, #16]
 8011c88:	4631      	mov	r1, r6
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f001 fcd1 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011c92:	1bbb      	subs	r3, r7, r6
 8011c94:	4604      	mov	r4, r0
 8011c96:	2800      	cmp	r0, #0
 8011c98:	d1e9      	bne.n	8011c6e <ucdr_deserialize_endian_array_char+0x16>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	7da8      	ldrb	r0, [r5, #22]
 8011c9e:	756b      	strb	r3, [r5, #21]
 8011ca0:	4058      	eors	r0, r3
 8011ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca6:	463a      	mov	r2, r7
 8011ca8:	68a9      	ldr	r1, [r5, #8]
 8011caa:	4640      	mov	r0, r8
 8011cac:	f00b f9bd 	bl	801d02a <memcpy>
 8011cb0:	68aa      	ldr	r2, [r5, #8]
 8011cb2:	692b      	ldr	r3, [r5, #16]
 8011cb4:	443a      	add	r2, r7
 8011cb6:	443b      	add	r3, r7
 8011cb8:	60aa      	str	r2, [r5, #8]
 8011cba:	612b      	str	r3, [r5, #16]
 8011cbc:	e7ed      	b.n	8011c9a <ucdr_deserialize_endian_array_char+0x42>
 8011cbe:	bf00      	nop

08011cc0 <ucdr_serialize_array_uint8_t>:
 8011cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc4:	4688      	mov	r8, r1
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	4617      	mov	r7, r2
 8011cca:	4605      	mov	r5, r0
 8011ccc:	f001 fc28 	bl	8013520 <ucdr_check_buffer_available_for>
 8011cd0:	b9e0      	cbnz	r0, 8011d0c <ucdr_serialize_array_uint8_t+0x4c>
 8011cd2:	463e      	mov	r6, r7
 8011cd4:	e00b      	b.n	8011cee <ucdr_serialize_array_uint8_t+0x2e>
 8011cd6:	4441      	add	r1, r8
 8011cd8:	68a8      	ldr	r0, [r5, #8]
 8011cda:	4622      	mov	r2, r4
 8011cdc:	1b36      	subs	r6, r6, r4
 8011cde:	f00b f9a4 	bl	801d02a <memcpy>
 8011ce2:	68ab      	ldr	r3, [r5, #8]
 8011ce4:	6928      	ldr	r0, [r5, #16]
 8011ce6:	4423      	add	r3, r4
 8011ce8:	4420      	add	r0, r4
 8011cea:	60ab      	str	r3, [r5, #8]
 8011cec:	6128      	str	r0, [r5, #16]
 8011cee:	4631      	mov	r1, r6
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f001 fc9e 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011cf8:	1bb9      	subs	r1, r7, r6
 8011cfa:	4604      	mov	r4, r0
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d1ea      	bne.n	8011cd6 <ucdr_serialize_array_uint8_t+0x16>
 8011d00:	2301      	movs	r3, #1
 8011d02:	7da8      	ldrb	r0, [r5, #22]
 8011d04:	756b      	strb	r3, [r5, #21]
 8011d06:	4058      	eors	r0, r3
 8011d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d0c:	463a      	mov	r2, r7
 8011d0e:	4641      	mov	r1, r8
 8011d10:	68a8      	ldr	r0, [r5, #8]
 8011d12:	f00b f98a 	bl	801d02a <memcpy>
 8011d16:	68aa      	ldr	r2, [r5, #8]
 8011d18:	692b      	ldr	r3, [r5, #16]
 8011d1a:	443a      	add	r2, r7
 8011d1c:	443b      	add	r3, r7
 8011d1e:	60aa      	str	r2, [r5, #8]
 8011d20:	612b      	str	r3, [r5, #16]
 8011d22:	e7ed      	b.n	8011d00 <ucdr_serialize_array_uint8_t+0x40>

08011d24 <ucdr_serialize_endian_array_uint8_t>:
 8011d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d28:	4619      	mov	r1, r3
 8011d2a:	461f      	mov	r7, r3
 8011d2c:	4605      	mov	r5, r0
 8011d2e:	4690      	mov	r8, r2
 8011d30:	f001 fbf6 	bl	8013520 <ucdr_check_buffer_available_for>
 8011d34:	b9e0      	cbnz	r0, 8011d70 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011d36:	463e      	mov	r6, r7
 8011d38:	e00b      	b.n	8011d52 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8011d3a:	4441      	add	r1, r8
 8011d3c:	68a8      	ldr	r0, [r5, #8]
 8011d3e:	4622      	mov	r2, r4
 8011d40:	1b36      	subs	r6, r6, r4
 8011d42:	f00b f972 	bl	801d02a <memcpy>
 8011d46:	68ab      	ldr	r3, [r5, #8]
 8011d48:	6928      	ldr	r0, [r5, #16]
 8011d4a:	4423      	add	r3, r4
 8011d4c:	4420      	add	r0, r4
 8011d4e:	60ab      	str	r3, [r5, #8]
 8011d50:	6128      	str	r0, [r5, #16]
 8011d52:	4631      	mov	r1, r6
 8011d54:	2201      	movs	r2, #1
 8011d56:	4628      	mov	r0, r5
 8011d58:	f001 fc6c 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011d5c:	1bb9      	subs	r1, r7, r6
 8011d5e:	4604      	mov	r4, r0
 8011d60:	2800      	cmp	r0, #0
 8011d62:	d1ea      	bne.n	8011d3a <ucdr_serialize_endian_array_uint8_t+0x16>
 8011d64:	2301      	movs	r3, #1
 8011d66:	7da8      	ldrb	r0, [r5, #22]
 8011d68:	756b      	strb	r3, [r5, #21]
 8011d6a:	4058      	eors	r0, r3
 8011d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d70:	463a      	mov	r2, r7
 8011d72:	4641      	mov	r1, r8
 8011d74:	68a8      	ldr	r0, [r5, #8]
 8011d76:	f00b f958 	bl	801d02a <memcpy>
 8011d7a:	68aa      	ldr	r2, [r5, #8]
 8011d7c:	692b      	ldr	r3, [r5, #16]
 8011d7e:	443a      	add	r2, r7
 8011d80:	443b      	add	r3, r7
 8011d82:	60aa      	str	r2, [r5, #8]
 8011d84:	612b      	str	r3, [r5, #16]
 8011d86:	e7ed      	b.n	8011d64 <ucdr_serialize_endian_array_uint8_t+0x40>

08011d88 <ucdr_deserialize_array_uint8_t>:
 8011d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d8c:	4688      	mov	r8, r1
 8011d8e:	4611      	mov	r1, r2
 8011d90:	4617      	mov	r7, r2
 8011d92:	4605      	mov	r5, r0
 8011d94:	f001 fbc4 	bl	8013520 <ucdr_check_buffer_available_for>
 8011d98:	b9e8      	cbnz	r0, 8011dd6 <ucdr_deserialize_array_uint8_t+0x4e>
 8011d9a:	463e      	mov	r6, r7
 8011d9c:	e00c      	b.n	8011db8 <ucdr_deserialize_array_uint8_t+0x30>
 8011d9e:	eb08 0003 	add.w	r0, r8, r3
 8011da2:	68a9      	ldr	r1, [r5, #8]
 8011da4:	4622      	mov	r2, r4
 8011da6:	1b36      	subs	r6, r6, r4
 8011da8:	f00b f93f 	bl	801d02a <memcpy>
 8011dac:	68ab      	ldr	r3, [r5, #8]
 8011dae:	6928      	ldr	r0, [r5, #16]
 8011db0:	4423      	add	r3, r4
 8011db2:	4420      	add	r0, r4
 8011db4:	60ab      	str	r3, [r5, #8]
 8011db6:	6128      	str	r0, [r5, #16]
 8011db8:	4631      	mov	r1, r6
 8011dba:	2201      	movs	r2, #1
 8011dbc:	4628      	mov	r0, r5
 8011dbe:	f001 fc39 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011dc2:	1bbb      	subs	r3, r7, r6
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d1e9      	bne.n	8011d9e <ucdr_deserialize_array_uint8_t+0x16>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	7da8      	ldrb	r0, [r5, #22]
 8011dce:	756b      	strb	r3, [r5, #21]
 8011dd0:	4058      	eors	r0, r3
 8011dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd6:	463a      	mov	r2, r7
 8011dd8:	68a9      	ldr	r1, [r5, #8]
 8011dda:	4640      	mov	r0, r8
 8011ddc:	f00b f925 	bl	801d02a <memcpy>
 8011de0:	68aa      	ldr	r2, [r5, #8]
 8011de2:	692b      	ldr	r3, [r5, #16]
 8011de4:	443a      	add	r2, r7
 8011de6:	443b      	add	r3, r7
 8011de8:	60aa      	str	r2, [r5, #8]
 8011dea:	612b      	str	r3, [r5, #16]
 8011dec:	e7ed      	b.n	8011dca <ucdr_deserialize_array_uint8_t+0x42>
 8011dee:	bf00      	nop

08011df0 <ucdr_deserialize_endian_array_uint8_t>:
 8011df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df4:	4619      	mov	r1, r3
 8011df6:	461f      	mov	r7, r3
 8011df8:	4605      	mov	r5, r0
 8011dfa:	4690      	mov	r8, r2
 8011dfc:	f001 fb90 	bl	8013520 <ucdr_check_buffer_available_for>
 8011e00:	b9e8      	cbnz	r0, 8011e3e <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8011e02:	463e      	mov	r6, r7
 8011e04:	e00c      	b.n	8011e20 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8011e06:	eb08 0003 	add.w	r0, r8, r3
 8011e0a:	68a9      	ldr	r1, [r5, #8]
 8011e0c:	4622      	mov	r2, r4
 8011e0e:	1b36      	subs	r6, r6, r4
 8011e10:	f00b f90b 	bl	801d02a <memcpy>
 8011e14:	68ab      	ldr	r3, [r5, #8]
 8011e16:	6928      	ldr	r0, [r5, #16]
 8011e18:	4423      	add	r3, r4
 8011e1a:	4420      	add	r0, r4
 8011e1c:	60ab      	str	r3, [r5, #8]
 8011e1e:	6128      	str	r0, [r5, #16]
 8011e20:	4631      	mov	r1, r6
 8011e22:	2201      	movs	r2, #1
 8011e24:	4628      	mov	r0, r5
 8011e26:	f001 fc05 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011e2a:	1bbb      	subs	r3, r7, r6
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d1e9      	bne.n	8011e06 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011e32:	2301      	movs	r3, #1
 8011e34:	7da8      	ldrb	r0, [r5, #22]
 8011e36:	756b      	strb	r3, [r5, #21]
 8011e38:	4058      	eors	r0, r3
 8011e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e3e:	463a      	mov	r2, r7
 8011e40:	68a9      	ldr	r1, [r5, #8]
 8011e42:	4640      	mov	r0, r8
 8011e44:	f00b f8f1 	bl	801d02a <memcpy>
 8011e48:	68aa      	ldr	r2, [r5, #8]
 8011e4a:	692b      	ldr	r3, [r5, #16]
 8011e4c:	443a      	add	r2, r7
 8011e4e:	443b      	add	r3, r7
 8011e50:	60aa      	str	r2, [r5, #8]
 8011e52:	612b      	str	r3, [r5, #16]
 8011e54:	e7ed      	b.n	8011e32 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8011e56:	bf00      	nop

08011e58 <ucdr_serialize_array_double>:
 8011e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e5c:	4604      	mov	r4, r0
 8011e5e:	460e      	mov	r6, r1
 8011e60:	2108      	movs	r1, #8
 8011e62:	4617      	mov	r7, r2
 8011e64:	f001 fbbc 	bl	80135e0 <ucdr_buffer_alignment>
 8011e68:	4601      	mov	r1, r0
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	7d65      	ldrb	r5, [r4, #21]
 8011e6e:	f001 fbff 	bl	8013670 <ucdr_advance_buffer>
 8011e72:	7d21      	ldrb	r1, [r4, #20]
 8011e74:	7565      	strb	r5, [r4, #21]
 8011e76:	2901      	cmp	r1, #1
 8011e78:	d010      	beq.n	8011e9c <ucdr_serialize_array_double+0x44>
 8011e7a:	b157      	cbz	r7, 8011e92 <ucdr_serialize_array_double+0x3a>
 8011e7c:	2500      	movs	r5, #0
 8011e7e:	e000      	b.n	8011e82 <ucdr_serialize_array_double+0x2a>
 8011e80:	7d21      	ldrb	r1, [r4, #20]
 8011e82:	3501      	adds	r5, #1
 8011e84:	4620      	mov	r0, r4
 8011e86:	ecb6 0b02 	vldmia	r6!, {d0}
 8011e8a:	f001 f8e3 	bl	8013054 <ucdr_serialize_endian_double>
 8011e8e:	42af      	cmp	r7, r5
 8011e90:	d1f6      	bne.n	8011e80 <ucdr_serialize_array_double+0x28>
 8011e92:	7da0      	ldrb	r0, [r4, #22]
 8011e94:	f080 0001 	eor.w	r0, r0, #1
 8011e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e9c:	00ff      	lsls	r7, r7, #3
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	4639      	mov	r1, r7
 8011ea2:	f001 fb3d 	bl	8013520 <ucdr_check_buffer_available_for>
 8011ea6:	b9f8      	cbnz	r0, 8011ee8 <ucdr_serialize_array_double+0x90>
 8011ea8:	46b8      	mov	r8, r7
 8011eaa:	e00c      	b.n	8011ec6 <ucdr_serialize_array_double+0x6e>
 8011eac:	462a      	mov	r2, r5
 8011eae:	4431      	add	r1, r6
 8011eb0:	68a0      	ldr	r0, [r4, #8]
 8011eb2:	eba8 0805 	sub.w	r8, r8, r5
 8011eb6:	f00b f8b8 	bl	801d02a <memcpy>
 8011eba:	68a2      	ldr	r2, [r4, #8]
 8011ebc:	6923      	ldr	r3, [r4, #16]
 8011ebe:	442a      	add	r2, r5
 8011ec0:	442b      	add	r3, r5
 8011ec2:	60a2      	str	r2, [r4, #8]
 8011ec4:	6123      	str	r3, [r4, #16]
 8011ec6:	4641      	mov	r1, r8
 8011ec8:	2208      	movs	r2, #8
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f001 fbb2 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011ed0:	eba7 0108 	sub.w	r1, r7, r8
 8011ed4:	4605      	mov	r5, r0
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	d1e8      	bne.n	8011eac <ucdr_serialize_array_double+0x54>
 8011eda:	2308      	movs	r3, #8
 8011edc:	7da0      	ldrb	r0, [r4, #22]
 8011ede:	7563      	strb	r3, [r4, #21]
 8011ee0:	f080 0001 	eor.w	r0, r0, #1
 8011ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ee8:	463a      	mov	r2, r7
 8011eea:	4631      	mov	r1, r6
 8011eec:	68a0      	ldr	r0, [r4, #8]
 8011eee:	f00b f89c 	bl	801d02a <memcpy>
 8011ef2:	68a2      	ldr	r2, [r4, #8]
 8011ef4:	6923      	ldr	r3, [r4, #16]
 8011ef6:	443a      	add	r2, r7
 8011ef8:	441f      	add	r7, r3
 8011efa:	60a2      	str	r2, [r4, #8]
 8011efc:	6127      	str	r7, [r4, #16]
 8011efe:	e7ec      	b.n	8011eda <ucdr_serialize_array_double+0x82>

08011f00 <ucdr_deserialize_array_double>:
 8011f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f04:	4604      	mov	r4, r0
 8011f06:	460e      	mov	r6, r1
 8011f08:	2108      	movs	r1, #8
 8011f0a:	4617      	mov	r7, r2
 8011f0c:	f001 fb68 	bl	80135e0 <ucdr_buffer_alignment>
 8011f10:	4601      	mov	r1, r0
 8011f12:	4620      	mov	r0, r4
 8011f14:	7d65      	ldrb	r5, [r4, #21]
 8011f16:	f001 fbab 	bl	8013670 <ucdr_advance_buffer>
 8011f1a:	7d21      	ldrb	r1, [r4, #20]
 8011f1c:	7565      	strb	r5, [r4, #21]
 8011f1e:	2901      	cmp	r1, #1
 8011f20:	d010      	beq.n	8011f44 <ucdr_deserialize_array_double+0x44>
 8011f22:	b157      	cbz	r7, 8011f3a <ucdr_deserialize_array_double+0x3a>
 8011f24:	2500      	movs	r5, #0
 8011f26:	e000      	b.n	8011f2a <ucdr_deserialize_array_double+0x2a>
 8011f28:	7d21      	ldrb	r1, [r4, #20]
 8011f2a:	3501      	adds	r5, #1
 8011f2c:	4632      	mov	r2, r6
 8011f2e:	4620      	mov	r0, r4
 8011f30:	3608      	adds	r6, #8
 8011f32:	f001 fa27 	bl	8013384 <ucdr_deserialize_endian_double>
 8011f36:	42af      	cmp	r7, r5
 8011f38:	d1f6      	bne.n	8011f28 <ucdr_deserialize_array_double+0x28>
 8011f3a:	7da0      	ldrb	r0, [r4, #22]
 8011f3c:	f080 0001 	eor.w	r0, r0, #1
 8011f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f44:	00ff      	lsls	r7, r7, #3
 8011f46:	4620      	mov	r0, r4
 8011f48:	4639      	mov	r1, r7
 8011f4a:	f001 fae9 	bl	8013520 <ucdr_check_buffer_available_for>
 8011f4e:	b9f8      	cbnz	r0, 8011f90 <ucdr_deserialize_array_double+0x90>
 8011f50:	46b8      	mov	r8, r7
 8011f52:	e00c      	b.n	8011f6e <ucdr_deserialize_array_double+0x6e>
 8011f54:	18f0      	adds	r0, r6, r3
 8011f56:	462a      	mov	r2, r5
 8011f58:	68a1      	ldr	r1, [r4, #8]
 8011f5a:	eba8 0805 	sub.w	r8, r8, r5
 8011f5e:	f00b f864 	bl	801d02a <memcpy>
 8011f62:	68a2      	ldr	r2, [r4, #8]
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	442a      	add	r2, r5
 8011f68:	442b      	add	r3, r5
 8011f6a:	60a2      	str	r2, [r4, #8]
 8011f6c:	6123      	str	r3, [r4, #16]
 8011f6e:	4641      	mov	r1, r8
 8011f70:	2208      	movs	r2, #8
 8011f72:	4620      	mov	r0, r4
 8011f74:	f001 fb5e 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 8011f78:	eba7 0308 	sub.w	r3, r7, r8
 8011f7c:	4605      	mov	r5, r0
 8011f7e:	2800      	cmp	r0, #0
 8011f80:	d1e8      	bne.n	8011f54 <ucdr_deserialize_array_double+0x54>
 8011f82:	2308      	movs	r3, #8
 8011f84:	7da0      	ldrb	r0, [r4, #22]
 8011f86:	7563      	strb	r3, [r4, #21]
 8011f88:	f080 0001 	eor.w	r0, r0, #1
 8011f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f90:	463a      	mov	r2, r7
 8011f92:	68a1      	ldr	r1, [r4, #8]
 8011f94:	4630      	mov	r0, r6
 8011f96:	f00b f848 	bl	801d02a <memcpy>
 8011f9a:	68a2      	ldr	r2, [r4, #8]
 8011f9c:	6923      	ldr	r3, [r4, #16]
 8011f9e:	443a      	add	r2, r7
 8011fa0:	441f      	add	r7, r3
 8011fa2:	60a2      	str	r2, [r4, #8]
 8011fa4:	6127      	str	r7, [r4, #16]
 8011fa6:	e7ec      	b.n	8011f82 <ucdr_deserialize_array_double+0x82>

08011fa8 <ucdr_serialize_bool>:
 8011fa8:	b538      	push	{r3, r4, r5, lr}
 8011faa:	460d      	mov	r5, r1
 8011fac:	2101      	movs	r1, #1
 8011fae:	4604      	mov	r4, r0
 8011fb0:	f001 fac2 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8011fb4:	b148      	cbz	r0, 8011fca <ucdr_serialize_bool+0x22>
 8011fb6:	68a3      	ldr	r3, [r4, #8]
 8011fb8:	2101      	movs	r1, #1
 8011fba:	701d      	strb	r5, [r3, #0]
 8011fbc:	68a2      	ldr	r2, [r4, #8]
 8011fbe:	6923      	ldr	r3, [r4, #16]
 8011fc0:	440a      	add	r2, r1
 8011fc2:	7561      	strb	r1, [r4, #21]
 8011fc4:	440b      	add	r3, r1
 8011fc6:	60a2      	str	r2, [r4, #8]
 8011fc8:	6123      	str	r3, [r4, #16]
 8011fca:	7da0      	ldrb	r0, [r4, #22]
 8011fcc:	f080 0001 	eor.w	r0, r0, #1
 8011fd0:	bd38      	pop	{r3, r4, r5, pc}
 8011fd2:	bf00      	nop

08011fd4 <ucdr_deserialize_bool>:
 8011fd4:	b538      	push	{r3, r4, r5, lr}
 8011fd6:	460d      	mov	r5, r1
 8011fd8:	2101      	movs	r1, #1
 8011fda:	4604      	mov	r4, r0
 8011fdc:	f001 faac 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8011fe0:	b160      	cbz	r0, 8011ffc <ucdr_deserialize_bool+0x28>
 8011fe2:	68a2      	ldr	r2, [r4, #8]
 8011fe4:	2101      	movs	r1, #1
 8011fe6:	6923      	ldr	r3, [r4, #16]
 8011fe8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011fec:	440b      	add	r3, r1
 8011fee:	3800      	subs	r0, #0
 8011ff0:	bf18      	it	ne
 8011ff2:	2001      	movne	r0, #1
 8011ff4:	7028      	strb	r0, [r5, #0]
 8011ff6:	60a2      	str	r2, [r4, #8]
 8011ff8:	6123      	str	r3, [r4, #16]
 8011ffa:	7561      	strb	r1, [r4, #21]
 8011ffc:	7da0      	ldrb	r0, [r4, #22]
 8011ffe:	f080 0001 	eor.w	r0, r0, #1
 8012002:	bd38      	pop	{r3, r4, r5, pc}

08012004 <ucdr_serialize_uint8_t>:
 8012004:	b538      	push	{r3, r4, r5, lr}
 8012006:	460d      	mov	r5, r1
 8012008:	2101      	movs	r1, #1
 801200a:	4604      	mov	r4, r0
 801200c:	f001 fa94 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012010:	b148      	cbz	r0, 8012026 <ucdr_serialize_uint8_t+0x22>
 8012012:	68a3      	ldr	r3, [r4, #8]
 8012014:	2101      	movs	r1, #1
 8012016:	701d      	strb	r5, [r3, #0]
 8012018:	68a2      	ldr	r2, [r4, #8]
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	440a      	add	r2, r1
 801201e:	7561      	strb	r1, [r4, #21]
 8012020:	440b      	add	r3, r1
 8012022:	60a2      	str	r2, [r4, #8]
 8012024:	6123      	str	r3, [r4, #16]
 8012026:	7da0      	ldrb	r0, [r4, #22]
 8012028:	f080 0001 	eor.w	r0, r0, #1
 801202c:	bd38      	pop	{r3, r4, r5, pc}
 801202e:	bf00      	nop

08012030 <ucdr_deserialize_uint8_t>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	460d      	mov	r5, r1
 8012034:	2101      	movs	r1, #1
 8012036:	4604      	mov	r4, r0
 8012038:	f001 fa7e 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801203c:	b150      	cbz	r0, 8012054 <ucdr_deserialize_uint8_t+0x24>
 801203e:	68a3      	ldr	r3, [r4, #8]
 8012040:	2101      	movs	r1, #1
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	702b      	strb	r3, [r5, #0]
 8012046:	68a2      	ldr	r2, [r4, #8]
 8012048:	6923      	ldr	r3, [r4, #16]
 801204a:	440a      	add	r2, r1
 801204c:	7561      	strb	r1, [r4, #21]
 801204e:	440b      	add	r3, r1
 8012050:	60a2      	str	r2, [r4, #8]
 8012052:	6123      	str	r3, [r4, #16]
 8012054:	7da0      	ldrb	r0, [r4, #22]
 8012056:	f080 0001 	eor.w	r0, r0, #1
 801205a:	bd38      	pop	{r3, r4, r5, pc}

0801205c <ucdr_serialize_uint16_t>:
 801205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012060:	460b      	mov	r3, r1
 8012062:	b082      	sub	sp, #8
 8012064:	4604      	mov	r4, r0
 8012066:	2102      	movs	r1, #2
 8012068:	f8ad 3006 	strh.w	r3, [sp, #6]
 801206c:	f001 fab8 	bl	80135e0 <ucdr_buffer_alignment>
 8012070:	4601      	mov	r1, r0
 8012072:	4620      	mov	r0, r4
 8012074:	7d67      	ldrb	r7, [r4, #21]
 8012076:	f001 fafb 	bl	8013670 <ucdr_advance_buffer>
 801207a:	2102      	movs	r1, #2
 801207c:	4620      	mov	r0, r4
 801207e:	f001 fa4f 	bl	8013520 <ucdr_check_buffer_available_for>
 8012082:	bb78      	cbnz	r0, 80120e4 <ucdr_serialize_uint16_t+0x88>
 8012084:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012088:	42ab      	cmp	r3, r5
 801208a:	d926      	bls.n	80120da <ucdr_serialize_uint16_t+0x7e>
 801208c:	1b5e      	subs	r6, r3, r5
 801208e:	60a3      	str	r3, [r4, #8]
 8012090:	6923      	ldr	r3, [r4, #16]
 8012092:	4620      	mov	r0, r4
 8012094:	f1c6 0802 	rsb	r8, r6, #2
 8012098:	4433      	add	r3, r6
 801209a:	4641      	mov	r1, r8
 801209c:	6123      	str	r3, [r4, #16]
 801209e:	f001 fa4b 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d03b      	beq.n	801211e <ucdr_serialize_uint16_t+0xc2>
 80120a6:	7d23      	ldrb	r3, [r4, #20]
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	d04a      	beq.n	8012142 <ucdr_serialize_uint16_t+0xe6>
 80120ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120b0:	702b      	strb	r3, [r5, #0]
 80120b2:	2e00      	cmp	r6, #0
 80120b4:	d040      	beq.n	8012138 <ucdr_serialize_uint16_t+0xdc>
 80120b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80120ba:	706b      	strb	r3, [r5, #1]
 80120bc:	6923      	ldr	r3, [r4, #16]
 80120be:	2102      	movs	r1, #2
 80120c0:	68a2      	ldr	r2, [r4, #8]
 80120c2:	3302      	adds	r3, #2
 80120c4:	7da0      	ldrb	r0, [r4, #22]
 80120c6:	4442      	add	r2, r8
 80120c8:	7561      	strb	r1, [r4, #21]
 80120ca:	1b9e      	subs	r6, r3, r6
 80120cc:	f080 0001 	eor.w	r0, r0, #1
 80120d0:	60a2      	str	r2, [r4, #8]
 80120d2:	6126      	str	r6, [r4, #16]
 80120d4:	b002      	add	sp, #8
 80120d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120da:	2102      	movs	r1, #2
 80120dc:	4620      	mov	r0, r4
 80120de:	f001 fa2b 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80120e2:	b190      	cbz	r0, 801210a <ucdr_serialize_uint16_t+0xae>
 80120e4:	7d23      	ldrb	r3, [r4, #20]
 80120e6:	2b01      	cmp	r3, #1
 80120e8:	68a3      	ldr	r3, [r4, #8]
 80120ea:	d014      	beq.n	8012116 <ucdr_serialize_uint16_t+0xba>
 80120ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80120f0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80120f4:	7019      	strb	r1, [r3, #0]
 80120f6:	68a3      	ldr	r3, [r4, #8]
 80120f8:	705a      	strb	r2, [r3, #1]
 80120fa:	2102      	movs	r1, #2
 80120fc:	68a2      	ldr	r2, [r4, #8]
 80120fe:	6923      	ldr	r3, [r4, #16]
 8012100:	440a      	add	r2, r1
 8012102:	7561      	strb	r1, [r4, #21]
 8012104:	440b      	add	r3, r1
 8012106:	60a2      	str	r2, [r4, #8]
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	7da0      	ldrb	r0, [r4, #22]
 801210c:	f080 0001 	eor.w	r0, r0, #1
 8012110:	b002      	add	sp, #8
 8012112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012116:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801211a:	801a      	strh	r2, [r3, #0]
 801211c:	e7ed      	b.n	80120fa <ucdr_serialize_uint16_t+0x9e>
 801211e:	68a2      	ldr	r2, [r4, #8]
 8012120:	6923      	ldr	r3, [r4, #16]
 8012122:	7da0      	ldrb	r0, [r4, #22]
 8012124:	1b92      	subs	r2, r2, r6
 8012126:	1b9b      	subs	r3, r3, r6
 8012128:	7567      	strb	r7, [r4, #21]
 801212a:	f080 0001 	eor.w	r0, r0, #1
 801212e:	60a2      	str	r2, [r4, #8]
 8012130:	6123      	str	r3, [r4, #16]
 8012132:	b002      	add	sp, #8
 8012134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012138:	68a3      	ldr	r3, [r4, #8]
 801213a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801213e:	701a      	strb	r2, [r3, #0]
 8012140:	e7bc      	b.n	80120bc <ucdr_serialize_uint16_t+0x60>
 8012142:	4628      	mov	r0, r5
 8012144:	f10d 0506 	add.w	r5, sp, #6
 8012148:	4632      	mov	r2, r6
 801214a:	4629      	mov	r1, r5
 801214c:	f00a ff6d 	bl	801d02a <memcpy>
 8012150:	4642      	mov	r2, r8
 8012152:	19a9      	adds	r1, r5, r6
 8012154:	68a0      	ldr	r0, [r4, #8]
 8012156:	f00a ff68 	bl	801d02a <memcpy>
 801215a:	e7af      	b.n	80120bc <ucdr_serialize_uint16_t+0x60>

0801215c <ucdr_serialize_endian_uint16_t>:
 801215c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012160:	4604      	mov	r4, r0
 8012162:	b083      	sub	sp, #12
 8012164:	460d      	mov	r5, r1
 8012166:	2102      	movs	r1, #2
 8012168:	f8ad 2006 	strh.w	r2, [sp, #6]
 801216c:	f001 fa38 	bl	80135e0 <ucdr_buffer_alignment>
 8012170:	4601      	mov	r1, r0
 8012172:	4620      	mov	r0, r4
 8012174:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012178:	f001 fa7a 	bl	8013670 <ucdr_advance_buffer>
 801217c:	2102      	movs	r1, #2
 801217e:	4620      	mov	r0, r4
 8012180:	f001 f9ce 	bl	8013520 <ucdr_check_buffer_available_for>
 8012184:	bb70      	cbnz	r0, 80121e4 <ucdr_serialize_endian_uint16_t+0x88>
 8012186:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801218a:	42be      	cmp	r6, r7
 801218c:	d925      	bls.n	80121da <ucdr_serialize_endian_uint16_t+0x7e>
 801218e:	6923      	ldr	r3, [r4, #16]
 8012190:	4620      	mov	r0, r4
 8012192:	60a6      	str	r6, [r4, #8]
 8012194:	1bf6      	subs	r6, r6, r7
 8012196:	4433      	add	r3, r6
 8012198:	f1c6 0902 	rsb	r9, r6, #2
 801219c:	6123      	str	r3, [r4, #16]
 801219e:	4649      	mov	r1, r9
 80121a0:	f001 f9ca 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80121a4:	2800      	cmp	r0, #0
 80121a6:	d039      	beq.n	801221c <ucdr_serialize_endian_uint16_t+0xc0>
 80121a8:	2d01      	cmp	r5, #1
 80121aa:	d04a      	beq.n	8012242 <ucdr_serialize_endian_uint16_t+0xe6>
 80121ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80121b0:	703b      	strb	r3, [r7, #0]
 80121b2:	2e00      	cmp	r6, #0
 80121b4:	d040      	beq.n	8012238 <ucdr_serialize_endian_uint16_t+0xdc>
 80121b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80121ba:	707b      	strb	r3, [r7, #1]
 80121bc:	6923      	ldr	r3, [r4, #16]
 80121be:	2102      	movs	r1, #2
 80121c0:	68a2      	ldr	r2, [r4, #8]
 80121c2:	7da0      	ldrb	r0, [r4, #22]
 80121c4:	3302      	adds	r3, #2
 80121c6:	444a      	add	r2, r9
 80121c8:	7561      	strb	r1, [r4, #21]
 80121ca:	1b9b      	subs	r3, r3, r6
 80121cc:	f080 0001 	eor.w	r0, r0, #1
 80121d0:	60a2      	str	r2, [r4, #8]
 80121d2:	6123      	str	r3, [r4, #16]
 80121d4:	b003      	add	sp, #12
 80121d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80121da:	2102      	movs	r1, #2
 80121dc:	4620      	mov	r0, r4
 80121de:	f001 f9ab 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80121e2:	b188      	cbz	r0, 8012208 <ucdr_serialize_endian_uint16_t+0xac>
 80121e4:	2d01      	cmp	r5, #1
 80121e6:	68a3      	ldr	r3, [r4, #8]
 80121e8:	d014      	beq.n	8012214 <ucdr_serialize_endian_uint16_t+0xb8>
 80121ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80121ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121f2:	7019      	strb	r1, [r3, #0]
 80121f4:	68a3      	ldr	r3, [r4, #8]
 80121f6:	705a      	strb	r2, [r3, #1]
 80121f8:	2102      	movs	r1, #2
 80121fa:	68a2      	ldr	r2, [r4, #8]
 80121fc:	6923      	ldr	r3, [r4, #16]
 80121fe:	440a      	add	r2, r1
 8012200:	7561      	strb	r1, [r4, #21]
 8012202:	440b      	add	r3, r1
 8012204:	60a2      	str	r2, [r4, #8]
 8012206:	6123      	str	r3, [r4, #16]
 8012208:	7da0      	ldrb	r0, [r4, #22]
 801220a:	f080 0001 	eor.w	r0, r0, #1
 801220e:	b003      	add	sp, #12
 8012210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012214:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012218:	801a      	strh	r2, [r3, #0]
 801221a:	e7ed      	b.n	80121f8 <ucdr_serialize_endian_uint16_t+0x9c>
 801221c:	68a2      	ldr	r2, [r4, #8]
 801221e:	6923      	ldr	r3, [r4, #16]
 8012220:	7da0      	ldrb	r0, [r4, #22]
 8012222:	1b92      	subs	r2, r2, r6
 8012224:	1b9b      	subs	r3, r3, r6
 8012226:	f884 8015 	strb.w	r8, [r4, #21]
 801222a:	f080 0001 	eor.w	r0, r0, #1
 801222e:	60a2      	str	r2, [r4, #8]
 8012230:	6123      	str	r3, [r4, #16]
 8012232:	b003      	add	sp, #12
 8012234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012238:	68a3      	ldr	r3, [r4, #8]
 801223a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801223e:	701a      	strb	r2, [r3, #0]
 8012240:	e7bc      	b.n	80121bc <ucdr_serialize_endian_uint16_t+0x60>
 8012242:	f10d 0506 	add.w	r5, sp, #6
 8012246:	4632      	mov	r2, r6
 8012248:	4638      	mov	r0, r7
 801224a:	4629      	mov	r1, r5
 801224c:	f00a feed 	bl	801d02a <memcpy>
 8012250:	464a      	mov	r2, r9
 8012252:	19a9      	adds	r1, r5, r6
 8012254:	68a0      	ldr	r0, [r4, #8]
 8012256:	f00a fee8 	bl	801d02a <memcpy>
 801225a:	e7af      	b.n	80121bc <ucdr_serialize_endian_uint16_t+0x60>

0801225c <ucdr_deserialize_uint16_t>:
 801225c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012260:	4604      	mov	r4, r0
 8012262:	460d      	mov	r5, r1
 8012264:	2102      	movs	r1, #2
 8012266:	f001 f9bb 	bl	80135e0 <ucdr_buffer_alignment>
 801226a:	4601      	mov	r1, r0
 801226c:	4620      	mov	r0, r4
 801226e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012272:	f001 f9fd 	bl	8013670 <ucdr_advance_buffer>
 8012276:	2102      	movs	r1, #2
 8012278:	4620      	mov	r0, r4
 801227a:	f001 f951 	bl	8013520 <ucdr_check_buffer_available_for>
 801227e:	bb60      	cbnz	r0, 80122da <ucdr_deserialize_uint16_t+0x7e>
 8012280:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012284:	42be      	cmp	r6, r7
 8012286:	d923      	bls.n	80122d0 <ucdr_deserialize_uint16_t+0x74>
 8012288:	6923      	ldr	r3, [r4, #16]
 801228a:	4620      	mov	r0, r4
 801228c:	60a6      	str	r6, [r4, #8]
 801228e:	1bf6      	subs	r6, r6, r7
 8012290:	4433      	add	r3, r6
 8012292:	f1c6 0902 	rsb	r9, r6, #2
 8012296:	6123      	str	r3, [r4, #16]
 8012298:	4649      	mov	r1, r9
 801229a:	f001 f94d 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d034      	beq.n	801230c <ucdr_deserialize_uint16_t+0xb0>
 80122a2:	7d23      	ldrb	r3, [r4, #20]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d042      	beq.n	801232e <ucdr_deserialize_uint16_t+0xd2>
 80122a8:	787b      	ldrb	r3, [r7, #1]
 80122aa:	702b      	strb	r3, [r5, #0]
 80122ac:	2e00      	cmp	r6, #0
 80122ae:	d03a      	beq.n	8012326 <ucdr_deserialize_uint16_t+0xca>
 80122b0:	783b      	ldrb	r3, [r7, #0]
 80122b2:	706b      	strb	r3, [r5, #1]
 80122b4:	6923      	ldr	r3, [r4, #16]
 80122b6:	2102      	movs	r1, #2
 80122b8:	68a2      	ldr	r2, [r4, #8]
 80122ba:	3302      	adds	r3, #2
 80122bc:	7da0      	ldrb	r0, [r4, #22]
 80122be:	444a      	add	r2, r9
 80122c0:	7561      	strb	r1, [r4, #21]
 80122c2:	1b9b      	subs	r3, r3, r6
 80122c4:	f080 0001 	eor.w	r0, r0, #1
 80122c8:	60a2      	str	r2, [r4, #8]
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122d0:	2102      	movs	r1, #2
 80122d2:	4620      	mov	r0, r4
 80122d4:	f001 f930 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80122d8:	b180      	cbz	r0, 80122fc <ucdr_deserialize_uint16_t+0xa0>
 80122da:	7d23      	ldrb	r3, [r4, #20]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	d011      	beq.n	8012306 <ucdr_deserialize_uint16_t+0xaa>
 80122e2:	785b      	ldrb	r3, [r3, #1]
 80122e4:	702b      	strb	r3, [r5, #0]
 80122e6:	68a3      	ldr	r3, [r4, #8]
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	706b      	strb	r3, [r5, #1]
 80122ec:	2102      	movs	r1, #2
 80122ee:	68a2      	ldr	r2, [r4, #8]
 80122f0:	6923      	ldr	r3, [r4, #16]
 80122f2:	440a      	add	r2, r1
 80122f4:	7561      	strb	r1, [r4, #21]
 80122f6:	440b      	add	r3, r1
 80122f8:	60a2      	str	r2, [r4, #8]
 80122fa:	6123      	str	r3, [r4, #16]
 80122fc:	7da0      	ldrb	r0, [r4, #22]
 80122fe:	f080 0001 	eor.w	r0, r0, #1
 8012302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012306:	881b      	ldrh	r3, [r3, #0]
 8012308:	802b      	strh	r3, [r5, #0]
 801230a:	e7ef      	b.n	80122ec <ucdr_deserialize_uint16_t+0x90>
 801230c:	68a2      	ldr	r2, [r4, #8]
 801230e:	6923      	ldr	r3, [r4, #16]
 8012310:	1b92      	subs	r2, r2, r6
 8012312:	7da0      	ldrb	r0, [r4, #22]
 8012314:	1b9b      	subs	r3, r3, r6
 8012316:	f884 8015 	strb.w	r8, [r4, #21]
 801231a:	f080 0001 	eor.w	r0, r0, #1
 801231e:	60a2      	str	r2, [r4, #8]
 8012320:	6123      	str	r3, [r4, #16]
 8012322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012326:	68a3      	ldr	r3, [r4, #8]
 8012328:	781b      	ldrb	r3, [r3, #0]
 801232a:	706b      	strb	r3, [r5, #1]
 801232c:	e7c2      	b.n	80122b4 <ucdr_deserialize_uint16_t+0x58>
 801232e:	4639      	mov	r1, r7
 8012330:	4632      	mov	r2, r6
 8012332:	4628      	mov	r0, r5
 8012334:	f00a fe79 	bl	801d02a <memcpy>
 8012338:	464a      	mov	r2, r9
 801233a:	19a8      	adds	r0, r5, r6
 801233c:	68a1      	ldr	r1, [r4, #8]
 801233e:	f00a fe74 	bl	801d02a <memcpy>
 8012342:	e7b7      	b.n	80122b4 <ucdr_deserialize_uint16_t+0x58>

08012344 <ucdr_deserialize_endian_uint16_t>:
 8012344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012348:	4604      	mov	r4, r0
 801234a:	460e      	mov	r6, r1
 801234c:	2102      	movs	r1, #2
 801234e:	4615      	mov	r5, r2
 8012350:	f001 f946 	bl	80135e0 <ucdr_buffer_alignment>
 8012354:	4601      	mov	r1, r0
 8012356:	4620      	mov	r0, r4
 8012358:	f894 8015 	ldrb.w	r8, [r4, #21]
 801235c:	f001 f988 	bl	8013670 <ucdr_advance_buffer>
 8012360:	2102      	movs	r1, #2
 8012362:	4620      	mov	r0, r4
 8012364:	f001 f8dc 	bl	8013520 <ucdr_check_buffer_available_for>
 8012368:	bb70      	cbnz	r0, 80123c8 <ucdr_deserialize_endian_uint16_t+0x84>
 801236a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 801236e:	454f      	cmp	r7, r9
 8012370:	d925      	bls.n	80123be <ucdr_deserialize_endian_uint16_t+0x7a>
 8012372:	6923      	ldr	r3, [r4, #16]
 8012374:	4620      	mov	r0, r4
 8012376:	60a7      	str	r7, [r4, #8]
 8012378:	eba7 0709 	sub.w	r7, r7, r9
 801237c:	443b      	add	r3, r7
 801237e:	f1c7 0a02 	rsb	sl, r7, #2
 8012382:	6123      	str	r3, [r4, #16]
 8012384:	4651      	mov	r1, sl
 8012386:	f001 f8d7 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801238a:	2800      	cmp	r0, #0
 801238c:	d034      	beq.n	80123f8 <ucdr_deserialize_endian_uint16_t+0xb4>
 801238e:	2e01      	cmp	r6, #1
 8012390:	d043      	beq.n	801241a <ucdr_deserialize_endian_uint16_t+0xd6>
 8012392:	f899 3001 	ldrb.w	r3, [r9, #1]
 8012396:	702b      	strb	r3, [r5, #0]
 8012398:	2f00      	cmp	r7, #0
 801239a:	d03a      	beq.n	8012412 <ucdr_deserialize_endian_uint16_t+0xce>
 801239c:	f899 3000 	ldrb.w	r3, [r9]
 80123a0:	706b      	strb	r3, [r5, #1]
 80123a2:	6923      	ldr	r3, [r4, #16]
 80123a4:	2102      	movs	r1, #2
 80123a6:	68a2      	ldr	r2, [r4, #8]
 80123a8:	3302      	adds	r3, #2
 80123aa:	7da0      	ldrb	r0, [r4, #22]
 80123ac:	4452      	add	r2, sl
 80123ae:	7561      	strb	r1, [r4, #21]
 80123b0:	1bdb      	subs	r3, r3, r7
 80123b2:	f080 0001 	eor.w	r0, r0, #1
 80123b6:	60a2      	str	r2, [r4, #8]
 80123b8:	6123      	str	r3, [r4, #16]
 80123ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123be:	2102      	movs	r1, #2
 80123c0:	4620      	mov	r0, r4
 80123c2:	f001 f8b9 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80123c6:	b178      	cbz	r0, 80123e8 <ucdr_deserialize_endian_uint16_t+0xa4>
 80123c8:	2e01      	cmp	r6, #1
 80123ca:	68a3      	ldr	r3, [r4, #8]
 80123cc:	d011      	beq.n	80123f2 <ucdr_deserialize_endian_uint16_t+0xae>
 80123ce:	785b      	ldrb	r3, [r3, #1]
 80123d0:	702b      	strb	r3, [r5, #0]
 80123d2:	68a3      	ldr	r3, [r4, #8]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	706b      	strb	r3, [r5, #1]
 80123d8:	2102      	movs	r1, #2
 80123da:	68a2      	ldr	r2, [r4, #8]
 80123dc:	6923      	ldr	r3, [r4, #16]
 80123de:	440a      	add	r2, r1
 80123e0:	7561      	strb	r1, [r4, #21]
 80123e2:	440b      	add	r3, r1
 80123e4:	60a2      	str	r2, [r4, #8]
 80123e6:	6123      	str	r3, [r4, #16]
 80123e8:	7da0      	ldrb	r0, [r4, #22]
 80123ea:	f080 0001 	eor.w	r0, r0, #1
 80123ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f2:	881b      	ldrh	r3, [r3, #0]
 80123f4:	802b      	strh	r3, [r5, #0]
 80123f6:	e7ef      	b.n	80123d8 <ucdr_deserialize_endian_uint16_t+0x94>
 80123f8:	68a2      	ldr	r2, [r4, #8]
 80123fa:	6923      	ldr	r3, [r4, #16]
 80123fc:	1bd2      	subs	r2, r2, r7
 80123fe:	7da0      	ldrb	r0, [r4, #22]
 8012400:	1bdb      	subs	r3, r3, r7
 8012402:	f884 8015 	strb.w	r8, [r4, #21]
 8012406:	f080 0001 	eor.w	r0, r0, #1
 801240a:	60a2      	str	r2, [r4, #8]
 801240c:	6123      	str	r3, [r4, #16]
 801240e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012412:	68a3      	ldr	r3, [r4, #8]
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	706b      	strb	r3, [r5, #1]
 8012418:	e7c3      	b.n	80123a2 <ucdr_deserialize_endian_uint16_t+0x5e>
 801241a:	4649      	mov	r1, r9
 801241c:	463a      	mov	r2, r7
 801241e:	4628      	mov	r0, r5
 8012420:	f00a fe03 	bl	801d02a <memcpy>
 8012424:	4652      	mov	r2, sl
 8012426:	19e8      	adds	r0, r5, r7
 8012428:	68a1      	ldr	r1, [r4, #8]
 801242a:	f00a fdfe 	bl	801d02a <memcpy>
 801242e:	e7b8      	b.n	80123a2 <ucdr_deserialize_endian_uint16_t+0x5e>

08012430 <ucdr_serialize_uint32_t>:
 8012430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012434:	b082      	sub	sp, #8
 8012436:	4604      	mov	r4, r0
 8012438:	9101      	str	r1, [sp, #4]
 801243a:	2104      	movs	r1, #4
 801243c:	f001 f8d0 	bl	80135e0 <ucdr_buffer_alignment>
 8012440:	4601      	mov	r1, r0
 8012442:	4620      	mov	r0, r4
 8012444:	7d67      	ldrb	r7, [r4, #21]
 8012446:	f001 f913 	bl	8013670 <ucdr_advance_buffer>
 801244a:	2104      	movs	r1, #4
 801244c:	4620      	mov	r0, r4
 801244e:	f001 f867 	bl	8013520 <ucdr_check_buffer_available_for>
 8012452:	2800      	cmp	r0, #0
 8012454:	d139      	bne.n	80124ca <ucdr_serialize_uint32_t+0x9a>
 8012456:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801245a:	42ab      	cmp	r3, r5
 801245c:	d930      	bls.n	80124c0 <ucdr_serialize_uint32_t+0x90>
 801245e:	1b5e      	subs	r6, r3, r5
 8012460:	60a3      	str	r3, [r4, #8]
 8012462:	6923      	ldr	r3, [r4, #16]
 8012464:	4620      	mov	r0, r4
 8012466:	f1c6 0804 	rsb	r8, r6, #4
 801246a:	4433      	add	r3, r6
 801246c:	4641      	mov	r1, r8
 801246e:	6123      	str	r3, [r4, #16]
 8012470:	f001 f862 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012474:	2800      	cmp	r0, #0
 8012476:	d04c      	beq.n	8012512 <ucdr_serialize_uint32_t+0xe2>
 8012478:	7d23      	ldrb	r3, [r4, #20]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d063      	beq.n	8012546 <ucdr_serialize_uint32_t+0x116>
 801247e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012482:	702b      	strb	r3, [r5, #0]
 8012484:	2e00      	cmp	r6, #0
 8012486:	d051      	beq.n	801252c <ucdr_serialize_uint32_t+0xfc>
 8012488:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801248c:	2e01      	cmp	r6, #1
 801248e:	706b      	strb	r3, [r5, #1]
 8012490:	d050      	beq.n	8012534 <ucdr_serialize_uint32_t+0x104>
 8012492:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012496:	2e02      	cmp	r6, #2
 8012498:	70ab      	strb	r3, [r5, #2]
 801249a:	d04f      	beq.n	801253c <ucdr_serialize_uint32_t+0x10c>
 801249c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124a0:	70eb      	strb	r3, [r5, #3]
 80124a2:	6923      	ldr	r3, [r4, #16]
 80124a4:	2104      	movs	r1, #4
 80124a6:	68a2      	ldr	r2, [r4, #8]
 80124a8:	3304      	adds	r3, #4
 80124aa:	7da0      	ldrb	r0, [r4, #22]
 80124ac:	4442      	add	r2, r8
 80124ae:	7561      	strb	r1, [r4, #21]
 80124b0:	1b9e      	subs	r6, r3, r6
 80124b2:	f080 0001 	eor.w	r0, r0, #1
 80124b6:	60a2      	str	r2, [r4, #8]
 80124b8:	6126      	str	r6, [r4, #16]
 80124ba:	b002      	add	sp, #8
 80124bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c0:	2104      	movs	r1, #4
 80124c2:	4620      	mov	r0, r4
 80124c4:	f001 f838 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80124c8:	b1d0      	cbz	r0, 8012500 <ucdr_serialize_uint32_t+0xd0>
 80124ca:	7d23      	ldrb	r3, [r4, #20]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	68a3      	ldr	r3, [r4, #8]
 80124d0:	d01c      	beq.n	801250c <ucdr_serialize_uint32_t+0xdc>
 80124d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80124d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80124da:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80124de:	7018      	strb	r0, [r3, #0]
 80124e0:	68a3      	ldr	r3, [r4, #8]
 80124e2:	705a      	strb	r2, [r3, #1]
 80124e4:	68a3      	ldr	r3, [r4, #8]
 80124e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80124ea:	7099      	strb	r1, [r3, #2]
 80124ec:	68a3      	ldr	r3, [r4, #8]
 80124ee:	70da      	strb	r2, [r3, #3]
 80124f0:	2104      	movs	r1, #4
 80124f2:	68a2      	ldr	r2, [r4, #8]
 80124f4:	6923      	ldr	r3, [r4, #16]
 80124f6:	440a      	add	r2, r1
 80124f8:	7561      	strb	r1, [r4, #21]
 80124fa:	440b      	add	r3, r1
 80124fc:	60a2      	str	r2, [r4, #8]
 80124fe:	6123      	str	r3, [r4, #16]
 8012500:	7da0      	ldrb	r0, [r4, #22]
 8012502:	f080 0001 	eor.w	r0, r0, #1
 8012506:	b002      	add	sp, #8
 8012508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801250c:	9a01      	ldr	r2, [sp, #4]
 801250e:	601a      	str	r2, [r3, #0]
 8012510:	e7ee      	b.n	80124f0 <ucdr_serialize_uint32_t+0xc0>
 8012512:	68a2      	ldr	r2, [r4, #8]
 8012514:	6923      	ldr	r3, [r4, #16]
 8012516:	7da0      	ldrb	r0, [r4, #22]
 8012518:	1b92      	subs	r2, r2, r6
 801251a:	1b9b      	subs	r3, r3, r6
 801251c:	7567      	strb	r7, [r4, #21]
 801251e:	f080 0001 	eor.w	r0, r0, #1
 8012522:	60a2      	str	r2, [r4, #8]
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	b002      	add	sp, #8
 8012528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801252c:	68a3      	ldr	r3, [r4, #8]
 801252e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012532:	701a      	strb	r2, [r3, #0]
 8012534:	68a3      	ldr	r3, [r4, #8]
 8012536:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801253a:	701a      	strb	r2, [r3, #0]
 801253c:	68a3      	ldr	r3, [r4, #8]
 801253e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012542:	701a      	strb	r2, [r3, #0]
 8012544:	e7ad      	b.n	80124a2 <ucdr_serialize_uint32_t+0x72>
 8012546:	4628      	mov	r0, r5
 8012548:	ad01      	add	r5, sp, #4
 801254a:	4632      	mov	r2, r6
 801254c:	4629      	mov	r1, r5
 801254e:	f00a fd6c 	bl	801d02a <memcpy>
 8012552:	4642      	mov	r2, r8
 8012554:	19a9      	adds	r1, r5, r6
 8012556:	68a0      	ldr	r0, [r4, #8]
 8012558:	f00a fd67 	bl	801d02a <memcpy>
 801255c:	e7a1      	b.n	80124a2 <ucdr_serialize_uint32_t+0x72>
 801255e:	bf00      	nop

08012560 <ucdr_serialize_endian_uint32_t>:
 8012560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012564:	4604      	mov	r4, r0
 8012566:	b083      	sub	sp, #12
 8012568:	460d      	mov	r5, r1
 801256a:	2104      	movs	r1, #4
 801256c:	9201      	str	r2, [sp, #4]
 801256e:	f001 f837 	bl	80135e0 <ucdr_buffer_alignment>
 8012572:	4601      	mov	r1, r0
 8012574:	4620      	mov	r0, r4
 8012576:	f894 8015 	ldrb.w	r8, [r4, #21]
 801257a:	f001 f879 	bl	8013670 <ucdr_advance_buffer>
 801257e:	2104      	movs	r1, #4
 8012580:	4620      	mov	r0, r4
 8012582:	f000 ffcd 	bl	8013520 <ucdr_check_buffer_available_for>
 8012586:	2800      	cmp	r0, #0
 8012588:	d138      	bne.n	80125fc <ucdr_serialize_endian_uint32_t+0x9c>
 801258a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801258e:	42b7      	cmp	r7, r6
 8012590:	d92f      	bls.n	80125f2 <ucdr_serialize_endian_uint32_t+0x92>
 8012592:	6923      	ldr	r3, [r4, #16]
 8012594:	4620      	mov	r0, r4
 8012596:	60a7      	str	r7, [r4, #8]
 8012598:	1bbf      	subs	r7, r7, r6
 801259a:	443b      	add	r3, r7
 801259c:	f1c7 0904 	rsb	r9, r7, #4
 80125a0:	6123      	str	r3, [r4, #16]
 80125a2:	4649      	mov	r1, r9
 80125a4:	f000 ffc8 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80125a8:	2800      	cmp	r0, #0
 80125aa:	d04a      	beq.n	8012642 <ucdr_serialize_endian_uint32_t+0xe2>
 80125ac:	2d01      	cmp	r5, #1
 80125ae:	d063      	beq.n	8012678 <ucdr_serialize_endian_uint32_t+0x118>
 80125b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80125b4:	7033      	strb	r3, [r6, #0]
 80125b6:	2f00      	cmp	r7, #0
 80125b8:	d051      	beq.n	801265e <ucdr_serialize_endian_uint32_t+0xfe>
 80125ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80125be:	2f01      	cmp	r7, #1
 80125c0:	7073      	strb	r3, [r6, #1]
 80125c2:	d050      	beq.n	8012666 <ucdr_serialize_endian_uint32_t+0x106>
 80125c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80125c8:	2f02      	cmp	r7, #2
 80125ca:	70b3      	strb	r3, [r6, #2]
 80125cc:	d04f      	beq.n	801266e <ucdr_serialize_endian_uint32_t+0x10e>
 80125ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125d2:	70f3      	strb	r3, [r6, #3]
 80125d4:	6923      	ldr	r3, [r4, #16]
 80125d6:	2104      	movs	r1, #4
 80125d8:	68a2      	ldr	r2, [r4, #8]
 80125da:	7da0      	ldrb	r0, [r4, #22]
 80125dc:	3304      	adds	r3, #4
 80125de:	444a      	add	r2, r9
 80125e0:	7561      	strb	r1, [r4, #21]
 80125e2:	1bdb      	subs	r3, r3, r7
 80125e4:	f080 0001 	eor.w	r0, r0, #1
 80125e8:	60a2      	str	r2, [r4, #8]
 80125ea:	6123      	str	r3, [r4, #16]
 80125ec:	b003      	add	sp, #12
 80125ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125f2:	2104      	movs	r1, #4
 80125f4:	4620      	mov	r0, r4
 80125f6:	f000 ff9f 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80125fa:	b1c8      	cbz	r0, 8012630 <ucdr_serialize_endian_uint32_t+0xd0>
 80125fc:	2d01      	cmp	r5, #1
 80125fe:	68a3      	ldr	r3, [r4, #8]
 8012600:	d01c      	beq.n	801263c <ucdr_serialize_endian_uint32_t+0xdc>
 8012602:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012606:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801260a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801260e:	7018      	strb	r0, [r3, #0]
 8012610:	68a3      	ldr	r3, [r4, #8]
 8012612:	705a      	strb	r2, [r3, #1]
 8012614:	68a3      	ldr	r3, [r4, #8]
 8012616:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801261a:	7099      	strb	r1, [r3, #2]
 801261c:	68a3      	ldr	r3, [r4, #8]
 801261e:	70da      	strb	r2, [r3, #3]
 8012620:	2104      	movs	r1, #4
 8012622:	68a2      	ldr	r2, [r4, #8]
 8012624:	6923      	ldr	r3, [r4, #16]
 8012626:	440a      	add	r2, r1
 8012628:	7561      	strb	r1, [r4, #21]
 801262a:	440b      	add	r3, r1
 801262c:	60a2      	str	r2, [r4, #8]
 801262e:	6123      	str	r3, [r4, #16]
 8012630:	7da0      	ldrb	r0, [r4, #22]
 8012632:	f080 0001 	eor.w	r0, r0, #1
 8012636:	b003      	add	sp, #12
 8012638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801263c:	9a01      	ldr	r2, [sp, #4]
 801263e:	601a      	str	r2, [r3, #0]
 8012640:	e7ee      	b.n	8012620 <ucdr_serialize_endian_uint32_t+0xc0>
 8012642:	68a2      	ldr	r2, [r4, #8]
 8012644:	6923      	ldr	r3, [r4, #16]
 8012646:	7da0      	ldrb	r0, [r4, #22]
 8012648:	1bd2      	subs	r2, r2, r7
 801264a:	1bdb      	subs	r3, r3, r7
 801264c:	f884 8015 	strb.w	r8, [r4, #21]
 8012650:	f080 0001 	eor.w	r0, r0, #1
 8012654:	60a2      	str	r2, [r4, #8]
 8012656:	6123      	str	r3, [r4, #16]
 8012658:	b003      	add	sp, #12
 801265a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801265e:	68a3      	ldr	r3, [r4, #8]
 8012660:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	68a3      	ldr	r3, [r4, #8]
 8012668:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801266c:	701a      	strb	r2, [r3, #0]
 801266e:	68a3      	ldr	r3, [r4, #8]
 8012670:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	e7ad      	b.n	80125d4 <ucdr_serialize_endian_uint32_t+0x74>
 8012678:	ad01      	add	r5, sp, #4
 801267a:	463a      	mov	r2, r7
 801267c:	4630      	mov	r0, r6
 801267e:	4629      	mov	r1, r5
 8012680:	f00a fcd3 	bl	801d02a <memcpy>
 8012684:	464a      	mov	r2, r9
 8012686:	19e9      	adds	r1, r5, r7
 8012688:	68a0      	ldr	r0, [r4, #8]
 801268a:	f00a fcce 	bl	801d02a <memcpy>
 801268e:	e7a1      	b.n	80125d4 <ucdr_serialize_endian_uint32_t+0x74>

08012690 <ucdr_deserialize_uint32_t>:
 8012690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012694:	4604      	mov	r4, r0
 8012696:	460d      	mov	r5, r1
 8012698:	2104      	movs	r1, #4
 801269a:	f000 ffa1 	bl	80135e0 <ucdr_buffer_alignment>
 801269e:	4601      	mov	r1, r0
 80126a0:	4620      	mov	r0, r4
 80126a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80126a6:	f000 ffe3 	bl	8013670 <ucdr_advance_buffer>
 80126aa:	2104      	movs	r1, #4
 80126ac:	4620      	mov	r0, r4
 80126ae:	f000 ff37 	bl	8013520 <ucdr_check_buffer_available_for>
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d138      	bne.n	8012728 <ucdr_deserialize_uint32_t+0x98>
 80126b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80126ba:	42b7      	cmp	r7, r6
 80126bc:	d92f      	bls.n	801271e <ucdr_deserialize_uint32_t+0x8e>
 80126be:	6923      	ldr	r3, [r4, #16]
 80126c0:	4620      	mov	r0, r4
 80126c2:	60a7      	str	r7, [r4, #8]
 80126c4:	1bbf      	subs	r7, r7, r6
 80126c6:	443b      	add	r3, r7
 80126c8:	f1c7 0904 	rsb	r9, r7, #4
 80126cc:	6123      	str	r3, [r4, #16]
 80126ce:	4649      	mov	r1, r9
 80126d0:	f000 ff32 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80126d4:	2800      	cmp	r0, #0
 80126d6:	d046      	beq.n	8012766 <ucdr_deserialize_uint32_t+0xd6>
 80126d8:	7d23      	ldrb	r3, [r4, #20]
 80126da:	2b01      	cmp	r3, #1
 80126dc:	d05c      	beq.n	8012798 <ucdr_deserialize_uint32_t+0x108>
 80126de:	78f3      	ldrb	r3, [r6, #3]
 80126e0:	702b      	strb	r3, [r5, #0]
 80126e2:	2f00      	cmp	r7, #0
 80126e4:	d04c      	beq.n	8012780 <ucdr_deserialize_uint32_t+0xf0>
 80126e6:	78b3      	ldrb	r3, [r6, #2]
 80126e8:	2f01      	cmp	r7, #1
 80126ea:	706b      	strb	r3, [r5, #1]
 80126ec:	f105 0302 	add.w	r3, r5, #2
 80126f0:	d04a      	beq.n	8012788 <ucdr_deserialize_uint32_t+0xf8>
 80126f2:	7873      	ldrb	r3, [r6, #1]
 80126f4:	2f02      	cmp	r7, #2
 80126f6:	70ab      	strb	r3, [r5, #2]
 80126f8:	f105 0303 	add.w	r3, r5, #3
 80126fc:	d048      	beq.n	8012790 <ucdr_deserialize_uint32_t+0x100>
 80126fe:	7833      	ldrb	r3, [r6, #0]
 8012700:	70eb      	strb	r3, [r5, #3]
 8012702:	6923      	ldr	r3, [r4, #16]
 8012704:	2104      	movs	r1, #4
 8012706:	68a2      	ldr	r2, [r4, #8]
 8012708:	3304      	adds	r3, #4
 801270a:	7da0      	ldrb	r0, [r4, #22]
 801270c:	444a      	add	r2, r9
 801270e:	7561      	strb	r1, [r4, #21]
 8012710:	1bdb      	subs	r3, r3, r7
 8012712:	f080 0001 	eor.w	r0, r0, #1
 8012716:	60a2      	str	r2, [r4, #8]
 8012718:	6123      	str	r3, [r4, #16]
 801271a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801271e:	2104      	movs	r1, #4
 8012720:	4620      	mov	r0, r4
 8012722:	f000 ff09 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012726:	b1b0      	cbz	r0, 8012756 <ucdr_deserialize_uint32_t+0xc6>
 8012728:	7d23      	ldrb	r3, [r4, #20]
 801272a:	2b01      	cmp	r3, #1
 801272c:	68a3      	ldr	r3, [r4, #8]
 801272e:	d017      	beq.n	8012760 <ucdr_deserialize_uint32_t+0xd0>
 8012730:	78db      	ldrb	r3, [r3, #3]
 8012732:	702b      	strb	r3, [r5, #0]
 8012734:	68a3      	ldr	r3, [r4, #8]
 8012736:	789b      	ldrb	r3, [r3, #2]
 8012738:	706b      	strb	r3, [r5, #1]
 801273a:	68a3      	ldr	r3, [r4, #8]
 801273c:	785b      	ldrb	r3, [r3, #1]
 801273e:	70ab      	strb	r3, [r5, #2]
 8012740:	68a3      	ldr	r3, [r4, #8]
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	70eb      	strb	r3, [r5, #3]
 8012746:	2104      	movs	r1, #4
 8012748:	68a2      	ldr	r2, [r4, #8]
 801274a:	6923      	ldr	r3, [r4, #16]
 801274c:	440a      	add	r2, r1
 801274e:	7561      	strb	r1, [r4, #21]
 8012750:	440b      	add	r3, r1
 8012752:	60a2      	str	r2, [r4, #8]
 8012754:	6123      	str	r3, [r4, #16]
 8012756:	7da0      	ldrb	r0, [r4, #22]
 8012758:	f080 0001 	eor.w	r0, r0, #1
 801275c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	602b      	str	r3, [r5, #0]
 8012764:	e7ef      	b.n	8012746 <ucdr_deserialize_uint32_t+0xb6>
 8012766:	68a2      	ldr	r2, [r4, #8]
 8012768:	6923      	ldr	r3, [r4, #16]
 801276a:	1bd2      	subs	r2, r2, r7
 801276c:	7da0      	ldrb	r0, [r4, #22]
 801276e:	1bdb      	subs	r3, r3, r7
 8012770:	f884 8015 	strb.w	r8, [r4, #21]
 8012774:	f080 0001 	eor.w	r0, r0, #1
 8012778:	60a2      	str	r2, [r4, #8]
 801277a:	6123      	str	r3, [r4, #16]
 801277c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012780:	68a3      	ldr	r3, [r4, #8]
 8012782:	789b      	ldrb	r3, [r3, #2]
 8012784:	706b      	strb	r3, [r5, #1]
 8012786:	1cab      	adds	r3, r5, #2
 8012788:	68a2      	ldr	r2, [r4, #8]
 801278a:	7852      	ldrb	r2, [r2, #1]
 801278c:	f803 2b01 	strb.w	r2, [r3], #1
 8012790:	68a2      	ldr	r2, [r4, #8]
 8012792:	7812      	ldrb	r2, [r2, #0]
 8012794:	701a      	strb	r2, [r3, #0]
 8012796:	e7b4      	b.n	8012702 <ucdr_deserialize_uint32_t+0x72>
 8012798:	4631      	mov	r1, r6
 801279a:	463a      	mov	r2, r7
 801279c:	4628      	mov	r0, r5
 801279e:	f00a fc44 	bl	801d02a <memcpy>
 80127a2:	464a      	mov	r2, r9
 80127a4:	19e8      	adds	r0, r5, r7
 80127a6:	68a1      	ldr	r1, [r4, #8]
 80127a8:	f00a fc3f 	bl	801d02a <memcpy>
 80127ac:	e7a9      	b.n	8012702 <ucdr_deserialize_uint32_t+0x72>
 80127ae:	bf00      	nop

080127b0 <ucdr_deserialize_endian_uint32_t>:
 80127b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b4:	4604      	mov	r4, r0
 80127b6:	460e      	mov	r6, r1
 80127b8:	2104      	movs	r1, #4
 80127ba:	4615      	mov	r5, r2
 80127bc:	f000 ff10 	bl	80135e0 <ucdr_buffer_alignment>
 80127c0:	4601      	mov	r1, r0
 80127c2:	4620      	mov	r0, r4
 80127c4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80127c8:	f000 ff52 	bl	8013670 <ucdr_advance_buffer>
 80127cc:	2104      	movs	r1, #4
 80127ce:	4620      	mov	r0, r4
 80127d0:	f000 fea6 	bl	8013520 <ucdr_check_buffer_available_for>
 80127d4:	2800      	cmp	r0, #0
 80127d6:	d13c      	bne.n	8012852 <ucdr_deserialize_endian_uint32_t+0xa2>
 80127d8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80127dc:	42bb      	cmp	r3, r7
 80127de:	d933      	bls.n	8012848 <ucdr_deserialize_endian_uint32_t+0x98>
 80127e0:	eba3 0907 	sub.w	r9, r3, r7
 80127e4:	60a3      	str	r3, [r4, #8]
 80127e6:	6923      	ldr	r3, [r4, #16]
 80127e8:	4620      	mov	r0, r4
 80127ea:	f1c9 0a04 	rsb	sl, r9, #4
 80127ee:	444b      	add	r3, r9
 80127f0:	4651      	mov	r1, sl
 80127f2:	6123      	str	r3, [r4, #16]
 80127f4:	f000 fea0 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d048      	beq.n	801288e <ucdr_deserialize_endian_uint32_t+0xde>
 80127fc:	2e01      	cmp	r6, #1
 80127fe:	d061      	beq.n	80128c4 <ucdr_deserialize_endian_uint32_t+0x114>
 8012800:	78fb      	ldrb	r3, [r7, #3]
 8012802:	702b      	strb	r3, [r5, #0]
 8012804:	f1b9 0f00 	cmp.w	r9, #0
 8012808:	d050      	beq.n	80128ac <ucdr_deserialize_endian_uint32_t+0xfc>
 801280a:	78bb      	ldrb	r3, [r7, #2]
 801280c:	f1b9 0f01 	cmp.w	r9, #1
 8012810:	706b      	strb	r3, [r5, #1]
 8012812:	f105 0302 	add.w	r3, r5, #2
 8012816:	d04d      	beq.n	80128b4 <ucdr_deserialize_endian_uint32_t+0x104>
 8012818:	787b      	ldrb	r3, [r7, #1]
 801281a:	f1b9 0f02 	cmp.w	r9, #2
 801281e:	70ab      	strb	r3, [r5, #2]
 8012820:	f105 0303 	add.w	r3, r5, #3
 8012824:	d04a      	beq.n	80128bc <ucdr_deserialize_endian_uint32_t+0x10c>
 8012826:	783b      	ldrb	r3, [r7, #0]
 8012828:	70eb      	strb	r3, [r5, #3]
 801282a:	6923      	ldr	r3, [r4, #16]
 801282c:	2104      	movs	r1, #4
 801282e:	68a2      	ldr	r2, [r4, #8]
 8012830:	3304      	adds	r3, #4
 8012832:	7da0      	ldrb	r0, [r4, #22]
 8012834:	4452      	add	r2, sl
 8012836:	7561      	strb	r1, [r4, #21]
 8012838:	eba3 0309 	sub.w	r3, r3, r9
 801283c:	f080 0001 	eor.w	r0, r0, #1
 8012840:	60a2      	str	r2, [r4, #8]
 8012842:	6123      	str	r3, [r4, #16]
 8012844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012848:	2104      	movs	r1, #4
 801284a:	4620      	mov	r0, r4
 801284c:	f000 fe74 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012850:	b1a8      	cbz	r0, 801287e <ucdr_deserialize_endian_uint32_t+0xce>
 8012852:	2e01      	cmp	r6, #1
 8012854:	68a3      	ldr	r3, [r4, #8]
 8012856:	d017      	beq.n	8012888 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012858:	78db      	ldrb	r3, [r3, #3]
 801285a:	702b      	strb	r3, [r5, #0]
 801285c:	68a3      	ldr	r3, [r4, #8]
 801285e:	789b      	ldrb	r3, [r3, #2]
 8012860:	706b      	strb	r3, [r5, #1]
 8012862:	68a3      	ldr	r3, [r4, #8]
 8012864:	785b      	ldrb	r3, [r3, #1]
 8012866:	70ab      	strb	r3, [r5, #2]
 8012868:	68a3      	ldr	r3, [r4, #8]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	70eb      	strb	r3, [r5, #3]
 801286e:	2104      	movs	r1, #4
 8012870:	68a2      	ldr	r2, [r4, #8]
 8012872:	6923      	ldr	r3, [r4, #16]
 8012874:	440a      	add	r2, r1
 8012876:	7561      	strb	r1, [r4, #21]
 8012878:	440b      	add	r3, r1
 801287a:	60a2      	str	r2, [r4, #8]
 801287c:	6123      	str	r3, [r4, #16]
 801287e:	7da0      	ldrb	r0, [r4, #22]
 8012880:	f080 0001 	eor.w	r0, r0, #1
 8012884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	602b      	str	r3, [r5, #0]
 801288c:	e7ef      	b.n	801286e <ucdr_deserialize_endian_uint32_t+0xbe>
 801288e:	68a2      	ldr	r2, [r4, #8]
 8012890:	6923      	ldr	r3, [r4, #16]
 8012892:	eba2 0209 	sub.w	r2, r2, r9
 8012896:	7da0      	ldrb	r0, [r4, #22]
 8012898:	eba3 0309 	sub.w	r3, r3, r9
 801289c:	f884 8015 	strb.w	r8, [r4, #21]
 80128a0:	f080 0001 	eor.w	r0, r0, #1
 80128a4:	60a2      	str	r2, [r4, #8]
 80128a6:	6123      	str	r3, [r4, #16]
 80128a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ac:	68a3      	ldr	r3, [r4, #8]
 80128ae:	789b      	ldrb	r3, [r3, #2]
 80128b0:	706b      	strb	r3, [r5, #1]
 80128b2:	1cab      	adds	r3, r5, #2
 80128b4:	68a2      	ldr	r2, [r4, #8]
 80128b6:	7852      	ldrb	r2, [r2, #1]
 80128b8:	f803 2b01 	strb.w	r2, [r3], #1
 80128bc:	68a2      	ldr	r2, [r4, #8]
 80128be:	7812      	ldrb	r2, [r2, #0]
 80128c0:	701a      	strb	r2, [r3, #0]
 80128c2:	e7b2      	b.n	801282a <ucdr_deserialize_endian_uint32_t+0x7a>
 80128c4:	4639      	mov	r1, r7
 80128c6:	464a      	mov	r2, r9
 80128c8:	4628      	mov	r0, r5
 80128ca:	f00a fbae 	bl	801d02a <memcpy>
 80128ce:	4652      	mov	r2, sl
 80128d0:	eb05 0009 	add.w	r0, r5, r9
 80128d4:	68a1      	ldr	r1, [r4, #8]
 80128d6:	f00a fba8 	bl	801d02a <memcpy>
 80128da:	e7a6      	b.n	801282a <ucdr_deserialize_endian_uint32_t+0x7a>

080128dc <ucdr_serialize_uint64_t>:
 80128dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e0:	4604      	mov	r4, r0
 80128e2:	b082      	sub	sp, #8
 80128e4:	2108      	movs	r1, #8
 80128e6:	e9cd 2300 	strd	r2, r3, [sp]
 80128ea:	f000 fe79 	bl	80135e0 <ucdr_buffer_alignment>
 80128ee:	4601      	mov	r1, r0
 80128f0:	4620      	mov	r0, r4
 80128f2:	7d67      	ldrb	r7, [r4, #21]
 80128f4:	f000 febc 	bl	8013670 <ucdr_advance_buffer>
 80128f8:	2108      	movs	r1, #8
 80128fa:	4620      	mov	r0, r4
 80128fc:	f000 fe10 	bl	8013520 <ucdr_check_buffer_available_for>
 8012900:	2800      	cmp	r0, #0
 8012902:	d14e      	bne.n	80129a2 <ucdr_serialize_uint64_t+0xc6>
 8012904:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012908:	42ab      	cmp	r3, r5
 801290a:	d945      	bls.n	8012998 <ucdr_serialize_uint64_t+0xbc>
 801290c:	1b5e      	subs	r6, r3, r5
 801290e:	60a3      	str	r3, [r4, #8]
 8012910:	6923      	ldr	r3, [r4, #16]
 8012912:	4620      	mov	r0, r4
 8012914:	f1c6 0808 	rsb	r8, r6, #8
 8012918:	4433      	add	r3, r6
 801291a:	4641      	mov	r1, r8
 801291c:	6123      	str	r3, [r4, #16]
 801291e:	f000 fe0b 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012922:	2800      	cmp	r0, #0
 8012924:	d074      	beq.n	8012a10 <ucdr_serialize_uint64_t+0x134>
 8012926:	7d23      	ldrb	r3, [r4, #20]
 8012928:	2b01      	cmp	r3, #1
 801292a:	f000 809b 	beq.w	8012a64 <ucdr_serialize_uint64_t+0x188>
 801292e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012932:	702b      	strb	r3, [r5, #0]
 8012934:	2e00      	cmp	r6, #0
 8012936:	d078      	beq.n	8012a2a <ucdr_serialize_uint64_t+0x14e>
 8012938:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801293c:	2e01      	cmp	r6, #1
 801293e:	706b      	strb	r3, [r5, #1]
 8012940:	d077      	beq.n	8012a32 <ucdr_serialize_uint64_t+0x156>
 8012942:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012946:	2e02      	cmp	r6, #2
 8012948:	70ab      	strb	r3, [r5, #2]
 801294a:	d076      	beq.n	8012a3a <ucdr_serialize_uint64_t+0x15e>
 801294c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012950:	2e03      	cmp	r6, #3
 8012952:	70eb      	strb	r3, [r5, #3]
 8012954:	d075      	beq.n	8012a42 <ucdr_serialize_uint64_t+0x166>
 8012956:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801295a:	2e04      	cmp	r6, #4
 801295c:	712b      	strb	r3, [r5, #4]
 801295e:	d074      	beq.n	8012a4a <ucdr_serialize_uint64_t+0x16e>
 8012960:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012964:	2e05      	cmp	r6, #5
 8012966:	716b      	strb	r3, [r5, #5]
 8012968:	d073      	beq.n	8012a52 <ucdr_serialize_uint64_t+0x176>
 801296a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801296e:	2e06      	cmp	r6, #6
 8012970:	71ab      	strb	r3, [r5, #6]
 8012972:	d072      	beq.n	8012a5a <ucdr_serialize_uint64_t+0x17e>
 8012974:	f89d 3000 	ldrb.w	r3, [sp]
 8012978:	71eb      	strb	r3, [r5, #7]
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	2108      	movs	r1, #8
 801297e:	68a2      	ldr	r2, [r4, #8]
 8012980:	3308      	adds	r3, #8
 8012982:	7da0      	ldrb	r0, [r4, #22]
 8012984:	4442      	add	r2, r8
 8012986:	7561      	strb	r1, [r4, #21]
 8012988:	1b9e      	subs	r6, r3, r6
 801298a:	f080 0001 	eor.w	r0, r0, #1
 801298e:	60a2      	str	r2, [r4, #8]
 8012990:	6126      	str	r6, [r4, #16]
 8012992:	b002      	add	sp, #8
 8012994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012998:	2108      	movs	r1, #8
 801299a:	4620      	mov	r0, r4
 801299c:	f000 fdcc 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80129a0:	b350      	cbz	r0, 80129f8 <ucdr_serialize_uint64_t+0x11c>
 80129a2:	7d23      	ldrb	r3, [r4, #20]
 80129a4:	2b01      	cmp	r3, #1
 80129a6:	d02d      	beq.n	8012a04 <ucdr_serialize_uint64_t+0x128>
 80129a8:	68a3      	ldr	r3, [r4, #8]
 80129aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80129ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129b2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80129b6:	7018      	strb	r0, [r3, #0]
 80129b8:	68a3      	ldr	r3, [r4, #8]
 80129ba:	705a      	strb	r2, [r3, #1]
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80129c6:	7099      	strb	r1, [r3, #2]
 80129c8:	68a3      	ldr	r3, [r4, #8]
 80129ca:	70da      	strb	r2, [r3, #3]
 80129cc:	68a3      	ldr	r3, [r4, #8]
 80129ce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80129d2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80129d6:	7118      	strb	r0, [r3, #4]
 80129d8:	68a3      	ldr	r3, [r4, #8]
 80129da:	715a      	strb	r2, [r3, #5]
 80129dc:	68a3      	ldr	r3, [r4, #8]
 80129de:	f89d 2000 	ldrb.w	r2, [sp]
 80129e2:	7199      	strb	r1, [r3, #6]
 80129e4:	68a3      	ldr	r3, [r4, #8]
 80129e6:	71da      	strb	r2, [r3, #7]
 80129e8:	2108      	movs	r1, #8
 80129ea:	68a2      	ldr	r2, [r4, #8]
 80129ec:	6923      	ldr	r3, [r4, #16]
 80129ee:	440a      	add	r2, r1
 80129f0:	7561      	strb	r1, [r4, #21]
 80129f2:	440b      	add	r3, r1
 80129f4:	60a2      	str	r2, [r4, #8]
 80129f6:	6123      	str	r3, [r4, #16]
 80129f8:	7da0      	ldrb	r0, [r4, #22]
 80129fa:	f080 0001 	eor.w	r0, r0, #1
 80129fe:	b002      	add	sp, #8
 8012a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a04:	466b      	mov	r3, sp
 8012a06:	68a2      	ldr	r2, [r4, #8]
 8012a08:	cb03      	ldmia	r3!, {r0, r1}
 8012a0a:	6010      	str	r0, [r2, #0]
 8012a0c:	6051      	str	r1, [r2, #4]
 8012a0e:	e7eb      	b.n	80129e8 <ucdr_serialize_uint64_t+0x10c>
 8012a10:	68a2      	ldr	r2, [r4, #8]
 8012a12:	6923      	ldr	r3, [r4, #16]
 8012a14:	7da0      	ldrb	r0, [r4, #22]
 8012a16:	1b92      	subs	r2, r2, r6
 8012a18:	1b9b      	subs	r3, r3, r6
 8012a1a:	7567      	strb	r7, [r4, #21]
 8012a1c:	f080 0001 	eor.w	r0, r0, #1
 8012a20:	60a2      	str	r2, [r4, #8]
 8012a22:	6123      	str	r3, [r4, #16]
 8012a24:	b002      	add	sp, #8
 8012a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a2a:	68a3      	ldr	r3, [r4, #8]
 8012a2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a30:	701a      	strb	r2, [r3, #0]
 8012a32:	68a3      	ldr	r3, [r4, #8]
 8012a34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a38:	701a      	strb	r2, [r3, #0]
 8012a3a:	68a3      	ldr	r3, [r4, #8]
 8012a3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a40:	701a      	strb	r2, [r3, #0]
 8012a42:	68a3      	ldr	r3, [r4, #8]
 8012a44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012a48:	701a      	strb	r2, [r3, #0]
 8012a4a:	68a3      	ldr	r3, [r4, #8]
 8012a4c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a50:	701a      	strb	r2, [r3, #0]
 8012a52:	68a3      	ldr	r3, [r4, #8]
 8012a54:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012a58:	701a      	strb	r2, [r3, #0]
 8012a5a:	68a3      	ldr	r3, [r4, #8]
 8012a5c:	f89d 2000 	ldrb.w	r2, [sp]
 8012a60:	701a      	strb	r2, [r3, #0]
 8012a62:	e78a      	b.n	801297a <ucdr_serialize_uint64_t+0x9e>
 8012a64:	4628      	mov	r0, r5
 8012a66:	466d      	mov	r5, sp
 8012a68:	4632      	mov	r2, r6
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	f00a fadd 	bl	801d02a <memcpy>
 8012a70:	4642      	mov	r2, r8
 8012a72:	19a9      	adds	r1, r5, r6
 8012a74:	68a0      	ldr	r0, [r4, #8]
 8012a76:	f00a fad8 	bl	801d02a <memcpy>
 8012a7a:	e77e      	b.n	801297a <ucdr_serialize_uint64_t+0x9e>

08012a7c <ucdr_serialize_int16_t>:
 8012a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a80:	460b      	mov	r3, r1
 8012a82:	b082      	sub	sp, #8
 8012a84:	4604      	mov	r4, r0
 8012a86:	2102      	movs	r1, #2
 8012a88:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012a8c:	f000 fda8 	bl	80135e0 <ucdr_buffer_alignment>
 8012a90:	4601      	mov	r1, r0
 8012a92:	4620      	mov	r0, r4
 8012a94:	7d67      	ldrb	r7, [r4, #21]
 8012a96:	f000 fdeb 	bl	8013670 <ucdr_advance_buffer>
 8012a9a:	2102      	movs	r1, #2
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f000 fd3f 	bl	8013520 <ucdr_check_buffer_available_for>
 8012aa2:	bb78      	cbnz	r0, 8012b04 <ucdr_serialize_int16_t+0x88>
 8012aa4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012aa8:	42ab      	cmp	r3, r5
 8012aaa:	d926      	bls.n	8012afa <ucdr_serialize_int16_t+0x7e>
 8012aac:	1b5e      	subs	r6, r3, r5
 8012aae:	60a3      	str	r3, [r4, #8]
 8012ab0:	6923      	ldr	r3, [r4, #16]
 8012ab2:	4620      	mov	r0, r4
 8012ab4:	f1c6 0802 	rsb	r8, r6, #2
 8012ab8:	4433      	add	r3, r6
 8012aba:	4641      	mov	r1, r8
 8012abc:	6123      	str	r3, [r4, #16]
 8012abe:	f000 fd3b 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012ac2:	2800      	cmp	r0, #0
 8012ac4:	d03b      	beq.n	8012b3e <ucdr_serialize_int16_t+0xc2>
 8012ac6:	7d23      	ldrb	r3, [r4, #20]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d04a      	beq.n	8012b62 <ucdr_serialize_int16_t+0xe6>
 8012acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012ad0:	702b      	strb	r3, [r5, #0]
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	d040      	beq.n	8012b58 <ucdr_serialize_int16_t+0xdc>
 8012ad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ada:	706b      	strb	r3, [r5, #1]
 8012adc:	6923      	ldr	r3, [r4, #16]
 8012ade:	2102      	movs	r1, #2
 8012ae0:	68a2      	ldr	r2, [r4, #8]
 8012ae2:	3302      	adds	r3, #2
 8012ae4:	7da0      	ldrb	r0, [r4, #22]
 8012ae6:	4442      	add	r2, r8
 8012ae8:	7561      	strb	r1, [r4, #21]
 8012aea:	1b9e      	subs	r6, r3, r6
 8012aec:	f080 0001 	eor.w	r0, r0, #1
 8012af0:	60a2      	str	r2, [r4, #8]
 8012af2:	6126      	str	r6, [r4, #16]
 8012af4:	b002      	add	sp, #8
 8012af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012afa:	2102      	movs	r1, #2
 8012afc:	4620      	mov	r0, r4
 8012afe:	f000 fd1b 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012b02:	b190      	cbz	r0, 8012b2a <ucdr_serialize_int16_t+0xae>
 8012b04:	7d23      	ldrb	r3, [r4, #20]
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	68a3      	ldr	r3, [r4, #8]
 8012b0a:	d014      	beq.n	8012b36 <ucdr_serialize_int16_t+0xba>
 8012b0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012b10:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012b14:	7019      	strb	r1, [r3, #0]
 8012b16:	68a3      	ldr	r3, [r4, #8]
 8012b18:	705a      	strb	r2, [r3, #1]
 8012b1a:	2102      	movs	r1, #2
 8012b1c:	68a2      	ldr	r2, [r4, #8]
 8012b1e:	6923      	ldr	r3, [r4, #16]
 8012b20:	440a      	add	r2, r1
 8012b22:	7561      	strb	r1, [r4, #21]
 8012b24:	440b      	add	r3, r1
 8012b26:	60a2      	str	r2, [r4, #8]
 8012b28:	6123      	str	r3, [r4, #16]
 8012b2a:	7da0      	ldrb	r0, [r4, #22]
 8012b2c:	f080 0001 	eor.w	r0, r0, #1
 8012b30:	b002      	add	sp, #8
 8012b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012b3a:	801a      	strh	r2, [r3, #0]
 8012b3c:	e7ed      	b.n	8012b1a <ucdr_serialize_int16_t+0x9e>
 8012b3e:	68a2      	ldr	r2, [r4, #8]
 8012b40:	6923      	ldr	r3, [r4, #16]
 8012b42:	7da0      	ldrb	r0, [r4, #22]
 8012b44:	1b92      	subs	r2, r2, r6
 8012b46:	1b9b      	subs	r3, r3, r6
 8012b48:	7567      	strb	r7, [r4, #21]
 8012b4a:	f080 0001 	eor.w	r0, r0, #1
 8012b4e:	60a2      	str	r2, [r4, #8]
 8012b50:	6123      	str	r3, [r4, #16]
 8012b52:	b002      	add	sp, #8
 8012b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b58:	68a3      	ldr	r3, [r4, #8]
 8012b5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012b5e:	701a      	strb	r2, [r3, #0]
 8012b60:	e7bc      	b.n	8012adc <ucdr_serialize_int16_t+0x60>
 8012b62:	4628      	mov	r0, r5
 8012b64:	f10d 0506 	add.w	r5, sp, #6
 8012b68:	4632      	mov	r2, r6
 8012b6a:	4629      	mov	r1, r5
 8012b6c:	f00a fa5d 	bl	801d02a <memcpy>
 8012b70:	4642      	mov	r2, r8
 8012b72:	19a9      	adds	r1, r5, r6
 8012b74:	68a0      	ldr	r0, [r4, #8]
 8012b76:	f00a fa58 	bl	801d02a <memcpy>
 8012b7a:	e7af      	b.n	8012adc <ucdr_serialize_int16_t+0x60>

08012b7c <ucdr_deserialize_int16_t>:
 8012b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b80:	4604      	mov	r4, r0
 8012b82:	460d      	mov	r5, r1
 8012b84:	2102      	movs	r1, #2
 8012b86:	f000 fd2b 	bl	80135e0 <ucdr_buffer_alignment>
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012b92:	f000 fd6d 	bl	8013670 <ucdr_advance_buffer>
 8012b96:	2102      	movs	r1, #2
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f000 fcc1 	bl	8013520 <ucdr_check_buffer_available_for>
 8012b9e:	bb60      	cbnz	r0, 8012bfa <ucdr_deserialize_int16_t+0x7e>
 8012ba0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012ba4:	42be      	cmp	r6, r7
 8012ba6:	d923      	bls.n	8012bf0 <ucdr_deserialize_int16_t+0x74>
 8012ba8:	6923      	ldr	r3, [r4, #16]
 8012baa:	4620      	mov	r0, r4
 8012bac:	60a6      	str	r6, [r4, #8]
 8012bae:	1bf6      	subs	r6, r6, r7
 8012bb0:	4433      	add	r3, r6
 8012bb2:	f1c6 0902 	rsb	r9, r6, #2
 8012bb6:	6123      	str	r3, [r4, #16]
 8012bb8:	4649      	mov	r1, r9
 8012bba:	f000 fcbd 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d034      	beq.n	8012c2c <ucdr_deserialize_int16_t+0xb0>
 8012bc2:	7d23      	ldrb	r3, [r4, #20]
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d042      	beq.n	8012c4e <ucdr_deserialize_int16_t+0xd2>
 8012bc8:	787b      	ldrb	r3, [r7, #1]
 8012bca:	702b      	strb	r3, [r5, #0]
 8012bcc:	2e00      	cmp	r6, #0
 8012bce:	d03a      	beq.n	8012c46 <ucdr_deserialize_int16_t+0xca>
 8012bd0:	783b      	ldrb	r3, [r7, #0]
 8012bd2:	706b      	strb	r3, [r5, #1]
 8012bd4:	6923      	ldr	r3, [r4, #16]
 8012bd6:	2102      	movs	r1, #2
 8012bd8:	68a2      	ldr	r2, [r4, #8]
 8012bda:	3302      	adds	r3, #2
 8012bdc:	7da0      	ldrb	r0, [r4, #22]
 8012bde:	444a      	add	r2, r9
 8012be0:	7561      	strb	r1, [r4, #21]
 8012be2:	1b9b      	subs	r3, r3, r6
 8012be4:	f080 0001 	eor.w	r0, r0, #1
 8012be8:	60a2      	str	r2, [r4, #8]
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bf0:	2102      	movs	r1, #2
 8012bf2:	4620      	mov	r0, r4
 8012bf4:	f000 fca0 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012bf8:	b180      	cbz	r0, 8012c1c <ucdr_deserialize_int16_t+0xa0>
 8012bfa:	7d23      	ldrb	r3, [r4, #20]
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	d011      	beq.n	8012c26 <ucdr_deserialize_int16_t+0xaa>
 8012c02:	785b      	ldrb	r3, [r3, #1]
 8012c04:	702b      	strb	r3, [r5, #0]
 8012c06:	68a3      	ldr	r3, [r4, #8]
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	706b      	strb	r3, [r5, #1]
 8012c0c:	2102      	movs	r1, #2
 8012c0e:	68a2      	ldr	r2, [r4, #8]
 8012c10:	6923      	ldr	r3, [r4, #16]
 8012c12:	440a      	add	r2, r1
 8012c14:	7561      	strb	r1, [r4, #21]
 8012c16:	440b      	add	r3, r1
 8012c18:	60a2      	str	r2, [r4, #8]
 8012c1a:	6123      	str	r3, [r4, #16]
 8012c1c:	7da0      	ldrb	r0, [r4, #22]
 8012c1e:	f080 0001 	eor.w	r0, r0, #1
 8012c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	802b      	strh	r3, [r5, #0]
 8012c2a:	e7ef      	b.n	8012c0c <ucdr_deserialize_int16_t+0x90>
 8012c2c:	68a2      	ldr	r2, [r4, #8]
 8012c2e:	6923      	ldr	r3, [r4, #16]
 8012c30:	1b92      	subs	r2, r2, r6
 8012c32:	7da0      	ldrb	r0, [r4, #22]
 8012c34:	1b9b      	subs	r3, r3, r6
 8012c36:	f884 8015 	strb.w	r8, [r4, #21]
 8012c3a:	f080 0001 	eor.w	r0, r0, #1
 8012c3e:	60a2      	str	r2, [r4, #8]
 8012c40:	6123      	str	r3, [r4, #16]
 8012c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c46:	68a3      	ldr	r3, [r4, #8]
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	706b      	strb	r3, [r5, #1]
 8012c4c:	e7c2      	b.n	8012bd4 <ucdr_deserialize_int16_t+0x58>
 8012c4e:	4639      	mov	r1, r7
 8012c50:	4632      	mov	r2, r6
 8012c52:	4628      	mov	r0, r5
 8012c54:	f00a f9e9 	bl	801d02a <memcpy>
 8012c58:	464a      	mov	r2, r9
 8012c5a:	19a8      	adds	r0, r5, r6
 8012c5c:	68a1      	ldr	r1, [r4, #8]
 8012c5e:	f00a f9e4 	bl	801d02a <memcpy>
 8012c62:	e7b7      	b.n	8012bd4 <ucdr_deserialize_int16_t+0x58>

08012c64 <ucdr_serialize_int32_t>:
 8012c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c68:	b082      	sub	sp, #8
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	9101      	str	r1, [sp, #4]
 8012c6e:	2104      	movs	r1, #4
 8012c70:	f000 fcb6 	bl	80135e0 <ucdr_buffer_alignment>
 8012c74:	4601      	mov	r1, r0
 8012c76:	4620      	mov	r0, r4
 8012c78:	7d67      	ldrb	r7, [r4, #21]
 8012c7a:	f000 fcf9 	bl	8013670 <ucdr_advance_buffer>
 8012c7e:	2104      	movs	r1, #4
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 fc4d 	bl	8013520 <ucdr_check_buffer_available_for>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d139      	bne.n	8012cfe <ucdr_serialize_int32_t+0x9a>
 8012c8a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c8e:	42ab      	cmp	r3, r5
 8012c90:	d930      	bls.n	8012cf4 <ucdr_serialize_int32_t+0x90>
 8012c92:	1b5e      	subs	r6, r3, r5
 8012c94:	60a3      	str	r3, [r4, #8]
 8012c96:	6923      	ldr	r3, [r4, #16]
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f1c6 0804 	rsb	r8, r6, #4
 8012c9e:	4433      	add	r3, r6
 8012ca0:	4641      	mov	r1, r8
 8012ca2:	6123      	str	r3, [r4, #16]
 8012ca4:	f000 fc48 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	d04c      	beq.n	8012d46 <ucdr_serialize_int32_t+0xe2>
 8012cac:	7d23      	ldrb	r3, [r4, #20]
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d063      	beq.n	8012d7a <ucdr_serialize_int32_t+0x116>
 8012cb2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012cb6:	702b      	strb	r3, [r5, #0]
 8012cb8:	2e00      	cmp	r6, #0
 8012cba:	d051      	beq.n	8012d60 <ucdr_serialize_int32_t+0xfc>
 8012cbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012cc0:	2e01      	cmp	r6, #1
 8012cc2:	706b      	strb	r3, [r5, #1]
 8012cc4:	d050      	beq.n	8012d68 <ucdr_serialize_int32_t+0x104>
 8012cc6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012cca:	2e02      	cmp	r6, #2
 8012ccc:	70ab      	strb	r3, [r5, #2]
 8012cce:	d04f      	beq.n	8012d70 <ucdr_serialize_int32_t+0x10c>
 8012cd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012cd4:	70eb      	strb	r3, [r5, #3]
 8012cd6:	6923      	ldr	r3, [r4, #16]
 8012cd8:	2104      	movs	r1, #4
 8012cda:	68a2      	ldr	r2, [r4, #8]
 8012cdc:	3304      	adds	r3, #4
 8012cde:	7da0      	ldrb	r0, [r4, #22]
 8012ce0:	4442      	add	r2, r8
 8012ce2:	7561      	strb	r1, [r4, #21]
 8012ce4:	1b9e      	subs	r6, r3, r6
 8012ce6:	f080 0001 	eor.w	r0, r0, #1
 8012cea:	60a2      	str	r2, [r4, #8]
 8012cec:	6126      	str	r6, [r4, #16]
 8012cee:	b002      	add	sp, #8
 8012cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf4:	2104      	movs	r1, #4
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	f000 fc1e 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012cfc:	b1d0      	cbz	r0, 8012d34 <ucdr_serialize_int32_t+0xd0>
 8012cfe:	7d23      	ldrb	r3, [r4, #20]
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	68a3      	ldr	r3, [r4, #8]
 8012d04:	d01c      	beq.n	8012d40 <ucdr_serialize_int32_t+0xdc>
 8012d06:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012d0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d0e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012d12:	7018      	strb	r0, [r3, #0]
 8012d14:	68a3      	ldr	r3, [r4, #8]
 8012d16:	705a      	strb	r2, [r3, #1]
 8012d18:	68a3      	ldr	r3, [r4, #8]
 8012d1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d1e:	7099      	strb	r1, [r3, #2]
 8012d20:	68a3      	ldr	r3, [r4, #8]
 8012d22:	70da      	strb	r2, [r3, #3]
 8012d24:	2104      	movs	r1, #4
 8012d26:	68a2      	ldr	r2, [r4, #8]
 8012d28:	6923      	ldr	r3, [r4, #16]
 8012d2a:	440a      	add	r2, r1
 8012d2c:	7561      	strb	r1, [r4, #21]
 8012d2e:	440b      	add	r3, r1
 8012d30:	60a2      	str	r2, [r4, #8]
 8012d32:	6123      	str	r3, [r4, #16]
 8012d34:	7da0      	ldrb	r0, [r4, #22]
 8012d36:	f080 0001 	eor.w	r0, r0, #1
 8012d3a:	b002      	add	sp, #8
 8012d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d40:	9a01      	ldr	r2, [sp, #4]
 8012d42:	601a      	str	r2, [r3, #0]
 8012d44:	e7ee      	b.n	8012d24 <ucdr_serialize_int32_t+0xc0>
 8012d46:	68a2      	ldr	r2, [r4, #8]
 8012d48:	6923      	ldr	r3, [r4, #16]
 8012d4a:	7da0      	ldrb	r0, [r4, #22]
 8012d4c:	1b92      	subs	r2, r2, r6
 8012d4e:	1b9b      	subs	r3, r3, r6
 8012d50:	7567      	strb	r7, [r4, #21]
 8012d52:	f080 0001 	eor.w	r0, r0, #1
 8012d56:	60a2      	str	r2, [r4, #8]
 8012d58:	6123      	str	r3, [r4, #16]
 8012d5a:	b002      	add	sp, #8
 8012d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d60:	68a3      	ldr	r3, [r4, #8]
 8012d62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d66:	701a      	strb	r2, [r3, #0]
 8012d68:	68a3      	ldr	r3, [r4, #8]
 8012d6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d6e:	701a      	strb	r2, [r3, #0]
 8012d70:	68a3      	ldr	r3, [r4, #8]
 8012d72:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d76:	701a      	strb	r2, [r3, #0]
 8012d78:	e7ad      	b.n	8012cd6 <ucdr_serialize_int32_t+0x72>
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	ad01      	add	r5, sp, #4
 8012d7e:	4632      	mov	r2, r6
 8012d80:	4629      	mov	r1, r5
 8012d82:	f00a f952 	bl	801d02a <memcpy>
 8012d86:	4642      	mov	r2, r8
 8012d88:	19a9      	adds	r1, r5, r6
 8012d8a:	68a0      	ldr	r0, [r4, #8]
 8012d8c:	f00a f94d 	bl	801d02a <memcpy>
 8012d90:	e7a1      	b.n	8012cd6 <ucdr_serialize_int32_t+0x72>
 8012d92:	bf00      	nop

08012d94 <ucdr_deserialize_int32_t>:
 8012d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d98:	4604      	mov	r4, r0
 8012d9a:	460d      	mov	r5, r1
 8012d9c:	2104      	movs	r1, #4
 8012d9e:	f000 fc1f 	bl	80135e0 <ucdr_buffer_alignment>
 8012da2:	4601      	mov	r1, r0
 8012da4:	4620      	mov	r0, r4
 8012da6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012daa:	f000 fc61 	bl	8013670 <ucdr_advance_buffer>
 8012dae:	2104      	movs	r1, #4
 8012db0:	4620      	mov	r0, r4
 8012db2:	f000 fbb5 	bl	8013520 <ucdr_check_buffer_available_for>
 8012db6:	2800      	cmp	r0, #0
 8012db8:	d138      	bne.n	8012e2c <ucdr_deserialize_int32_t+0x98>
 8012dba:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012dbe:	42b7      	cmp	r7, r6
 8012dc0:	d92f      	bls.n	8012e22 <ucdr_deserialize_int32_t+0x8e>
 8012dc2:	6923      	ldr	r3, [r4, #16]
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	60a7      	str	r7, [r4, #8]
 8012dc8:	1bbf      	subs	r7, r7, r6
 8012dca:	443b      	add	r3, r7
 8012dcc:	f1c7 0904 	rsb	r9, r7, #4
 8012dd0:	6123      	str	r3, [r4, #16]
 8012dd2:	4649      	mov	r1, r9
 8012dd4:	f000 fbb0 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d046      	beq.n	8012e6a <ucdr_deserialize_int32_t+0xd6>
 8012ddc:	7d23      	ldrb	r3, [r4, #20]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d05c      	beq.n	8012e9c <ucdr_deserialize_int32_t+0x108>
 8012de2:	78f3      	ldrb	r3, [r6, #3]
 8012de4:	702b      	strb	r3, [r5, #0]
 8012de6:	2f00      	cmp	r7, #0
 8012de8:	d04c      	beq.n	8012e84 <ucdr_deserialize_int32_t+0xf0>
 8012dea:	78b3      	ldrb	r3, [r6, #2]
 8012dec:	2f01      	cmp	r7, #1
 8012dee:	706b      	strb	r3, [r5, #1]
 8012df0:	f105 0302 	add.w	r3, r5, #2
 8012df4:	d04a      	beq.n	8012e8c <ucdr_deserialize_int32_t+0xf8>
 8012df6:	7873      	ldrb	r3, [r6, #1]
 8012df8:	2f02      	cmp	r7, #2
 8012dfa:	70ab      	strb	r3, [r5, #2]
 8012dfc:	f105 0303 	add.w	r3, r5, #3
 8012e00:	d048      	beq.n	8012e94 <ucdr_deserialize_int32_t+0x100>
 8012e02:	7833      	ldrb	r3, [r6, #0]
 8012e04:	70eb      	strb	r3, [r5, #3]
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	2104      	movs	r1, #4
 8012e0a:	68a2      	ldr	r2, [r4, #8]
 8012e0c:	3304      	adds	r3, #4
 8012e0e:	7da0      	ldrb	r0, [r4, #22]
 8012e10:	444a      	add	r2, r9
 8012e12:	7561      	strb	r1, [r4, #21]
 8012e14:	1bdb      	subs	r3, r3, r7
 8012e16:	f080 0001 	eor.w	r0, r0, #1
 8012e1a:	60a2      	str	r2, [r4, #8]
 8012e1c:	6123      	str	r3, [r4, #16]
 8012e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e22:	2104      	movs	r1, #4
 8012e24:	4620      	mov	r0, r4
 8012e26:	f000 fb87 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012e2a:	b1b0      	cbz	r0, 8012e5a <ucdr_deserialize_int32_t+0xc6>
 8012e2c:	7d23      	ldrb	r3, [r4, #20]
 8012e2e:	2b01      	cmp	r3, #1
 8012e30:	68a3      	ldr	r3, [r4, #8]
 8012e32:	d017      	beq.n	8012e64 <ucdr_deserialize_int32_t+0xd0>
 8012e34:	78db      	ldrb	r3, [r3, #3]
 8012e36:	702b      	strb	r3, [r5, #0]
 8012e38:	68a3      	ldr	r3, [r4, #8]
 8012e3a:	789b      	ldrb	r3, [r3, #2]
 8012e3c:	706b      	strb	r3, [r5, #1]
 8012e3e:	68a3      	ldr	r3, [r4, #8]
 8012e40:	785b      	ldrb	r3, [r3, #1]
 8012e42:	70ab      	strb	r3, [r5, #2]
 8012e44:	68a3      	ldr	r3, [r4, #8]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	70eb      	strb	r3, [r5, #3]
 8012e4a:	2104      	movs	r1, #4
 8012e4c:	68a2      	ldr	r2, [r4, #8]
 8012e4e:	6923      	ldr	r3, [r4, #16]
 8012e50:	440a      	add	r2, r1
 8012e52:	7561      	strb	r1, [r4, #21]
 8012e54:	440b      	add	r3, r1
 8012e56:	60a2      	str	r2, [r4, #8]
 8012e58:	6123      	str	r3, [r4, #16]
 8012e5a:	7da0      	ldrb	r0, [r4, #22]
 8012e5c:	f080 0001 	eor.w	r0, r0, #1
 8012e60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	602b      	str	r3, [r5, #0]
 8012e68:	e7ef      	b.n	8012e4a <ucdr_deserialize_int32_t+0xb6>
 8012e6a:	68a2      	ldr	r2, [r4, #8]
 8012e6c:	6923      	ldr	r3, [r4, #16]
 8012e6e:	1bd2      	subs	r2, r2, r7
 8012e70:	7da0      	ldrb	r0, [r4, #22]
 8012e72:	1bdb      	subs	r3, r3, r7
 8012e74:	f884 8015 	strb.w	r8, [r4, #21]
 8012e78:	f080 0001 	eor.w	r0, r0, #1
 8012e7c:	60a2      	str	r2, [r4, #8]
 8012e7e:	6123      	str	r3, [r4, #16]
 8012e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e84:	68a3      	ldr	r3, [r4, #8]
 8012e86:	789b      	ldrb	r3, [r3, #2]
 8012e88:	706b      	strb	r3, [r5, #1]
 8012e8a:	1cab      	adds	r3, r5, #2
 8012e8c:	68a2      	ldr	r2, [r4, #8]
 8012e8e:	7852      	ldrb	r2, [r2, #1]
 8012e90:	f803 2b01 	strb.w	r2, [r3], #1
 8012e94:	68a2      	ldr	r2, [r4, #8]
 8012e96:	7812      	ldrb	r2, [r2, #0]
 8012e98:	701a      	strb	r2, [r3, #0]
 8012e9a:	e7b4      	b.n	8012e06 <ucdr_deserialize_int32_t+0x72>
 8012e9c:	4631      	mov	r1, r6
 8012e9e:	463a      	mov	r2, r7
 8012ea0:	4628      	mov	r0, r5
 8012ea2:	f00a f8c2 	bl	801d02a <memcpy>
 8012ea6:	464a      	mov	r2, r9
 8012ea8:	19e8      	adds	r0, r5, r7
 8012eaa:	68a1      	ldr	r1, [r4, #8]
 8012eac:	f00a f8bd 	bl	801d02a <memcpy>
 8012eb0:	e7a9      	b.n	8012e06 <ucdr_deserialize_int32_t+0x72>
 8012eb2:	bf00      	nop

08012eb4 <ucdr_serialize_double>:
 8012eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb8:	4604      	mov	r4, r0
 8012eba:	b082      	sub	sp, #8
 8012ebc:	2108      	movs	r1, #8
 8012ebe:	ed8d 0b00 	vstr	d0, [sp]
 8012ec2:	f000 fb8d 	bl	80135e0 <ucdr_buffer_alignment>
 8012ec6:	4601      	mov	r1, r0
 8012ec8:	4620      	mov	r0, r4
 8012eca:	7d67      	ldrb	r7, [r4, #21]
 8012ecc:	f000 fbd0 	bl	8013670 <ucdr_advance_buffer>
 8012ed0:	2108      	movs	r1, #8
 8012ed2:	4620      	mov	r0, r4
 8012ed4:	f000 fb24 	bl	8013520 <ucdr_check_buffer_available_for>
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	d14e      	bne.n	8012f7a <ucdr_serialize_double+0xc6>
 8012edc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012ee0:	42ab      	cmp	r3, r5
 8012ee2:	d945      	bls.n	8012f70 <ucdr_serialize_double+0xbc>
 8012ee4:	1b5e      	subs	r6, r3, r5
 8012ee6:	60a3      	str	r3, [r4, #8]
 8012ee8:	6923      	ldr	r3, [r4, #16]
 8012eea:	4620      	mov	r0, r4
 8012eec:	f1c6 0808 	rsb	r8, r6, #8
 8012ef0:	4433      	add	r3, r6
 8012ef2:	4641      	mov	r1, r8
 8012ef4:	6123      	str	r3, [r4, #16]
 8012ef6:	f000 fb1f 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012efa:	2800      	cmp	r0, #0
 8012efc:	d074      	beq.n	8012fe8 <ucdr_serialize_double+0x134>
 8012efe:	7d23      	ldrb	r3, [r4, #20]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	f000 809b 	beq.w	801303c <ucdr_serialize_double+0x188>
 8012f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012f0a:	702b      	strb	r3, [r5, #0]
 8012f0c:	2e00      	cmp	r6, #0
 8012f0e:	d078      	beq.n	8013002 <ucdr_serialize_double+0x14e>
 8012f10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f14:	2e01      	cmp	r6, #1
 8012f16:	706b      	strb	r3, [r5, #1]
 8012f18:	d077      	beq.n	801300a <ucdr_serialize_double+0x156>
 8012f1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012f1e:	2e02      	cmp	r6, #2
 8012f20:	70ab      	strb	r3, [r5, #2]
 8012f22:	d076      	beq.n	8013012 <ucdr_serialize_double+0x15e>
 8012f24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012f28:	2e03      	cmp	r6, #3
 8012f2a:	70eb      	strb	r3, [r5, #3]
 8012f2c:	d075      	beq.n	801301a <ucdr_serialize_double+0x166>
 8012f2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012f32:	2e04      	cmp	r6, #4
 8012f34:	712b      	strb	r3, [r5, #4]
 8012f36:	d074      	beq.n	8013022 <ucdr_serialize_double+0x16e>
 8012f38:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012f3c:	2e05      	cmp	r6, #5
 8012f3e:	716b      	strb	r3, [r5, #5]
 8012f40:	d073      	beq.n	801302a <ucdr_serialize_double+0x176>
 8012f42:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012f46:	2e06      	cmp	r6, #6
 8012f48:	71ab      	strb	r3, [r5, #6]
 8012f4a:	d072      	beq.n	8013032 <ucdr_serialize_double+0x17e>
 8012f4c:	f89d 3000 	ldrb.w	r3, [sp]
 8012f50:	71eb      	strb	r3, [r5, #7]
 8012f52:	6923      	ldr	r3, [r4, #16]
 8012f54:	2108      	movs	r1, #8
 8012f56:	68a2      	ldr	r2, [r4, #8]
 8012f58:	3308      	adds	r3, #8
 8012f5a:	7da0      	ldrb	r0, [r4, #22]
 8012f5c:	4442      	add	r2, r8
 8012f5e:	7561      	strb	r1, [r4, #21]
 8012f60:	1b9e      	subs	r6, r3, r6
 8012f62:	f080 0001 	eor.w	r0, r0, #1
 8012f66:	60a2      	str	r2, [r4, #8]
 8012f68:	6126      	str	r6, [r4, #16]
 8012f6a:	b002      	add	sp, #8
 8012f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f70:	2108      	movs	r1, #8
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 fae0 	bl	8013538 <ucdr_check_final_buffer_behavior>
 8012f78:	b350      	cbz	r0, 8012fd0 <ucdr_serialize_double+0x11c>
 8012f7a:	7d23      	ldrb	r3, [r4, #20]
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d02d      	beq.n	8012fdc <ucdr_serialize_double+0x128>
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012f86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012f8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8012f8e:	7018      	strb	r0, [r3, #0]
 8012f90:	68a3      	ldr	r3, [r4, #8]
 8012f92:	705a      	strb	r2, [r3, #1]
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012f9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8012f9e:	7099      	strb	r1, [r3, #2]
 8012fa0:	68a3      	ldr	r3, [r4, #8]
 8012fa2:	70da      	strb	r2, [r3, #3]
 8012fa4:	68a3      	ldr	r3, [r4, #8]
 8012fa6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012faa:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8012fae:	7118      	strb	r0, [r3, #4]
 8012fb0:	68a3      	ldr	r3, [r4, #8]
 8012fb2:	715a      	strb	r2, [r3, #5]
 8012fb4:	68a3      	ldr	r3, [r4, #8]
 8012fb6:	f89d 2000 	ldrb.w	r2, [sp]
 8012fba:	7199      	strb	r1, [r3, #6]
 8012fbc:	68a3      	ldr	r3, [r4, #8]
 8012fbe:	71da      	strb	r2, [r3, #7]
 8012fc0:	2108      	movs	r1, #8
 8012fc2:	68a2      	ldr	r2, [r4, #8]
 8012fc4:	6923      	ldr	r3, [r4, #16]
 8012fc6:	440a      	add	r2, r1
 8012fc8:	7561      	strb	r1, [r4, #21]
 8012fca:	440b      	add	r3, r1
 8012fcc:	60a2      	str	r2, [r4, #8]
 8012fce:	6123      	str	r3, [r4, #16]
 8012fd0:	7da0      	ldrb	r0, [r4, #22]
 8012fd2:	f080 0001 	eor.w	r0, r0, #1
 8012fd6:	b002      	add	sp, #8
 8012fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fdc:	466b      	mov	r3, sp
 8012fde:	68a2      	ldr	r2, [r4, #8]
 8012fe0:	cb03      	ldmia	r3!, {r0, r1}
 8012fe2:	6010      	str	r0, [r2, #0]
 8012fe4:	6051      	str	r1, [r2, #4]
 8012fe6:	e7eb      	b.n	8012fc0 <ucdr_serialize_double+0x10c>
 8012fe8:	68a2      	ldr	r2, [r4, #8]
 8012fea:	6923      	ldr	r3, [r4, #16]
 8012fec:	7da0      	ldrb	r0, [r4, #22]
 8012fee:	1b92      	subs	r2, r2, r6
 8012ff0:	1b9b      	subs	r3, r3, r6
 8012ff2:	7567      	strb	r7, [r4, #21]
 8012ff4:	f080 0001 	eor.w	r0, r0, #1
 8012ff8:	60a2      	str	r2, [r4, #8]
 8012ffa:	6123      	str	r3, [r4, #16]
 8012ffc:	b002      	add	sp, #8
 8012ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013002:	68a3      	ldr	r3, [r4, #8]
 8013004:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013008:	701a      	strb	r2, [r3, #0]
 801300a:	68a3      	ldr	r3, [r4, #8]
 801300c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	68a3      	ldr	r3, [r4, #8]
 8013014:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013018:	701a      	strb	r2, [r3, #0]
 801301a:	68a3      	ldr	r3, [r4, #8]
 801301c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013020:	701a      	strb	r2, [r3, #0]
 8013022:	68a3      	ldr	r3, [r4, #8]
 8013024:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013028:	701a      	strb	r2, [r3, #0]
 801302a:	68a3      	ldr	r3, [r4, #8]
 801302c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013030:	701a      	strb	r2, [r3, #0]
 8013032:	68a3      	ldr	r3, [r4, #8]
 8013034:	f89d 2000 	ldrb.w	r2, [sp]
 8013038:	701a      	strb	r2, [r3, #0]
 801303a:	e78a      	b.n	8012f52 <ucdr_serialize_double+0x9e>
 801303c:	4628      	mov	r0, r5
 801303e:	466d      	mov	r5, sp
 8013040:	4632      	mov	r2, r6
 8013042:	4629      	mov	r1, r5
 8013044:	f009 fff1 	bl	801d02a <memcpy>
 8013048:	4642      	mov	r2, r8
 801304a:	19a9      	adds	r1, r5, r6
 801304c:	68a0      	ldr	r0, [r4, #8]
 801304e:	f009 ffec 	bl	801d02a <memcpy>
 8013052:	e77e      	b.n	8012f52 <ucdr_serialize_double+0x9e>

08013054 <ucdr_serialize_endian_double>:
 8013054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013058:	4604      	mov	r4, r0
 801305a:	b083      	sub	sp, #12
 801305c:	460e      	mov	r6, r1
 801305e:	2108      	movs	r1, #8
 8013060:	ed8d 0b00 	vstr	d0, [sp]
 8013064:	f000 fabc 	bl	80135e0 <ucdr_buffer_alignment>
 8013068:	4601      	mov	r1, r0
 801306a:	4620      	mov	r0, r4
 801306c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013070:	f000 fafe 	bl	8013670 <ucdr_advance_buffer>
 8013074:	2108      	movs	r1, #8
 8013076:	4620      	mov	r0, r4
 8013078:	f000 fa52 	bl	8013520 <ucdr_check_buffer_available_for>
 801307c:	2800      	cmp	r0, #0
 801307e:	d14d      	bne.n	801311c <ucdr_serialize_endian_double+0xc8>
 8013080:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8013084:	42bd      	cmp	r5, r7
 8013086:	d944      	bls.n	8013112 <ucdr_serialize_endian_double+0xbe>
 8013088:	6923      	ldr	r3, [r4, #16]
 801308a:	4620      	mov	r0, r4
 801308c:	60a5      	str	r5, [r4, #8]
 801308e:	1bed      	subs	r5, r5, r7
 8013090:	442b      	add	r3, r5
 8013092:	f1c5 0908 	rsb	r9, r5, #8
 8013096:	6123      	str	r3, [r4, #16]
 8013098:	4649      	mov	r1, r9
 801309a:	f000 fa4d 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801309e:	2800      	cmp	r0, #0
 80130a0:	d072      	beq.n	8013188 <ucdr_serialize_endian_double+0x134>
 80130a2:	2e01      	cmp	r6, #1
 80130a4:	f000 809b 	beq.w	80131de <ucdr_serialize_endian_double+0x18a>
 80130a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80130ac:	703b      	strb	r3, [r7, #0]
 80130ae:	2d00      	cmp	r5, #0
 80130b0:	d078      	beq.n	80131a4 <ucdr_serialize_endian_double+0x150>
 80130b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80130b6:	2d01      	cmp	r5, #1
 80130b8:	707b      	strb	r3, [r7, #1]
 80130ba:	d077      	beq.n	80131ac <ucdr_serialize_endian_double+0x158>
 80130bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80130c0:	2d02      	cmp	r5, #2
 80130c2:	70bb      	strb	r3, [r7, #2]
 80130c4:	d076      	beq.n	80131b4 <ucdr_serialize_endian_double+0x160>
 80130c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80130ca:	2d03      	cmp	r5, #3
 80130cc:	70fb      	strb	r3, [r7, #3]
 80130ce:	d075      	beq.n	80131bc <ucdr_serialize_endian_double+0x168>
 80130d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80130d4:	2d04      	cmp	r5, #4
 80130d6:	713b      	strb	r3, [r7, #4]
 80130d8:	d074      	beq.n	80131c4 <ucdr_serialize_endian_double+0x170>
 80130da:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80130de:	2d05      	cmp	r5, #5
 80130e0:	717b      	strb	r3, [r7, #5]
 80130e2:	d073      	beq.n	80131cc <ucdr_serialize_endian_double+0x178>
 80130e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80130e8:	2d06      	cmp	r5, #6
 80130ea:	71bb      	strb	r3, [r7, #6]
 80130ec:	d072      	beq.n	80131d4 <ucdr_serialize_endian_double+0x180>
 80130ee:	f89d 3000 	ldrb.w	r3, [sp]
 80130f2:	71fb      	strb	r3, [r7, #7]
 80130f4:	6923      	ldr	r3, [r4, #16]
 80130f6:	2108      	movs	r1, #8
 80130f8:	68a2      	ldr	r2, [r4, #8]
 80130fa:	3308      	adds	r3, #8
 80130fc:	7da0      	ldrb	r0, [r4, #22]
 80130fe:	444a      	add	r2, r9
 8013100:	7561      	strb	r1, [r4, #21]
 8013102:	1b5d      	subs	r5, r3, r5
 8013104:	f080 0001 	eor.w	r0, r0, #1
 8013108:	60a2      	str	r2, [r4, #8]
 801310a:	6125      	str	r5, [r4, #16]
 801310c:	b003      	add	sp, #12
 801310e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013112:	2108      	movs	r1, #8
 8013114:	4620      	mov	r0, r4
 8013116:	f000 fa0f 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801311a:	b348      	cbz	r0, 8013170 <ucdr_serialize_endian_double+0x11c>
 801311c:	2e01      	cmp	r6, #1
 801311e:	d02d      	beq.n	801317c <ucdr_serialize_endian_double+0x128>
 8013120:	68a3      	ldr	r3, [r4, #8]
 8013122:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013126:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801312a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801312e:	7018      	strb	r0, [r3, #0]
 8013130:	68a3      	ldr	r3, [r4, #8]
 8013132:	705a      	strb	r2, [r3, #1]
 8013134:	68a3      	ldr	r3, [r4, #8]
 8013136:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801313a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801313e:	7099      	strb	r1, [r3, #2]
 8013140:	68a3      	ldr	r3, [r4, #8]
 8013142:	70da      	strb	r2, [r3, #3]
 8013144:	68a3      	ldr	r3, [r4, #8]
 8013146:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801314a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801314e:	7118      	strb	r0, [r3, #4]
 8013150:	68a3      	ldr	r3, [r4, #8]
 8013152:	715a      	strb	r2, [r3, #5]
 8013154:	68a3      	ldr	r3, [r4, #8]
 8013156:	f89d 2000 	ldrb.w	r2, [sp]
 801315a:	7199      	strb	r1, [r3, #6]
 801315c:	68a3      	ldr	r3, [r4, #8]
 801315e:	71da      	strb	r2, [r3, #7]
 8013160:	2108      	movs	r1, #8
 8013162:	68a2      	ldr	r2, [r4, #8]
 8013164:	6923      	ldr	r3, [r4, #16]
 8013166:	440a      	add	r2, r1
 8013168:	7561      	strb	r1, [r4, #21]
 801316a:	440b      	add	r3, r1
 801316c:	60a2      	str	r2, [r4, #8]
 801316e:	6123      	str	r3, [r4, #16]
 8013170:	7da0      	ldrb	r0, [r4, #22]
 8013172:	f080 0001 	eor.w	r0, r0, #1
 8013176:	b003      	add	sp, #12
 8013178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801317c:	466b      	mov	r3, sp
 801317e:	68a2      	ldr	r2, [r4, #8]
 8013180:	cb03      	ldmia	r3!, {r0, r1}
 8013182:	6010      	str	r0, [r2, #0]
 8013184:	6051      	str	r1, [r2, #4]
 8013186:	e7eb      	b.n	8013160 <ucdr_serialize_endian_double+0x10c>
 8013188:	68a2      	ldr	r2, [r4, #8]
 801318a:	6923      	ldr	r3, [r4, #16]
 801318c:	7da0      	ldrb	r0, [r4, #22]
 801318e:	1b52      	subs	r2, r2, r5
 8013190:	1b5b      	subs	r3, r3, r5
 8013192:	f884 8015 	strb.w	r8, [r4, #21]
 8013196:	f080 0001 	eor.w	r0, r0, #1
 801319a:	60a2      	str	r2, [r4, #8]
 801319c:	6123      	str	r3, [r4, #16]
 801319e:	b003      	add	sp, #12
 80131a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a4:	68a3      	ldr	r3, [r4, #8]
 80131a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131aa:	701a      	strb	r2, [r3, #0]
 80131ac:	68a3      	ldr	r3, [r4, #8]
 80131ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80131b2:	701a      	strb	r2, [r3, #0]
 80131b4:	68a3      	ldr	r3, [r4, #8]
 80131b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131ba:	701a      	strb	r2, [r3, #0]
 80131bc:	68a3      	ldr	r3, [r4, #8]
 80131be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80131c2:	701a      	strb	r2, [r3, #0]
 80131c4:	68a3      	ldr	r3, [r4, #8]
 80131c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80131ca:	701a      	strb	r2, [r3, #0]
 80131cc:	68a3      	ldr	r3, [r4, #8]
 80131ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80131d2:	701a      	strb	r2, [r3, #0]
 80131d4:	68a3      	ldr	r3, [r4, #8]
 80131d6:	f89d 2000 	ldrb.w	r2, [sp]
 80131da:	701a      	strb	r2, [r3, #0]
 80131dc:	e78a      	b.n	80130f4 <ucdr_serialize_endian_double+0xa0>
 80131de:	466e      	mov	r6, sp
 80131e0:	462a      	mov	r2, r5
 80131e2:	4638      	mov	r0, r7
 80131e4:	4631      	mov	r1, r6
 80131e6:	f009 ff20 	bl	801d02a <memcpy>
 80131ea:	464a      	mov	r2, r9
 80131ec:	1971      	adds	r1, r6, r5
 80131ee:	68a0      	ldr	r0, [r4, #8]
 80131f0:	f009 ff1b 	bl	801d02a <memcpy>
 80131f4:	e77e      	b.n	80130f4 <ucdr_serialize_endian_double+0xa0>
 80131f6:	bf00      	nop

080131f8 <ucdr_deserialize_double>:
 80131f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131fc:	4604      	mov	r4, r0
 80131fe:	460d      	mov	r5, r1
 8013200:	2108      	movs	r1, #8
 8013202:	f000 f9ed 	bl	80135e0 <ucdr_buffer_alignment>
 8013206:	4601      	mov	r1, r0
 8013208:	4620      	mov	r0, r4
 801320a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801320e:	f000 fa2f 	bl	8013670 <ucdr_advance_buffer>
 8013212:	2108      	movs	r1, #8
 8013214:	4620      	mov	r0, r4
 8013216:	f000 f983 	bl	8013520 <ucdr_check_buffer_available_for>
 801321a:	2800      	cmp	r0, #0
 801321c:	d151      	bne.n	80132c2 <ucdr_deserialize_double+0xca>
 801321e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013222:	42be      	cmp	r6, r7
 8013224:	d948      	bls.n	80132b8 <ucdr_deserialize_double+0xc0>
 8013226:	6923      	ldr	r3, [r4, #16]
 8013228:	4620      	mov	r0, r4
 801322a:	60a6      	str	r6, [r4, #8]
 801322c:	1bf6      	subs	r6, r6, r7
 801322e:	4433      	add	r3, r6
 8013230:	f1c6 0908 	rsb	r9, r6, #8
 8013234:	6123      	str	r3, [r4, #16]
 8013236:	4649      	mov	r1, r9
 8013238:	f000 f97e 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801323c:	2800      	cmp	r0, #0
 801323e:	d06d      	beq.n	801331c <ucdr_deserialize_double+0x124>
 8013240:	7d23      	ldrb	r3, [r4, #20]
 8013242:	2b01      	cmp	r3, #1
 8013244:	f000 8093 	beq.w	801336e <ucdr_deserialize_double+0x176>
 8013248:	79fb      	ldrb	r3, [r7, #7]
 801324a:	702b      	strb	r3, [r5, #0]
 801324c:	2e00      	cmp	r6, #0
 801324e:	d072      	beq.n	8013336 <ucdr_deserialize_double+0x13e>
 8013250:	79bb      	ldrb	r3, [r7, #6]
 8013252:	2e01      	cmp	r6, #1
 8013254:	706b      	strb	r3, [r5, #1]
 8013256:	f105 0302 	add.w	r3, r5, #2
 801325a:	d070      	beq.n	801333e <ucdr_deserialize_double+0x146>
 801325c:	797b      	ldrb	r3, [r7, #5]
 801325e:	2e02      	cmp	r6, #2
 8013260:	70ab      	strb	r3, [r5, #2]
 8013262:	f105 0303 	add.w	r3, r5, #3
 8013266:	d06e      	beq.n	8013346 <ucdr_deserialize_double+0x14e>
 8013268:	793b      	ldrb	r3, [r7, #4]
 801326a:	2e03      	cmp	r6, #3
 801326c:	70eb      	strb	r3, [r5, #3]
 801326e:	f105 0304 	add.w	r3, r5, #4
 8013272:	d06c      	beq.n	801334e <ucdr_deserialize_double+0x156>
 8013274:	78fb      	ldrb	r3, [r7, #3]
 8013276:	2e04      	cmp	r6, #4
 8013278:	712b      	strb	r3, [r5, #4]
 801327a:	f105 0305 	add.w	r3, r5, #5
 801327e:	d06a      	beq.n	8013356 <ucdr_deserialize_double+0x15e>
 8013280:	78bb      	ldrb	r3, [r7, #2]
 8013282:	2e05      	cmp	r6, #5
 8013284:	716b      	strb	r3, [r5, #5]
 8013286:	f105 0306 	add.w	r3, r5, #6
 801328a:	d068      	beq.n	801335e <ucdr_deserialize_double+0x166>
 801328c:	787b      	ldrb	r3, [r7, #1]
 801328e:	2e06      	cmp	r6, #6
 8013290:	71ab      	strb	r3, [r5, #6]
 8013292:	f105 0307 	add.w	r3, r5, #7
 8013296:	d066      	beq.n	8013366 <ucdr_deserialize_double+0x16e>
 8013298:	783b      	ldrb	r3, [r7, #0]
 801329a:	71eb      	strb	r3, [r5, #7]
 801329c:	6923      	ldr	r3, [r4, #16]
 801329e:	2108      	movs	r1, #8
 80132a0:	68a2      	ldr	r2, [r4, #8]
 80132a2:	3308      	adds	r3, #8
 80132a4:	7da0      	ldrb	r0, [r4, #22]
 80132a6:	444a      	add	r2, r9
 80132a8:	7561      	strb	r1, [r4, #21]
 80132aa:	1b9e      	subs	r6, r3, r6
 80132ac:	f080 0001 	eor.w	r0, r0, #1
 80132b0:	60a2      	str	r2, [r4, #8]
 80132b2:	6126      	str	r6, [r4, #16]
 80132b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132b8:	2108      	movs	r1, #8
 80132ba:	4620      	mov	r0, r4
 80132bc:	f000 f93c 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80132c0:	b310      	cbz	r0, 8013308 <ucdr_deserialize_double+0x110>
 80132c2:	7d23      	ldrb	r3, [r4, #20]
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	68a3      	ldr	r3, [r4, #8]
 80132c8:	d023      	beq.n	8013312 <ucdr_deserialize_double+0x11a>
 80132ca:	79db      	ldrb	r3, [r3, #7]
 80132cc:	702b      	strb	r3, [r5, #0]
 80132ce:	68a3      	ldr	r3, [r4, #8]
 80132d0:	799b      	ldrb	r3, [r3, #6]
 80132d2:	706b      	strb	r3, [r5, #1]
 80132d4:	68a3      	ldr	r3, [r4, #8]
 80132d6:	795b      	ldrb	r3, [r3, #5]
 80132d8:	70ab      	strb	r3, [r5, #2]
 80132da:	68a3      	ldr	r3, [r4, #8]
 80132dc:	791b      	ldrb	r3, [r3, #4]
 80132de:	70eb      	strb	r3, [r5, #3]
 80132e0:	68a3      	ldr	r3, [r4, #8]
 80132e2:	78db      	ldrb	r3, [r3, #3]
 80132e4:	712b      	strb	r3, [r5, #4]
 80132e6:	68a3      	ldr	r3, [r4, #8]
 80132e8:	789b      	ldrb	r3, [r3, #2]
 80132ea:	716b      	strb	r3, [r5, #5]
 80132ec:	68a3      	ldr	r3, [r4, #8]
 80132ee:	785b      	ldrb	r3, [r3, #1]
 80132f0:	71ab      	strb	r3, [r5, #6]
 80132f2:	68a3      	ldr	r3, [r4, #8]
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	71eb      	strb	r3, [r5, #7]
 80132f8:	2108      	movs	r1, #8
 80132fa:	68a2      	ldr	r2, [r4, #8]
 80132fc:	6923      	ldr	r3, [r4, #16]
 80132fe:	440a      	add	r2, r1
 8013300:	7561      	strb	r1, [r4, #21]
 8013302:	440b      	add	r3, r1
 8013304:	60a2      	str	r2, [r4, #8]
 8013306:	6123      	str	r3, [r4, #16]
 8013308:	7da0      	ldrb	r0, [r4, #22]
 801330a:	f080 0001 	eor.w	r0, r0, #1
 801330e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	602a      	str	r2, [r5, #0]
 8013318:	606b      	str	r3, [r5, #4]
 801331a:	e7ed      	b.n	80132f8 <ucdr_deserialize_double+0x100>
 801331c:	68a2      	ldr	r2, [r4, #8]
 801331e:	6923      	ldr	r3, [r4, #16]
 8013320:	1b92      	subs	r2, r2, r6
 8013322:	7da0      	ldrb	r0, [r4, #22]
 8013324:	1b9b      	subs	r3, r3, r6
 8013326:	f884 8015 	strb.w	r8, [r4, #21]
 801332a:	f080 0001 	eor.w	r0, r0, #1
 801332e:	60a2      	str	r2, [r4, #8]
 8013330:	6123      	str	r3, [r4, #16]
 8013332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013336:	68a3      	ldr	r3, [r4, #8]
 8013338:	799b      	ldrb	r3, [r3, #6]
 801333a:	706b      	strb	r3, [r5, #1]
 801333c:	1cab      	adds	r3, r5, #2
 801333e:	68a2      	ldr	r2, [r4, #8]
 8013340:	7952      	ldrb	r2, [r2, #5]
 8013342:	f803 2b01 	strb.w	r2, [r3], #1
 8013346:	68a2      	ldr	r2, [r4, #8]
 8013348:	7912      	ldrb	r2, [r2, #4]
 801334a:	f803 2b01 	strb.w	r2, [r3], #1
 801334e:	68a2      	ldr	r2, [r4, #8]
 8013350:	78d2      	ldrb	r2, [r2, #3]
 8013352:	f803 2b01 	strb.w	r2, [r3], #1
 8013356:	68a2      	ldr	r2, [r4, #8]
 8013358:	7892      	ldrb	r2, [r2, #2]
 801335a:	f803 2b01 	strb.w	r2, [r3], #1
 801335e:	68a2      	ldr	r2, [r4, #8]
 8013360:	7852      	ldrb	r2, [r2, #1]
 8013362:	f803 2b01 	strb.w	r2, [r3], #1
 8013366:	68a2      	ldr	r2, [r4, #8]
 8013368:	7812      	ldrb	r2, [r2, #0]
 801336a:	701a      	strb	r2, [r3, #0]
 801336c:	e796      	b.n	801329c <ucdr_deserialize_double+0xa4>
 801336e:	4639      	mov	r1, r7
 8013370:	4632      	mov	r2, r6
 8013372:	4628      	mov	r0, r5
 8013374:	f009 fe59 	bl	801d02a <memcpy>
 8013378:	464a      	mov	r2, r9
 801337a:	19a8      	adds	r0, r5, r6
 801337c:	68a1      	ldr	r1, [r4, #8]
 801337e:	f009 fe54 	bl	801d02a <memcpy>
 8013382:	e78b      	b.n	801329c <ucdr_deserialize_double+0xa4>

08013384 <ucdr_deserialize_endian_double>:
 8013384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013388:	4604      	mov	r4, r0
 801338a:	460f      	mov	r7, r1
 801338c:	2108      	movs	r1, #8
 801338e:	4615      	mov	r5, r2
 8013390:	f000 f926 	bl	80135e0 <ucdr_buffer_alignment>
 8013394:	4601      	mov	r1, r0
 8013396:	4620      	mov	r0, r4
 8013398:	f894 8015 	ldrb.w	r8, [r4, #21]
 801339c:	f000 f968 	bl	8013670 <ucdr_advance_buffer>
 80133a0:	2108      	movs	r1, #8
 80133a2:	4620      	mov	r0, r4
 80133a4:	f000 f8bc 	bl	8013520 <ucdr_check_buffer_available_for>
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d159      	bne.n	8013460 <ucdr_deserialize_endian_double+0xdc>
 80133ac:	e9d4 6901 	ldrd	r6, r9, [r4, #4]
 80133b0:	454e      	cmp	r6, r9
 80133b2:	d950      	bls.n	8013456 <ucdr_deserialize_endian_double+0xd2>
 80133b4:	6923      	ldr	r3, [r4, #16]
 80133b6:	4620      	mov	r0, r4
 80133b8:	60a6      	str	r6, [r4, #8]
 80133ba:	eba6 0609 	sub.w	r6, r6, r9
 80133be:	4433      	add	r3, r6
 80133c0:	f1c6 0a08 	rsb	sl, r6, #8
 80133c4:	6123      	str	r3, [r4, #16]
 80133c6:	4651      	mov	r1, sl
 80133c8:	f000 f8b6 	bl	8013538 <ucdr_check_final_buffer_behavior>
 80133cc:	2800      	cmp	r0, #0
 80133ce:	d073      	beq.n	80134b8 <ucdr_deserialize_endian_double+0x134>
 80133d0:	2f01      	cmp	r7, #1
 80133d2:	f000 809a 	beq.w	801350a <ucdr_deserialize_endian_double+0x186>
 80133d6:	f899 3007 	ldrb.w	r3, [r9, #7]
 80133da:	702b      	strb	r3, [r5, #0]
 80133dc:	2e00      	cmp	r6, #0
 80133de:	d078      	beq.n	80134d2 <ucdr_deserialize_endian_double+0x14e>
 80133e0:	f899 3006 	ldrb.w	r3, [r9, #6]
 80133e4:	2e01      	cmp	r6, #1
 80133e6:	706b      	strb	r3, [r5, #1]
 80133e8:	f105 0302 	add.w	r3, r5, #2
 80133ec:	d075      	beq.n	80134da <ucdr_deserialize_endian_double+0x156>
 80133ee:	f899 3005 	ldrb.w	r3, [r9, #5]
 80133f2:	2e02      	cmp	r6, #2
 80133f4:	70ab      	strb	r3, [r5, #2]
 80133f6:	f105 0303 	add.w	r3, r5, #3
 80133fa:	d072      	beq.n	80134e2 <ucdr_deserialize_endian_double+0x15e>
 80133fc:	f899 3004 	ldrb.w	r3, [r9, #4]
 8013400:	2e03      	cmp	r6, #3
 8013402:	70eb      	strb	r3, [r5, #3]
 8013404:	f105 0304 	add.w	r3, r5, #4
 8013408:	d06f      	beq.n	80134ea <ucdr_deserialize_endian_double+0x166>
 801340a:	f899 3003 	ldrb.w	r3, [r9, #3]
 801340e:	2e04      	cmp	r6, #4
 8013410:	712b      	strb	r3, [r5, #4]
 8013412:	f105 0305 	add.w	r3, r5, #5
 8013416:	d06c      	beq.n	80134f2 <ucdr_deserialize_endian_double+0x16e>
 8013418:	f899 3002 	ldrb.w	r3, [r9, #2]
 801341c:	2e05      	cmp	r6, #5
 801341e:	716b      	strb	r3, [r5, #5]
 8013420:	f105 0306 	add.w	r3, r5, #6
 8013424:	d069      	beq.n	80134fa <ucdr_deserialize_endian_double+0x176>
 8013426:	f899 3001 	ldrb.w	r3, [r9, #1]
 801342a:	2e06      	cmp	r6, #6
 801342c:	71ab      	strb	r3, [r5, #6]
 801342e:	f105 0307 	add.w	r3, r5, #7
 8013432:	d066      	beq.n	8013502 <ucdr_deserialize_endian_double+0x17e>
 8013434:	f899 3000 	ldrb.w	r3, [r9]
 8013438:	71eb      	strb	r3, [r5, #7]
 801343a:	6923      	ldr	r3, [r4, #16]
 801343c:	2108      	movs	r1, #8
 801343e:	68a2      	ldr	r2, [r4, #8]
 8013440:	3308      	adds	r3, #8
 8013442:	7da0      	ldrb	r0, [r4, #22]
 8013444:	4452      	add	r2, sl
 8013446:	7561      	strb	r1, [r4, #21]
 8013448:	1b9e      	subs	r6, r3, r6
 801344a:	f080 0001 	eor.w	r0, r0, #1
 801344e:	60a2      	str	r2, [r4, #8]
 8013450:	6126      	str	r6, [r4, #16]
 8013452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013456:	2108      	movs	r1, #8
 8013458:	4620      	mov	r0, r4
 801345a:	f000 f86d 	bl	8013538 <ucdr_check_final_buffer_behavior>
 801345e:	b308      	cbz	r0, 80134a4 <ucdr_deserialize_endian_double+0x120>
 8013460:	2f01      	cmp	r7, #1
 8013462:	68a3      	ldr	r3, [r4, #8]
 8013464:	d023      	beq.n	80134ae <ucdr_deserialize_endian_double+0x12a>
 8013466:	79db      	ldrb	r3, [r3, #7]
 8013468:	702b      	strb	r3, [r5, #0]
 801346a:	68a3      	ldr	r3, [r4, #8]
 801346c:	799b      	ldrb	r3, [r3, #6]
 801346e:	706b      	strb	r3, [r5, #1]
 8013470:	68a3      	ldr	r3, [r4, #8]
 8013472:	795b      	ldrb	r3, [r3, #5]
 8013474:	70ab      	strb	r3, [r5, #2]
 8013476:	68a3      	ldr	r3, [r4, #8]
 8013478:	791b      	ldrb	r3, [r3, #4]
 801347a:	70eb      	strb	r3, [r5, #3]
 801347c:	68a3      	ldr	r3, [r4, #8]
 801347e:	78db      	ldrb	r3, [r3, #3]
 8013480:	712b      	strb	r3, [r5, #4]
 8013482:	68a3      	ldr	r3, [r4, #8]
 8013484:	789b      	ldrb	r3, [r3, #2]
 8013486:	716b      	strb	r3, [r5, #5]
 8013488:	68a3      	ldr	r3, [r4, #8]
 801348a:	785b      	ldrb	r3, [r3, #1]
 801348c:	71ab      	strb	r3, [r5, #6]
 801348e:	68a3      	ldr	r3, [r4, #8]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	71eb      	strb	r3, [r5, #7]
 8013494:	2108      	movs	r1, #8
 8013496:	68a2      	ldr	r2, [r4, #8]
 8013498:	6923      	ldr	r3, [r4, #16]
 801349a:	440a      	add	r2, r1
 801349c:	7561      	strb	r1, [r4, #21]
 801349e:	440b      	add	r3, r1
 80134a0:	60a2      	str	r2, [r4, #8]
 80134a2:	6123      	str	r3, [r4, #16]
 80134a4:	7da0      	ldrb	r0, [r4, #22]
 80134a6:	f080 0001 	eor.w	r0, r0, #1
 80134aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ae:	681a      	ldr	r2, [r3, #0]
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	602a      	str	r2, [r5, #0]
 80134b4:	606b      	str	r3, [r5, #4]
 80134b6:	e7ed      	b.n	8013494 <ucdr_deserialize_endian_double+0x110>
 80134b8:	68a2      	ldr	r2, [r4, #8]
 80134ba:	6923      	ldr	r3, [r4, #16]
 80134bc:	1b92      	subs	r2, r2, r6
 80134be:	7da0      	ldrb	r0, [r4, #22]
 80134c0:	1b9b      	subs	r3, r3, r6
 80134c2:	f884 8015 	strb.w	r8, [r4, #21]
 80134c6:	f080 0001 	eor.w	r0, r0, #1
 80134ca:	60a2      	str	r2, [r4, #8]
 80134cc:	6123      	str	r3, [r4, #16]
 80134ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	799b      	ldrb	r3, [r3, #6]
 80134d6:	706b      	strb	r3, [r5, #1]
 80134d8:	1cab      	adds	r3, r5, #2
 80134da:	68a2      	ldr	r2, [r4, #8]
 80134dc:	7952      	ldrb	r2, [r2, #5]
 80134de:	f803 2b01 	strb.w	r2, [r3], #1
 80134e2:	68a2      	ldr	r2, [r4, #8]
 80134e4:	7912      	ldrb	r2, [r2, #4]
 80134e6:	f803 2b01 	strb.w	r2, [r3], #1
 80134ea:	68a2      	ldr	r2, [r4, #8]
 80134ec:	78d2      	ldrb	r2, [r2, #3]
 80134ee:	f803 2b01 	strb.w	r2, [r3], #1
 80134f2:	68a2      	ldr	r2, [r4, #8]
 80134f4:	7892      	ldrb	r2, [r2, #2]
 80134f6:	f803 2b01 	strb.w	r2, [r3], #1
 80134fa:	68a2      	ldr	r2, [r4, #8]
 80134fc:	7852      	ldrb	r2, [r2, #1]
 80134fe:	f803 2b01 	strb.w	r2, [r3], #1
 8013502:	68a2      	ldr	r2, [r4, #8]
 8013504:	7812      	ldrb	r2, [r2, #0]
 8013506:	701a      	strb	r2, [r3, #0]
 8013508:	e797      	b.n	801343a <ucdr_deserialize_endian_double+0xb6>
 801350a:	4649      	mov	r1, r9
 801350c:	4632      	mov	r2, r6
 801350e:	4628      	mov	r0, r5
 8013510:	f009 fd8b 	bl	801d02a <memcpy>
 8013514:	4652      	mov	r2, sl
 8013516:	19a8      	adds	r0, r5, r6
 8013518:	68a1      	ldr	r1, [r4, #8]
 801351a:	f009 fd86 	bl	801d02a <memcpy>
 801351e:	e78c      	b.n	801343a <ucdr_deserialize_endian_double+0xb6>

08013520 <ucdr_check_buffer_available_for>:
 8013520:	7d83      	ldrb	r3, [r0, #22]
 8013522:	b93b      	cbnz	r3, 8013534 <ucdr_check_buffer_available_for+0x14>
 8013524:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8013528:	4419      	add	r1, r3
 801352a:	4288      	cmp	r0, r1
 801352c:	bf34      	ite	cc
 801352e:	2000      	movcc	r0, #0
 8013530:	2001      	movcs	r0, #1
 8013532:	4770      	bx	lr
 8013534:	2000      	movs	r0, #0
 8013536:	4770      	bx	lr

08013538 <ucdr_check_final_buffer_behavior>:
 8013538:	7d83      	ldrb	r3, [r0, #22]
 801353a:	b943      	cbnz	r3, 801354e <ucdr_check_final_buffer_behavior+0x16>
 801353c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013540:	b510      	push	{r4, lr}
 8013542:	4291      	cmp	r1, r2
 8013544:	4604      	mov	r4, r0
 8013546:	d205      	bcs.n	8013554 <ucdr_check_final_buffer_behavior+0x1c>
 8013548:	2301      	movs	r3, #1
 801354a:	4618      	mov	r0, r3
 801354c:	bd10      	pop	{r4, pc}
 801354e:	2300      	movs	r3, #0
 8013550:	4618      	mov	r0, r3
 8013552:	4770      	bx	lr
 8013554:	6982      	ldr	r2, [r0, #24]
 8013556:	b13a      	cbz	r2, 8013568 <ucdr_check_final_buffer_behavior+0x30>
 8013558:	69c1      	ldr	r1, [r0, #28]
 801355a:	4790      	blx	r2
 801355c:	f080 0301 	eor.w	r3, r0, #1
 8013560:	75a0      	strb	r0, [r4, #22]
 8013562:	b2db      	uxtb	r3, r3
 8013564:	4618      	mov	r0, r3
 8013566:	bd10      	pop	{r4, pc}
 8013568:	2001      	movs	r0, #1
 801356a:	75a0      	strb	r0, [r4, #22]
 801356c:	e7fa      	b.n	8013564 <ucdr_check_final_buffer_behavior+0x2c>
 801356e:	bf00      	nop

08013570 <ucdr_set_on_full_buffer_callback>:
 8013570:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013574:	4770      	bx	lr
 8013576:	bf00      	nop

08013578 <ucdr_init_buffer_origin_offset_endian>:
 8013578:	b410      	push	{r4}
 801357a:	9c01      	ldr	r4, [sp, #4]
 801357c:	440a      	add	r2, r1
 801357e:	6001      	str	r1, [r0, #0]
 8013580:	6042      	str	r2, [r0, #4]
 8013582:	190a      	adds	r2, r1, r4
 8013584:	441c      	add	r4, r3
 8013586:	6082      	str	r2, [r0, #8]
 8013588:	2200      	movs	r2, #0
 801358a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801358e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013592:	7542      	strb	r2, [r0, #21]
 8013594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013598:	7582      	strb	r2, [r0, #22]
 801359a:	7503      	strb	r3, [r0, #20]
 801359c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80135a0:	4770      	bx	lr
 80135a2:	bf00      	nop

080135a4 <ucdr_init_buffer_origin_offset>:
 80135a4:	b510      	push	{r4, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	9c04      	ldr	r4, [sp, #16]
 80135aa:	9400      	str	r4, [sp, #0]
 80135ac:	2401      	movs	r4, #1
 80135ae:	9401      	str	r4, [sp, #4]
 80135b0:	f7ff ffe2 	bl	8013578 <ucdr_init_buffer_origin_offset_endian>
 80135b4:	b002      	add	sp, #8
 80135b6:	bd10      	pop	{r4, pc}

080135b8 <ucdr_init_buffer_origin>:
 80135b8:	b510      	push	{r4, lr}
 80135ba:	2400      	movs	r4, #0
 80135bc:	b082      	sub	sp, #8
 80135be:	9400      	str	r4, [sp, #0]
 80135c0:	f7ff fff0 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 80135c4:	b002      	add	sp, #8
 80135c6:	bd10      	pop	{r4, pc}

080135c8 <ucdr_init_buffer>:
 80135c8:	2300      	movs	r3, #0
 80135ca:	f7ff bff5 	b.w	80135b8 <ucdr_init_buffer_origin>
 80135ce:	bf00      	nop

080135d0 <ucdr_alignment>:
 80135d0:	fbb0 f2f1 	udiv	r2, r0, r1
 80135d4:	fb02 0011 	mls	r0, r2, r1, r0
 80135d8:	1e4b      	subs	r3, r1, #1
 80135da:	1a08      	subs	r0, r1, r0
 80135dc:	4018      	ands	r0, r3
 80135de:	4770      	bx	lr

080135e0 <ucdr_buffer_alignment>:
 80135e0:	7d43      	ldrb	r3, [r0, #21]
 80135e2:	428b      	cmp	r3, r1
 80135e4:	d209      	bcs.n	80135fa <ucdr_buffer_alignment+0x1a>
 80135e6:	6903      	ldr	r3, [r0, #16]
 80135e8:	1e4a      	subs	r2, r1, #1
 80135ea:	fbb3 f0f1 	udiv	r0, r3, r1
 80135ee:	fb01 3010 	mls	r0, r1, r0, r3
 80135f2:	1a09      	subs	r1, r1, r0
 80135f4:	ea01 0002 	and.w	r0, r1, r2
 80135f8:	4770      	bx	lr
 80135fa:	2000      	movs	r0, #0
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop

08013600 <ucdr_align_to>:
 8013600:	b538      	push	{r3, r4, r5, lr}
 8013602:	4604      	mov	r4, r0
 8013604:	460d      	mov	r5, r1
 8013606:	f7ff ffeb 	bl	80135e0 <ucdr_buffer_alignment>
 801360a:	68a3      	ldr	r3, [r4, #8]
 801360c:	7565      	strb	r5, [r4, #21]
 801360e:	181a      	adds	r2, r3, r0
 8013610:	6923      	ldr	r3, [r4, #16]
 8013612:	4418      	add	r0, r3
 8013614:	6863      	ldr	r3, [r4, #4]
 8013616:	4293      	cmp	r3, r2
 8013618:	6120      	str	r0, [r4, #16]
 801361a:	bf28      	it	cs
 801361c:	4613      	movcs	r3, r2
 801361e:	60a3      	str	r3, [r4, #8]
 8013620:	bd38      	pop	{r3, r4, r5, pc}
 8013622:	bf00      	nop

08013624 <ucdr_buffer_length>:
 8013624:	6882      	ldr	r2, [r0, #8]
 8013626:	6800      	ldr	r0, [r0, #0]
 8013628:	1a10      	subs	r0, r2, r0
 801362a:	4770      	bx	lr

0801362c <ucdr_buffer_remaining>:
 801362c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013630:	1a10      	subs	r0, r2, r0
 8013632:	4770      	bx	lr

08013634 <ucdr_check_final_buffer_behavior_array>:
 8013634:	b538      	push	{r3, r4, r5, lr}
 8013636:	7d83      	ldrb	r3, [r0, #22]
 8013638:	b9a3      	cbnz	r3, 8013664 <ucdr_check_final_buffer_behavior_array+0x30>
 801363a:	4604      	mov	r4, r0
 801363c:	460d      	mov	r5, r1
 801363e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013642:	429a      	cmp	r2, r3
 8013644:	d300      	bcc.n	8013648 <ucdr_check_final_buffer_behavior_array+0x14>
 8013646:	b931      	cbnz	r1, 8013656 <ucdr_check_final_buffer_behavior_array+0x22>
 8013648:	4620      	mov	r0, r4
 801364a:	f7ff ffef 	bl	801362c <ucdr_buffer_remaining>
 801364e:	42a8      	cmp	r0, r5
 8013650:	bf28      	it	cs
 8013652:	4628      	movcs	r0, r5
 8013654:	bd38      	pop	{r3, r4, r5, pc}
 8013656:	6983      	ldr	r3, [r0, #24]
 8013658:	b133      	cbz	r3, 8013668 <ucdr_check_final_buffer_behavior_array+0x34>
 801365a:	69c1      	ldr	r1, [r0, #28]
 801365c:	4798      	blx	r3
 801365e:	75a0      	strb	r0, [r4, #22]
 8013660:	2800      	cmp	r0, #0
 8013662:	d0f1      	beq.n	8013648 <ucdr_check_final_buffer_behavior_array+0x14>
 8013664:	2000      	movs	r0, #0
 8013666:	bd38      	pop	{r3, r4, r5, pc}
 8013668:	2301      	movs	r3, #1
 801366a:	7583      	strb	r3, [r0, #22]
 801366c:	e7fa      	b.n	8013664 <ucdr_check_final_buffer_behavior_array+0x30>
 801366e:	bf00      	nop

08013670 <ucdr_advance_buffer>:
 8013670:	b538      	push	{r3, r4, r5, lr}
 8013672:	4604      	mov	r4, r0
 8013674:	460d      	mov	r5, r1
 8013676:	f7ff ff53 	bl	8013520 <ucdr_check_buffer_available_for>
 801367a:	b178      	cbz	r0, 801369c <ucdr_advance_buffer+0x2c>
 801367c:	6923      	ldr	r3, [r4, #16]
 801367e:	68a2      	ldr	r2, [r4, #8]
 8013680:	442b      	add	r3, r5
 8013682:	442a      	add	r2, r5
 8013684:	6123      	str	r3, [r4, #16]
 8013686:	2301      	movs	r3, #1
 8013688:	60a2      	str	r2, [r4, #8]
 801368a:	7563      	strb	r3, [r4, #21]
 801368c:	bd38      	pop	{r3, r4, r5, pc}
 801368e:	68a2      	ldr	r2, [r4, #8]
 8013690:	1a2d      	subs	r5, r5, r0
 8013692:	6923      	ldr	r3, [r4, #16]
 8013694:	4402      	add	r2, r0
 8013696:	4418      	add	r0, r3
 8013698:	60a2      	str	r2, [r4, #8]
 801369a:	6120      	str	r0, [r4, #16]
 801369c:	4629      	mov	r1, r5
 801369e:	2201      	movs	r2, #1
 80136a0:	4620      	mov	r0, r4
 80136a2:	f7ff ffc7 	bl	8013634 <ucdr_check_final_buffer_behavior_array>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	d1f1      	bne.n	801368e <ucdr_advance_buffer+0x1e>
 80136aa:	2301      	movs	r3, #1
 80136ac:	7563      	strb	r3, [r4, #21]
 80136ae:	bd38      	pop	{r3, r4, r5, pc}

080136b0 <ucdr_serialize_sequence_char>:
 80136b0:	b570      	push	{r4, r5, r6, lr}
 80136b2:	4615      	mov	r5, r2
 80136b4:	460e      	mov	r6, r1
 80136b6:	7d01      	ldrb	r1, [r0, #20]
 80136b8:	4604      	mov	r4, r0
 80136ba:	f7fe ff51 	bl	8012560 <ucdr_serialize_endian_uint32_t>
 80136be:	b90d      	cbnz	r5, 80136c4 <ucdr_serialize_sequence_char+0x14>
 80136c0:	2001      	movs	r0, #1
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	462b      	mov	r3, r5
 80136c6:	4632      	mov	r2, r6
 80136c8:	7d21      	ldrb	r1, [r4, #20]
 80136ca:	4620      	mov	r0, r4
 80136cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136d0:	f7fe ba90 	b.w	8011bf4 <ucdr_serialize_endian_array_char>

080136d4 <ucdr_deserialize_sequence_char>:
 80136d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d8:	461d      	mov	r5, r3
 80136da:	4616      	mov	r6, r2
 80136dc:	460f      	mov	r7, r1
 80136de:	461a      	mov	r2, r3
 80136e0:	7d01      	ldrb	r1, [r0, #20]
 80136e2:	4604      	mov	r4, r0
 80136e4:	f7ff f864 	bl	80127b0 <ucdr_deserialize_endian_uint32_t>
 80136e8:	682b      	ldr	r3, [r5, #0]
 80136ea:	429e      	cmp	r6, r3
 80136ec:	d201      	bcs.n	80136f2 <ucdr_deserialize_sequence_char+0x1e>
 80136ee:	2201      	movs	r2, #1
 80136f0:	75a2      	strb	r2, [r4, #22]
 80136f2:	b913      	cbnz	r3, 80136fa <ucdr_deserialize_sequence_char+0x26>
 80136f4:	2001      	movs	r0, #1
 80136f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136fa:	463a      	mov	r2, r7
 80136fc:	7d21      	ldrb	r1, [r4, #20]
 80136fe:	4620      	mov	r0, r4
 8013700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013704:	f7fe baa8 	b.w	8011c58 <ucdr_deserialize_endian_array_char>

08013708 <ucdr_serialize_sequence_uint8_t>:
 8013708:	b570      	push	{r4, r5, r6, lr}
 801370a:	4615      	mov	r5, r2
 801370c:	460e      	mov	r6, r1
 801370e:	7d01      	ldrb	r1, [r0, #20]
 8013710:	4604      	mov	r4, r0
 8013712:	f7fe ff25 	bl	8012560 <ucdr_serialize_endian_uint32_t>
 8013716:	b90d      	cbnz	r5, 801371c <ucdr_serialize_sequence_uint8_t+0x14>
 8013718:	2001      	movs	r0, #1
 801371a:	bd70      	pop	{r4, r5, r6, pc}
 801371c:	462b      	mov	r3, r5
 801371e:	4632      	mov	r2, r6
 8013720:	7d21      	ldrb	r1, [r4, #20]
 8013722:	4620      	mov	r0, r4
 8013724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013728:	f7fe bafc 	b.w	8011d24 <ucdr_serialize_endian_array_uint8_t>

0801372c <ucdr_deserialize_sequence_uint8_t>:
 801372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013730:	461d      	mov	r5, r3
 8013732:	4616      	mov	r6, r2
 8013734:	460f      	mov	r7, r1
 8013736:	461a      	mov	r2, r3
 8013738:	7d01      	ldrb	r1, [r0, #20]
 801373a:	4604      	mov	r4, r0
 801373c:	f7ff f838 	bl	80127b0 <ucdr_deserialize_endian_uint32_t>
 8013740:	682b      	ldr	r3, [r5, #0]
 8013742:	429e      	cmp	r6, r3
 8013744:	d201      	bcs.n	801374a <ucdr_deserialize_sequence_uint8_t+0x1e>
 8013746:	2201      	movs	r2, #1
 8013748:	75a2      	strb	r2, [r4, #22]
 801374a:	b913      	cbnz	r3, 8013752 <ucdr_deserialize_sequence_uint8_t+0x26>
 801374c:	2001      	movs	r0, #1
 801374e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013752:	463a      	mov	r2, r7
 8013754:	7d21      	ldrb	r1, [r4, #20]
 8013756:	4620      	mov	r0, r4
 8013758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801375c:	f7fe bb48 	b.w	8011df0 <ucdr_deserialize_endian_array_uint8_t>

08013760 <uxr_buffer_delete_entity>:
 8013760:	b510      	push	{r4, lr}
 8013762:	2300      	movs	r3, #0
 8013764:	b08e      	sub	sp, #56	@ 0x38
 8013766:	4604      	mov	r4, r0
 8013768:	9103      	str	r1, [sp, #12]
 801376a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801376e:	2303      	movs	r3, #3
 8013770:	2204      	movs	r2, #4
 8013772:	9300      	str	r3, [sp, #0]
 8013774:	ab06      	add	r3, sp, #24
 8013776:	f001 fab1 	bl	8014cdc <uxr_prepare_stream_to_write_submessage>
 801377a:	b918      	cbnz	r0, 8013784 <uxr_buffer_delete_entity+0x24>
 801377c:	4604      	mov	r4, r0
 801377e:	4620      	mov	r0, r4
 8013780:	b00e      	add	sp, #56	@ 0x38
 8013782:	bd10      	pop	{r4, pc}
 8013784:	9902      	ldr	r1, [sp, #8]
 8013786:	aa05      	add	r2, sp, #20
 8013788:	4620      	mov	r0, r4
 801378a:	f001 fbe3 	bl	8014f54 <uxr_init_base_object_request>
 801378e:	4604      	mov	r4, r0
 8013790:	a905      	add	r1, sp, #20
 8013792:	a806      	add	r0, sp, #24
 8013794:	f003 f9c8 	bl	8016b28 <uxr_serialize_DELETE_Payload>
 8013798:	4620      	mov	r0, r4
 801379a:	b00e      	add	sp, #56	@ 0x38
 801379c:	bd10      	pop	{r4, pc}
 801379e:	bf00      	nop

080137a0 <uxr_common_create_entity>:
 80137a0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80137a4:	b510      	push	{r4, lr}
 80137a6:	f1bc 0f01 	cmp.w	ip, #1
 80137aa:	b08c      	sub	sp, #48	@ 0x30
 80137ac:	4604      	mov	r4, r0
 80137ae:	9202      	str	r2, [sp, #8]
 80137b0:	bf0c      	ite	eq
 80137b2:	f003 0201 	andeq.w	r2, r3, #1
 80137b6:	2200      	movne	r2, #0
 80137b8:	330e      	adds	r3, #14
 80137ba:	9103      	str	r1, [sp, #12]
 80137bc:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80137c0:	441a      	add	r2, r3
 80137c2:	ab04      	add	r3, sp, #16
 80137c4:	9101      	str	r1, [sp, #4]
 80137c6:	2101      	movs	r1, #1
 80137c8:	b292      	uxth	r2, r2
 80137ca:	9100      	str	r1, [sp, #0]
 80137cc:	9903      	ldr	r1, [sp, #12]
 80137ce:	f001 fa85 	bl	8014cdc <uxr_prepare_stream_to_write_submessage>
 80137d2:	b918      	cbnz	r0, 80137dc <uxr_common_create_entity+0x3c>
 80137d4:	4604      	mov	r4, r0
 80137d6:	4620      	mov	r0, r4
 80137d8:	b00c      	add	sp, #48	@ 0x30
 80137da:	bd10      	pop	{r4, pc}
 80137dc:	9902      	ldr	r1, [sp, #8]
 80137de:	4620      	mov	r0, r4
 80137e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137e2:	f001 fbb7 	bl	8014f54 <uxr_init_base_object_request>
 80137e6:	4604      	mov	r4, r0
 80137e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80137ea:	a804      	add	r0, sp, #16
 80137ec:	f003 f8f6 	bl	80169dc <uxr_serialize_CREATE_Payload>
 80137f0:	4620      	mov	r0, r4
 80137f2:	b00c      	add	sp, #48	@ 0x30
 80137f4:	bd10      	pop	{r4, pc}
 80137f6:	bf00      	nop

080137f8 <uxr_buffer_create_participant_bin>:
 80137f8:	b570      	push	{r4, r5, r6, lr}
 80137fa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80137fe:	4605      	mov	r5, r0
 8013800:	ac11      	add	r4, sp, #68	@ 0x44
 8013802:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8013806:	2303      	movs	r3, #3
 8013808:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801380c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013810:	7223      	strb	r3, [r4, #8]
 8013812:	2300      	movs	r3, #0
 8013814:	2201      	movs	r2, #1
 8013816:	f88d 3014 	strb.w	r3, [sp, #20]
 801381a:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801381c:	7122      	strb	r2, [r4, #4]
 801381e:	b1cb      	cbz	r3, 8013854 <uxr_buffer_create_participant_bin+0x5c>
 8013820:	f88d 201c 	strb.w	r2, [sp, #28]
 8013824:	9308      	str	r3, [sp, #32]
 8013826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801382a:	a915      	add	r1, sp, #84	@ 0x54
 801382c:	a809      	add	r0, sp, #36	@ 0x24
 801382e:	f7ff fecb 	bl	80135c8 <ucdr_init_buffer>
 8013832:	a905      	add	r1, sp, #20
 8013834:	a809      	add	r0, sp, #36	@ 0x24
 8013836:	f002 fda7 	bl	8016388 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801383a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801383c:	9600      	str	r6, [sp, #0]
 801383e:	4628      	mov	r0, r5
 8013840:	9401      	str	r4, [sp, #4]
 8013842:	60e3      	str	r3, [r4, #12]
 8013844:	b29b      	uxth	r3, r3
 8013846:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801384a:	f7ff ffa9 	bl	80137a0 <uxr_common_create_entity>
 801384e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8013852:	bd70      	pop	{r4, r5, r6, pc}
 8013854:	f88d 301c 	strb.w	r3, [sp, #28]
 8013858:	e7e5      	b.n	8013826 <uxr_buffer_create_participant_bin+0x2e>
 801385a:	bf00      	nop

0801385c <uxr_buffer_create_topic_bin>:
 801385c:	b570      	push	{r4, r5, r6, lr}
 801385e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8013862:	4605      	mov	r5, r0
 8013864:	4618      	mov	r0, r3
 8013866:	9105      	str	r1, [sp, #20]
 8013868:	a997      	add	r1, sp, #604	@ 0x25c
 801386a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801386e:	ac13      	add	r4, sp, #76	@ 0x4c
 8013870:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013874:	2302      	movs	r3, #2
 8013876:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801387a:	f000 f9ab 	bl	8013bd4 <uxr_object_id_to_raw>
 801387e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8013880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013884:	a917      	add	r1, sp, #92	@ 0x5c
 8013886:	a80b      	add	r0, sp, #44	@ 0x2c
 8013888:	9306      	str	r3, [sp, #24]
 801388a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801388c:	930a      	str	r3, [sp, #40]	@ 0x28
 801388e:	2303      	movs	r3, #3
 8013890:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8013894:	2301      	movs	r3, #1
 8013896:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801389a:	2300      	movs	r3, #0
 801389c:	f88d 301c 	strb.w	r3, [sp, #28]
 80138a0:	f7ff fe92 	bl	80135c8 <ucdr_init_buffer>
 80138a4:	a906      	add	r1, sp, #24
 80138a6:	a80b      	add	r0, sp, #44	@ 0x2c
 80138a8:	f002 fd90 	bl	80163cc <uxr_serialize_OBJK_Topic_Binary>
 80138ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138ae:	4628      	mov	r0, r5
 80138b0:	9600      	str	r6, [sp, #0]
 80138b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80138b4:	b29b      	uxth	r3, r3
 80138b6:	9401      	str	r4, [sp, #4]
 80138b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80138bc:	f7ff ff70 	bl	80137a0 <uxr_common_create_entity>
 80138c0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80138c4:	bd70      	pop	{r4, r5, r6, pc}
 80138c6:	bf00      	nop

080138c8 <uxr_buffer_create_publisher_bin>:
 80138c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ca:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80138ce:	2603      	movs	r6, #3
 80138d0:	4605      	mov	r5, r0
 80138d2:	4618      	mov	r0, r3
 80138d4:	9105      	str	r1, [sp, #20]
 80138d6:	a992      	add	r1, sp, #584	@ 0x248
 80138d8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80138dc:	ac0e      	add	r4, sp, #56	@ 0x38
 80138de:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80138e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80138e6:	f000 f975 	bl	8013bd4 <uxr_object_id_to_raw>
 80138ea:	2300      	movs	r3, #0
 80138ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138f0:	a912      	add	r1, sp, #72	@ 0x48
 80138f2:	a806      	add	r0, sp, #24
 80138f4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80138f8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80138fc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8013900:	f7ff fe62 	bl	80135c8 <ucdr_init_buffer>
 8013904:	a993      	add	r1, sp, #588	@ 0x24c
 8013906:	a806      	add	r0, sp, #24
 8013908:	f002 fe14 	bl	8016534 <uxr_serialize_OBJK_Publisher_Binary>
 801390c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801390e:	4628      	mov	r0, r5
 8013910:	9700      	str	r7, [sp, #0]
 8013912:	9311      	str	r3, [sp, #68]	@ 0x44
 8013914:	b29b      	uxth	r3, r3
 8013916:	9401      	str	r4, [sp, #4]
 8013918:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801391c:	f7ff ff40 	bl	80137a0 <uxr_common_create_entity>
 8013920:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8013924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013926:	bf00      	nop

08013928 <uxr_buffer_create_datawriter_bin>:
 8013928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801392c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013930:	4606      	mov	r6, r0
 8013932:	4618      	mov	r0, r3
 8013934:	2703      	movs	r7, #3
 8013936:	ac1d      	add	r4, sp, #116	@ 0x74
 8013938:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801393c:	9105      	str	r1, [sp, #20]
 801393e:	a9a1      	add	r1, sp, #644	@ 0x284
 8013940:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8013944:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013948:	2305      	movs	r3, #5
 801394a:	7123      	strb	r3, [r4, #4]
 801394c:	f000 f942 	bl	8013bd4 <uxr_object_id_to_raw>
 8013950:	a90e      	add	r1, sp, #56	@ 0x38
 8013952:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8013954:	7227      	strb	r7, [r4, #8]
 8013956:	f000 f93d 	bl	8013bd4 <uxr_object_id_to_raw>
 801395a:	2300      	movs	r3, #0
 801395c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013960:	3d00      	subs	r5, #0
 8013962:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8013966:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801396a:	bf18      	it	ne
 801396c:	2501      	movne	r5, #1
 801396e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8013972:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8013976:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801397a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801397e:	2301      	movs	r3, #1
 8013980:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8013984:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013988:	bb8a      	cbnz	r2, 80139ee <uxr_buffer_create_datawriter_bin+0xc6>
 801398a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801398e:	f04f 0c13 	mov.w	ip, #19
 8013992:	250b      	movs	r5, #11
 8013994:	2221      	movs	r2, #33	@ 0x21
 8013996:	2111      	movs	r1, #17
 8013998:	2009      	movs	r0, #9
 801399a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801399e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80139a2:	b923      	cbnz	r3, 80139ae <uxr_buffer_create_datawriter_bin+0x86>
 80139a4:	4672      	mov	r2, lr
 80139a6:	4661      	mov	r1, ip
 80139a8:	4628      	mov	r0, r5
 80139aa:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80139ae:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d025      	beq.n	8013a02 <uxr_buffer_create_datawriter_bin+0xda>
 80139b6:	2b03      	cmp	r3, #3
 80139b8:	d029      	beq.n	8013a0e <uxr_buffer_create_datawriter_bin+0xe6>
 80139ba:	b32b      	cbz	r3, 8013a08 <uxr_buffer_create_datawriter_bin+0xe0>
 80139bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80139c0:	a921      	add	r1, sp, #132	@ 0x84
 80139c2:	a806      	add	r0, sp, #24
 80139c4:	f7ff fe00 	bl	80135c8 <ucdr_init_buffer>
 80139c8:	a90e      	add	r1, sp, #56	@ 0x38
 80139ca:	a806      	add	r0, sp, #24
 80139cc:	f002 fe28 	bl	8016620 <uxr_serialize_OBJK_DataWriter_Binary>
 80139d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80139d2:	f8cd 8000 	str.w	r8, [sp]
 80139d6:	4630      	mov	r0, r6
 80139d8:	9401      	str	r4, [sp, #4]
 80139da:	60e3      	str	r3, [r4, #12]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80139e2:	f7ff fedd 	bl	80137a0 <uxr_common_create_entity>
 80139e6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80139ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139ee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80139f2:	f04f 0c12 	mov.w	ip, #18
 80139f6:	250a      	movs	r5, #10
 80139f8:	2220      	movs	r2, #32
 80139fa:	2110      	movs	r1, #16
 80139fc:	2008      	movs	r0, #8
 80139fe:	2702      	movs	r7, #2
 8013a00:	e7cd      	b.n	801399e <uxr_buffer_create_datawriter_bin+0x76>
 8013a02:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8013a06:	e7d9      	b.n	80139bc <uxr_buffer_create_datawriter_bin+0x94>
 8013a08:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8013a0c:	e7d6      	b.n	80139bc <uxr_buffer_create_datawriter_bin+0x94>
 8013a0e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8013a12:	e7d3      	b.n	80139bc <uxr_buffer_create_datawriter_bin+0x94>

08013a14 <get_custom_error>:
 8013a14:	4b01      	ldr	r3, [pc, #4]	@ (8013a1c <get_custom_error+0x8>)
 8013a16:	7818      	ldrb	r0, [r3, #0]
 8013a18:	4770      	bx	lr
 8013a1a:	bf00      	nop
 8013a1c:	24013a54 	.word	0x24013a54

08013a20 <recv_custom_msg>:
 8013a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a24:	4693      	mov	fp, r2
 8013a26:	b089      	sub	sp, #36	@ 0x24
 8013a28:	2200      	movs	r2, #0
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	468a      	mov	sl, r1
 8013a2e:	9305      	str	r3, [sp, #20]
 8013a30:	f88d 201e 	strb.w	r2, [sp, #30]
 8013a34:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013a38:	b322      	cbz	r2, 8013a84 <recv_custom_msg+0x64>
 8013a3a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013a3e:	f10d 081f 	add.w	r8, sp, #31
 8013a42:	af05      	add	r7, sp, #20
 8013a44:	f10d 061e 	add.w	r6, sp, #30
 8013a48:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013a4c:	e002      	b.n	8013a54 <recv_custom_msg+0x34>
 8013a4e:	9b05      	ldr	r3, [sp, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	dd0f      	ble.n	8013a74 <recv_custom_msg+0x54>
 8013a54:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013a58:	4623      	mov	r3, r4
 8013a5a:	4622      	mov	r2, r4
 8013a5c:	4648      	mov	r0, r9
 8013a5e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013a62:	e9cd 5600 	strd	r5, r6, [sp]
 8013a66:	f001 fc8b 	bl	8015380 <uxr_read_framed_msg>
 8013a6a:	2800      	cmp	r0, #0
 8013a6c:	d0ef      	beq.n	8013a4e <recv_custom_msg+0x2e>
 8013a6e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013a72:	b1b3      	cbz	r3, 8013aa2 <recv_custom_msg+0x82>
 8013a74:	4b0f      	ldr	r3, [pc, #60]	@ (8013ab4 <recv_custom_msg+0x94>)
 8013a76:	2000      	movs	r0, #0
 8013a78:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013a7c:	701a      	strb	r2, [r3, #0]
 8013a7e:	b009      	add	sp, #36	@ 0x24
 8013a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a84:	f10d 021f 	add.w	r2, sp, #31
 8013a88:	4601      	mov	r1, r0
 8013a8a:	9200      	str	r2, [sp, #0]
 8013a8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a90:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013a94:	47a8      	blx	r5
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d0ec      	beq.n	8013a74 <recv_custom_msg+0x54>
 8013a9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d1e8      	bne.n	8013a74 <recv_custom_msg+0x54>
 8013aa2:	f8cb 0000 	str.w	r0, [fp]
 8013aa6:	2001      	movs	r0, #1
 8013aa8:	f8ca 4000 	str.w	r4, [sl]
 8013aac:	b009      	add	sp, #36	@ 0x24
 8013aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ab2:	bf00      	nop
 8013ab4:	24013a54 	.word	0x24013a54

08013ab8 <send_custom_msg>:
 8013ab8:	b530      	push	{r4, r5, lr}
 8013aba:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8013abe:	b087      	sub	sp, #28
 8013ac0:	4614      	mov	r4, r2
 8013ac2:	b995      	cbnz	r5, 8013aea <send_custom_msg+0x32>
 8013ac4:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 8013ac8:	f10d 0317 	add.w	r3, sp, #23
 8013acc:	47a8      	blx	r5
 8013ace:	1e03      	subs	r3, r0, #0
 8013ad0:	bf18      	it	ne
 8013ad2:	2301      	movne	r3, #1
 8013ad4:	42a0      	cmp	r0, r4
 8013ad6:	bf18      	it	ne
 8013ad8:	2300      	movne	r3, #0
 8013ada:	b91b      	cbnz	r3, 8013ae4 <send_custom_msg+0x2c>
 8013adc:	4a0a      	ldr	r2, [pc, #40]	@ (8013b08 <send_custom_msg+0x50>)
 8013ade:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8013ae2:	7011      	strb	r1, [r2, #0]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	b007      	add	sp, #28
 8013ae8:	bd30      	pop	{r4, r5, pc}
 8013aea:	460b      	mov	r3, r1
 8013aec:	2200      	movs	r2, #0
 8013aee:	f10d 0117 	add.w	r1, sp, #23
 8013af2:	9400      	str	r4, [sp, #0]
 8013af4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013af8:	4602      	mov	r2, r0
 8013afa:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013afe:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013b02:	f001 fa5f 	bl	8014fc4 <uxr_write_framed_msg>
 8013b06:	e7e2      	b.n	8013ace <send_custom_msg+0x16>
 8013b08:	24013a54 	.word	0x24013a54

08013b0c <uxr_set_custom_transport_callbacks>:
 8013b0c:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013b10:	9901      	ldr	r1, [sp, #4]
 8013b12:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013b16:	9b00      	ldr	r3, [sp, #0]
 8013b18:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 8013b1c:	4770      	bx	lr
 8013b1e:	bf00      	nop

08013b20 <uxr_init_custom_transport>:
 8013b20:	b538      	push	{r3, r4, r5, lr}
 8013b22:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013b26:	b303      	cbz	r3, 8013b6a <uxr_init_custom_transport+0x4a>
 8013b28:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	b1e2      	cbz	r2, 8013b6a <uxr_init_custom_transport+0x4a>
 8013b30:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013b34:	b1ca      	cbz	r2, 8013b6a <uxr_init_custom_transport+0x4a>
 8013b36:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013b3a:	b1b2      	cbz	r2, 8013b6a <uxr_init_custom_transport+0x4a>
 8013b3c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013b40:	4798      	blx	r3
 8013b42:	4605      	mov	r5, r0
 8013b44:	b188      	cbz	r0, 8013b6a <uxr_init_custom_transport+0x4a>
 8013b46:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013b4a:	b98b      	cbnz	r3, 8013b70 <uxr_init_custom_transport+0x50>
 8013b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8013b7c <uxr_init_custom_transport+0x5c>)
 8013b4e:	4628      	mov	r0, r5
 8013b50:	490b      	ldr	r1, [pc, #44]	@ (8013b80 <uxr_init_custom_transport+0x60>)
 8013b52:	4a0c      	ldr	r2, [pc, #48]	@ (8013b84 <uxr_init_custom_transport+0x64>)
 8013b54:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013b5c:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013b60:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013b64:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013b68:	bd38      	pop	{r3, r4, r5, pc}
 8013b6a:	2500      	movs	r5, #0
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	bd38      	pop	{r3, r4, r5, pc}
 8013b70:	2100      	movs	r1, #0
 8013b72:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013b76:	f001 fa1f 	bl	8014fb8 <uxr_init_framing_io>
 8013b7a:	e7e7      	b.n	8013b4c <uxr_init_custom_transport+0x2c>
 8013b7c:	08013a21 	.word	0x08013a21
 8013b80:	08013ab9 	.word	0x08013ab9
 8013b84:	08013a15 	.word	0x08013a15

08013b88 <uxr_close_custom_transport>:
 8013b88:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013b8c:	4718      	bx	r3
 8013b8e:	bf00      	nop

08013b90 <uxr_object_id>:
 8013b90:	b082      	sub	sp, #8
 8013b92:	2300      	movs	r3, #0
 8013b94:	f88d 1006 	strb.w	r1, [sp, #6]
 8013b98:	f360 030f 	bfi	r3, r0, #0, #16
 8013b9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013ba0:	f362 431f 	bfi	r3, r2, #16, #16
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	b002      	add	sp, #8
 8013ba8:	4770      	bx	lr
 8013baa:	bf00      	nop

08013bac <uxr_object_id_from_raw>:
 8013bac:	7843      	ldrb	r3, [r0, #1]
 8013bae:	b082      	sub	sp, #8
 8013bb0:	7801      	ldrb	r1, [r0, #0]
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	091a      	lsrs	r2, r3, #4
 8013bb6:	f003 030f 	and.w	r3, r3, #15
 8013bba:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8013bbe:	f88d 3006 	strb.w	r3, [sp, #6]
 8013bc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013bc6:	f362 000f 	bfi	r0, r2, #0, #16
 8013bca:	f363 401f 	bfi	r0, r3, #16, #16
 8013bce:	b002      	add	sp, #8
 8013bd0:	4770      	bx	lr
 8013bd2:	bf00      	nop

08013bd4 <uxr_object_id_to_raw>:
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013bda:	b082      	sub	sp, #8
 8013bdc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013be0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013be4:	f881 c000 	strb.w	ip, [r1]
 8013be8:	7048      	strb	r0, [r1, #1]
 8013bea:	b002      	add	sp, #8
 8013bec:	4770      	bx	lr
 8013bee:	bf00      	nop

08013bf0 <uxr_buffer_cancel_data>:
 8013bf0:	b510      	push	{r4, lr}
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	b094      	sub	sp, #80	@ 0x50
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	9205      	str	r2, [sp, #20]
 8013bfa:	9301      	str	r3, [sp, #4]
 8013bfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013c00:	f88d 301e 	strb.w	r3, [sp, #30]
 8013c04:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013c08:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013c0c:	2308      	movs	r3, #8
 8013c0e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013c12:	2201      	movs	r2, #1
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	ab0c      	add	r3, sp, #48	@ 0x30
 8013c18:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013c1c:	2210      	movs	r2, #16
 8013c1e:	f001 f85d 	bl	8014cdc <uxr_prepare_stream_to_write_submessage>
 8013c22:	b918      	cbnz	r0, 8013c2c <uxr_buffer_cancel_data+0x3c>
 8013c24:	4604      	mov	r4, r0
 8013c26:	4620      	mov	r0, r4
 8013c28:	b014      	add	sp, #80	@ 0x50
 8013c2a:	bd10      	pop	{r4, pc}
 8013c2c:	9905      	ldr	r1, [sp, #20]
 8013c2e:	aa06      	add	r2, sp, #24
 8013c30:	4620      	mov	r0, r4
 8013c32:	f001 f98f 	bl	8014f54 <uxr_init_base_object_request>
 8013c36:	4604      	mov	r4, r0
 8013c38:	a906      	add	r1, sp, #24
 8013c3a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c3c:	f003 f81e 	bl	8016c7c <uxr_serialize_READ_DATA_Payload>
 8013c40:	4620      	mov	r0, r4
 8013c42:	b014      	add	sp, #80	@ 0x50
 8013c44:	bd10      	pop	{r4, pc}
 8013c46:	bf00      	nop

08013c48 <read_submessage_format>:
 8013c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c4c:	b095      	sub	sp, #84	@ 0x54
 8013c4e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8013c52:	b113      	cbz	r3, 8013c5a <read_submessage_format+0x12>
 8013c54:	b015      	add	sp, #84	@ 0x54
 8013c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c5a:	4606      	mov	r6, r0
 8013c5c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013c5e:	460c      	mov	r4, r1
 8013c60:	4615      	mov	r5, r2
 8013c62:	9004      	str	r0, [sp, #16]
 8013c64:	4699      	mov	r9, r3
 8013c66:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013c68:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8013c6c:	9005      	str	r0, [sp, #20]
 8013c6e:	a80c      	add	r0, sp, #48	@ 0x30
 8013c70:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013c74:	1a52      	subs	r2, r2, r1
 8013c76:	f7ff fca7 	bl	80135c8 <ucdr_init_buffer>
 8013c7a:	a80c      	add	r0, sp, #48	@ 0x30
 8013c7c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013c80:	f7ff fc76 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 8013c84:	69e2      	ldr	r2, [r4, #28]
 8013c86:	b19a      	cbz	r2, 8013cb0 <read_submessage_format+0x68>
 8013c88:	f1b8 0f07 	cmp.w	r8, #7
 8013c8c:	f882 9014 	strb.w	r9, [r2, #20]
 8013c90:	d040      	beq.n	8013d14 <read_submessage_format+0xcc>
 8013c92:	f1b8 0f08 	cmp.w	r8, #8
 8013c96:	d02e      	beq.n	8013cf6 <read_submessage_format+0xae>
 8013c98:	f1b8 0f06 	cmp.w	r8, #6
 8013c9c:	d011      	beq.n	8013cc2 <read_submessage_format+0x7a>
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	7513      	strb	r3, [r2, #20]
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f7ff fce3 	bl	8013670 <ucdr_advance_buffer>
 8013caa:	b015      	add	sp, #84	@ 0x54
 8013cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cb0:	f1b8 0f07 	cmp.w	r8, #7
 8013cb4:	d02e      	beq.n	8013d14 <read_submessage_format+0xcc>
 8013cb6:	f1b8 0f08 	cmp.w	r8, #8
 8013cba:	d01c      	beq.n	8013cf6 <read_submessage_format+0xae>
 8013cbc:	f1b8 0f06 	cmp.w	r8, #6
 8013cc0:	d1ef      	bne.n	8013ca2 <read_submessage_format+0x5a>
 8013cc2:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 8013cc6:	f1b8 0f00 	cmp.w	r8, #0
 8013cca:	d011      	beq.n	8013cf0 <read_submessage_format+0xa8>
 8013ccc:	ab0c      	add	r3, sp, #48	@ 0x30
 8013cce:	9501      	str	r5, [sp, #4]
 8013cd0:	463a      	mov	r2, r7
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	9300      	str	r3, [sp, #0]
 8013cd6:	2306      	movs	r3, #6
 8013cd8:	f88d 3016 	strb.w	r3, [sp, #22]
 8013cdc:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 8013ce0:	9302      	str	r3, [sp, #8]
 8013ce2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013ce6:	47c0      	blx	r8
 8013ce8:	2301      	movs	r3, #1
 8013cea:	69e2      	ldr	r2, [r4, #28]
 8013cec:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013cf0:	2a00      	cmp	r2, #0
 8013cf2:	d1d4      	bne.n	8013c9e <read_submessage_format+0x56>
 8013cf4:	e7d5      	b.n	8013ca2 <read_submessage_format+0x5a>
 8013cf6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d0f8      	beq.n	8013cf0 <read_submessage_format+0xa8>
 8013cfe:	a80c      	add	r0, sp, #48	@ 0x30
 8013d00:	a906      	add	r1, sp, #24
 8013d02:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013d06:	f003 f893 	bl	8016e30 <uxr_deserialize_SampleIdentity>
 8013d0a:	b9a0      	cbnz	r0, 8013d36 <read_submessage_format+0xee>
 8013d0c:	69e2      	ldr	r2, [r4, #28]
 8013d0e:	2a00      	cmp	r2, #0
 8013d10:	d1c5      	bne.n	8013c9e <read_submessage_format+0x56>
 8013d12:	e7c6      	b.n	8013ca2 <read_submessage_format+0x5a>
 8013d14:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 8013d18:	b13b      	cbz	r3, 8013d2a <read_submessage_format+0xe2>
 8013d1a:	a906      	add	r1, sp, #24
 8013d1c:	a80c      	add	r0, sp, #48	@ 0x30
 8013d1e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013d22:	f002 fd4b 	bl	80167bc <uxr_deserialize_BaseObjectRequest>
 8013d26:	bb60      	cbnz	r0, 8013d82 <read_submessage_format+0x13a>
 8013d28:	69e2      	ldr	r2, [r4, #28]
 8013d2a:	68a3      	ldr	r3, [r4, #8]
 8013d2c:	442b      	add	r3, r5
 8013d2e:	60a3      	str	r3, [r4, #8]
 8013d30:	2a00      	cmp	r2, #0
 8013d32:	d1b4      	bne.n	8013c9e <read_submessage_format+0x56>
 8013d34:	e7b5      	b.n	8013ca2 <read_submessage_format+0x5a>
 8013d36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d38:	a80c      	add	r0, sp, #48	@ 0x30
 8013d3a:	eba8 0803 	sub.w	r8, r8, r3
 8013d3e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013d42:	44a8      	add	r8, r5
 8013d44:	1a52      	subs	r2, r2, r1
 8013d46:	f7ff fc3f 	bl	80135c8 <ucdr_init_buffer>
 8013d4a:	a80c      	add	r0, sp, #48	@ 0x30
 8013d4c:	fa1f f888 	uxth.w	r8, r8
 8013d50:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d54:	f7ff fc0c 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 8013d58:	ab0c      	add	r3, sp, #48	@ 0x30
 8013d5a:	2108      	movs	r1, #8
 8013d5c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013d60:	9300      	str	r3, [sp, #0]
 8013d62:	463a      	mov	r2, r7
 8013d64:	f88d 1016 	strb.w	r1, [sp, #22]
 8013d68:	ab06      	add	r3, sp, #24
 8013d6a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 8013d6e:	4630      	mov	r0, r6
 8013d70:	9102      	str	r1, [sp, #8]
 8013d72:	9905      	ldr	r1, [sp, #20]
 8013d74:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8013d78:	47b8      	blx	r7
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013d80:	e7c4      	b.n	8013d0c <read_submessage_format+0xc4>
 8013d82:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013d86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d88:	a80c      	add	r0, sp, #48	@ 0x30
 8013d8a:	1a52      	subs	r2, r2, r1
 8013d8c:	eba8 0803 	sub.w	r8, r8, r3
 8013d90:	f7ff fc1a 	bl	80135c8 <ucdr_init_buffer>
 8013d94:	a80c      	add	r0, sp, #48	@ 0x30
 8013d96:	44a8      	add	r8, r5
 8013d98:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013d9c:	f7ff fbe8 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 8013da0:	ab0c      	add	r3, sp, #48	@ 0x30
 8013da2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013da6:	fa1f f888 	uxth.w	r8, r8
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	463a      	mov	r2, r7
 8013dae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013db2:	4630      	mov	r0, r6
 8013db4:	f8cd 8004 	str.w	r8, [sp, #4]
 8013db8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013dbc:	2107      	movs	r1, #7
 8013dbe:	f88d 1016 	strb.w	r1, [sp, #22]
 8013dc2:	b29b      	uxth	r3, r3
 8013dc4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 8013dc8:	9102      	str	r1, [sp, #8]
 8013dca:	9905      	ldr	r1, [sp, #20]
 8013dcc:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 8013dd0:	47b8      	blx	r7
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8013dd8:	e7a6      	b.n	8013d28 <read_submessage_format+0xe0>
 8013dda:	bf00      	nop

08013ddc <on_get_fragmentation_info>:
 8013ddc:	b500      	push	{lr}
 8013dde:	b08b      	sub	sp, #44	@ 0x2c
 8013de0:	4601      	mov	r1, r0
 8013de2:	2204      	movs	r2, #4
 8013de4:	a802      	add	r0, sp, #8
 8013de6:	f7ff fbef 	bl	80135c8 <ucdr_init_buffer>
 8013dea:	f10d 0305 	add.w	r3, sp, #5
 8013dee:	f10d 0206 	add.w	r2, sp, #6
 8013df2:	a901      	add	r1, sp, #4
 8013df4:	a802      	add	r0, sp, #8
 8013df6:	f001 feb3 	bl	8015b60 <uxr_read_submessage_header>
 8013dfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013dfe:	2b0d      	cmp	r3, #13
 8013e00:	d003      	beq.n	8013e0a <on_get_fragmentation_info+0x2e>
 8013e02:	2000      	movs	r0, #0
 8013e04:	b00b      	add	sp, #44	@ 0x2c
 8013e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e0e:	f013 0f02 	tst.w	r3, #2
 8013e12:	bf14      	ite	ne
 8013e14:	2002      	movne	r0, #2
 8013e16:	2001      	moveq	r0, #1
 8013e18:	b00b      	add	sp, #44	@ 0x2c
 8013e1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e1e:	bf00      	nop

08013e20 <read_submessage_get_info>:
 8013e20:	b570      	push	{r4, r5, r6, lr}
 8013e22:	2500      	movs	r5, #0
 8013e24:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013e28:	460e      	mov	r6, r1
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013e30:	4629      	mov	r1, r5
 8013e32:	a810      	add	r0, sp, #64	@ 0x40
 8013e34:	9503      	str	r5, [sp, #12]
 8013e36:	9504      	str	r5, [sp, #16]
 8013e38:	f009 f82e 	bl	801ce98 <memset>
 8013e3c:	a903      	add	r1, sp, #12
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f002 fe5c 	bl	8016afc <uxr_deserialize_GET_INFO_Payload>
 8013e44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013e48:	4620      	mov	r0, r4
 8013e4a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013e4e:	f001 f879 	bl	8014f44 <uxr_session_header_offset>
 8013e52:	462b      	mov	r3, r5
 8013e54:	220c      	movs	r2, #12
 8013e56:	a905      	add	r1, sp, #20
 8013e58:	9000      	str	r0, [sp, #0]
 8013e5a:	a808      	add	r0, sp, #32
 8013e5c:	f7ff fba2 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8013e60:	a910      	add	r1, sp, #64	@ 0x40
 8013e62:	a808      	add	r0, sp, #32
 8013e64:	f002 febe 	bl	8016be4 <uxr_serialize_INFO_Payload>
 8013e68:	9b08      	ldr	r3, [sp, #32]
 8013e6a:	462a      	mov	r2, r5
 8013e6c:	4629      	mov	r1, r5
 8013e6e:	4620      	mov	r0, r4
 8013e70:	f001 f814 	bl	8014e9c <uxr_stamp_session_header>
 8013e74:	a808      	add	r0, sp, #32
 8013e76:	f7ff fbd5 	bl	8013624 <ucdr_buffer_length>
 8013e7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	a905      	add	r1, sp, #20
 8013e80:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013e84:	47a0      	blx	r4
 8013e86:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013e8a:	bd70      	pop	{r4, r5, r6, pc}

08013e8c <write_submessage_acknack.isra.0>:
 8013e8c:	b570      	push	{r4, r5, r6, lr}
 8013e8e:	b092      	sub	sp, #72	@ 0x48
 8013e90:	4605      	mov	r5, r0
 8013e92:	460e      	mov	r6, r1
 8013e94:	4614      	mov	r4, r2
 8013e96:	f001 f855 	bl	8014f44 <uxr_session_header_offset>
 8013e9a:	a905      	add	r1, sp, #20
 8013e9c:	9000      	str	r0, [sp, #0]
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	a80a      	add	r0, sp, #40	@ 0x28
 8013ea2:	2211      	movs	r2, #17
 8013ea4:	f7ff fb7e 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8013ea8:	2218      	movs	r2, #24
 8013eaa:	2300      	movs	r3, #0
 8013eac:	210a      	movs	r1, #10
 8013eae:	fb02 5404 	mla	r4, r2, r4, r5
 8013eb2:	a80a      	add	r0, sp, #40	@ 0x28
 8013eb4:	2205      	movs	r2, #5
 8013eb6:	3450      	adds	r4, #80	@ 0x50
 8013eb8:	f001 fe38 	bl	8015b2c <uxr_buffer_submessage_header>
 8013ebc:	a903      	add	r1, sp, #12
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f007 fb2e 	bl	801b520 <uxr_compute_acknack>
 8013ec4:	ba40      	rev16	r0, r0
 8013ec6:	a903      	add	r1, sp, #12
 8013ec8:	f88d 6010 	strb.w	r6, [sp, #16]
 8013ecc:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013ed0:	a80a      	add	r0, sp, #40	@ 0x28
 8013ed2:	f002 fef9 	bl	8016cc8 <uxr_serialize_ACKNACK_Payload>
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eda:	4628      	mov	r0, r5
 8013edc:	4611      	mov	r1, r2
 8013ede:	f000 ffdd 	bl	8014e9c <uxr_stamp_session_header>
 8013ee2:	a80a      	add	r0, sp, #40	@ 0x28
 8013ee4:	f7ff fb9e 	bl	8013624 <ucdr_buffer_length>
 8013ee8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013eea:	4602      	mov	r2, r0
 8013eec:	a905      	add	r1, sp, #20
 8013eee:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013ef2:	47a0      	blx	r4
 8013ef4:	b012      	add	sp, #72	@ 0x48
 8013ef6:	bd70      	pop	{r4, r5, r6, pc}

08013ef8 <uxr_init_session>:
 8013ef8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013f30 <uxr_init_session+0x38>
 8013efc:	2300      	movs	r3, #0
 8013efe:	b510      	push	{r4, lr}
 8013f00:	4604      	mov	r4, r0
 8013f02:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8013f06:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8013f0a:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8013f0e:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8013f12:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013f16:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013f1a:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8013f1e:	2181      	movs	r1, #129	@ 0x81
 8013f20:	f000 ff20 	bl	8014d64 <uxr_init_session_info>
 8013f24:	f104 0008 	add.w	r0, r4, #8
 8013f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f2c:	f001 bd1a 	b.w	8015964 <uxr_init_stream_storage>
	...

08013f38 <uxr_set_status_callback>:
 8013f38:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop

08013f40 <uxr_set_topic_callback>:
 8013f40:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8013f44:	4770      	bx	lr
 8013f46:	bf00      	nop

08013f48 <uxr_set_request_callback>:
 8013f48:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013f4c:	4770      	bx	lr
 8013f4e:	bf00      	nop

08013f50 <uxr_set_reply_callback>:
 8013f50:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8013f54:	4770      	bx	lr
 8013f56:	bf00      	nop

08013f58 <uxr_create_output_best_effort_stream>:
 8013f58:	b510      	push	{r4, lr}
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	b084      	sub	sp, #16
 8013f5e:	e9cd 2100 	strd	r2, r1, [sp]
 8013f62:	f000 ffef 	bl	8014f44 <uxr_session_header_offset>
 8013f66:	4603      	mov	r3, r0
 8013f68:	f104 0008 	add.w	r0, r4, #8
 8013f6c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013f70:	b004      	add	sp, #16
 8013f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f76:	f001 bd3b 	b.w	80159f0 <uxr_add_output_best_effort_buffer>
 8013f7a:	bf00      	nop

08013f7c <uxr_create_output_reliable_stream>:
 8013f7c:	b530      	push	{r4, r5, lr}
 8013f7e:	b089      	sub	sp, #36	@ 0x24
 8013f80:	4604      	mov	r4, r0
 8013f82:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013f86:	9303      	str	r3, [sp, #12]
 8013f88:	f000 ffdc 	bl	8014f44 <uxr_session_header_offset>
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	9905      	ldr	r1, [sp, #20]
 8013f90:	f104 0008 	add.w	r0, r4, #8
 8013f94:	9500      	str	r5, [sp, #0]
 8013f96:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013f9a:	f001 fd3d 	bl	8015a18 <uxr_add_output_reliable_buffer>
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	fa5f fc80 	uxtb.w	ip, r0
 8013fa4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8013fa8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013fac:	0e03      	lsrs	r3, r0, #24
 8013fae:	f36c 0207 	bfi	r2, ip, #0, #8
 8013fb2:	f364 220f 	bfi	r2, r4, #8, #8
 8013fb6:	f361 4217 	bfi	r2, r1, #16, #8
 8013fba:	f363 621f 	bfi	r2, r3, #24, #8
 8013fbe:	4610      	mov	r0, r2
 8013fc0:	b009      	add	sp, #36	@ 0x24
 8013fc2:	bd30      	pop	{r4, r5, pc}

08013fc4 <uxr_create_input_best_effort_stream>:
 8013fc4:	b082      	sub	sp, #8
 8013fc6:	3008      	adds	r0, #8
 8013fc8:	b002      	add	sp, #8
 8013fca:	f001 bd3f 	b.w	8015a4c <uxr_add_input_best_effort_buffer>
 8013fce:	bf00      	nop

08013fd0 <uxr_create_input_reliable_stream>:
 8013fd0:	b510      	push	{r4, lr}
 8013fd2:	4c0c      	ldr	r4, [pc, #48]	@ (8014004 <uxr_create_input_reliable_stream+0x34>)
 8013fd4:	b084      	sub	sp, #16
 8013fd6:	3008      	adds	r0, #8
 8013fd8:	9400      	str	r4, [sp, #0]
 8013fda:	f001 fd4d 	bl	8015a78 <uxr_add_input_reliable_buffer>
 8013fde:	2200      	movs	r2, #0
 8013fe0:	fa5f fe80 	uxtb.w	lr, r0
 8013fe4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8013fe8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013fec:	0e03      	lsrs	r3, r0, #24
 8013fee:	f36e 0207 	bfi	r2, lr, #0, #8
 8013ff2:	f36c 220f 	bfi	r2, ip, #8, #8
 8013ff6:	f361 4217 	bfi	r2, r1, #16, #8
 8013ffa:	f363 621f 	bfi	r2, r3, #24, #8
 8013ffe:	4610      	mov	r0, r2
 8014000:	b004      	add	sp, #16
 8014002:	bd10      	pop	{r4, pc}
 8014004:	08013ddd 	.word	0x08013ddd

08014008 <uxr_epoch_nanos>:
 8014008:	b510      	push	{r4, lr}
 801400a:	4604      	mov	r4, r0
 801400c:	f001 fdf0 	bl	8015bf0 <uxr_nanos>
 8014010:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8014014:	1ac0      	subs	r0, r0, r3
 8014016:	eb61 0102 	sbc.w	r1, r1, r2
 801401a:	bd10      	pop	{r4, pc}

0801401c <uxr_flash_output_streams>:
 801401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014020:	7e03      	ldrb	r3, [r0, #24]
 8014022:	b084      	sub	sp, #16
 8014024:	4604      	mov	r4, r0
 8014026:	b1fb      	cbz	r3, 8014068 <uxr_flash_output_streams+0x4c>
 8014028:	f04f 0900 	mov.w	r9, #0
 801402c:	f10d 0802 	add.w	r8, sp, #2
 8014030:	af03      	add	r7, sp, #12
 8014032:	ae02      	add	r6, sp, #8
 8014034:	4648      	mov	r0, r9
 8014036:	2201      	movs	r2, #1
 8014038:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801403c:	4611      	mov	r1, r2
 801403e:	3508      	adds	r5, #8
 8014040:	f001 fc36 	bl	80158b0 <uxr_stream_id>
 8014044:	4684      	mov	ip, r0
 8014046:	4643      	mov	r3, r8
 8014048:	463a      	mov	r2, r7
 801404a:	4631      	mov	r1, r6
 801404c:	4628      	mov	r0, r5
 801404e:	f8cd c004 	str.w	ip, [sp, #4]
 8014052:	f007 faef 	bl	801b634 <uxr_prepare_best_effort_buffer_to_send>
 8014056:	2800      	cmp	r0, #0
 8014058:	d13d      	bne.n	80140d6 <uxr_flash_output_streams+0xba>
 801405a:	f109 0901 	add.w	r9, r9, #1
 801405e:	7e23      	ldrb	r3, [r4, #24]
 8014060:	fa5f f089 	uxtb.w	r0, r9
 8014064:	4283      	cmp	r3, r0
 8014066:	d8e6      	bhi.n	8014036 <uxr_flash_output_streams+0x1a>
 8014068:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801406c:	b383      	cbz	r3, 80140d0 <uxr_flash_output_streams+0xb4>
 801406e:	f04f 0900 	mov.w	r9, #0
 8014072:	f10d 0802 	add.w	r8, sp, #2
 8014076:	af03      	add	r7, sp, #12
 8014078:	ae02      	add	r6, sp, #8
 801407a:	4648      	mov	r0, r9
 801407c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014080:	2201      	movs	r2, #1
 8014082:	2102      	movs	r1, #2
 8014084:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014088:	f001 fc12 	bl	80158b0 <uxr_stream_id>
 801408c:	9001      	str	r0, [sp, #4]
 801408e:	3520      	adds	r5, #32
 8014090:	e00c      	b.n	80140ac <uxr_flash_output_streams+0x90>
 8014092:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014096:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801409a:	9b02      	ldr	r3, [sp, #8]
 801409c:	f000 fefe 	bl	8014e9c <uxr_stamp_session_header>
 80140a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80140a2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80140a6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80140aa:	47d0      	blx	sl
 80140ac:	4643      	mov	r3, r8
 80140ae:	463a      	mov	r2, r7
 80140b0:	4631      	mov	r1, r6
 80140b2:	4628      	mov	r0, r5
 80140b4:	f007 fce0 	bl	801ba78 <uxr_prepare_next_reliable_buffer_to_send>
 80140b8:	4603      	mov	r3, r0
 80140ba:	4620      	mov	r0, r4
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d1e8      	bne.n	8014092 <uxr_flash_output_streams+0x76>
 80140c0:	f109 0901 	add.w	r9, r9, #1
 80140c4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80140c8:	fa5f f089 	uxtb.w	r0, r9
 80140cc:	4283      	cmp	r3, r0
 80140ce:	d8d5      	bhi.n	801407c <uxr_flash_output_streams+0x60>
 80140d0:	b004      	add	sp, #16
 80140d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140d6:	9b02      	ldr	r3, [sp, #8]
 80140d8:	4620      	mov	r0, r4
 80140da:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80140de:	f109 0901 	add.w	r9, r9, #1
 80140e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80140e6:	f000 fed9 	bl	8014e9c <uxr_stamp_session_header>
 80140ea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80140ec:	9a03      	ldr	r2, [sp, #12]
 80140ee:	685d      	ldr	r5, [r3, #4]
 80140f0:	6818      	ldr	r0, [r3, #0]
 80140f2:	9902      	ldr	r1, [sp, #8]
 80140f4:	47a8      	blx	r5
 80140f6:	7e23      	ldrb	r3, [r4, #24]
 80140f8:	fa5f f089 	uxtb.w	r0, r9
 80140fc:	4283      	cmp	r3, r0
 80140fe:	d89a      	bhi.n	8014036 <uxr_flash_output_streams+0x1a>
 8014100:	e7b2      	b.n	8014068 <uxr_flash_output_streams+0x4c>
 8014102:	bf00      	nop

08014104 <read_submessage_info>:
 8014104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014108:	460d      	mov	r5, r1
 801410a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801410e:	4606      	mov	r6, r0
 8014110:	4669      	mov	r1, sp
 8014112:	4628      	mov	r0, r5
 8014114:	f002 fc04 	bl	8016920 <uxr_deserialize_BaseObjectReply>
 8014118:	4604      	mov	r4, r0
 801411a:	a902      	add	r1, sp, #8
 801411c:	4628      	mov	r0, r5
 801411e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8014122:	f7fd ff57 	bl	8011fd4 <ucdr_deserialize_bool>
 8014126:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801412a:	4004      	ands	r4, r0
 801412c:	b2e4      	uxtb	r4, r4
 801412e:	b95b      	cbnz	r3, 8014148 <read_submessage_info+0x44>
 8014130:	a987      	add	r1, sp, #540	@ 0x21c
 8014132:	4628      	mov	r0, r5
 8014134:	f7fd ff4e 	bl	8011fd4 <ucdr_deserialize_bool>
 8014138:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801413c:	4680      	mov	r8, r0
 801413e:	b94b      	cbnz	r3, 8014154 <read_submessage_info+0x50>
 8014140:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8014144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014148:	a903      	add	r1, sp, #12
 801414a:	4628      	mov	r0, r5
 801414c:	f002 fa94 	bl	8016678 <uxr_deserialize_ObjectVariant>
 8014150:	4004      	ands	r4, r0
 8014152:	e7ed      	b.n	8014130 <read_submessage_info+0x2c>
 8014154:	a988      	add	r1, sp, #544	@ 0x220
 8014156:	4628      	mov	r0, r5
 8014158:	f7fd ff6a 	bl	8012030 <ucdr_deserialize_uint8_t>
 801415c:	ea14 0f08 	tst.w	r4, r8
 8014160:	d0ee      	beq.n	8014140 <read_submessage_info+0x3c>
 8014162:	2800      	cmp	r0, #0
 8014164:	d0ec      	beq.n	8014140 <read_submessage_info+0x3c>
 8014166:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 801416a:	2b0d      	cmp	r3, #13
 801416c:	d1e8      	bne.n	8014140 <read_submessage_info+0x3c>
 801416e:	a98a      	add	r1, sp, #552	@ 0x228
 8014170:	4628      	mov	r0, r5
 8014172:	f7fe fd03 	bl	8012b7c <ucdr_deserialize_int16_t>
 8014176:	b138      	cbz	r0, 8014188 <read_submessage_info+0x84>
 8014178:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 801417c:	2b00      	cmp	r3, #0
 801417e:	dd06      	ble.n	801418e <read_submessage_info+0x8a>
 8014180:	2f00      	cmp	r7, #0
 8014182:	bf14      	ite	ne
 8014184:	2001      	movne	r0, #1
 8014186:	2002      	moveq	r0, #2
 8014188:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 801418c:	e7d8      	b.n	8014140 <read_submessage_info+0x3c>
 801418e:	2000      	movs	r0, #0
 8014190:	e7fa      	b.n	8014188 <read_submessage_info+0x84>
 8014192:	bf00      	nop

08014194 <read_submessage_list>:
 8014194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014198:	4604      	mov	r4, r0
 801419a:	b097      	sub	sp, #92	@ 0x5c
 801419c:	460d      	mov	r5, r1
 801419e:	4ec1      	ldr	r6, [pc, #772]	@ (80144a4 <read_submessage_list+0x310>)
 80141a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80141a2:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80141a6:	aa0c      	add	r2, sp, #48	@ 0x30
 80141a8:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80141ac:	4628      	mov	r0, r5
 80141ae:	f001 fcd7 	bl	8015b60 <uxr_read_submessage_header>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	f000 8142 	beq.w	801443c <read_submessage_list+0x2a8>
 80141b8:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80141bc:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80141c0:	3b02      	subs	r3, #2
 80141c2:	2b0d      	cmp	r3, #13
 80141c4:	d8ed      	bhi.n	80141a2 <read_submessage_list+0xe>
 80141c6:	a101      	add	r1, pc, #4	@ (adr r1, 80141cc <read_submessage_list+0x38>)
 80141c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80141cc:	08014433 	.word	0x08014433
 80141d0:	080141a3 	.word	0x080141a3
 80141d4:	08014423 	.word	0x08014423
 80141d8:	080143c1 	.word	0x080143c1
 80141dc:	080143b7 	.word	0x080143b7
 80141e0:	080141a3 	.word	0x080141a3
 80141e4:	080141a3 	.word	0x080141a3
 80141e8:	0801430d 	.word	0x0801430d
 80141ec:	0801429f 	.word	0x0801429f
 80141f0:	0801425f 	.word	0x0801425f
 80141f4:	080141a3 	.word	0x080141a3
 80141f8:	080141a3 	.word	0x080141a3
 80141fc:	080141a3 	.word	0x080141a3
 8014200:	08014205 	.word	0x08014205
 8014204:	a910      	add	r1, sp, #64	@ 0x40
 8014206:	4628      	mov	r0, r5
 8014208:	f002 fdc0 	bl	8016d8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801420c:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8014210:	f1b8 0f00 	cmp.w	r8, #0
 8014214:	f000 811a 	beq.w	801444c <read_submessage_list+0x2b8>
 8014218:	f001 fcea 	bl	8015bf0 <uxr_nanos>
 801421c:	4602      	mov	r2, r0
 801421e:	460b      	mov	r3, r1
 8014220:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8014224:	2100      	movs	r1, #0
 8014226:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014228:	9006      	str	r0, [sp, #24]
 801422a:	468c      	mov	ip, r1
 801422c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801422e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014232:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8014234:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014238:	468c      	mov	ip, r1
 801423a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801423c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014240:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8014244:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8014248:	fbc7 0106 	smlal	r0, r1, r7, r6
 801424c:	e9cd 0100 	strd	r0, r1, [sp]
 8014250:	4620      	mov	r0, r4
 8014252:	47c0      	blx	r8
 8014254:	f04f 0301 	mov.w	r3, #1
 8014258:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 801425c:	e7a1      	b.n	80141a2 <read_submessage_list+0xe>
 801425e:	a910      	add	r1, sp, #64	@ 0x40
 8014260:	4628      	mov	r0, r5
 8014262:	f002 fd71 	bl	8016d48 <uxr_deserialize_HEARTBEAT_Payload>
 8014266:	2100      	movs	r1, #0
 8014268:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 801426c:	f001 fb4e 	bl	801590c <uxr_stream_id_from_raw>
 8014270:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014274:	900f      	str	r0, [sp, #60]	@ 0x3c
 8014276:	f104 0008 	add.w	r0, r4, #8
 801427a:	4641      	mov	r1, r8
 801427c:	f001 fc34 	bl	8015ae8 <uxr_get_input_reliable_stream>
 8014280:	2800      	cmp	r0, #0
 8014282:	d08e      	beq.n	80141a2 <read_submessage_list+0xe>
 8014284:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8014288:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801428c:	f007 f93c 	bl	801b508 <uxr_process_heartbeat>
 8014290:	4642      	mov	r2, r8
 8014292:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8014296:	4620      	mov	r0, r4
 8014298:	f7ff fdf8 	bl	8013e8c <write_submessage_acknack.isra.0>
 801429c:	e781      	b.n	80141a2 <read_submessage_list+0xe>
 801429e:	a910      	add	r1, sp, #64	@ 0x40
 80142a0:	4628      	mov	r0, r5
 80142a2:	f002 fd29 	bl	8016cf8 <uxr_deserialize_ACKNACK_Payload>
 80142a6:	2100      	movs	r1, #0
 80142a8:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80142ac:	f001 fb2e 	bl	801590c <uxr_stream_id_from_raw>
 80142b0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80142b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80142b6:	f104 0008 	add.w	r0, r4, #8
 80142ba:	f001 fbff 	bl	8015abc <uxr_get_output_reliable_stream>
 80142be:	4680      	mov	r8, r0
 80142c0:	2800      	cmp	r0, #0
 80142c2:	f43f af6e 	beq.w	80141a2 <read_submessage_list+0xe>
 80142c6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80142ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80142ce:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80142d2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80142d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80142da:	b289      	uxth	r1, r1
 80142dc:	f007 fc74 	bl	801bbc8 <uxr_process_acknack>
 80142e0:	4640      	mov	r0, r8
 80142e2:	f007 fc35 	bl	801bb50 <uxr_begin_output_nack_buffer_it>
 80142e6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80142ea:	e005      	b.n	80142f8 <read_submessage_list+0x164>
 80142ec:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80142ee:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 80142f2:	e9d3 0900 	ldrd	r0, r9, [r3]
 80142f6:	47c8      	blx	r9
 80142f8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80142fc:	aa0f      	add	r2, sp, #60	@ 0x3c
 80142fe:	4651      	mov	r1, sl
 8014300:	4640      	mov	r0, r8
 8014302:	f007 fc27 	bl	801bb54 <uxr_next_reliable_nack_buffer_to_send>
 8014306:	2800      	cmp	r0, #0
 8014308:	d1f0      	bne.n	80142ec <read_submessage_list+0x158>
 801430a:	e74a      	b.n	80141a2 <read_submessage_list+0xe>
 801430c:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8014310:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8014314:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8014318:	4628      	mov	r0, r5
 801431a:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801431e:	4651      	mov	r1, sl
 8014320:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8014324:	f1a8 0804 	sub.w	r8, r8, #4
 8014328:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801432c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8014330:	fa1f f888 	uxth.w	r8, r8
 8014334:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014338:	f009 090e 	and.w	r9, r9, #14
 801433c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8014340:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8014344:	f002 fa3a 	bl	80167bc <uxr_deserialize_BaseObjectRequest>
 8014348:	4650      	mov	r0, sl
 801434a:	a90f      	add	r1, sp, #60	@ 0x3c
 801434c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8014350:	f000 fe20 	bl	8014f94 <uxr_parse_base_object_request>
 8014354:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014356:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801435a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 801435e:	9110      	str	r1, [sp, #64]	@ 0x40
 8014360:	f1bb 0f00 	cmp.w	fp, #0
 8014364:	d006      	beq.n	8014374 <read_submessage_list+0x1e0>
 8014366:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801436a:	4652      	mov	r2, sl
 801436c:	4620      	mov	r0, r4
 801436e:	9300      	str	r3, [sp, #0]
 8014370:	2300      	movs	r3, #0
 8014372:	47d8      	blx	fp
 8014374:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8014376:	b182      	cbz	r2, 801439a <read_submessage_list+0x206>
 8014378:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801437a:	f04f 0c00 	mov.w	ip, #0
 801437e:	3902      	subs	r1, #2
 8014380:	e003      	b.n	801438a <read_submessage_list+0x1f6>
 8014382:	f10c 0c01 	add.w	ip, ip, #1
 8014386:	4594      	cmp	ip, r2
 8014388:	d007      	beq.n	801439a <read_submessage_list+0x206>
 801438a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801438e:	4553      	cmp	r3, sl
 8014390:	d1f7      	bne.n	8014382 <read_submessage_list+0x1ee>
 8014392:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8014394:	2200      	movs	r2, #0
 8014396:	f803 200c 	strb.w	r2, [r3, ip]
 801439a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801439e:	464b      	mov	r3, r9
 80143a0:	4642      	mov	r2, r8
 80143a2:	4620      	mov	r0, r4
 80143a4:	9102      	str	r1, [sp, #8]
 80143a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80143a8:	9101      	str	r1, [sp, #4]
 80143aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80143ac:	9100      	str	r1, [sp, #0]
 80143ae:	4629      	mov	r1, r5
 80143b0:	f7ff fc4a 	bl	8013c48 <read_submessage_format>
 80143b4:	e6f5      	b.n	80141a2 <read_submessage_list+0xe>
 80143b6:	4629      	mov	r1, r5
 80143b8:	4620      	mov	r0, r4
 80143ba:	f7ff fea3 	bl	8014104 <read_submessage_info>
 80143be:	e6f0      	b.n	80141a2 <read_submessage_list+0xe>
 80143c0:	2a00      	cmp	r2, #0
 80143c2:	d03e      	beq.n	8014442 <read_submessage_list+0x2ae>
 80143c4:	a910      	add	r1, sp, #64	@ 0x40
 80143c6:	4628      	mov	r0, r5
 80143c8:	f002 fbee 	bl	8016ba8 <uxr_deserialize_STATUS_Payload>
 80143cc:	a90e      	add	r1, sp, #56	@ 0x38
 80143ce:	aa0d      	add	r2, sp, #52	@ 0x34
 80143d0:	a810      	add	r0, sp, #64	@ 0x40
 80143d2:	f000 fddf 	bl	8014f94 <uxr_parse_base_object_request>
 80143d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80143d8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80143dc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80143e0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 80143e4:	910f      	str	r1, [sp, #60]	@ 0x3c
 80143e6:	f1ba 0f00 	cmp.w	sl, #0
 80143ea:	d006      	beq.n	80143fa <read_submessage_list+0x266>
 80143ec:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80143f0:	4642      	mov	r2, r8
 80143f2:	4620      	mov	r0, r4
 80143f4:	9300      	str	r3, [sp, #0]
 80143f6:	464b      	mov	r3, r9
 80143f8:	47d0      	blx	sl
 80143fa:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80143fc:	2a00      	cmp	r2, #0
 80143fe:	f43f aed0 	beq.w	80141a2 <read_submessage_list+0xe>
 8014402:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8014404:	2100      	movs	r1, #0
 8014406:	3802      	subs	r0, #2
 8014408:	e003      	b.n	8014412 <read_submessage_list+0x27e>
 801440a:	3101      	adds	r1, #1
 801440c:	4291      	cmp	r1, r2
 801440e:	f43f aec8 	beq.w	80141a2 <read_submessage_list+0xe>
 8014412:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014416:	4543      	cmp	r3, r8
 8014418:	d1f7      	bne.n	801440a <read_submessage_list+0x276>
 801441a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801441c:	f803 9001 	strb.w	r9, [r3, r1]
 8014420:	e6bf      	b.n	80141a2 <read_submessage_list+0xe>
 8014422:	2a00      	cmp	r2, #0
 8014424:	f47f aebd 	bne.w	80141a2 <read_submessage_list+0xe>
 8014428:	4629      	mov	r1, r5
 801442a:	4620      	mov	r0, r4
 801442c:	f000 fcf6 	bl	8014e1c <uxr_read_create_session_status>
 8014430:	e6b7      	b.n	80141a2 <read_submessage_list+0xe>
 8014432:	4629      	mov	r1, r5
 8014434:	4620      	mov	r0, r4
 8014436:	f7ff fcf3 	bl	8013e20 <read_submessage_get_info>
 801443a:	e6b2      	b.n	80141a2 <read_submessage_list+0xe>
 801443c:	b017      	add	sp, #92	@ 0x5c
 801443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014442:	4629      	mov	r1, r5
 8014444:	4620      	mov	r0, r4
 8014446:	f000 fcf7 	bl	8014e38 <uxr_read_delete_session_status>
 801444a:	e6aa      	b.n	80141a2 <read_submessage_list+0xe>
 801444c:	f001 fbd0 	bl	8015bf0 <uxr_nanos>
 8014450:	4642      	mov	r2, r8
 8014452:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8014454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014456:	fbc7 3206 	smlal	r3, r2, r7, r6
 801445a:	1818      	adds	r0, r3, r0
 801445c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801445e:	eb42 0101 	adc.w	r1, r2, r1
 8014462:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014464:	4642      	mov	r2, r8
 8014466:	fbc7 3206 	smlal	r3, r2, r7, r6
 801446a:	469c      	mov	ip, r3
 801446c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8014470:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014474:	4643      	mov	r3, r8
 8014476:	eb1c 0c07 	adds.w	ip, ip, r7
 801447a:	eb42 0203 	adc.w	r2, r2, r3
 801447e:	ebb0 030c 	subs.w	r3, r0, ip
 8014482:	eb61 0202 	sbc.w	r2, r1, r2
 8014486:	2a00      	cmp	r2, #0
 8014488:	db08      	blt.n	801449c <read_submessage_list+0x308>
 801448a:	085b      	lsrs	r3, r3, #1
 801448c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014490:	1052      	asrs	r2, r2, #1
 8014492:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8014496:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 801449a:	e6db      	b.n	8014254 <read_submessage_list+0xc0>
 801449c:	3301      	adds	r3, #1
 801449e:	f142 0200 	adc.w	r2, r2, #0
 80144a2:	e7f2      	b.n	801448a <read_submessage_list+0x2f6>
 80144a4:	3b9aca00 	.word	0x3b9aca00

080144a8 <listen_message_reliably>:
 80144a8:	1e0b      	subs	r3, r1, #0
 80144aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ae:	bfb8      	it	lt
 80144b0:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80144b4:	b09d      	sub	sp, #116	@ 0x74
 80144b6:	4680      	mov	r8, r0
 80144b8:	9305      	str	r3, [sp, #20]
 80144ba:	f001 fb7d 	bl	8015bb8 <uxr_millis>
 80144be:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80144c2:	4681      	mov	r9, r0
 80144c4:	2a00      	cmp	r2, #0
 80144c6:	f000 809a 	beq.w	80145fe <listen_message_reliably+0x156>
 80144ca:	2600      	movs	r6, #0
 80144cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80144d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80144d4:	460f      	mov	r7, r1
 80144d6:	4630      	mov	r0, r6
 80144d8:	9303      	str	r3, [sp, #12]
 80144da:	e00e      	b.n	80144fa <listen_message_reliably+0x52>
 80144dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80144de:	3601      	adds	r6, #1
 80144e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80144e2:	455a      	cmp	r2, fp
 80144e4:	9903      	ldr	r1, [sp, #12]
 80144e6:	b2f0      	uxtb	r0, r6
 80144e8:	eb73 0101 	sbcs.w	r1, r3, r1
 80144ec:	da01      	bge.n	80144f2 <listen_message_reliably+0x4a>
 80144ee:	4693      	mov	fp, r2
 80144f0:	9303      	str	r3, [sp, #12]
 80144f2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80144f6:	4283      	cmp	r3, r0
 80144f8:	d95f      	bls.n	80145ba <listen_message_reliably+0x112>
 80144fa:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80144fe:	2102      	movs	r1, #2
 8014500:	2201      	movs	r2, #1
 8014502:	00e4      	lsls	r4, r4, #3
 8014504:	f001 f9d4 	bl	80158b0 <uxr_stream_id>
 8014508:	4601      	mov	r1, r0
 801450a:	f104 0520 	add.w	r5, r4, #32
 801450e:	463b      	mov	r3, r7
 8014510:	464a      	mov	r2, r9
 8014512:	9109      	str	r1, [sp, #36]	@ 0x24
 8014514:	4445      	add	r5, r8
 8014516:	4628      	mov	r0, r5
 8014518:	f007 faee 	bl	801baf8 <uxr_update_output_stream_heartbeat_timestamp>
 801451c:	eb08 0304 	add.w	r3, r8, r4
 8014520:	2800      	cmp	r0, #0
 8014522:	d0db      	beq.n	80144dc <listen_message_reliably+0x34>
 8014524:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8014528:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 801452c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014530:	4640      	mov	r0, r8
 8014532:	3501      	adds	r5, #1
 8014534:	4444      	add	r4, r8
 8014536:	9304      	str	r3, [sp, #16]
 8014538:	f000 fd04 	bl	8014f44 <uxr_session_header_offset>
 801453c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014540:	2300      	movs	r3, #0
 8014542:	2211      	movs	r2, #17
 8014544:	a90c      	add	r1, sp, #48	@ 0x30
 8014546:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801454a:	9000      	str	r0, [sp, #0]
 801454c:	4650      	mov	r0, sl
 801454e:	3601      	adds	r6, #1
 8014550:	f7ff f828 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8014554:	2300      	movs	r3, #0
 8014556:	2205      	movs	r2, #5
 8014558:	210b      	movs	r1, #11
 801455a:	4650      	mov	r0, sl
 801455c:	f001 fae6 	bl	8015b2c <uxr_buffer_submessage_header>
 8014560:	2101      	movs	r1, #1
 8014562:	8968      	ldrh	r0, [r5, #10]
 8014564:	f007 fb8c 	bl	801bc80 <uxr_seq_num_add>
 8014568:	892b      	ldrh	r3, [r5, #8]
 801456a:	4602      	mov	r2, r0
 801456c:	a90a      	add	r1, sp, #40	@ 0x28
 801456e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8014572:	4650      	mov	r0, sl
 8014574:	9b04      	ldr	r3, [sp, #16]
 8014576:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801457a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801457e:	f002 fbcf 	bl	8016d20 <uxr_serialize_HEARTBEAT_Payload>
 8014582:	2200      	movs	r2, #0
 8014584:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014586:	4640      	mov	r0, r8
 8014588:	4611      	mov	r1, r2
 801458a:	f000 fc87 	bl	8014e9c <uxr_stamp_session_header>
 801458e:	4650      	mov	r0, sl
 8014590:	f7ff f848 	bl	8013624 <ucdr_buffer_length>
 8014594:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8014598:	4602      	mov	r2, r0
 801459a:	a90c      	add	r1, sp, #48	@ 0x30
 801459c:	e9d3 0500 	ldrd	r0, r5, [r3]
 80145a0:	47a8      	blx	r5
 80145a2:	9903      	ldr	r1, [sp, #12]
 80145a4:	b2f0      	uxtb	r0, r6
 80145a6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80145aa:	455a      	cmp	r2, fp
 80145ac:	eb73 0101 	sbcs.w	r1, r3, r1
 80145b0:	db9d      	blt.n	80144ee <listen_message_reliably+0x46>
 80145b2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80145b6:	4283      	cmp	r3, r0
 80145b8:	d89f      	bhi.n	80144fa <listen_message_reliably+0x52>
 80145ba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80145be:	9a03      	ldr	r2, [sp, #12]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	bf08      	it	eq
 80145c4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 80145c8:	d019      	beq.n	80145fe <listen_message_reliably+0x156>
 80145ca:	ebab 0309 	sub.w	r3, fp, r9
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	9d05      	ldr	r5, [sp, #20]
 80145d2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 80145d6:	aa08      	add	r2, sp, #32
 80145d8:	bf08      	it	eq
 80145da:	2301      	moveq	r3, #1
 80145dc:	a907      	add	r1, sp, #28
 80145de:	6884      	ldr	r4, [r0, #8]
 80145e0:	429d      	cmp	r5, r3
 80145e2:	6800      	ldr	r0, [r0, #0]
 80145e4:	bfa8      	it	ge
 80145e6:	461d      	movge	r5, r3
 80145e8:	462b      	mov	r3, r5
 80145ea:	47a0      	blx	r4
 80145ec:	b948      	cbnz	r0, 8014602 <listen_message_reliably+0x15a>
 80145ee:	9b05      	ldr	r3, [sp, #20]
 80145f0:	1b5b      	subs	r3, r3, r5
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	9305      	str	r3, [sp, #20]
 80145f6:	f73f af60 	bgt.w	80144ba <listen_message_reliably+0x12>
 80145fa:	4604      	mov	r4, r0
 80145fc:	e012      	b.n	8014624 <listen_message_reliably+0x17c>
 80145fe:	9b05      	ldr	r3, [sp, #20]
 8014600:	e7e5      	b.n	80145ce <listen_message_reliably+0x126>
 8014602:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014606:	4604      	mov	r4, r0
 8014608:	2500      	movs	r5, #0
 801460a:	a80c      	add	r0, sp, #48	@ 0x30
 801460c:	f7fe ffdc 	bl	80135c8 <ucdr_init_buffer>
 8014610:	f10d 031a 	add.w	r3, sp, #26
 8014614:	aa06      	add	r2, sp, #24
 8014616:	a90c      	add	r1, sp, #48	@ 0x30
 8014618:	4640      	mov	r0, r8
 801461a:	f88d 5018 	strb.w	r5, [sp, #24]
 801461e:	f000 fc51 	bl	8014ec4 <uxr_read_session_header>
 8014622:	b918      	cbnz	r0, 801462c <listen_message_reliably+0x184>
 8014624:	4620      	mov	r0, r4
 8014626:	b01d      	add	sp, #116	@ 0x74
 8014628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801462c:	4629      	mov	r1, r5
 801462e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014632:	f001 f96b 	bl	801590c <uxr_stream_id_from_raw>
 8014636:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801463a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801463e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014642:	2e01      	cmp	r6, #1
 8014644:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014648:	d04b      	beq.n	80146e2 <listen_message_reliably+0x23a>
 801464a:	2e02      	cmp	r6, #2
 801464c:	d00f      	beq.n	801466e <listen_message_reliably+0x1c6>
 801464e:	2e00      	cmp	r6, #0
 8014650:	d1e8      	bne.n	8014624 <listen_message_reliably+0x17c>
 8014652:	4631      	mov	r1, r6
 8014654:	4630      	mov	r0, r6
 8014656:	f001 f959 	bl	801590c <uxr_stream_id_from_raw>
 801465a:	4602      	mov	r2, r0
 801465c:	a90c      	add	r1, sp, #48	@ 0x30
 801465e:	4640      	mov	r0, r8
 8014660:	920a      	str	r2, [sp, #40]	@ 0x28
 8014662:	f7ff fd97 	bl	8014194 <read_submessage_list>
 8014666:	4620      	mov	r0, r4
 8014668:	b01d      	add	sp, #116	@ 0x74
 801466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466e:	4629      	mov	r1, r5
 8014670:	f108 0008 	add.w	r0, r8, #8
 8014674:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8014678:	f001 fa36 	bl	8015ae8 <uxr_get_input_reliable_stream>
 801467c:	4607      	mov	r7, r0
 801467e:	b338      	cbz	r0, 80146d0 <listen_message_reliably+0x228>
 8014680:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014682:	a80c      	add	r0, sp, #48	@ 0x30
 8014684:	9203      	str	r2, [sp, #12]
 8014686:	f7fe ffd1 	bl	801362c <ucdr_buffer_remaining>
 801468a:	4603      	mov	r3, r0
 801468c:	f10d 0019 	add.w	r0, sp, #25
 8014690:	9a03      	ldr	r2, [sp, #12]
 8014692:	4651      	mov	r1, sl
 8014694:	9000      	str	r0, [sp, #0]
 8014696:	4638      	mov	r0, r7
 8014698:	f006 fe3a 	bl	801b310 <uxr_receive_reliable_message>
 801469c:	b1c0      	cbz	r0, 80146d0 <listen_message_reliably+0x228>
 801469e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80146a2:	b393      	cbz	r3, 801470a <listen_message_reliably+0x262>
 80146a4:	ae14      	add	r6, sp, #80	@ 0x50
 80146a6:	f04f 0a02 	mov.w	sl, #2
 80146aa:	e00a      	b.n	80146c2 <listen_message_reliably+0x21a>
 80146ac:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80146b0:	4631      	mov	r1, r6
 80146b2:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80146b6:	4640      	mov	r0, r8
 80146b8:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 80146bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80146be:	f7ff fd69 	bl	8014194 <read_submessage_list>
 80146c2:	2204      	movs	r2, #4
 80146c4:	4631      	mov	r1, r6
 80146c6:	4638      	mov	r0, r7
 80146c8:	f006 fea4 	bl	801b414 <uxr_next_input_reliable_buffer_available>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d1ed      	bne.n	80146ac <listen_message_reliably+0x204>
 80146d0:	4640      	mov	r0, r8
 80146d2:	462a      	mov	r2, r5
 80146d4:	4649      	mov	r1, r9
 80146d6:	f7ff fbd9 	bl	8013e8c <write_submessage_acknack.isra.0>
 80146da:	4620      	mov	r0, r4
 80146dc:	b01d      	add	sp, #116	@ 0x74
 80146de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e2:	4629      	mov	r1, r5
 80146e4:	f108 0008 	add.w	r0, r8, #8
 80146e8:	f001 f9f4 	bl	8015ad4 <uxr_get_input_best_effort_stream>
 80146ec:	2800      	cmp	r0, #0
 80146ee:	d099      	beq.n	8014624 <listen_message_reliably+0x17c>
 80146f0:	4651      	mov	r1, sl
 80146f2:	f006 fd83 	bl	801b1fc <uxr_receive_best_effort_message>
 80146f6:	2800      	cmp	r0, #0
 80146f8:	d094      	beq.n	8014624 <listen_message_reliably+0x17c>
 80146fa:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80146fe:	a90c      	add	r1, sp, #48	@ 0x30
 8014700:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014702:	4640      	mov	r0, r8
 8014704:	f7ff fd46 	bl	8014194 <read_submessage_list>
 8014708:	e78c      	b.n	8014624 <listen_message_reliably+0x17c>
 801470a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801470e:	a90c      	add	r1, sp, #48	@ 0x30
 8014710:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014712:	4640      	mov	r0, r8
 8014714:	f7ff fd3e 	bl	8014194 <read_submessage_list>
 8014718:	e7c4      	b.n	80146a4 <listen_message_reliably+0x1fc>
 801471a:	bf00      	nop

0801471c <uxr_run_session_timeout>:
 801471c:	b570      	push	{r4, r5, r6, lr}
 801471e:	4604      	mov	r4, r0
 8014720:	460d      	mov	r5, r1
 8014722:	f001 fa49 	bl	8015bb8 <uxr_millis>
 8014726:	4606      	mov	r6, r0
 8014728:	4620      	mov	r0, r4
 801472a:	f7ff fc77 	bl	801401c <uxr_flash_output_streams>
 801472e:	4629      	mov	r1, r5
 8014730:	4620      	mov	r0, r4
 8014732:	f7ff feb9 	bl	80144a8 <listen_message_reliably>
 8014736:	f001 fa3f 	bl	8015bb8 <uxr_millis>
 801473a:	1b83      	subs	r3, r0, r6
 801473c:	1ae9      	subs	r1, r5, r3
 801473e:	2900      	cmp	r1, #0
 8014740:	dcf6      	bgt.n	8014730 <uxr_run_session_timeout+0x14>
 8014742:	f104 0008 	add.w	r0, r4, #8
 8014746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801474a:	f001 b9d9 	b.w	8015b00 <uxr_output_streams_confirmed>
 801474e:	bf00      	nop

08014750 <uxr_run_session_until_data>:
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	4604      	mov	r4, r0
 8014754:	460d      	mov	r5, r1
 8014756:	f001 fa2f 	bl	8015bb8 <uxr_millis>
 801475a:	4606      	mov	r6, r0
 801475c:	4620      	mov	r0, r4
 801475e:	f7ff fc5d 	bl	801401c <uxr_flash_output_streams>
 8014762:	2300      	movs	r3, #0
 8014764:	4629      	mov	r1, r5
 8014766:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801476a:	e005      	b.n	8014778 <uxr_run_session_until_data+0x28>
 801476c:	f001 fa24 	bl	8015bb8 <uxr_millis>
 8014770:	1b83      	subs	r3, r0, r6
 8014772:	1ae9      	subs	r1, r5, r3
 8014774:	2900      	cmp	r1, #0
 8014776:	dd07      	ble.n	8014788 <uxr_run_session_until_data+0x38>
 8014778:	4620      	mov	r0, r4
 801477a:	f7ff fe95 	bl	80144a8 <listen_message_reliably>
 801477e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8014782:	2800      	cmp	r0, #0
 8014784:	d0f2      	beq.n	801476c <uxr_run_session_until_data+0x1c>
 8014786:	bd70      	pop	{r4, r5, r6, pc}
 8014788:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801478c:	bd70      	pop	{r4, r5, r6, pc}
 801478e:	bf00      	nop

08014790 <uxr_run_session_until_confirm_delivery>:
 8014790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014794:	4606      	mov	r6, r0
 8014796:	460d      	mov	r5, r1
 8014798:	f001 fa0e 	bl	8015bb8 <uxr_millis>
 801479c:	4607      	mov	r7, r0
 801479e:	4630      	mov	r0, r6
 80147a0:	f106 0808 	add.w	r8, r6, #8
 80147a4:	f7ff fc3a 	bl	801401c <uxr_flash_output_streams>
 80147a8:	2d00      	cmp	r5, #0
 80147aa:	db10      	blt.n	80147ce <uxr_run_session_until_confirm_delivery+0x3e>
 80147ac:	462c      	mov	r4, r5
 80147ae:	e006      	b.n	80147be <uxr_run_session_until_confirm_delivery+0x2e>
 80147b0:	f7ff fe7a 	bl	80144a8 <listen_message_reliably>
 80147b4:	f001 fa00 	bl	8015bb8 <uxr_millis>
 80147b8:	1bc3      	subs	r3, r0, r7
 80147ba:	1aec      	subs	r4, r5, r3
 80147bc:	d407      	bmi.n	80147ce <uxr_run_session_until_confirm_delivery+0x3e>
 80147be:	4640      	mov	r0, r8
 80147c0:	f001 f99e 	bl	8015b00 <uxr_output_streams_confirmed>
 80147c4:	4603      	mov	r3, r0
 80147c6:	4621      	mov	r1, r4
 80147c8:	4630      	mov	r0, r6
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d0f0      	beq.n	80147b0 <uxr_run_session_until_confirm_delivery+0x20>
 80147ce:	4640      	mov	r0, r8
 80147d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147d4:	f001 b994 	b.w	8015b00 <uxr_output_streams_confirmed>

080147d8 <uxr_run_session_until_all_status>:
 80147d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147dc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80147e0:	4606      	mov	r6, r0
 80147e2:	4688      	mov	r8, r1
 80147e4:	4692      	mov	sl, r2
 80147e6:	461f      	mov	r7, r3
 80147e8:	f7ff fc18 	bl	801401c <uxr_flash_output_streams>
 80147ec:	f1bb 0f00 	cmp.w	fp, #0
 80147f0:	d004      	beq.n	80147fc <uxr_run_session_until_all_status+0x24>
 80147f2:	465a      	mov	r2, fp
 80147f4:	21ff      	movs	r1, #255	@ 0xff
 80147f6:	4638      	mov	r0, r7
 80147f8:	f008 fb4e 	bl	801ce98 <memset>
 80147fc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8014800:	1e7d      	subs	r5, r7, #1
 8014802:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 8014806:	f001 f9d7 	bl	8015bb8 <uxr_millis>
 801480a:	4641      	mov	r1, r8
 801480c:	4681      	mov	r9, r0
 801480e:	4630      	mov	r0, r6
 8014810:	f7ff fe4a 	bl	80144a8 <listen_message_reliably>
 8014814:	f001 f9d0 	bl	8015bb8 <uxr_millis>
 8014818:	eba0 0009 	sub.w	r0, r0, r9
 801481c:	eba8 0100 	sub.w	r1, r8, r0
 8014820:	f1bb 0f00 	cmp.w	fp, #0
 8014824:	d029      	beq.n	801487a <uxr_run_session_until_all_status+0xa2>
 8014826:	46ae      	mov	lr, r5
 8014828:	f04f 0c00 	mov.w	ip, #0
 801482c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8014830:	2cff      	cmp	r4, #255	@ 0xff
 8014832:	d015      	beq.n	8014860 <uxr_run_session_until_all_status+0x88>
 8014834:	f10c 0c01 	add.w	ip, ip, #1
 8014838:	45e3      	cmp	fp, ip
 801483a:	d8f7      	bhi.n	801482c <uxr_run_session_until_all_status+0x54>
 801483c:	2300      	movs	r3, #0
 801483e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014840:	e000      	b.n	8014844 <uxr_run_session_until_all_status+0x6c>
 8014842:	b158      	cbz	r0, 801485c <uxr_run_session_until_all_status+0x84>
 8014844:	462b      	mov	r3, r5
 8014846:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801484a:	3302      	adds	r3, #2
 801484c:	2801      	cmp	r0, #1
 801484e:	eba3 0307 	sub.w	r3, r3, r7
 8014852:	bf8c      	ite	hi
 8014854:	2000      	movhi	r0, #0
 8014856:	2001      	movls	r0, #1
 8014858:	459b      	cmp	fp, r3
 801485a:	d8f2      	bhi.n	8014842 <uxr_run_session_until_all_status+0x6a>
 801485c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014860:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8014864:	f10c 0c01 	add.w	ip, ip, #1
 8014868:	45dc      	cmp	ip, fp
 801486a:	d201      	bcs.n	8014870 <uxr_run_session_until_all_status+0x98>
 801486c:	2b00      	cmp	r3, #0
 801486e:	d0dd      	beq.n	801482c <uxr_run_session_until_all_status+0x54>
 8014870:	2900      	cmp	r1, #0
 8014872:	dde3      	ble.n	801483c <uxr_run_session_until_all_status+0x64>
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1ca      	bne.n	801480e <uxr_run_session_until_all_status+0x36>
 8014878:	e7e0      	b.n	801483c <uxr_run_session_until_all_status+0x64>
 801487a:	2001      	movs	r0, #1
 801487c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8014880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014884:	0000      	movs	r0, r0
	...

08014888 <uxr_sync_session>:
 8014888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801488a:	b093      	sub	sp, #76	@ 0x4c
 801488c:	4604      	mov	r4, r0
 801488e:	460d      	mov	r5, r1
 8014890:	f000 fb58 	bl	8014f44 <uxr_session_header_offset>
 8014894:	2214      	movs	r2, #20
 8014896:	2300      	movs	r3, #0
 8014898:	9000      	str	r0, [sp, #0]
 801489a:	a80a      	add	r0, sp, #40	@ 0x28
 801489c:	eb0d 0102 	add.w	r1, sp, r2
 80148a0:	f7fe fe80 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 80148a4:	2300      	movs	r3, #0
 80148a6:	2208      	movs	r2, #8
 80148a8:	210e      	movs	r1, #14
 80148aa:	a80a      	add	r0, sp, #40	@ 0x28
 80148ac:	f001 f93e 	bl	8015b2c <uxr_buffer_submessage_header>
 80148b0:	f001 f99e 	bl	8015bf0 <uxr_nanos>
 80148b4:	460e      	mov	r6, r1
 80148b6:	4607      	mov	r7, r0
 80148b8:	a31b      	add	r3, pc, #108	@ (adr r3, 8014928 <uxr_sync_session+0xa0>)
 80148ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148be:	f7eb fd77 	bl	80003b0 <__aeabi_ldivmod>
 80148c2:	4631      	mov	r1, r6
 80148c4:	9003      	str	r0, [sp, #12]
 80148c6:	4638      	mov	r0, r7
 80148c8:	a317      	add	r3, pc, #92	@ (adr r3, 8014928 <uxr_sync_session+0xa0>)
 80148ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ce:	f7eb fd6f 	bl	80003b0 <__aeabi_ldivmod>
 80148d2:	a903      	add	r1, sp, #12
 80148d4:	a80a      	add	r0, sp, #40	@ 0x28
 80148d6:	9204      	str	r2, [sp, #16]
 80148d8:	f002 fa4a 	bl	8016d70 <uxr_serialize_TIMESTAMP_Payload>
 80148dc:	2200      	movs	r2, #0
 80148de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80148e0:	4620      	mov	r0, r4
 80148e2:	4611      	mov	r1, r2
 80148e4:	f000 fada 	bl	8014e9c <uxr_stamp_session_header>
 80148e8:	a80a      	add	r0, sp, #40	@ 0x28
 80148ea:	f7fe fe9b 	bl	8013624 <ucdr_buffer_length>
 80148ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80148f0:	4602      	mov	r2, r0
 80148f2:	a905      	add	r1, sp, #20
 80148f4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80148f8:	47b0      	blx	r6
 80148fa:	f001 f95d 	bl	8015bb8 <uxr_millis>
 80148fe:	2300      	movs	r3, #0
 8014900:	4606      	mov	r6, r0
 8014902:	4629      	mov	r1, r5
 8014904:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8014908:	e000      	b.n	801490c <uxr_sync_session+0x84>
 801490a:	b950      	cbnz	r0, 8014922 <uxr_sync_session+0x9a>
 801490c:	4620      	mov	r0, r4
 801490e:	f7ff fdcb 	bl	80144a8 <listen_message_reliably>
 8014912:	f001 f951 	bl	8015bb8 <uxr_millis>
 8014916:	1b83      	subs	r3, r0, r6
 8014918:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 801491c:	1ae9      	subs	r1, r5, r3
 801491e:	2900      	cmp	r1, #0
 8014920:	dcf3      	bgt.n	801490a <uxr_sync_session+0x82>
 8014922:	b013      	add	sp, #76	@ 0x4c
 8014924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014926:	bf00      	nop
 8014928:	3b9aca00 	.word	0x3b9aca00
 801492c:	00000000 	.word	0x00000000

08014930 <wait_session_status>:
 8014930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014934:	4604      	mov	r4, r0
 8014936:	b09d      	sub	sp, #116	@ 0x74
 8014938:	20ff      	movs	r0, #255	@ 0xff
 801493a:	9303      	str	r3, [sp, #12]
 801493c:	7160      	strb	r0, [r4, #5]
 801493e:	2b00      	cmp	r3, #0
 8014940:	f000 80b6 	beq.w	8014ab0 <wait_session_status+0x180>
 8014944:	4689      	mov	r9, r1
 8014946:	4692      	mov	sl, r2
 8014948:	f04f 0b00 	mov.w	fp, #0
 801494c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801494e:	4652      	mov	r2, sl
 8014950:	4649      	mov	r1, r9
 8014952:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014956:	47a8      	blx	r5
 8014958:	f001 f92e 	bl	8015bb8 <uxr_millis>
 801495c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014960:	4605      	mov	r5, r0
 8014962:	e009      	b.n	8014978 <wait_session_status+0x48>
 8014964:	f001 f928 	bl	8015bb8 <uxr_millis>
 8014968:	1b40      	subs	r0, r0, r5
 801496a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801496e:	2b00      	cmp	r3, #0
 8014970:	dd40      	ble.n	80149f4 <wait_session_status+0xc4>
 8014972:	7960      	ldrb	r0, [r4, #5]
 8014974:	28ff      	cmp	r0, #255	@ 0xff
 8014976:	d145      	bne.n	8014a04 <wait_session_status+0xd4>
 8014978:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801497a:	a908      	add	r1, sp, #32
 801497c:	6896      	ldr	r6, [r2, #8]
 801497e:	6810      	ldr	r0, [r2, #0]
 8014980:	aa09      	add	r2, sp, #36	@ 0x24
 8014982:	47b0      	blx	r6
 8014984:	2800      	cmp	r0, #0
 8014986:	d0ed      	beq.n	8014964 <wait_session_status+0x34>
 8014988:	a80c      	add	r0, sp, #48	@ 0x30
 801498a:	2600      	movs	r6, #0
 801498c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014990:	f7fe fe1a 	bl	80135c8 <ucdr_init_buffer>
 8014994:	f10d 031e 	add.w	r3, sp, #30
 8014998:	aa07      	add	r2, sp, #28
 801499a:	a90c      	add	r1, sp, #48	@ 0x30
 801499c:	4620      	mov	r0, r4
 801499e:	f88d 601c 	strb.w	r6, [sp, #28]
 80149a2:	f000 fa8f 	bl	8014ec4 <uxr_read_session_header>
 80149a6:	2800      	cmp	r0, #0
 80149a8:	d0dc      	beq.n	8014964 <wait_session_status+0x34>
 80149aa:	4631      	mov	r1, r6
 80149ac:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80149b0:	f000 ffac 	bl	801590c <uxr_stream_id_from_raw>
 80149b4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80149b8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80149bc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80149c0:	2f01      	cmp	r7, #1
 80149c2:	9302      	str	r3, [sp, #8]
 80149c4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80149c8:	d05c      	beq.n	8014a84 <wait_session_status+0x154>
 80149ca:	2f02      	cmp	r7, #2
 80149cc:	d020      	beq.n	8014a10 <wait_session_status+0xe0>
 80149ce:	2f00      	cmp	r7, #0
 80149d0:	d1c8      	bne.n	8014964 <wait_session_status+0x34>
 80149d2:	4639      	mov	r1, r7
 80149d4:	4638      	mov	r0, r7
 80149d6:	f000 ff99 	bl	801590c <uxr_stream_id_from_raw>
 80149da:	a90c      	add	r1, sp, #48	@ 0x30
 80149dc:	4602      	mov	r2, r0
 80149de:	900b      	str	r0, [sp, #44]	@ 0x2c
 80149e0:	4620      	mov	r0, r4
 80149e2:	f7ff fbd7 	bl	8014194 <read_submessage_list>
 80149e6:	f001 f8e7 	bl	8015bb8 <uxr_millis>
 80149ea:	1b40      	subs	r0, r0, r5
 80149ec:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	dcbe      	bgt.n	8014972 <wait_session_status+0x42>
 80149f4:	f10b 0b01 	add.w	fp, fp, #1
 80149f8:	9b03      	ldr	r3, [sp, #12]
 80149fa:	7960      	ldrb	r0, [r4, #5]
 80149fc:	455b      	cmp	r3, fp
 80149fe:	d001      	beq.n	8014a04 <wait_session_status+0xd4>
 8014a00:	28ff      	cmp	r0, #255	@ 0xff
 8014a02:	d0a3      	beq.n	801494c <wait_session_status+0x1c>
 8014a04:	38ff      	subs	r0, #255	@ 0xff
 8014a06:	bf18      	it	ne
 8014a08:	2001      	movne	r0, #1
 8014a0a:	b01d      	add	sp, #116	@ 0x74
 8014a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a10:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8014a14:	4631      	mov	r1, r6
 8014a16:	f104 0008 	add.w	r0, r4, #8
 8014a1a:	9304      	str	r3, [sp, #16]
 8014a1c:	f001 f864 	bl	8015ae8 <uxr_get_input_reliable_stream>
 8014a20:	4680      	mov	r8, r0
 8014a22:	b348      	cbz	r0, 8014a78 <wait_session_status+0x148>
 8014a24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014a26:	a80c      	add	r0, sp, #48	@ 0x30
 8014a28:	9205      	str	r2, [sp, #20]
 8014a2a:	f7fe fdff 	bl	801362c <ucdr_buffer_remaining>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	f10d 001d 	add.w	r0, sp, #29
 8014a34:	9a05      	ldr	r2, [sp, #20]
 8014a36:	9000      	str	r0, [sp, #0]
 8014a38:	4640      	mov	r0, r8
 8014a3a:	9902      	ldr	r1, [sp, #8]
 8014a3c:	f006 fc68 	bl	801b310 <uxr_receive_reliable_message>
 8014a40:	b1d0      	cbz	r0, 8014a78 <wait_session_status+0x148>
 8014a42:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d03a      	beq.n	8014ac0 <wait_session_status+0x190>
 8014a4a:	9f04      	ldr	r7, [sp, #16]
 8014a4c:	e00a      	b.n	8014a64 <wait_session_status+0x134>
 8014a4e:	f04f 0302 	mov.w	r3, #2
 8014a52:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8014a56:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8014a5a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8014a5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014a60:	f7ff fb98 	bl	8014194 <read_submessage_list>
 8014a64:	a914      	add	r1, sp, #80	@ 0x50
 8014a66:	2204      	movs	r2, #4
 8014a68:	4640      	mov	r0, r8
 8014a6a:	f006 fcd3 	bl	801b414 <uxr_next_input_reliable_buffer_available>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	a914      	add	r1, sp, #80	@ 0x50
 8014a72:	4620      	mov	r0, r4
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d1ea      	bne.n	8014a4e <wait_session_status+0x11e>
 8014a78:	4632      	mov	r2, r6
 8014a7a:	9904      	ldr	r1, [sp, #16]
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	f7ff fa05 	bl	8013e8c <write_submessage_acknack.isra.0>
 8014a82:	e76f      	b.n	8014964 <wait_session_status+0x34>
 8014a84:	4631      	mov	r1, r6
 8014a86:	f104 0008 	add.w	r0, r4, #8
 8014a8a:	f001 f823 	bl	8015ad4 <uxr_get_input_best_effort_stream>
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f43f af68 	beq.w	8014964 <wait_session_status+0x34>
 8014a94:	9902      	ldr	r1, [sp, #8]
 8014a96:	f006 fbb1 	bl	801b1fc <uxr_receive_best_effort_message>
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	f43f af62 	beq.w	8014964 <wait_session_status+0x34>
 8014aa0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014aa4:	a90c      	add	r1, sp, #48	@ 0x30
 8014aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	f7ff fb73 	bl	8014194 <read_submessage_list>
 8014aae:	e759      	b.n	8014964 <wait_session_status+0x34>
 8014ab0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014ab2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014ab6:	47a0      	blx	r4
 8014ab8:	2001      	movs	r0, #1
 8014aba:	b01d      	add	sp, #116	@ 0x74
 8014abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014ac4:	a90c      	add	r1, sp, #48	@ 0x30
 8014ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014ac8:	4620      	mov	r0, r4
 8014aca:	f7ff fb63 	bl	8014194 <read_submessage_list>
 8014ace:	e7bc      	b.n	8014a4a <wait_session_status+0x11a>

08014ad0 <uxr_delete_session_retries>:
 8014ad0:	b530      	push	{r4, r5, lr}
 8014ad2:	b08f      	sub	sp, #60	@ 0x3c
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	460d      	mov	r5, r1
 8014ad8:	f000 fa34 	bl	8014f44 <uxr_session_header_offset>
 8014adc:	2300      	movs	r3, #0
 8014ade:	2210      	movs	r2, #16
 8014ae0:	a902      	add	r1, sp, #8
 8014ae2:	9000      	str	r0, [sp, #0]
 8014ae4:	a806      	add	r0, sp, #24
 8014ae6:	f7fe fd5d 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8014aea:	a906      	add	r1, sp, #24
 8014aec:	4620      	mov	r0, r4
 8014aee:	f000 f979 	bl	8014de4 <uxr_buffer_delete_session>
 8014af2:	2200      	movs	r2, #0
 8014af4:	9b06      	ldr	r3, [sp, #24]
 8014af6:	4620      	mov	r0, r4
 8014af8:	4611      	mov	r1, r2
 8014afa:	f000 f9cf 	bl	8014e9c <uxr_stamp_session_header>
 8014afe:	a806      	add	r0, sp, #24
 8014b00:	f7fe fd90 	bl	8013624 <ucdr_buffer_length>
 8014b04:	462b      	mov	r3, r5
 8014b06:	4602      	mov	r2, r0
 8014b08:	a902      	add	r1, sp, #8
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	f7ff ff10 	bl	8014930 <wait_session_status>
 8014b10:	b118      	cbz	r0, 8014b1a <uxr_delete_session_retries+0x4a>
 8014b12:	7960      	ldrb	r0, [r4, #5]
 8014b14:	fab0 f080 	clz	r0, r0
 8014b18:	0940      	lsrs	r0, r0, #5
 8014b1a:	b00f      	add	sp, #60	@ 0x3c
 8014b1c:	bd30      	pop	{r4, r5, pc}
 8014b1e:	bf00      	nop

08014b20 <uxr_create_session>:
 8014b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b24:	f100 0b08 	add.w	fp, r0, #8
 8014b28:	4604      	mov	r4, r0
 8014b2a:	b0ab      	sub	sp, #172	@ 0xac
 8014b2c:	4658      	mov	r0, fp
 8014b2e:	465e      	mov	r6, fp
 8014b30:	f000 ff22 	bl	8015978 <uxr_reset_stream_storage>
 8014b34:	4620      	mov	r0, r4
 8014b36:	f000 fa05 	bl	8014f44 <uxr_session_header_offset>
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	221c      	movs	r2, #28
 8014b3e:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b40:	9000      	str	r0, [sp, #0]
 8014b42:	a812      	add	r0, sp, #72	@ 0x48
 8014b44:	f7fe fd2e 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8014b48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014b4a:	a912      	add	r1, sp, #72	@ 0x48
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	8a1a      	ldrh	r2, [r3, #16]
 8014b50:	3a04      	subs	r2, #4
 8014b52:	b292      	uxth	r2, r2
 8014b54:	f000 f91c 	bl	8014d90 <uxr_buffer_create_session>
 8014b58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f000 f98a 	bl	8014e74 <uxr_stamp_create_session_header>
 8014b60:	a812      	add	r0, sp, #72	@ 0x48
 8014b62:	f7fe fd5f 	bl	8013624 <ucdr_buffer_length>
 8014b66:	23ff      	movs	r3, #255	@ 0xff
 8014b68:	4681      	mov	r9, r0
 8014b6a:	7163      	strb	r3, [r4, #5]
 8014b6c:	230a      	movs	r3, #10
 8014b6e:	9303      	str	r3, [sp, #12]
 8014b70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014b72:	464a      	mov	r2, r9
 8014b74:	a90b      	add	r1, sp, #44	@ 0x2c
 8014b76:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014b7a:	47a8      	blx	r5
 8014b7c:	f001 f81c 	bl	8015bb8 <uxr_millis>
 8014b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014b84:	4605      	mov	r5, r0
 8014b86:	e009      	b.n	8014b9c <uxr_create_session+0x7c>
 8014b88:	f001 f816 	bl	8015bb8 <uxr_millis>
 8014b8c:	1b40      	subs	r0, r0, r5
 8014b8e:	7962      	ldrb	r2, [r4, #5]
 8014b90:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	dd38      	ble.n	8014c0a <uxr_create_session+0xea>
 8014b98:	2aff      	cmp	r2, #255	@ 0xff
 8014b9a:	d13c      	bne.n	8014c16 <uxr_create_session+0xf6>
 8014b9c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014b9e:	a907      	add	r1, sp, #28
 8014ba0:	6897      	ldr	r7, [r2, #8]
 8014ba2:	6810      	ldr	r0, [r2, #0]
 8014ba4:	aa08      	add	r2, sp, #32
 8014ba6:	47b8      	blx	r7
 8014ba8:	2800      	cmp	r0, #0
 8014baa:	d0ed      	beq.n	8014b88 <uxr_create_session+0x68>
 8014bac:	a81a      	add	r0, sp, #104	@ 0x68
 8014bae:	2700      	movs	r7, #0
 8014bb0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014bb4:	f7fe fd08 	bl	80135c8 <ucdr_init_buffer>
 8014bb8:	f10d 031a 	add.w	r3, sp, #26
 8014bbc:	aa06      	add	r2, sp, #24
 8014bbe:	a91a      	add	r1, sp, #104	@ 0x68
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	f88d 7018 	strb.w	r7, [sp, #24]
 8014bc6:	f000 f97d 	bl	8014ec4 <uxr_read_session_header>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d0dc      	beq.n	8014b88 <uxr_create_session+0x68>
 8014bce:	4639      	mov	r1, r7
 8014bd0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014bd4:	f000 fe9a 	bl	801590c <uxr_stream_id_from_raw>
 8014bd8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014bdc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8014be0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014be4:	2f01      	cmp	r7, #1
 8014be6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8014bea:	d053      	beq.n	8014c94 <uxr_create_session+0x174>
 8014bec:	2f02      	cmp	r7, #2
 8014bee:	d018      	beq.n	8014c22 <uxr_create_session+0x102>
 8014bf0:	2f00      	cmp	r7, #0
 8014bf2:	d1c9      	bne.n	8014b88 <uxr_create_session+0x68>
 8014bf4:	4639      	mov	r1, r7
 8014bf6:	4638      	mov	r0, r7
 8014bf8:	f000 fe88 	bl	801590c <uxr_stream_id_from_raw>
 8014bfc:	a91a      	add	r1, sp, #104	@ 0x68
 8014bfe:	4602      	mov	r2, r0
 8014c00:	900a      	str	r0, [sp, #40]	@ 0x28
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7ff fac6 	bl	8014194 <read_submessage_list>
 8014c08:	e7be      	b.n	8014b88 <uxr_create_session+0x68>
 8014c0a:	9b03      	ldr	r3, [sp, #12]
 8014c0c:	3b01      	subs	r3, #1
 8014c0e:	9303      	str	r3, [sp, #12]
 8014c10:	d001      	beq.n	8014c16 <uxr_create_session+0xf6>
 8014c12:	2aff      	cmp	r2, #255	@ 0xff
 8014c14:	d0ac      	beq.n	8014b70 <uxr_create_session+0x50>
 8014c16:	2a00      	cmp	r2, #0
 8014c18:	d051      	beq.n	8014cbe <uxr_create_session+0x19e>
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	b02b      	add	sp, #172	@ 0xac
 8014c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c22:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014c26:	4641      	mov	r1, r8
 8014c28:	4630      	mov	r0, r6
 8014c2a:	9304      	str	r3, [sp, #16]
 8014c2c:	f000 ff5c 	bl	8015ae8 <uxr_get_input_reliable_stream>
 8014c30:	4682      	mov	sl, r0
 8014c32:	b348      	cbz	r0, 8014c88 <uxr_create_session+0x168>
 8014c34:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014c36:	a81a      	add	r0, sp, #104	@ 0x68
 8014c38:	9205      	str	r2, [sp, #20]
 8014c3a:	f7fe fcf7 	bl	801362c <ucdr_buffer_remaining>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	f10d 0019 	add.w	r0, sp, #25
 8014c44:	9a05      	ldr	r2, [sp, #20]
 8014c46:	4659      	mov	r1, fp
 8014c48:	9000      	str	r0, [sp, #0]
 8014c4a:	4650      	mov	r0, sl
 8014c4c:	f006 fb60 	bl	801b310 <uxr_receive_reliable_message>
 8014c50:	b1d0      	cbz	r0, 8014c88 <uxr_create_session+0x168>
 8014c52:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d038      	beq.n	8014ccc <uxr_create_session+0x1ac>
 8014c5a:	9f04      	ldr	r7, [sp, #16]
 8014c5c:	e00a      	b.n	8014c74 <uxr_create_session+0x154>
 8014c5e:	f04f 0302 	mov.w	r3, #2
 8014c62:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8014c66:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 8014c6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014c6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c70:	f7ff fa90 	bl	8014194 <read_submessage_list>
 8014c74:	a922      	add	r1, sp, #136	@ 0x88
 8014c76:	2204      	movs	r2, #4
 8014c78:	4650      	mov	r0, sl
 8014c7a:	f006 fbcb 	bl	801b414 <uxr_next_input_reliable_buffer_available>
 8014c7e:	4603      	mov	r3, r0
 8014c80:	a922      	add	r1, sp, #136	@ 0x88
 8014c82:	4620      	mov	r0, r4
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d1ea      	bne.n	8014c5e <uxr_create_session+0x13e>
 8014c88:	4642      	mov	r2, r8
 8014c8a:	9904      	ldr	r1, [sp, #16]
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f7ff f8fd 	bl	8013e8c <write_submessage_acknack.isra.0>
 8014c92:	e779      	b.n	8014b88 <uxr_create_session+0x68>
 8014c94:	4641      	mov	r1, r8
 8014c96:	4630      	mov	r0, r6
 8014c98:	f000 ff1c 	bl	8015ad4 <uxr_get_input_best_effort_stream>
 8014c9c:	2800      	cmp	r0, #0
 8014c9e:	f43f af73 	beq.w	8014b88 <uxr_create_session+0x68>
 8014ca2:	4659      	mov	r1, fp
 8014ca4:	f006 faaa 	bl	801b1fc <uxr_receive_best_effort_message>
 8014ca8:	2800      	cmp	r0, #0
 8014caa:	f43f af6d 	beq.w	8014b88 <uxr_create_session+0x68>
 8014cae:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8014cb2:	a91a      	add	r1, sp, #104	@ 0x68
 8014cb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f7ff fa6c 	bl	8014194 <read_submessage_list>
 8014cbc:	e764      	b.n	8014b88 <uxr_create_session+0x68>
 8014cbe:	4630      	mov	r0, r6
 8014cc0:	f000 fe5a 	bl	8015978 <uxr_reset_stream_storage>
 8014cc4:	2001      	movs	r0, #1
 8014cc6:	b02b      	add	sp, #172	@ 0xac
 8014cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ccc:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8014cd0:	a91a      	add	r1, sp, #104	@ 0x68
 8014cd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f7ff fa5d 	bl	8014194 <read_submessage_list>
 8014cda:	e7be      	b.n	8014c5a <uxr_create_session+0x13a>

08014cdc <uxr_prepare_stream_to_write_submessage>:
 8014cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce0:	b082      	sub	sp, #8
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	4610      	mov	r0, r2
 8014ce6:	4615      	mov	r5, r2
 8014ce8:	461e      	mov	r6, r3
 8014cea:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8014cee:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8014cf2:	f105 0904 	add.w	r9, r5, #4
 8014cf6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8014cfa:	9101      	str	r1, [sp, #4]
 8014cfc:	f000 ff56 	bl	8015bac <uxr_submessage_padding>
 8014d00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014d04:	4481      	add	r9, r0
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d01d      	beq.n	8014d46 <uxr_prepare_stream_to_write_submessage+0x6a>
 8014d0a:	2b02      	cmp	r3, #2
 8014d0c:	d116      	bne.n	8014d3c <uxr_prepare_stream_to_write_submessage+0x60>
 8014d0e:	f104 0008 	add.w	r0, r4, #8
 8014d12:	4651      	mov	r1, sl
 8014d14:	f000 fed2 	bl	8015abc <uxr_get_output_reliable_stream>
 8014d18:	4604      	mov	r4, r0
 8014d1a:	b158      	cbz	r0, 8014d34 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d1c:	4649      	mov	r1, r9
 8014d1e:	4632      	mov	r2, r6
 8014d20:	f006 fd3c 	bl	801b79c <uxr_prepare_reliable_buffer_to_write>
 8014d24:	4604      	mov	r4, r0
 8014d26:	b12c      	cbz	r4, 8014d34 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d28:	4643      	mov	r3, r8
 8014d2a:	b2aa      	uxth	r2, r5
 8014d2c:	4639      	mov	r1, r7
 8014d2e:	4630      	mov	r0, r6
 8014d30:	f000 fefc 	bl	8015b2c <uxr_buffer_submessage_header>
 8014d34:	4620      	mov	r0, r4
 8014d36:	b002      	add	sp, #8
 8014d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d3c:	2400      	movs	r4, #0
 8014d3e:	4620      	mov	r0, r4
 8014d40:	b002      	add	sp, #8
 8014d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d46:	f104 0008 	add.w	r0, r4, #8
 8014d4a:	4651      	mov	r1, sl
 8014d4c:	f000 feae 	bl	8015aac <uxr_get_output_best_effort_stream>
 8014d50:	4604      	mov	r4, r0
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d0ee      	beq.n	8014d34 <uxr_prepare_stream_to_write_submessage+0x58>
 8014d56:	4649      	mov	r1, r9
 8014d58:	4632      	mov	r2, r6
 8014d5a:	f006 fc4b 	bl	801b5f4 <uxr_prepare_best_effort_buffer_to_write>
 8014d5e:	4604      	mov	r4, r0
 8014d60:	e7e1      	b.n	8014d26 <uxr_prepare_stream_to_write_submessage+0x4a>
 8014d62:	bf00      	nop

08014d64 <uxr_init_session_info>:
 8014d64:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8014d68:	23ff      	movs	r3, #255	@ 0xff
 8014d6a:	7102      	strb	r2, [r0, #4]
 8014d6c:	f880 c001 	strb.w	ip, [r0, #1]
 8014d70:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014d74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8014d78:	7001      	strb	r1, [r0, #0]
 8014d7a:	f880 c002 	strb.w	ip, [r0, #2]
 8014d7e:	7143      	strb	r3, [r0, #5]
 8014d80:	70c2      	strb	r2, [r0, #3]
 8014d82:	b500      	push	{lr}
 8014d84:	f04f 0e09 	mov.w	lr, #9
 8014d88:	f8a0 e006 	strh.w	lr, [r0, #6]
 8014d8c:	f85d fb04 	ldr.w	pc, [sp], #4

08014d90 <uxr_buffer_create_session>:
 8014d90:	b530      	push	{r4, r5, lr}
 8014d92:	2300      	movs	r3, #0
 8014d94:	b089      	sub	sp, #36	@ 0x24
 8014d96:	4d12      	ldr	r5, [pc, #72]	@ (8014de0 <uxr_buffer_create_session+0x50>)
 8014d98:	460c      	mov	r4, r1
 8014d9a:	9307      	str	r3, [sp, #28]
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014da2:	2201      	movs	r2, #1
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	80c2      	strh	r2, [r0, #6]
 8014da8:	f88d 2004 	strb.w	r2, [sp, #4]
 8014dac:	682a      	ldr	r2, [r5, #0]
 8014dae:	9303      	str	r3, [sp, #12]
 8014db0:	9200      	str	r2, [sp, #0]
 8014db2:	88aa      	ldrh	r2, [r5, #4]
 8014db4:	9306      	str	r3, [sp, #24]
 8014db6:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014dba:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014dbe:	9202      	str	r2, [sp, #8]
 8014dc0:	7802      	ldrb	r2, [r0, #0]
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	f88d 200c 	strb.w	r2, [sp, #12]
 8014dc8:	2210      	movs	r2, #16
 8014dca:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014dce:	f000 fead 	bl	8015b2c <uxr_buffer_submessage_header>
 8014dd2:	4669      	mov	r1, sp
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f001 fdff 	bl	80169d8 <uxr_serialize_CREATE_CLIENT_Payload>
 8014dda:	b009      	add	sp, #36	@ 0x24
 8014ddc:	bd30      	pop	{r4, r5, pc}
 8014dde:	bf00      	nop
 8014de0:	0801dd8c 	.word	0x0801dd8c

08014de4 <uxr_buffer_delete_session>:
 8014de4:	4a0c      	ldr	r2, [pc, #48]	@ (8014e18 <uxr_buffer_delete_session+0x34>)
 8014de6:	2302      	movs	r3, #2
 8014de8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8014dec:	b510      	push	{r4, lr}
 8014dee:	460c      	mov	r4, r1
 8014df0:	b082      	sub	sp, #8
 8014df2:	8911      	ldrh	r1, [r2, #8]
 8014df4:	2204      	movs	r2, #4
 8014df6:	80c3      	strh	r3, [r0, #6]
 8014df8:	2300      	movs	r3, #0
 8014dfa:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014dfe:	4620      	mov	r0, r4
 8014e00:	2103      	movs	r1, #3
 8014e02:	f8ad c004 	strh.w	ip, [sp, #4]
 8014e06:	f000 fe91 	bl	8015b2c <uxr_buffer_submessage_header>
 8014e0a:	a901      	add	r1, sp, #4
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	f001 fe8b 	bl	8016b28 <uxr_serialize_DELETE_Payload>
 8014e12:	b002      	add	sp, #8
 8014e14:	bd10      	pop	{r4, pc}
 8014e16:	bf00      	nop
 8014e18:	0801dd8c 	.word	0x0801dd8c

08014e1c <uxr_read_create_session_status>:
 8014e1c:	b510      	push	{r4, lr}
 8014e1e:	460b      	mov	r3, r1
 8014e20:	b088      	sub	sp, #32
 8014e22:	4604      	mov	r4, r0
 8014e24:	a901      	add	r1, sp, #4
 8014e26:	4618      	mov	r0, r3
 8014e28:	f001 fe8e 	bl	8016b48 <uxr_deserialize_STATUS_AGENT_Payload>
 8014e2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014e30:	7163      	strb	r3, [r4, #5]
 8014e32:	b008      	add	sp, #32
 8014e34:	bd10      	pop	{r4, pc}
 8014e36:	bf00      	nop

08014e38 <uxr_read_delete_session_status>:
 8014e38:	b510      	push	{r4, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	4604      	mov	r4, r0
 8014e3e:	4608      	mov	r0, r1
 8014e40:	a902      	add	r1, sp, #8
 8014e42:	f001 feb1 	bl	8016ba8 <uxr_deserialize_STATUS_Payload>
 8014e46:	88e3      	ldrh	r3, [r4, #6]
 8014e48:	2b02      	cmp	r3, #2
 8014e4a:	d001      	beq.n	8014e50 <uxr_read_delete_session_status+0x18>
 8014e4c:	b004      	add	sp, #16
 8014e4e:	bd10      	pop	{r4, pc}
 8014e50:	f10d 000a 	add.w	r0, sp, #10
 8014e54:	f7fe feaa 	bl	8013bac <uxr_object_id_from_raw>
 8014e58:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014e5c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014e60:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014e64:	b29b      	uxth	r3, r3
 8014e66:	2b02      	cmp	r3, #2
 8014e68:	d1f0      	bne.n	8014e4c <uxr_read_delete_session_status+0x14>
 8014e6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014e6e:	7163      	strb	r3, [r4, #5]
 8014e70:	e7ec      	b.n	8014e4c <uxr_read_delete_session_status+0x14>
 8014e72:	bf00      	nop

08014e74 <uxr_stamp_create_session_header>:
 8014e74:	b510      	push	{r4, lr}
 8014e76:	2208      	movs	r2, #8
 8014e78:	b08a      	sub	sp, #40	@ 0x28
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	eb0d 0002 	add.w	r0, sp, r2
 8014e80:	f7fe fba2 	bl	80135c8 <ucdr_init_buffer>
 8014e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e88:	2300      	movs	r3, #0
 8014e8a:	a802      	add	r0, sp, #8
 8014e8c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014e90:	9400      	str	r4, [sp, #0]
 8014e92:	461a      	mov	r2, r3
 8014e94:	f001 f846 	bl	8015f24 <uxr_serialize_message_header>
 8014e98:	b00a      	add	sp, #40	@ 0x28
 8014e9a:	bd10      	pop	{r4, pc}

08014e9c <uxr_stamp_session_header>:
 8014e9c:	b530      	push	{r4, r5, lr}
 8014e9e:	b08d      	sub	sp, #52	@ 0x34
 8014ea0:	4604      	mov	r4, r0
 8014ea2:	460d      	mov	r5, r1
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	a804      	add	r0, sp, #16
 8014ea8:	9203      	str	r2, [sp, #12]
 8014eaa:	2208      	movs	r2, #8
 8014eac:	f7fe fb8c 	bl	80135c8 <ucdr_init_buffer>
 8014eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eb4:	9b03      	ldr	r3, [sp, #12]
 8014eb6:	462a      	mov	r2, r5
 8014eb8:	a804      	add	r0, sp, #16
 8014eba:	9400      	str	r4, [sp, #0]
 8014ebc:	f001 f832 	bl	8015f24 <uxr_serialize_message_header>
 8014ec0:	b00d      	add	sp, #52	@ 0x34
 8014ec2:	bd30      	pop	{r4, r5, pc}

08014ec4 <uxr_read_session_header>:
 8014ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec8:	4607      	mov	r7, r0
 8014eca:	b084      	sub	sp, #16
 8014ecc:	4608      	mov	r0, r1
 8014ece:	460c      	mov	r4, r1
 8014ed0:	4615      	mov	r5, r2
 8014ed2:	461e      	mov	r6, r3
 8014ed4:	f7fe fbaa 	bl	801362c <ucdr_buffer_remaining>
 8014ed8:	2808      	cmp	r0, #8
 8014eda:	d803      	bhi.n	8014ee4 <uxr_read_session_header+0x20>
 8014edc:	2000      	movs	r0, #0
 8014ede:	b004      	add	sp, #16
 8014ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ee4:	f10d 080c 	add.w	r8, sp, #12
 8014ee8:	4633      	mov	r3, r6
 8014eea:	462a      	mov	r2, r5
 8014eec:	4620      	mov	r0, r4
 8014eee:	f10d 010b 	add.w	r1, sp, #11
 8014ef2:	f8cd 8000 	str.w	r8, [sp]
 8014ef6:	f001 f833 	bl	8015f60 <uxr_deserialize_message_header>
 8014efa:	783a      	ldrb	r2, [r7, #0]
 8014efc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014f00:	4293      	cmp	r3, r2
 8014f02:	d1eb      	bne.n	8014edc <uxr_read_session_header+0x18>
 8014f04:	061b      	lsls	r3, r3, #24
 8014f06:	d41b      	bmi.n	8014f40 <uxr_read_session_header+0x7c>
 8014f08:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014f0c:	787b      	ldrb	r3, [r7, #1]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d003      	beq.n	8014f1a <uxr_read_session_header+0x56>
 8014f12:	2001      	movs	r0, #1
 8014f14:	f080 0001 	eor.w	r0, r0, #1
 8014f18:	e7e1      	b.n	8014ede <uxr_read_session_header+0x1a>
 8014f1a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014f1e:	1cb8      	adds	r0, r7, #2
 8014f20:	78bb      	ldrb	r3, [r7, #2]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d1f5      	bne.n	8014f12 <uxr_read_session_header+0x4e>
 8014f26:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014f2a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d1ef      	bne.n	8014f12 <uxr_read_session_header+0x4e>
 8014f32:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014f36:	7843      	ldrb	r3, [r0, #1]
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d1ea      	bne.n	8014f12 <uxr_read_session_header+0x4e>
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	e7e9      	b.n	8014f14 <uxr_read_session_header+0x50>
 8014f40:	2001      	movs	r0, #1
 8014f42:	e7cc      	b.n	8014ede <uxr_read_session_header+0x1a>

08014f44 <uxr_session_header_offset>:
 8014f44:	f990 3000 	ldrsb.w	r3, [r0]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	bfac      	ite	ge
 8014f4c:	2008      	movge	r0, #8
 8014f4e:	2004      	movlt	r0, #4
 8014f50:	4770      	bx	lr
 8014f52:	bf00      	nop

08014f54 <uxr_init_base_object_request>:
 8014f54:	b510      	push	{r4, lr}
 8014f56:	b082      	sub	sp, #8
 8014f58:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014f5c:	9101      	str	r1, [sp, #4]
 8014f5e:	88c3      	ldrh	r3, [r0, #6]
 8014f60:	f1a3 010a 	sub.w	r1, r3, #10
 8014f64:	b289      	uxth	r1, r1
 8014f66:	42a1      	cmp	r1, r4
 8014f68:	d80f      	bhi.n	8014f8a <uxr_init_base_object_request+0x36>
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	b29c      	uxth	r4, r3
 8014f6e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	80c4      	strh	r4, [r0, #6]
 8014f76:	1c91      	adds	r1, r2, #2
 8014f78:	9801      	ldr	r0, [sp, #4]
 8014f7a:	f882 c000 	strb.w	ip, [r2]
 8014f7e:	7053      	strb	r3, [r2, #1]
 8014f80:	f7fe fe28 	bl	8013bd4 <uxr_object_id_to_raw>
 8014f84:	4620      	mov	r0, r4
 8014f86:	b002      	add	sp, #8
 8014f88:	bd10      	pop	{r4, pc}
 8014f8a:	230a      	movs	r3, #10
 8014f8c:	f04f 0c00 	mov.w	ip, #0
 8014f90:	461c      	mov	r4, r3
 8014f92:	e7ef      	b.n	8014f74 <uxr_init_base_object_request+0x20>

08014f94 <uxr_parse_base_object_request>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	4604      	mov	r4, r0
 8014f98:	3002      	adds	r0, #2
 8014f9a:	460d      	mov	r5, r1
 8014f9c:	4616      	mov	r6, r2
 8014f9e:	f7fe fe05 	bl	8013bac <uxr_object_id_from_raw>
 8014fa2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014fa6:	8028      	strh	r0, [r5, #0]
 8014fa8:	806b      	strh	r3, [r5, #2]
 8014faa:	7822      	ldrb	r2, [r4, #0]
 8014fac:	7863      	ldrb	r3, [r4, #1]
 8014fae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014fb2:	8033      	strh	r3, [r6, #0]
 8014fb4:	bd70      	pop	{r4, r5, r6, pc}
 8014fb6:	bf00      	nop

08014fb8 <uxr_init_framing_io>:
 8014fb8:	2300      	movs	r3, #0
 8014fba:	7041      	strb	r1, [r0, #1]
 8014fbc:	7003      	strb	r3, [r0, #0]
 8014fbe:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014fc0:	4770      	bx	lr
 8014fc2:	bf00      	nop

08014fc4 <uxr_write_framed_msg>:
 8014fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc8:	4617      	mov	r7, r2
 8014fca:	7842      	ldrb	r2, [r0, #1]
 8014fcc:	460e      	mov	r6, r1
 8014fce:	b083      	sub	sp, #12
 8014fd0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014fd4:	469b      	mov	fp, r3
 8014fd6:	237e      	movs	r3, #126	@ 0x7e
 8014fd8:	4604      	mov	r4, r0
 8014fda:	2901      	cmp	r1, #1
 8014fdc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8014fe0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014fe4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014fe8:	f240 8115 	bls.w	8015216 <uxr_write_framed_msg+0x252>
 8014fec:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014ff0:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014ff4:	2202      	movs	r2, #2
 8014ff6:	2901      	cmp	r1, #1
 8014ff8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ffc:	d952      	bls.n	80150a4 <uxr_write_framed_msg+0xe0>
 8014ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015000:	2103      	movs	r1, #3
 8015002:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8015006:	b2dd      	uxtb	r5, r3
 8015008:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 801500c:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8015010:	2a01      	cmp	r2, #1
 8015012:	d95c      	bls.n	80150ce <uxr_write_framed_msg+0x10a>
 8015014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015016:	1862      	adds	r2, r4, r1
 8015018:	3101      	adds	r1, #1
 801501a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801501e:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8015022:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015026:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 801502a:	2a01      	cmp	r2, #1
 801502c:	d961      	bls.n	80150f2 <uxr_write_framed_msg+0x12e>
 801502e:	1c4a      	adds	r2, r1, #1
 8015030:	4421      	add	r1, r4
 8015032:	b2d2      	uxtb	r2, r2
 8015034:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8015038:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801503c:	2b00      	cmp	r3, #0
 801503e:	d06a      	beq.n	8015116 <uxr_write_framed_msg+0x152>
 8015040:	f04f 0800 	mov.w	r8, #0
 8015044:	46c1      	mov	r9, r8
 8015046:	e016      	b.n	8015076 <uxr_write_framed_msg+0xb2>
 8015048:	2a29      	cmp	r2, #41	@ 0x29
 801504a:	d868      	bhi.n	801511e <uxr_write_framed_msg+0x15a>
 801504c:	18a0      	adds	r0, r4, r2
 801504e:	3201      	adds	r2, #1
 8015050:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8015054:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015058:	ea88 0101 	eor.w	r1, r8, r1
 801505c:	4b7d      	ldr	r3, [pc, #500]	@ (8015254 <uxr_write_framed_msg+0x290>)
 801505e:	f109 0901 	add.w	r9, r9, #1
 8015062:	b2c9      	uxtb	r1, r1
 8015064:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8015068:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801506c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801506e:	454b      	cmp	r3, r9
 8015070:	d969      	bls.n	8015146 <uxr_write_framed_msg+0x182>
 8015072:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015076:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801507a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801507e:	2801      	cmp	r0, #1
 8015080:	d8e2      	bhi.n	8015048 <uxr_write_framed_msg+0x84>
 8015082:	1c50      	adds	r0, r2, #1
 8015084:	b2c0      	uxtb	r0, r0
 8015086:	2829      	cmp	r0, #41	@ 0x29
 8015088:	d849      	bhi.n	801511e <uxr_write_framed_msg+0x15a>
 801508a:	18a0      	adds	r0, r4, r2
 801508c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8015090:	3202      	adds	r2, #2
 8015092:	f081 0520 	eor.w	r5, r1, #32
 8015096:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801509a:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801509e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80150a2:	e7d9      	b.n	8015058 <uxr_write_framed_msg+0x94>
 80150a4:	2104      	movs	r1, #4
 80150a6:	f04f 0c03 	mov.w	ip, #3
 80150aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150ac:	4422      	add	r2, r4
 80150ae:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80150b2:	44a4      	add	ip, r4
 80150b4:	b2dd      	uxtb	r5, r3
 80150b6:	f080 0020 	eor.w	r0, r0, #32
 80150ba:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 80150be:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80150c2:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80150c6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80150ca:	2a01      	cmp	r2, #1
 80150cc:	d8a2      	bhi.n	8015014 <uxr_write_framed_msg+0x50>
 80150ce:	1862      	adds	r2, r4, r1
 80150d0:	207d      	movs	r0, #125	@ 0x7d
 80150d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150d4:	f085 0520 	eor.w	r5, r5, #32
 80150d8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 80150dc:	3102      	adds	r1, #2
 80150de:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80150e2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 80150e6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80150ea:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80150ee:	2a01      	cmp	r2, #1
 80150f0:	d89d      	bhi.n	801502e <uxr_write_framed_msg+0x6a>
 80150f2:	1c4d      	adds	r5, r1, #1
 80150f4:	1c8a      	adds	r2, r1, #2
 80150f6:	f080 0020 	eor.w	r0, r0, #32
 80150fa:	4421      	add	r1, r4
 80150fc:	fa54 f585 	uxtab	r5, r4, r5
 8015100:	b2d2      	uxtb	r2, r2
 8015102:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8015106:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 801510a:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 801510e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015112:	2b00      	cmp	r3, #0
 8015114:	d194      	bne.n	8015040 <uxr_write_framed_msg+0x7c>
 8015116:	4619      	mov	r1, r3
 8015118:	f8ad 3004 	strh.w	r3, [sp, #4]
 801511c:	e019      	b.n	8015152 <uxr_write_framed_msg+0x18e>
 801511e:	2500      	movs	r5, #0
 8015120:	e000      	b.n	8015124 <uxr_write_framed_msg+0x160>
 8015122:	b160      	cbz	r0, 801513e <uxr_write_framed_msg+0x17a>
 8015124:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8015128:	1b52      	subs	r2, r2, r5
 801512a:	4653      	mov	r3, sl
 801512c:	4638      	mov	r0, r7
 801512e:	4421      	add	r1, r4
 8015130:	47b0      	blx	r6
 8015132:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015136:	4405      	add	r5, r0
 8015138:	4295      	cmp	r5, r2
 801513a:	d3f2      	bcc.n	8015122 <uxr_write_framed_msg+0x15e>
 801513c:	d066      	beq.n	801520c <uxr_write_framed_msg+0x248>
 801513e:	2000      	movs	r0, #0
 8015140:	b003      	add	sp, #12
 8015142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015146:	fa5f f188 	uxtb.w	r1, r8
 801514a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801514e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8015152:	f04f 0900 	mov.w	r9, #0
 8015156:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 801515a:	46c8      	mov	r8, r9
 801515c:	e013      	b.n	8015186 <uxr_write_framed_msg+0x1c2>
 801515e:	2a29      	cmp	r2, #41	@ 0x29
 8015160:	d824      	bhi.n	80151ac <uxr_write_framed_msg+0x1e8>
 8015162:	18a3      	adds	r3, r4, r2
 8015164:	3201      	adds	r2, #1
 8015166:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 801516a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801516e:	f109 0901 	add.w	r9, r9, #1
 8015172:	f1b9 0f02 	cmp.w	r9, #2
 8015176:	d02d      	beq.n	80151d4 <uxr_write_framed_msg+0x210>
 8015178:	f109 0308 	add.w	r3, r9, #8
 801517c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8015180:	446b      	add	r3, sp
 8015182:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8015186:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801518a:	2b01      	cmp	r3, #1
 801518c:	d8e7      	bhi.n	801515e <uxr_write_framed_msg+0x19a>
 801518e:	1c53      	adds	r3, r2, #1
 8015190:	b2db      	uxtb	r3, r3
 8015192:	2b29      	cmp	r3, #41	@ 0x29
 8015194:	d80a      	bhi.n	80151ac <uxr_write_framed_msg+0x1e8>
 8015196:	18a3      	adds	r3, r4, r2
 8015198:	f081 0120 	eor.w	r1, r1, #32
 801519c:	3202      	adds	r2, #2
 801519e:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 80151a2:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 80151a6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80151aa:	e7e0      	b.n	801516e <uxr_write_framed_msg+0x1aa>
 80151ac:	2500      	movs	r5, #0
 80151ae:	e001      	b.n	80151b4 <uxr_write_framed_msg+0x1f0>
 80151b0:	2800      	cmp	r0, #0
 80151b2:	d0c4      	beq.n	801513e <uxr_write_framed_msg+0x17a>
 80151b4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80151b8:	1b52      	subs	r2, r2, r5
 80151ba:	4653      	mov	r3, sl
 80151bc:	4638      	mov	r0, r7
 80151be:	4421      	add	r1, r4
 80151c0:	47b0      	blx	r6
 80151c2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151c6:	4405      	add	r5, r0
 80151c8:	4295      	cmp	r5, r2
 80151ca:	d3f1      	bcc.n	80151b0 <uxr_write_framed_msg+0x1ec>
 80151cc:	d1b7      	bne.n	801513e <uxr_write_framed_msg+0x17a>
 80151ce:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 80151d2:	e7d1      	b.n	8015178 <uxr_write_framed_msg+0x1b4>
 80151d4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151d8:	b19a      	cbz	r2, 8015202 <uxr_write_framed_msg+0x23e>
 80151da:	2500      	movs	r5, #0
 80151dc:	e001      	b.n	80151e2 <uxr_write_framed_msg+0x21e>
 80151de:	2800      	cmp	r0, #0
 80151e0:	d0ad      	beq.n	801513e <uxr_write_framed_msg+0x17a>
 80151e2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80151e6:	1b52      	subs	r2, r2, r5
 80151e8:	4653      	mov	r3, sl
 80151ea:	4638      	mov	r0, r7
 80151ec:	4421      	add	r1, r4
 80151ee:	47b0      	blx	r6
 80151f0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80151f4:	4405      	add	r5, r0
 80151f6:	4295      	cmp	r5, r2
 80151f8:	d3f1      	bcc.n	80151de <uxr_write_framed_msg+0x21a>
 80151fa:	d1a0      	bne.n	801513e <uxr_write_framed_msg+0x17a>
 80151fc:	2300      	movs	r3, #0
 80151fe:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015202:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015204:	b298      	uxth	r0, r3
 8015206:	b003      	add	sp, #12
 8015208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520c:	f04f 0300 	mov.w	r3, #0
 8015210:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8015214:	e72a      	b.n	801506c <uxr_write_framed_msg+0xa8>
 8015216:	217d      	movs	r1, #125	@ 0x7d
 8015218:	f082 0220 	eor.w	r2, r2, #32
 801521c:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8015220:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8015224:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8015228:	2203      	movs	r2, #3
 801522a:	2901      	cmp	r1, #1
 801522c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8015230:	d803      	bhi.n	801523a <uxr_write_framed_msg+0x276>
 8015232:	2105      	movs	r1, #5
 8015234:	f04f 0c04 	mov.w	ip, #4
 8015238:	e737      	b.n	80150aa <uxr_write_framed_msg+0xe6>
 801523a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801523c:	2104      	movs	r1, #4
 801523e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8015242:	b2dd      	uxtb	r5, r3
 8015244:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8015248:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 801524c:	2a01      	cmp	r2, #1
 801524e:	f63f aee1 	bhi.w	8015014 <uxr_write_framed_msg+0x50>
 8015252:	e73c      	b.n	80150ce <uxr_write_framed_msg+0x10a>
 8015254:	0801e408 	.word	0x0801e408

08015258 <uxr_framing_read_transport>:
 8015258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801525c:	4604      	mov	r4, r0
 801525e:	b085      	sub	sp, #20
 8015260:	4692      	mov	sl, r2
 8015262:	4689      	mov	r9, r1
 8015264:	461d      	mov	r5, r3
 8015266:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8015268:	f000 fca6 	bl	8015bb8 <uxr_millis>
 801526c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8015270:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8015274:	4680      	mov	r8, r0
 8015276:	42ba      	cmp	r2, r7
 8015278:	d05f      	beq.n	801533a <uxr_framing_read_transport+0xe2>
 801527a:	d817      	bhi.n	80152ac <uxr_framing_read_transport+0x54>
 801527c:	3f01      	subs	r7, #1
 801527e:	1aba      	subs	r2, r7, r2
 8015280:	2700      	movs	r7, #0
 8015282:	b2d2      	uxtb	r2, r2
 8015284:	42b2      	cmp	r2, r6
 8015286:	d81a      	bhi.n	80152be <uxr_framing_read_transport+0x66>
 8015288:	19d3      	adds	r3, r2, r7
 801528a:	42b3      	cmp	r3, r6
 801528c:	d852      	bhi.n	8015334 <uxr_framing_read_transport+0xdc>
 801528e:	b9d2      	cbnz	r2, 80152c6 <uxr_framing_read_transport+0x6e>
 8015290:	2600      	movs	r6, #0
 8015292:	f000 fc91 	bl	8015bb8 <uxr_millis>
 8015296:	682b      	ldr	r3, [r5, #0]
 8015298:	eba0 0008 	sub.w	r0, r0, r8
 801529c:	1a1b      	subs	r3, r3, r0
 801529e:	4630      	mov	r0, r6
 80152a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152a4:	602b      	str	r3, [r5, #0]
 80152a6:	b005      	add	sp, #20
 80152a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ac:	2f00      	cmp	r7, #0
 80152ae:	d060      	beq.n	8015372 <uxr_framing_read_transport+0x11a>
 80152b0:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 80152b4:	3f01      	subs	r7, #1
 80152b6:	b2d2      	uxtb	r2, r2
 80152b8:	b2ff      	uxtb	r7, r7
 80152ba:	42b2      	cmp	r2, r6
 80152bc:	d9e4      	bls.n	8015288 <uxr_framing_read_transport+0x30>
 80152be:	b2f2      	uxtb	r2, r6
 80152c0:	2700      	movs	r7, #0
 80152c2:	2a00      	cmp	r2, #0
 80152c4:	d0e4      	beq.n	8015290 <uxr_framing_read_transport+0x38>
 80152c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152c8:	4650      	mov	r0, sl
 80152ca:	9203      	str	r2, [sp, #12]
 80152cc:	9300      	str	r3, [sp, #0]
 80152ce:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80152d2:	682b      	ldr	r3, [r5, #0]
 80152d4:	3102      	adds	r1, #2
 80152d6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 801537c <uxr_framing_read_transport+0x124>
 80152da:	4421      	add	r1, r4
 80152dc:	47c8      	blx	r9
 80152de:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80152e2:	4606      	mov	r6, r0
 80152e4:	4403      	add	r3, r0
 80152e6:	0859      	lsrs	r1, r3, #1
 80152e8:	fbab 2101 	umull	r2, r1, fp, r1
 80152ec:	222a      	movs	r2, #42	@ 0x2a
 80152ee:	0889      	lsrs	r1, r1, #2
 80152f0:	fb02 3111 	mls	r1, r2, r1, r3
 80152f4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80152f8:	2800      	cmp	r0, #0
 80152fa:	d0c9      	beq.n	8015290 <uxr_framing_read_transport+0x38>
 80152fc:	9a03      	ldr	r2, [sp, #12]
 80152fe:	4290      	cmp	r0, r2
 8015300:	d1c7      	bne.n	8015292 <uxr_framing_read_transport+0x3a>
 8015302:	2f00      	cmp	r7, #0
 8015304:	d0c5      	beq.n	8015292 <uxr_framing_read_transport+0x3a>
 8015306:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015308:	3102      	adds	r1, #2
 801530a:	463a      	mov	r2, r7
 801530c:	4650      	mov	r0, sl
 801530e:	4421      	add	r1, r4
 8015310:	9300      	str	r3, [sp, #0]
 8015312:	2300      	movs	r3, #0
 8015314:	47c8      	blx	r9
 8015316:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801531a:	4406      	add	r6, r0
 801531c:	1813      	adds	r3, r2, r0
 801531e:	085a      	lsrs	r2, r3, #1
 8015320:	fbab 1b02 	umull	r1, fp, fp, r2
 8015324:	222a      	movs	r2, #42	@ 0x2a
 8015326:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801532a:	fb02 331b 	mls	r3, r2, fp, r3
 801532e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015332:	e7ae      	b.n	8015292 <uxr_framing_read_transport+0x3a>
 8015334:	1ab6      	subs	r6, r6, r2
 8015336:	b2f7      	uxtb	r7, r6
 8015338:	e7a9      	b.n	801528e <uxr_framing_read_transport+0x36>
 801533a:	2300      	movs	r3, #0
 801533c:	2e28      	cmp	r6, #40	@ 0x28
 801533e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8015340:	d9bd      	bls.n	80152be <uxr_framing_read_transport+0x66>
 8015342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015344:	2229      	movs	r2, #41	@ 0x29
 8015346:	1ca1      	adds	r1, r4, #2
 8015348:	4650      	mov	r0, sl
 801534a:	9300      	str	r3, [sp, #0]
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	47c8      	blx	r9
 8015350:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015354:	4606      	mov	r6, r0
 8015356:	212a      	movs	r1, #42	@ 0x2a
 8015358:	4403      	add	r3, r0
 801535a:	4808      	ldr	r0, [pc, #32]	@ (801537c <uxr_framing_read_transport+0x124>)
 801535c:	085a      	lsrs	r2, r3, #1
 801535e:	fba0 0202 	umull	r0, r2, r0, r2
 8015362:	0892      	lsrs	r2, r2, #2
 8015364:	fb01 3312 	mls	r3, r1, r2, r3
 8015368:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801536c:	2e00      	cmp	r6, #0
 801536e:	d08f      	beq.n	8015290 <uxr_framing_read_transport+0x38>
 8015370:	e78f      	b.n	8015292 <uxr_framing_read_transport+0x3a>
 8015372:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8015376:	b2d2      	uxtb	r2, r2
 8015378:	e784      	b.n	8015284 <uxr_framing_read_transport+0x2c>
 801537a:	bf00      	nop
 801537c:	30c30c31 	.word	0x30c30c31

08015380 <uxr_read_framed_msg>:
 8015380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015384:	461e      	mov	r6, r3
 8015386:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801538a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801538e:	b083      	sub	sp, #12
 8015390:	4604      	mov	r4, r0
 8015392:	4688      	mov	r8, r1
 8015394:	429d      	cmp	r5, r3
 8015396:	4691      	mov	r9, r2
 8015398:	f000 818c 	beq.w	80156b4 <uxr_read_framed_msg+0x334>
 801539c:	7823      	ldrb	r3, [r4, #0]
 801539e:	4dc3      	ldr	r5, [pc, #780]	@ (80156ac <uxr_read_framed_msg+0x32c>)
 80153a0:	4fc3      	ldr	r7, [pc, #780]	@ (80156b0 <uxr_read_framed_msg+0x330>)
 80153a2:	2b07      	cmp	r3, #7
 80153a4:	d8fd      	bhi.n	80153a2 <uxr_read_framed_msg+0x22>
 80153a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80153aa:	011c      	.short	0x011c
 80153ac:	00d900fb 	.word	0x00d900fb
 80153b0:	008f00ba 	.word	0x008f00ba
 80153b4:	00320051 	.word	0x00320051
 80153b8:	0008      	.short	0x0008
 80153ba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80153be:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80153c2:	4299      	cmp	r1, r3
 80153c4:	f000 814d 	beq.w	8015662 <uxr_read_framed_msg+0x2e2>
 80153c8:	18e2      	adds	r2, r4, r3
 80153ca:	7892      	ldrb	r2, [r2, #2]
 80153cc:	2a7d      	cmp	r2, #125	@ 0x7d
 80153ce:	f000 81b8 	beq.w	8015742 <uxr_read_framed_msg+0x3c2>
 80153d2:	3301      	adds	r3, #1
 80153d4:	212a      	movs	r1, #42	@ 0x2a
 80153d6:	2a7e      	cmp	r2, #126	@ 0x7e
 80153d8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80153dc:	fba5 c000 	umull	ip, r0, r5, r0
 80153e0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80153e4:	fb01 3310 	mls	r3, r1, r0, r3
 80153e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80153ec:	f000 8257 	beq.w	801589e <uxr_read_framed_msg+0x51e>
 80153f0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80153f2:	2000      	movs	r0, #0
 80153f4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80153f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80153fa:	7020      	strb	r0, [r4, #0]
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	4299      	cmp	r1, r3
 8015400:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015402:	f000 8178 	beq.w	80156f6 <uxr_read_framed_msg+0x376>
 8015406:	2000      	movs	r0, #0
 8015408:	b003      	add	sp, #12
 801540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015412:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015416:	4298      	cmp	r0, r3
 8015418:	f000 8132 	beq.w	8015680 <uxr_read_framed_msg+0x300>
 801541c:	18e2      	adds	r2, r4, r3
 801541e:	7891      	ldrb	r1, [r2, #2]
 8015420:	297d      	cmp	r1, #125	@ 0x7d
 8015422:	f000 8170 	beq.w	8015706 <uxr_read_framed_msg+0x386>
 8015426:	3301      	adds	r3, #1
 8015428:	202a      	movs	r0, #42	@ 0x2a
 801542a:	297e      	cmp	r1, #126	@ 0x7e
 801542c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015430:	fba5 c202 	umull	ip, r2, r5, r2
 8015434:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015438:	fb00 3312 	mls	r3, r0, r2, r3
 801543c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015440:	f000 821d 	beq.w	801587e <uxr_read_framed_msg+0x4fe>
 8015444:	2307      	movs	r3, #7
 8015446:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8015448:	7023      	strb	r3, [r4, #0]
 801544a:	e7aa      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 801544c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801544e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015452:	459e      	cmp	lr, r3
 8015454:	d827      	bhi.n	80154a6 <uxr_read_framed_msg+0x126>
 8015456:	e032      	b.n	80154be <uxr_read_framed_msg+0x13e>
 8015458:	fba5 b101 	umull	fp, r1, r5, r1
 801545c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015460:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015464:	0889      	lsrs	r1, r1, #2
 8015466:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801546a:	fb0b 0111 	mls	r1, fp, r1, r0
 801546e:	f000 80d4 	beq.w	801561a <uxr_read_framed_msg+0x29a>
 8015472:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015476:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 801547a:	f000 80cb 	beq.w	8015614 <uxr_read_framed_msg+0x294>
 801547e:	f806 c003 	strb.w	ip, [r6, r3]
 8015482:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8015484:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015486:	ea80 010c 	eor.w	r1, r0, ip
 801548a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801548e:	3301      	adds	r3, #1
 8015490:	b2c9      	uxtb	r1, r1
 8015492:	b29b      	uxth	r3, r3
 8015494:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015498:	4573      	cmp	r3, lr
 801549a:	8663      	strh	r3, [r4, #50]	@ 0x32
 801549c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80154a0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80154a2:	f080 811d 	bcs.w	80156e0 <uxr_read_framed_msg+0x360>
 80154a6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80154aa:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80154ae:	1c50      	adds	r0, r2, #1
 80154b0:	eb04 0c02 	add.w	ip, r4, r2
 80154b4:	4592      	cmp	sl, r2
 80154b6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 80154ba:	d1cd      	bne.n	8015458 <uxr_read_framed_msg+0xd8>
 80154bc:	459e      	cmp	lr, r3
 80154be:	f040 8114 	bne.w	80156ea <uxr_read_framed_msg+0x36a>
 80154c2:	2306      	movs	r3, #6
 80154c4:	7023      	strb	r3, [r4, #0]
 80154c6:	e76c      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 80154c8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80154cc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80154d0:	4298      	cmp	r0, r3
 80154d2:	f000 80c6 	beq.w	8015662 <uxr_read_framed_msg+0x2e2>
 80154d6:	18e2      	adds	r2, r4, r3
 80154d8:	7891      	ldrb	r1, [r2, #2]
 80154da:	297d      	cmp	r1, #125	@ 0x7d
 80154dc:	f000 8193 	beq.w	8015806 <uxr_read_framed_msg+0x486>
 80154e0:	3301      	adds	r3, #1
 80154e2:	202a      	movs	r0, #42	@ 0x2a
 80154e4:	297e      	cmp	r1, #126	@ 0x7e
 80154e6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80154ea:	fba5 c202 	umull	ip, r2, r5, r2
 80154ee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80154f2:	fb00 3312 	mls	r3, r0, r2, r3
 80154f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154fa:	f000 81d0 	beq.w	801589e <uxr_read_framed_msg+0x51e>
 80154fe:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8015500:	2000      	movs	r0, #0
 8015502:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015506:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015508:	8660      	strh	r0, [r4, #50]	@ 0x32
 801550a:	b29b      	uxth	r3, r3
 801550c:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801550e:	428b      	cmp	r3, r1
 8015510:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015512:	f240 80e2 	bls.w	80156da <uxr_read_framed_msg+0x35a>
 8015516:	7020      	strb	r0, [r4, #0]
 8015518:	b003      	add	sp, #12
 801551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015522:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015526:	4298      	cmp	r0, r3
 8015528:	f000 80aa 	beq.w	8015680 <uxr_read_framed_msg+0x300>
 801552c:	18e2      	adds	r2, r4, r3
 801552e:	7891      	ldrb	r1, [r2, #2]
 8015530:	297d      	cmp	r1, #125	@ 0x7d
 8015532:	f000 8186 	beq.w	8015842 <uxr_read_framed_msg+0x4c2>
 8015536:	3301      	adds	r3, #1
 8015538:	202a      	movs	r0, #42	@ 0x2a
 801553a:	297e      	cmp	r1, #126	@ 0x7e
 801553c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015540:	fba5 c202 	umull	ip, r2, r5, r2
 8015544:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015548:	fb00 3312 	mls	r3, r0, r2, r3
 801554c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015550:	f000 8195 	beq.w	801587e <uxr_read_framed_msg+0x4fe>
 8015554:	2304      	movs	r3, #4
 8015556:	8621      	strh	r1, [r4, #48]	@ 0x30
 8015558:	7023      	strb	r3, [r4, #0]
 801555a:	e722      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 801555c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8015560:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015564:	4290      	cmp	r0, r2
 8015566:	f000 80b4 	beq.w	80156d2 <uxr_read_framed_msg+0x352>
 801556a:	18a3      	adds	r3, r4, r2
 801556c:	7899      	ldrb	r1, [r3, #2]
 801556e:	297d      	cmp	r1, #125	@ 0x7d
 8015570:	f000 8107 	beq.w	8015782 <uxr_read_framed_msg+0x402>
 8015574:	3201      	adds	r2, #1
 8015576:	232a      	movs	r3, #42	@ 0x2a
 8015578:	297e      	cmp	r1, #126	@ 0x7e
 801557a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801557e:	fba5 c000 	umull	ip, r0, r5, r0
 8015582:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015586:	fb03 2210 	mls	r2, r3, r0, r2
 801558a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801558e:	f000 818a 	beq.w	80158a6 <uxr_read_framed_msg+0x526>
 8015592:	7863      	ldrb	r3, [r4, #1]
 8015594:	428b      	cmp	r3, r1
 8015596:	bf0c      	ite	eq
 8015598:	2303      	moveq	r3, #3
 801559a:	2300      	movne	r3, #0
 801559c:	7023      	strb	r3, [r4, #0]
 801559e:	e700      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 80155a0:	2300      	movs	r3, #0
 80155a2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80155a6:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 80155aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80155ae:	4299      	cmp	r1, r3
 80155b0:	d06a      	beq.n	8015688 <uxr_read_framed_msg+0x308>
 80155b2:	18e2      	adds	r2, r4, r3
 80155b4:	7890      	ldrb	r0, [r2, #2]
 80155b6:	287d      	cmp	r0, #125	@ 0x7d
 80155b8:	f000 8100 	beq.w	80157bc <uxr_read_framed_msg+0x43c>
 80155bc:	3301      	adds	r3, #1
 80155be:	212a      	movs	r1, #42	@ 0x2a
 80155c0:	287e      	cmp	r0, #126	@ 0x7e
 80155c2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80155c6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80155ca:	fba5 c202 	umull	ip, r2, r5, r2
 80155ce:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80155d2:	fb01 3312 	mls	r3, r1, r2, r3
 80155d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80155da:	d055      	beq.n	8015688 <uxr_read_framed_msg+0x308>
 80155dc:	2302      	movs	r3, #2
 80155de:	7023      	strb	r3, [r4, #0]
 80155e0:	e6df      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 80155e2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 80155e6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80155ea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80155ee:	1c5a      	adds	r2, r3, #1
 80155f0:	459c      	cmp	ip, r3
 80155f2:	eb04 0103 	add.w	r1, r4, r3
 80155f6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 80155fa:	f43f af04 	beq.w	8015406 <uxr_read_framed_msg+0x86>
 80155fe:	fba5 0303 	umull	r0, r3, r5, r3
 8015602:	7889      	ldrb	r1, [r1, #2]
 8015604:	089b      	lsrs	r3, r3, #2
 8015606:	297e      	cmp	r1, #126	@ 0x7e
 8015608:	fb0e 2313 	mls	r3, lr, r3, r2
 801560c:	b2db      	uxtb	r3, r3
 801560e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015612:	d1ec      	bne.n	80155ee <uxr_read_framed_msg+0x26e>
 8015614:	2301      	movs	r3, #1
 8015616:	7023      	strb	r3, [r4, #0]
 8015618:	e6c3      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 801561a:	1c50      	adds	r0, r2, #1
 801561c:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8015620:	3202      	adds	r2, #2
 8015622:	0841      	lsrs	r1, r0, #1
 8015624:	fba5 c101 	umull	ip, r1, r5, r1
 8015628:	0889      	lsrs	r1, r1, #2
 801562a:	fb0b 0111 	mls	r1, fp, r1, r0
 801562e:	1860      	adds	r0, r4, r1
 8015630:	b2c9      	uxtb	r1, r1
 8015632:	458a      	cmp	sl, r1
 8015634:	f43f af42 	beq.w	80154bc <uxr_read_framed_msg+0x13c>
 8015638:	0851      	lsrs	r1, r2, #1
 801563a:	7880      	ldrb	r0, [r0, #2]
 801563c:	fba5 a101 	umull	sl, r1, r5, r1
 8015640:	287e      	cmp	r0, #126	@ 0x7e
 8015642:	f080 0c20 	eor.w	ip, r0, #32
 8015646:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801564a:	fb0b 2211 	mls	r2, fp, r1, r2
 801564e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015652:	f47f af14 	bne.w	801547e <uxr_read_framed_msg+0xfe>
 8015656:	459e      	cmp	lr, r3
 8015658:	f43f af33 	beq.w	80154c2 <uxr_read_framed_msg+0x142>
 801565c:	2301      	movs	r3, #1
 801565e:	7023      	strb	r3, [r4, #0]
 8015660:	e69f      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 8015662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	2301      	movs	r3, #1
 8015668:	9301      	str	r3, [sp, #4]
 801566a:	464a      	mov	r2, r9
 801566c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801566e:	4641      	mov	r1, r8
 8015670:	4620      	mov	r0, r4
 8015672:	f7ff fdf1 	bl	8015258 <uxr_framing_read_transport>
 8015676:	2800      	cmp	r0, #0
 8015678:	f43f aec5 	beq.w	8015406 <uxr_read_framed_msg+0x86>
 801567c:	7823      	ldrb	r3, [r4, #0]
 801567e:	e690      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 8015680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015682:	9300      	str	r3, [sp, #0]
 8015684:	2302      	movs	r3, #2
 8015686:	e7ef      	b.n	8015668 <uxr_read_framed_msg+0x2e8>
 8015688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801568a:	464a      	mov	r2, r9
 801568c:	4641      	mov	r1, r8
 801568e:	4620      	mov	r0, r4
 8015690:	9300      	str	r3, [sp, #0]
 8015692:	2304      	movs	r3, #4
 8015694:	9301      	str	r3, [sp, #4]
 8015696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015698:	f7ff fdde 	bl	8015258 <uxr_framing_read_transport>
 801569c:	2800      	cmp	r0, #0
 801569e:	d1ed      	bne.n	801567c <uxr_read_framed_msg+0x2fc>
 80156a0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80156a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80156a6:	d0e9      	beq.n	801567c <uxr_read_framed_msg+0x2fc>
 80156a8:	e6ad      	b.n	8015406 <uxr_read_framed_msg+0x86>
 80156aa:	bf00      	nop
 80156ac:	30c30c31 	.word	0x30c30c31
 80156b0:	0801e408 	.word	0x0801e408
 80156b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156b6:	9300      	str	r3, [sp, #0]
 80156b8:	2305      	movs	r3, #5
 80156ba:	9301      	str	r3, [sp, #4]
 80156bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156be:	f7ff fdcb 	bl	8015258 <uxr_framing_read_transport>
 80156c2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80156c6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80156ca:	429a      	cmp	r2, r3
 80156cc:	f43f ae9b 	beq.w	8015406 <uxr_read_framed_msg+0x86>
 80156d0:	e664      	b.n	801539c <uxr_read_framed_msg+0x1c>
 80156d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	2303      	movs	r3, #3
 80156d8:	e7c6      	b.n	8015668 <uxr_read_framed_msg+0x2e8>
 80156da:	2305      	movs	r3, #5
 80156dc:	7023      	strb	r3, [r4, #0]
 80156de:	e660      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 80156e0:	f43f aeef 	beq.w	80154c2 <uxr_read_framed_msg+0x142>
 80156e4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80156e8:	d094      	beq.n	8015614 <uxr_read_framed_msg+0x294>
 80156ea:	ebae 0303 	sub.w	r3, lr, r3
 80156ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80156f0:	3302      	adds	r3, #2
 80156f2:	9200      	str	r2, [sp, #0]
 80156f4:	e7b8      	b.n	8015668 <uxr_read_framed_msg+0x2e8>
 80156f6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80156fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80156fc:	7013      	strb	r3, [r2, #0]
 80156fe:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8015700:	b003      	add	sp, #12
 8015702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015706:	1c59      	adds	r1, r3, #1
 8015708:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801570c:	084a      	lsrs	r2, r1, #1
 801570e:	fba5 e202 	umull	lr, r2, r5, r2
 8015712:	0892      	lsrs	r2, r2, #2
 8015714:	fb0c 1212 	mls	r2, ip, r2, r1
 8015718:	b2d1      	uxtb	r1, r2
 801571a:	4288      	cmp	r0, r1
 801571c:	d0b0      	beq.n	8015680 <uxr_read_framed_msg+0x300>
 801571e:	3302      	adds	r3, #2
 8015720:	4422      	add	r2, r4
 8015722:	7891      	ldrb	r1, [r2, #2]
 8015724:	085a      	lsrs	r2, r3, #1
 8015726:	fba5 0202 	umull	r0, r2, r5, r2
 801572a:	297e      	cmp	r1, #126	@ 0x7e
 801572c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015730:	fb0c 3312 	mls	r3, ip, r2, r3
 8015734:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015738:	f000 80a1 	beq.w	801587e <uxr_read_framed_msg+0x4fe>
 801573c:	f081 0120 	eor.w	r1, r1, #32
 8015740:	e680      	b.n	8015444 <uxr_read_framed_msg+0xc4>
 8015742:	f103 0c01 	add.w	ip, r3, #1
 8015746:	202a      	movs	r0, #42	@ 0x2a
 8015748:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801574c:	fba5 e202 	umull	lr, r2, r5, r2
 8015750:	0892      	lsrs	r2, r2, #2
 8015752:	fb00 c212 	mls	r2, r0, r2, ip
 8015756:	fa5f fc82 	uxtb.w	ip, r2
 801575a:	4561      	cmp	r1, ip
 801575c:	d081      	beq.n	8015662 <uxr_read_framed_msg+0x2e2>
 801575e:	3302      	adds	r3, #2
 8015760:	4422      	add	r2, r4
 8015762:	0859      	lsrs	r1, r3, #1
 8015764:	7892      	ldrb	r2, [r2, #2]
 8015766:	fba5 c101 	umull	ip, r1, r5, r1
 801576a:	2a7e      	cmp	r2, #126	@ 0x7e
 801576c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015770:	fb00 3311 	mls	r3, r0, r1, r3
 8015774:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015778:	f000 8091 	beq.w	801589e <uxr_read_framed_msg+0x51e>
 801577c:	f082 0220 	eor.w	r2, r2, #32
 8015780:	e636      	b.n	80153f0 <uxr_read_framed_msg+0x70>
 8015782:	1c51      	adds	r1, r2, #1
 8015784:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015788:	084b      	lsrs	r3, r1, #1
 801578a:	fba5 e303 	umull	lr, r3, r5, r3
 801578e:	089b      	lsrs	r3, r3, #2
 8015790:	fb0c 1313 	mls	r3, ip, r3, r1
 8015794:	b2d9      	uxtb	r1, r3
 8015796:	4288      	cmp	r0, r1
 8015798:	d09b      	beq.n	80156d2 <uxr_read_framed_msg+0x352>
 801579a:	3202      	adds	r2, #2
 801579c:	4423      	add	r3, r4
 801579e:	0850      	lsrs	r0, r2, #1
 80157a0:	789b      	ldrb	r3, [r3, #2]
 80157a2:	fba5 1000 	umull	r1, r0, r5, r0
 80157a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80157a8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80157ac:	fb0c 2210 	mls	r2, ip, r0, r2
 80157b0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80157b4:	d077      	beq.n	80158a6 <uxr_read_framed_msg+0x526>
 80157b6:	f083 0120 	eor.w	r1, r3, #32
 80157ba:	e6ea      	b.n	8015592 <uxr_read_framed_msg+0x212>
 80157bc:	f103 0c01 	add.w	ip, r3, #1
 80157c0:	202a      	movs	r0, #42	@ 0x2a
 80157c2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80157c6:	fba5 e202 	umull	lr, r2, r5, r2
 80157ca:	0892      	lsrs	r2, r2, #2
 80157cc:	fb00 c212 	mls	r2, r0, r2, ip
 80157d0:	fa5f fc82 	uxtb.w	ip, r2
 80157d4:	4561      	cmp	r1, ip
 80157d6:	f43f af57 	beq.w	8015688 <uxr_read_framed_msg+0x308>
 80157da:	3302      	adds	r3, #2
 80157dc:	4422      	add	r2, r4
 80157de:	7891      	ldrb	r1, [r2, #2]
 80157e0:	085a      	lsrs	r2, r3, #1
 80157e2:	fba5 c202 	umull	ip, r2, r5, r2
 80157e6:	297e      	cmp	r1, #126	@ 0x7e
 80157e8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80157ec:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80157f0:	fb00 3312 	mls	r3, r0, r2, r3
 80157f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80157f8:	f43f af46 	beq.w	8015688 <uxr_read_framed_msg+0x308>
 80157fc:	f081 0120 	eor.w	r1, r1, #32
 8015800:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015804:	e6ea      	b.n	80155dc <uxr_read_framed_msg+0x25c>
 8015806:	1c59      	adds	r1, r3, #1
 8015808:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801580c:	084a      	lsrs	r2, r1, #1
 801580e:	fba5 e202 	umull	lr, r2, r5, r2
 8015812:	0892      	lsrs	r2, r2, #2
 8015814:	fb0c 1212 	mls	r2, ip, r2, r1
 8015818:	b2d1      	uxtb	r1, r2
 801581a:	4288      	cmp	r0, r1
 801581c:	f43f af21 	beq.w	8015662 <uxr_read_framed_msg+0x2e2>
 8015820:	3302      	adds	r3, #2
 8015822:	4422      	add	r2, r4
 8015824:	7891      	ldrb	r1, [r2, #2]
 8015826:	085a      	lsrs	r2, r3, #1
 8015828:	fba5 0202 	umull	r0, r2, r5, r2
 801582c:	297e      	cmp	r1, #126	@ 0x7e
 801582e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015832:	fb0c 3312 	mls	r3, ip, r2, r3
 8015836:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801583a:	d030      	beq.n	801589e <uxr_read_framed_msg+0x51e>
 801583c:	f081 0120 	eor.w	r1, r1, #32
 8015840:	e65d      	b.n	80154fe <uxr_read_framed_msg+0x17e>
 8015842:	1c59      	adds	r1, r3, #1
 8015844:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015848:	084a      	lsrs	r2, r1, #1
 801584a:	fba5 e202 	umull	lr, r2, r5, r2
 801584e:	0892      	lsrs	r2, r2, #2
 8015850:	fb0c 1212 	mls	r2, ip, r2, r1
 8015854:	b2d1      	uxtb	r1, r2
 8015856:	4288      	cmp	r0, r1
 8015858:	f43f af12 	beq.w	8015680 <uxr_read_framed_msg+0x300>
 801585c:	3302      	adds	r3, #2
 801585e:	4422      	add	r2, r4
 8015860:	7891      	ldrb	r1, [r2, #2]
 8015862:	085a      	lsrs	r2, r3, #1
 8015864:	fba5 0202 	umull	r0, r2, r5, r2
 8015868:	297e      	cmp	r1, #126	@ 0x7e
 801586a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801586e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015872:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015876:	d002      	beq.n	801587e <uxr_read_framed_msg+0x4fe>
 8015878:	f081 0120 	eor.w	r1, r1, #32
 801587c:	e66a      	b.n	8015554 <uxr_read_framed_msg+0x1d4>
 801587e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	2302      	movs	r3, #2
 8015884:	9301      	str	r3, [sp, #4]
 8015886:	464a      	mov	r2, r9
 8015888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801588a:	4641      	mov	r1, r8
 801588c:	4620      	mov	r0, r4
 801588e:	f7ff fce3 	bl	8015258 <uxr_framing_read_transport>
 8015892:	2800      	cmp	r0, #0
 8015894:	f47f aef2 	bne.w	801567c <uxr_read_framed_msg+0x2fc>
 8015898:	2301      	movs	r3, #1
 801589a:	7023      	strb	r3, [r4, #0]
 801589c:	e581      	b.n	80153a2 <uxr_read_framed_msg+0x22>
 801589e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80158a0:	9300      	str	r3, [sp, #0]
 80158a2:	2301      	movs	r3, #1
 80158a4:	e7ee      	b.n	8015884 <uxr_read_framed_msg+0x504>
 80158a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80158a8:	9300      	str	r3, [sp, #0]
 80158aa:	2303      	movs	r3, #3
 80158ac:	e7ea      	b.n	8015884 <uxr_read_framed_msg+0x504>
 80158ae:	bf00      	nop

080158b0 <uxr_stream_id>:
 80158b0:	2901      	cmp	r1, #1
 80158b2:	4684      	mov	ip, r0
 80158b4:	b500      	push	{lr}
 80158b6:	b083      	sub	sp, #12
 80158b8:	d01f      	beq.n	80158fa <uxr_stream_id+0x4a>
 80158ba:	2902      	cmp	r1, #2
 80158bc:	f04f 0e00 	mov.w	lr, #0
 80158c0:	d020      	beq.n	8015904 <uxr_stream_id+0x54>
 80158c2:	2300      	movs	r3, #0
 80158c4:	2000      	movs	r0, #0
 80158c6:	f36e 0307 	bfi	r3, lr, #0, #8
 80158ca:	f36c 230f 	bfi	r3, ip, #8, #8
 80158ce:	f361 4317 	bfi	r3, r1, #16, #8
 80158d2:	f362 631f 	bfi	r3, r2, #24, #8
 80158d6:	fa5f fc83 	uxtb.w	ip, r3
 80158da:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80158de:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80158e2:	0e1b      	lsrs	r3, r3, #24
 80158e4:	f36c 0007 	bfi	r0, ip, #0, #8
 80158e8:	f361 200f 	bfi	r0, r1, #8, #8
 80158ec:	f362 4017 	bfi	r0, r2, #16, #8
 80158f0:	f363 601f 	bfi	r0, r3, #24, #8
 80158f4:	b003      	add	sp, #12
 80158f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80158fa:	f100 0e01 	add.w	lr, r0, #1
 80158fe:	fa5f fe8e 	uxtb.w	lr, lr
 8015902:	e7de      	b.n	80158c2 <uxr_stream_id+0x12>
 8015904:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 8015908:	e7db      	b.n	80158c2 <uxr_stream_id+0x12>
 801590a:	bf00      	nop

0801590c <uxr_stream_id_from_raw>:
 801590c:	b082      	sub	sp, #8
 801590e:	b130      	cbz	r0, 801591e <uxr_stream_id_from_raw+0x12>
 8015910:	0603      	lsls	r3, r0, #24
 8015912:	d421      	bmi.n	8015958 <uxr_stream_id_from_raw+0x4c>
 8015914:	1e42      	subs	r2, r0, #1
 8015916:	f04f 0c01 	mov.w	ip, #1
 801591a:	b2d2      	uxtb	r2, r2
 801591c:	e001      	b.n	8015922 <uxr_stream_id_from_raw+0x16>
 801591e:	4684      	mov	ip, r0
 8015920:	4602      	mov	r2, r0
 8015922:	2300      	movs	r3, #0
 8015924:	f360 0307 	bfi	r3, r0, #0, #8
 8015928:	2000      	movs	r0, #0
 801592a:	f362 230f 	bfi	r3, r2, #8, #8
 801592e:	f36c 4317 	bfi	r3, ip, #16, #8
 8015932:	f361 631f 	bfi	r3, r1, #24, #8
 8015936:	fa5f fc83 	uxtb.w	ip, r3
 801593a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801593e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015942:	0e1b      	lsrs	r3, r3, #24
 8015944:	f36c 0007 	bfi	r0, ip, #0, #8
 8015948:	f361 200f 	bfi	r0, r1, #8, #8
 801594c:	f362 4017 	bfi	r0, r2, #16, #8
 8015950:	f363 601f 	bfi	r0, r3, #24, #8
 8015954:	b002      	add	sp, #8
 8015956:	4770      	bx	lr
 8015958:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801595c:	f04f 0c02 	mov.w	ip, #2
 8015960:	e7df      	b.n	8015922 <uxr_stream_id_from_raw+0x16>
 8015962:	bf00      	nop

08015964 <uxr_init_stream_storage>:
 8015964:	2300      	movs	r3, #0
 8015966:	7403      	strb	r3, [r0, #16]
 8015968:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801596c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8015970:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015974:	4770      	bx	lr
 8015976:	bf00      	nop

08015978 <uxr_reset_stream_storage>:
 8015978:	b570      	push	{r4, r5, r6, lr}
 801597a:	7c03      	ldrb	r3, [r0, #16]
 801597c:	4604      	mov	r4, r0
 801597e:	b14b      	cbz	r3, 8015994 <uxr_reset_stream_storage+0x1c>
 8015980:	4606      	mov	r6, r0
 8015982:	2500      	movs	r5, #0
 8015984:	4630      	mov	r0, r6
 8015986:	3501      	adds	r5, #1
 8015988:	f005 fe2e 	bl	801b5e8 <uxr_reset_output_best_effort_stream>
 801598c:	7c23      	ldrb	r3, [r4, #16]
 801598e:	3610      	adds	r6, #16
 8015990:	42ab      	cmp	r3, r5
 8015992:	d8f7      	bhi.n	8015984 <uxr_reset_stream_storage+0xc>
 8015994:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015998:	b15b      	cbz	r3, 80159b2 <uxr_reset_stream_storage+0x3a>
 801599a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801599e:	2500      	movs	r5, #0
 80159a0:	4630      	mov	r0, r6
 80159a2:	3501      	adds	r5, #1
 80159a4:	f005 fc26 	bl	801b1f4 <uxr_reset_input_best_effort_stream>
 80159a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80159ac:	3602      	adds	r6, #2
 80159ae:	42ab      	cmp	r3, r5
 80159b0:	d8f6      	bhi.n	80159a0 <uxr_reset_stream_storage+0x28>
 80159b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80159b6:	b15b      	cbz	r3, 80159d0 <uxr_reset_stream_storage+0x58>
 80159b8:	f104 0618 	add.w	r6, r4, #24
 80159bc:	2500      	movs	r5, #0
 80159be:	4630      	mov	r0, r6
 80159c0:	3501      	adds	r5, #1
 80159c2:	f005 febd 	bl	801b740 <uxr_reset_output_reliable_stream>
 80159c6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80159ca:	3628      	adds	r6, #40	@ 0x28
 80159cc:	42ab      	cmp	r3, r5
 80159ce:	d8f6      	bhi.n	80159be <uxr_reset_stream_storage+0x46>
 80159d0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80159d4:	b15b      	cbz	r3, 80159ee <uxr_reset_stream_storage+0x76>
 80159d6:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80159da:	2500      	movs	r5, #0
 80159dc:	4630      	mov	r0, r6
 80159de:	3501      	adds	r5, #1
 80159e0:	f005 fc74 	bl	801b2cc <uxr_reset_input_reliable_stream>
 80159e4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80159e8:	3618      	adds	r6, #24
 80159ea:	42ab      	cmp	r3, r5
 80159ec:	d8f6      	bhi.n	80159dc <uxr_reset_stream_storage+0x64>
 80159ee:	bd70      	pop	{r4, r5, r6, pc}

080159f0 <uxr_add_output_best_effort_buffer>:
 80159f0:	b510      	push	{r4, lr}
 80159f2:	7c04      	ldrb	r4, [r0, #16]
 80159f4:	b082      	sub	sp, #8
 80159f6:	f104 0c01 	add.w	ip, r4, #1
 80159fa:	f880 c010 	strb.w	ip, [r0, #16]
 80159fe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8015a02:	f005 fde7 	bl	801b5d4 <uxr_init_output_best_effort_stream>
 8015a06:	2201      	movs	r2, #1
 8015a08:	4620      	mov	r0, r4
 8015a0a:	4611      	mov	r1, r2
 8015a0c:	b002      	add	sp, #8
 8015a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a12:	f7ff bf4d 	b.w	80158b0 <uxr_stream_id>
 8015a16:	bf00      	nop

08015a18 <uxr_add_output_reliable_buffer>:
 8015a18:	b510      	push	{r4, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	4684      	mov	ip, r0
 8015a1e:	2028      	movs	r0, #40	@ 0x28
 8015a20:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8015a24:	9400      	str	r4, [sp, #0]
 8015a26:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8015a2a:	fb00 c004 	mla	r0, r0, r4, ip
 8015a2e:	f104 0e01 	add.w	lr, r4, #1
 8015a32:	3018      	adds	r0, #24
 8015a34:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8015a38:	f005 fe4c 	bl	801b6d4 <uxr_init_output_reliable_stream>
 8015a3c:	2201      	movs	r2, #1
 8015a3e:	2102      	movs	r1, #2
 8015a40:	4620      	mov	r0, r4
 8015a42:	b004      	add	sp, #16
 8015a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a48:	f7ff bf32 	b.w	80158b0 <uxr_stream_id>

08015a4c <uxr_add_input_best_effort_buffer>:
 8015a4c:	b510      	push	{r4, lr}
 8015a4e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8015a52:	b082      	sub	sp, #8
 8015a54:	1c62      	adds	r2, r4, #1
 8015a56:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8015a5a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8015a5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015a62:	f005 fbc3 	bl	801b1ec <uxr_init_input_best_effort_stream>
 8015a66:	2200      	movs	r2, #0
 8015a68:	2101      	movs	r1, #1
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	b002      	add	sp, #8
 8015a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a72:	f7ff bf1d 	b.w	80158b0 <uxr_stream_id>
 8015a76:	bf00      	nop

08015a78 <uxr_add_input_reliable_buffer>:
 8015a78:	b510      	push	{r4, lr}
 8015a7a:	b084      	sub	sp, #16
 8015a7c:	4684      	mov	ip, r0
 8015a7e:	2018      	movs	r0, #24
 8015a80:	9c06      	ldr	r4, [sp, #24]
 8015a82:	9400      	str	r4, [sp, #0]
 8015a84:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8015a88:	fb00 c004 	mla	r0, r0, r4, ip
 8015a8c:	f104 0e01 	add.w	lr, r4, #1
 8015a90:	3048      	adds	r0, #72	@ 0x48
 8015a92:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8015a96:	f005 fbf3 	bl	801b280 <uxr_init_input_reliable_stream>
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	2102      	movs	r1, #2
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	b004      	add	sp, #16
 8015aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aa6:	f7ff bf03 	b.w	80158b0 <uxr_stream_id>
 8015aaa:	bf00      	nop

08015aac <uxr_get_output_best_effort_stream>:
 8015aac:	7c03      	ldrb	r3, [r0, #16]
 8015aae:	428b      	cmp	r3, r1
 8015ab0:	bf8c      	ite	hi
 8015ab2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8015ab6:	2000      	movls	r0, #0
 8015ab8:	4770      	bx	lr
 8015aba:	bf00      	nop

08015abc <uxr_get_output_reliable_stream>:
 8015abc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015ac0:	428b      	cmp	r3, r1
 8015ac2:	d904      	bls.n	8015ace <uxr_get_output_reliable_stream+0x12>
 8015ac4:	2328      	movs	r3, #40	@ 0x28
 8015ac6:	fb03 0001 	mla	r0, r3, r1, r0
 8015aca:	3018      	adds	r0, #24
 8015acc:	4770      	bx	lr
 8015ace:	2000      	movs	r0, #0
 8015ad0:	4770      	bx	lr
 8015ad2:	bf00      	nop

08015ad4 <uxr_get_input_best_effort_stream>:
 8015ad4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8015ad8:	428b      	cmp	r3, r1
 8015ada:	d903      	bls.n	8015ae4 <uxr_get_input_best_effort_stream+0x10>
 8015adc:	3121      	adds	r1, #33	@ 0x21
 8015ade:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8015ae2:	4770      	bx	lr
 8015ae4:	2000      	movs	r0, #0
 8015ae6:	4770      	bx	lr

08015ae8 <uxr_get_input_reliable_stream>:
 8015ae8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8015aec:	428b      	cmp	r3, r1
 8015aee:	d904      	bls.n	8015afa <uxr_get_input_reliable_stream+0x12>
 8015af0:	2318      	movs	r3, #24
 8015af2:	fb03 0001 	mla	r0, r3, r1, r0
 8015af6:	3048      	adds	r0, #72	@ 0x48
 8015af8:	4770      	bx	lr
 8015afa:	2000      	movs	r0, #0
 8015afc:	4770      	bx	lr
 8015afe:	bf00      	nop

08015b00 <uxr_output_streams_confirmed>:
 8015b00:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015b04:	b183      	cbz	r3, 8015b28 <uxr_output_streams_confirmed+0x28>
 8015b06:	b570      	push	{r4, r5, r6, lr}
 8015b08:	4606      	mov	r6, r0
 8015b0a:	f100 0518 	add.w	r5, r0, #24
 8015b0e:	2400      	movs	r4, #0
 8015b10:	e000      	b.n	8015b14 <uxr_output_streams_confirmed+0x14>
 8015b12:	b140      	cbz	r0, 8015b26 <uxr_output_streams_confirmed+0x26>
 8015b14:	4628      	mov	r0, r5
 8015b16:	3401      	adds	r4, #1
 8015b18:	f006 f886 	bl	801bc28 <uxr_is_output_up_to_date>
 8015b1c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8015b20:	3528      	adds	r5, #40	@ 0x28
 8015b22:	42a3      	cmp	r3, r4
 8015b24:	d8f5      	bhi.n	8015b12 <uxr_output_streams_confirmed+0x12>
 8015b26:	bd70      	pop	{r4, r5, r6, pc}
 8015b28:	2001      	movs	r0, #1
 8015b2a:	4770      	bx	lr

08015b2c <uxr_buffer_submessage_header>:
 8015b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b2e:	460e      	mov	r6, r1
 8015b30:	2104      	movs	r1, #4
 8015b32:	4604      	mov	r4, r0
 8015b34:	4615      	mov	r5, r2
 8015b36:	461f      	mov	r7, r3
 8015b38:	f7fd fd62 	bl	8013600 <ucdr_align_to>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	4631      	mov	r1, r6
 8015b40:	4620      	mov	r0, r4
 8015b42:	ea47 0203 	orr.w	r2, r7, r3
 8015b46:	7523      	strb	r3, [r4, #20]
 8015b48:	462b      	mov	r3, r5
 8015b4a:	f000 fa29 	bl	8015fa0 <uxr_serialize_submessage_header>
 8015b4e:	4620      	mov	r0, r4
 8015b50:	f7fd fd6c 	bl	801362c <ucdr_buffer_remaining>
 8015b54:	42a8      	cmp	r0, r5
 8015b56:	bf34      	ite	cc
 8015b58:	2000      	movcc	r0, #0
 8015b5a:	2001      	movcs	r0, #1
 8015b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b5e:	bf00      	nop

08015b60 <uxr_read_submessage_header>:
 8015b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b64:	4604      	mov	r4, r0
 8015b66:	460d      	mov	r5, r1
 8015b68:	2104      	movs	r1, #4
 8015b6a:	4616      	mov	r6, r2
 8015b6c:	4698      	mov	r8, r3
 8015b6e:	f7fd fd47 	bl	8013600 <ucdr_align_to>
 8015b72:	4620      	mov	r0, r4
 8015b74:	f7fd fd5a 	bl	801362c <ucdr_buffer_remaining>
 8015b78:	2803      	cmp	r0, #3
 8015b7a:	bf8c      	ite	hi
 8015b7c:	2701      	movhi	r7, #1
 8015b7e:	2700      	movls	r7, #0
 8015b80:	d802      	bhi.n	8015b88 <uxr_read_submessage_header+0x28>
 8015b82:	4638      	mov	r0, r7
 8015b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b88:	4633      	mov	r3, r6
 8015b8a:	4642      	mov	r2, r8
 8015b8c:	4620      	mov	r0, r4
 8015b8e:	4629      	mov	r1, r5
 8015b90:	f000 fa1a 	bl	8015fc8 <uxr_deserialize_submessage_header>
 8015b94:	f898 3000 	ldrb.w	r3, [r8]
 8015b98:	4638      	mov	r0, r7
 8015b9a:	f003 0201 	and.w	r2, r3, #1
 8015b9e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015ba2:	f888 3000 	strb.w	r3, [r8]
 8015ba6:	7522      	strb	r2, [r4, #20]
 8015ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015bac <uxr_submessage_padding>:
 8015bac:	f010 0003 	ands.w	r0, r0, #3
 8015bb0:	bf18      	it	ne
 8015bb2:	f1c0 0004 	rsbne	r0, r0, #4
 8015bb6:	4770      	bx	lr

08015bb8 <uxr_millis>:
 8015bb8:	b510      	push	{r4, lr}
 8015bba:	b084      	sub	sp, #16
 8015bbc:	2001      	movs	r0, #1
 8015bbe:	4669      	mov	r1, sp
 8015bc0:	f7ec f802 	bl	8001bc8 <clock_gettime>
 8015bc4:	4908      	ldr	r1, [pc, #32]	@ (8015be8 <uxr_millis+0x30>)
 8015bc6:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015bca:	fba0 0301 	umull	r0, r3, r0, r1
 8015bce:	1900      	adds	r0, r0, r4
 8015bd0:	fb01 3102 	mla	r1, r1, r2, r3
 8015bd4:	4a05      	ldr	r2, [pc, #20]	@ (8015bec <uxr_millis+0x34>)
 8015bd6:	f04f 0300 	mov.w	r3, #0
 8015bda:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015bde:	f7ea fbe7 	bl	80003b0 <__aeabi_ldivmod>
 8015be2:	b004      	add	sp, #16
 8015be4:	bd10      	pop	{r4, pc}
 8015be6:	bf00      	nop
 8015be8:	3b9aca00 	.word	0x3b9aca00
 8015bec:	000f4240 	.word	0x000f4240

08015bf0 <uxr_nanos>:
 8015bf0:	b510      	push	{r4, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	2001      	movs	r0, #1
 8015bf6:	4669      	mov	r1, sp
 8015bf8:	f7eb ffe6 	bl	8001bc8 <clock_gettime>
 8015bfc:	4a06      	ldr	r2, [pc, #24]	@ (8015c18 <uxr_nanos+0x28>)
 8015bfe:	9800      	ldr	r0, [sp, #0]
 8015c00:	9902      	ldr	r1, [sp, #8]
 8015c02:	fba0 0302 	umull	r0, r3, r0, r2
 8015c06:	9c01      	ldr	r4, [sp, #4]
 8015c08:	1840      	adds	r0, r0, r1
 8015c0a:	fb02 3304 	mla	r3, r2, r4, r3
 8015c0e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8015c12:	b004      	add	sp, #16
 8015c14:	bd10      	pop	{r4, pc}
 8015c16:	bf00      	nop
 8015c18:	3b9aca00 	.word	0x3b9aca00

08015c1c <on_full_output_buffer_fragmented>:
 8015c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c20:	460c      	mov	r4, r1
 8015c22:	b08a      	sub	sp, #40	@ 0x28
 8015c24:	4606      	mov	r6, r0
 8015c26:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8015c2a:	f104 0008 	add.w	r0, r4, #8
 8015c2e:	f7ff ff45 	bl	8015abc <uxr_get_output_reliable_stream>
 8015c32:	4605      	mov	r5, r0
 8015c34:	f006 f802 	bl	801bc3c <get_available_free_slots>
 8015c38:	b968      	cbnz	r0, 8015c56 <on_full_output_buffer_fragmented+0x3a>
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8015c40:	4798      	blx	r3
 8015c42:	b918      	cbnz	r0, 8015c4c <on_full_output_buffer_fragmented+0x30>
 8015c44:	2001      	movs	r0, #1
 8015c46:	b00a      	add	sp, #40	@ 0x28
 8015c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4c:	4628      	mov	r0, r5
 8015c4e:	f005 fff5 	bl	801bc3c <get_available_free_slots>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d0f6      	beq.n	8015c44 <on_full_output_buffer_fragmented+0x28>
 8015c56:	8929      	ldrh	r1, [r5, #8]
 8015c58:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8015c5c:	89eb      	ldrh	r3, [r5, #14]
 8015c5e:	7b28      	ldrb	r0, [r5, #12]
 8015c60:	686f      	ldr	r7, [r5, #4]
 8015c62:	1a12      	subs	r2, r2, r0
 8015c64:	fbb3 f0f1 	udiv	r0, r3, r1
 8015c68:	fbb7 f7f1 	udiv	r7, r7, r1
 8015c6c:	fb01 3110 	mls	r1, r1, r0, r3
 8015c70:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8015c74:	b289      	uxth	r1, r1
 8015c76:	fb07 f101 	mul.w	r1, r7, r1
 8015c7a:	3f04      	subs	r7, #4
 8015c7c:	443a      	add	r2, r7
 8015c7e:	3104      	adds	r1, #4
 8015c80:	fa1f f882 	uxth.w	r8, r2
 8015c84:	463a      	mov	r2, r7
 8015c86:	eba3 0308 	sub.w	r3, r3, r8
 8015c8a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015c8e:	682b      	ldr	r3, [r5, #0]
 8015c90:	4419      	add	r1, r3
 8015c92:	2300      	movs	r3, #0
 8015c94:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015c98:	9000      	str	r0, [sp, #0]
 8015c9a:	a802      	add	r0, sp, #8
 8015c9c:	f7fd fc82 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8015ca0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015ca4:	f102 0308 	add.w	r3, r2, #8
 8015ca8:	42bb      	cmp	r3, r7
 8015caa:	d927      	bls.n	8015cfc <on_full_output_buffer_fragmented+0xe0>
 8015cac:	4642      	mov	r2, r8
 8015cae:	2300      	movs	r3, #0
 8015cb0:	210d      	movs	r1, #13
 8015cb2:	a802      	add	r0, sp, #8
 8015cb4:	f7ff ff3a 	bl	8015b2c <uxr_buffer_submessage_header>
 8015cb8:	8929      	ldrh	r1, [r5, #8]
 8015cba:	89eb      	ldrh	r3, [r5, #14]
 8015cbc:	686a      	ldr	r2, [r5, #4]
 8015cbe:	fbb3 f0f1 	udiv	r0, r3, r1
 8015cc2:	fbb2 f2f1 	udiv	r2, r2, r1
 8015cc6:	fb01 3310 	mls	r3, r1, r0, r3
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	fb02 f303 	mul.w	r3, r2, r3
 8015cd0:	682a      	ldr	r2, [r5, #0]
 8015cd2:	50d7      	str	r7, [r2, r3]
 8015cd4:	2101      	movs	r1, #1
 8015cd6:	89e8      	ldrh	r0, [r5, #14]
 8015cd8:	f005 ffd2 	bl	801bc80 <uxr_seq_num_add>
 8015cdc:	9904      	ldr	r1, [sp, #16]
 8015cde:	9a03      	ldr	r2, [sp, #12]
 8015ce0:	81e8      	strh	r0, [r5, #14]
 8015ce2:	4630      	mov	r0, r6
 8015ce4:	1a52      	subs	r2, r2, r1
 8015ce6:	f7fd fc6f 	bl	80135c8 <ucdr_init_buffer>
 8015cea:	4630      	mov	r0, r6
 8015cec:	4622      	mov	r2, r4
 8015cee:	490f      	ldr	r1, [pc, #60]	@ (8015d2c <on_full_output_buffer_fragmented+0x110>)
 8015cf0:	f7fd fc3e 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 8015cf4:	2000      	movs	r0, #0
 8015cf6:	b00a      	add	sp, #40	@ 0x28
 8015cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cfc:	b292      	uxth	r2, r2
 8015cfe:	2302      	movs	r3, #2
 8015d00:	210d      	movs	r1, #13
 8015d02:	a802      	add	r0, sp, #8
 8015d04:	f7ff ff12 	bl	8015b2c <uxr_buffer_submessage_header>
 8015d08:	8928      	ldrh	r0, [r5, #8]
 8015d0a:	89eb      	ldrh	r3, [r5, #14]
 8015d0c:	6869      	ldr	r1, [r5, #4]
 8015d0e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015d12:	fbb3 f7f0 	udiv	r7, r3, r0
 8015d16:	fbb1 f1f0 	udiv	r1, r1, r0
 8015d1a:	fb00 3317 	mls	r3, r0, r7, r3
 8015d1e:	3208      	adds	r2, #8
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	fb01 f303 	mul.w	r3, r1, r3
 8015d26:	6829      	ldr	r1, [r5, #0]
 8015d28:	50ca      	str	r2, [r1, r3]
 8015d2a:	e7d3      	b.n	8015cd4 <on_full_output_buffer_fragmented+0xb8>
 8015d2c:	08015c1d 	.word	0x08015c1d

08015d30 <uxr_prepare_output_stream>:
 8015d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d32:	b087      	sub	sp, #28
 8015d34:	2707      	movs	r7, #7
 8015d36:	2500      	movs	r5, #0
 8015d38:	461c      	mov	r4, r3
 8015d3a:	4606      	mov	r6, r0
 8015d3c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015d40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015d42:	e9cd 7500 	strd	r7, r5, [sp]
 8015d46:	3204      	adds	r2, #4
 8015d48:	f7fe ffc8 	bl	8014cdc <uxr_prepare_stream_to_write_submessage>
 8015d4c:	f080 0201 	eor.w	r2, r0, #1
 8015d50:	b2d2      	uxtb	r2, r2
 8015d52:	75a2      	strb	r2, [r4, #22]
 8015d54:	b112      	cbz	r2, 8015d5c <uxr_prepare_output_stream+0x2c>
 8015d56:	4628      	mov	r0, r5
 8015d58:	b007      	add	sp, #28
 8015d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d5c:	aa05      	add	r2, sp, #20
 8015d5e:	9902      	ldr	r1, [sp, #8]
 8015d60:	4630      	mov	r0, r6
 8015d62:	f7ff f8f7 	bl	8014f54 <uxr_init_base_object_request>
 8015d66:	a905      	add	r1, sp, #20
 8015d68:	4605      	mov	r5, r0
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f000 ff9c 	bl	8016ca8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015d70:	69a6      	ldr	r6, [r4, #24]
 8015d72:	69e7      	ldr	r7, [r4, #28]
 8015d74:	4620      	mov	r0, r4
 8015d76:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015d7a:	1a52      	subs	r2, r2, r1
 8015d7c:	f7fd fc24 	bl	80135c8 <ucdr_init_buffer>
 8015d80:	4620      	mov	r0, r4
 8015d82:	463a      	mov	r2, r7
 8015d84:	4631      	mov	r1, r6
 8015d86:	f7fd fbf3 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	b007      	add	sp, #28
 8015d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d90 <uxr_prepare_output_stream_fragmented>:
 8015d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d94:	b091      	sub	sp, #68	@ 0x44
 8015d96:	4605      	mov	r5, r0
 8015d98:	3008      	adds	r0, #8
 8015d9a:	461e      	mov	r6, r3
 8015d9c:	9105      	str	r1, [sp, #20]
 8015d9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015da2:	9204      	str	r2, [sp, #16]
 8015da4:	f7ff fe8a 	bl	8015abc <uxr_get_output_reliable_stream>
 8015da8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	f000 8093 	beq.w	8015ed8 <uxr_prepare_output_stream_fragmented+0x148>
 8015db2:	4604      	mov	r4, r0
 8015db4:	2800      	cmp	r0, #0
 8015db6:	f000 808f 	beq.w	8015ed8 <uxr_prepare_output_stream_fragmented+0x148>
 8015dba:	f005 ff3f 	bl	801bc3c <get_available_free_slots>
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	f000 8085 	beq.w	8015ece <uxr_prepare_output_stream_fragmented+0x13e>
 8015dc4:	8923      	ldrh	r3, [r4, #8]
 8015dc6:	89e7      	ldrh	r7, [r4, #14]
 8015dc8:	6862      	ldr	r2, [r4, #4]
 8015dca:	fbb7 f9f3 	udiv	r9, r7, r3
 8015dce:	fbb2 f2f3 	udiv	r2, r2, r3
 8015dd2:	fb03 7919 	mls	r9, r3, r9, r7
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	f1a2 0b04 	sub.w	fp, r2, #4
 8015ddc:	9203      	str	r2, [sp, #12]
 8015dde:	fa1f f989 	uxth.w	r9, r9
 8015de2:	fb02 f909 	mul.w	r9, r2, r9
 8015de6:	f109 0904 	add.w	r9, r9, #4
 8015dea:	4499      	add	r9, r3
 8015dec:	7b23      	ldrb	r3, [r4, #12]
 8015dee:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015df2:	4543      	cmp	r3, r8
 8015df4:	d37c      	bcc.n	8015ef0 <uxr_prepare_output_stream_fragmented+0x160>
 8015df6:	f1ab 0a04 	sub.w	sl, fp, #4
 8015dfa:	465a      	mov	r2, fp
 8015dfc:	4649      	mov	r1, r9
 8015dfe:	a808      	add	r0, sp, #32
 8015e00:	ebaa 0a03 	sub.w	sl, sl, r3
 8015e04:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015e06:	f8cd 8000 	str.w	r8, [sp]
 8015e0a:	3308      	adds	r3, #8
 8015e0c:	fa1f fa8a 	uxth.w	sl, sl
 8015e10:	9302      	str	r3, [sp, #8]
 8015e12:	2300      	movs	r3, #0
 8015e14:	f7fd fbc6 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 8015e18:	9b02      	ldr	r3, [sp, #8]
 8015e1a:	4652      	mov	r2, sl
 8015e1c:	210d      	movs	r1, #13
 8015e1e:	455b      	cmp	r3, fp
 8015e20:	bf34      	ite	cc
 8015e22:	2302      	movcc	r3, #2
 8015e24:	2300      	movcs	r3, #0
 8015e26:	a808      	add	r0, sp, #32
 8015e28:	f7ff fe80 	bl	8015b2c <uxr_buffer_submessage_header>
 8015e2c:	8921      	ldrh	r1, [r4, #8]
 8015e2e:	6863      	ldr	r3, [r4, #4]
 8015e30:	4638      	mov	r0, r7
 8015e32:	fbb7 f2f1 	udiv	r2, r7, r1
 8015e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e3a:	fb01 7212 	mls	r2, r1, r2, r7
 8015e3e:	2101      	movs	r1, #1
 8015e40:	b292      	uxth	r2, r2
 8015e42:	fb02 f303 	mul.w	r3, r2, r3
 8015e46:	6822      	ldr	r2, [r4, #0]
 8015e48:	f842 b003 	str.w	fp, [r2, r3]
 8015e4c:	f005 ff18 	bl	801bc80 <uxr_seq_num_add>
 8015e50:	9b03      	ldr	r3, [sp, #12]
 8015e52:	f108 0104 	add.w	r1, r8, #4
 8015e56:	4607      	mov	r7, r0
 8015e58:	f1a3 0208 	sub.w	r2, r3, #8
 8015e5c:	4630      	mov	r0, r6
 8015e5e:	4449      	add	r1, r9
 8015e60:	eba2 0208 	sub.w	r2, r2, r8
 8015e64:	f7fd fbb0 	bl	80135c8 <ucdr_init_buffer>
 8015e68:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015e6a:	2107      	movs	r1, #7
 8015e6c:	81e7      	strh	r7, [r4, #14]
 8015e6e:	1d1a      	adds	r2, r3, #4
 8015e70:	2300      	movs	r3, #0
 8015e72:	4630      	mov	r0, r6
 8015e74:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015e78:	bf28      	it	cs
 8015e7a:	461a      	movcs	r2, r3
 8015e7c:	b292      	uxth	r2, r2
 8015e7e:	f7ff fe55 	bl	8015b2c <uxr_buffer_submessage_header>
 8015e82:	aa07      	add	r2, sp, #28
 8015e84:	9904      	ldr	r1, [sp, #16]
 8015e86:	4628      	mov	r0, r5
 8015e88:	f7ff f864 	bl	8014f54 <uxr_init_base_object_request>
 8015e8c:	4604      	mov	r4, r0
 8015e8e:	b320      	cbz	r0, 8015eda <uxr_prepare_output_stream_fragmented+0x14a>
 8015e90:	a907      	add	r1, sp, #28
 8015e92:	4630      	mov	r0, r6
 8015e94:	f000 ff08 	bl	8016ca8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015e98:	4630      	mov	r0, r6
 8015e9a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015e9e:	1a52      	subs	r2, r2, r1
 8015ea0:	f7fd fb92 	bl	80135c8 <ucdr_init_buffer>
 8015ea4:	9b05      	ldr	r3, [sp, #20]
 8015ea6:	9a02      	ldr	r2, [sp, #8]
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015eae:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015eb0:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8015eb4:	462a      	mov	r2, r5
 8015eb6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8015eba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015ebc:	4918      	ldr	r1, [pc, #96]	@ (8015f20 <uxr_prepare_output_stream_fragmented+0x190>)
 8015ebe:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015ec2:	f7fd fb55 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	b011      	add	sp, #68	@ 0x44
 8015eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ece:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015ed4:	4798      	blx	r3
 8015ed6:	b920      	cbnz	r0, 8015ee2 <uxr_prepare_output_stream_fragmented+0x152>
 8015ed8:	2400      	movs	r4, #0
 8015eda:	4620      	mov	r0, r4
 8015edc:	b011      	add	sp, #68	@ 0x44
 8015ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ee2:	4620      	mov	r0, r4
 8015ee4:	f005 feaa 	bl	801bc3c <get_available_free_slots>
 8015ee8:	2800      	cmp	r0, #0
 8015eea:	f47f af6b 	bne.w	8015dc4 <uxr_prepare_output_stream_fragmented+0x34>
 8015eee:	e7f3      	b.n	8015ed8 <uxr_prepare_output_stream_fragmented+0x148>
 8015ef0:	4638      	mov	r0, r7
 8015ef2:	2101      	movs	r1, #1
 8015ef4:	f005 fec4 	bl	801bc80 <uxr_seq_num_add>
 8015ef8:	8922      	ldrh	r2, [r4, #8]
 8015efa:	6863      	ldr	r3, [r4, #4]
 8015efc:	4607      	mov	r7, r0
 8015efe:	fbb3 f9f2 	udiv	r9, r3, r2
 8015f02:	fbb0 f3f2 	udiv	r3, r0, r2
 8015f06:	fb02 0313 	mls	r3, r2, r3, r0
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	fb03 f909 	mul.w	r9, r3, r9
 8015f10:	6823      	ldr	r3, [r4, #0]
 8015f12:	f109 0904 	add.w	r9, r9, #4
 8015f16:	4499      	add	r9, r3
 8015f18:	7b23      	ldrb	r3, [r4, #12]
 8015f1a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015f1e:	e76a      	b.n	8015df6 <uxr_prepare_output_stream_fragmented+0x66>
 8015f20:	08015c1d 	.word	0x08015c1d

08015f24 <uxr_serialize_message_header>:
 8015f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f26:	4616      	mov	r6, r2
 8015f28:	b083      	sub	sp, #12
 8015f2a:	4604      	mov	r4, r0
 8015f2c:	460d      	mov	r5, r1
 8015f2e:	9301      	str	r3, [sp, #4]
 8015f30:	9f08      	ldr	r7, [sp, #32]
 8015f32:	f7fc f867 	bl	8012004 <ucdr_serialize_uint8_t>
 8015f36:	4631      	mov	r1, r6
 8015f38:	4620      	mov	r0, r4
 8015f3a:	f7fc f863 	bl	8012004 <ucdr_serialize_uint8_t>
 8015f3e:	9a01      	ldr	r2, [sp, #4]
 8015f40:	2101      	movs	r1, #1
 8015f42:	4620      	mov	r0, r4
 8015f44:	f7fc f90a 	bl	801215c <ucdr_serialize_endian_uint16_t>
 8015f48:	062b      	lsls	r3, r5, #24
 8015f4a:	d501      	bpl.n	8015f50 <uxr_serialize_message_header+0x2c>
 8015f4c:	b003      	add	sp, #12
 8015f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f50:	2204      	movs	r2, #4
 8015f52:	4639      	mov	r1, r7
 8015f54:	4620      	mov	r0, r4
 8015f56:	b003      	add	sp, #12
 8015f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f5c:	f7fb beb0 	b.w	8011cc0 <ucdr_serialize_array_uint8_t>

08015f60 <uxr_deserialize_message_header>:
 8015f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f62:	4616      	mov	r6, r2
 8015f64:	b083      	sub	sp, #12
 8015f66:	4604      	mov	r4, r0
 8015f68:	460d      	mov	r5, r1
 8015f6a:	9301      	str	r3, [sp, #4]
 8015f6c:	9f08      	ldr	r7, [sp, #32]
 8015f6e:	f7fc f85f 	bl	8012030 <ucdr_deserialize_uint8_t>
 8015f72:	4631      	mov	r1, r6
 8015f74:	4620      	mov	r0, r4
 8015f76:	f7fc f85b 	bl	8012030 <ucdr_deserialize_uint8_t>
 8015f7a:	9a01      	ldr	r2, [sp, #4]
 8015f7c:	2101      	movs	r1, #1
 8015f7e:	4620      	mov	r0, r4
 8015f80:	f7fc f9e0 	bl	8012344 <ucdr_deserialize_endian_uint16_t>
 8015f84:	f995 3000 	ldrsb.w	r3, [r5]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	da01      	bge.n	8015f90 <uxr_deserialize_message_header+0x30>
 8015f8c:	b003      	add	sp, #12
 8015f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f90:	2204      	movs	r2, #4
 8015f92:	4639      	mov	r1, r7
 8015f94:	4620      	mov	r0, r4
 8015f96:	b003      	add	sp, #12
 8015f98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f9c:	f7fb bef4 	b.w	8011d88 <ucdr_deserialize_array_uint8_t>

08015fa0 <uxr_serialize_submessage_header>:
 8015fa0:	b530      	push	{r4, r5, lr}
 8015fa2:	4615      	mov	r5, r2
 8015fa4:	b083      	sub	sp, #12
 8015fa6:	4604      	mov	r4, r0
 8015fa8:	9301      	str	r3, [sp, #4]
 8015faa:	f7fc f82b 	bl	8012004 <ucdr_serialize_uint8_t>
 8015fae:	4629      	mov	r1, r5
 8015fb0:	4620      	mov	r0, r4
 8015fb2:	f7fc f827 	bl	8012004 <ucdr_serialize_uint8_t>
 8015fb6:	9a01      	ldr	r2, [sp, #4]
 8015fb8:	2101      	movs	r1, #1
 8015fba:	4620      	mov	r0, r4
 8015fbc:	b003      	add	sp, #12
 8015fbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fc2:	f7fc b8cb 	b.w	801215c <ucdr_serialize_endian_uint16_t>
 8015fc6:	bf00      	nop

08015fc8 <uxr_deserialize_submessage_header>:
 8015fc8:	b530      	push	{r4, r5, lr}
 8015fca:	4615      	mov	r5, r2
 8015fcc:	b083      	sub	sp, #12
 8015fce:	4604      	mov	r4, r0
 8015fd0:	9301      	str	r3, [sp, #4]
 8015fd2:	f7fc f82d 	bl	8012030 <ucdr_deserialize_uint8_t>
 8015fd6:	4629      	mov	r1, r5
 8015fd8:	4620      	mov	r0, r4
 8015fda:	f7fc f829 	bl	8012030 <ucdr_deserialize_uint8_t>
 8015fde:	9a01      	ldr	r2, [sp, #4]
 8015fe0:	2101      	movs	r1, #1
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	b003      	add	sp, #12
 8015fe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fea:	f7fc b9ab 	b.w	8012344 <ucdr_deserialize_endian_uint16_t>
 8015fee:	bf00      	nop

08015ff0 <uxr_serialize_CLIENT_Representation>:
 8015ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ff4:	2204      	movs	r2, #4
 8015ff6:	460e      	mov	r6, r1
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	f7fb fe61 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8015ffe:	4607      	mov	r7, r0
 8016000:	2202      	movs	r2, #2
 8016002:	1d31      	adds	r1, r6, #4
 8016004:	4628      	mov	r0, r5
 8016006:	f7fb fe5b 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 801600a:	4038      	ands	r0, r7
 801600c:	2202      	movs	r2, #2
 801600e:	1db1      	adds	r1, r6, #6
 8016010:	b2c7      	uxtb	r7, r0
 8016012:	4628      	mov	r0, r5
 8016014:	f7fb fe54 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016018:	2204      	movs	r2, #4
 801601a:	4007      	ands	r7, r0
 801601c:	f106 0108 	add.w	r1, r6, #8
 8016020:	4628      	mov	r0, r5
 8016022:	f7fb fe4d 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016026:	4007      	ands	r7, r0
 8016028:	7b31      	ldrb	r1, [r6, #12]
 801602a:	4628      	mov	r0, r5
 801602c:	f7fb ffea 	bl	8012004 <ucdr_serialize_uint8_t>
 8016030:	7b71      	ldrb	r1, [r6, #13]
 8016032:	4007      	ands	r7, r0
 8016034:	4628      	mov	r0, r5
 8016036:	f7fb ffb7 	bl	8011fa8 <ucdr_serialize_bool>
 801603a:	7b73      	ldrb	r3, [r6, #13]
 801603c:	ea07 0800 	and.w	r8, r7, r0
 8016040:	b93b      	cbnz	r3, 8016052 <uxr_serialize_CLIENT_Representation+0x62>
 8016042:	8bb1      	ldrh	r1, [r6, #28]
 8016044:	4628      	mov	r0, r5
 8016046:	f7fc f809 	bl	801205c <ucdr_serialize_uint16_t>
 801604a:	ea08 0000 	and.w	r0, r8, r0
 801604e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016052:	6931      	ldr	r1, [r6, #16]
 8016054:	4628      	mov	r0, r5
 8016056:	f7fc f9eb 	bl	8012430 <ucdr_serialize_uint32_t>
 801605a:	6933      	ldr	r3, [r6, #16]
 801605c:	b1e3      	cbz	r3, 8016098 <uxr_serialize_CLIENT_Representation+0xa8>
 801605e:	b1c0      	cbz	r0, 8016092 <uxr_serialize_CLIENT_Representation+0xa2>
 8016060:	4637      	mov	r7, r6
 8016062:	f04f 0900 	mov.w	r9, #0
 8016066:	e000      	b.n	801606a <uxr_serialize_CLIENT_Representation+0x7a>
 8016068:	b19c      	cbz	r4, 8016092 <uxr_serialize_CLIENT_Representation+0xa2>
 801606a:	6979      	ldr	r1, [r7, #20]
 801606c:	4628      	mov	r0, r5
 801606e:	f005 f8a5 	bl	801b1bc <ucdr_serialize_string>
 8016072:	69b9      	ldr	r1, [r7, #24]
 8016074:	4604      	mov	r4, r0
 8016076:	4628      	mov	r0, r5
 8016078:	f005 f8a0 	bl	801b1bc <ucdr_serialize_string>
 801607c:	f109 0901 	add.w	r9, r9, #1
 8016080:	6933      	ldr	r3, [r6, #16]
 8016082:	4004      	ands	r4, r0
 8016084:	3708      	adds	r7, #8
 8016086:	4599      	cmp	r9, r3
 8016088:	b2e4      	uxtb	r4, r4
 801608a:	d3ed      	bcc.n	8016068 <uxr_serialize_CLIENT_Representation+0x78>
 801608c:	ea08 0804 	and.w	r8, r8, r4
 8016090:	e7d7      	b.n	8016042 <uxr_serialize_CLIENT_Representation+0x52>
 8016092:	f04f 0800 	mov.w	r8, #0
 8016096:	e7d4      	b.n	8016042 <uxr_serialize_CLIENT_Representation+0x52>
 8016098:	ea08 0800 	and.w	r8, r8, r0
 801609c:	e7d1      	b.n	8016042 <uxr_serialize_CLIENT_Representation+0x52>
 801609e:	bf00      	nop

080160a0 <uxr_deserialize_CLIENT_Representation>:
 80160a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160a4:	2204      	movs	r2, #4
 80160a6:	460c      	mov	r4, r1
 80160a8:	4605      	mov	r5, r0
 80160aa:	f7fb fe6d 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 80160ae:	4607      	mov	r7, r0
 80160b0:	2202      	movs	r2, #2
 80160b2:	1d21      	adds	r1, r4, #4
 80160b4:	4628      	mov	r0, r5
 80160b6:	f7fb fe67 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 80160ba:	4038      	ands	r0, r7
 80160bc:	2202      	movs	r2, #2
 80160be:	1da1      	adds	r1, r4, #6
 80160c0:	b2c6      	uxtb	r6, r0
 80160c2:	4628      	mov	r0, r5
 80160c4:	f7fb fe60 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 80160c8:	2204      	movs	r2, #4
 80160ca:	4006      	ands	r6, r0
 80160cc:	f104 0108 	add.w	r1, r4, #8
 80160d0:	4628      	mov	r0, r5
 80160d2:	f7fb fe59 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 80160d6:	4006      	ands	r6, r0
 80160d8:	f104 010c 	add.w	r1, r4, #12
 80160dc:	4628      	mov	r0, r5
 80160de:	f7fb ffa7 	bl	8012030 <ucdr_deserialize_uint8_t>
 80160e2:	f104 010d 	add.w	r1, r4, #13
 80160e6:	ea06 0700 	and.w	r7, r6, r0
 80160ea:	4628      	mov	r0, r5
 80160ec:	f7fb ff72 	bl	8011fd4 <ucdr_deserialize_bool>
 80160f0:	7b63      	ldrb	r3, [r4, #13]
 80160f2:	4007      	ands	r7, r0
 80160f4:	b93b      	cbnz	r3, 8016106 <uxr_deserialize_CLIENT_Representation+0x66>
 80160f6:	f104 011c 	add.w	r1, r4, #28
 80160fa:	4628      	mov	r0, r5
 80160fc:	f7fc f8ae 	bl	801225c <ucdr_deserialize_uint16_t>
 8016100:	4038      	ands	r0, r7
 8016102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016106:	f104 0110 	add.w	r1, r4, #16
 801610a:	4628      	mov	r0, r5
 801610c:	f7fc fac0 	bl	8012690 <ucdr_deserialize_uint32_t>
 8016110:	6923      	ldr	r3, [r4, #16]
 8016112:	2b01      	cmp	r3, #1
 8016114:	d903      	bls.n	801611e <uxr_deserialize_CLIENT_Representation+0x7e>
 8016116:	2301      	movs	r3, #1
 8016118:	2700      	movs	r7, #0
 801611a:	75ab      	strb	r3, [r5, #22]
 801611c:	e7eb      	b.n	80160f6 <uxr_deserialize_CLIENT_Representation+0x56>
 801611e:	b30b      	cbz	r3, 8016164 <uxr_deserialize_CLIENT_Representation+0xc4>
 8016120:	b1f0      	cbz	r0, 8016160 <uxr_deserialize_CLIENT_Representation+0xc0>
 8016122:	46a0      	mov	r8, r4
 8016124:	f04f 0900 	mov.w	r9, #0
 8016128:	e000      	b.n	801612c <uxr_deserialize_CLIENT_Representation+0x8c>
 801612a:	b1ce      	cbz	r6, 8016160 <uxr_deserialize_CLIENT_Representation+0xc0>
 801612c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016130:	f108 0808 	add.w	r8, r8, #8
 8016134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016138:	4628      	mov	r0, r5
 801613a:	f005 f84f 	bl	801b1dc <ucdr_deserialize_string>
 801613e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016142:	4606      	mov	r6, r0
 8016144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016148:	4628      	mov	r0, r5
 801614a:	f109 0901 	add.w	r9, r9, #1
 801614e:	f005 f845 	bl	801b1dc <ucdr_deserialize_string>
 8016152:	6923      	ldr	r3, [r4, #16]
 8016154:	4006      	ands	r6, r0
 8016156:	4599      	cmp	r9, r3
 8016158:	b2f6      	uxtb	r6, r6
 801615a:	d3e6      	bcc.n	801612a <uxr_deserialize_CLIENT_Representation+0x8a>
 801615c:	4037      	ands	r7, r6
 801615e:	e7ca      	b.n	80160f6 <uxr_deserialize_CLIENT_Representation+0x56>
 8016160:	2700      	movs	r7, #0
 8016162:	e7c8      	b.n	80160f6 <uxr_deserialize_CLIENT_Representation+0x56>
 8016164:	4007      	ands	r7, r0
 8016166:	e7c6      	b.n	80160f6 <uxr_deserialize_CLIENT_Representation+0x56>

08016168 <uxr_serialize_AGENT_Representation>:
 8016168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801616c:	2204      	movs	r2, #4
 801616e:	460f      	mov	r7, r1
 8016170:	4605      	mov	r5, r0
 8016172:	f7fb fda5 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016176:	4604      	mov	r4, r0
 8016178:	2202      	movs	r2, #2
 801617a:	1d39      	adds	r1, r7, #4
 801617c:	4628      	mov	r0, r5
 801617e:	f7fb fd9f 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016182:	4020      	ands	r0, r4
 8016184:	2202      	movs	r2, #2
 8016186:	1db9      	adds	r1, r7, #6
 8016188:	b2c4      	uxtb	r4, r0
 801618a:	4628      	mov	r0, r5
 801618c:	f7fb fd98 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016190:	7a39      	ldrb	r1, [r7, #8]
 8016192:	4004      	ands	r4, r0
 8016194:	4628      	mov	r0, r5
 8016196:	f7fb ff07 	bl	8011fa8 <ucdr_serialize_bool>
 801619a:	7a3b      	ldrb	r3, [r7, #8]
 801619c:	ea00 0804 	and.w	r8, r0, r4
 80161a0:	b913      	cbnz	r3, 80161a8 <uxr_serialize_AGENT_Representation+0x40>
 80161a2:	4640      	mov	r0, r8
 80161a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161a8:	68f9      	ldr	r1, [r7, #12]
 80161aa:	4628      	mov	r0, r5
 80161ac:	f7fc f940 	bl	8012430 <ucdr_serialize_uint32_t>
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	b303      	cbz	r3, 80161f6 <uxr_serialize_AGENT_Representation+0x8e>
 80161b4:	b1d0      	cbz	r0, 80161ec <uxr_serialize_AGENT_Representation+0x84>
 80161b6:	463e      	mov	r6, r7
 80161b8:	f04f 0900 	mov.w	r9, #0
 80161bc:	e000      	b.n	80161c0 <uxr_serialize_AGENT_Representation+0x58>
 80161be:	b1ac      	cbz	r4, 80161ec <uxr_serialize_AGENT_Representation+0x84>
 80161c0:	6931      	ldr	r1, [r6, #16]
 80161c2:	4628      	mov	r0, r5
 80161c4:	f004 fffa 	bl	801b1bc <ucdr_serialize_string>
 80161c8:	6971      	ldr	r1, [r6, #20]
 80161ca:	4604      	mov	r4, r0
 80161cc:	4628      	mov	r0, r5
 80161ce:	f004 fff5 	bl	801b1bc <ucdr_serialize_string>
 80161d2:	f109 0901 	add.w	r9, r9, #1
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	4004      	ands	r4, r0
 80161da:	3608      	adds	r6, #8
 80161dc:	4599      	cmp	r9, r3
 80161de:	b2e4      	uxtb	r4, r4
 80161e0:	d3ed      	bcc.n	80161be <uxr_serialize_AGENT_Representation+0x56>
 80161e2:	ea08 0804 	and.w	r8, r8, r4
 80161e6:	4640      	mov	r0, r8
 80161e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161ec:	f04f 0800 	mov.w	r8, #0
 80161f0:	4640      	mov	r0, r8
 80161f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80161f6:	ea08 0800 	and.w	r8, r8, r0
 80161fa:	e7d2      	b.n	80161a2 <uxr_serialize_AGENT_Representation+0x3a>

080161fc <uxr_serialize_DATAWRITER_Representation>:
 80161fc:	b570      	push	{r4, r5, r6, lr}
 80161fe:	460d      	mov	r5, r1
 8016200:	7809      	ldrb	r1, [r1, #0]
 8016202:	4606      	mov	r6, r0
 8016204:	f7fb fefe 	bl	8012004 <ucdr_serialize_uint8_t>
 8016208:	4604      	mov	r4, r0
 801620a:	b130      	cbz	r0, 801621a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801620c:	782b      	ldrb	r3, [r5, #0]
 801620e:	2b02      	cmp	r3, #2
 8016210:	d00c      	beq.n	801622c <uxr_serialize_DATAWRITER_Representation+0x30>
 8016212:	2b03      	cmp	r3, #3
 8016214:	d010      	beq.n	8016238 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8016216:	2b01      	cmp	r3, #1
 8016218:	d008      	beq.n	801622c <uxr_serialize_DATAWRITER_Representation+0x30>
 801621a:	2202      	movs	r2, #2
 801621c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8016220:	4630      	mov	r0, r6
 8016222:	f7fb fd4d 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016226:	4020      	ands	r0, r4
 8016228:	b2c0      	uxtb	r0, r0
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	6869      	ldr	r1, [r5, #4]
 801622e:	4630      	mov	r0, r6
 8016230:	f004 ffc4 	bl	801b1bc <ucdr_serialize_string>
 8016234:	4604      	mov	r4, r0
 8016236:	e7f0      	b.n	801621a <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016238:	4629      	mov	r1, r5
 801623a:	4630      	mov	r0, r6
 801623c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8016240:	3104      	adds	r1, #4
 8016242:	f7fd fa61 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 8016246:	4604      	mov	r4, r0
 8016248:	e7e7      	b.n	801621a <uxr_serialize_DATAWRITER_Representation+0x1e>
 801624a:	bf00      	nop

0801624c <uxr_serialize_ObjectVariant.part.0>:
 801624c:	b570      	push	{r4, r5, r6, lr}
 801624e:	780b      	ldrb	r3, [r1, #0]
 8016250:	460c      	mov	r4, r1
 8016252:	4605      	mov	r5, r0
 8016254:	3b01      	subs	r3, #1
 8016256:	2b0d      	cmp	r3, #13
 8016258:	d854      	bhi.n	8016304 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801625a:	e8df f003 	tbb	[pc, r3]
 801625e:	0730      	.short	0x0730
 8016260:	07071b1b 	.word	0x07071b1b
 8016264:	0c530707 	.word	0x0c530707
 8016268:	494e0c0c 	.word	0x494e0c0c
 801626c:	3104      	adds	r1, #4
 801626e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016272:	f7ff bfc3 	b.w	80161fc <uxr_serialize_DATAWRITER_Representation>
 8016276:	7909      	ldrb	r1, [r1, #4]
 8016278:	f7fb fec4 	bl	8012004 <ucdr_serialize_uint8_t>
 801627c:	b1e8      	cbz	r0, 80162ba <uxr_serialize_ObjectVariant.part.0+0x6e>
 801627e:	7923      	ldrb	r3, [r4, #4]
 8016280:	2b01      	cmp	r3, #1
 8016282:	d001      	beq.n	8016288 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8016284:	2b02      	cmp	r3, #2
 8016286:	d13d      	bne.n	8016304 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8016288:	68a1      	ldr	r1, [r4, #8]
 801628a:	4628      	mov	r0, r5
 801628c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016290:	f004 bf94 	b.w	801b1bc <ucdr_serialize_string>
 8016294:	7909      	ldrb	r1, [r1, #4]
 8016296:	f7fb feb5 	bl	8012004 <ucdr_serialize_uint8_t>
 801629a:	4606      	mov	r6, r0
 801629c:	b120      	cbz	r0, 80162a8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801629e:	7923      	ldrb	r3, [r4, #4]
 80162a0:	2b02      	cmp	r3, #2
 80162a2:	d039      	beq.n	8016318 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80162a4:	2b03      	cmp	r3, #3
 80162a6:	d02f      	beq.n	8016308 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80162a8:	2202      	movs	r2, #2
 80162aa:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80162ae:	4628      	mov	r0, r5
 80162b0:	f7fb fd06 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 80162b4:	4030      	ands	r0, r6
 80162b6:	b2c0      	uxtb	r0, r0
 80162b8:	bd70      	pop	{r4, r5, r6, pc}
 80162ba:	2000      	movs	r0, #0
 80162bc:	bd70      	pop	{r4, r5, r6, pc}
 80162be:	7909      	ldrb	r1, [r1, #4]
 80162c0:	f7fb fea0 	bl	8012004 <ucdr_serialize_uint8_t>
 80162c4:	4606      	mov	r6, r0
 80162c6:	b158      	cbz	r0, 80162e0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80162c8:	7923      	ldrb	r3, [r4, #4]
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d003      	beq.n	80162d6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80162ce:	2b03      	cmp	r3, #3
 80162d0:	d028      	beq.n	8016324 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d104      	bne.n	80162e0 <uxr_serialize_ObjectVariant.part.0+0x94>
 80162d6:	68a1      	ldr	r1, [r4, #8]
 80162d8:	4628      	mov	r0, r5
 80162da:	f004 ff6f 	bl	801b1bc <ucdr_serialize_string>
 80162de:	4606      	mov	r6, r0
 80162e0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80162e4:	4628      	mov	r0, r5
 80162e6:	f7fc fbc9 	bl	8012a7c <ucdr_serialize_int16_t>
 80162ea:	4030      	ands	r0, r6
 80162ec:	b2c0      	uxtb	r0, r0
 80162ee:	bd70      	pop	{r4, r5, r6, pc}
 80162f0:	3104      	adds	r1, #4
 80162f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162f6:	f7ff be7b 	b.w	8015ff0 <uxr_serialize_CLIENT_Representation>
 80162fa:	3104      	adds	r1, #4
 80162fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016300:	f7ff bf32 	b.w	8016168 <uxr_serialize_AGENT_Representation>
 8016304:	2001      	movs	r0, #1
 8016306:	bd70      	pop	{r4, r5, r6, pc}
 8016308:	68a2      	ldr	r2, [r4, #8]
 801630a:	f104 010c 	add.w	r1, r4, #12
 801630e:	4628      	mov	r0, r5
 8016310:	f7fd f9fa 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 8016314:	4606      	mov	r6, r0
 8016316:	e7c7      	b.n	80162a8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016318:	68a1      	ldr	r1, [r4, #8]
 801631a:	4628      	mov	r0, r5
 801631c:	f004 ff4e 	bl	801b1bc <ucdr_serialize_string>
 8016320:	4606      	mov	r6, r0
 8016322:	e7c1      	b.n	80162a8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016324:	68a2      	ldr	r2, [r4, #8]
 8016326:	f104 010c 	add.w	r1, r4, #12
 801632a:	4628      	mov	r0, r5
 801632c:	f7fd f9ec 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 8016330:	4606      	mov	r6, r0
 8016332:	e7d5      	b.n	80162e0 <uxr_serialize_ObjectVariant.part.0+0x94>

08016334 <uxr_deserialize_DATAWRITER_Representation>:
 8016334:	b570      	push	{r4, r5, r6, lr}
 8016336:	4606      	mov	r6, r0
 8016338:	460d      	mov	r5, r1
 801633a:	f7fb fe79 	bl	8012030 <ucdr_deserialize_uint8_t>
 801633e:	4604      	mov	r4, r0
 8016340:	b130      	cbz	r0, 8016350 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016342:	782b      	ldrb	r3, [r5, #0]
 8016344:	2b02      	cmp	r3, #2
 8016346:	d00c      	beq.n	8016362 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016348:	2b03      	cmp	r3, #3
 801634a:	d012      	beq.n	8016372 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 801634c:	2b01      	cmp	r3, #1
 801634e:	d008      	beq.n	8016362 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016350:	2202      	movs	r2, #2
 8016352:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8016356:	4630      	mov	r0, r6
 8016358:	f7fb fd16 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801635c:	4020      	ands	r0, r4
 801635e:	b2c0      	uxtb	r0, r0
 8016360:	bd70      	pop	{r4, r5, r6, pc}
 8016362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016366:	6869      	ldr	r1, [r5, #4]
 8016368:	4630      	mov	r0, r6
 801636a:	f004 ff37 	bl	801b1dc <ucdr_deserialize_string>
 801636e:	4604      	mov	r4, r0
 8016370:	e7ee      	b.n	8016350 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016372:	1d2b      	adds	r3, r5, #4
 8016374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016378:	f105 0108 	add.w	r1, r5, #8
 801637c:	4630      	mov	r0, r6
 801637e:	f7fd f9d5 	bl	801372c <ucdr_deserialize_sequence_uint8_t>
 8016382:	4604      	mov	r4, r0
 8016384:	e7e4      	b.n	8016350 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8016386:	bf00      	nop

08016388 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016388:	b570      	push	{r4, r5, r6, lr}
 801638a:	460d      	mov	r5, r1
 801638c:	7809      	ldrb	r1, [r1, #0]
 801638e:	4606      	mov	r6, r0
 8016390:	f7fb fe0a 	bl	8011fa8 <ucdr_serialize_bool>
 8016394:	782b      	ldrb	r3, [r5, #0]
 8016396:	4604      	mov	r4, r0
 8016398:	b94b      	cbnz	r3, 80163ae <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801639a:	7a29      	ldrb	r1, [r5, #8]
 801639c:	4630      	mov	r0, r6
 801639e:	f7fb fe03 	bl	8011fa8 <ucdr_serialize_bool>
 80163a2:	7a2b      	ldrb	r3, [r5, #8]
 80163a4:	4004      	ands	r4, r0
 80163a6:	b2e4      	uxtb	r4, r4
 80163a8:	b943      	cbnz	r3, 80163bc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80163aa:	4620      	mov	r0, r4
 80163ac:	bd70      	pop	{r4, r5, r6, pc}
 80163ae:	6869      	ldr	r1, [r5, #4]
 80163b0:	4630      	mov	r0, r6
 80163b2:	f004 ff03 	bl	801b1bc <ucdr_serialize_string>
 80163b6:	4004      	ands	r4, r0
 80163b8:	b2e4      	uxtb	r4, r4
 80163ba:	e7ee      	b.n	801639a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80163bc:	68e9      	ldr	r1, [r5, #12]
 80163be:	4630      	mov	r0, r6
 80163c0:	f004 fefc 	bl	801b1bc <ucdr_serialize_string>
 80163c4:	4004      	ands	r4, r0
 80163c6:	4620      	mov	r0, r4
 80163c8:	bd70      	pop	{r4, r5, r6, pc}
 80163ca:	bf00      	nop

080163cc <uxr_serialize_OBJK_Topic_Binary>:
 80163cc:	b570      	push	{r4, r5, r6, lr}
 80163ce:	460d      	mov	r5, r1
 80163d0:	4606      	mov	r6, r0
 80163d2:	6809      	ldr	r1, [r1, #0]
 80163d4:	f004 fef2 	bl	801b1bc <ucdr_serialize_string>
 80163d8:	4604      	mov	r4, r0
 80163da:	7929      	ldrb	r1, [r5, #4]
 80163dc:	4630      	mov	r0, r6
 80163de:	f7fb fde3 	bl	8011fa8 <ucdr_serialize_bool>
 80163e2:	792b      	ldrb	r3, [r5, #4]
 80163e4:	4004      	ands	r4, r0
 80163e6:	b2e4      	uxtb	r4, r4
 80163e8:	b943      	cbnz	r3, 80163fc <uxr_serialize_OBJK_Topic_Binary+0x30>
 80163ea:	7b29      	ldrb	r1, [r5, #12]
 80163ec:	4630      	mov	r0, r6
 80163ee:	f7fb fddb 	bl	8011fa8 <ucdr_serialize_bool>
 80163f2:	7b2b      	ldrb	r3, [r5, #12]
 80163f4:	4004      	ands	r4, r0
 80163f6:	b93b      	cbnz	r3, 8016408 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80163f8:	4620      	mov	r0, r4
 80163fa:	bd70      	pop	{r4, r5, r6, pc}
 80163fc:	68a9      	ldr	r1, [r5, #8]
 80163fe:	4630      	mov	r0, r6
 8016400:	f004 fedc 	bl	801b1bc <ucdr_serialize_string>
 8016404:	4004      	ands	r4, r0
 8016406:	e7f0      	b.n	80163ea <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8016408:	6929      	ldr	r1, [r5, #16]
 801640a:	4630      	mov	r0, r6
 801640c:	f004 fed6 	bl	801b1bc <ucdr_serialize_string>
 8016410:	4004      	ands	r4, r0
 8016412:	b2e4      	uxtb	r4, r4
 8016414:	4620      	mov	r0, r4
 8016416:	bd70      	pop	{r4, r5, r6, pc}

08016418 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8016418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801641c:	460c      	mov	r4, r1
 801641e:	7809      	ldrb	r1, [r1, #0]
 8016420:	4606      	mov	r6, r0
 8016422:	f7fb fdc1 	bl	8011fa8 <ucdr_serialize_bool>
 8016426:	7823      	ldrb	r3, [r4, #0]
 8016428:	4605      	mov	r5, r0
 801642a:	b96b      	cbnz	r3, 8016448 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 801642c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8016430:	4630      	mov	r0, r6
 8016432:	f7fb fdb9 	bl	8011fa8 <ucdr_serialize_bool>
 8016436:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801643a:	4005      	ands	r5, r0
 801643c:	b2ed      	uxtb	r5, r5
 801643e:	2b00      	cmp	r3, #0
 8016440:	d169      	bne.n	8016516 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8016442:	4628      	mov	r0, r5
 8016444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016448:	6861      	ldr	r1, [r4, #4]
 801644a:	4630      	mov	r0, r6
 801644c:	f7fb fff0 	bl	8012430 <ucdr_serialize_uint32_t>
 8016450:	6863      	ldr	r3, [r4, #4]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d06b      	beq.n	801652e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8016456:	2800      	cmp	r0, #0
 8016458:	d067      	beq.n	801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801645a:	68a1      	ldr	r1, [r4, #8]
 801645c:	4630      	mov	r0, r6
 801645e:	f004 fead 	bl	801b1bc <ucdr_serialize_string>
 8016462:	6863      	ldr	r3, [r4, #4]
 8016464:	2b01      	cmp	r3, #1
 8016466:	d953      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016468:	2800      	cmp	r0, #0
 801646a:	d05e      	beq.n	801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801646c:	68e1      	ldr	r1, [r4, #12]
 801646e:	4630      	mov	r0, r6
 8016470:	f004 fea4 	bl	801b1bc <ucdr_serialize_string>
 8016474:	6863      	ldr	r3, [r4, #4]
 8016476:	2b02      	cmp	r3, #2
 8016478:	d94a      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801647a:	2800      	cmp	r0, #0
 801647c:	d055      	beq.n	801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801647e:	6921      	ldr	r1, [r4, #16]
 8016480:	4630      	mov	r0, r6
 8016482:	f004 fe9b 	bl	801b1bc <ucdr_serialize_string>
 8016486:	6863      	ldr	r3, [r4, #4]
 8016488:	2b03      	cmp	r3, #3
 801648a:	d941      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801648c:	2800      	cmp	r0, #0
 801648e:	d04c      	beq.n	801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016490:	6961      	ldr	r1, [r4, #20]
 8016492:	4630      	mov	r0, r6
 8016494:	f004 fe92 	bl	801b1bc <ucdr_serialize_string>
 8016498:	6863      	ldr	r3, [r4, #4]
 801649a:	2b04      	cmp	r3, #4
 801649c:	d938      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801649e:	2800      	cmp	r0, #0
 80164a0:	d043      	beq.n	801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164a2:	69a1      	ldr	r1, [r4, #24]
 80164a4:	4630      	mov	r0, r6
 80164a6:	f004 fe89 	bl	801b1bc <ucdr_serialize_string>
 80164aa:	6863      	ldr	r3, [r4, #4]
 80164ac:	2b05      	cmp	r3, #5
 80164ae:	d92f      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164b0:	2800      	cmp	r0, #0
 80164b2:	d03a      	beq.n	801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164b4:	69e1      	ldr	r1, [r4, #28]
 80164b6:	4630      	mov	r0, r6
 80164b8:	f004 fe80 	bl	801b1bc <ucdr_serialize_string>
 80164bc:	6863      	ldr	r3, [r4, #4]
 80164be:	2b06      	cmp	r3, #6
 80164c0:	d926      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164c2:	b390      	cbz	r0, 801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164c4:	6a21      	ldr	r1, [r4, #32]
 80164c6:	4630      	mov	r0, r6
 80164c8:	f004 fe78 	bl	801b1bc <ucdr_serialize_string>
 80164cc:	6863      	ldr	r3, [r4, #4]
 80164ce:	2b07      	cmp	r3, #7
 80164d0:	d91e      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164d2:	b350      	cbz	r0, 801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80164d6:	4630      	mov	r0, r6
 80164d8:	f004 fe70 	bl	801b1bc <ucdr_serialize_string>
 80164dc:	6863      	ldr	r3, [r4, #4]
 80164de:	2b08      	cmp	r3, #8
 80164e0:	d916      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164e2:	b310      	cbz	r0, 801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164e4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80164e6:	4630      	mov	r0, r6
 80164e8:	f004 fe68 	bl	801b1bc <ucdr_serialize_string>
 80164ec:	6863      	ldr	r3, [r4, #4]
 80164ee:	2b09      	cmp	r3, #9
 80164f0:	d90e      	bls.n	8016510 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80164f2:	b1d0      	cbz	r0, 801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164f4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80164f8:	2709      	movs	r7, #9
 80164fa:	e000      	b.n	80164fe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80164fc:	b1a8      	cbz	r0, 801652a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80164fe:	f858 1b04 	ldr.w	r1, [r8], #4
 8016502:	4630      	mov	r0, r6
 8016504:	f004 fe5a 	bl	801b1bc <ucdr_serialize_string>
 8016508:	3701      	adds	r7, #1
 801650a:	6862      	ldr	r2, [r4, #4]
 801650c:	4297      	cmp	r7, r2
 801650e:	d3f5      	bcc.n	80164fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8016510:	4005      	ands	r5, r0
 8016512:	b2ed      	uxtb	r5, r5
 8016514:	e78a      	b.n	801642c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8016516:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016518:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801651c:	4630      	mov	r0, r6
 801651e:	f7fd f8f3 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 8016522:	4005      	ands	r5, r0
 8016524:	4628      	mov	r0, r5
 8016526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801652a:	2500      	movs	r5, #0
 801652c:	e77e      	b.n	801642c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801652e:	4028      	ands	r0, r5
 8016530:	b2c5      	uxtb	r5, r0
 8016532:	e77b      	b.n	801642c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08016534 <uxr_serialize_OBJK_Publisher_Binary>:
 8016534:	b570      	push	{r4, r5, r6, lr}
 8016536:	460d      	mov	r5, r1
 8016538:	7809      	ldrb	r1, [r1, #0]
 801653a:	4606      	mov	r6, r0
 801653c:	f7fb fd34 	bl	8011fa8 <ucdr_serialize_bool>
 8016540:	782b      	ldrb	r3, [r5, #0]
 8016542:	4604      	mov	r4, r0
 8016544:	b94b      	cbnz	r3, 801655a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8016546:	7a29      	ldrb	r1, [r5, #8]
 8016548:	4630      	mov	r0, r6
 801654a:	f7fb fd2d 	bl	8011fa8 <ucdr_serialize_bool>
 801654e:	7a2b      	ldrb	r3, [r5, #8]
 8016550:	4004      	ands	r4, r0
 8016552:	b2e4      	uxtb	r4, r4
 8016554:	b943      	cbnz	r3, 8016568 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8016556:	4620      	mov	r0, r4
 8016558:	bd70      	pop	{r4, r5, r6, pc}
 801655a:	6869      	ldr	r1, [r5, #4]
 801655c:	4630      	mov	r0, r6
 801655e:	f004 fe2d 	bl	801b1bc <ucdr_serialize_string>
 8016562:	4004      	ands	r4, r0
 8016564:	b2e4      	uxtb	r4, r4
 8016566:	e7ee      	b.n	8016546 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8016568:	f105 010c 	add.w	r1, r5, #12
 801656c:	4630      	mov	r0, r6
 801656e:	f7ff ff53 	bl	8016418 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8016572:	4004      	ands	r4, r0
 8016574:	4620      	mov	r0, r4
 8016576:	bd70      	pop	{r4, r5, r6, pc}

08016578 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8016578:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 801657c:	4688      	mov	r8, r1
 801657e:	4681      	mov	r9, r0
 8016580:	8809      	ldrh	r1, [r1, #0]
 8016582:	f7fb fd6b 	bl	801205c <ucdr_serialize_uint16_t>
 8016586:	4606      	mov	r6, r0
 8016588:	f898 1002 	ldrb.w	r1, [r8, #2]
 801658c:	4648      	mov	r0, r9
 801658e:	f7fb fd0b 	bl	8011fa8 <ucdr_serialize_bool>
 8016592:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016596:	4006      	ands	r6, r0
 8016598:	b2f5      	uxtb	r5, r6
 801659a:	b9eb      	cbnz	r3, 80165d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 801659c:	f898 1006 	ldrb.w	r1, [r8, #6]
 80165a0:	4648      	mov	r0, r9
 80165a2:	f7fb fd01 	bl	8011fa8 <ucdr_serialize_bool>
 80165a6:	f898 3006 	ldrb.w	r3, [r8, #6]
 80165aa:	4005      	ands	r5, r0
 80165ac:	bb7b      	cbnz	r3, 801660e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80165ae:	f898 100c 	ldrb.w	r1, [r8, #12]
 80165b2:	4648      	mov	r0, r9
 80165b4:	f7fb fcf8 	bl	8011fa8 <ucdr_serialize_bool>
 80165b8:	f898 300c 	ldrb.w	r3, [r8, #12]
 80165bc:	4005      	ands	r5, r0
 80165be:	b9f3      	cbnz	r3, 80165fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80165c0:	f898 1014 	ldrb.w	r1, [r8, #20]
 80165c4:	4648      	mov	r0, r9
 80165c6:	f7fb fcef 	bl	8011fa8 <ucdr_serialize_bool>
 80165ca:	f898 3014 	ldrb.w	r3, [r8, #20]
 80165ce:	4005      	ands	r5, r0
 80165d0:	b94b      	cbnz	r3, 80165e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80165d2:	4628      	mov	r0, r5
 80165d4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80165d8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80165dc:	4648      	mov	r0, r9
 80165de:	f7fb fd3d 	bl	801205c <ucdr_serialize_uint16_t>
 80165e2:	4005      	ands	r5, r0
 80165e4:	e7da      	b.n	801659c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80165e6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80165ea:	f108 011c 	add.w	r1, r8, #28
 80165ee:	4648      	mov	r0, r9
 80165f0:	f7fd f88a 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 80165f4:	4028      	ands	r0, r5
 80165f6:	b2c5      	uxtb	r5, r0
 80165f8:	4628      	mov	r0, r5
 80165fa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80165fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016602:	4648      	mov	r0, r9
 8016604:	f7fb ff14 	bl	8012430 <ucdr_serialize_uint32_t>
 8016608:	4028      	ands	r0, r5
 801660a:	b2c5      	uxtb	r5, r0
 801660c:	e7d8      	b.n	80165c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801660e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016612:	4648      	mov	r0, r9
 8016614:	f7fb ff0c 	bl	8012430 <ucdr_serialize_uint32_t>
 8016618:	4028      	ands	r0, r5
 801661a:	b2c5      	uxtb	r5, r0
 801661c:	e7c7      	b.n	80165ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801661e:	bf00      	nop

08016620 <uxr_serialize_OBJK_DataWriter_Binary>:
 8016620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016622:	2202      	movs	r2, #2
 8016624:	460d      	mov	r5, r1
 8016626:	4606      	mov	r6, r0
 8016628:	f7fb fb4a 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 801662c:	4604      	mov	r4, r0
 801662e:	78a9      	ldrb	r1, [r5, #2]
 8016630:	4630      	mov	r0, r6
 8016632:	f7fb fcb9 	bl	8011fa8 <ucdr_serialize_bool>
 8016636:	78ab      	ldrb	r3, [r5, #2]
 8016638:	4004      	ands	r4, r0
 801663a:	b2e4      	uxtb	r4, r4
 801663c:	b90b      	cbnz	r3, 8016642 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801663e:	4620      	mov	r0, r4
 8016640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016642:	f105 0108 	add.w	r1, r5, #8
 8016646:	4630      	mov	r0, r6
 8016648:	f7ff ff96 	bl	8016578 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801664c:	4607      	mov	r7, r0
 801664e:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8016652:	4630      	mov	r0, r6
 8016654:	f7fb fca8 	bl	8011fa8 <ucdr_serialize_bool>
 8016658:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801665c:	4038      	ands	r0, r7
 801665e:	b2c7      	uxtb	r7, r0
 8016660:	b913      	cbnz	r3, 8016668 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8016662:	403c      	ands	r4, r7
 8016664:	4620      	mov	r0, r4
 8016666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016668:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801666c:	4630      	mov	r0, r6
 801666e:	f7fc f935 	bl	80128dc <ucdr_serialize_uint64_t>
 8016672:	4007      	ands	r7, r0
 8016674:	e7f5      	b.n	8016662 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8016676:	bf00      	nop

08016678 <uxr_deserialize_ObjectVariant>:
 8016678:	b570      	push	{r4, r5, r6, lr}
 801667a:	4605      	mov	r5, r0
 801667c:	460e      	mov	r6, r1
 801667e:	f7fb fcd7 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016682:	b168      	cbz	r0, 80166a0 <uxr_deserialize_ObjectVariant+0x28>
 8016684:	7833      	ldrb	r3, [r6, #0]
 8016686:	4604      	mov	r4, r0
 8016688:	3b01      	subs	r3, #1
 801668a:	2b0d      	cmp	r3, #13
 801668c:	d809      	bhi.n	80166a2 <uxr_deserialize_ObjectVariant+0x2a>
 801668e:	e8df f003 	tbb	[pc, r3]
 8016692:	0a41      	.short	0x0a41
 8016694:	0a0a2323 	.word	0x0a0a2323
 8016698:	10080a0a 	.word	0x10080a0a
 801669c:	565c1010 	.word	0x565c1010
 80166a0:	2400      	movs	r4, #0
 80166a2:	4620      	mov	r0, r4
 80166a4:	bd70      	pop	{r4, r5, r6, pc}
 80166a6:	1d31      	adds	r1, r6, #4
 80166a8:	4628      	mov	r0, r5
 80166aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166ae:	f7ff be41 	b.w	8016334 <uxr_deserialize_DATAWRITER_Representation>
 80166b2:	1d31      	adds	r1, r6, #4
 80166b4:	4628      	mov	r0, r5
 80166b6:	f7fb fcbb 	bl	8012030 <ucdr_deserialize_uint8_t>
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d0f0      	beq.n	80166a0 <uxr_deserialize_ObjectVariant+0x28>
 80166be:	7933      	ldrb	r3, [r6, #4]
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d001      	beq.n	80166c8 <uxr_deserialize_ObjectVariant+0x50>
 80166c4:	2b02      	cmp	r3, #2
 80166c6:	d1ec      	bne.n	80166a2 <uxr_deserialize_ObjectVariant+0x2a>
 80166c8:	68b1      	ldr	r1, [r6, #8]
 80166ca:	4628      	mov	r0, r5
 80166cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166d4:	f004 bd82 	b.w	801b1dc <ucdr_deserialize_string>
 80166d8:	1d31      	adds	r1, r6, #4
 80166da:	4628      	mov	r0, r5
 80166dc:	f7fb fca8 	bl	8012030 <ucdr_deserialize_uint8_t>
 80166e0:	4604      	mov	r4, r0
 80166e2:	b170      	cbz	r0, 8016702 <uxr_deserialize_ObjectVariant+0x8a>
 80166e4:	7933      	ldrb	r3, [r6, #4]
 80166e6:	2b02      	cmp	r3, #2
 80166e8:	d04c      	beq.n	8016784 <uxr_deserialize_ObjectVariant+0x10c>
 80166ea:	2b03      	cmp	r3, #3
 80166ec:	d109      	bne.n	8016702 <uxr_deserialize_ObjectVariant+0x8a>
 80166ee:	f106 0308 	add.w	r3, r6, #8
 80166f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80166f6:	f106 010c 	add.w	r1, r6, #12
 80166fa:	4628      	mov	r0, r5
 80166fc:	f7fd f816 	bl	801372c <ucdr_deserialize_sequence_uint8_t>
 8016700:	4604      	mov	r4, r0
 8016702:	2202      	movs	r2, #2
 8016704:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8016708:	4628      	mov	r0, r5
 801670a:	f7fb fb3d 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801670e:	4020      	ands	r0, r4
 8016710:	b2c4      	uxtb	r4, r0
 8016712:	e7c6      	b.n	80166a2 <uxr_deserialize_ObjectVariant+0x2a>
 8016714:	1d31      	adds	r1, r6, #4
 8016716:	4628      	mov	r0, r5
 8016718:	f7fb fc8a 	bl	8012030 <ucdr_deserialize_uint8_t>
 801671c:	4604      	mov	r4, r0
 801671e:	b130      	cbz	r0, 801672e <uxr_deserialize_ObjectVariant+0xb6>
 8016720:	7933      	ldrb	r3, [r6, #4]
 8016722:	2b02      	cmp	r3, #2
 8016724:	d036      	beq.n	8016794 <uxr_deserialize_ObjectVariant+0x11c>
 8016726:	2b03      	cmp	r3, #3
 8016728:	d03c      	beq.n	80167a4 <uxr_deserialize_ObjectVariant+0x12c>
 801672a:	2b01      	cmp	r3, #1
 801672c:	d032      	beq.n	8016794 <uxr_deserialize_ObjectVariant+0x11c>
 801672e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8016732:	4628      	mov	r0, r5
 8016734:	f7fc fa22 	bl	8012b7c <ucdr_deserialize_int16_t>
 8016738:	4020      	ands	r0, r4
 801673a:	b2c4      	uxtb	r4, r0
 801673c:	e7b1      	b.n	80166a2 <uxr_deserialize_ObjectVariant+0x2a>
 801673e:	1d31      	adds	r1, r6, #4
 8016740:	4628      	mov	r0, r5
 8016742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016746:	f7ff bcab 	b.w	80160a0 <uxr_deserialize_CLIENT_Representation>
 801674a:	2204      	movs	r2, #4
 801674c:	4628      	mov	r0, r5
 801674e:	18b1      	adds	r1, r6, r2
 8016750:	f7fb fb1a 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016754:	4604      	mov	r4, r0
 8016756:	2202      	movs	r2, #2
 8016758:	f106 0108 	add.w	r1, r6, #8
 801675c:	4628      	mov	r0, r5
 801675e:	f7fb fb13 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016762:	4004      	ands	r4, r0
 8016764:	2202      	movs	r2, #2
 8016766:	f106 010a 	add.w	r1, r6, #10
 801676a:	4628      	mov	r0, r5
 801676c:	b2e4      	uxtb	r4, r4
 801676e:	f7fb fb0b 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016772:	4603      	mov	r3, r0
 8016774:	f106 010c 	add.w	r1, r6, #12
 8016778:	4628      	mov	r0, r5
 801677a:	401c      	ands	r4, r3
 801677c:	f7fb fc2a 	bl	8011fd4 <ucdr_deserialize_bool>
 8016780:	4004      	ands	r4, r0
 8016782:	e78e      	b.n	80166a2 <uxr_deserialize_ObjectVariant+0x2a>
 8016784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016788:	68b1      	ldr	r1, [r6, #8]
 801678a:	4628      	mov	r0, r5
 801678c:	f004 fd26 	bl	801b1dc <ucdr_deserialize_string>
 8016790:	4604      	mov	r4, r0
 8016792:	e7b6      	b.n	8016702 <uxr_deserialize_ObjectVariant+0x8a>
 8016794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016798:	68b1      	ldr	r1, [r6, #8]
 801679a:	4628      	mov	r0, r5
 801679c:	f004 fd1e 	bl	801b1dc <ucdr_deserialize_string>
 80167a0:	4604      	mov	r4, r0
 80167a2:	e7c4      	b.n	801672e <uxr_deserialize_ObjectVariant+0xb6>
 80167a4:	f106 0308 	add.w	r3, r6, #8
 80167a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80167ac:	f106 010c 	add.w	r1, r6, #12
 80167b0:	4628      	mov	r0, r5
 80167b2:	f7fc ffbb 	bl	801372c <ucdr_deserialize_sequence_uint8_t>
 80167b6:	4604      	mov	r4, r0
 80167b8:	e7b9      	b.n	801672e <uxr_deserialize_ObjectVariant+0xb6>
 80167ba:	bf00      	nop

080167bc <uxr_deserialize_BaseObjectRequest>:
 80167bc:	b570      	push	{r4, r5, r6, lr}
 80167be:	2202      	movs	r2, #2
 80167c0:	4605      	mov	r5, r0
 80167c2:	460e      	mov	r6, r1
 80167c4:	f7fb fae0 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 80167c8:	2202      	movs	r2, #2
 80167ca:	4604      	mov	r4, r0
 80167cc:	4628      	mov	r0, r5
 80167ce:	18b1      	adds	r1, r6, r2
 80167d0:	f7fb fada 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 80167d4:	4020      	ands	r0, r4
 80167d6:	b2c0      	uxtb	r0, r0
 80167d8:	bd70      	pop	{r4, r5, r6, pc}
 80167da:	bf00      	nop

080167dc <uxr_serialize_ActivityInfoVariant>:
 80167dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167e0:	460e      	mov	r6, r1
 80167e2:	7809      	ldrb	r1, [r1, #0]
 80167e4:	4680      	mov	r8, r0
 80167e6:	f7fb fc0d 	bl	8012004 <ucdr_serialize_uint8_t>
 80167ea:	4607      	mov	r7, r0
 80167ec:	b138      	cbz	r0, 80167fe <uxr_serialize_ActivityInfoVariant+0x22>
 80167ee:	7833      	ldrb	r3, [r6, #0]
 80167f0:	2b06      	cmp	r3, #6
 80167f2:	f000 8081 	beq.w	80168f8 <uxr_serialize_ActivityInfoVariant+0x11c>
 80167f6:	2b0d      	cmp	r3, #13
 80167f8:	d014      	beq.n	8016824 <uxr_serialize_ActivityInfoVariant+0x48>
 80167fa:	2b05      	cmp	r3, #5
 80167fc:	d002      	beq.n	8016804 <uxr_serialize_ActivityInfoVariant+0x28>
 80167fe:	4638      	mov	r0, r7
 8016800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016804:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016808:	4640      	mov	r0, r8
 801680a:	f7fc f937 	bl	8012a7c <ucdr_serialize_int16_t>
 801680e:	4607      	mov	r7, r0
 8016810:	4640      	mov	r0, r8
 8016812:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8016816:	f7fc f861 	bl	80128dc <ucdr_serialize_uint64_t>
 801681a:	4038      	ands	r0, r7
 801681c:	b2c7      	uxtb	r7, r0
 801681e:	4638      	mov	r0, r7
 8016820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016824:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016828:	4640      	mov	r0, r8
 801682a:	f7fc f927 	bl	8012a7c <ucdr_serialize_int16_t>
 801682e:	68f1      	ldr	r1, [r6, #12]
 8016830:	4607      	mov	r7, r0
 8016832:	4640      	mov	r0, r8
 8016834:	f7fb fdfc 	bl	8012430 <ucdr_serialize_uint32_t>
 8016838:	68f3      	ldr	r3, [r6, #12]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d0ed      	beq.n	801681a <uxr_serialize_ActivityInfoVariant+0x3e>
 801683e:	b318      	cbz	r0, 8016888 <uxr_serialize_ActivityInfoVariant+0xac>
 8016840:	f106 090c 	add.w	r9, r6, #12
 8016844:	2400      	movs	r4, #0
 8016846:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801684a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801684e:	7c29      	ldrb	r1, [r5, #16]
 8016850:	4640      	mov	r0, r8
 8016852:	f7fb fbd7 	bl	8012004 <ucdr_serialize_uint8_t>
 8016856:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801685a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801685e:	2800      	cmp	r0, #0
 8016860:	d051      	beq.n	8016906 <uxr_serialize_ActivityInfoVariant+0x12a>
 8016862:	7c2b      	ldrb	r3, [r5, #16]
 8016864:	00c9      	lsls	r1, r1, #3
 8016866:	2b03      	cmp	r3, #3
 8016868:	d854      	bhi.n	8016914 <uxr_serialize_ActivityInfoVariant+0x138>
 801686a:	e8df f003 	tbb	[pc, r3]
 801686e:	2133      	.short	0x2133
 8016870:	020f      	.short	0x020f
 8016872:	4449      	add	r1, r9
 8016874:	4640      	mov	r0, r8
 8016876:	6889      	ldr	r1, [r1, #8]
 8016878:	f004 fca0 	bl	801b1bc <ucdr_serialize_string>
 801687c:	3401      	adds	r4, #1
 801687e:	68f2      	ldr	r2, [r6, #12]
 8016880:	4294      	cmp	r4, r2
 8016882:	d244      	bcs.n	801690e <uxr_serialize_ActivityInfoVariant+0x132>
 8016884:	2800      	cmp	r0, #0
 8016886:	d1de      	bne.n	8016846 <uxr_serialize_ActivityInfoVariant+0x6a>
 8016888:	2700      	movs	r7, #0
 801688a:	e7b8      	b.n	80167fe <uxr_serialize_ActivityInfoVariant+0x22>
 801688c:	3108      	adds	r1, #8
 801688e:	44a2      	add	sl, r4
 8016890:	2210      	movs	r2, #16
 8016892:	4640      	mov	r0, r8
 8016894:	4449      	add	r1, r9
 8016896:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801689a:	f7fb fa11 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 801689e:	4605      	mov	r5, r0
 80168a0:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 80168a4:	4640      	mov	r0, r8
 80168a6:	f7fb fdc3 	bl	8012430 <ucdr_serialize_uint32_t>
 80168aa:	4028      	ands	r0, r5
 80168ac:	b2c0      	uxtb	r0, r0
 80168ae:	e7e5      	b.n	801687c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168b0:	3108      	adds	r1, #8
 80168b2:	44a2      	add	sl, r4
 80168b4:	2204      	movs	r2, #4
 80168b6:	4640      	mov	r0, r8
 80168b8:	4449      	add	r1, r9
 80168ba:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80168be:	f7fb f9ff 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 80168c2:	4605      	mov	r5, r0
 80168c4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80168c8:	4640      	mov	r0, r8
 80168ca:	f7fb fbc7 	bl	801205c <ucdr_serialize_uint16_t>
 80168ce:	4028      	ands	r0, r5
 80168d0:	b2c0      	uxtb	r0, r0
 80168d2:	e7d3      	b.n	801687c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168d4:	3108      	adds	r1, #8
 80168d6:	44a2      	add	sl, r4
 80168d8:	2202      	movs	r2, #2
 80168da:	4640      	mov	r0, r8
 80168dc:	4449      	add	r1, r9
 80168de:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80168e2:	f7fb f9ed 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 80168e6:	4605      	mov	r5, r0
 80168e8:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80168ec:	4640      	mov	r0, r8
 80168ee:	f7fb fb89 	bl	8012004 <ucdr_serialize_uint8_t>
 80168f2:	4028      	ands	r0, r5
 80168f4:	b2c0      	uxtb	r0, r0
 80168f6:	e7c1      	b.n	801687c <uxr_serialize_ActivityInfoVariant+0xa0>
 80168f8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80168fc:	4640      	mov	r0, r8
 80168fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016902:	f7fc b8bb 	b.w	8012a7c <ucdr_serialize_int16_t>
 8016906:	3401      	adds	r4, #1
 8016908:	68f2      	ldr	r2, [r6, #12]
 801690a:	42a2      	cmp	r2, r4
 801690c:	d8bc      	bhi.n	8016888 <uxr_serialize_ActivityInfoVariant+0xac>
 801690e:	4007      	ands	r7, r0
 8016910:	b2ff      	uxtb	r7, r7
 8016912:	e774      	b.n	80167fe <uxr_serialize_ActivityInfoVariant+0x22>
 8016914:	3401      	adds	r4, #1
 8016916:	68f3      	ldr	r3, [r6, #12]
 8016918:	3518      	adds	r5, #24
 801691a:	429c      	cmp	r4, r3
 801691c:	d397      	bcc.n	801684e <uxr_serialize_ActivityInfoVariant+0x72>
 801691e:	e76e      	b.n	80167fe <uxr_serialize_ActivityInfoVariant+0x22>

08016920 <uxr_deserialize_BaseObjectReply>:
 8016920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016924:	2202      	movs	r2, #2
 8016926:	4606      	mov	r6, r0
 8016928:	460f      	mov	r7, r1
 801692a:	f7fb fa2d 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801692e:	2202      	movs	r2, #2
 8016930:	4605      	mov	r5, r0
 8016932:	4630      	mov	r0, r6
 8016934:	18b9      	adds	r1, r7, r2
 8016936:	f7fb fa27 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801693a:	4680      	mov	r8, r0
 801693c:	1d39      	adds	r1, r7, #4
 801693e:	4630      	mov	r0, r6
 8016940:	f7fb fb76 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016944:	ea05 0508 	and.w	r5, r5, r8
 8016948:	4604      	mov	r4, r0
 801694a:	1d79      	adds	r1, r7, #5
 801694c:	4630      	mov	r0, r6
 801694e:	402c      	ands	r4, r5
 8016950:	f7fb fb6e 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016954:	4020      	ands	r0, r4
 8016956:	b2c0      	uxtb	r0, r0
 8016958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801695c <uxr_serialize_ReadSpecification>:
 801695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801695e:	460e      	mov	r6, r1
 8016960:	4607      	mov	r7, r0
 8016962:	7809      	ldrb	r1, [r1, #0]
 8016964:	f7fb fb4e 	bl	8012004 <ucdr_serialize_uint8_t>
 8016968:	4604      	mov	r4, r0
 801696a:	7871      	ldrb	r1, [r6, #1]
 801696c:	4638      	mov	r0, r7
 801696e:	f7fb fb49 	bl	8012004 <ucdr_serialize_uint8_t>
 8016972:	4004      	ands	r4, r0
 8016974:	78b1      	ldrb	r1, [r6, #2]
 8016976:	4638      	mov	r0, r7
 8016978:	f7fb fb16 	bl	8011fa8 <ucdr_serialize_bool>
 801697c:	78b3      	ldrb	r3, [r6, #2]
 801697e:	b2e4      	uxtb	r4, r4
 8016980:	4004      	ands	r4, r0
 8016982:	b943      	cbnz	r3, 8016996 <uxr_serialize_ReadSpecification+0x3a>
 8016984:	7a31      	ldrb	r1, [r6, #8]
 8016986:	4638      	mov	r0, r7
 8016988:	f7fb fb0e 	bl	8011fa8 <ucdr_serialize_bool>
 801698c:	7a33      	ldrb	r3, [r6, #8]
 801698e:	4004      	ands	r4, r0
 8016990:	b93b      	cbnz	r3, 80169a2 <uxr_serialize_ReadSpecification+0x46>
 8016992:	4620      	mov	r0, r4
 8016994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016996:	6871      	ldr	r1, [r6, #4]
 8016998:	4638      	mov	r0, r7
 801699a:	f004 fc0f 	bl	801b1bc <ucdr_serialize_string>
 801699e:	4004      	ands	r4, r0
 80169a0:	e7f0      	b.n	8016984 <uxr_serialize_ReadSpecification+0x28>
 80169a2:	8971      	ldrh	r1, [r6, #10]
 80169a4:	4638      	mov	r0, r7
 80169a6:	f7fb fb59 	bl	801205c <ucdr_serialize_uint16_t>
 80169aa:	4605      	mov	r5, r0
 80169ac:	89b1      	ldrh	r1, [r6, #12]
 80169ae:	4638      	mov	r0, r7
 80169b0:	f7fb fb54 	bl	801205c <ucdr_serialize_uint16_t>
 80169b4:	4005      	ands	r5, r0
 80169b6:	89f1      	ldrh	r1, [r6, #14]
 80169b8:	4638      	mov	r0, r7
 80169ba:	b2ed      	uxtb	r5, r5
 80169bc:	f7fb fb4e 	bl	801205c <ucdr_serialize_uint16_t>
 80169c0:	8a31      	ldrh	r1, [r6, #16]
 80169c2:	4025      	ands	r5, r4
 80169c4:	4604      	mov	r4, r0
 80169c6:	4638      	mov	r0, r7
 80169c8:	4025      	ands	r5, r4
 80169ca:	f7fb fb47 	bl	801205c <ucdr_serialize_uint16_t>
 80169ce:	ea00 0405 	and.w	r4, r0, r5
 80169d2:	4620      	mov	r0, r4
 80169d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169d6:	bf00      	nop

080169d8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80169d8:	f7ff bb0a 	b.w	8015ff0 <uxr_serialize_CLIENT_Representation>

080169dc <uxr_serialize_CREATE_Payload>:
 80169dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169de:	2202      	movs	r2, #2
 80169e0:	4607      	mov	r7, r0
 80169e2:	460e      	mov	r6, r1
 80169e4:	f7fb f96c 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 80169e8:	2202      	movs	r2, #2
 80169ea:	4605      	mov	r5, r0
 80169ec:	4638      	mov	r0, r7
 80169ee:	18b1      	adds	r1, r6, r2
 80169f0:	f7fb f966 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 80169f4:	7931      	ldrb	r1, [r6, #4]
 80169f6:	4604      	mov	r4, r0
 80169f8:	4638      	mov	r0, r7
 80169fa:	f7fb fb03 	bl	8012004 <ucdr_serialize_uint8_t>
 80169fe:	b170      	cbz	r0, 8016a1e <uxr_serialize_CREATE_Payload+0x42>
 8016a00:	7933      	ldrb	r3, [r6, #4]
 8016a02:	402c      	ands	r4, r5
 8016a04:	3b01      	subs	r3, #1
 8016a06:	b2e4      	uxtb	r4, r4
 8016a08:	2b0d      	cmp	r3, #13
 8016a0a:	d809      	bhi.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016a0c:	e8df f003 	tbb	[pc, r3]
 8016a10:	23230a4c 	.word	0x23230a4c
 8016a14:	0a0a0a0a 	.word	0x0a0a0a0a
 8016a18:	12121208 	.word	0x12121208
 8016a1c:	3e45      	.short	0x3e45
 8016a1e:	2400      	movs	r4, #0
 8016a20:	4620      	mov	r0, r4
 8016a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a24:	f106 0108 	add.w	r1, r6, #8
 8016a28:	4638      	mov	r0, r7
 8016a2a:	f7ff fbe7 	bl	80161fc <uxr_serialize_DATAWRITER_Representation>
 8016a2e:	4004      	ands	r4, r0
 8016a30:	4620      	mov	r0, r4
 8016a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a34:	7a31      	ldrb	r1, [r6, #8]
 8016a36:	4638      	mov	r0, r7
 8016a38:	f7fb fae4 	bl	8012004 <ucdr_serialize_uint8_t>
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	d0ee      	beq.n	8016a1e <uxr_serialize_CREATE_Payload+0x42>
 8016a40:	7a33      	ldrb	r3, [r6, #8]
 8016a42:	2b01      	cmp	r3, #1
 8016a44:	d001      	beq.n	8016a4a <uxr_serialize_CREATE_Payload+0x6e>
 8016a46:	2b02      	cmp	r3, #2
 8016a48:	d1ea      	bne.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016a4a:	68f1      	ldr	r1, [r6, #12]
 8016a4c:	4638      	mov	r0, r7
 8016a4e:	f004 fbb5 	bl	801b1bc <ucdr_serialize_string>
 8016a52:	4004      	ands	r4, r0
 8016a54:	e7e4      	b.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016a56:	7a31      	ldrb	r1, [r6, #8]
 8016a58:	4638      	mov	r0, r7
 8016a5a:	f7fb fad3 	bl	8012004 <ucdr_serialize_uint8_t>
 8016a5e:	4605      	mov	r5, r0
 8016a60:	b158      	cbz	r0, 8016a7a <uxr_serialize_CREATE_Payload+0x9e>
 8016a62:	7a33      	ldrb	r3, [r6, #8]
 8016a64:	2b02      	cmp	r3, #2
 8016a66:	d034      	beq.n	8016ad2 <uxr_serialize_CREATE_Payload+0xf6>
 8016a68:	2b03      	cmp	r3, #3
 8016a6a:	d106      	bne.n	8016a7a <uxr_serialize_CREATE_Payload+0x9e>
 8016a6c:	68f2      	ldr	r2, [r6, #12]
 8016a6e:	f106 0110 	add.w	r1, r6, #16
 8016a72:	4638      	mov	r0, r7
 8016a74:	f7fc fe48 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 8016a78:	4605      	mov	r5, r0
 8016a7a:	2202      	movs	r2, #2
 8016a7c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016a80:	4638      	mov	r0, r7
 8016a82:	f7fb f91d 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016a86:	4028      	ands	r0, r5
 8016a88:	4004      	ands	r4, r0
 8016a8a:	e7c9      	b.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016a8c:	f106 0108 	add.w	r1, r6, #8
 8016a90:	4638      	mov	r0, r7
 8016a92:	f7ff faad 	bl	8015ff0 <uxr_serialize_CLIENT_Representation>
 8016a96:	4004      	ands	r4, r0
 8016a98:	e7c2      	b.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016a9a:	f106 0108 	add.w	r1, r6, #8
 8016a9e:	4638      	mov	r0, r7
 8016aa0:	f7ff fb62 	bl	8016168 <uxr_serialize_AGENT_Representation>
 8016aa4:	4004      	ands	r4, r0
 8016aa6:	e7bb      	b.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016aa8:	7a31      	ldrb	r1, [r6, #8]
 8016aaa:	4638      	mov	r0, r7
 8016aac:	f7fb faaa 	bl	8012004 <ucdr_serialize_uint8_t>
 8016ab0:	4605      	mov	r5, r0
 8016ab2:	b130      	cbz	r0, 8016ac2 <uxr_serialize_CREATE_Payload+0xe6>
 8016ab4:	7a33      	ldrb	r3, [r6, #8]
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d011      	beq.n	8016ade <uxr_serialize_CREATE_Payload+0x102>
 8016aba:	2b03      	cmp	r3, #3
 8016abc:	d015      	beq.n	8016aea <uxr_serialize_CREATE_Payload+0x10e>
 8016abe:	2b01      	cmp	r3, #1
 8016ac0:	d00d      	beq.n	8016ade <uxr_serialize_CREATE_Payload+0x102>
 8016ac2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8016ac6:	4638      	mov	r0, r7
 8016ac8:	f7fb ffd8 	bl	8012a7c <ucdr_serialize_int16_t>
 8016acc:	4028      	ands	r0, r5
 8016ace:	4004      	ands	r4, r0
 8016ad0:	e7a6      	b.n	8016a20 <uxr_serialize_CREATE_Payload+0x44>
 8016ad2:	68f1      	ldr	r1, [r6, #12]
 8016ad4:	4638      	mov	r0, r7
 8016ad6:	f004 fb71 	bl	801b1bc <ucdr_serialize_string>
 8016ada:	4605      	mov	r5, r0
 8016adc:	e7cd      	b.n	8016a7a <uxr_serialize_CREATE_Payload+0x9e>
 8016ade:	68f1      	ldr	r1, [r6, #12]
 8016ae0:	4638      	mov	r0, r7
 8016ae2:	f004 fb6b 	bl	801b1bc <ucdr_serialize_string>
 8016ae6:	4605      	mov	r5, r0
 8016ae8:	e7eb      	b.n	8016ac2 <uxr_serialize_CREATE_Payload+0xe6>
 8016aea:	68f2      	ldr	r2, [r6, #12]
 8016aec:	f106 0110 	add.w	r1, r6, #16
 8016af0:	4638      	mov	r0, r7
 8016af2:	f7fc fe09 	bl	8013708 <ucdr_serialize_sequence_uint8_t>
 8016af6:	4605      	mov	r5, r0
 8016af8:	e7e3      	b.n	8016ac2 <uxr_serialize_CREATE_Payload+0xe6>
 8016afa:	bf00      	nop

08016afc <uxr_deserialize_GET_INFO_Payload>:
 8016afc:	b570      	push	{r4, r5, r6, lr}
 8016afe:	2202      	movs	r2, #2
 8016b00:	4605      	mov	r5, r0
 8016b02:	460e      	mov	r6, r1
 8016b04:	f7fb f940 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016b08:	2202      	movs	r2, #2
 8016b0a:	4604      	mov	r4, r0
 8016b0c:	4628      	mov	r0, r5
 8016b0e:	18b1      	adds	r1, r6, r2
 8016b10:	f7fb f93a 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016b14:	4603      	mov	r3, r0
 8016b16:	1d31      	adds	r1, r6, #4
 8016b18:	4628      	mov	r0, r5
 8016b1a:	401c      	ands	r4, r3
 8016b1c:	f7fb fdb8 	bl	8012690 <ucdr_deserialize_uint32_t>
 8016b20:	b2e4      	uxtb	r4, r4
 8016b22:	4020      	ands	r0, r4
 8016b24:	bd70      	pop	{r4, r5, r6, pc}
 8016b26:	bf00      	nop

08016b28 <uxr_serialize_DELETE_Payload>:
 8016b28:	b570      	push	{r4, r5, r6, lr}
 8016b2a:	2202      	movs	r2, #2
 8016b2c:	4605      	mov	r5, r0
 8016b2e:	460e      	mov	r6, r1
 8016b30:	f7fb f8c6 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016b34:	2202      	movs	r2, #2
 8016b36:	4604      	mov	r4, r0
 8016b38:	4628      	mov	r0, r5
 8016b3a:	18b1      	adds	r1, r6, r2
 8016b3c:	f7fb f8c0 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016b40:	4020      	ands	r0, r4
 8016b42:	b2c0      	uxtb	r0, r0
 8016b44:	bd70      	pop	{r4, r5, r6, pc}
 8016b46:	bf00      	nop

08016b48 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b4c:	460e      	mov	r6, r1
 8016b4e:	4605      	mov	r5, r0
 8016b50:	f7fb fa6e 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016b54:	4604      	mov	r4, r0
 8016b56:	1c71      	adds	r1, r6, #1
 8016b58:	4628      	mov	r0, r5
 8016b5a:	f7fb fa69 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016b5e:	2204      	movs	r2, #4
 8016b60:	4681      	mov	r9, r0
 8016b62:	4628      	mov	r0, r5
 8016b64:	18b1      	adds	r1, r6, r2
 8016b66:	f7fb f90f 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016b6a:	f106 0108 	add.w	r1, r6, #8
 8016b6e:	4680      	mov	r8, r0
 8016b70:	2202      	movs	r2, #2
 8016b72:	4628      	mov	r0, r5
 8016b74:	f7fb f908 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016b78:	ea04 0309 	and.w	r3, r4, r9
 8016b7c:	4607      	mov	r7, r0
 8016b7e:	2202      	movs	r2, #2
 8016b80:	b2db      	uxtb	r3, r3
 8016b82:	f106 010a 	add.w	r1, r6, #10
 8016b86:	4628      	mov	r0, r5
 8016b88:	ea03 0408 	and.w	r4, r3, r8
 8016b8c:	f7fb f8fc 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016b90:	4603      	mov	r3, r0
 8016b92:	4628      	mov	r0, r5
 8016b94:	403c      	ands	r4, r7
 8016b96:	f106 010c 	add.w	r1, r6, #12
 8016b9a:	461d      	mov	r5, r3
 8016b9c:	f7fb fa1a 	bl	8011fd4 <ucdr_deserialize_bool>
 8016ba0:	4025      	ands	r5, r4
 8016ba2:	4028      	ands	r0, r5
 8016ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016ba8 <uxr_deserialize_STATUS_Payload>:
 8016ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bac:	2202      	movs	r2, #2
 8016bae:	4606      	mov	r6, r0
 8016bb0:	460f      	mov	r7, r1
 8016bb2:	f7fb f8e9 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016bb6:	2202      	movs	r2, #2
 8016bb8:	4605      	mov	r5, r0
 8016bba:	4630      	mov	r0, r6
 8016bbc:	18b9      	adds	r1, r7, r2
 8016bbe:	f7fb f8e3 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016bc2:	4680      	mov	r8, r0
 8016bc4:	1d39      	adds	r1, r7, #4
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	f7fb fa32 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016bcc:	ea05 0508 	and.w	r5, r5, r8
 8016bd0:	4604      	mov	r4, r0
 8016bd2:	1d79      	adds	r1, r7, #5
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	402c      	ands	r4, r5
 8016bd8:	f7fb fa2a 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016bdc:	4020      	ands	r0, r4
 8016bde:	b2c0      	uxtb	r0, r0
 8016be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016be4 <uxr_serialize_INFO_Payload>:
 8016be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016be8:	2202      	movs	r2, #2
 8016bea:	460c      	mov	r4, r1
 8016bec:	4605      	mov	r5, r0
 8016bee:	f7fb f867 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016bf2:	2202      	movs	r2, #2
 8016bf4:	4680      	mov	r8, r0
 8016bf6:	4628      	mov	r0, r5
 8016bf8:	18a1      	adds	r1, r4, r2
 8016bfa:	f7fb f861 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016bfe:	4607      	mov	r7, r0
 8016c00:	7921      	ldrb	r1, [r4, #4]
 8016c02:	4628      	mov	r0, r5
 8016c04:	f7fb f9fe 	bl	8012004 <ucdr_serialize_uint8_t>
 8016c08:	ea08 0807 	and.w	r8, r8, r7
 8016c0c:	4606      	mov	r6, r0
 8016c0e:	7961      	ldrb	r1, [r4, #5]
 8016c10:	4628      	mov	r0, r5
 8016c12:	ea06 0608 	and.w	r6, r6, r8
 8016c16:	f7fb f9f5 	bl	8012004 <ucdr_serialize_uint8_t>
 8016c1a:	7a21      	ldrb	r1, [r4, #8]
 8016c1c:	4030      	ands	r0, r6
 8016c1e:	b2c7      	uxtb	r7, r0
 8016c20:	4628      	mov	r0, r5
 8016c22:	f7fb f9c1 	bl	8011fa8 <ucdr_serialize_bool>
 8016c26:	7a23      	ldrb	r3, [r4, #8]
 8016c28:	4606      	mov	r6, r0
 8016c2a:	b96b      	cbnz	r3, 8016c48 <uxr_serialize_INFO_Payload+0x64>
 8016c2c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8016c30:	4628      	mov	r0, r5
 8016c32:	f7fb f9b9 	bl	8011fa8 <ucdr_serialize_bool>
 8016c36:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8016c3a:	4030      	ands	r0, r6
 8016c3c:	b2c6      	uxtb	r6, r0
 8016c3e:	b983      	cbnz	r3, 8016c62 <uxr_serialize_INFO_Payload+0x7e>
 8016c40:	ea06 0007 	and.w	r0, r6, r7
 8016c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c48:	7b21      	ldrb	r1, [r4, #12]
 8016c4a:	4628      	mov	r0, r5
 8016c4c:	f7fb f9da 	bl	8012004 <ucdr_serialize_uint8_t>
 8016c50:	b188      	cbz	r0, 8016c76 <uxr_serialize_INFO_Payload+0x92>
 8016c52:	f104 010c 	add.w	r1, r4, #12
 8016c56:	4628      	mov	r0, r5
 8016c58:	f7ff faf8 	bl	801624c <uxr_serialize_ObjectVariant.part.0>
 8016c5c:	4030      	ands	r0, r6
 8016c5e:	b2c6      	uxtb	r6, r0
 8016c60:	e7e4      	b.n	8016c2c <uxr_serialize_INFO_Payload+0x48>
 8016c62:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016c66:	4628      	mov	r0, r5
 8016c68:	f7ff fdb8 	bl	80167dc <uxr_serialize_ActivityInfoVariant>
 8016c6c:	4006      	ands	r6, r0
 8016c6e:	ea06 0007 	and.w	r0, r6, r7
 8016c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c76:	4606      	mov	r6, r0
 8016c78:	e7d8      	b.n	8016c2c <uxr_serialize_INFO_Payload+0x48>
 8016c7a:	bf00      	nop

08016c7c <uxr_serialize_READ_DATA_Payload>:
 8016c7c:	b570      	push	{r4, r5, r6, lr}
 8016c7e:	2202      	movs	r2, #2
 8016c80:	4605      	mov	r5, r0
 8016c82:	460e      	mov	r6, r1
 8016c84:	f7fb f81c 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016c88:	2202      	movs	r2, #2
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	4628      	mov	r0, r5
 8016c8e:	18b1      	adds	r1, r6, r2
 8016c90:	f7fb f816 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016c94:	4603      	mov	r3, r0
 8016c96:	1d31      	adds	r1, r6, #4
 8016c98:	4628      	mov	r0, r5
 8016c9a:	401c      	ands	r4, r3
 8016c9c:	f7ff fe5e 	bl	801695c <uxr_serialize_ReadSpecification>
 8016ca0:	b2e4      	uxtb	r4, r4
 8016ca2:	4020      	ands	r0, r4
 8016ca4:	bd70      	pop	{r4, r5, r6, pc}
 8016ca6:	bf00      	nop

08016ca8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016ca8:	b570      	push	{r4, r5, r6, lr}
 8016caa:	2202      	movs	r2, #2
 8016cac:	4605      	mov	r5, r0
 8016cae:	460e      	mov	r6, r1
 8016cb0:	f7fb f806 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016cb4:	2202      	movs	r2, #2
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	4628      	mov	r0, r5
 8016cba:	18b1      	adds	r1, r6, r2
 8016cbc:	f7fb f800 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016cc0:	4020      	ands	r0, r4
 8016cc2:	b2c0      	uxtb	r0, r0
 8016cc4:	bd70      	pop	{r4, r5, r6, pc}
 8016cc6:	bf00      	nop

08016cc8 <uxr_serialize_ACKNACK_Payload>:
 8016cc8:	b570      	push	{r4, r5, r6, lr}
 8016cca:	460c      	mov	r4, r1
 8016ccc:	4605      	mov	r5, r0
 8016cce:	460e      	mov	r6, r1
 8016cd0:	f834 1b02 	ldrh.w	r1, [r4], #2
 8016cd4:	f7fb f9c2 	bl	801205c <ucdr_serialize_uint16_t>
 8016cd8:	2202      	movs	r2, #2
 8016cda:	4621      	mov	r1, r4
 8016cdc:	4604      	mov	r4, r0
 8016cde:	4628      	mov	r0, r5
 8016ce0:	f7fa ffee 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016ce4:	4603      	mov	r3, r0
 8016ce6:	7931      	ldrb	r1, [r6, #4]
 8016ce8:	4628      	mov	r0, r5
 8016cea:	401c      	ands	r4, r3
 8016cec:	f7fb f98a 	bl	8012004 <ucdr_serialize_uint8_t>
 8016cf0:	b2e4      	uxtb	r4, r4
 8016cf2:	4020      	ands	r0, r4
 8016cf4:	bd70      	pop	{r4, r5, r6, pc}
 8016cf6:	bf00      	nop

08016cf8 <uxr_deserialize_ACKNACK_Payload>:
 8016cf8:	b570      	push	{r4, r5, r6, lr}
 8016cfa:	460e      	mov	r6, r1
 8016cfc:	4605      	mov	r5, r0
 8016cfe:	f7fb faad 	bl	801225c <ucdr_deserialize_uint16_t>
 8016d02:	2202      	movs	r2, #2
 8016d04:	4604      	mov	r4, r0
 8016d06:	4628      	mov	r0, r5
 8016d08:	18b1      	adds	r1, r6, r2
 8016d0a:	f7fb f83d 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	1d31      	adds	r1, r6, #4
 8016d12:	4628      	mov	r0, r5
 8016d14:	401c      	ands	r4, r3
 8016d16:	f7fb f98b 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016d1a:	b2e4      	uxtb	r4, r4
 8016d1c:	4020      	ands	r0, r4
 8016d1e:	bd70      	pop	{r4, r5, r6, pc}

08016d20 <uxr_serialize_HEARTBEAT_Payload>:
 8016d20:	b570      	push	{r4, r5, r6, lr}
 8016d22:	460d      	mov	r5, r1
 8016d24:	4606      	mov	r6, r0
 8016d26:	8809      	ldrh	r1, [r1, #0]
 8016d28:	f7fb f998 	bl	801205c <ucdr_serialize_uint16_t>
 8016d2c:	8869      	ldrh	r1, [r5, #2]
 8016d2e:	4604      	mov	r4, r0
 8016d30:	4630      	mov	r0, r6
 8016d32:	f7fb f993 	bl	801205c <ucdr_serialize_uint16_t>
 8016d36:	4603      	mov	r3, r0
 8016d38:	7929      	ldrb	r1, [r5, #4]
 8016d3a:	4630      	mov	r0, r6
 8016d3c:	401c      	ands	r4, r3
 8016d3e:	f7fb f961 	bl	8012004 <ucdr_serialize_uint8_t>
 8016d42:	b2e4      	uxtb	r4, r4
 8016d44:	4020      	ands	r0, r4
 8016d46:	bd70      	pop	{r4, r5, r6, pc}

08016d48 <uxr_deserialize_HEARTBEAT_Payload>:
 8016d48:	b570      	push	{r4, r5, r6, lr}
 8016d4a:	460e      	mov	r6, r1
 8016d4c:	4605      	mov	r5, r0
 8016d4e:	f7fb fa85 	bl	801225c <ucdr_deserialize_uint16_t>
 8016d52:	4604      	mov	r4, r0
 8016d54:	1cb1      	adds	r1, r6, #2
 8016d56:	4628      	mov	r0, r5
 8016d58:	f7fb fa80 	bl	801225c <ucdr_deserialize_uint16_t>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	1d31      	adds	r1, r6, #4
 8016d60:	4628      	mov	r0, r5
 8016d62:	401c      	ands	r4, r3
 8016d64:	f7fb f964 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016d68:	b2e4      	uxtb	r4, r4
 8016d6a:	4020      	ands	r0, r4
 8016d6c:	bd70      	pop	{r4, r5, r6, pc}
 8016d6e:	bf00      	nop

08016d70 <uxr_serialize_TIMESTAMP_Payload>:
 8016d70:	b570      	push	{r4, r5, r6, lr}
 8016d72:	460d      	mov	r5, r1
 8016d74:	4606      	mov	r6, r0
 8016d76:	6809      	ldr	r1, [r1, #0]
 8016d78:	f7fb ff74 	bl	8012c64 <ucdr_serialize_int32_t>
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	6869      	ldr	r1, [r5, #4]
 8016d80:	4630      	mov	r0, r6
 8016d82:	f7fb fb55 	bl	8012430 <ucdr_serialize_uint32_t>
 8016d86:	4020      	ands	r0, r4
 8016d88:	b2c0      	uxtb	r0, r0
 8016d8a:	bd70      	pop	{r4, r5, r6, pc}

08016d8c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d90:	460e      	mov	r6, r1
 8016d92:	4605      	mov	r5, r0
 8016d94:	f7fb fffe 	bl	8012d94 <ucdr_deserialize_int32_t>
 8016d98:	4607      	mov	r7, r0
 8016d9a:	1d31      	adds	r1, r6, #4
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	f7fb fc77 	bl	8012690 <ucdr_deserialize_uint32_t>
 8016da2:	4680      	mov	r8, r0
 8016da4:	f106 0108 	add.w	r1, r6, #8
 8016da8:	4628      	mov	r0, r5
 8016daa:	f7fb fff3 	bl	8012d94 <ucdr_deserialize_int32_t>
 8016dae:	ea07 0708 	and.w	r7, r7, r8
 8016db2:	4604      	mov	r4, r0
 8016db4:	f106 010c 	add.w	r1, r6, #12
 8016db8:	4628      	mov	r0, r5
 8016dba:	403c      	ands	r4, r7
 8016dbc:	f7fb fc68 	bl	8012690 <ucdr_deserialize_uint32_t>
 8016dc0:	f106 0110 	add.w	r1, r6, #16
 8016dc4:	4004      	ands	r4, r0
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	f7fb ffe4 	bl	8012d94 <ucdr_deserialize_int32_t>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	b2e4      	uxtb	r4, r4
 8016dd0:	4628      	mov	r0, r5
 8016dd2:	461d      	mov	r5, r3
 8016dd4:	f106 0114 	add.w	r1, r6, #20
 8016dd8:	f7fb fc5a 	bl	8012690 <ucdr_deserialize_uint32_t>
 8016ddc:	402c      	ands	r4, r5
 8016dde:	4020      	ands	r0, r4
 8016de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016de4 <uxr_serialize_SampleIdentity>:
 8016de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016de8:	4604      	mov	r4, r0
 8016dea:	460d      	mov	r5, r1
 8016dec:	220c      	movs	r2, #12
 8016dee:	f7fa ff67 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016df2:	2203      	movs	r2, #3
 8016df4:	f105 010c 	add.w	r1, r5, #12
 8016df8:	4607      	mov	r7, r0
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	f7fa ff60 	bl	8011cc0 <ucdr_serialize_array_uint8_t>
 8016e00:	7be9      	ldrb	r1, [r5, #15]
 8016e02:	4680      	mov	r8, r0
 8016e04:	4620      	mov	r0, r4
 8016e06:	f7fb f8fd 	bl	8012004 <ucdr_serialize_uint8_t>
 8016e0a:	6929      	ldr	r1, [r5, #16]
 8016e0c:	4606      	mov	r6, r0
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7fb ff28 	bl	8012c64 <ucdr_serialize_int32_t>
 8016e14:	ea07 0708 	and.w	r7, r7, r8
 8016e18:	4603      	mov	r3, r0
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	403e      	ands	r6, r7
 8016e1e:	6969      	ldr	r1, [r5, #20]
 8016e20:	461c      	mov	r4, r3
 8016e22:	f7fb fb05 	bl	8012430 <ucdr_serialize_uint32_t>
 8016e26:	4034      	ands	r4, r6
 8016e28:	4020      	ands	r0, r4
 8016e2a:	b2c0      	uxtb	r0, r0
 8016e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e30 <uxr_deserialize_SampleIdentity>:
 8016e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e34:	4604      	mov	r4, r0
 8016e36:	460d      	mov	r5, r1
 8016e38:	220c      	movs	r2, #12
 8016e3a:	f7fa ffa5 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016e3e:	2203      	movs	r2, #3
 8016e40:	f105 010c 	add.w	r1, r5, #12
 8016e44:	4607      	mov	r7, r0
 8016e46:	4620      	mov	r0, r4
 8016e48:	f7fa ff9e 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 8016e4c:	f105 010f 	add.w	r1, r5, #15
 8016e50:	4680      	mov	r8, r0
 8016e52:	4620      	mov	r0, r4
 8016e54:	f7fb f8ec 	bl	8012030 <ucdr_deserialize_uint8_t>
 8016e58:	f105 0110 	add.w	r1, r5, #16
 8016e5c:	4606      	mov	r6, r0
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f7fb ff98 	bl	8012d94 <ucdr_deserialize_int32_t>
 8016e64:	ea07 0708 	and.w	r7, r7, r8
 8016e68:	4603      	mov	r3, r0
 8016e6a:	4620      	mov	r0, r4
 8016e6c:	403e      	ands	r6, r7
 8016e6e:	f105 0114 	add.w	r1, r5, #20
 8016e72:	461c      	mov	r4, r3
 8016e74:	f7fb fc0c 	bl	8012690 <ucdr_deserialize_uint32_t>
 8016e78:	4034      	ands	r4, r6
 8016e7a:	4020      	ands	r0, r4
 8016e7c:	b2c0      	uxtb	r0, r0
 8016e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e82:	bf00      	nop

08016e84 <rcl_client_get_rmw_handle>:
 8016e84:	b118      	cbz	r0, 8016e8e <rcl_client_get_rmw_handle+0xa>
 8016e86:	6800      	ldr	r0, [r0, #0]
 8016e88:	b108      	cbz	r0, 8016e8e <rcl_client_get_rmw_handle+0xa>
 8016e8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e8e:	4770      	bx	lr

08016e90 <rcl_send_request>:
 8016e90:	b570      	push	{r4, r5, r6, lr}
 8016e92:	b082      	sub	sp, #8
 8016e94:	b1f8      	cbz	r0, 8016ed6 <rcl_send_request+0x46>
 8016e96:	4604      	mov	r4, r0
 8016e98:	6800      	ldr	r0, [r0, #0]
 8016e9a:	b1e0      	cbz	r0, 8016ed6 <rcl_send_request+0x46>
 8016e9c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016ea0:	b1cb      	cbz	r3, 8016ed6 <rcl_send_request+0x46>
 8016ea2:	460e      	mov	r6, r1
 8016ea4:	b1e1      	cbz	r1, 8016ee0 <rcl_send_request+0x50>
 8016ea6:	4615      	mov	r5, r2
 8016ea8:	b1d2      	cbz	r2, 8016ee0 <rcl_send_request+0x50>
 8016eaa:	2105      	movs	r1, #5
 8016eac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016eb0:	f002 fe1a 	bl	8019ae8 <__atomic_load_8>
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	460b      	mov	r3, r1
 8016eb8:	4631      	mov	r1, r6
 8016eba:	e9c5 2300 	strd	r2, r3, [r5]
 8016ebe:	6823      	ldr	r3, [r4, #0]
 8016ec0:	462a      	mov	r2, r5
 8016ec2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016ec6:	f003 fd3d 	bl	801a944 <rmw_send_request>
 8016eca:	4606      	mov	r6, r0
 8016ecc:	b160      	cbz	r0, 8016ee8 <rcl_send_request+0x58>
 8016ece:	2601      	movs	r6, #1
 8016ed0:	4630      	mov	r0, r6
 8016ed2:	b002      	add	sp, #8
 8016ed4:	bd70      	pop	{r4, r5, r6, pc}
 8016ed6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8016eda:	4630      	mov	r0, r6
 8016edc:	b002      	add	sp, #8
 8016ede:	bd70      	pop	{r4, r5, r6, pc}
 8016ee0:	260b      	movs	r6, #11
 8016ee2:	4630      	mov	r0, r6
 8016ee4:	b002      	add	sp, #8
 8016ee6:	bd70      	pop	{r4, r5, r6, pc}
 8016ee8:	6820      	ldr	r0, [r4, #0]
 8016eea:	2105      	movs	r1, #5
 8016eec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ef0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016ef4:	9100      	str	r1, [sp, #0]
 8016ef6:	f002 fe63 	bl	8019bc0 <__atomic_exchange_8>
 8016efa:	4630      	mov	r0, r6
 8016efc:	b002      	add	sp, #8
 8016efe:	bd70      	pop	{r4, r5, r6, pc}

08016f00 <rcl_take_response>:
 8016f00:	b570      	push	{r4, r5, r6, lr}
 8016f02:	468e      	mov	lr, r1
 8016f04:	b08c      	sub	sp, #48	@ 0x30
 8016f06:	460c      	mov	r4, r1
 8016f08:	4616      	mov	r6, r2
 8016f0a:	f10d 0c18 	add.w	ip, sp, #24
 8016f0e:	4605      	mov	r5, r0
 8016f10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016f1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f20:	b35d      	cbz	r5, 8016f7a <rcl_take_response+0x7a>
 8016f22:	682b      	ldr	r3, [r5, #0]
 8016f24:	b34b      	cbz	r3, 8016f7a <rcl_take_response+0x7a>
 8016f26:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016f2a:	b330      	cbz	r0, 8016f7a <rcl_take_response+0x7a>
 8016f2c:	b346      	cbz	r6, 8016f80 <rcl_take_response+0x80>
 8016f2e:	2300      	movs	r3, #0
 8016f30:	4632      	mov	r2, r6
 8016f32:	a902      	add	r1, sp, #8
 8016f34:	f88d 3007 	strb.w	r3, [sp, #7]
 8016f38:	f10d 0307 	add.w	r3, sp, #7
 8016f3c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016f88 <rcl_take_response+0x88>
 8016f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016f48:	f003 fe04 	bl	801ab54 <rmw_take_response>
 8016f4c:	4605      	mov	r5, r0
 8016f4e:	b9c8      	cbnz	r0, 8016f84 <rcl_take_response+0x84>
 8016f50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016f54:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	bf08      	it	eq
 8016f5c:	461d      	moveq	r5, r3
 8016f5e:	f10d 0e18 	add.w	lr, sp, #24
 8016f62:	46a4      	mov	ip, r4
 8016f64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016f70:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f74:	4628      	mov	r0, r5
 8016f76:	b00c      	add	sp, #48	@ 0x30
 8016f78:	bd70      	pop	{r4, r5, r6, pc}
 8016f7a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8016f7e:	e7ee      	b.n	8016f5e <rcl_take_response+0x5e>
 8016f80:	250b      	movs	r5, #11
 8016f82:	e7ec      	b.n	8016f5e <rcl_take_response+0x5e>
 8016f84:	2501      	movs	r5, #1
 8016f86:	e7ea      	b.n	8016f5e <rcl_take_response+0x5e>
	...

08016f90 <rcl_client_is_valid>:
 8016f90:	b130      	cbz	r0, 8016fa0 <rcl_client_is_valid+0x10>
 8016f92:	6800      	ldr	r0, [r0, #0]
 8016f94:	b120      	cbz	r0, 8016fa0 <rcl_client_is_valid+0x10>
 8016f96:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016f9a:	3800      	subs	r0, #0
 8016f9c:	bf18      	it	ne
 8016f9e:	2001      	movne	r0, #1
 8016fa0:	4770      	bx	lr
 8016fa2:	bf00      	nop

08016fa4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016fa4:	280b      	cmp	r0, #11
 8016fa6:	dc0d      	bgt.n	8016fc4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	db09      	blt.n	8016fc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016fac:	280b      	cmp	r0, #11
 8016fae:	d807      	bhi.n	8016fc0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016fb0:	e8df f000 	tbb	[pc, r0]
 8016fb4:	07060607 	.word	0x07060607
 8016fb8:	06060606 	.word	0x06060606
 8016fbc:	07070606 	.word	0x07070606
 8016fc0:	2001      	movs	r0, #1
 8016fc2:	4770      	bx	lr
 8016fc4:	28cb      	cmp	r0, #203	@ 0xcb
 8016fc6:	bf18      	it	ne
 8016fc8:	2001      	movne	r0, #1
 8016fca:	4770      	bx	lr

08016fcc <rcl_get_zero_initialized_context>:
 8016fcc:	4a03      	ldr	r2, [pc, #12]	@ (8016fdc <rcl_get_zero_initialized_context+0x10>)
 8016fce:	4603      	mov	r3, r0
 8016fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016fd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	4770      	bx	lr
 8016fdc:	0801e608 	.word	0x0801e608

08016fe0 <rcl_context_is_valid>:
 8016fe0:	b118      	cbz	r0, 8016fea <rcl_context_is_valid+0xa>
 8016fe2:	6840      	ldr	r0, [r0, #4]
 8016fe4:	3800      	subs	r0, #0
 8016fe6:	bf18      	it	ne
 8016fe8:	2001      	movne	r0, #1
 8016fea:	4770      	bx	lr

08016fec <__cleanup_context>:
 8016fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ff0:	4606      	mov	r6, r0
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	6800      	ldr	r0, [r0, #0]
 8016ff6:	6073      	str	r3, [r6, #4]
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d049      	beq.n	8017090 <__cleanup_context+0xa4>
 8016ffc:	6947      	ldr	r7, [r0, #20]
 8016ffe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017002:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8017006:	b137      	cbz	r7, 8017016 <__cleanup_context+0x2a>
 8017008:	3014      	adds	r0, #20
 801700a:	f7f7 fdd3 	bl	800ebb4 <rcl_init_options_fini>
 801700e:	4607      	mov	r7, r0
 8017010:	2800      	cmp	r0, #0
 8017012:	d144      	bne.n	801709e <__cleanup_context+0xb2>
 8017014:	6830      	ldr	r0, [r6, #0]
 8017016:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017018:	b143      	cbz	r3, 801702c <__cleanup_context+0x40>
 801701a:	3028      	adds	r0, #40	@ 0x28
 801701c:	f7f9 f9ba 	bl	8010394 <rmw_context_fini>
 8017020:	b118      	cbz	r0, 801702a <__cleanup_context+0x3e>
 8017022:	2f00      	cmp	r7, #0
 8017024:	d03e      	beq.n	80170a4 <__cleanup_context+0xb8>
 8017026:	f7f8 feeb 	bl	800fe00 <rcutils_reset_error>
 801702a:	6830      	ldr	r0, [r6, #0]
 801702c:	6a03      	ldr	r3, [r0, #32]
 801702e:	b1db      	cbz	r3, 8017068 <__cleanup_context+0x7c>
 8017030:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8017034:	2a01      	cmp	r2, #1
 8017036:	f17c 0100 	sbcs.w	r1, ip, #0
 801703a:	db11      	blt.n	8017060 <__cleanup_context+0x74>
 801703c:	2400      	movs	r4, #0
 801703e:	4625      	mov	r5, r4
 8017040:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017044:	4649      	mov	r1, r9
 8017046:	b1b8      	cbz	r0, 8017078 <__cleanup_context+0x8c>
 8017048:	47c0      	blx	r8
 801704a:	6833      	ldr	r3, [r6, #0]
 801704c:	3401      	adds	r4, #1
 801704e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8017052:	f145 0500 	adc.w	r5, r5, #0
 8017056:	6a1b      	ldr	r3, [r3, #32]
 8017058:	4294      	cmp	r4, r2
 801705a:	eb75 010c 	sbcs.w	r1, r5, ip
 801705e:	dbef      	blt.n	8017040 <__cleanup_context+0x54>
 8017060:	4618      	mov	r0, r3
 8017062:	4649      	mov	r1, r9
 8017064:	47c0      	blx	r8
 8017066:	6830      	ldr	r0, [r6, #0]
 8017068:	4649      	mov	r1, r9
 801706a:	47c0      	blx	r8
 801706c:	2300      	movs	r3, #0
 801706e:	4638      	mov	r0, r7
 8017070:	e9c6 3300 	strd	r3, r3, [r6]
 8017074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017078:	3401      	adds	r4, #1
 801707a:	f145 0500 	adc.w	r5, r5, #0
 801707e:	4294      	cmp	r4, r2
 8017080:	eb75 010c 	sbcs.w	r1, r5, ip
 8017084:	dbdc      	blt.n	8017040 <__cleanup_context+0x54>
 8017086:	4618      	mov	r0, r3
 8017088:	4649      	mov	r1, r9
 801708a:	47c0      	blx	r8
 801708c:	6830      	ldr	r0, [r6, #0]
 801708e:	e7eb      	b.n	8017068 <__cleanup_context+0x7c>
 8017090:	4607      	mov	r7, r0
 8017092:	2300      	movs	r3, #0
 8017094:	4638      	mov	r0, r7
 8017096:	e9c6 3300 	strd	r3, r3, [r6]
 801709a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801709e:	f7f8 feaf 	bl	800fe00 <rcutils_reset_error>
 80170a2:	e7b7      	b.n	8017014 <__cleanup_context+0x28>
 80170a4:	f7ff ff7e 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 80170a8:	4607      	mov	r7, r0
 80170aa:	e7bc      	b.n	8017026 <__cleanup_context+0x3a>

080170ac <rcl_init>:
 80170ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170b0:	1e05      	subs	r5, r0, #0
 80170b2:	b09e      	sub	sp, #120	@ 0x78
 80170b4:	460e      	mov	r6, r1
 80170b6:	4690      	mov	r8, r2
 80170b8:	461f      	mov	r7, r3
 80170ba:	f340 809f 	ble.w	80171fc <rcl_init+0x150>
 80170be:	2900      	cmp	r1, #0
 80170c0:	f000 809f 	beq.w	8017202 <rcl_init+0x156>
 80170c4:	f1a1 0e04 	sub.w	lr, r1, #4
 80170c8:	f04f 0c00 	mov.w	ip, #0
 80170cc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80170d0:	f10c 0c01 	add.w	ip, ip, #1
 80170d4:	2c00      	cmp	r4, #0
 80170d6:	f000 8094 	beq.w	8017202 <rcl_init+0x156>
 80170da:	4565      	cmp	r5, ip
 80170dc:	d1f6      	bne.n	80170cc <rcl_init+0x20>
 80170de:	f1b8 0f00 	cmp.w	r8, #0
 80170e2:	f000 808e 	beq.w	8017202 <rcl_init+0x156>
 80170e6:	f8d8 4000 	ldr.w	r4, [r8]
 80170ea:	2c00      	cmp	r4, #0
 80170ec:	f000 8089 	beq.w	8017202 <rcl_init+0x156>
 80170f0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80170f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170fa:	6823      	ldr	r3, [r4, #0]
 80170fc:	a819      	add	r0, sp, #100	@ 0x64
 80170fe:	f8cc 3000 	str.w	r3, [ip]
 8017102:	f7f8 fe59 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017106:	f080 0001 	eor.w	r0, r0, #1
 801710a:	b2c0      	uxtb	r0, r0
 801710c:	2800      	cmp	r0, #0
 801710e:	d178      	bne.n	8017202 <rcl_init+0x156>
 8017110:	2f00      	cmp	r7, #0
 8017112:	d076      	beq.n	8017202 <rcl_init+0x156>
 8017114:	683b      	ldr	r3, [r7, #0]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d178      	bne.n	801720c <rcl_init+0x160>
 801711a:	2178      	movs	r1, #120	@ 0x78
 801711c:	2001      	movs	r0, #1
 801711e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017122:	4798      	blx	r3
 8017124:	4604      	mov	r4, r0
 8017126:	6038      	str	r0, [r7, #0]
 8017128:	2800      	cmp	r0, #0
 801712a:	f000 80b6 	beq.w	801729a <rcl_init+0x1ee>
 801712e:	a802      	add	r0, sp, #8
 8017130:	f003 f84e 	bl	801a1d0 <rmw_get_zero_initialized_context>
 8017134:	a902      	add	r1, sp, #8
 8017136:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801713a:	2250      	movs	r2, #80	@ 0x50
 801713c:	f005 ff75 	bl	801d02a <memcpy>
 8017140:	ac19      	add	r4, sp, #100	@ 0x64
 8017142:	f8d7 e000 	ldr.w	lr, [r7]
 8017146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017148:	46f4      	mov	ip, lr
 801714a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801714e:	6823      	ldr	r3, [r4, #0]
 8017150:	f10e 0114 	add.w	r1, lr, #20
 8017154:	4640      	mov	r0, r8
 8017156:	f8cc 3000 	str.w	r3, [ip]
 801715a:	f7f7 fd55 	bl	800ec08 <rcl_init_options_copy>
 801715e:	4604      	mov	r4, r0
 8017160:	2800      	cmp	r0, #0
 8017162:	d144      	bne.n	80171ee <rcl_init+0x142>
 8017164:	f8d7 9000 	ldr.w	r9, [r7]
 8017168:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801716c:	f8c9 0020 	str.w	r0, [r9, #32]
 8017170:	f8c9 5018 	str.w	r5, [r9, #24]
 8017174:	f8c9 801c 	str.w	r8, [r9, #28]
 8017178:	2d00      	cmp	r5, #0
 801717a:	d04e      	beq.n	801721a <rcl_init+0x16e>
 801717c:	2e00      	cmp	r6, #0
 801717e:	d04c      	beq.n	801721a <rcl_init+0x16e>
 8017180:	2104      	movs	r1, #4
 8017182:	4628      	mov	r0, r5
 8017184:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8017188:	4798      	blx	r3
 801718a:	f8c9 0020 	str.w	r0, [r9, #32]
 801718e:	f8d7 9000 	ldr.w	r9, [r7]
 8017192:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8017196:	46ca      	mov	sl, r9
 8017198:	b343      	cbz	r3, 80171ec <rcl_init+0x140>
 801719a:	2d01      	cmp	r5, #1
 801719c:	f178 0300 	sbcs.w	r3, r8, #0
 80171a0:	db3b      	blt.n	801721a <rcl_init+0x16e>
 80171a2:	2400      	movs	r4, #0
 80171a4:	3e04      	subs	r6, #4
 80171a6:	46a1      	mov	r9, r4
 80171a8:	e00b      	b.n	80171c2 <rcl_init+0x116>
 80171aa:	6831      	ldr	r1, [r6, #0]
 80171ac:	f005 ff3d 	bl	801d02a <memcpy>
 80171b0:	3401      	adds	r4, #1
 80171b2:	f149 0900 	adc.w	r9, r9, #0
 80171b6:	45c8      	cmp	r8, r9
 80171b8:	bf08      	it	eq
 80171ba:	42a5      	cmpeq	r5, r4
 80171bc:	d02b      	beq.n	8017216 <rcl_init+0x16a>
 80171be:	f8d7 a000 	ldr.w	sl, [r7]
 80171c2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80171c6:	f7e9 f895 	bl	80002f4 <strlen>
 80171ca:	1c42      	adds	r2, r0, #1
 80171cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80171ce:	4610      	mov	r0, r2
 80171d0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 80171d2:	f8da a020 	ldr.w	sl, [sl, #32]
 80171d6:	9201      	str	r2, [sp, #4]
 80171d8:	4798      	blx	r3
 80171da:	683b      	ldr	r3, [r7, #0]
 80171dc:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80171e0:	6a1b      	ldr	r3, [r3, #32]
 80171e2:	9a01      	ldr	r2, [sp, #4]
 80171e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80171e8:	2800      	cmp	r0, #0
 80171ea:	d1de      	bne.n	80171aa <rcl_init+0xfe>
 80171ec:	240a      	movs	r4, #10
 80171ee:	4638      	mov	r0, r7
 80171f0:	f7ff fefc 	bl	8016fec <__cleanup_context>
 80171f4:	4620      	mov	r0, r4
 80171f6:	b01e      	add	sp, #120	@ 0x78
 80171f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171fc:	2900      	cmp	r1, #0
 80171fe:	f43f af6e 	beq.w	80170de <rcl_init+0x32>
 8017202:	240b      	movs	r4, #11
 8017204:	4620      	mov	r0, r4
 8017206:	b01e      	add	sp, #120	@ 0x78
 8017208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801720c:	2464      	movs	r4, #100	@ 0x64
 801720e:	4620      	mov	r0, r4
 8017210:	b01e      	add	sp, #120	@ 0x78
 8017212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017216:	f8d7 9000 	ldr.w	r9, [r7]
 801721a:	4926      	ldr	r1, [pc, #152]	@ (80172b4 <rcl_init+0x208>)
 801721c:	680b      	ldr	r3, [r1, #0]
 801721e:	3301      	adds	r3, #1
 8017220:	d036      	beq.n	8017290 <rcl_init+0x1e4>
 8017222:	461a      	mov	r2, r3
 8017224:	2400      	movs	r4, #0
 8017226:	600b      	str	r3, [r1, #0]
 8017228:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801722c:	607b      	str	r3, [r7, #4]
 801722e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017230:	3301      	adds	r3, #1
 8017232:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8017236:	d034      	beq.n	80172a2 <rcl_init+0x1f6>
 8017238:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801723c:	b93b      	cbnz	r3, 801724e <rcl_init+0x1a2>
 801723e:	3030      	adds	r0, #48	@ 0x30
 8017240:	f000 f83a 	bl	80172b8 <rcl_get_localhost_only>
 8017244:	4604      	mov	r4, r0
 8017246:	2800      	cmp	r0, #0
 8017248:	d1d1      	bne.n	80171ee <rcl_init+0x142>
 801724a:	683b      	ldr	r3, [r7, #0]
 801724c:	6958      	ldr	r0, [r3, #20]
 801724e:	aa18      	add	r2, sp, #96	@ 0x60
 8017250:	a917      	add	r1, sp, #92	@ 0x5c
 8017252:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8017254:	f001 f8d2 	bl	80183fc <rcl_validate_enclave_name>
 8017258:	4604      	mov	r4, r0
 801725a:	2800      	cmp	r0, #0
 801725c:	d1c7      	bne.n	80171ee <rcl_init+0x142>
 801725e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017260:	b9eb      	cbnz	r3, 801729e <rcl_init+0x1f2>
 8017262:	6839      	ldr	r1, [r7, #0]
 8017264:	694b      	ldr	r3, [r1, #20]
 8017266:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801726a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801726c:	f000 fb72 	bl	8017954 <rcl_get_security_options_from_environment>
 8017270:	4604      	mov	r4, r0
 8017272:	2800      	cmp	r0, #0
 8017274:	d1bb      	bne.n	80171ee <rcl_init+0x142>
 8017276:	6839      	ldr	r1, [r7, #0]
 8017278:	6948      	ldr	r0, [r1, #20]
 801727a:	3128      	adds	r1, #40	@ 0x28
 801727c:	3018      	adds	r0, #24
 801727e:	f7f8 ff53 	bl	8010128 <rmw_init>
 8017282:	4604      	mov	r4, r0
 8017284:	2800      	cmp	r0, #0
 8017286:	d0bd      	beq.n	8017204 <rcl_init+0x158>
 8017288:	f7ff fe8c 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 801728c:	4604      	mov	r4, r0
 801728e:	e7ae      	b.n	80171ee <rcl_init+0x142>
 8017290:	2201      	movs	r2, #1
 8017292:	461c      	mov	r4, r3
 8017294:	600a      	str	r2, [r1, #0]
 8017296:	4613      	mov	r3, r2
 8017298:	e7c6      	b.n	8017228 <rcl_init+0x17c>
 801729a:	240a      	movs	r4, #10
 801729c:	e7b2      	b.n	8017204 <rcl_init+0x158>
 801729e:	2401      	movs	r4, #1
 80172a0:	e7a5      	b.n	80171ee <rcl_init+0x142>
 80172a2:	3024      	adds	r0, #36	@ 0x24
 80172a4:	f004 fd0c 	bl	801bcc0 <rcl_get_default_domain_id>
 80172a8:	4604      	mov	r4, r0
 80172aa:	2800      	cmp	r0, #0
 80172ac:	d19f      	bne.n	80171ee <rcl_init+0x142>
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	6958      	ldr	r0, [r3, #20]
 80172b2:	e7c1      	b.n	8017238 <rcl_init+0x18c>
 80172b4:	24013a58 	.word	0x24013a58

080172b8 <rcl_get_localhost_only>:
 80172b8:	b510      	push	{r4, lr}
 80172ba:	2300      	movs	r3, #0
 80172bc:	b082      	sub	sp, #8
 80172be:	9301      	str	r3, [sp, #4]
 80172c0:	b1b8      	cbz	r0, 80172f2 <rcl_get_localhost_only+0x3a>
 80172c2:	4604      	mov	r4, r0
 80172c4:	a901      	add	r1, sp, #4
 80172c6:	480c      	ldr	r0, [pc, #48]	@ (80172f8 <rcl_get_localhost_only+0x40>)
 80172c8:	f002 fcb2 	bl	8019c30 <rcutils_get_env>
 80172cc:	b110      	cbz	r0, 80172d4 <rcl_get_localhost_only+0x1c>
 80172ce:	2001      	movs	r0, #1
 80172d0:	b002      	add	sp, #8
 80172d2:	bd10      	pop	{r4, pc}
 80172d4:	9b01      	ldr	r3, [sp, #4]
 80172d6:	b113      	cbz	r3, 80172de <rcl_get_localhost_only+0x26>
 80172d8:	781a      	ldrb	r2, [r3, #0]
 80172da:	2a31      	cmp	r2, #49	@ 0x31
 80172dc:	d004      	beq.n	80172e8 <rcl_get_localhost_only+0x30>
 80172de:	2302      	movs	r3, #2
 80172e0:	2000      	movs	r0, #0
 80172e2:	7023      	strb	r3, [r4, #0]
 80172e4:	b002      	add	sp, #8
 80172e6:	bd10      	pop	{r4, pc}
 80172e8:	785b      	ldrb	r3, [r3, #1]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d1f7      	bne.n	80172de <rcl_get_localhost_only+0x26>
 80172ee:	2301      	movs	r3, #1
 80172f0:	e7f6      	b.n	80172e0 <rcl_get_localhost_only+0x28>
 80172f2:	200b      	movs	r0, #11
 80172f4:	b002      	add	sp, #8
 80172f6:	bd10      	pop	{r4, pc}
 80172f8:	0801e610 	.word	0x0801e610

080172fc <rcl_get_zero_initialized_node>:
 80172fc:	4a03      	ldr	r2, [pc, #12]	@ (801730c <rcl_get_zero_initialized_node+0x10>)
 80172fe:	4603      	mov	r3, r0
 8017300:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017304:	e883 0003 	stmia.w	r3, {r0, r1}
 8017308:	4618      	mov	r0, r3
 801730a:	4770      	bx	lr
 801730c:	0801e62c 	.word	0x0801e62c

08017310 <rcl_node_init>:
 8017310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	b0a9      	sub	sp, #164	@ 0xa4
 8017316:	4604      	mov	r4, r0
 8017318:	460e      	mov	r6, r1
 801731a:	4615      	mov	r5, r2
 801731c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8017320:	a823      	add	r0, sp, #140	@ 0x8c
 8017322:	461f      	mov	r7, r3
 8017324:	f004 ff40 	bl	801c1a8 <rcl_guard_condition_get_default_options>
 8017328:	f1b8 0f00 	cmp.w	r8, #0
 801732c:	f000 80f3 	beq.w	8017516 <rcl_node_init+0x206>
 8017330:	4640      	mov	r0, r8
 8017332:	f7f8 fd41 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017336:	2d00      	cmp	r5, #0
 8017338:	bf18      	it	ne
 801733a:	2c00      	cmpne	r4, #0
 801733c:	f080 0001 	eor.w	r0, r0, #1
 8017340:	bf0c      	ite	eq
 8017342:	f04f 0c01 	moveq.w	ip, #1
 8017346:	f04f 0c00 	movne.w	ip, #0
 801734a:	2e00      	cmp	r6, #0
 801734c:	bf08      	it	eq
 801734e:	f04c 0c01 	orreq.w	ip, ip, #1
 8017352:	ea4c 0c00 	orr.w	ip, ip, r0
 8017356:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 801735a:	f040 80dc 	bne.w	8017516 <rcl_node_init+0x206>
 801735e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8017362:	f1ba 0f00 	cmp.w	sl, #0
 8017366:	f040 80fc 	bne.w	8017562 <rcl_node_init+0x252>
 801736a:	2f00      	cmp	r7, #0
 801736c:	f000 80d3 	beq.w	8017516 <rcl_node_init+0x206>
 8017370:	4638      	mov	r0, r7
 8017372:	f7ff fe35 	bl	8016fe0 <rcl_context_is_valid>
 8017376:	4683      	mov	fp, r0
 8017378:	2800      	cmp	r0, #0
 801737a:	f000 80d2 	beq.w	8017522 <rcl_node_init+0x212>
 801737e:	4652      	mov	r2, sl
 8017380:	4630      	mov	r0, r6
 8017382:	a922      	add	r1, sp, #136	@ 0x88
 8017384:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8017388:	f003 f8b4 	bl	801a4f4 <rmw_validate_node_name>
 801738c:	4682      	mov	sl, r0
 801738e:	2800      	cmp	r0, #0
 8017390:	f040 80c3 	bne.w	801751a <rcl_node_init+0x20a>
 8017394:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8017396:	2800      	cmp	r0, #0
 8017398:	f040 80f1 	bne.w	801757e <rcl_node_init+0x26e>
 801739c:	4628      	mov	r0, r5
 801739e:	f7e8 ffa9 	bl	80002f4 <strlen>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	f040 80c0 	bne.w	8017528 <rcl_node_init+0x218>
 80173a8:	4d79      	ldr	r5, [pc, #484]	@ (8017590 <rcl_node_init+0x280>)
 80173aa:	a922      	add	r1, sp, #136	@ 0x88
 80173ac:	2200      	movs	r2, #0
 80173ae:	4628      	mov	r0, r5
 80173b0:	f003 f882 	bl	801a4b8 <rmw_validate_namespace>
 80173b4:	4682      	mov	sl, r0
 80173b6:	2800      	cmp	r0, #0
 80173b8:	f040 80af 	bne.w	801751a <rcl_node_init+0x20a>
 80173bc:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80173be:	2800      	cmp	r0, #0
 80173c0:	f040 80d5 	bne.w	801756e <rcl_node_init+0x25e>
 80173c4:	f8d8 3000 	ldr.w	r3, [r8]
 80173c8:	2078      	movs	r0, #120	@ 0x78
 80173ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80173ce:	4798      	blx	r3
 80173d0:	4682      	mov	sl, r0
 80173d2:	6060      	str	r0, [r4, #4]
 80173d4:	2800      	cmp	r0, #0
 80173d6:	f000 80cf 	beq.w	8017578 <rcl_node_init+0x268>
 80173da:	2200      	movs	r2, #0
 80173dc:	2300      	movs	r3, #0
 80173de:	a808      	add	r0, sp, #32
 80173e0:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 80173e4:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 80173e8:	f000 f902 	bl	80175f0 <rcl_node_get_default_options>
 80173ec:	a908      	add	r1, sp, #32
 80173ee:	4650      	mov	r0, sl
 80173f0:	2268      	movs	r2, #104	@ 0x68
 80173f2:	f005 fe1a 	bl	801d02a <memcpy>
 80173f6:	6861      	ldr	r1, [r4, #4]
 80173f8:	4640      	mov	r0, r8
 80173fa:	6027      	str	r7, [r4, #0]
 80173fc:	f000 f906 	bl	801760c <rcl_node_options_copy>
 8017400:	2800      	cmp	r0, #0
 8017402:	d158      	bne.n	80174b6 <rcl_node_init+0x1a6>
 8017404:	4628      	mov	r0, r5
 8017406:	f7e8 ff75 	bl	80002f4 <strlen>
 801740a:	4428      	add	r0, r5
 801740c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8017410:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8017414:	2b2f      	cmp	r3, #47	@ 0x2f
 8017416:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801741a:	9300      	str	r3, [sp, #0]
 801741c:	bf0c      	ite	eq
 801741e:	4b5d      	ldreq	r3, [pc, #372]	@ (8017594 <rcl_node_init+0x284>)
 8017420:	4b5d      	ldrne	r3, [pc, #372]	@ (8017598 <rcl_node_init+0x288>)
 8017422:	9302      	str	r3, [sp, #8]
 8017424:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017428:	9301      	str	r3, [sp, #4]
 801742a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801742e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017432:	f002 fc25 	bl	8019c80 <rcutils_format_string_limit>
 8017436:	6823      	ldr	r3, [r4, #0]
 8017438:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 801743c:	4631      	mov	r1, r6
 801743e:	6818      	ldr	r0, [r3, #0]
 8017440:	462a      	mov	r2, r5
 8017442:	6866      	ldr	r6, [r4, #4]
 8017444:	3028      	adds	r0, #40	@ 0x28
 8017446:	f7f9 f857 	bl	80104f8 <rmw_create_node>
 801744a:	6863      	ldr	r3, [r4, #4]
 801744c:	66b0      	str	r0, [r6, #104]	@ 0x68
 801744e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8017450:	2800      	cmp	r0, #0
 8017452:	d032      	beq.n	80174ba <rcl_node_init+0x1aa>
 8017454:	f7f9 f8e0 	bl	8010618 <rmw_node_get_graph_guard_condition>
 8017458:	4682      	mov	sl, r0
 801745a:	b360      	cbz	r0, 80174b6 <rcl_node_init+0x1a6>
 801745c:	f8d8 3000 	ldr.w	r3, [r8]
 8017460:	2008      	movs	r0, #8
 8017462:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8017466:	6866      	ldr	r6, [r4, #4]
 8017468:	4798      	blx	r3
 801746a:	6863      	ldr	r3, [r4, #4]
 801746c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801746e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8017472:	f1bb 0f00 	cmp.w	fp, #0
 8017476:	d020      	beq.n	80174ba <rcl_node_init+0x1aa>
 8017478:	a806      	add	r0, sp, #24
 801747a:	ae23      	add	r6, sp, #140	@ 0x8c
 801747c:	f004 fdba 	bl	801bff4 <rcl_get_zero_initialized_guard_condition>
 8017480:	a806      	add	r0, sp, #24
 8017482:	6863      	ldr	r3, [r4, #4]
 8017484:	46c4      	mov	ip, r8
 8017486:	c803      	ldmia	r0, {r0, r1}
 8017488:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 801748c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8017490:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017494:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017496:	f8dc 3000 	ldr.w	r3, [ip]
 801749a:	6033      	str	r3, [r6, #0]
 801749c:	ab28      	add	r3, sp, #160	@ 0xa0
 801749e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80174a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80174a6:	4651      	mov	r1, sl
 80174a8:	463a      	mov	r2, r7
 80174aa:	4670      	mov	r0, lr
 80174ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80174ae:	f004 fdf9 	bl	801c0a4 <rcl_guard_condition_init_from_rmw>
 80174b2:	4682      	mov	sl, r0
 80174b4:	b328      	cbz	r0, 8017502 <rcl_node_init+0x1f2>
 80174b6:	6863      	ldr	r3, [r4, #4]
 80174b8:	b1f3      	cbz	r3, 80174f8 <rcl_node_init+0x1e8>
 80174ba:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80174bc:	b128      	cbz	r0, 80174ca <rcl_node_init+0x1ba>
 80174be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174c6:	4798      	blx	r3
 80174c8:	6863      	ldr	r3, [r4, #4]
 80174ca:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80174cc:	b110      	cbz	r0, 80174d4 <rcl_node_init+0x1c4>
 80174ce:	f7f9 f825 	bl	801051c <rmw_destroy_node>
 80174d2:	6863      	ldr	r3, [r4, #4]
 80174d4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80174d6:	b148      	cbz	r0, 80174ec <rcl_node_init+0x1dc>
 80174d8:	f004 fe40 	bl	801c15c <rcl_guard_condition_fini>
 80174dc:	6863      	ldr	r3, [r4, #4]
 80174de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174e2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80174e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174e8:	4798      	blx	r3
 80174ea:	6863      	ldr	r3, [r4, #4]
 80174ec:	4618      	mov	r0, r3
 80174ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80174f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80174f6:	4798      	blx	r3
 80174f8:	2300      	movs	r3, #0
 80174fa:	f04f 0a01 	mov.w	sl, #1
 80174fe:	e9c4 3300 	strd	r3, r3, [r4]
 8017502:	f1b9 0f00 	cmp.w	r9, #0
 8017506:	d008      	beq.n	801751a <rcl_node_init+0x20a>
 8017508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801750c:	4628      	mov	r0, r5
 801750e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8017512:	4798      	blx	r3
 8017514:	e001      	b.n	801751a <rcl_node_init+0x20a>
 8017516:	f04f 0a0b 	mov.w	sl, #11
 801751a:	4650      	mov	r0, sl
 801751c:	b029      	add	sp, #164	@ 0xa4
 801751e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017522:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8017526:	e7f8      	b.n	801751a <rcl_node_init+0x20a>
 8017528:	782b      	ldrb	r3, [r5, #0]
 801752a:	2b2f      	cmp	r3, #47	@ 0x2f
 801752c:	f43f af3d 	beq.w	80173aa <rcl_node_init+0x9a>
 8017530:	9503      	str	r5, [sp, #12]
 8017532:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	4b18      	ldr	r3, [pc, #96]	@ (801759c <rcl_node_init+0x28c>)
 801753a:	9302      	str	r3, [sp, #8]
 801753c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017540:	9301      	str	r3, [sp, #4]
 8017542:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8017546:	f002 fb9b 	bl	8019c80 <rcutils_format_string_limit>
 801754a:	4605      	mov	r5, r0
 801754c:	b1e0      	cbz	r0, 8017588 <rcl_node_init+0x278>
 801754e:	2200      	movs	r2, #0
 8017550:	a922      	add	r1, sp, #136	@ 0x88
 8017552:	9222      	str	r2, [sp, #136]	@ 0x88
 8017554:	f002 ffb0 	bl	801a4b8 <rmw_validate_namespace>
 8017558:	4682      	mov	sl, r0
 801755a:	2800      	cmp	r0, #0
 801755c:	d1d4      	bne.n	8017508 <rcl_node_init+0x1f8>
 801755e:	46d9      	mov	r9, fp
 8017560:	e72c      	b.n	80173bc <rcl_node_init+0xac>
 8017562:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8017566:	4650      	mov	r0, sl
 8017568:	b029      	add	sp, #164	@ 0xa4
 801756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801756e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8017572:	f002 ffb3 	bl	801a4dc <rmw_namespace_validation_result_string>
 8017576:	e7c4      	b.n	8017502 <rcl_node_init+0x1f2>
 8017578:	f04f 0a0a 	mov.w	sl, #10
 801757c:	e7c1      	b.n	8017502 <rcl_node_init+0x1f2>
 801757e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8017582:	f003 f80b 	bl	801a59c <rmw_node_name_validation_result_string>
 8017586:	e7c8      	b.n	801751a <rcl_node_init+0x20a>
 8017588:	f04f 0a0a 	mov.w	sl, #10
 801758c:	e7c5      	b.n	801751a <rcl_node_init+0x20a>
 801758e:	bf00      	nop
 8017590:	0801df4c 	.word	0x0801df4c
 8017594:	0801df98 	.word	0x0801df98
 8017598:	0801df50 	.word	0x0801df50
 801759c:	0801e628 	.word	0x0801e628

080175a0 <rcl_node_is_valid>:
 80175a0:	b130      	cbz	r0, 80175b0 <rcl_node_is_valid+0x10>
 80175a2:	6843      	ldr	r3, [r0, #4]
 80175a4:	b123      	cbz	r3, 80175b0 <rcl_node_is_valid+0x10>
 80175a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80175a8:	b113      	cbz	r3, 80175b0 <rcl_node_is_valid+0x10>
 80175aa:	6800      	ldr	r0, [r0, #0]
 80175ac:	f7ff bd18 	b.w	8016fe0 <rcl_context_is_valid>
 80175b0:	2000      	movs	r0, #0
 80175b2:	4770      	bx	lr

080175b4 <rcl_node_get_name>:
 80175b4:	b120      	cbz	r0, 80175c0 <rcl_node_get_name+0xc>
 80175b6:	6840      	ldr	r0, [r0, #4]
 80175b8:	b110      	cbz	r0, 80175c0 <rcl_node_get_name+0xc>
 80175ba:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80175bc:	b100      	cbz	r0, 80175c0 <rcl_node_get_name+0xc>
 80175be:	6880      	ldr	r0, [r0, #8]
 80175c0:	4770      	bx	lr
 80175c2:	bf00      	nop

080175c4 <rcl_node_get_namespace>:
 80175c4:	b120      	cbz	r0, 80175d0 <rcl_node_get_namespace+0xc>
 80175c6:	6840      	ldr	r0, [r0, #4]
 80175c8:	b110      	cbz	r0, 80175d0 <rcl_node_get_namespace+0xc>
 80175ca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80175cc:	b100      	cbz	r0, 80175d0 <rcl_node_get_namespace+0xc>
 80175ce:	68c0      	ldr	r0, [r0, #12]
 80175d0:	4770      	bx	lr
 80175d2:	bf00      	nop

080175d4 <rcl_node_get_options>:
 80175d4:	b128      	cbz	r0, 80175e2 <rcl_node_get_options+0xe>
 80175d6:	6840      	ldr	r0, [r0, #4]
 80175d8:	b118      	cbz	r0, 80175e2 <rcl_node_get_options+0xe>
 80175da:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80175dc:	2b00      	cmp	r3, #0
 80175de:	bf08      	it	eq
 80175e0:	2000      	moveq	r0, #0
 80175e2:	4770      	bx	lr

080175e4 <rcl_node_get_rmw_handle>:
 80175e4:	b110      	cbz	r0, 80175ec <rcl_node_get_rmw_handle+0x8>
 80175e6:	6840      	ldr	r0, [r0, #4]
 80175e8:	b100      	cbz	r0, 80175ec <rcl_node_get_rmw_handle+0x8>
 80175ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80175ec:	4770      	bx	lr
 80175ee:	bf00      	nop

080175f0 <rcl_node_get_default_options>:
 80175f0:	b510      	push	{r4, lr}
 80175f2:	4604      	mov	r4, r0
 80175f4:	2268      	movs	r2, #104	@ 0x68
 80175f6:	2100      	movs	r1, #0
 80175f8:	f005 fc4e 	bl	801ce98 <memset>
 80175fc:	4620      	mov	r0, r4
 80175fe:	f7f8 fbcd 	bl	800fd9c <rcutils_get_default_allocator>
 8017602:	2301      	movs	r3, #1
 8017604:	4620      	mov	r0, r4
 8017606:	7523      	strb	r3, [r4, #20]
 8017608:	bd10      	pop	{r4, pc}
 801760a:	bf00      	nop

0801760c <rcl_node_options_copy>:
 801760c:	2800      	cmp	r0, #0
 801760e:	bf18      	it	ne
 8017610:	4288      	cmpne	r0, r1
 8017612:	d01b      	beq.n	801764c <rcl_node_options_copy+0x40>
 8017614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017616:	fab1 f681 	clz	r6, r1
 801761a:	460c      	mov	r4, r1
 801761c:	0976      	lsrs	r6, r6, #5
 801761e:	b199      	cbz	r1, 8017648 <rcl_node_options_copy+0x3c>
 8017620:	4605      	mov	r5, r0
 8017622:	8a87      	ldrh	r7, [r0, #20]
 8017624:	4684      	mov	ip, r0
 8017626:	468e      	mov	lr, r1
 8017628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801762a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801762e:	682b      	ldr	r3, [r5, #0]
 8017630:	2250      	movs	r2, #80	@ 0x50
 8017632:	f10c 0118 	add.w	r1, ip, #24
 8017636:	f104 0018 	add.w	r0, r4, #24
 801763a:	f8ce 3000 	str.w	r3, [lr]
 801763e:	82a7      	strh	r7, [r4, #20]
 8017640:	f005 fcf3 	bl	801d02a <memcpy>
 8017644:	4630      	mov	r0, r6
 8017646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017648:	200b      	movs	r0, #11
 801764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801764c:	200b      	movs	r0, #11
 801764e:	4770      	bx	lr

08017650 <rcl_node_resolve_name>:
 8017650:	b082      	sub	sp, #8
 8017652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017656:	b091      	sub	sp, #68	@ 0x44
 8017658:	ac1a      	add	r4, sp, #104	@ 0x68
 801765a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801765e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017662:	2800      	cmp	r0, #0
 8017664:	d03d      	beq.n	80176e2 <rcl_node_resolve_name+0x92>
 8017666:	460c      	mov	r4, r1
 8017668:	4605      	mov	r5, r0
 801766a:	f7ff ffb3 	bl	80175d4 <rcl_node_get_options>
 801766e:	2800      	cmp	r0, #0
 8017670:	d03a      	beq.n	80176e8 <rcl_node_resolve_name+0x98>
 8017672:	4628      	mov	r0, r5
 8017674:	f7ff ff9e 	bl	80175b4 <rcl_node_get_name>
 8017678:	4606      	mov	r6, r0
 801767a:	4628      	mov	r0, r5
 801767c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801767e:	f7ff ffa1 	bl	80175c4 <rcl_node_get_namespace>
 8017682:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8017686:	4607      	mov	r7, r0
 8017688:	46ac      	mov	ip, r5
 801768a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801768e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017692:	f8de 3000 	ldr.w	r3, [lr]
 8017696:	f8cc 3000 	str.w	r3, [ip]
 801769a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801769c:	b30b      	cbz	r3, 80176e2 <rcl_node_resolve_name+0x92>
 801769e:	4689      	mov	r9, r1
 80176a0:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 80176a4:	f002 fc64 	bl	8019f70 <rcutils_get_zero_initialized_string_map>
 80176a8:	ab10      	add	r3, sp, #64	@ 0x40
 80176aa:	9008      	str	r0, [sp, #32]
 80176ac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80176b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80176b4:	2100      	movs	r1, #0
 80176b6:	a808      	add	r0, sp, #32
 80176b8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80176bc:	f002 fcce 	bl	801a05c <rcutils_string_map_init>
 80176c0:	4683      	mov	fp, r0
 80176c2:	b1a0      	cbz	r0, 80176ee <rcl_node_resolve_name+0x9e>
 80176c4:	f7f8 fb86 	bl	800fdd4 <rcutils_get_error_string>
 80176c8:	f7f8 fb9a 	bl	800fe00 <rcutils_reset_error>
 80176cc:	f1bb 0f0a 	cmp.w	fp, #10
 80176d0:	bf18      	it	ne
 80176d2:	f04f 0b01 	movne.w	fp, #1
 80176d6:	4658      	mov	r0, fp
 80176d8:	b011      	add	sp, #68	@ 0x44
 80176da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176de:	b002      	add	sp, #8
 80176e0:	4770      	bx	lr
 80176e2:	f04f 0b0b 	mov.w	fp, #11
 80176e6:	e7f6      	b.n	80176d6 <rcl_node_resolve_name+0x86>
 80176e8:	f04f 0b01 	mov.w	fp, #1
 80176ec:	e7f3      	b.n	80176d6 <rcl_node_resolve_name+0x86>
 80176ee:	9009      	str	r0, [sp, #36]	@ 0x24
 80176f0:	9007      	str	r0, [sp, #28]
 80176f2:	a808      	add	r0, sp, #32
 80176f4:	f004 fc78 	bl	801bfe8 <rcl_get_default_topic_name_substitutions>
 80176f8:	4683      	mov	fp, r0
 80176fa:	b180      	cbz	r0, 801771e <rcl_node_resolve_name+0xce>
 80176fc:	280a      	cmp	r0, #10
 80176fe:	a808      	add	r0, sp, #32
 8017700:	bf18      	it	ne
 8017702:	f04f 0b01 	movne.w	fp, #1
 8017706:	f002 fce9 	bl	801a0dc <rcutils_string_map_fini>
 801770a:	4604      	mov	r4, r0
 801770c:	2800      	cmp	r0, #0
 801770e:	d15b      	bne.n	80177c8 <rcl_node_resolve_name+0x178>
 8017710:	4651      	mov	r1, sl
 8017712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017714:	47c8      	blx	r9
 8017716:	4651      	mov	r1, sl
 8017718:	4620      	mov	r0, r4
 801771a:	47c8      	blx	r9
 801771c:	e7db      	b.n	80176d6 <rcl_node_resolve_name+0x86>
 801771e:	ab09      	add	r3, sp, #36	@ 0x24
 8017720:	46ec      	mov	ip, sp
 8017722:	9305      	str	r3, [sp, #20]
 8017724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017726:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801772a:	682b      	ldr	r3, [r5, #0]
 801772c:	463a      	mov	r2, r7
 801772e:	4631      	mov	r1, r6
 8017730:	4620      	mov	r0, r4
 8017732:	f8cc 3000 	str.w	r3, [ip]
 8017736:	ab08      	add	r3, sp, #32
 8017738:	f004 faf6 	bl	801bd28 <rcl_expand_topic_name>
 801773c:	4683      	mov	fp, r0
 801773e:	b9d8      	cbnz	r0, 8017778 <rcl_node_resolve_name+0x128>
 8017740:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017742:	4602      	mov	r2, r0
 8017744:	9009      	str	r0, [sp, #36]	@ 0x24
 8017746:	a90a      	add	r1, sp, #40	@ 0x28
 8017748:	4620      	mov	r0, r4
 801774a:	f002 fde5 	bl	801a318 <rmw_validate_full_topic_name>
 801774e:	bb50      	cbnz	r0, 80177a6 <rcl_node_resolve_name+0x156>
 8017750:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017752:	2d00      	cmp	r5, #0
 8017754:	d140      	bne.n	80177d8 <rcl_node_resolve_name+0x188>
 8017756:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017758:	a808      	add	r0, sp, #32
 801775a:	601c      	str	r4, [r3, #0]
 801775c:	f002 fcbe 	bl	801a0dc <rcutils_string_map_fini>
 8017760:	4683      	mov	fp, r0
 8017762:	2800      	cmp	r0, #0
 8017764:	d043      	beq.n	80177ee <rcl_node_resolve_name+0x19e>
 8017766:	f7f8 fb35 	bl	800fdd4 <rcutils_get_error_string>
 801776a:	46a8      	mov	r8, r5
 801776c:	f04f 0b01 	mov.w	fp, #1
 8017770:	462c      	mov	r4, r5
 8017772:	f7f8 fb45 	bl	800fe00 <rcutils_reset_error>
 8017776:	e00a      	b.n	801778e <rcl_node_resolve_name+0x13e>
 8017778:	2867      	cmp	r0, #103	@ 0x67
 801777a:	bf14      	ite	ne
 801777c:	f04f 0800 	movne.w	r8, #0
 8017780:	f008 0801 	andeq.w	r8, r8, #1
 8017784:	9c07      	ldr	r4, [sp, #28]
 8017786:	a808      	add	r0, sp, #32
 8017788:	f002 fca8 	bl	801a0dc <rcutils_string_map_fini>
 801778c:	bb50      	cbnz	r0, 80177e4 <rcl_node_resolve_name+0x194>
 801778e:	4651      	mov	r1, sl
 8017790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017792:	47c8      	blx	r9
 8017794:	4651      	mov	r1, sl
 8017796:	4620      	mov	r0, r4
 8017798:	47c8      	blx	r9
 801779a:	f1b8 0f00 	cmp.w	r8, #0
 801779e:	bf18      	it	ne
 80177a0:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 80177a4:	e797      	b.n	80176d6 <rcl_node_resolve_name+0x86>
 80177a6:	f7f8 fb15 	bl	800fdd4 <rcutils_get_error_string>
 80177aa:	f7f8 fb29 	bl	800fe00 <rcutils_reset_error>
 80177ae:	a808      	add	r0, sp, #32
 80177b0:	f002 fc94 	bl	801a0dc <rcutils_string_map_fini>
 80177b4:	b998      	cbnz	r0, 80177de <rcl_node_resolve_name+0x18e>
 80177b6:	4651      	mov	r1, sl
 80177b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177ba:	47c8      	blx	r9
 80177bc:	4651      	mov	r1, sl
 80177be:	4620      	mov	r0, r4
 80177c0:	f04f 0b01 	mov.w	fp, #1
 80177c4:	47c8      	blx	r9
 80177c6:	e786      	b.n	80176d6 <rcl_node_resolve_name+0x86>
 80177c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80177cc:	f7f8 fb02 	bl	800fdd4 <rcutils_get_error_string>
 80177d0:	f7f8 fb16 	bl	800fe00 <rcutils_reset_error>
 80177d4:	4644      	mov	r4, r8
 80177d6:	e7da      	b.n	801778e <rcl_node_resolve_name+0x13e>
 80177d8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80177dc:	e7d3      	b.n	8017786 <rcl_node_resolve_name+0x136>
 80177de:	46d8      	mov	r8, fp
 80177e0:	f04f 0b01 	mov.w	fp, #1
 80177e4:	f7f8 faf6 	bl	800fdd4 <rcutils_get_error_string>
 80177e8:	f7f8 fb0a 	bl	800fe00 <rcutils_reset_error>
 80177ec:	e7cf      	b.n	801778e <rcl_node_resolve_name+0x13e>
 80177ee:	4651      	mov	r1, sl
 80177f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177f2:	47c8      	blx	r9
 80177f4:	4651      	mov	r1, sl
 80177f6:	4658      	mov	r0, fp
 80177f8:	47c8      	blx	r9
 80177fa:	e76c      	b.n	80176d6 <rcl_node_resolve_name+0x86>

080177fc <exact_match_lookup>:
 80177fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177fe:	f102 0708 	add.w	r7, r2, #8
 8017802:	460b      	mov	r3, r1
 8017804:	b085      	sub	sp, #20
 8017806:	4614      	mov	r4, r2
 8017808:	4606      	mov	r6, r0
 801780a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801780e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017812:	4618      	mov	r0, r3
 8017814:	4919      	ldr	r1, [pc, #100]	@ (801787c <exact_match_lookup+0x80>)
 8017816:	e894 000c 	ldmia.w	r4, {r2, r3}
 801781a:	f002 fa23 	bl	8019c64 <rcutils_join_path>
 801781e:	7833      	ldrb	r3, [r6, #0]
 8017820:	4605      	mov	r5, r0
 8017822:	2b2f      	cmp	r3, #47	@ 0x2f
 8017824:	d023      	beq.n	801786e <exact_match_lookup+0x72>
 8017826:	f104 030c 	add.w	r3, r4, #12
 801782a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801782e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017832:	1c70      	adds	r0, r6, #1
 8017834:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017838:	f002 fa1a 	bl	8019c70 <rcutils_to_native_path>
 801783c:	4606      	mov	r6, r0
 801783e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017842:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017846:	4631      	mov	r1, r6
 8017848:	4628      	mov	r0, r5
 801784a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801784e:	f002 fa09 	bl	8019c64 <rcutils_join_path>
 8017852:	4603      	mov	r3, r0
 8017854:	4630      	mov	r0, r6
 8017856:	6862      	ldr	r2, [r4, #4]
 8017858:	461e      	mov	r6, r3
 801785a:	6921      	ldr	r1, [r4, #16]
 801785c:	4790      	blx	r2
 801785e:	4628      	mov	r0, r5
 8017860:	4635      	mov	r5, r6
 8017862:	6863      	ldr	r3, [r4, #4]
 8017864:	6921      	ldr	r1, [r4, #16]
 8017866:	4798      	blx	r3
 8017868:	4628      	mov	r0, r5
 801786a:	b005      	add	sp, #20
 801786c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801786e:	7873      	ldrb	r3, [r6, #1]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d1d8      	bne.n	8017826 <exact_match_lookup+0x2a>
 8017874:	4628      	mov	r0, r5
 8017876:	b005      	add	sp, #20
 8017878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801787a:	bf00      	nop
 801787c:	0801e670 	.word	0x0801e670

08017880 <rcl_get_secure_root>:
 8017880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017884:	b085      	sub	sp, #20
 8017886:	b168      	cbz	r0, 80178a4 <rcl_get_secure_root+0x24>
 8017888:	4607      	mov	r7, r0
 801788a:	4608      	mov	r0, r1
 801788c:	460c      	mov	r4, r1
 801788e:	f7f8 fa93 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017892:	b138      	cbz	r0, 80178a4 <rcl_get_secure_root+0x24>
 8017894:	2300      	movs	r3, #0
 8017896:	482d      	ldr	r0, [pc, #180]	@ (801794c <rcl_get_secure_root+0xcc>)
 8017898:	a903      	add	r1, sp, #12
 801789a:	9303      	str	r3, [sp, #12]
 801789c:	f002 f9c8 	bl	8019c30 <rcutils_get_env>
 80178a0:	4605      	mov	r5, r0
 80178a2:	b120      	cbz	r0, 80178ae <rcl_get_secure_root+0x2e>
 80178a4:	2500      	movs	r5, #0
 80178a6:	4628      	mov	r0, r5
 80178a8:	b005      	add	sp, #20
 80178aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178ae:	9b03      	ldr	r3, [sp, #12]
 80178b0:	781a      	ldrb	r2, [r3, #0]
 80178b2:	2a00      	cmp	r2, #0
 80178b4:	d0f6      	beq.n	80178a4 <rcl_get_secure_root+0x24>
 80178b6:	f104 090c 	add.w	r9, r4, #12
 80178ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80178be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80178c2:	4618      	mov	r0, r3
 80178c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80178c8:	f002 fb14 	bl	8019ef4 <rcutils_strdup>
 80178cc:	4680      	mov	r8, r0
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d0e8      	beq.n	80178a4 <rcl_get_secure_root+0x24>
 80178d2:	a903      	add	r1, sp, #12
 80178d4:	481e      	ldr	r0, [pc, #120]	@ (8017950 <rcl_get_secure_root+0xd0>)
 80178d6:	9503      	str	r5, [sp, #12]
 80178d8:	f002 f9aa 	bl	8019c30 <rcutils_get_env>
 80178dc:	b160      	cbz	r0, 80178f8 <rcl_get_secure_root+0x78>
 80178de:	2600      	movs	r6, #0
 80178e0:	4630      	mov	r0, r6
 80178e2:	6863      	ldr	r3, [r4, #4]
 80178e4:	6921      	ldr	r1, [r4, #16]
 80178e6:	4798      	blx	r3
 80178e8:	4640      	mov	r0, r8
 80178ea:	6863      	ldr	r3, [r4, #4]
 80178ec:	6921      	ldr	r1, [r4, #16]
 80178ee:	4798      	blx	r3
 80178f0:	4628      	mov	r0, r5
 80178f2:	b005      	add	sp, #20
 80178f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178f8:	9b03      	ldr	r3, [sp, #12]
 80178fa:	781e      	ldrb	r6, [r3, #0]
 80178fc:	b1f6      	cbz	r6, 801793c <rcl_get_secure_root+0xbc>
 80178fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8017902:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017906:	4618      	mov	r0, r3
 8017908:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801790c:	f002 faf2 	bl	8019ef4 <rcutils_strdup>
 8017910:	4606      	mov	r6, r0
 8017912:	2800      	cmp	r0, #0
 8017914:	d0e3      	beq.n	80178de <rcl_get_secure_root+0x5e>
 8017916:	4622      	mov	r2, r4
 8017918:	4641      	mov	r1, r8
 801791a:	f7ff ff6f 	bl	80177fc <exact_match_lookup>
 801791e:	4605      	mov	r5, r0
 8017920:	2d00      	cmp	r5, #0
 8017922:	d0dd      	beq.n	80178e0 <rcl_get_secure_root+0x60>
 8017924:	4628      	mov	r0, r5
 8017926:	f002 f99b 	bl	8019c60 <rcutils_is_directory>
 801792a:	4603      	mov	r3, r0
 801792c:	2800      	cmp	r0, #0
 801792e:	d1d7      	bne.n	80178e0 <rcl_get_secure_root+0x60>
 8017930:	4628      	mov	r0, r5
 8017932:	6921      	ldr	r1, [r4, #16]
 8017934:	461d      	mov	r5, r3
 8017936:	6863      	ldr	r3, [r4, #4]
 8017938:	4798      	blx	r3
 801793a:	e7d1      	b.n	80178e0 <rcl_get_secure_root+0x60>
 801793c:	4622      	mov	r2, r4
 801793e:	4638      	mov	r0, r7
 8017940:	4641      	mov	r1, r8
 8017942:	f7ff ff5b 	bl	80177fc <exact_match_lookup>
 8017946:	4605      	mov	r5, r0
 8017948:	e7ea      	b.n	8017920 <rcl_get_secure_root+0xa0>
 801794a:	bf00      	nop
 801794c:	0801e67c 	.word	0x0801e67c
 8017950:	0801e694 	.word	0x0801e694

08017954 <rcl_get_security_options_from_environment>:
 8017954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017958:	b082      	sub	sp, #8
 801795a:	2300      	movs	r3, #0
 801795c:	4606      	mov	r6, r0
 801795e:	460f      	mov	r7, r1
 8017960:	4821      	ldr	r0, [pc, #132]	@ (80179e8 <rcl_get_security_options_from_environment+0x94>)
 8017962:	a901      	add	r1, sp, #4
 8017964:	4690      	mov	r8, r2
 8017966:	9301      	str	r3, [sp, #4]
 8017968:	f002 f962 	bl	8019c30 <rcutils_get_env>
 801796c:	b120      	cbz	r0, 8017978 <rcl_get_security_options_from_environment+0x24>
 801796e:	2501      	movs	r5, #1
 8017970:	4628      	mov	r0, r5
 8017972:	b002      	add	sp, #8
 8017974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017978:	4604      	mov	r4, r0
 801797a:	491c      	ldr	r1, [pc, #112]	@ (80179ec <rcl_get_security_options_from_environment+0x98>)
 801797c:	9801      	ldr	r0, [sp, #4]
 801797e:	f7e8 fcaf 	bl	80002e0 <strcmp>
 8017982:	4605      	mov	r5, r0
 8017984:	b9f0      	cbnz	r0, 80179c4 <rcl_get_security_options_from_environment+0x70>
 8017986:	9001      	str	r0, [sp, #4]
 8017988:	f1b8 0f00 	cmp.w	r8, #0
 801798c:	d021      	beq.n	80179d2 <rcl_get_security_options_from_environment+0x7e>
 801798e:	a901      	add	r1, sp, #4
 8017990:	4817      	ldr	r0, [pc, #92]	@ (80179f0 <rcl_get_security_options_from_environment+0x9c>)
 8017992:	f002 f94d 	bl	8019c30 <rcutils_get_env>
 8017996:	2800      	cmp	r0, #0
 8017998:	d1e9      	bne.n	801796e <rcl_get_security_options_from_environment+0x1a>
 801799a:	4916      	ldr	r1, [pc, #88]	@ (80179f4 <rcl_get_security_options_from_environment+0xa0>)
 801799c:	9801      	ldr	r0, [sp, #4]
 801799e:	f7e8 fc9f 	bl	80002e0 <strcmp>
 80179a2:	4603      	mov	r3, r0
 80179a4:	4639      	mov	r1, r7
 80179a6:	4630      	mov	r0, r6
 80179a8:	fab3 f383 	clz	r3, r3
 80179ac:	095b      	lsrs	r3, r3, #5
 80179ae:	f888 3000 	strb.w	r3, [r8]
 80179b2:	f7ff ff65 	bl	8017880 <rcl_get_secure_root>
 80179b6:	b170      	cbz	r0, 80179d6 <rcl_get_security_options_from_environment+0x82>
 80179b8:	f8c8 0004 	str.w	r0, [r8, #4]
 80179bc:	4628      	mov	r0, r5
 80179be:	b002      	add	sp, #8
 80179c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c4:	4625      	mov	r5, r4
 80179c6:	f888 4000 	strb.w	r4, [r8]
 80179ca:	4628      	mov	r0, r5
 80179cc:	b002      	add	sp, #8
 80179ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179d2:	250b      	movs	r5, #11
 80179d4:	e7cc      	b.n	8017970 <rcl_get_security_options_from_environment+0x1c>
 80179d6:	f898 5000 	ldrb.w	r5, [r8]
 80179da:	f1a5 0501 	sub.w	r5, r5, #1
 80179de:	fab5 f585 	clz	r5, r5
 80179e2:	096d      	lsrs	r5, r5, #5
 80179e4:	e7c4      	b.n	8017970 <rcl_get_security_options_from_environment+0x1c>
 80179e6:	bf00      	nop
 80179e8:	0801e634 	.word	0x0801e634
 80179ec:	0801e648 	.word	0x0801e648
 80179f0:	0801e650 	.word	0x0801e650
 80179f4:	0801e668 	.word	0x0801e668

080179f8 <rcl_service_get_rmw_handle>:
 80179f8:	b118      	cbz	r0, 8017a02 <rcl_service_get_rmw_handle+0xa>
 80179fa:	6800      	ldr	r0, [r0, #0]
 80179fc:	b108      	cbz	r0, 8017a02 <rcl_service_get_rmw_handle+0xa>
 80179fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017a02:	4770      	bx	lr

08017a04 <rcl_take_request>:
 8017a04:	b570      	push	{r4, r5, r6, lr}
 8017a06:	468e      	mov	lr, r1
 8017a08:	b08c      	sub	sp, #48	@ 0x30
 8017a0a:	460c      	mov	r4, r1
 8017a0c:	4616      	mov	r6, r2
 8017a0e:	f10d 0c18 	add.w	ip, sp, #24
 8017a12:	4605      	mov	r5, r0
 8017a14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017a20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017a24:	b30d      	cbz	r5, 8017a6a <rcl_take_request+0x66>
 8017a26:	682b      	ldr	r3, [r5, #0]
 8017a28:	b1fb      	cbz	r3, 8017a6a <rcl_take_request+0x66>
 8017a2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017a2e:	b1e0      	cbz	r0, 8017a6a <rcl_take_request+0x66>
 8017a30:	b336      	cbz	r6, 8017a80 <rcl_take_request+0x7c>
 8017a32:	2300      	movs	r3, #0
 8017a34:	4632      	mov	r2, r6
 8017a36:	a902      	add	r1, sp, #8
 8017a38:	f88d 3007 	strb.w	r3, [sp, #7]
 8017a3c:	f10d 0307 	add.w	r3, sp, #7
 8017a40:	f002 ffce 	bl	801a9e0 <rmw_take_request>
 8017a44:	4605      	mov	r5, r0
 8017a46:	b198      	cbz	r0, 8017a70 <rcl_take_request+0x6c>
 8017a48:	280a      	cmp	r0, #10
 8017a4a:	bf18      	it	ne
 8017a4c:	2501      	movne	r5, #1
 8017a4e:	f10d 0e18 	add.w	lr, sp, #24
 8017a52:	46a4      	mov	ip, r4
 8017a54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017a60:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017a64:	4628      	mov	r0, r5
 8017a66:	b00c      	add	sp, #48	@ 0x30
 8017a68:	bd70      	pop	{r4, r5, r6, pc}
 8017a6a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8017a6e:	e7ee      	b.n	8017a4e <rcl_take_request+0x4a>
 8017a70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017a74:	f240 2359 	movw	r3, #601	@ 0x259
 8017a78:	2a00      	cmp	r2, #0
 8017a7a:	bf08      	it	eq
 8017a7c:	461d      	moveq	r5, r3
 8017a7e:	e7e6      	b.n	8017a4e <rcl_take_request+0x4a>
 8017a80:	250b      	movs	r5, #11
 8017a82:	e7e4      	b.n	8017a4e <rcl_take_request+0x4a>

08017a84 <rcl_send_response>:
 8017a84:	b170      	cbz	r0, 8017aa4 <rcl_send_response+0x20>
 8017a86:	6800      	ldr	r0, [r0, #0]
 8017a88:	b160      	cbz	r0, 8017aa4 <rcl_send_response+0x20>
 8017a8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017a8e:	b148      	cbz	r0, 8017aa4 <rcl_send_response+0x20>
 8017a90:	b169      	cbz	r1, 8017aae <rcl_send_response+0x2a>
 8017a92:	b510      	push	{r4, lr}
 8017a94:	b14a      	cbz	r2, 8017aaa <rcl_send_response+0x26>
 8017a96:	f003 f801 	bl	801aa9c <rmw_send_response>
 8017a9a:	b110      	cbz	r0, 8017aa2 <rcl_send_response+0x1e>
 8017a9c:	2802      	cmp	r0, #2
 8017a9e:	bf18      	it	ne
 8017aa0:	2001      	movne	r0, #1
 8017aa2:	bd10      	pop	{r4, pc}
 8017aa4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8017aa8:	4770      	bx	lr
 8017aaa:	200b      	movs	r0, #11
 8017aac:	bd10      	pop	{r4, pc}
 8017aae:	200b      	movs	r0, #11
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop

08017ab4 <rcl_service_is_valid>:
 8017ab4:	b130      	cbz	r0, 8017ac4 <rcl_service_is_valid+0x10>
 8017ab6:	6800      	ldr	r0, [r0, #0]
 8017ab8:	b120      	cbz	r0, 8017ac4 <rcl_service_is_valid+0x10>
 8017aba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017abe:	3800      	subs	r0, #0
 8017ac0:	bf18      	it	ne
 8017ac2:	2001      	movne	r0, #1
 8017ac4:	4770      	bx	lr
 8017ac6:	bf00      	nop

08017ac8 <rcl_take>:
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	d049      	beq.n	8017b60 <rcl_take+0x98>
 8017acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ad0:	4615      	mov	r5, r2
 8017ad2:	6802      	ldr	r2, [r0, #0]
 8017ad4:	b0a4      	sub	sp, #144	@ 0x90
 8017ad6:	4604      	mov	r4, r0
 8017ad8:	2a00      	cmp	r2, #0
 8017ada:	d039      	beq.n	8017b50 <rcl_take+0x88>
 8017adc:	461f      	mov	r7, r3
 8017ade:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8017ae2:	b3ab      	cbz	r3, 8017b50 <rcl_take+0x88>
 8017ae4:	460e      	mov	r6, r1
 8017ae6:	2900      	cmp	r1, #0
 8017ae8:	d038      	beq.n	8017b5c <rcl_take+0x94>
 8017aea:	2d00      	cmp	r5, #0
 8017aec:	d03c      	beq.n	8017b68 <rcl_take+0xa0>
 8017aee:	a802      	add	r0, sp, #8
 8017af0:	f04f 0800 	mov.w	r8, #0
 8017af4:	f002 fc08 	bl	801a308 <rmw_get_zero_initialized_message_info>
 8017af8:	f10d 0c08 	add.w	ip, sp, #8
 8017afc:	46ae      	mov	lr, r5
 8017afe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017b06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017b0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017b16:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8017b1a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8017b1e:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8017b22:	462b      	mov	r3, r5
 8017b24:	6820      	ldr	r0, [r4, #0]
 8017b26:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8017b2a:	4631      	mov	r1, r6
 8017b2c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b30:	9700      	str	r7, [sp, #0]
 8017b32:	f003 f857 	bl	801abe4 <rmw_take_with_info>
 8017b36:	4603      	mov	r3, r0
 8017b38:	b9c0      	cbnz	r0, 8017b6c <rcl_take+0xa4>
 8017b3a:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8017b3e:	f240 1291 	movw	r2, #401	@ 0x191
 8017b42:	2900      	cmp	r1, #0
 8017b44:	bf08      	it	eq
 8017b46:	4613      	moveq	r3, r2
 8017b48:	4618      	mov	r0, r3
 8017b4a:	b024      	add	sp, #144	@ 0x90
 8017b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b50:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017b54:	4618      	mov	r0, r3
 8017b56:	b024      	add	sp, #144	@ 0x90
 8017b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b5c:	230b      	movs	r3, #11
 8017b5e:	e7f3      	b.n	8017b48 <rcl_take+0x80>
 8017b60:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8017b64:	4618      	mov	r0, r3
 8017b66:	4770      	bx	lr
 8017b68:	ad14      	add	r5, sp, #80	@ 0x50
 8017b6a:	e7c0      	b.n	8017aee <rcl_take+0x26>
 8017b6c:	f7ff fa1a 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 8017b70:	4603      	mov	r3, r0
 8017b72:	e7e9      	b.n	8017b48 <rcl_take+0x80>

08017b74 <rcl_subscription_get_rmw_handle>:
 8017b74:	b118      	cbz	r0, 8017b7e <rcl_subscription_get_rmw_handle+0xa>
 8017b76:	6800      	ldr	r0, [r0, #0]
 8017b78:	b108      	cbz	r0, 8017b7e <rcl_subscription_get_rmw_handle+0xa>
 8017b7a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b7e:	4770      	bx	lr

08017b80 <rcl_subscription_is_valid>:
 8017b80:	b130      	cbz	r0, 8017b90 <rcl_subscription_is_valid+0x10>
 8017b82:	6800      	ldr	r0, [r0, #0]
 8017b84:	b120      	cbz	r0, 8017b90 <rcl_subscription_is_valid+0x10>
 8017b86:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8017b8a:	3800      	subs	r0, #0
 8017b8c:	bf18      	it	ne
 8017b8e:	2001      	movne	r0, #1
 8017b90:	4770      	bx	lr
 8017b92:	bf00      	nop

08017b94 <rcl_get_system_time>:
 8017b94:	4608      	mov	r0, r1
 8017b96:	f7f8 b94f 	b.w	800fe38 <rcutils_system_time_now>
 8017b9a:	bf00      	nop

08017b9c <rcl_get_steady_time>:
 8017b9c:	4608      	mov	r0, r1
 8017b9e:	f7f8 b971 	b.w	800fe84 <rcutils_steady_time_now>
 8017ba2:	bf00      	nop

08017ba4 <rcl_get_ros_time>:
 8017ba4:	7a03      	ldrb	r3, [r0, #8]
 8017ba6:	b510      	push	{r4, lr}
 8017ba8:	460c      	mov	r4, r1
 8017baa:	b143      	cbz	r3, 8017bbe <rcl_get_ros_time+0x1a>
 8017bac:	2105      	movs	r1, #5
 8017bae:	f001 ff9b 	bl	8019ae8 <__atomic_load_8>
 8017bb2:	4602      	mov	r2, r0
 8017bb4:	460b      	mov	r3, r1
 8017bb6:	2000      	movs	r0, #0
 8017bb8:	e9c4 2300 	strd	r2, r3, [r4]
 8017bbc:	bd10      	pop	{r4, pc}
 8017bbe:	4608      	mov	r0, r1
 8017bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bc4:	f7f8 b938 	b.w	800fe38 <rcutils_system_time_now>

08017bc8 <rcl_clock_init>:
 8017bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bca:	4605      	mov	r5, r0
 8017bcc:	4610      	mov	r0, r2
 8017bce:	4614      	mov	r4, r2
 8017bd0:	460e      	mov	r6, r1
 8017bd2:	f7f8 f8f1 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017bd6:	b128      	cbz	r0, 8017be4 <rcl_clock_init+0x1c>
 8017bd8:	2d03      	cmp	r5, #3
 8017bda:	d803      	bhi.n	8017be4 <rcl_clock_init+0x1c>
 8017bdc:	e8df f005 	tbb	[pc, r5]
 8017be0:	0659301f 	.word	0x0659301f
 8017be4:	f04f 0c0b 	mov.w	ip, #11
 8017be8:	4660      	mov	r0, ip
 8017bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bec:	2c00      	cmp	r4, #0
 8017bee:	d0f9      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017bf0:	fab6 f386 	clz	r3, r6
 8017bf4:	095b      	lsrs	r3, r3, #5
 8017bf6:	2e00      	cmp	r6, #0
 8017bf8:	d0f4      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017bfa:	6133      	str	r3, [r6, #16]
 8017bfc:	469c      	mov	ip, r3
 8017bfe:	f106 0514 	add.w	r5, r6, #20
 8017c02:	4f32      	ldr	r7, [pc, #200]	@ (8017ccc <rcl_clock_init+0x104>)
 8017c04:	f04f 0e03 	mov.w	lr, #3
 8017c08:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c10:	6823      	ldr	r3, [r4, #0]
 8017c12:	4660      	mov	r0, ip
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	60f7      	str	r7, [r6, #12]
 8017c18:	f886 e000 	strb.w	lr, [r6]
 8017c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c1e:	2e00      	cmp	r6, #0
 8017c20:	d0e0      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017c22:	2300      	movs	r3, #0
 8017c24:	f106 0514 	add.w	r5, r6, #20
 8017c28:	7033      	strb	r3, [r6, #0]
 8017c2a:	469c      	mov	ip, r3
 8017c2c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017c30:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017c34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017c38:	6823      	ldr	r3, [r4, #0]
 8017c3a:	4660      	mov	r0, ip
 8017c3c:	602b      	str	r3, [r5, #0]
 8017c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c40:	2c00      	cmp	r4, #0
 8017c42:	d0cf      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017c44:	fab6 f586 	clz	r5, r6
 8017c48:	096d      	lsrs	r5, r5, #5
 8017c4a:	2e00      	cmp	r6, #0
 8017c4c:	d0ca      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017c4e:	46a6      	mov	lr, r4
 8017c50:	7035      	strb	r5, [r6, #0]
 8017c52:	f106 0c14 	add.w	ip, r6, #20
 8017c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017c5a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017c5e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8017c62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017c66:	f8de 3000 	ldr.w	r3, [lr]
 8017c6a:	2010      	movs	r0, #16
 8017c6c:	f8cc 3000 	str.w	r3, [ip]
 8017c70:	6823      	ldr	r3, [r4, #0]
 8017c72:	6921      	ldr	r1, [r4, #16]
 8017c74:	4798      	blx	r3
 8017c76:	6130      	str	r0, [r6, #16]
 8017c78:	b320      	cbz	r0, 8017cc4 <rcl_clock_init+0xfc>
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	46ac      	mov	ip, r5
 8017c80:	7205      	strb	r5, [r0, #8]
 8017c82:	e9c0 2300 	strd	r2, r3, [r0]
 8017c86:	4a12      	ldr	r2, [pc, #72]	@ (8017cd0 <rcl_clock_init+0x108>)
 8017c88:	2301      	movs	r3, #1
 8017c8a:	4660      	mov	r0, ip
 8017c8c:	60f2      	str	r2, [r6, #12]
 8017c8e:	7033      	strb	r3, [r6, #0]
 8017c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c92:	2c00      	cmp	r4, #0
 8017c94:	d0a6      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017c96:	fab6 f386 	clz	r3, r6
 8017c9a:	095b      	lsrs	r3, r3, #5
 8017c9c:	2e00      	cmp	r6, #0
 8017c9e:	d0a1      	beq.n	8017be4 <rcl_clock_init+0x1c>
 8017ca0:	6133      	str	r3, [r6, #16]
 8017ca2:	469c      	mov	ip, r3
 8017ca4:	f106 0514 	add.w	r5, r6, #20
 8017ca8:	f8df e028 	ldr.w	lr, [pc, #40]	@ 8017cd4 <rcl_clock_init+0x10c>
 8017cac:	2702      	movs	r7, #2
 8017cae:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017cb6:	6823      	ldr	r3, [r4, #0]
 8017cb8:	4660      	mov	r0, ip
 8017cba:	602b      	str	r3, [r5, #0]
 8017cbc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017cc0:	7037      	strb	r7, [r6, #0]
 8017cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cc4:	f04f 0c0a 	mov.w	ip, #10
 8017cc8:	e78e      	b.n	8017be8 <rcl_clock_init+0x20>
 8017cca:	bf00      	nop
 8017ccc:	08017b9d 	.word	0x08017b9d
 8017cd0:	08017ba5 	.word	0x08017ba5
 8017cd4:	08017b95 	.word	0x08017b95

08017cd8 <rcl_clock_get_now>:
 8017cd8:	b140      	cbz	r0, 8017cec <rcl_clock_get_now+0x14>
 8017cda:	b139      	cbz	r1, 8017cec <rcl_clock_get_now+0x14>
 8017cdc:	7803      	ldrb	r3, [r0, #0]
 8017cde:	b11b      	cbz	r3, 8017ce8 <rcl_clock_get_now+0x10>
 8017ce0:	68c3      	ldr	r3, [r0, #12]
 8017ce2:	b10b      	cbz	r3, 8017ce8 <rcl_clock_get_now+0x10>
 8017ce4:	6900      	ldr	r0, [r0, #16]
 8017ce6:	4718      	bx	r3
 8017ce8:	2001      	movs	r0, #1
 8017cea:	4770      	bx	lr
 8017cec:	200b      	movs	r0, #11
 8017cee:	4770      	bx	lr

08017cf0 <rcl_clock_add_jump_callback>:
 8017cf0:	b082      	sub	sp, #8
 8017cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf6:	a906      	add	r1, sp, #24
 8017cf8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 8017cfc:	e881 000c 	stmia.w	r1, {r2, r3}
 8017d00:	b330      	cbz	r0, 8017d50 <rcl_clock_add_jump_callback+0x60>
 8017d02:	4604      	mov	r4, r0
 8017d04:	3014      	adds	r0, #20
 8017d06:	f7f8 f857 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017d0a:	b30d      	cbz	r5, 8017d50 <rcl_clock_add_jump_callback+0x60>
 8017d0c:	f080 0301 	eor.w	r3, r0, #1
 8017d10:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8017d14:	d11c      	bne.n	8017d50 <rcl_clock_add_jump_callback+0x60>
 8017d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d18:	2a00      	cmp	r2, #0
 8017d1a:	db19      	blt.n	8017d50 <rcl_clock_add_jump_callback+0x60>
 8017d1c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8017d20:	2901      	cmp	r1, #1
 8017d22:	f172 0200 	sbcs.w	r2, r2, #0
 8017d26:	da13      	bge.n	8017d50 <rcl_clock_add_jump_callback+0x60>
 8017d28:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8017d2c:	2f00      	cmp	r7, #0
 8017d2e:	d040      	beq.n	8017db2 <rcl_clock_add_jump_callback+0xc2>
 8017d30:	4602      	mov	r2, r0
 8017d32:	e003      	b.n	8017d3c <rcl_clock_add_jump_callback+0x4c>
 8017d34:	42bb      	cmp	r3, r7
 8017d36:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8017d3a:	d010      	beq.n	8017d5e <rcl_clock_add_jump_callback+0x6e>
 8017d3c:	6811      	ldr	r1, [r2, #0]
 8017d3e:	3301      	adds	r3, #1
 8017d40:	42a9      	cmp	r1, r5
 8017d42:	d1f7      	bne.n	8017d34 <rcl_clock_add_jump_callback+0x44>
 8017d44:	6a11      	ldr	r1, [r2, #32]
 8017d46:	42b1      	cmp	r1, r6
 8017d48:	d1f4      	bne.n	8017d34 <rcl_clock_add_jump_callback+0x44>
 8017d4a:	f04f 0e01 	mov.w	lr, #1
 8017d4e:	e001      	b.n	8017d54 <rcl_clock_add_jump_callback+0x64>
 8017d50:	f04f 0e0b 	mov.w	lr, #11
 8017d54:	4670      	mov	r0, lr
 8017d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d5a:	b002      	add	sp, #8
 8017d5c:	4770      	bx	lr
 8017d5e:	3301      	adds	r3, #1
 8017d60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017d64:	00d9      	lsls	r1, r3, #3
 8017d66:	69e3      	ldr	r3, [r4, #28]
 8017d68:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017d6a:	4798      	blx	r3
 8017d6c:	b1f0      	cbz	r0, 8017dac <rcl_clock_add_jump_callback+0xbc>
 8017d6e:	68a3      	ldr	r3, [r4, #8]
 8017d70:	f10d 0c18 	add.w	ip, sp, #24
 8017d74:	6060      	str	r0, [r4, #4]
 8017d76:	f04f 0e00 	mov.w	lr, #0
 8017d7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8017d7e:	f103 0801 	add.w	r8, r3, #1
 8017d82:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8017d86:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8017d8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017d8e:	f105 0708 	add.w	r7, r5, #8
 8017d92:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017d94:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017d98:	e887 0003 	stmia.w	r7, {r0, r1}
 8017d9c:	4670      	mov	r0, lr
 8017d9e:	622e      	str	r6, [r5, #32]
 8017da0:	f8c4 8008 	str.w	r8, [r4, #8]
 8017da4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017da8:	b002      	add	sp, #8
 8017daa:	4770      	bx	lr
 8017dac:	f04f 0e0a 	mov.w	lr, #10
 8017db0:	e7d0      	b.n	8017d54 <rcl_clock_add_jump_callback+0x64>
 8017db2:	2128      	movs	r1, #40	@ 0x28
 8017db4:	e7d7      	b.n	8017d66 <rcl_clock_add_jump_callback+0x76>
 8017db6:	bf00      	nop

08017db8 <rcl_clock_remove_jump_callback>:
 8017db8:	2800      	cmp	r0, #0
 8017dba:	d05f      	beq.n	8017e7c <rcl_clock_remove_jump_callback+0xc4>
 8017dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dc0:	4605      	mov	r5, r0
 8017dc2:	3014      	adds	r0, #20
 8017dc4:	460f      	mov	r7, r1
 8017dc6:	4692      	mov	sl, r2
 8017dc8:	f7f7 fff6 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017dcc:	f080 0001 	eor.w	r0, r0, #1
 8017dd0:	b2c0      	uxtb	r0, r0
 8017dd2:	2800      	cmp	r0, #0
 8017dd4:	d13f      	bne.n	8017e56 <rcl_clock_remove_jump_callback+0x9e>
 8017dd6:	2f00      	cmp	r7, #0
 8017dd8:	d03d      	beq.n	8017e56 <rcl_clock_remove_jump_callback+0x9e>
 8017dda:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8017dde:	f1b8 0f00 	cmp.w	r8, #0
 8017de2:	d00c      	beq.n	8017dfe <rcl_clock_remove_jump_callback+0x46>
 8017de4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017de8:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8017dec:	464c      	mov	r4, r9
 8017dee:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8017df2:	6823      	ldr	r3, [r4, #0]
 8017df4:	42bb      	cmp	r3, r7
 8017df6:	d005      	beq.n	8017e04 <rcl_clock_remove_jump_callback+0x4c>
 8017df8:	3428      	adds	r4, #40	@ 0x28
 8017dfa:	42a6      	cmp	r6, r4
 8017dfc:	d1f9      	bne.n	8017df2 <rcl_clock_remove_jump_callback+0x3a>
 8017dfe:	2001      	movs	r0, #1
 8017e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e04:	6a23      	ldr	r3, [r4, #32]
 8017e06:	3428      	adds	r4, #40	@ 0x28
 8017e08:	42a6      	cmp	r6, r4
 8017e0a:	d02f      	beq.n	8017e6c <rcl_clock_remove_jump_callback+0xb4>
 8017e0c:	4553      	cmp	r3, sl
 8017e0e:	d1f0      	bne.n	8017df2 <rcl_clock_remove_jump_callback+0x3a>
 8017e10:	46a6      	mov	lr, r4
 8017e12:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8017e16:	3428      	adds	r4, #40	@ 0x28
 8017e18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e24:	42a6      	cmp	r6, r4
 8017e26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e2a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017e2e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017e32:	d1ed      	bne.n	8017e10 <rcl_clock_remove_jump_callback+0x58>
 8017e34:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017e38:	60ac      	str	r4, [r5, #8]
 8017e3a:	b17c      	cbz	r4, 8017e5c <rcl_clock_remove_jump_callback+0xa4>
 8017e3c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017e40:	69eb      	ldr	r3, [r5, #28]
 8017e42:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8017e44:	4648      	mov	r0, r9
 8017e46:	00e1      	lsls	r1, r4, #3
 8017e48:	4798      	blx	r3
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	b1c0      	cbz	r0, 8017e80 <rcl_clock_remove_jump_callback+0xc8>
 8017e4e:	2000      	movs	r0, #0
 8017e50:	606b      	str	r3, [r5, #4]
 8017e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e56:	200b      	movs	r0, #11
 8017e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e5c:	4648      	mov	r0, r9
 8017e5e:	69ab      	ldr	r3, [r5, #24]
 8017e60:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8017e62:	4798      	blx	r3
 8017e64:	4620      	mov	r0, r4
 8017e66:	606c      	str	r4, [r5, #4]
 8017e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e6c:	4553      	cmp	r3, sl
 8017e6e:	d1c6      	bne.n	8017dfe <rcl_clock_remove_jump_callback+0x46>
 8017e70:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8017e74:	60ac      	str	r4, [r5, #8]
 8017e76:	2c00      	cmp	r4, #0
 8017e78:	d1e0      	bne.n	8017e3c <rcl_clock_remove_jump_callback+0x84>
 8017e7a:	e7ef      	b.n	8017e5c <rcl_clock_remove_jump_callback+0xa4>
 8017e7c:	200b      	movs	r0, #11
 8017e7e:	4770      	bx	lr
 8017e80:	200a      	movs	r0, #10
 8017e82:	e7e9      	b.n	8017e58 <rcl_clock_remove_jump_callback+0xa0>

08017e84 <_rcl_timer_time_jump>:
 8017e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e88:	4605      	mov	r5, r0
 8017e8a:	b084      	sub	sp, #16
 8017e8c:	4614      	mov	r4, r2
 8017e8e:	b131      	cbz	r1, 8017e9e <_rcl_timer_time_jump+0x1a>
 8017e90:	7803      	ldrb	r3, [r0, #0]
 8017e92:	3b02      	subs	r3, #2
 8017e94:	2b01      	cmp	r3, #1
 8017e96:	d93f      	bls.n	8017f18 <_rcl_timer_time_jump+0x94>
 8017e98:	b004      	add	sp, #16
 8017e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e9e:	6813      	ldr	r3, [r2, #0]
 8017ea0:	a902      	add	r1, sp, #8
 8017ea2:	6818      	ldr	r0, [r3, #0]
 8017ea4:	f7ff ff18 	bl	8017cd8 <rcl_clock_get_now>
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	d1f5      	bne.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017eac:	6820      	ldr	r0, [r4, #0]
 8017eae:	2105      	movs	r1, #5
 8017eb0:	3020      	adds	r0, #32
 8017eb2:	f001 fe19 	bl	8019ae8 <__atomic_load_8>
 8017eb6:	6823      	ldr	r3, [r4, #0]
 8017eb8:	4681      	mov	r9, r0
 8017eba:	4688      	mov	r8, r1
 8017ebc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8017ec0:	2105      	movs	r1, #5
 8017ec2:	f001 fe11 	bl	8019ae8 <__atomic_load_8>
 8017ec6:	4607      	mov	r7, r0
 8017ec8:	6820      	ldr	r0, [r4, #0]
 8017eca:	460e      	mov	r6, r1
 8017ecc:	2105      	movs	r1, #5
 8017ece:	3018      	adds	r0, #24
 8017ed0:	f001 fe0a 	bl	8019ae8 <__atomic_load_8>
 8017ed4:	782b      	ldrb	r3, [r5, #0]
 8017ed6:	4682      	mov	sl, r0
 8017ed8:	460d      	mov	r5, r1
 8017eda:	3b02      	subs	r3, #2
 8017edc:	9a02      	ldr	r2, [sp, #8]
 8017ede:	2b01      	cmp	r3, #1
 8017ee0:	9b03      	ldr	r3, [sp, #12]
 8017ee2:	d937      	bls.n	8017f54 <_rcl_timer_time_jump+0xd0>
 8017ee4:	42ba      	cmp	r2, r7
 8017ee6:	eb73 0106 	sbcs.w	r1, r3, r6
 8017eea:	da60      	bge.n	8017fae <_rcl_timer_time_jump+0x12a>
 8017eec:	454a      	cmp	r2, r9
 8017eee:	eb73 0108 	sbcs.w	r1, r3, r8
 8017ef2:	dad1      	bge.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017ef4:	eb1a 0202 	adds.w	r2, sl, r2
 8017ef8:	6820      	ldr	r0, [r4, #0]
 8017efa:	eb43 0305 	adc.w	r3, r3, r5
 8017efe:	2505      	movs	r5, #5
 8017f00:	3028      	adds	r0, #40	@ 0x28
 8017f02:	9500      	str	r5, [sp, #0]
 8017f04:	f001 fe26 	bl	8019b54 <__atomic_store_8>
 8017f08:	6820      	ldr	r0, [r4, #0]
 8017f0a:	9500      	str	r5, [sp, #0]
 8017f0c:	3020      	adds	r0, #32
 8017f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f12:	f001 fe1f 	bl	8019b54 <__atomic_store_8>
 8017f16:	e7bf      	b.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017f18:	6813      	ldr	r3, [r2, #0]
 8017f1a:	a902      	add	r1, sp, #8
 8017f1c:	6818      	ldr	r0, [r3, #0]
 8017f1e:	f7ff fedb 	bl	8017cd8 <rcl_clock_get_now>
 8017f22:	2800      	cmp	r0, #0
 8017f24:	d1b8      	bne.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017f26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017f2a:	4313      	orrs	r3, r2
 8017f2c:	d0b4      	beq.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017f2e:	6820      	ldr	r0, [r4, #0]
 8017f30:	2105      	movs	r1, #5
 8017f32:	3028      	adds	r0, #40	@ 0x28
 8017f34:	f001 fdd8 	bl	8019ae8 <__atomic_load_8>
 8017f38:	9d02      	ldr	r5, [sp, #8]
 8017f3a:	4602      	mov	r2, r0
 8017f3c:	9b03      	ldr	r3, [sp, #12]
 8017f3e:	6820      	ldr	r0, [r4, #0]
 8017f40:	1b52      	subs	r2, r2, r5
 8017f42:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8017f46:	eb61 0303 	sbc.w	r3, r1, r3
 8017f4a:	2105      	movs	r1, #5
 8017f4c:	9100      	str	r1, [sp, #0]
 8017f4e:	f001 fe01 	bl	8019b54 <__atomic_store_8>
 8017f52:	e7a1      	b.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017f54:	4313      	orrs	r3, r2
 8017f56:	d09f      	beq.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017f58:	6820      	ldr	r0, [r4, #0]
 8017f5a:	f04f 0805 	mov.w	r8, #5
 8017f5e:	2300      	movs	r3, #0
 8017f60:	2200      	movs	r2, #0
 8017f62:	3030      	adds	r0, #48	@ 0x30
 8017f64:	f8cd 8000 	str.w	r8, [sp]
 8017f68:	f001 fe2a 	bl	8019bc0 <__atomic_exchange_8>
 8017f6c:	ea51 0300 	orrs.w	r3, r1, r0
 8017f70:	4606      	mov	r6, r0
 8017f72:	460f      	mov	r7, r1
 8017f74:	d090      	beq.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017f76:	9a02      	ldr	r2, [sp, #8]
 8017f78:	9b03      	ldr	r3, [sp, #12]
 8017f7a:	1a12      	subs	r2, r2, r0
 8017f7c:	f8cd 8000 	str.w	r8, [sp]
 8017f80:	6820      	ldr	r0, [r4, #0]
 8017f82:	eb63 0301 	sbc.w	r3, r3, r1
 8017f86:	eb12 020a 	adds.w	r2, r2, sl
 8017f8a:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8017f8e:	eb43 0305 	adc.w	r3, r3, r5
 8017f92:	f001 fddf 	bl	8019b54 <__atomic_store_8>
 8017f96:	f8cd 8000 	str.w	r8, [sp]
 8017f9a:	6820      	ldr	r0, [r4, #0]
 8017f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017fa0:	3020      	adds	r0, #32
 8017fa2:	1b92      	subs	r2, r2, r6
 8017fa4:	eb63 0307 	sbc.w	r3, r3, r7
 8017fa8:	f001 fdd4 	bl	8019b54 <__atomic_store_8>
 8017fac:	e774      	b.n	8017e98 <_rcl_timer_time_jump+0x14>
 8017fae:	6820      	ldr	r0, [r4, #0]
 8017fb0:	3008      	adds	r0, #8
 8017fb2:	f004 f915 	bl	801c1e0 <rcl_trigger_guard_condition>
 8017fb6:	e76f      	b.n	8017e98 <_rcl_timer_time_jump+0x14>

08017fb8 <rcl_get_zero_initialized_timer>:
 8017fb8:	4b01      	ldr	r3, [pc, #4]	@ (8017fc0 <rcl_get_zero_initialized_timer+0x8>)
 8017fba:	6818      	ldr	r0, [r3, #0]
 8017fbc:	4770      	bx	lr
 8017fbe:	bf00      	nop
 8017fc0:	0801e6b4 	.word	0x0801e6b4
 8017fc4:	00000000 	.word	0x00000000

08017fc8 <rcl_timer_init>:
 8017fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fcc:	b0ab      	sub	sp, #172	@ 0xac
 8017fce:	460d      	mov	r5, r1
 8017fd0:	4604      	mov	r4, r0
 8017fd2:	4692      	mov	sl, r2
 8017fd4:	a837      	add	r0, sp, #220	@ 0xdc
 8017fd6:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 8017fd8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 8017fdc:	f7f7 feec 	bl	800fdb8 <rcutils_allocator_is_valid>
 8017fe0:	fab5 f385 	clz	r3, r5
 8017fe4:	095b      	lsrs	r3, r3, #5
 8017fe6:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 8017fea:	2c00      	cmp	r4, #0
 8017fec:	bf08      	it	eq
 8017fee:	f043 0301 	orreq.w	r3, r3, #1
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d164      	bne.n	80180c0 <rcl_timer_init+0xf8>
 8017ff6:	f080 0001 	eor.w	r0, r0, #1
 8017ffa:	b2c0      	uxtb	r0, r0
 8017ffc:	2800      	cmp	r0, #0
 8017ffe:	d15f      	bne.n	80180c0 <rcl_timer_init+0xf8>
 8018000:	6823      	ldr	r3, [r4, #0]
 8018002:	b123      	cbz	r3, 801800e <rcl_timer_init+0x46>
 8018004:	2664      	movs	r6, #100	@ 0x64
 8018006:	4630      	mov	r0, r6
 8018008:	b02b      	add	sp, #172	@ 0xac
 801800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801800e:	a908      	add	r1, sp, #32
 8018010:	4628      	mov	r0, r5
 8018012:	f7ff fe61 	bl	8017cd8 <rcl_clock_get_now>
 8018016:	4606      	mov	r6, r0
 8018018:	2800      	cmp	r0, #0
 801801a:	d1f4      	bne.n	8018006 <rcl_timer_init+0x3e>
 801801c:	f10d 0b18 	add.w	fp, sp, #24
 8018020:	ae0b      	add	r6, sp, #44	@ 0x2c
 8018022:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8018026:	4658      	mov	r0, fp
 8018028:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801802c:	f003 ffe2 	bl	801bff4 <rcl_get_zero_initialized_guard_condition>
 8018030:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8018034:	e889 0003 	stmia.w	r9, {r0, r1}
 8018038:	4630      	mov	r0, r6
 801803a:	f004 f8b5 	bl	801c1a8 <rcl_guard_condition_get_default_options>
 801803e:	ab0d      	add	r3, sp, #52	@ 0x34
 8018040:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018044:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018048:	4651      	mov	r1, sl
 801804a:	4648      	mov	r0, r9
 801804c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8018050:	f003 ffda 	bl	801c008 <rcl_guard_condition_init>
 8018054:	4606      	mov	r6, r0
 8018056:	2800      	cmp	r0, #0
 8018058:	d1d5      	bne.n	8018006 <rcl_timer_init+0x3e>
 801805a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801805c:	781b      	ldrb	r3, [r3, #0]
 801805e:	2b01      	cmp	r3, #1
 8018060:	d033      	beq.n	80180ca <rcl_timer_init+0x102>
 8018062:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8018064:	4642      	mov	r2, r8
 8018066:	463b      	mov	r3, r7
 8018068:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 801806c:	911a      	str	r1, [sp, #104]	@ 0x68
 801806e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8018072:	f04f 0a00 	mov.w	sl, #0
 8018076:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 801807a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801807e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8018128 <rcl_timer_init+0x160>
 8018082:	eb12 0008 	adds.w	r0, r2, r8
 8018086:	eb47 0103 	adc.w	r1, r7, r3
 801808a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801808e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8018092:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8018096:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801809a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801809e:	f8de 3000 	ldr.w	r3, [lr]
 80180a2:	2050      	movs	r0, #80	@ 0x50
 80180a4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80180a8:	4619      	mov	r1, r3
 80180aa:	f8cc 3000 	str.w	r3, [ip]
 80180ae:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80180b0:	4798      	blx	r3
 80180b2:	6020      	str	r0, [r4, #0]
 80180b4:	b358      	cbz	r0, 801810e <rcl_timer_init+0x146>
 80180b6:	2250      	movs	r2, #80	@ 0x50
 80180b8:	a916      	add	r1, sp, #88	@ 0x58
 80180ba:	f004 ffb6 	bl	801d02a <memcpy>
 80180be:	e7a2      	b.n	8018006 <rcl_timer_init+0x3e>
 80180c0:	260b      	movs	r6, #11
 80180c2:	4630      	mov	r0, r6
 80180c4:	b02b      	add	sp, #172	@ 0xac
 80180c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ca:	2001      	movs	r0, #1
 80180cc:	2100      	movs	r1, #0
 80180ce:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80180d2:	ab12      	add	r3, sp, #72	@ 0x48
 80180d4:	4a16      	ldr	r2, [pc, #88]	@ (8018130 <rcl_timer_init+0x168>)
 80180d6:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80180da:	9405      	str	r4, [sp, #20]
 80180dc:	9204      	str	r2, [sp, #16]
 80180de:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80180e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80180ea:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80180ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80180f4:	4628      	mov	r0, r5
 80180f6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80180fa:	f7ff fdf9 	bl	8017cf0 <rcl_clock_add_jump_callback>
 80180fe:	4603      	mov	r3, r0
 8018100:	2800      	cmp	r0, #0
 8018102:	d0ae      	beq.n	8018062 <rcl_timer_init+0x9a>
 8018104:	4648      	mov	r0, r9
 8018106:	461e      	mov	r6, r3
 8018108:	f004 f828 	bl	801c15c <rcl_guard_condition_fini>
 801810c:	e77b      	b.n	8018006 <rcl_timer_init+0x3e>
 801810e:	4648      	mov	r0, r9
 8018110:	260a      	movs	r6, #10
 8018112:	f004 f823 	bl	801c15c <rcl_guard_condition_fini>
 8018116:	4622      	mov	r2, r4
 8018118:	4905      	ldr	r1, [pc, #20]	@ (8018130 <rcl_timer_init+0x168>)
 801811a:	4628      	mov	r0, r5
 801811c:	f7ff fe4c 	bl	8017db8 <rcl_clock_remove_jump_callback>
 8018120:	e771      	b.n	8018006 <rcl_timer_init+0x3e>
 8018122:	bf00      	nop
 8018124:	f3af 8000 	nop.w
	...
 8018130:	08017e85 	.word	0x08017e85

08018134 <rcl_timer_call>:
 8018134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018138:	b087      	sub	sp, #28
 801813a:	2800      	cmp	r0, #0
 801813c:	d06c      	beq.n	8018218 <rcl_timer_call+0xe4>
 801813e:	6803      	ldr	r3, [r0, #0]
 8018140:	4604      	mov	r4, r0
 8018142:	2b00      	cmp	r3, #0
 8018144:	d062      	beq.n	801820c <rcl_timer_call+0xd8>
 8018146:	f3bf 8f5b 	dmb	ish
 801814a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801814e:	f3bf 8f5b 	dmb	ish
 8018152:	2b00      	cmp	r3, #0
 8018154:	d14f      	bne.n	80181f6 <rcl_timer_call+0xc2>
 8018156:	6803      	ldr	r3, [r0, #0]
 8018158:	a904      	add	r1, sp, #16
 801815a:	6818      	ldr	r0, [r3, #0]
 801815c:	f7ff fdbc 	bl	8017cd8 <rcl_clock_get_now>
 8018160:	4605      	mov	r5, r0
 8018162:	2800      	cmp	r0, #0
 8018164:	d149      	bne.n	80181fa <rcl_timer_call+0xc6>
 8018166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801816a:	2b00      	cmp	r3, #0
 801816c:	db49      	blt.n	8018202 <rcl_timer_call+0xce>
 801816e:	2605      	movs	r6, #5
 8018170:	6820      	ldr	r0, [r4, #0]
 8018172:	9600      	str	r6, [sp, #0]
 8018174:	3020      	adds	r0, #32
 8018176:	f001 fd23 	bl	8019bc0 <__atomic_exchange_8>
 801817a:	6823      	ldr	r3, [r4, #0]
 801817c:	4680      	mov	r8, r0
 801817e:	f3bf 8f5b 	dmb	ish
 8018182:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8018186:	f3bf 8f5b 	dmb	ish
 801818a:	6820      	ldr	r0, [r4, #0]
 801818c:	4689      	mov	r9, r1
 801818e:	4631      	mov	r1, r6
 8018190:	3028      	adds	r0, #40	@ 0x28
 8018192:	f001 fca9 	bl	8019ae8 <__atomic_load_8>
 8018196:	460f      	mov	r7, r1
 8018198:	4631      	mov	r1, r6
 801819a:	4606      	mov	r6, r0
 801819c:	6820      	ldr	r0, [r4, #0]
 801819e:	3018      	adds	r0, #24
 80181a0:	f001 fca2 	bl	8019ae8 <__atomic_load_8>
 80181a4:	4602      	mov	r2, r0
 80181a6:	9804      	ldr	r0, [sp, #16]
 80181a8:	460b      	mov	r3, r1
 80181aa:	18b6      	adds	r6, r6, r2
 80181ac:	f8dd c014 	ldr.w	ip, [sp, #20]
 80181b0:	4692      	mov	sl, r2
 80181b2:	eb47 0701 	adc.w	r7, r7, r1
 80181b6:	4286      	cmp	r6, r0
 80181b8:	eb77 010c 	sbcs.w	r1, r7, ip
 80181bc:	da04      	bge.n	80181c8 <rcl_timer_call+0x94>
 80181be:	ea53 0102 	orrs.w	r1, r3, r2
 80181c2:	d12e      	bne.n	8018222 <rcl_timer_call+0xee>
 80181c4:	4606      	mov	r6, r0
 80181c6:	4667      	mov	r7, ip
 80181c8:	6820      	ldr	r0, [r4, #0]
 80181ca:	2105      	movs	r1, #5
 80181cc:	4632      	mov	r2, r6
 80181ce:	463b      	mov	r3, r7
 80181d0:	3028      	adds	r0, #40	@ 0x28
 80181d2:	9100      	str	r1, [sp, #0]
 80181d4:	f001 fcbe 	bl	8019b54 <__atomic_store_8>
 80181d8:	f1bb 0f00 	cmp.w	fp, #0
 80181dc:	d00d      	beq.n	80181fa <rcl_timer_call+0xc6>
 80181de:	9a04      	ldr	r2, [sp, #16]
 80181e0:	4620      	mov	r0, r4
 80181e2:	9b05      	ldr	r3, [sp, #20]
 80181e4:	ebb2 0208 	subs.w	r2, r2, r8
 80181e8:	eb63 0309 	sbc.w	r3, r3, r9
 80181ec:	47d8      	blx	fp
 80181ee:	4628      	mov	r0, r5
 80181f0:	b007      	add	sp, #28
 80181f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181f6:	f240 3521 	movw	r5, #801	@ 0x321
 80181fa:	4628      	mov	r0, r5
 80181fc:	b007      	add	sp, #28
 80181fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018202:	2501      	movs	r5, #1
 8018204:	4628      	mov	r0, r5
 8018206:	b007      	add	sp, #28
 8018208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8018210:	4628      	mov	r0, r5
 8018212:	b007      	add	sp, #28
 8018214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018218:	250b      	movs	r5, #11
 801821a:	4628      	mov	r0, r5
 801821c:	b007      	add	sp, #28
 801821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018222:	1b80      	subs	r0, r0, r6
 8018224:	eb6c 0107 	sbc.w	r1, ip, r7
 8018228:	3801      	subs	r0, #1
 801822a:	f161 0100 	sbc.w	r1, r1, #0
 801822e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8018232:	f7e8 f8bd 	bl	80003b0 <__aeabi_ldivmod>
 8018236:	9b02      	ldr	r3, [sp, #8]
 8018238:	3001      	adds	r0, #1
 801823a:	f141 0100 	adc.w	r1, r1, #0
 801823e:	fb00 f303 	mul.w	r3, r0, r3
 8018242:	fb01 330a 	mla	r3, r1, sl, r3
 8018246:	fba0 0a0a 	umull	r0, sl, r0, sl
 801824a:	1986      	adds	r6, r0, r6
 801824c:	4453      	add	r3, sl
 801824e:	eb43 0707 	adc.w	r7, r3, r7
 8018252:	e7b9      	b.n	80181c8 <rcl_timer_call+0x94>

08018254 <rcl_timer_is_ready>:
 8018254:	b570      	push	{r4, r5, r6, lr}
 8018256:	b082      	sub	sp, #8
 8018258:	b380      	cbz	r0, 80182bc <rcl_timer_is_ready+0x68>
 801825a:	6803      	ldr	r3, [r0, #0]
 801825c:	4604      	mov	r4, r0
 801825e:	b38b      	cbz	r3, 80182c4 <rcl_timer_is_ready+0x70>
 8018260:	460d      	mov	r5, r1
 8018262:	b359      	cbz	r1, 80182bc <rcl_timer_is_ready+0x68>
 8018264:	f3bf 8f5b 	dmb	ish
 8018268:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801826c:	f3bf 8f5b 	dmb	ish
 8018270:	b953      	cbnz	r3, 8018288 <rcl_timer_is_ready+0x34>
 8018272:	6803      	ldr	r3, [r0, #0]
 8018274:	4669      	mov	r1, sp
 8018276:	6818      	ldr	r0, [r3, #0]
 8018278:	f7ff fd2e 	bl	8017cd8 <rcl_clock_get_now>
 801827c:	4606      	mov	r6, r0
 801827e:	b148      	cbz	r0, 8018294 <rcl_timer_is_ready+0x40>
 8018280:	f240 3321 	movw	r3, #801	@ 0x321
 8018284:	4298      	cmp	r0, r3
 8018286:	d102      	bne.n	801828e <rcl_timer_is_ready+0x3a>
 8018288:	2300      	movs	r3, #0
 801828a:	461e      	mov	r6, r3
 801828c:	702b      	strb	r3, [r5, #0]
 801828e:	4630      	mov	r0, r6
 8018290:	b002      	add	sp, #8
 8018292:	bd70      	pop	{r4, r5, r6, pc}
 8018294:	6820      	ldr	r0, [r4, #0]
 8018296:	2105      	movs	r1, #5
 8018298:	3028      	adds	r0, #40	@ 0x28
 801829a:	f001 fc25 	bl	8019ae8 <__atomic_load_8>
 801829e:	9b00      	ldr	r3, [sp, #0]
 80182a0:	1ac0      	subs	r0, r0, r3
 80182a2:	9b01      	ldr	r3, [sp, #4]
 80182a4:	eb61 0103 	sbc.w	r1, r1, r3
 80182a8:	2801      	cmp	r0, #1
 80182aa:	4630      	mov	r0, r6
 80182ac:	f171 0300 	sbcs.w	r3, r1, #0
 80182b0:	bfb4      	ite	lt
 80182b2:	2301      	movlt	r3, #1
 80182b4:	2300      	movge	r3, #0
 80182b6:	702b      	strb	r3, [r5, #0]
 80182b8:	b002      	add	sp, #8
 80182ba:	bd70      	pop	{r4, r5, r6, pc}
 80182bc:	260b      	movs	r6, #11
 80182be:	4630      	mov	r0, r6
 80182c0:	b002      	add	sp, #8
 80182c2:	bd70      	pop	{r4, r5, r6, pc}
 80182c4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80182c8:	e7e1      	b.n	801828e <rcl_timer_is_ready+0x3a>
 80182ca:	bf00      	nop

080182cc <rcl_timer_get_time_until_next_call>:
 80182cc:	b570      	push	{r4, r5, r6, lr}
 80182ce:	b082      	sub	sp, #8
 80182d0:	b330      	cbz	r0, 8018320 <rcl_timer_get_time_until_next_call+0x54>
 80182d2:	6803      	ldr	r3, [r0, #0]
 80182d4:	4604      	mov	r4, r0
 80182d6:	b33b      	cbz	r3, 8018328 <rcl_timer_get_time_until_next_call+0x5c>
 80182d8:	460d      	mov	r5, r1
 80182da:	b309      	cbz	r1, 8018320 <rcl_timer_get_time_until_next_call+0x54>
 80182dc:	f3bf 8f5b 	dmb	ish
 80182e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80182e4:	f3bf 8f5b 	dmb	ish
 80182e8:	b9ab      	cbnz	r3, 8018316 <rcl_timer_get_time_until_next_call+0x4a>
 80182ea:	6803      	ldr	r3, [r0, #0]
 80182ec:	4669      	mov	r1, sp
 80182ee:	6818      	ldr	r0, [r3, #0]
 80182f0:	f7ff fcf2 	bl	8017cd8 <rcl_clock_get_now>
 80182f4:	4606      	mov	r6, r0
 80182f6:	b958      	cbnz	r0, 8018310 <rcl_timer_get_time_until_next_call+0x44>
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	2105      	movs	r1, #5
 80182fc:	3028      	adds	r0, #40	@ 0x28
 80182fe:	f001 fbf3 	bl	8019ae8 <__atomic_load_8>
 8018302:	9b00      	ldr	r3, [sp, #0]
 8018304:	1ac0      	subs	r0, r0, r3
 8018306:	9b01      	ldr	r3, [sp, #4]
 8018308:	eb61 0103 	sbc.w	r1, r1, r3
 801830c:	6028      	str	r0, [r5, #0]
 801830e:	6069      	str	r1, [r5, #4]
 8018310:	4630      	mov	r0, r6
 8018312:	b002      	add	sp, #8
 8018314:	bd70      	pop	{r4, r5, r6, pc}
 8018316:	f240 3621 	movw	r6, #801	@ 0x321
 801831a:	4630      	mov	r0, r6
 801831c:	b002      	add	sp, #8
 801831e:	bd70      	pop	{r4, r5, r6, pc}
 8018320:	260b      	movs	r6, #11
 8018322:	4630      	mov	r0, r6
 8018324:	b002      	add	sp, #8
 8018326:	bd70      	pop	{r4, r5, r6, pc}
 8018328:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801832c:	e7f0      	b.n	8018310 <rcl_timer_get_time_until_next_call+0x44>
 801832e:	bf00      	nop

08018330 <rcl_timer_get_guard_condition>:
 8018330:	b130      	cbz	r0, 8018340 <rcl_timer_get_guard_condition+0x10>
 8018332:	6800      	ldr	r0, [r0, #0]
 8018334:	b120      	cbz	r0, 8018340 <rcl_timer_get_guard_condition+0x10>
 8018336:	68c3      	ldr	r3, [r0, #12]
 8018338:	b10b      	cbz	r3, 801833e <rcl_timer_get_guard_condition+0xe>
 801833a:	3008      	adds	r0, #8
 801833c:	4770      	bx	lr
 801833e:	4618      	mov	r0, r3
 8018340:	4770      	bx	lr
 8018342:	bf00      	nop

08018344 <rcl_validate_enclave_name_with_size>:
 8018344:	2800      	cmp	r0, #0
 8018346:	d049      	beq.n	80183dc <rcl_validate_enclave_name_with_size+0x98>
 8018348:	b570      	push	{r4, r5, r6, lr}
 801834a:	4615      	mov	r5, r2
 801834c:	b0c2      	sub	sp, #264	@ 0x108
 801834e:	b19a      	cbz	r2, 8018378 <rcl_validate_enclave_name_with_size+0x34>
 8018350:	461e      	mov	r6, r3
 8018352:	466a      	mov	r2, sp
 8018354:	ab01      	add	r3, sp, #4
 8018356:	460c      	mov	r4, r1
 8018358:	f002 f85a 	bl	801a410 <rmw_validate_namespace_with_size>
 801835c:	4684      	mov	ip, r0
 801835e:	b9b8      	cbnz	r0, 8018390 <rcl_validate_enclave_name_with_size+0x4c>
 8018360:	9900      	ldr	r1, [sp, #0]
 8018362:	b171      	cbz	r1, 8018382 <rcl_validate_enclave_name_with_size+0x3e>
 8018364:	2907      	cmp	r1, #7
 8018366:	d019      	beq.n	801839c <rcl_validate_enclave_name_with_size+0x58>
 8018368:	1e4b      	subs	r3, r1, #1
 801836a:	2b05      	cmp	r3, #5
 801836c:	d83a      	bhi.n	80183e4 <rcl_validate_enclave_name_with_size+0xa0>
 801836e:	e8df f003 	tbb	[pc, r3]
 8018372:	2926      	.short	0x2926
 8018374:	1d322f2c 	.word	0x1d322f2c
 8018378:	f04f 0c0b 	mov.w	ip, #11
 801837c:	4660      	mov	r0, ip
 801837e:	b042      	add	sp, #264	@ 0x108
 8018380:	bd70      	pop	{r4, r5, r6, pc}
 8018382:	2907      	cmp	r1, #7
 8018384:	d00a      	beq.n	801839c <rcl_validate_enclave_name_with_size+0x58>
 8018386:	2300      	movs	r3, #0
 8018388:	4660      	mov	r0, ip
 801838a:	602b      	str	r3, [r5, #0]
 801838c:	b042      	add	sp, #264	@ 0x108
 801838e:	bd70      	pop	{r4, r5, r6, pc}
 8018390:	f7fe fe08 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018394:	4684      	mov	ip, r0
 8018396:	4660      	mov	r0, ip
 8018398:	b042      	add	sp, #264	@ 0x108
 801839a:	bd70      	pop	{r4, r5, r6, pc}
 801839c:	2cff      	cmp	r4, #255	@ 0xff
 801839e:	d9f2      	bls.n	8018386 <rcl_validate_enclave_name_with_size+0x42>
 80183a0:	6029      	str	r1, [r5, #0]
 80183a2:	2e00      	cmp	r6, #0
 80183a4:	d0ea      	beq.n	801837c <rcl_validate_enclave_name_with_size+0x38>
 80183a6:	23fe      	movs	r3, #254	@ 0xfe
 80183a8:	6033      	str	r3, [r6, #0]
 80183aa:	e7e7      	b.n	801837c <rcl_validate_enclave_name_with_size+0x38>
 80183ac:	2306      	movs	r3, #6
 80183ae:	602b      	str	r3, [r5, #0]
 80183b0:	2e00      	cmp	r6, #0
 80183b2:	d0e3      	beq.n	801837c <rcl_validate_enclave_name_with_size+0x38>
 80183b4:	9b01      	ldr	r3, [sp, #4]
 80183b6:	4660      	mov	r0, ip
 80183b8:	6033      	str	r3, [r6, #0]
 80183ba:	b042      	add	sp, #264	@ 0x108
 80183bc:	bd70      	pop	{r4, r5, r6, pc}
 80183be:	2301      	movs	r3, #1
 80183c0:	602b      	str	r3, [r5, #0]
 80183c2:	e7f5      	b.n	80183b0 <rcl_validate_enclave_name_with_size+0x6c>
 80183c4:	2302      	movs	r3, #2
 80183c6:	602b      	str	r3, [r5, #0]
 80183c8:	e7f2      	b.n	80183b0 <rcl_validate_enclave_name_with_size+0x6c>
 80183ca:	2303      	movs	r3, #3
 80183cc:	602b      	str	r3, [r5, #0]
 80183ce:	e7ef      	b.n	80183b0 <rcl_validate_enclave_name_with_size+0x6c>
 80183d0:	2304      	movs	r3, #4
 80183d2:	602b      	str	r3, [r5, #0]
 80183d4:	e7ec      	b.n	80183b0 <rcl_validate_enclave_name_with_size+0x6c>
 80183d6:	2305      	movs	r3, #5
 80183d8:	602b      	str	r3, [r5, #0]
 80183da:	e7e9      	b.n	80183b0 <rcl_validate_enclave_name_with_size+0x6c>
 80183dc:	f04f 0c0b 	mov.w	ip, #11
 80183e0:	4660      	mov	r0, ip
 80183e2:	4770      	bx	lr
 80183e4:	460b      	mov	r3, r1
 80183e6:	4a04      	ldr	r2, [pc, #16]	@ (80183f8 <rcl_validate_enclave_name_with_size+0xb4>)
 80183e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80183ec:	a802      	add	r0, sp, #8
 80183ee:	f001 fd33 	bl	8019e58 <rcutils_snprintf>
 80183f2:	f04f 0c01 	mov.w	ip, #1
 80183f6:	e7c1      	b.n	801837c <rcl_validate_enclave_name_with_size+0x38>
 80183f8:	0801e6b8 	.word	0x0801e6b8

080183fc <rcl_validate_enclave_name>:
 80183fc:	b168      	cbz	r0, 801841a <rcl_validate_enclave_name+0x1e>
 80183fe:	b570      	push	{r4, r5, r6, lr}
 8018400:	460d      	mov	r5, r1
 8018402:	4616      	mov	r6, r2
 8018404:	4604      	mov	r4, r0
 8018406:	f7e7 ff75 	bl	80002f4 <strlen>
 801840a:	4633      	mov	r3, r6
 801840c:	4601      	mov	r1, r0
 801840e:	462a      	mov	r2, r5
 8018410:	4620      	mov	r0, r4
 8018412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018416:	f7ff bf95 	b.w	8018344 <rcl_validate_enclave_name_with_size>
 801841a:	200b      	movs	r0, #11
 801841c:	4770      	bx	lr
 801841e:	bf00      	nop

08018420 <rcl_get_zero_initialized_wait_set>:
 8018420:	b510      	push	{r4, lr}
 8018422:	4c08      	ldr	r4, [pc, #32]	@ (8018444 <rcl_get_zero_initialized_wait_set+0x24>)
 8018424:	4686      	mov	lr, r0
 8018426:	4684      	mov	ip, r0
 8018428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801842a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801842e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018430:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018436:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801843a:	6823      	ldr	r3, [r4, #0]
 801843c:	4670      	mov	r0, lr
 801843e:	f8cc 3000 	str.w	r3, [ip]
 8018442:	bd10      	pop	{r4, pc}
 8018444:	0801e718 	.word	0x0801e718

08018448 <rcl_wait_set_is_valid>:
 8018448:	b118      	cbz	r0, 8018452 <rcl_wait_set_is_valid+0xa>
 801844a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801844c:	3800      	subs	r0, #0
 801844e:	bf18      	it	ne
 8018450:	2001      	movne	r0, #1
 8018452:	4770      	bx	lr

08018454 <rcl_wait_set_fini>:
 8018454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018458:	b082      	sub	sp, #8
 801845a:	2800      	cmp	r0, #0
 801845c:	f000 8095 	beq.w	801858a <rcl_wait_set_fini+0x136>
 8018460:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018462:	4604      	mov	r4, r0
 8018464:	2e00      	cmp	r6, #0
 8018466:	f000 808c 	beq.w	8018582 <rcl_wait_set_fini+0x12e>
 801846a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801846c:	f002 fd7c 	bl	801af68 <rmw_destroy_wait_set>
 8018470:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018472:	1e06      	subs	r6, r0, #0
 8018474:	bf18      	it	ne
 8018476:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801847a:	2d00      	cmp	r5, #0
 801847c:	f000 8081 	beq.w	8018582 <rcl_wait_set_fini+0x12e>
 8018480:	2700      	movs	r7, #0
 8018482:	6820      	ldr	r0, [r4, #0]
 8018484:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8018488:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801848a:	6067      	str	r7, [r4, #4]
 801848c:	602f      	str	r7, [r5, #0]
 801848e:	b120      	cbz	r0, 801849a <rcl_wait_set_fini+0x46>
 8018490:	9101      	str	r1, [sp, #4]
 8018492:	47c0      	blx	r8
 8018494:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018496:	9901      	ldr	r1, [sp, #4]
 8018498:	6027      	str	r7, [r4, #0]
 801849a:	68a8      	ldr	r0, [r5, #8]
 801849c:	b120      	cbz	r0, 80184a8 <rcl_wait_set_fini+0x54>
 801849e:	47c0      	blx	r8
 80184a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184a2:	2300      	movs	r3, #0
 80184a4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80184a8:	f04f 0800 	mov.w	r8, #0
 80184ac:	68a0      	ldr	r0, [r4, #8]
 80184ae:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184b0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184b2:	f8c4 800c 	str.w	r8, [r4, #12]
 80184b6:	f8c5 800c 	str.w	r8, [r5, #12]
 80184ba:	b128      	cbz	r0, 80184c8 <rcl_wait_set_fini+0x74>
 80184bc:	47b8      	blx	r7
 80184be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184c0:	f8c4 8008 	str.w	r8, [r4, #8]
 80184c4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184c6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184c8:	f04f 0800 	mov.w	r8, #0
 80184cc:	6968      	ldr	r0, [r5, #20]
 80184ce:	f8c5 8010 	str.w	r8, [r5, #16]
 80184d2:	b128      	cbz	r0, 80184e0 <rcl_wait_set_fini+0x8c>
 80184d4:	47b8      	blx	r7
 80184d6:	f8c5 8014 	str.w	r8, [r5, #20]
 80184da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184dc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184de:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184e0:	f04f 0800 	mov.w	r8, #0
 80184e4:	6920      	ldr	r0, [r4, #16]
 80184e6:	f8c4 8014 	str.w	r8, [r4, #20]
 80184ea:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80184ee:	b128      	cbz	r0, 80184fc <rcl_wait_set_fini+0xa8>
 80184f0:	47b8      	blx	r7
 80184f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80184f4:	f8c4 8010 	str.w	r8, [r4, #16]
 80184f8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80184fa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80184fc:	f04f 0800 	mov.w	r8, #0
 8018500:	69a0      	ldr	r0, [r4, #24]
 8018502:	f8c4 801c 	str.w	r8, [r4, #28]
 8018506:	f8c5 8018 	str.w	r8, [r5, #24]
 801850a:	b128      	cbz	r0, 8018518 <rcl_wait_set_fini+0xc4>
 801850c:	9101      	str	r1, [sp, #4]
 801850e:	47b8      	blx	r7
 8018510:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018512:	9901      	ldr	r1, [sp, #4]
 8018514:	f8c4 8018 	str.w	r8, [r4, #24]
 8018518:	6a28      	ldr	r0, [r5, #32]
 801851a:	b120      	cbz	r0, 8018526 <rcl_wait_set_fini+0xd2>
 801851c:	47b8      	blx	r7
 801851e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018520:	2300      	movs	r3, #0
 8018522:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8018526:	2700      	movs	r7, #0
 8018528:	6a20      	ldr	r0, [r4, #32]
 801852a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801852e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018530:	6267      	str	r7, [r4, #36]	@ 0x24
 8018532:	626f      	str	r7, [r5, #36]	@ 0x24
 8018534:	b120      	cbz	r0, 8018540 <rcl_wait_set_fini+0xec>
 8018536:	9101      	str	r1, [sp, #4]
 8018538:	47c0      	blx	r8
 801853a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801853c:	9901      	ldr	r1, [sp, #4]
 801853e:	6227      	str	r7, [r4, #32]
 8018540:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8018542:	b120      	cbz	r0, 801854e <rcl_wait_set_fini+0xfa>
 8018544:	47c0      	blx	r8
 8018546:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018548:	2300      	movs	r3, #0
 801854a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801854e:	2700      	movs	r7, #0
 8018550:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8018552:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8018556:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8018558:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801855a:	632f      	str	r7, [r5, #48]	@ 0x30
 801855c:	b120      	cbz	r0, 8018568 <rcl_wait_set_fini+0x114>
 801855e:	9101      	str	r1, [sp, #4]
 8018560:	47c0      	blx	r8
 8018562:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018564:	9901      	ldr	r1, [sp, #4]
 8018566:	62a7      	str	r7, [r4, #40]	@ 0x28
 8018568:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801856a:	b120      	cbz	r0, 8018576 <rcl_wait_set_fini+0x122>
 801856c:	47c0      	blx	r8
 801856e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8018570:	2300      	movs	r3, #0
 8018572:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8018576:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8018578:	4628      	mov	r0, r5
 801857a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801857c:	4798      	blx	r3
 801857e:	2300      	movs	r3, #0
 8018580:	6323      	str	r3, [r4, #48]	@ 0x30
 8018582:	4630      	mov	r0, r6
 8018584:	b002      	add	sp, #8
 8018586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801858a:	260b      	movs	r6, #11
 801858c:	4630      	mov	r0, r6
 801858e:	b002      	add	sp, #8
 8018590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018594 <rcl_wait_set_add_subscription>:
 8018594:	b318      	cbz	r0, 80185de <rcl_wait_set_add_subscription+0x4a>
 8018596:	b538      	push	{r3, r4, r5, lr}
 8018598:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801859a:	4604      	mov	r4, r0
 801859c:	b30b      	cbz	r3, 80185e2 <rcl_wait_set_add_subscription+0x4e>
 801859e:	b319      	cbz	r1, 80185e8 <rcl_wait_set_add_subscription+0x54>
 80185a0:	681d      	ldr	r5, [r3, #0]
 80185a2:	6840      	ldr	r0, [r0, #4]
 80185a4:	4285      	cmp	r5, r0
 80185a6:	d217      	bcs.n	80185d8 <rcl_wait_set_add_subscription+0x44>
 80185a8:	1c68      	adds	r0, r5, #1
 80185aa:	6018      	str	r0, [r3, #0]
 80185ac:	6823      	ldr	r3, [r4, #0]
 80185ae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80185b2:	b102      	cbz	r2, 80185b6 <rcl_wait_set_add_subscription+0x22>
 80185b4:	6015      	str	r5, [r2, #0]
 80185b6:	4608      	mov	r0, r1
 80185b8:	f7ff fadc 	bl	8017b74 <rcl_subscription_get_rmw_handle>
 80185bc:	b150      	cbz	r0, 80185d4 <rcl_wait_set_add_subscription+0x40>
 80185be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80185c0:	6842      	ldr	r2, [r0, #4]
 80185c2:	2000      	movs	r0, #0
 80185c4:	689b      	ldr	r3, [r3, #8]
 80185c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80185ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80185cc:	6853      	ldr	r3, [r2, #4]
 80185ce:	3301      	adds	r3, #1
 80185d0:	6053      	str	r3, [r2, #4]
 80185d2:	bd38      	pop	{r3, r4, r5, pc}
 80185d4:	2001      	movs	r0, #1
 80185d6:	bd38      	pop	{r3, r4, r5, pc}
 80185d8:	f240 3086 	movw	r0, #902	@ 0x386
 80185dc:	bd38      	pop	{r3, r4, r5, pc}
 80185de:	200b      	movs	r0, #11
 80185e0:	4770      	bx	lr
 80185e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80185e6:	bd38      	pop	{r3, r4, r5, pc}
 80185e8:	200b      	movs	r0, #11
 80185ea:	bd38      	pop	{r3, r4, r5, pc}

080185ec <rcl_wait_set_clear>:
 80185ec:	2800      	cmp	r0, #0
 80185ee:	d074      	beq.n	80186da <rcl_wait_set_clear+0xee>
 80185f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80185f2:	b510      	push	{r4, lr}
 80185f4:	4604      	mov	r4, r0
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d071      	beq.n	80186de <rcl_wait_set_clear+0xf2>
 80185fa:	6800      	ldr	r0, [r0, #0]
 80185fc:	b138      	cbz	r0, 801860e <rcl_wait_set_clear+0x22>
 80185fe:	6862      	ldr	r2, [r4, #4]
 8018600:	2100      	movs	r1, #0
 8018602:	0092      	lsls	r2, r2, #2
 8018604:	f004 fc48 	bl	801ce98 <memset>
 8018608:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801860a:	2200      	movs	r2, #0
 801860c:	601a      	str	r2, [r3, #0]
 801860e:	68a0      	ldr	r0, [r4, #8]
 8018610:	b138      	cbz	r0, 8018622 <rcl_wait_set_clear+0x36>
 8018612:	68e2      	ldr	r2, [r4, #12]
 8018614:	2100      	movs	r1, #0
 8018616:	0092      	lsls	r2, r2, #2
 8018618:	f004 fc3e 	bl	801ce98 <memset>
 801861c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801861e:	2200      	movs	r2, #0
 8018620:	60da      	str	r2, [r3, #12]
 8018622:	69a0      	ldr	r0, [r4, #24]
 8018624:	b138      	cbz	r0, 8018636 <rcl_wait_set_clear+0x4a>
 8018626:	69e2      	ldr	r2, [r4, #28]
 8018628:	2100      	movs	r1, #0
 801862a:	0092      	lsls	r2, r2, #2
 801862c:	f004 fc34 	bl	801ce98 <memset>
 8018630:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018632:	2200      	movs	r2, #0
 8018634:	619a      	str	r2, [r3, #24]
 8018636:	6a20      	ldr	r0, [r4, #32]
 8018638:	b138      	cbz	r0, 801864a <rcl_wait_set_clear+0x5e>
 801863a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801863c:	2100      	movs	r1, #0
 801863e:	0092      	lsls	r2, r2, #2
 8018640:	f004 fc2a 	bl	801ce98 <memset>
 8018644:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018646:	2200      	movs	r2, #0
 8018648:	625a      	str	r2, [r3, #36]	@ 0x24
 801864a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801864c:	b138      	cbz	r0, 801865e <rcl_wait_set_clear+0x72>
 801864e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018650:	2100      	movs	r1, #0
 8018652:	0092      	lsls	r2, r2, #2
 8018654:	f004 fc20 	bl	801ce98 <memset>
 8018658:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801865a:	2200      	movs	r2, #0
 801865c:	631a      	str	r2, [r3, #48]	@ 0x30
 801865e:	6920      	ldr	r0, [r4, #16]
 8018660:	b138      	cbz	r0, 8018672 <rcl_wait_set_clear+0x86>
 8018662:	6962      	ldr	r2, [r4, #20]
 8018664:	2100      	movs	r1, #0
 8018666:	0092      	lsls	r2, r2, #2
 8018668:	f004 fc16 	bl	801ce98 <memset>
 801866c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801866e:	2200      	movs	r2, #0
 8018670:	641a      	str	r2, [r3, #64]	@ 0x40
 8018672:	6898      	ldr	r0, [r3, #8]
 8018674:	b138      	cbz	r0, 8018686 <rcl_wait_set_clear+0x9a>
 8018676:	685a      	ldr	r2, [r3, #4]
 8018678:	2100      	movs	r1, #0
 801867a:	0092      	lsls	r2, r2, #2
 801867c:	f004 fc0c 	bl	801ce98 <memset>
 8018680:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018682:	2200      	movs	r2, #0
 8018684:	605a      	str	r2, [r3, #4]
 8018686:	6958      	ldr	r0, [r3, #20]
 8018688:	b138      	cbz	r0, 801869a <rcl_wait_set_clear+0xae>
 801868a:	691a      	ldr	r2, [r3, #16]
 801868c:	2100      	movs	r1, #0
 801868e:	0092      	lsls	r2, r2, #2
 8018690:	f004 fc02 	bl	801ce98 <memset>
 8018694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018696:	2200      	movs	r2, #0
 8018698:	611a      	str	r2, [r3, #16]
 801869a:	6a18      	ldr	r0, [r3, #32]
 801869c:	b138      	cbz	r0, 80186ae <rcl_wait_set_clear+0xc2>
 801869e:	69da      	ldr	r2, [r3, #28]
 80186a0:	2100      	movs	r1, #0
 80186a2:	0092      	lsls	r2, r2, #2
 80186a4:	f004 fbf8 	bl	801ce98 <memset>
 80186a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80186aa:	2200      	movs	r2, #0
 80186ac:	61da      	str	r2, [r3, #28]
 80186ae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80186b0:	b138      	cbz	r0, 80186c2 <rcl_wait_set_clear+0xd6>
 80186b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80186b4:	2100      	movs	r1, #0
 80186b6:	0092      	lsls	r2, r2, #2
 80186b8:	f004 fbee 	bl	801ce98 <memset>
 80186bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80186be:	2200      	movs	r2, #0
 80186c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80186c2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80186c4:	b140      	cbz	r0, 80186d8 <rcl_wait_set_clear+0xec>
 80186c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80186c8:	2100      	movs	r1, #0
 80186ca:	0092      	lsls	r2, r2, #2
 80186cc:	f004 fbe4 	bl	801ce98 <memset>
 80186d0:	2300      	movs	r3, #0
 80186d2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80186d4:	4618      	mov	r0, r3
 80186d6:	6353      	str	r3, [r2, #52]	@ 0x34
 80186d8:	bd10      	pop	{r4, pc}
 80186da:	200b      	movs	r0, #11
 80186dc:	4770      	bx	lr
 80186de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80186e2:	bd10      	pop	{r4, pc}

080186e4 <rcl_wait_set_resize>:
 80186e4:	2800      	cmp	r0, #0
 80186e6:	f000 8180 	beq.w	80189ea <rcl_wait_set_resize+0x306>
 80186ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186ee:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80186f0:	b083      	sub	sp, #12
 80186f2:	4605      	mov	r5, r0
 80186f4:	2c00      	cmp	r4, #0
 80186f6:	f000 817a 	beq.w	80189ee <rcl_wait_set_resize+0x30a>
 80186fa:	f04f 0900 	mov.w	r9, #0
 80186fe:	461f      	mov	r7, r3
 8018700:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8018704:	4688      	mov	r8, r1
 8018706:	4616      	mov	r6, r2
 8018708:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801870c:	f8c0 9004 	str.w	r9, [r0, #4]
 8018710:	f8c4 9000 	str.w	r9, [r4]
 8018714:	2900      	cmp	r1, #0
 8018716:	f000 80bf 	beq.w	8018898 <rcl_wait_set_resize+0x1b4>
 801871a:	008c      	lsls	r4, r1, #2
 801871c:	4652      	mov	r2, sl
 801871e:	6800      	ldr	r0, [r0, #0]
 8018720:	4621      	mov	r1, r4
 8018722:	9301      	str	r3, [sp, #4]
 8018724:	4798      	blx	r3
 8018726:	9b01      	ldr	r3, [sp, #4]
 8018728:	6028      	str	r0, [r5, #0]
 801872a:	2800      	cmp	r0, #0
 801872c:	f000 80f6 	beq.w	801891c <rcl_wait_set_resize+0x238>
 8018730:	4622      	mov	r2, r4
 8018732:	4649      	mov	r1, r9
 8018734:	9301      	str	r3, [sp, #4]
 8018736:	f004 fbaf 	bl	801ce98 <memset>
 801873a:	f8c5 8004 	str.w	r8, [r5, #4]
 801873e:	4652      	mov	r2, sl
 8018740:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8018744:	4621      	mov	r1, r4
 8018746:	9b01      	ldr	r3, [sp, #4]
 8018748:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801874c:	f8c8 9004 	str.w	r9, [r8, #4]
 8018750:	4798      	blx	r3
 8018752:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018754:	f8c8 0008 	str.w	r0, [r8, #8]
 8018758:	689b      	ldr	r3, [r3, #8]
 801875a:	2b00      	cmp	r3, #0
 801875c:	f000 814a 	beq.w	80189f4 <rcl_wait_set_resize+0x310>
 8018760:	4622      	mov	r2, r4
 8018762:	4649      	mov	r1, r9
 8018764:	4618      	mov	r0, r3
 8018766:	f004 fb97 	bl	801ce98 <memset>
 801876a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801876c:	f04f 0800 	mov.w	r8, #0
 8018770:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018774:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8018778:	f8c5 800c 	str.w	r8, [r5, #12]
 801877c:	f8c4 800c 	str.w	r8, [r4, #12]
 8018780:	2e00      	cmp	r6, #0
 8018782:	f040 809b 	bne.w	80188bc <rcl_wait_set_resize+0x1d8>
 8018786:	68a8      	ldr	r0, [r5, #8]
 8018788:	b128      	cbz	r0, 8018796 <rcl_wait_set_resize+0xb2>
 801878a:	4649      	mov	r1, r9
 801878c:	4790      	blx	r2
 801878e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018790:	60ae      	str	r6, [r5, #8]
 8018792:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018796:	f04f 0800 	mov.w	r8, #0
 801879a:	19f6      	adds	r6, r6, r7
 801879c:	f8c4 8010 	str.w	r8, [r4, #16]
 80187a0:	f040 80a2 	bne.w	80188e8 <rcl_wait_set_resize+0x204>
 80187a4:	6960      	ldr	r0, [r4, #20]
 80187a6:	b130      	cbz	r0, 80187b6 <rcl_wait_set_resize+0xd2>
 80187a8:	4649      	mov	r1, r9
 80187aa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80187ac:	4798      	blx	r3
 80187ae:	6166      	str	r6, [r4, #20]
 80187b0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80187b6:	2600      	movs	r6, #0
 80187b8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80187bc:	616e      	str	r6, [r5, #20]
 80187be:	6426      	str	r6, [r4, #64]	@ 0x40
 80187c0:	2f00      	cmp	r7, #0
 80187c2:	f040 80af 	bne.w	8018924 <rcl_wait_set_resize+0x240>
 80187c6:	6928      	ldr	r0, [r5, #16]
 80187c8:	b138      	cbz	r0, 80187da <rcl_wait_set_resize+0xf6>
 80187ca:	4649      	mov	r1, r9
 80187cc:	47d0      	blx	sl
 80187ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187d0:	612f      	str	r7, [r5, #16]
 80187d2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80187d6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80187da:	2600      	movs	r6, #0
 80187dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187de:	61ee      	str	r6, [r5, #28]
 80187e0:	61a6      	str	r6, [r4, #24]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	f040 8093 	bne.w	801890e <rcl_wait_set_resize+0x22a>
 80187e8:	69a8      	ldr	r0, [r5, #24]
 80187ea:	b120      	cbz	r0, 80187f6 <rcl_wait_set_resize+0x112>
 80187ec:	4649      	mov	r1, r9
 80187ee:	47d0      	blx	sl
 80187f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80187f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80187f4:	61ab      	str	r3, [r5, #24]
 80187f6:	6a20      	ldr	r0, [r4, #32]
 80187f8:	b128      	cbz	r0, 8018806 <rcl_wait_set_resize+0x122>
 80187fa:	4649      	mov	r1, r9
 80187fc:	47d0      	blx	sl
 80187fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018800:	2300      	movs	r3, #0
 8018802:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8018806:	2600      	movs	r6, #0
 8018808:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801880a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801880c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8018810:	626e      	str	r6, [r5, #36]	@ 0x24
 8018812:	6266      	str	r6, [r4, #36]	@ 0x24
 8018814:	2b00      	cmp	r3, #0
 8018816:	f000 8098 	beq.w	801894a <rcl_wait_set_resize+0x266>
 801881a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801881e:	463a      	mov	r2, r7
 8018820:	6a28      	ldr	r0, [r5, #32]
 8018822:	4651      	mov	r1, sl
 8018824:	47c8      	blx	r9
 8018826:	6228      	str	r0, [r5, #32]
 8018828:	2800      	cmp	r0, #0
 801882a:	d077      	beq.n	801891c <rcl_wait_set_resize+0x238>
 801882c:	4652      	mov	r2, sl
 801882e:	4631      	mov	r1, r6
 8018830:	f004 fb32 	bl	801ce98 <memset>
 8018834:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018838:	463a      	mov	r2, r7
 801883a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801883c:	4651      	mov	r1, sl
 801883e:	626b      	str	r3, [r5, #36]	@ 0x24
 8018840:	62a6      	str	r6, [r4, #40]	@ 0x28
 8018842:	47c8      	blx	r9
 8018844:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018846:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8018848:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801884a:	2c00      	cmp	r4, #0
 801884c:	f000 80f2 	beq.w	8018a34 <rcl_wait_set_resize+0x350>
 8018850:	4620      	mov	r0, r4
 8018852:	4652      	mov	r2, sl
 8018854:	4631      	mov	r1, r6
 8018856:	f004 fb1f 	bl	801ce98 <memset>
 801885a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801885c:	2600      	movs	r6, #0
 801885e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018860:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8018862:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8018866:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8018868:	6326      	str	r6, [r4, #48]	@ 0x30
 801886a:	2b00      	cmp	r3, #0
 801886c:	f040 8097 	bne.w	801899e <rcl_wait_set_resize+0x2ba>
 8018870:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018872:	b120      	cbz	r0, 801887e <rcl_wait_set_resize+0x19a>
 8018874:	4639      	mov	r1, r7
 8018876:	47c0      	blx	r8
 8018878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801887a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801887c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801887e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8018880:	2800      	cmp	r0, #0
 8018882:	d04c      	beq.n	801891e <rcl_wait_set_resize+0x23a>
 8018884:	4639      	mov	r1, r7
 8018886:	47c0      	blx	r8
 8018888:	2300      	movs	r3, #0
 801888a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801888c:	4618      	mov	r0, r3
 801888e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8018892:	b003      	add	sp, #12
 8018894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018898:	6800      	ldr	r0, [r0, #0]
 801889a:	b120      	cbz	r0, 80188a6 <rcl_wait_set_resize+0x1c2>
 801889c:	4651      	mov	r1, sl
 801889e:	47d8      	blx	fp
 80188a0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188a2:	f8c5 8000 	str.w	r8, [r5]
 80188a6:	68a0      	ldr	r0, [r4, #8]
 80188a8:	2800      	cmp	r0, #0
 80188aa:	f43f af5f 	beq.w	801876c <rcl_wait_set_resize+0x88>
 80188ae:	4651      	mov	r1, sl
 80188b0:	47d8      	blx	fp
 80188b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188b4:	2300      	movs	r3, #0
 80188b6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80188ba:	e757      	b.n	801876c <rcl_wait_set_resize+0x88>
 80188bc:	00b4      	lsls	r4, r6, #2
 80188be:	464a      	mov	r2, r9
 80188c0:	68a8      	ldr	r0, [r5, #8]
 80188c2:	4621      	mov	r1, r4
 80188c4:	4798      	blx	r3
 80188c6:	60a8      	str	r0, [r5, #8]
 80188c8:	b340      	cbz	r0, 801891c <rcl_wait_set_resize+0x238>
 80188ca:	4622      	mov	r2, r4
 80188cc:	4641      	mov	r1, r8
 80188ce:	f004 fae3 	bl	801ce98 <memset>
 80188d2:	f04f 0800 	mov.w	r8, #0
 80188d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80188d8:	60ee      	str	r6, [r5, #12]
 80188da:	19f6      	adds	r6, r6, r7
 80188dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80188e0:	f8c4 8010 	str.w	r8, [r4, #16]
 80188e4:	f43f af5e 	beq.w	80187a4 <rcl_wait_set_resize+0xc0>
 80188e8:	00b6      	lsls	r6, r6, #2
 80188ea:	464a      	mov	r2, r9
 80188ec:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80188ee:	6960      	ldr	r0, [r4, #20]
 80188f0:	4631      	mov	r1, r6
 80188f2:	4798      	blx	r3
 80188f4:	4681      	mov	r9, r0
 80188f6:	6160      	str	r0, [r4, #20]
 80188f8:	2800      	cmp	r0, #0
 80188fa:	f000 8084 	beq.w	8018a06 <rcl_wait_set_resize+0x322>
 80188fe:	4632      	mov	r2, r6
 8018900:	4641      	mov	r1, r8
 8018902:	f004 fac9 	bl	801ce98 <memset>
 8018906:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018908:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801890c:	e753      	b.n	80187b6 <rcl_wait_set_resize+0xd2>
 801890e:	009c      	lsls	r4, r3, #2
 8018910:	464a      	mov	r2, r9
 8018912:	69a8      	ldr	r0, [r5, #24]
 8018914:	4621      	mov	r1, r4
 8018916:	47c0      	blx	r8
 8018918:	61a8      	str	r0, [r5, #24]
 801891a:	bb40      	cbnz	r0, 801896e <rcl_wait_set_resize+0x28a>
 801891c:	200a      	movs	r0, #10
 801891e:	b003      	add	sp, #12
 8018920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018924:	00bc      	lsls	r4, r7, #2
 8018926:	464a      	mov	r2, r9
 8018928:	6928      	ldr	r0, [r5, #16]
 801892a:	4621      	mov	r1, r4
 801892c:	47c0      	blx	r8
 801892e:	6128      	str	r0, [r5, #16]
 8018930:	2800      	cmp	r0, #0
 8018932:	d0f3      	beq.n	801891c <rcl_wait_set_resize+0x238>
 8018934:	4622      	mov	r2, r4
 8018936:	4631      	mov	r1, r6
 8018938:	f004 faae 	bl	801ce98 <memset>
 801893c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801893e:	616f      	str	r7, [r5, #20]
 8018940:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8018944:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8018948:	e747      	b.n	80187da <rcl_wait_set_resize+0xf6>
 801894a:	6a28      	ldr	r0, [r5, #32]
 801894c:	b120      	cbz	r0, 8018958 <rcl_wait_set_resize+0x274>
 801894e:	4639      	mov	r1, r7
 8018950:	47c0      	blx	r8
 8018952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018954:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018956:	622b      	str	r3, [r5, #32]
 8018958:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801895a:	2800      	cmp	r0, #0
 801895c:	f43f af7e 	beq.w	801885c <rcl_wait_set_resize+0x178>
 8018960:	4639      	mov	r1, r7
 8018962:	47c0      	blx	r8
 8018964:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8018966:	2300      	movs	r3, #0
 8018968:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801896c:	e776      	b.n	801885c <rcl_wait_set_resize+0x178>
 801896e:	4622      	mov	r2, r4
 8018970:	4631      	mov	r1, r6
 8018972:	f004 fa91 	bl	801ce98 <memset>
 8018976:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8018978:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801897a:	464a      	mov	r2, r9
 801897c:	6a38      	ldr	r0, [r7, #32]
 801897e:	4621      	mov	r1, r4
 8018980:	61eb      	str	r3, [r5, #28]
 8018982:	61fe      	str	r6, [r7, #28]
 8018984:	47c0      	blx	r8
 8018986:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018988:	6238      	str	r0, [r7, #32]
 801898a:	6a1f      	ldr	r7, [r3, #32]
 801898c:	2f00      	cmp	r7, #0
 801898e:	d04a      	beq.n	8018a26 <rcl_wait_set_resize+0x342>
 8018990:	4622      	mov	r2, r4
 8018992:	4631      	mov	r1, r6
 8018994:	4638      	mov	r0, r7
 8018996:	f004 fa7f 	bl	801ce98 <memset>
 801899a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801899c:	e733      	b.n	8018806 <rcl_wait_set_resize+0x122>
 801899e:	009c      	lsls	r4, r3, #2
 80189a0:	463a      	mov	r2, r7
 80189a2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80189a4:	4621      	mov	r1, r4
 80189a6:	47c8      	blx	r9
 80189a8:	62a8      	str	r0, [r5, #40]	@ 0x28
 80189aa:	2800      	cmp	r0, #0
 80189ac:	d0b6      	beq.n	801891c <rcl_wait_set_resize+0x238>
 80189ae:	4622      	mov	r2, r4
 80189b0:	4631      	mov	r1, r6
 80189b2:	f004 fa71 	bl	801ce98 <memset>
 80189b6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80189ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80189bc:	463a      	mov	r2, r7
 80189be:	4621      	mov	r1, r4
 80189c0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80189c4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80189c6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80189ca:	47c8      	blx	r9
 80189cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80189ce:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80189d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d034      	beq.n	8018a42 <rcl_wait_set_resize+0x35e>
 80189d8:	4622      	mov	r2, r4
 80189da:	4631      	mov	r1, r6
 80189dc:	4618      	mov	r0, r3
 80189de:	f004 fa5b 	bl	801ce98 <memset>
 80189e2:	4630      	mov	r0, r6
 80189e4:	b003      	add	sp, #12
 80189e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ea:	200b      	movs	r0, #11
 80189ec:	4770      	bx	lr
 80189ee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80189f2:	e794      	b.n	801891e <rcl_wait_set_resize+0x23a>
 80189f4:	6828      	ldr	r0, [r5, #0]
 80189f6:	4651      	mov	r1, sl
 80189f8:	9301      	str	r3, [sp, #4]
 80189fa:	47d8      	blx	fp
 80189fc:	9b01      	ldr	r3, [sp, #4]
 80189fe:	200a      	movs	r0, #10
 8018a00:	e9c5 3300 	strd	r3, r3, [r5]
 8018a04:	e78b      	b.n	801891e <rcl_wait_set_resize+0x23a>
 8018a06:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018a08:	68a8      	ldr	r0, [r5, #8]
 8018a0a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8018a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018a0e:	4798      	blx	r3
 8018a10:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018a12:	6928      	ldr	r0, [r5, #16]
 8018a14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a16:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8018a18:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8018a1c:	4790      	blx	r2
 8018a1e:	200a      	movs	r0, #10
 8018a20:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8018a24:	e77b      	b.n	801891e <rcl_wait_set_resize+0x23a>
 8018a26:	69a8      	ldr	r0, [r5, #24]
 8018a28:	4649      	mov	r1, r9
 8018a2a:	47d0      	blx	sl
 8018a2c:	200a      	movs	r0, #10
 8018a2e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8018a32:	e774      	b.n	801891e <rcl_wait_set_resize+0x23a>
 8018a34:	6a28      	ldr	r0, [r5, #32]
 8018a36:	4639      	mov	r1, r7
 8018a38:	47c0      	blx	r8
 8018a3a:	200a      	movs	r0, #10
 8018a3c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8018a40:	e76d      	b.n	801891e <rcl_wait_set_resize+0x23a>
 8018a42:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8018a44:	4639      	mov	r1, r7
 8018a46:	9301      	str	r3, [sp, #4]
 8018a48:	47c0      	blx	r8
 8018a4a:	9b01      	ldr	r3, [sp, #4]
 8018a4c:	200a      	movs	r0, #10
 8018a4e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8018a52:	e764      	b.n	801891e <rcl_wait_set_resize+0x23a>

08018a54 <rcl_wait_set_init>:
 8018a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a58:	b085      	sub	sp, #20
 8018a5a:	4605      	mov	r5, r0
 8018a5c:	460e      	mov	r6, r1
 8018a5e:	4617      	mov	r7, r2
 8018a60:	a812      	add	r0, sp, #72	@ 0x48
 8018a62:	4698      	mov	r8, r3
 8018a64:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8018a68:	f7f7 f9a6 	bl	800fdb8 <rcutils_allocator_is_valid>
 8018a6c:	2d00      	cmp	r5, #0
 8018a6e:	d072      	beq.n	8018b56 <rcl_wait_set_init+0x102>
 8018a70:	f080 0001 	eor.w	r0, r0, #1
 8018a74:	b2c0      	uxtb	r0, r0
 8018a76:	2800      	cmp	r0, #0
 8018a78:	d16d      	bne.n	8018b56 <rcl_wait_set_init+0x102>
 8018a7a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8018a7e:	f1ba 0f00 	cmp.w	sl, #0
 8018a82:	d004      	beq.n	8018a8e <rcl_wait_set_init+0x3a>
 8018a84:	2464      	movs	r4, #100	@ 0x64
 8018a86:	4620      	mov	r0, r4
 8018a88:	b005      	add	sp, #20
 8018a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a8e:	f1b9 0f00 	cmp.w	r9, #0
 8018a92:	d060      	beq.n	8018b56 <rcl_wait_set_init+0x102>
 8018a94:	4648      	mov	r0, r9
 8018a96:	f7fe faa3 	bl	8016fe0 <rcl_context_is_valid>
 8018a9a:	2800      	cmp	r0, #0
 8018a9c:	d068      	beq.n	8018b70 <rcl_wait_set_init+0x11c>
 8018a9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018aa0:	205c      	movs	r0, #92	@ 0x5c
 8018aa2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018aa4:	4798      	blx	r3
 8018aa6:	6328      	str	r0, [r5, #48]	@ 0x30
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	d063      	beq.n	8018b74 <rcl_wait_set_init+0x120>
 8018aac:	225c      	movs	r2, #92	@ 0x5c
 8018aae:	4651      	mov	r1, sl
 8018ab0:	f004 f9f2 	bl	801ce98 <memset>
 8018ab4:	ac12      	add	r4, sp, #72	@ 0x48
 8018ab6:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 8018aba:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8018abe:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 8018ac2:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 8018ac6:	eb03 0e02 	add.w	lr, r3, r2
 8018aca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018acc:	f8d9 9000 	ldr.w	r9, [r9]
 8018ad0:	449e      	add	lr, r3
 8018ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ad4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8018ad8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8018adc:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8018ae0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 8018ae4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 8018ae8:	44be      	add	lr, r7
 8018aea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018aee:	6823      	ldr	r3, [r4, #0]
 8018af0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8018af4:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 8018af8:	f8cc 3000 	str.w	r3, [ip]
 8018afc:	f002 fa2a 	bl	801af54 <rmw_create_wait_set>
 8018b00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018b02:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 8018b06:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018b08:	b350      	cbz	r0, 8018b60 <rcl_wait_set_init+0x10c>
 8018b0a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8018b0c:	4643      	mov	r3, r8
 8018b0e:	463a      	mov	r2, r7
 8018b10:	4631      	mov	r1, r6
 8018b12:	9402      	str	r4, [sp, #8]
 8018b14:	4628      	mov	r0, r5
 8018b16:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8018b18:	9401      	str	r4, [sp, #4]
 8018b1a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018b1c:	9400      	str	r4, [sp, #0]
 8018b1e:	f7ff fde1 	bl	80186e4 <rcl_wait_set_resize>
 8018b22:	4604      	mov	r4, r0
 8018b24:	2800      	cmp	r0, #0
 8018b26:	d0ae      	beq.n	8018a86 <rcl_wait_set_init+0x32>
 8018b28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018b2a:	bb2b      	cbnz	r3, 8018b78 <rcl_wait_set_init+0x124>
 8018b2c:	2600      	movs	r6, #0
 8018b2e:	4628      	mov	r0, r5
 8018b30:	4633      	mov	r3, r6
 8018b32:	4632      	mov	r2, r6
 8018b34:	4631      	mov	r1, r6
 8018b36:	9600      	str	r6, [sp, #0]
 8018b38:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018b3c:	f7ff fdd2 	bl	80186e4 <rcl_wait_set_resize>
 8018b40:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018b42:	2800      	cmp	r0, #0
 8018b44:	d09f      	beq.n	8018a86 <rcl_wait_set_init+0x32>
 8018b46:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018b48:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018b4a:	4798      	blx	r3
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	632e      	str	r6, [r5, #48]	@ 0x30
 8018b50:	b005      	add	sp, #20
 8018b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b56:	240b      	movs	r4, #11
 8018b58:	4620      	mov	r0, r4
 8018b5a:	b005      	add	sp, #20
 8018b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b60:	2401      	movs	r4, #1
 8018b62:	f002 fa01 	bl	801af68 <rmw_destroy_wait_set>
 8018b66:	2800      	cmp	r0, #0
 8018b68:	bf18      	it	ne
 8018b6a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 8018b6e:	e7dd      	b.n	8018b2c <rcl_wait_set_init+0xd8>
 8018b70:	2465      	movs	r4, #101	@ 0x65
 8018b72:	e788      	b.n	8018a86 <rcl_wait_set_init+0x32>
 8018b74:	240a      	movs	r4, #10
 8018b76:	e786      	b.n	8018a86 <rcl_wait_set_init+0x32>
 8018b78:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018b7a:	e7f2      	b.n	8018b62 <rcl_wait_set_init+0x10e>

08018b7c <rcl_wait_set_add_guard_condition>:
 8018b7c:	b318      	cbz	r0, 8018bc6 <rcl_wait_set_add_guard_condition+0x4a>
 8018b7e:	b538      	push	{r3, r4, r5, lr}
 8018b80:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018b82:	4604      	mov	r4, r0
 8018b84:	b30b      	cbz	r3, 8018bca <rcl_wait_set_add_guard_condition+0x4e>
 8018b86:	b319      	cbz	r1, 8018bd0 <rcl_wait_set_add_guard_condition+0x54>
 8018b88:	68dd      	ldr	r5, [r3, #12]
 8018b8a:	68c0      	ldr	r0, [r0, #12]
 8018b8c:	4285      	cmp	r5, r0
 8018b8e:	d217      	bcs.n	8018bc0 <rcl_wait_set_add_guard_condition+0x44>
 8018b90:	1c68      	adds	r0, r5, #1
 8018b92:	60d8      	str	r0, [r3, #12]
 8018b94:	68a3      	ldr	r3, [r4, #8]
 8018b96:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018b9a:	b102      	cbz	r2, 8018b9e <rcl_wait_set_add_guard_condition+0x22>
 8018b9c:	6015      	str	r5, [r2, #0]
 8018b9e:	4608      	mov	r0, r1
 8018ba0:	f003 fb2e 	bl	801c200 <rcl_guard_condition_get_rmw_handle>
 8018ba4:	b150      	cbz	r0, 8018bbc <rcl_wait_set_add_guard_condition+0x40>
 8018ba6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018ba8:	6842      	ldr	r2, [r0, #4]
 8018baa:	2000      	movs	r0, #0
 8018bac:	695b      	ldr	r3, [r3, #20]
 8018bae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018bb2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018bb4:	6913      	ldr	r3, [r2, #16]
 8018bb6:	3301      	adds	r3, #1
 8018bb8:	6113      	str	r3, [r2, #16]
 8018bba:	bd38      	pop	{r3, r4, r5, pc}
 8018bbc:	2001      	movs	r0, #1
 8018bbe:	bd38      	pop	{r3, r4, r5, pc}
 8018bc0:	f240 3086 	movw	r0, #902	@ 0x386
 8018bc4:	bd38      	pop	{r3, r4, r5, pc}
 8018bc6:	200b      	movs	r0, #11
 8018bc8:	4770      	bx	lr
 8018bca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018bce:	bd38      	pop	{r3, r4, r5, pc}
 8018bd0:	200b      	movs	r0, #11
 8018bd2:	bd38      	pop	{r3, r4, r5, pc}

08018bd4 <rcl_wait_set_add_timer>:
 8018bd4:	b328      	cbz	r0, 8018c22 <rcl_wait_set_add_timer+0x4e>
 8018bd6:	b538      	push	{r3, r4, r5, lr}
 8018bd8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018bda:	4604      	mov	r4, r0
 8018bdc:	b31b      	cbz	r3, 8018c26 <rcl_wait_set_add_timer+0x52>
 8018bde:	b329      	cbz	r1, 8018c2c <rcl_wait_set_add_timer+0x58>
 8018be0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8018be2:	6965      	ldr	r5, [r4, #20]
 8018be4:	42a8      	cmp	r0, r5
 8018be6:	d219      	bcs.n	8018c1c <rcl_wait_set_add_timer+0x48>
 8018be8:	1c45      	adds	r5, r0, #1
 8018bea:	641d      	str	r5, [r3, #64]	@ 0x40
 8018bec:	6923      	ldr	r3, [r4, #16]
 8018bee:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8018bf2:	b102      	cbz	r2, 8018bf6 <rcl_wait_set_add_timer+0x22>
 8018bf4:	6010      	str	r0, [r2, #0]
 8018bf6:	4608      	mov	r0, r1
 8018bf8:	f7ff fb9a 	bl	8018330 <rcl_timer_get_guard_condition>
 8018bfc:	b168      	cbz	r0, 8018c1a <rcl_wait_set_add_timer+0x46>
 8018bfe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018c00:	68e3      	ldr	r3, [r4, #12]
 8018c02:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8018c04:	3b01      	subs	r3, #1
 8018c06:	441d      	add	r5, r3
 8018c08:	f003 fafa 	bl	801c200 <rcl_guard_condition_get_rmw_handle>
 8018c0c:	b180      	cbz	r0, 8018c30 <rcl_wait_set_add_timer+0x5c>
 8018c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c10:	6842      	ldr	r2, [r0, #4]
 8018c12:	2000      	movs	r0, #0
 8018c14:	695b      	ldr	r3, [r3, #20]
 8018c16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c1a:	bd38      	pop	{r3, r4, r5, pc}
 8018c1c:	f240 3086 	movw	r0, #902	@ 0x386
 8018c20:	bd38      	pop	{r3, r4, r5, pc}
 8018c22:	200b      	movs	r0, #11
 8018c24:	4770      	bx	lr
 8018c26:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c2a:	bd38      	pop	{r3, r4, r5, pc}
 8018c2c:	200b      	movs	r0, #11
 8018c2e:	bd38      	pop	{r3, r4, r5, pc}
 8018c30:	2001      	movs	r0, #1
 8018c32:	bd38      	pop	{r3, r4, r5, pc}

08018c34 <rcl_wait_set_add_client>:
 8018c34:	b318      	cbz	r0, 8018c7e <rcl_wait_set_add_client+0x4a>
 8018c36:	b538      	push	{r3, r4, r5, lr}
 8018c38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c3a:	4604      	mov	r4, r0
 8018c3c:	b30b      	cbz	r3, 8018c82 <rcl_wait_set_add_client+0x4e>
 8018c3e:	b319      	cbz	r1, 8018c88 <rcl_wait_set_add_client+0x54>
 8018c40:	699d      	ldr	r5, [r3, #24]
 8018c42:	69c0      	ldr	r0, [r0, #28]
 8018c44:	4285      	cmp	r5, r0
 8018c46:	d217      	bcs.n	8018c78 <rcl_wait_set_add_client+0x44>
 8018c48:	1c68      	adds	r0, r5, #1
 8018c4a:	6198      	str	r0, [r3, #24]
 8018c4c:	69a3      	ldr	r3, [r4, #24]
 8018c4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018c52:	b102      	cbz	r2, 8018c56 <rcl_wait_set_add_client+0x22>
 8018c54:	6015      	str	r5, [r2, #0]
 8018c56:	4608      	mov	r0, r1
 8018c58:	f7fe f914 	bl	8016e84 <rcl_client_get_rmw_handle>
 8018c5c:	b150      	cbz	r0, 8018c74 <rcl_wait_set_add_client+0x40>
 8018c5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018c60:	6842      	ldr	r2, [r0, #4]
 8018c62:	2000      	movs	r0, #0
 8018c64:	6a1b      	ldr	r3, [r3, #32]
 8018c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c6a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018c6c:	69d3      	ldr	r3, [r2, #28]
 8018c6e:	3301      	adds	r3, #1
 8018c70:	61d3      	str	r3, [r2, #28]
 8018c72:	bd38      	pop	{r3, r4, r5, pc}
 8018c74:	2001      	movs	r0, #1
 8018c76:	bd38      	pop	{r3, r4, r5, pc}
 8018c78:	f240 3086 	movw	r0, #902	@ 0x386
 8018c7c:	bd38      	pop	{r3, r4, r5, pc}
 8018c7e:	200b      	movs	r0, #11
 8018c80:	4770      	bx	lr
 8018c82:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c86:	bd38      	pop	{r3, r4, r5, pc}
 8018c88:	200b      	movs	r0, #11
 8018c8a:	bd38      	pop	{r3, r4, r5, pc}

08018c8c <rcl_wait_set_add_service>:
 8018c8c:	b318      	cbz	r0, 8018cd6 <rcl_wait_set_add_service+0x4a>
 8018c8e:	b538      	push	{r3, r4, r5, lr}
 8018c90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018c92:	4604      	mov	r4, r0
 8018c94:	b30b      	cbz	r3, 8018cda <rcl_wait_set_add_service+0x4e>
 8018c96:	b319      	cbz	r1, 8018ce0 <rcl_wait_set_add_service+0x54>
 8018c98:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8018c9a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8018c9c:	4285      	cmp	r5, r0
 8018c9e:	d217      	bcs.n	8018cd0 <rcl_wait_set_add_service+0x44>
 8018ca0:	1c68      	adds	r0, r5, #1
 8018ca2:	6258      	str	r0, [r3, #36]	@ 0x24
 8018ca4:	6a23      	ldr	r3, [r4, #32]
 8018ca6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018caa:	b102      	cbz	r2, 8018cae <rcl_wait_set_add_service+0x22>
 8018cac:	6015      	str	r5, [r2, #0]
 8018cae:	4608      	mov	r0, r1
 8018cb0:	f7fe fea2 	bl	80179f8 <rcl_service_get_rmw_handle>
 8018cb4:	b150      	cbz	r0, 8018ccc <rcl_wait_set_add_service+0x40>
 8018cb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018cb8:	6842      	ldr	r2, [r0, #4]
 8018cba:	2000      	movs	r0, #0
 8018cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018cc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018cc4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	6293      	str	r3, [r2, #40]	@ 0x28
 8018cca:	bd38      	pop	{r3, r4, r5, pc}
 8018ccc:	2001      	movs	r0, #1
 8018cce:	bd38      	pop	{r3, r4, r5, pc}
 8018cd0:	f240 3086 	movw	r0, #902	@ 0x386
 8018cd4:	bd38      	pop	{r3, r4, r5, pc}
 8018cd6:	200b      	movs	r0, #11
 8018cd8:	4770      	bx	lr
 8018cda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018cde:	bd38      	pop	{r3, r4, r5, pc}
 8018ce0:	200b      	movs	r0, #11
 8018ce2:	bd38      	pop	{r3, r4, r5, pc}
 8018ce4:	0000      	movs	r0, r0
	...

08018ce8 <rcl_wait>:
 8018ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cec:	ed2d 8b02 	vpush	{d8}
 8018cf0:	b08d      	sub	sp, #52	@ 0x34
 8018cf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	f000 814f 	beq.w	8018f9a <rcl_wait+0x2b2>
 8018cfc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8018cfe:	4605      	mov	r5, r0
 8018d00:	2e00      	cmp	r6, #0
 8018d02:	f000 811a 	beq.w	8018f3a <rcl_wait+0x252>
 8018d06:	6843      	ldr	r3, [r0, #4]
 8018d08:	b983      	cbnz	r3, 8018d2c <rcl_wait+0x44>
 8018d0a:	68eb      	ldr	r3, [r5, #12]
 8018d0c:	b973      	cbnz	r3, 8018d2c <rcl_wait+0x44>
 8018d0e:	696b      	ldr	r3, [r5, #20]
 8018d10:	b963      	cbnz	r3, 8018d2c <rcl_wait+0x44>
 8018d12:	69eb      	ldr	r3, [r5, #28]
 8018d14:	b953      	cbnz	r3, 8018d2c <rcl_wait+0x44>
 8018d16:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018d18:	b943      	cbnz	r3, 8018d2c <rcl_wait+0x44>
 8018d1a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8018d1c:	b933      	cbnz	r3, 8018d2c <rcl_wait+0x44>
 8018d1e:	f240 3085 	movw	r0, #901	@ 0x385
 8018d22:	b00d      	add	sp, #52	@ 0x34
 8018d24:	ecbd 8b02 	vpop	{d8}
 8018d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d2c:	9b04      	ldr	r3, [sp, #16]
 8018d2e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8018d30:	2b01      	cmp	r3, #1
 8018d32:	9b05      	ldr	r3, [sp, #20]
 8018d34:	f173 0300 	sbcs.w	r3, r3, #0
 8018d38:	f2c0 80f8 	blt.w	8018f2c <rcl_wait+0x244>
 8018d3c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018d40:	2a00      	cmp	r2, #0
 8018d42:	f000 810f 	beq.w	8018f64 <rcl_wait+0x27c>
 8018d46:	2400      	movs	r4, #0
 8018d48:	4613      	mov	r3, r2
 8018d4a:	f240 3921 	movw	r9, #801	@ 0x321
 8018d4e:	4632      	mov	r2, r6
 8018d50:	46a2      	mov	sl, r4
 8018d52:	46a3      	mov	fp, r4
 8018d54:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8018fb8 <rcl_wait+0x2d0>
 8018d58:	e014      	b.n	8018d84 <rcl_wait+0x9c>
 8018d5a:	2800      	cmp	r0, #0
 8018d5c:	d1e1      	bne.n	8018d22 <rcl_wait+0x3a>
 8018d5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018d62:	4542      	cmp	r2, r8
 8018d64:	eb73 0107 	sbcs.w	r1, r3, r7
 8018d68:	da03      	bge.n	8018d72 <rcl_wait+0x8a>
 8018d6a:	4690      	mov	r8, r2
 8018d6c:	461f      	mov	r7, r3
 8018d6e:	f04f 0b01 	mov.w	fp, #1
 8018d72:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018d74:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018d76:	3401      	adds	r4, #1
 8018d78:	f14a 0a00 	adc.w	sl, sl, #0
 8018d7c:	429c      	cmp	r4, r3
 8018d7e:	f17a 0100 	sbcs.w	r1, sl, #0
 8018d82:	d228      	bcs.n	8018dd6 <rcl_wait+0xee>
 8018d84:	6928      	ldr	r0, [r5, #16]
 8018d86:	a908      	add	r1, sp, #32
 8018d88:	00a6      	lsls	r6, r4, #2
 8018d8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018d8e:	2800      	cmp	r0, #0
 8018d90:	d0f1      	beq.n	8018d76 <rcl_wait+0x8e>
 8018d92:	68eb      	ldr	r3, [r5, #12]
 8018d94:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018d98:	4423      	add	r3, r4
 8018d9a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8018d9e:	f1be 0f00 	cmp.w	lr, #0
 8018da2:	d006      	beq.n	8018db2 <rcl_wait+0xca>
 8018da4:	6913      	ldr	r3, [r2, #16]
 8018da6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8018daa:	3301      	adds	r3, #1
 8018dac:	6113      	str	r3, [r2, #16]
 8018dae:	692b      	ldr	r3, [r5, #16]
 8018db0:	5998      	ldr	r0, [r3, r6]
 8018db2:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018db6:	f7ff fa89 	bl	80182cc <rcl_timer_get_time_until_next_call>
 8018dba:	4548      	cmp	r0, r9
 8018dbc:	d1cd      	bne.n	8018d5a <rcl_wait+0x72>
 8018dbe:	692b      	ldr	r3, [r5, #16]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	3401      	adds	r4, #1
 8018dc4:	519a      	str	r2, [r3, r6]
 8018dc6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018dc8:	f14a 0a00 	adc.w	sl, sl, #0
 8018dcc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018dce:	429c      	cmp	r4, r3
 8018dd0:	f17a 0100 	sbcs.w	r1, sl, #0
 8018dd4:	d3d6      	bcc.n	8018d84 <rcl_wait+0x9c>
 8018dd6:	4659      	mov	r1, fp
 8018dd8:	4616      	mov	r6, r2
 8018dda:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018dde:	4313      	orrs	r3, r2
 8018de0:	f040 80b4 	bne.w	8018f4c <rcl_wait+0x264>
 8018de4:	2300      	movs	r3, #0
 8018de6:	2200      	movs	r2, #0
 8018de8:	460c      	mov	r4, r1
 8018dea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018dee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018df2:	ab08      	add	r3, sp, #32
 8018df4:	9302      	str	r3, [sp, #8]
 8018df6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8018dfa:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8018dfc:	f106 0110 	add.w	r1, r6, #16
 8018e00:	9300      	str	r3, [sp, #0]
 8018e02:	1d30      	adds	r0, r6, #4
 8018e04:	f106 031c 	add.w	r3, r6, #28
 8018e08:	9201      	str	r2, [sp, #4]
 8018e0a:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8018e0e:	f001 ff3d 	bl	801ac8c <rmw_wait>
 8018e12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018e14:	4680      	mov	r8, r0
 8018e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018e18:	b1e2      	cbz	r2, 8018e54 <rcl_wait+0x16c>
 8018e1a:	f04f 0900 	mov.w	r9, #0
 8018e1e:	464f      	mov	r7, r9
 8018e20:	692a      	ldr	r2, [r5, #16]
 8018e22:	f10d 011f 	add.w	r1, sp, #31
 8018e26:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8018e2a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8018e2e:	b160      	cbz	r0, 8018e4a <rcl_wait+0x162>
 8018e30:	f88d 701f 	strb.w	r7, [sp, #31]
 8018e34:	f7ff fa0e 	bl	8018254 <rcl_timer_is_ready>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	f47f af72 	bne.w	8018d22 <rcl_wait+0x3a>
 8018e3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8018e42:	b90b      	cbnz	r3, 8018e48 <rcl_wait+0x160>
 8018e44:	692a      	ldr	r2, [r5, #16]
 8018e46:	5193      	str	r3, [r2, r6]
 8018e48:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018e4a:	f109 0901 	add.w	r9, r9, #1
 8018e4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018e50:	454a      	cmp	r2, r9
 8018e52:	d8e5      	bhi.n	8018e20 <rcl_wait+0x138>
 8018e54:	f038 0002 	bics.w	r0, r8, #2
 8018e58:	d176      	bne.n	8018f48 <rcl_wait+0x260>
 8018e5a:	686f      	ldr	r7, [r5, #4]
 8018e5c:	b17f      	cbz	r7, 8018e7e <rcl_wait+0x196>
 8018e5e:	4602      	mov	r2, r0
 8018e60:	e002      	b.n	8018e68 <rcl_wait+0x180>
 8018e62:	3201      	adds	r2, #1
 8018e64:	42ba      	cmp	r2, r7
 8018e66:	d00a      	beq.n	8018e7e <rcl_wait+0x196>
 8018e68:	6899      	ldr	r1, [r3, #8]
 8018e6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e6e:	2900      	cmp	r1, #0
 8018e70:	d1f7      	bne.n	8018e62 <rcl_wait+0x17a>
 8018e72:	682e      	ldr	r6, [r5, #0]
 8018e74:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e78:	3201      	adds	r2, #1
 8018e7a:	42ba      	cmp	r2, r7
 8018e7c:	d1f4      	bne.n	8018e68 <rcl_wait+0x180>
 8018e7e:	68ef      	ldr	r7, [r5, #12]
 8018e80:	b17f      	cbz	r7, 8018ea2 <rcl_wait+0x1ba>
 8018e82:	2200      	movs	r2, #0
 8018e84:	e002      	b.n	8018e8c <rcl_wait+0x1a4>
 8018e86:	3201      	adds	r2, #1
 8018e88:	42ba      	cmp	r2, r7
 8018e8a:	d00a      	beq.n	8018ea2 <rcl_wait+0x1ba>
 8018e8c:	6959      	ldr	r1, [r3, #20]
 8018e8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018e92:	2900      	cmp	r1, #0
 8018e94:	d1f7      	bne.n	8018e86 <rcl_wait+0x19e>
 8018e96:	68ae      	ldr	r6, [r5, #8]
 8018e98:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018e9c:	3201      	adds	r2, #1
 8018e9e:	42ba      	cmp	r2, r7
 8018ea0:	d1f4      	bne.n	8018e8c <rcl_wait+0x1a4>
 8018ea2:	69ef      	ldr	r7, [r5, #28]
 8018ea4:	b17f      	cbz	r7, 8018ec6 <rcl_wait+0x1de>
 8018ea6:	2200      	movs	r2, #0
 8018ea8:	e002      	b.n	8018eb0 <rcl_wait+0x1c8>
 8018eaa:	3201      	adds	r2, #1
 8018eac:	42ba      	cmp	r2, r7
 8018eae:	d00a      	beq.n	8018ec6 <rcl_wait+0x1de>
 8018eb0:	6a19      	ldr	r1, [r3, #32]
 8018eb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018eb6:	2900      	cmp	r1, #0
 8018eb8:	d1f7      	bne.n	8018eaa <rcl_wait+0x1c2>
 8018eba:	69ae      	ldr	r6, [r5, #24]
 8018ebc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018ec0:	3201      	adds	r2, #1
 8018ec2:	42ba      	cmp	r2, r7
 8018ec4:	d1f4      	bne.n	8018eb0 <rcl_wait+0x1c8>
 8018ec6:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 8018ec8:	b17f      	cbz	r7, 8018eea <rcl_wait+0x202>
 8018eca:	2200      	movs	r2, #0
 8018ecc:	e002      	b.n	8018ed4 <rcl_wait+0x1ec>
 8018ece:	3201      	adds	r2, #1
 8018ed0:	42ba      	cmp	r2, r7
 8018ed2:	d00a      	beq.n	8018eea <rcl_wait+0x202>
 8018ed4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018ed6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018eda:	2900      	cmp	r1, #0
 8018edc:	d1f7      	bne.n	8018ece <rcl_wait+0x1e6>
 8018ede:	6a2e      	ldr	r6, [r5, #32]
 8018ee0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018ee4:	3201      	adds	r2, #1
 8018ee6:	42ba      	cmp	r2, r7
 8018ee8:	d1f4      	bne.n	8018ed4 <rcl_wait+0x1ec>
 8018eea:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 8018eec:	b17f      	cbz	r7, 8018f0e <rcl_wait+0x226>
 8018eee:	2200      	movs	r2, #0
 8018ef0:	e002      	b.n	8018ef8 <rcl_wait+0x210>
 8018ef2:	3201      	adds	r2, #1
 8018ef4:	42ba      	cmp	r2, r7
 8018ef6:	d00a      	beq.n	8018f0e <rcl_wait+0x226>
 8018ef8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8018efa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018efe:	2900      	cmp	r1, #0
 8018f00:	d1f7      	bne.n	8018ef2 <rcl_wait+0x20a>
 8018f02:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 8018f04:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018f08:	3201      	adds	r2, #1
 8018f0a:	42ba      	cmp	r2, r7
 8018f0c:	d1f4      	bne.n	8018ef8 <rcl_wait+0x210>
 8018f0e:	f1b8 0f02 	cmp.w	r8, #2
 8018f12:	f47f af06 	bne.w	8018d22 <rcl_wait+0x3a>
 8018f16:	f084 0301 	eor.w	r3, r4, #1
 8018f1a:	b2db      	uxtb	r3, r3
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	bf18      	it	ne
 8018f20:	2002      	movne	r0, #2
 8018f22:	b00d      	add	sp, #52	@ 0x34
 8018f24:	ecbd 8b02 	vpop	{d8}
 8018f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f2c:	2a00      	cmp	r2, #0
 8018f2e:	d03a      	beq.n	8018fa6 <rcl_wait+0x2be>
 8018f30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018f34:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018f38:	e705      	b.n	8018d46 <rcl_wait+0x5e>
 8018f3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018f3e:	b00d      	add	sp, #52	@ 0x34
 8018f40:	ecbd 8b02 	vpop	{d8}
 8018f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f48:	2001      	movs	r0, #1
 8018f4a:	e6ea      	b.n	8018d22 <rcl_wait+0x3a>
 8018f4c:	9b04      	ldr	r3, [sp, #16]
 8018f4e:	460c      	mov	r4, r1
 8018f50:	2b01      	cmp	r3, #1
 8018f52:	9b05      	ldr	r3, [sp, #20]
 8018f54:	f173 0300 	sbcs.w	r3, r3, #0
 8018f58:	bfa8      	it	ge
 8018f5a:	f044 0401 	orrge.w	r4, r4, #1
 8018f5e:	b914      	cbnz	r4, 8018f66 <rcl_wait+0x27e>
 8018f60:	4623      	mov	r3, r4
 8018f62:	e747      	b.n	8018df4 <rcl_wait+0x10c>
 8018f64:	4611      	mov	r1, r2
 8018f66:	2f00      	cmp	r7, #0
 8018f68:	da02      	bge.n	8018f70 <rcl_wait+0x288>
 8018f6a:	f04f 0800 	mov.w	r8, #0
 8018f6e:	4647      	mov	r7, r8
 8018f70:	460c      	mov	r4, r1
 8018f72:	4640      	mov	r0, r8
 8018f74:	4639      	mov	r1, r7
 8018f76:	a312      	add	r3, pc, #72	@ (adr r3, 8018fc0 <rcl_wait+0x2d8>)
 8018f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f7c:	f7e7 fa18 	bl	80003b0 <__aeabi_ldivmod>
 8018f80:	a30f      	add	r3, pc, #60	@ (adr r3, 8018fc0 <rcl_wait+0x2d8>)
 8018f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018f8a:	4640      	mov	r0, r8
 8018f8c:	4639      	mov	r1, r7
 8018f8e:	f7e7 fa0f 	bl	80003b0 <__aeabi_ldivmod>
 8018f92:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018f96:	ab08      	add	r3, sp, #32
 8018f98:	e72c      	b.n	8018df4 <rcl_wait+0x10c>
 8018f9a:	200b      	movs	r0, #11
 8018f9c:	b00d      	add	sp, #52	@ 0x34
 8018f9e:	ecbd 8b02 	vpop	{d8}
 8018fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fa6:	4611      	mov	r1, r2
 8018fa8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018fac:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018fb0:	e713      	b.n	8018dda <rcl_wait+0xf2>
 8018fb2:	bf00      	nop
 8018fb4:	f3af 8000 	nop.w
 8018fb8:	ffffffff 	.word	0xffffffff
 8018fbc:	7fffffff 	.word	0x7fffffff
 8018fc0:	3b9aca00 	.word	0x3b9aca00
 8018fc4:	00000000 	.word	0x00000000

08018fc8 <rcl_action_take_goal_response>:
 8018fc8:	2800      	cmp	r0, #0
 8018fca:	d039      	beq.n	8019040 <rcl_action_take_goal_response+0x78>
 8018fcc:	b570      	push	{r4, r5, r6, lr}
 8018fce:	4604      	mov	r4, r0
 8018fd0:	6800      	ldr	r0, [r0, #0]
 8018fd2:	b380      	cbz	r0, 8019036 <rcl_action_take_goal_response+0x6e>
 8018fd4:	460e      	mov	r6, r1
 8018fd6:	4615      	mov	r5, r2
 8018fd8:	f7fd ffda 	bl	8016f90 <rcl_client_is_valid>
 8018fdc:	b330      	cbz	r0, 801902c <rcl_action_take_goal_response+0x64>
 8018fde:	6820      	ldr	r0, [r4, #0]
 8018fe0:	3004      	adds	r0, #4
 8018fe2:	f7fd ffd5 	bl	8016f90 <rcl_client_is_valid>
 8018fe6:	b308      	cbz	r0, 801902c <rcl_action_take_goal_response+0x64>
 8018fe8:	6820      	ldr	r0, [r4, #0]
 8018fea:	3008      	adds	r0, #8
 8018fec:	f7fd ffd0 	bl	8016f90 <rcl_client_is_valid>
 8018ff0:	b1e0      	cbz	r0, 801902c <rcl_action_take_goal_response+0x64>
 8018ff2:	6820      	ldr	r0, [r4, #0]
 8018ff4:	300c      	adds	r0, #12
 8018ff6:	f7fe fdc3 	bl	8017b80 <rcl_subscription_is_valid>
 8018ffa:	b1b8      	cbz	r0, 801902c <rcl_action_take_goal_response+0x64>
 8018ffc:	6820      	ldr	r0, [r4, #0]
 8018ffe:	3010      	adds	r0, #16
 8019000:	f7fe fdbe 	bl	8017b80 <rcl_subscription_is_valid>
 8019004:	b190      	cbz	r0, 801902c <rcl_action_take_goal_response+0x64>
 8019006:	b1cd      	cbz	r5, 801903c <rcl_action_take_goal_response+0x74>
 8019008:	b1c6      	cbz	r6, 801903c <rcl_action_take_goal_response+0x74>
 801900a:	462a      	mov	r2, r5
 801900c:	4631      	mov	r1, r6
 801900e:	6820      	ldr	r0, [r4, #0]
 8019010:	f7fd ff76 	bl	8016f00 <rcl_take_response>
 8019014:	b148      	cbz	r0, 801902a <rcl_action_take_goal_response+0x62>
 8019016:	280a      	cmp	r0, #10
 8019018:	d007      	beq.n	801902a <rcl_action_take_goal_response+0x62>
 801901a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801901e:	f640 0337 	movw	r3, #2103	@ 0x837
 8019022:	4290      	cmp	r0, r2
 8019024:	bf0c      	ite	eq
 8019026:	4618      	moveq	r0, r3
 8019028:	2001      	movne	r0, #1
 801902a:	bd70      	pop	{r4, r5, r6, pc}
 801902c:	f7f6 fee8 	bl	800fe00 <rcutils_reset_error>
 8019030:	f640 0036 	movw	r0, #2102	@ 0x836
 8019034:	bd70      	pop	{r4, r5, r6, pc}
 8019036:	f640 0036 	movw	r0, #2102	@ 0x836
 801903a:	bd70      	pop	{r4, r5, r6, pc}
 801903c:	200b      	movs	r0, #11
 801903e:	bd70      	pop	{r4, r5, r6, pc}
 8019040:	f640 0036 	movw	r0, #2102	@ 0x836
 8019044:	4770      	bx	lr
 8019046:	bf00      	nop

08019048 <rcl_action_send_result_request>:
 8019048:	b390      	cbz	r0, 80190b0 <rcl_action_send_result_request+0x68>
 801904a:	b570      	push	{r4, r5, r6, lr}
 801904c:	4604      	mov	r4, r0
 801904e:	6800      	ldr	r0, [r0, #0]
 8019050:	b348      	cbz	r0, 80190a6 <rcl_action_send_result_request+0x5e>
 8019052:	460e      	mov	r6, r1
 8019054:	4615      	mov	r5, r2
 8019056:	f7fd ff9b 	bl	8016f90 <rcl_client_is_valid>
 801905a:	b1f8      	cbz	r0, 801909c <rcl_action_send_result_request+0x54>
 801905c:	6820      	ldr	r0, [r4, #0]
 801905e:	3004      	adds	r0, #4
 8019060:	f7fd ff96 	bl	8016f90 <rcl_client_is_valid>
 8019064:	b1d0      	cbz	r0, 801909c <rcl_action_send_result_request+0x54>
 8019066:	6820      	ldr	r0, [r4, #0]
 8019068:	3008      	adds	r0, #8
 801906a:	f7fd ff91 	bl	8016f90 <rcl_client_is_valid>
 801906e:	b1a8      	cbz	r0, 801909c <rcl_action_send_result_request+0x54>
 8019070:	6820      	ldr	r0, [r4, #0]
 8019072:	300c      	adds	r0, #12
 8019074:	f7fe fd84 	bl	8017b80 <rcl_subscription_is_valid>
 8019078:	b180      	cbz	r0, 801909c <rcl_action_send_result_request+0x54>
 801907a:	6820      	ldr	r0, [r4, #0]
 801907c:	3010      	adds	r0, #16
 801907e:	f7fe fd7f 	bl	8017b80 <rcl_subscription_is_valid>
 8019082:	b158      	cbz	r0, 801909c <rcl_action_send_result_request+0x54>
 8019084:	b195      	cbz	r5, 80190ac <rcl_action_send_result_request+0x64>
 8019086:	b18e      	cbz	r6, 80190ac <rcl_action_send_result_request+0x64>
 8019088:	6820      	ldr	r0, [r4, #0]
 801908a:	462a      	mov	r2, r5
 801908c:	4631      	mov	r1, r6
 801908e:	3008      	adds	r0, #8
 8019090:	f7fd fefe 	bl	8016e90 <rcl_send_request>
 8019094:	3800      	subs	r0, #0
 8019096:	bf18      	it	ne
 8019098:	2001      	movne	r0, #1
 801909a:	bd70      	pop	{r4, r5, r6, pc}
 801909c:	f7f6 feb0 	bl	800fe00 <rcutils_reset_error>
 80190a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80190a4:	bd70      	pop	{r4, r5, r6, pc}
 80190a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80190aa:	bd70      	pop	{r4, r5, r6, pc}
 80190ac:	200b      	movs	r0, #11
 80190ae:	bd70      	pop	{r4, r5, r6, pc}
 80190b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80190b4:	4770      	bx	lr
 80190b6:	bf00      	nop

080190b8 <rcl_action_take_result_response>:
 80190b8:	2800      	cmp	r0, #0
 80190ba:	d03a      	beq.n	8019132 <rcl_action_take_result_response+0x7a>
 80190bc:	b570      	push	{r4, r5, r6, lr}
 80190be:	4604      	mov	r4, r0
 80190c0:	6800      	ldr	r0, [r0, #0]
 80190c2:	b388      	cbz	r0, 8019128 <rcl_action_take_result_response+0x70>
 80190c4:	460e      	mov	r6, r1
 80190c6:	4615      	mov	r5, r2
 80190c8:	f7fd ff62 	bl	8016f90 <rcl_client_is_valid>
 80190cc:	b338      	cbz	r0, 801911e <rcl_action_take_result_response+0x66>
 80190ce:	6820      	ldr	r0, [r4, #0]
 80190d0:	3004      	adds	r0, #4
 80190d2:	f7fd ff5d 	bl	8016f90 <rcl_client_is_valid>
 80190d6:	b310      	cbz	r0, 801911e <rcl_action_take_result_response+0x66>
 80190d8:	6820      	ldr	r0, [r4, #0]
 80190da:	3008      	adds	r0, #8
 80190dc:	f7fd ff58 	bl	8016f90 <rcl_client_is_valid>
 80190e0:	b1e8      	cbz	r0, 801911e <rcl_action_take_result_response+0x66>
 80190e2:	6820      	ldr	r0, [r4, #0]
 80190e4:	300c      	adds	r0, #12
 80190e6:	f7fe fd4b 	bl	8017b80 <rcl_subscription_is_valid>
 80190ea:	b1c0      	cbz	r0, 801911e <rcl_action_take_result_response+0x66>
 80190ec:	6820      	ldr	r0, [r4, #0]
 80190ee:	3010      	adds	r0, #16
 80190f0:	f7fe fd46 	bl	8017b80 <rcl_subscription_is_valid>
 80190f4:	b198      	cbz	r0, 801911e <rcl_action_take_result_response+0x66>
 80190f6:	b1d5      	cbz	r5, 801912e <rcl_action_take_result_response+0x76>
 80190f8:	b1ce      	cbz	r6, 801912e <rcl_action_take_result_response+0x76>
 80190fa:	6820      	ldr	r0, [r4, #0]
 80190fc:	462a      	mov	r2, r5
 80190fe:	4631      	mov	r1, r6
 8019100:	3008      	adds	r0, #8
 8019102:	f7fd fefd 	bl	8016f00 <rcl_take_response>
 8019106:	b148      	cbz	r0, 801911c <rcl_action_take_result_response+0x64>
 8019108:	280a      	cmp	r0, #10
 801910a:	d007      	beq.n	801911c <rcl_action_take_result_response+0x64>
 801910c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019110:	f640 0337 	movw	r3, #2103	@ 0x837
 8019114:	4290      	cmp	r0, r2
 8019116:	bf0c      	ite	eq
 8019118:	4618      	moveq	r0, r3
 801911a:	2001      	movne	r0, #1
 801911c:	bd70      	pop	{r4, r5, r6, pc}
 801911e:	f7f6 fe6f 	bl	800fe00 <rcutils_reset_error>
 8019122:	f640 0036 	movw	r0, #2102	@ 0x836
 8019126:	bd70      	pop	{r4, r5, r6, pc}
 8019128:	f640 0036 	movw	r0, #2102	@ 0x836
 801912c:	bd70      	pop	{r4, r5, r6, pc}
 801912e:	200b      	movs	r0, #11
 8019130:	bd70      	pop	{r4, r5, r6, pc}
 8019132:	f640 0036 	movw	r0, #2102	@ 0x836
 8019136:	4770      	bx	lr

08019138 <rcl_action_take_cancel_response>:
 8019138:	2800      	cmp	r0, #0
 801913a:	d03a      	beq.n	80191b2 <rcl_action_take_cancel_response+0x7a>
 801913c:	b570      	push	{r4, r5, r6, lr}
 801913e:	4604      	mov	r4, r0
 8019140:	6800      	ldr	r0, [r0, #0]
 8019142:	b388      	cbz	r0, 80191a8 <rcl_action_take_cancel_response+0x70>
 8019144:	460e      	mov	r6, r1
 8019146:	4615      	mov	r5, r2
 8019148:	f7fd ff22 	bl	8016f90 <rcl_client_is_valid>
 801914c:	b338      	cbz	r0, 801919e <rcl_action_take_cancel_response+0x66>
 801914e:	6820      	ldr	r0, [r4, #0]
 8019150:	3004      	adds	r0, #4
 8019152:	f7fd ff1d 	bl	8016f90 <rcl_client_is_valid>
 8019156:	b310      	cbz	r0, 801919e <rcl_action_take_cancel_response+0x66>
 8019158:	6820      	ldr	r0, [r4, #0]
 801915a:	3008      	adds	r0, #8
 801915c:	f7fd ff18 	bl	8016f90 <rcl_client_is_valid>
 8019160:	b1e8      	cbz	r0, 801919e <rcl_action_take_cancel_response+0x66>
 8019162:	6820      	ldr	r0, [r4, #0]
 8019164:	300c      	adds	r0, #12
 8019166:	f7fe fd0b 	bl	8017b80 <rcl_subscription_is_valid>
 801916a:	b1c0      	cbz	r0, 801919e <rcl_action_take_cancel_response+0x66>
 801916c:	6820      	ldr	r0, [r4, #0]
 801916e:	3010      	adds	r0, #16
 8019170:	f7fe fd06 	bl	8017b80 <rcl_subscription_is_valid>
 8019174:	b198      	cbz	r0, 801919e <rcl_action_take_cancel_response+0x66>
 8019176:	b1d5      	cbz	r5, 80191ae <rcl_action_take_cancel_response+0x76>
 8019178:	b1ce      	cbz	r6, 80191ae <rcl_action_take_cancel_response+0x76>
 801917a:	6820      	ldr	r0, [r4, #0]
 801917c:	462a      	mov	r2, r5
 801917e:	4631      	mov	r1, r6
 8019180:	3004      	adds	r0, #4
 8019182:	f7fd febd 	bl	8016f00 <rcl_take_response>
 8019186:	b148      	cbz	r0, 801919c <rcl_action_take_cancel_response+0x64>
 8019188:	280a      	cmp	r0, #10
 801918a:	d007      	beq.n	801919c <rcl_action_take_cancel_response+0x64>
 801918c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8019190:	f640 0337 	movw	r3, #2103	@ 0x837
 8019194:	4290      	cmp	r0, r2
 8019196:	bf0c      	ite	eq
 8019198:	4618      	moveq	r0, r3
 801919a:	2001      	movne	r0, #1
 801919c:	bd70      	pop	{r4, r5, r6, pc}
 801919e:	f7f6 fe2f 	bl	800fe00 <rcutils_reset_error>
 80191a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80191a6:	bd70      	pop	{r4, r5, r6, pc}
 80191a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80191ac:	bd70      	pop	{r4, r5, r6, pc}
 80191ae:	200b      	movs	r0, #11
 80191b0:	bd70      	pop	{r4, r5, r6, pc}
 80191b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80191b6:	4770      	bx	lr

080191b8 <rcl_action_take_feedback>:
 80191b8:	2800      	cmp	r0, #0
 80191ba:	d038      	beq.n	801922e <rcl_action_take_feedback+0x76>
 80191bc:	b530      	push	{r4, r5, lr}
 80191be:	4604      	mov	r4, r0
 80191c0:	6800      	ldr	r0, [r0, #0]
 80191c2:	b091      	sub	sp, #68	@ 0x44
 80191c4:	b378      	cbz	r0, 8019226 <rcl_action_take_feedback+0x6e>
 80191c6:	460d      	mov	r5, r1
 80191c8:	f7fd fee2 	bl	8016f90 <rcl_client_is_valid>
 80191cc:	b328      	cbz	r0, 801921a <rcl_action_take_feedback+0x62>
 80191ce:	6820      	ldr	r0, [r4, #0]
 80191d0:	3004      	adds	r0, #4
 80191d2:	f7fd fedd 	bl	8016f90 <rcl_client_is_valid>
 80191d6:	b300      	cbz	r0, 801921a <rcl_action_take_feedback+0x62>
 80191d8:	6820      	ldr	r0, [r4, #0]
 80191da:	3008      	adds	r0, #8
 80191dc:	f7fd fed8 	bl	8016f90 <rcl_client_is_valid>
 80191e0:	b1d8      	cbz	r0, 801921a <rcl_action_take_feedback+0x62>
 80191e2:	6820      	ldr	r0, [r4, #0]
 80191e4:	300c      	adds	r0, #12
 80191e6:	f7fe fccb 	bl	8017b80 <rcl_subscription_is_valid>
 80191ea:	b1b0      	cbz	r0, 801921a <rcl_action_take_feedback+0x62>
 80191ec:	6820      	ldr	r0, [r4, #0]
 80191ee:	3010      	adds	r0, #16
 80191f0:	f7fe fcc6 	bl	8017b80 <rcl_subscription_is_valid>
 80191f4:	b188      	cbz	r0, 801921a <rcl_action_take_feedback+0x62>
 80191f6:	b1ed      	cbz	r5, 8019234 <rcl_action_take_feedback+0x7c>
 80191f8:	6820      	ldr	r0, [r4, #0]
 80191fa:	2300      	movs	r3, #0
 80191fc:	466a      	mov	r2, sp
 80191fe:	4629      	mov	r1, r5
 8019200:	300c      	adds	r0, #12
 8019202:	f7fe fc61 	bl	8017ac8 <rcl_take>
 8019206:	b160      	cbz	r0, 8019222 <rcl_action_take_feedback+0x6a>
 8019208:	f240 1391 	movw	r3, #401	@ 0x191
 801920c:	4298      	cmp	r0, r3
 801920e:	d014      	beq.n	801923a <rcl_action_take_feedback+0x82>
 8019210:	280a      	cmp	r0, #10
 8019212:	bf18      	it	ne
 8019214:	2001      	movne	r0, #1
 8019216:	b011      	add	sp, #68	@ 0x44
 8019218:	bd30      	pop	{r4, r5, pc}
 801921a:	f7f6 fdf1 	bl	800fe00 <rcutils_reset_error>
 801921e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019222:	b011      	add	sp, #68	@ 0x44
 8019224:	bd30      	pop	{r4, r5, pc}
 8019226:	f640 0036 	movw	r0, #2102	@ 0x836
 801922a:	b011      	add	sp, #68	@ 0x44
 801922c:	bd30      	pop	{r4, r5, pc}
 801922e:	f640 0036 	movw	r0, #2102	@ 0x836
 8019232:	4770      	bx	lr
 8019234:	200b      	movs	r0, #11
 8019236:	b011      	add	sp, #68	@ 0x44
 8019238:	bd30      	pop	{r4, r5, pc}
 801923a:	f640 0037 	movw	r0, #2103	@ 0x837
 801923e:	e7f0      	b.n	8019222 <rcl_action_take_feedback+0x6a>

08019240 <rcl_action_wait_set_add_action_client>:
 8019240:	2800      	cmp	r0, #0
 8019242:	d048      	beq.n	80192d6 <rcl_action_wait_set_add_action_client+0x96>
 8019244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019246:	460c      	mov	r4, r1
 8019248:	2900      	cmp	r1, #0
 801924a:	d03c      	beq.n	80192c6 <rcl_action_wait_set_add_action_client+0x86>
 801924c:	4605      	mov	r5, r0
 801924e:	6808      	ldr	r0, [r1, #0]
 8019250:	2800      	cmp	r0, #0
 8019252:	d038      	beq.n	80192c6 <rcl_action_wait_set_add_action_client+0x86>
 8019254:	4617      	mov	r7, r2
 8019256:	461e      	mov	r6, r3
 8019258:	f7fd fe9a 	bl	8016f90 <rcl_client_is_valid>
 801925c:	b3b0      	cbz	r0, 80192cc <rcl_action_wait_set_add_action_client+0x8c>
 801925e:	6820      	ldr	r0, [r4, #0]
 8019260:	3004      	adds	r0, #4
 8019262:	f7fd fe95 	bl	8016f90 <rcl_client_is_valid>
 8019266:	b388      	cbz	r0, 80192cc <rcl_action_wait_set_add_action_client+0x8c>
 8019268:	6820      	ldr	r0, [r4, #0]
 801926a:	3008      	adds	r0, #8
 801926c:	f7fd fe90 	bl	8016f90 <rcl_client_is_valid>
 8019270:	b360      	cbz	r0, 80192cc <rcl_action_wait_set_add_action_client+0x8c>
 8019272:	6820      	ldr	r0, [r4, #0]
 8019274:	300c      	adds	r0, #12
 8019276:	f7fe fc83 	bl	8017b80 <rcl_subscription_is_valid>
 801927a:	b338      	cbz	r0, 80192cc <rcl_action_wait_set_add_action_client+0x8c>
 801927c:	6820      	ldr	r0, [r4, #0]
 801927e:	3010      	adds	r0, #16
 8019280:	f7fe fc7e 	bl	8017b80 <rcl_subscription_is_valid>
 8019284:	b310      	cbz	r0, 80192cc <rcl_action_wait_set_add_action_client+0x8c>
 8019286:	6821      	ldr	r1, [r4, #0]
 8019288:	4628      	mov	r0, r5
 801928a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801928e:	f7ff fcd1 	bl	8018c34 <rcl_wait_set_add_client>
 8019292:	b9b8      	cbnz	r0, 80192c4 <rcl_action_wait_set_add_action_client+0x84>
 8019294:	6821      	ldr	r1, [r4, #0]
 8019296:	4628      	mov	r0, r5
 8019298:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801929c:	3104      	adds	r1, #4
 801929e:	f7ff fcc9 	bl	8018c34 <rcl_wait_set_add_client>
 80192a2:	b978      	cbnz	r0, 80192c4 <rcl_action_wait_set_add_action_client+0x84>
 80192a4:	6821      	ldr	r1, [r4, #0]
 80192a6:	4628      	mov	r0, r5
 80192a8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80192ac:	3108      	adds	r1, #8
 80192ae:	f7ff fcc1 	bl	8018c34 <rcl_wait_set_add_client>
 80192b2:	b938      	cbnz	r0, 80192c4 <rcl_action_wait_set_add_action_client+0x84>
 80192b4:	6821      	ldr	r1, [r4, #0]
 80192b6:	4628      	mov	r0, r5
 80192b8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80192bc:	310c      	adds	r1, #12
 80192be:	f7ff f969 	bl	8018594 <rcl_wait_set_add_subscription>
 80192c2:	b158      	cbz	r0, 80192dc <rcl_action_wait_set_add_action_client+0x9c>
 80192c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80192ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192cc:	f7f6 fd98 	bl	800fe00 <rcutils_reset_error>
 80192d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80192d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80192da:	4770      	bx	lr
 80192dc:	6821      	ldr	r1, [r4, #0]
 80192de:	4628      	mov	r0, r5
 80192e0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80192e4:	3110      	adds	r1, #16
 80192e6:	f7ff f955 	bl	8018594 <rcl_wait_set_add_subscription>
 80192ea:	2800      	cmp	r0, #0
 80192ec:	d1ea      	bne.n	80192c4 <rcl_action_wait_set_add_action_client+0x84>
 80192ee:	b11f      	cbz	r7, 80192f8 <rcl_action_wait_set_add_action_client+0xb8>
 80192f0:	6823      	ldr	r3, [r4, #0]
 80192f2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80192f6:	603b      	str	r3, [r7, #0]
 80192f8:	2e00      	cmp	r6, #0
 80192fa:	d0e3      	beq.n	80192c4 <rcl_action_wait_set_add_action_client+0x84>
 80192fc:	6823      	ldr	r3, [r4, #0]
 80192fe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8019302:	6033      	str	r3, [r6, #0]
 8019304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019306:	bf00      	nop

08019308 <rcl_action_client_wait_set_get_entities_ready>:
 8019308:	2800      	cmp	r0, #0
 801930a:	d050      	beq.n	80193ae <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019310:	460c      	mov	r4, r1
 8019312:	2900      	cmp	r1, #0
 8019314:	d03e      	beq.n	8019394 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8019316:	4605      	mov	r5, r0
 8019318:	6808      	ldr	r0, [r1, #0]
 801931a:	2800      	cmp	r0, #0
 801931c:	d03a      	beq.n	8019394 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801931e:	4616      	mov	r6, r2
 8019320:	461f      	mov	r7, r3
 8019322:	f7fd fe35 	bl	8016f90 <rcl_client_is_valid>
 8019326:	2800      	cmp	r0, #0
 8019328:	d038      	beq.n	801939c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801932a:	6820      	ldr	r0, [r4, #0]
 801932c:	3004      	adds	r0, #4
 801932e:	f7fd fe2f 	bl	8016f90 <rcl_client_is_valid>
 8019332:	2800      	cmp	r0, #0
 8019334:	d032      	beq.n	801939c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019336:	6820      	ldr	r0, [r4, #0]
 8019338:	3008      	adds	r0, #8
 801933a:	f7fd fe29 	bl	8016f90 <rcl_client_is_valid>
 801933e:	b368      	cbz	r0, 801939c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019340:	6820      	ldr	r0, [r4, #0]
 8019342:	300c      	adds	r0, #12
 8019344:	f7fe fc1c 	bl	8017b80 <rcl_subscription_is_valid>
 8019348:	b340      	cbz	r0, 801939c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801934a:	6820      	ldr	r0, [r4, #0]
 801934c:	3010      	adds	r0, #16
 801934e:	f7fe fc17 	bl	8017b80 <rcl_subscription_is_valid>
 8019352:	b318      	cbz	r0, 801939c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8019354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8019358:	2a00      	cmp	r2, #0
 801935a:	bf18      	it	ne
 801935c:	2b00      	cmpne	r3, #0
 801935e:	9b08      	ldr	r3, [sp, #32]
 8019360:	bf0c      	ite	eq
 8019362:	2101      	moveq	r1, #1
 8019364:	2100      	movne	r1, #0
 8019366:	2b00      	cmp	r3, #0
 8019368:	bf08      	it	eq
 801936a:	f041 0101 	orreq.w	r1, r1, #1
 801936e:	2f00      	cmp	r7, #0
 8019370:	bf08      	it	eq
 8019372:	f041 0101 	orreq.w	r1, r1, #1
 8019376:	b9b9      	cbnz	r1, 80193a8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8019378:	b1b6      	cbz	r6, 80193a8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801937a:	6823      	ldr	r3, [r4, #0]
 801937c:	686c      	ldr	r4, [r5, #4]
 801937e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8019382:	428a      	cmp	r2, r1
 8019384:	4610      	mov	r0, r2
 8019386:	bf38      	it	cc
 8019388:	4608      	movcc	r0, r1
 801938a:	4284      	cmp	r4, r0
 801938c:	d812      	bhi.n	80193b4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801938e:	2001      	movs	r0, #1
 8019390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019394:	f640 0036 	movw	r0, #2102	@ 0x836
 8019398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801939c:	f7f6 fd30 	bl	800fe00 <rcutils_reset_error>
 80193a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80193a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193a8:	200b      	movs	r0, #11
 80193aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80193b2:	4770      	bx	lr
 80193b4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 80193b8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 80193bc:	45f0      	cmp	r8, lr
 80193be:	4640      	mov	r0, r8
 80193c0:	69ec      	ldr	r4, [r5, #28]
 80193c2:	bf38      	it	cc
 80193c4:	4670      	movcc	r0, lr
 80193c6:	4560      	cmp	r0, ip
 80193c8:	bf38      	it	cc
 80193ca:	4660      	movcc	r0, ip
 80193cc:	4284      	cmp	r4, r0
 80193ce:	d9de      	bls.n	801938e <rcl_action_client_wait_set_get_entities_ready+0x86>
 80193d0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80193d4:	682d      	ldr	r5, [r5, #0]
 80193d6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80193da:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80193de:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80193e2:	1a18      	subs	r0, r3, r0
 80193e4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80193e8:	f103 0c0c 	add.w	ip, r3, #12
 80193ec:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80193f0:	fab0 f080 	clz	r0, r0
 80193f4:	eba5 050c 	sub.w	r5, r5, ip
 80193f8:	0940      	lsrs	r0, r0, #5
 80193fa:	fab5 f585 	clz	r5, r5
 80193fe:	096d      	lsrs	r5, r5, #5
 8019400:	7035      	strb	r5, [r6, #0]
 8019402:	f103 0510 	add.w	r5, r3, #16
 8019406:	1b64      	subs	r4, r4, r5
 8019408:	9d08      	ldr	r5, [sp, #32]
 801940a:	fab4 f484 	clz	r4, r4
 801940e:	0964      	lsrs	r4, r4, #5
 8019410:	703c      	strb	r4, [r7, #0]
 8019412:	1d1c      	adds	r4, r3, #4
 8019414:	3308      	adds	r3, #8
 8019416:	7028      	strb	r0, [r5, #0]
 8019418:	1b09      	subs	r1, r1, r4
 801941a:	2000      	movs	r0, #0
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019420:	fab1 f181 	clz	r1, r1
 8019424:	fab3 f383 	clz	r3, r3
 8019428:	0949      	lsrs	r1, r1, #5
 801942a:	095b      	lsrs	r3, r3, #5
 801942c:	7011      	strb	r1, [r2, #0]
 801942e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019430:	7013      	strb	r3, [r2, #0]
 8019432:	e7b1      	b.n	8019398 <rcl_action_client_wait_set_get_entities_ready+0x90>

08019434 <rcl_action_take_goal_request>:
 8019434:	2800      	cmp	r0, #0
 8019436:	d039      	beq.n	80194ac <rcl_action_take_goal_request+0x78>
 8019438:	b570      	push	{r4, r5, r6, lr}
 801943a:	4604      	mov	r4, r0
 801943c:	6800      	ldr	r0, [r0, #0]
 801943e:	b380      	cbz	r0, 80194a2 <rcl_action_take_goal_request+0x6e>
 8019440:	460e      	mov	r6, r1
 8019442:	4615      	mov	r5, r2
 8019444:	f7fe fb36 	bl	8017ab4 <rcl_service_is_valid>
 8019448:	b330      	cbz	r0, 8019498 <rcl_action_take_goal_request+0x64>
 801944a:	6820      	ldr	r0, [r4, #0]
 801944c:	3004      	adds	r0, #4
 801944e:	f7fe fb31 	bl	8017ab4 <rcl_service_is_valid>
 8019452:	b308      	cbz	r0, 8019498 <rcl_action_take_goal_request+0x64>
 8019454:	6820      	ldr	r0, [r4, #0]
 8019456:	3008      	adds	r0, #8
 8019458:	f7fe fb2c 	bl	8017ab4 <rcl_service_is_valid>
 801945c:	b1e0      	cbz	r0, 8019498 <rcl_action_take_goal_request+0x64>
 801945e:	6820      	ldr	r0, [r4, #0]
 8019460:	300c      	adds	r0, #12
 8019462:	f7f5 fd39 	bl	800eed8 <rcl_publisher_is_valid>
 8019466:	b1b8      	cbz	r0, 8019498 <rcl_action_take_goal_request+0x64>
 8019468:	6820      	ldr	r0, [r4, #0]
 801946a:	3010      	adds	r0, #16
 801946c:	f7f5 fd34 	bl	800eed8 <rcl_publisher_is_valid>
 8019470:	b190      	cbz	r0, 8019498 <rcl_action_take_goal_request+0x64>
 8019472:	b1cd      	cbz	r5, 80194a8 <rcl_action_take_goal_request+0x74>
 8019474:	b1c6      	cbz	r6, 80194a8 <rcl_action_take_goal_request+0x74>
 8019476:	462a      	mov	r2, r5
 8019478:	4631      	mov	r1, r6
 801947a:	6820      	ldr	r0, [r4, #0]
 801947c:	f7fe fac2 	bl	8017a04 <rcl_take_request>
 8019480:	b148      	cbz	r0, 8019496 <rcl_action_take_goal_request+0x62>
 8019482:	280a      	cmp	r0, #10
 8019484:	d007      	beq.n	8019496 <rcl_action_take_goal_request+0x62>
 8019486:	f240 2259 	movw	r2, #601	@ 0x259
 801948a:	f640 0399 	movw	r3, #2201	@ 0x899
 801948e:	4290      	cmp	r0, r2
 8019490:	bf0c      	ite	eq
 8019492:	4618      	moveq	r0, r3
 8019494:	2001      	movne	r0, #1
 8019496:	bd70      	pop	{r4, r5, r6, pc}
 8019498:	f7f6 fcb2 	bl	800fe00 <rcutils_reset_error>
 801949c:	f640 0098 	movw	r0, #2200	@ 0x898
 80194a0:	bd70      	pop	{r4, r5, r6, pc}
 80194a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80194a6:	bd70      	pop	{r4, r5, r6, pc}
 80194a8:	200b      	movs	r0, #11
 80194aa:	bd70      	pop	{r4, r5, r6, pc}
 80194ac:	f640 0098 	movw	r0, #2200	@ 0x898
 80194b0:	4770      	bx	lr
 80194b2:	bf00      	nop

080194b4 <rcl_action_send_goal_response>:
 80194b4:	b390      	cbz	r0, 801951c <rcl_action_send_goal_response+0x68>
 80194b6:	b570      	push	{r4, r5, r6, lr}
 80194b8:	4604      	mov	r4, r0
 80194ba:	6800      	ldr	r0, [r0, #0]
 80194bc:	b348      	cbz	r0, 8019512 <rcl_action_send_goal_response+0x5e>
 80194be:	460e      	mov	r6, r1
 80194c0:	4615      	mov	r5, r2
 80194c2:	f7fe faf7 	bl	8017ab4 <rcl_service_is_valid>
 80194c6:	b1f8      	cbz	r0, 8019508 <rcl_action_send_goal_response+0x54>
 80194c8:	6820      	ldr	r0, [r4, #0]
 80194ca:	3004      	adds	r0, #4
 80194cc:	f7fe faf2 	bl	8017ab4 <rcl_service_is_valid>
 80194d0:	b1d0      	cbz	r0, 8019508 <rcl_action_send_goal_response+0x54>
 80194d2:	6820      	ldr	r0, [r4, #0]
 80194d4:	3008      	adds	r0, #8
 80194d6:	f7fe faed 	bl	8017ab4 <rcl_service_is_valid>
 80194da:	b1a8      	cbz	r0, 8019508 <rcl_action_send_goal_response+0x54>
 80194dc:	6820      	ldr	r0, [r4, #0]
 80194de:	300c      	adds	r0, #12
 80194e0:	f7f5 fcfa 	bl	800eed8 <rcl_publisher_is_valid>
 80194e4:	b180      	cbz	r0, 8019508 <rcl_action_send_goal_response+0x54>
 80194e6:	6820      	ldr	r0, [r4, #0]
 80194e8:	3010      	adds	r0, #16
 80194ea:	f7f5 fcf5 	bl	800eed8 <rcl_publisher_is_valid>
 80194ee:	b158      	cbz	r0, 8019508 <rcl_action_send_goal_response+0x54>
 80194f0:	b195      	cbz	r5, 8019518 <rcl_action_send_goal_response+0x64>
 80194f2:	b18e      	cbz	r6, 8019518 <rcl_action_send_goal_response+0x64>
 80194f4:	462a      	mov	r2, r5
 80194f6:	4631      	mov	r1, r6
 80194f8:	6820      	ldr	r0, [r4, #0]
 80194fa:	f7fe fac3 	bl	8017a84 <rcl_send_response>
 80194fe:	b110      	cbz	r0, 8019506 <rcl_action_send_goal_response+0x52>
 8019500:	2802      	cmp	r0, #2
 8019502:	bf18      	it	ne
 8019504:	2001      	movne	r0, #1
 8019506:	bd70      	pop	{r4, r5, r6, pc}
 8019508:	f7f6 fc7a 	bl	800fe00 <rcutils_reset_error>
 801950c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019510:	bd70      	pop	{r4, r5, r6, pc}
 8019512:	f640 0098 	movw	r0, #2200	@ 0x898
 8019516:	bd70      	pop	{r4, r5, r6, pc}
 8019518:	200b      	movs	r0, #11
 801951a:	bd70      	pop	{r4, r5, r6, pc}
 801951c:	f640 0098 	movw	r0, #2200	@ 0x898
 8019520:	4770      	bx	lr
 8019522:	bf00      	nop

08019524 <rcl_action_take_result_request>:
 8019524:	2800      	cmp	r0, #0
 8019526:	d03a      	beq.n	801959e <rcl_action_take_result_request+0x7a>
 8019528:	b570      	push	{r4, r5, r6, lr}
 801952a:	4604      	mov	r4, r0
 801952c:	6800      	ldr	r0, [r0, #0]
 801952e:	b388      	cbz	r0, 8019594 <rcl_action_take_result_request+0x70>
 8019530:	460e      	mov	r6, r1
 8019532:	4615      	mov	r5, r2
 8019534:	f7fe fabe 	bl	8017ab4 <rcl_service_is_valid>
 8019538:	b338      	cbz	r0, 801958a <rcl_action_take_result_request+0x66>
 801953a:	6820      	ldr	r0, [r4, #0]
 801953c:	3004      	adds	r0, #4
 801953e:	f7fe fab9 	bl	8017ab4 <rcl_service_is_valid>
 8019542:	b310      	cbz	r0, 801958a <rcl_action_take_result_request+0x66>
 8019544:	6820      	ldr	r0, [r4, #0]
 8019546:	3008      	adds	r0, #8
 8019548:	f7fe fab4 	bl	8017ab4 <rcl_service_is_valid>
 801954c:	b1e8      	cbz	r0, 801958a <rcl_action_take_result_request+0x66>
 801954e:	6820      	ldr	r0, [r4, #0]
 8019550:	300c      	adds	r0, #12
 8019552:	f7f5 fcc1 	bl	800eed8 <rcl_publisher_is_valid>
 8019556:	b1c0      	cbz	r0, 801958a <rcl_action_take_result_request+0x66>
 8019558:	6820      	ldr	r0, [r4, #0]
 801955a:	3010      	adds	r0, #16
 801955c:	f7f5 fcbc 	bl	800eed8 <rcl_publisher_is_valid>
 8019560:	b198      	cbz	r0, 801958a <rcl_action_take_result_request+0x66>
 8019562:	b1d5      	cbz	r5, 801959a <rcl_action_take_result_request+0x76>
 8019564:	b1ce      	cbz	r6, 801959a <rcl_action_take_result_request+0x76>
 8019566:	6820      	ldr	r0, [r4, #0]
 8019568:	462a      	mov	r2, r5
 801956a:	4631      	mov	r1, r6
 801956c:	3008      	adds	r0, #8
 801956e:	f7fe fa49 	bl	8017a04 <rcl_take_request>
 8019572:	b148      	cbz	r0, 8019588 <rcl_action_take_result_request+0x64>
 8019574:	280a      	cmp	r0, #10
 8019576:	d007      	beq.n	8019588 <rcl_action_take_result_request+0x64>
 8019578:	f240 2259 	movw	r2, #601	@ 0x259
 801957c:	f640 0399 	movw	r3, #2201	@ 0x899
 8019580:	4290      	cmp	r0, r2
 8019582:	bf0c      	ite	eq
 8019584:	4618      	moveq	r0, r3
 8019586:	2001      	movne	r0, #1
 8019588:	bd70      	pop	{r4, r5, r6, pc}
 801958a:	f7f6 fc39 	bl	800fe00 <rcutils_reset_error>
 801958e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019592:	bd70      	pop	{r4, r5, r6, pc}
 8019594:	f640 0098 	movw	r0, #2200	@ 0x898
 8019598:	bd70      	pop	{r4, r5, r6, pc}
 801959a:	200b      	movs	r0, #11
 801959c:	bd70      	pop	{r4, r5, r6, pc}
 801959e:	f640 0098 	movw	r0, #2200	@ 0x898
 80195a2:	4770      	bx	lr

080195a4 <rcl_action_take_cancel_request>:
 80195a4:	2800      	cmp	r0, #0
 80195a6:	d03a      	beq.n	801961e <rcl_action_take_cancel_request+0x7a>
 80195a8:	b570      	push	{r4, r5, r6, lr}
 80195aa:	4604      	mov	r4, r0
 80195ac:	6800      	ldr	r0, [r0, #0]
 80195ae:	b388      	cbz	r0, 8019614 <rcl_action_take_cancel_request+0x70>
 80195b0:	460e      	mov	r6, r1
 80195b2:	4615      	mov	r5, r2
 80195b4:	f7fe fa7e 	bl	8017ab4 <rcl_service_is_valid>
 80195b8:	b338      	cbz	r0, 801960a <rcl_action_take_cancel_request+0x66>
 80195ba:	6820      	ldr	r0, [r4, #0]
 80195bc:	3004      	adds	r0, #4
 80195be:	f7fe fa79 	bl	8017ab4 <rcl_service_is_valid>
 80195c2:	b310      	cbz	r0, 801960a <rcl_action_take_cancel_request+0x66>
 80195c4:	6820      	ldr	r0, [r4, #0]
 80195c6:	3008      	adds	r0, #8
 80195c8:	f7fe fa74 	bl	8017ab4 <rcl_service_is_valid>
 80195cc:	b1e8      	cbz	r0, 801960a <rcl_action_take_cancel_request+0x66>
 80195ce:	6820      	ldr	r0, [r4, #0]
 80195d0:	300c      	adds	r0, #12
 80195d2:	f7f5 fc81 	bl	800eed8 <rcl_publisher_is_valid>
 80195d6:	b1c0      	cbz	r0, 801960a <rcl_action_take_cancel_request+0x66>
 80195d8:	6820      	ldr	r0, [r4, #0]
 80195da:	3010      	adds	r0, #16
 80195dc:	f7f5 fc7c 	bl	800eed8 <rcl_publisher_is_valid>
 80195e0:	b198      	cbz	r0, 801960a <rcl_action_take_cancel_request+0x66>
 80195e2:	b1d5      	cbz	r5, 801961a <rcl_action_take_cancel_request+0x76>
 80195e4:	b1ce      	cbz	r6, 801961a <rcl_action_take_cancel_request+0x76>
 80195e6:	6820      	ldr	r0, [r4, #0]
 80195e8:	462a      	mov	r2, r5
 80195ea:	4631      	mov	r1, r6
 80195ec:	3004      	adds	r0, #4
 80195ee:	f7fe fa09 	bl	8017a04 <rcl_take_request>
 80195f2:	b148      	cbz	r0, 8019608 <rcl_action_take_cancel_request+0x64>
 80195f4:	280a      	cmp	r0, #10
 80195f6:	d007      	beq.n	8019608 <rcl_action_take_cancel_request+0x64>
 80195f8:	f240 2259 	movw	r2, #601	@ 0x259
 80195fc:	f640 0399 	movw	r3, #2201	@ 0x899
 8019600:	4290      	cmp	r0, r2
 8019602:	bf0c      	ite	eq
 8019604:	4618      	moveq	r0, r3
 8019606:	2001      	movne	r0, #1
 8019608:	bd70      	pop	{r4, r5, r6, pc}
 801960a:	f7f6 fbf9 	bl	800fe00 <rcutils_reset_error>
 801960e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019612:	bd70      	pop	{r4, r5, r6, pc}
 8019614:	f640 0098 	movw	r0, #2200	@ 0x898
 8019618:	bd70      	pop	{r4, r5, r6, pc}
 801961a:	200b      	movs	r0, #11
 801961c:	bd70      	pop	{r4, r5, r6, pc}
 801961e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019622:	4770      	bx	lr

08019624 <rcl_action_send_cancel_response>:
 8019624:	b398      	cbz	r0, 801968e <rcl_action_send_cancel_response+0x6a>
 8019626:	b570      	push	{r4, r5, r6, lr}
 8019628:	4604      	mov	r4, r0
 801962a:	6800      	ldr	r0, [r0, #0]
 801962c:	b350      	cbz	r0, 8019684 <rcl_action_send_cancel_response+0x60>
 801962e:	460e      	mov	r6, r1
 8019630:	4615      	mov	r5, r2
 8019632:	f7fe fa3f 	bl	8017ab4 <rcl_service_is_valid>
 8019636:	b300      	cbz	r0, 801967a <rcl_action_send_cancel_response+0x56>
 8019638:	6820      	ldr	r0, [r4, #0]
 801963a:	3004      	adds	r0, #4
 801963c:	f7fe fa3a 	bl	8017ab4 <rcl_service_is_valid>
 8019640:	b1d8      	cbz	r0, 801967a <rcl_action_send_cancel_response+0x56>
 8019642:	6820      	ldr	r0, [r4, #0]
 8019644:	3008      	adds	r0, #8
 8019646:	f7fe fa35 	bl	8017ab4 <rcl_service_is_valid>
 801964a:	b1b0      	cbz	r0, 801967a <rcl_action_send_cancel_response+0x56>
 801964c:	6820      	ldr	r0, [r4, #0]
 801964e:	300c      	adds	r0, #12
 8019650:	f7f5 fc42 	bl	800eed8 <rcl_publisher_is_valid>
 8019654:	b188      	cbz	r0, 801967a <rcl_action_send_cancel_response+0x56>
 8019656:	6820      	ldr	r0, [r4, #0]
 8019658:	3010      	adds	r0, #16
 801965a:	f7f5 fc3d 	bl	800eed8 <rcl_publisher_is_valid>
 801965e:	b160      	cbz	r0, 801967a <rcl_action_send_cancel_response+0x56>
 8019660:	b19d      	cbz	r5, 801968a <rcl_action_send_cancel_response+0x66>
 8019662:	b196      	cbz	r6, 801968a <rcl_action_send_cancel_response+0x66>
 8019664:	6820      	ldr	r0, [r4, #0]
 8019666:	462a      	mov	r2, r5
 8019668:	4631      	mov	r1, r6
 801966a:	3004      	adds	r0, #4
 801966c:	f7fe fa0a 	bl	8017a84 <rcl_send_response>
 8019670:	b110      	cbz	r0, 8019678 <rcl_action_send_cancel_response+0x54>
 8019672:	2802      	cmp	r0, #2
 8019674:	bf18      	it	ne
 8019676:	2001      	movne	r0, #1
 8019678:	bd70      	pop	{r4, r5, r6, pc}
 801967a:	f7f6 fbc1 	bl	800fe00 <rcutils_reset_error>
 801967e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019682:	bd70      	pop	{r4, r5, r6, pc}
 8019684:	f640 0098 	movw	r0, #2200	@ 0x898
 8019688:	bd70      	pop	{r4, r5, r6, pc}
 801968a:	200b      	movs	r0, #11
 801968c:	bd70      	pop	{r4, r5, r6, pc}
 801968e:	f640 0098 	movw	r0, #2200	@ 0x898
 8019692:	4770      	bx	lr

08019694 <rcl_action_wait_set_add_action_server>:
 8019694:	2800      	cmp	r0, #0
 8019696:	d04d      	beq.n	8019734 <rcl_action_wait_set_add_action_server+0xa0>
 8019698:	b570      	push	{r4, r5, r6, lr}
 801969a:	460c      	mov	r4, r1
 801969c:	b159      	cbz	r1, 80196b6 <rcl_action_wait_set_add_action_server+0x22>
 801969e:	4605      	mov	r5, r0
 80196a0:	6808      	ldr	r0, [r1, #0]
 80196a2:	b140      	cbz	r0, 80196b6 <rcl_action_wait_set_add_action_server+0x22>
 80196a4:	4616      	mov	r6, r2
 80196a6:	f7fe fa05 	bl	8017ab4 <rcl_service_is_valid>
 80196aa:	b120      	cbz	r0, 80196b6 <rcl_action_wait_set_add_action_server+0x22>
 80196ac:	6820      	ldr	r0, [r4, #0]
 80196ae:	3004      	adds	r0, #4
 80196b0:	f7fe fa00 	bl	8017ab4 <rcl_service_is_valid>
 80196b4:	b910      	cbnz	r0, 80196bc <rcl_action_wait_set_add_action_server+0x28>
 80196b6:	f640 0098 	movw	r0, #2200	@ 0x898
 80196ba:	bd70      	pop	{r4, r5, r6, pc}
 80196bc:	6820      	ldr	r0, [r4, #0]
 80196be:	3008      	adds	r0, #8
 80196c0:	f7fe f9f8 	bl	8017ab4 <rcl_service_is_valid>
 80196c4:	2800      	cmp	r0, #0
 80196c6:	d0f6      	beq.n	80196b6 <rcl_action_wait_set_add_action_server+0x22>
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	300c      	adds	r0, #12
 80196cc:	f7f5 fc1c 	bl	800ef08 <rcl_publisher_is_valid_except_context>
 80196d0:	2800      	cmp	r0, #0
 80196d2:	d0f0      	beq.n	80196b6 <rcl_action_wait_set_add_action_server+0x22>
 80196d4:	6820      	ldr	r0, [r4, #0]
 80196d6:	3010      	adds	r0, #16
 80196d8:	f7f5 fc16 	bl	800ef08 <rcl_publisher_is_valid_except_context>
 80196dc:	2800      	cmp	r0, #0
 80196de:	d0ea      	beq.n	80196b6 <rcl_action_wait_set_add_action_server+0x22>
 80196e0:	6821      	ldr	r1, [r4, #0]
 80196e2:	4628      	mov	r0, r5
 80196e4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80196e8:	f7ff fad0 	bl	8018c8c <rcl_wait_set_add_service>
 80196ec:	2800      	cmp	r0, #0
 80196ee:	d1e4      	bne.n	80196ba <rcl_action_wait_set_add_action_server+0x26>
 80196f0:	6821      	ldr	r1, [r4, #0]
 80196f2:	4628      	mov	r0, r5
 80196f4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80196f8:	3104      	adds	r1, #4
 80196fa:	f7ff fac7 	bl	8018c8c <rcl_wait_set_add_service>
 80196fe:	2800      	cmp	r0, #0
 8019700:	d1db      	bne.n	80196ba <rcl_action_wait_set_add_action_server+0x26>
 8019702:	6821      	ldr	r1, [r4, #0]
 8019704:	4628      	mov	r0, r5
 8019706:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801970a:	3108      	adds	r1, #8
 801970c:	f7ff fabe 	bl	8018c8c <rcl_wait_set_add_service>
 8019710:	2800      	cmp	r0, #0
 8019712:	d1d2      	bne.n	80196ba <rcl_action_wait_set_add_action_server+0x26>
 8019714:	6821      	ldr	r1, [r4, #0]
 8019716:	4628      	mov	r0, r5
 8019718:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801971c:	3114      	adds	r1, #20
 801971e:	f7ff fa59 	bl	8018bd4 <rcl_wait_set_add_timer>
 8019722:	2800      	cmp	r0, #0
 8019724:	d1c9      	bne.n	80196ba <rcl_action_wait_set_add_action_server+0x26>
 8019726:	2e00      	cmp	r6, #0
 8019728:	d0c7      	beq.n	80196ba <rcl_action_wait_set_add_action_server+0x26>
 801972a:	6823      	ldr	r3, [r4, #0]
 801972c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8019730:	6033      	str	r3, [r6, #0]
 8019732:	bd70      	pop	{r4, r5, r6, pc}
 8019734:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019738:	4770      	bx	lr
 801973a:	bf00      	nop

0801973c <rcl_action_server_wait_set_get_entities_ready>:
 801973c:	2800      	cmp	r0, #0
 801973e:	d067      	beq.n	8019810 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8019740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019744:	460c      	mov	r4, r1
 8019746:	b161      	cbz	r1, 8019762 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019748:	4605      	mov	r5, r0
 801974a:	6808      	ldr	r0, [r1, #0]
 801974c:	b148      	cbz	r0, 8019762 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801974e:	4616      	mov	r6, r2
 8019750:	4698      	mov	r8, r3
 8019752:	f7fe f9af 	bl	8017ab4 <rcl_service_is_valid>
 8019756:	b120      	cbz	r0, 8019762 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019758:	6820      	ldr	r0, [r4, #0]
 801975a:	3004      	adds	r0, #4
 801975c:	f7fe f9aa 	bl	8017ab4 <rcl_service_is_valid>
 8019760:	b918      	cbnz	r0, 801976a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8019762:	f640 0098 	movw	r0, #2200	@ 0x898
 8019766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801976a:	6820      	ldr	r0, [r4, #0]
 801976c:	3008      	adds	r0, #8
 801976e:	f7fe f9a1 	bl	8017ab4 <rcl_service_is_valid>
 8019772:	2800      	cmp	r0, #0
 8019774:	d0f5      	beq.n	8019762 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019776:	6820      	ldr	r0, [r4, #0]
 8019778:	300c      	adds	r0, #12
 801977a:	f7f5 fbc5 	bl	800ef08 <rcl_publisher_is_valid_except_context>
 801977e:	2800      	cmp	r0, #0
 8019780:	d0ef      	beq.n	8019762 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019782:	6820      	ldr	r0, [r4, #0]
 8019784:	3010      	adds	r0, #16
 8019786:	f7f5 fbbf 	bl	800ef08 <rcl_publisher_is_valid_except_context>
 801978a:	2800      	cmp	r0, #0
 801978c:	d0e9      	beq.n	8019762 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801978e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019792:	2a00      	cmp	r2, #0
 8019794:	bf18      	it	ne
 8019796:	2b00      	cmpne	r3, #0
 8019798:	bf0c      	ite	eq
 801979a:	2101      	moveq	r1, #1
 801979c:	2100      	movne	r1, #0
 801979e:	f1b8 0f00 	cmp.w	r8, #0
 80197a2:	bf08      	it	eq
 80197a4:	f041 0101 	orreq.w	r1, r1, #1
 80197a8:	bba9      	cbnz	r1, 8019816 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80197aa:	b3a6      	cbz	r6, 8019816 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80197ac:	6821      	ldr	r1, [r4, #0]
 80197ae:	2000      	movs	r0, #0
 80197b0:	692c      	ldr	r4, [r5, #16]
 80197b2:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 80197b6:	6a2f      	ldr	r7, [r5, #32]
 80197b8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80197bc:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80197c0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80197c4:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80197c8:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80197cc:	1a64      	subs	r4, r4, r1
 80197ce:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80197d2:	fab4 f484 	clz	r4, r4
 80197d6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80197da:	0964      	lsrs	r4, r4, #5
 80197dc:	7034      	strb	r4, [r6, #0]
 80197de:	1d0c      	adds	r4, r1, #4
 80197e0:	1b2c      	subs	r4, r5, r4
 80197e2:	fab4 f484 	clz	r4, r4
 80197e6:	0964      	lsrs	r4, r4, #5
 80197e8:	f888 4000 	strb.w	r4, [r8]
 80197ec:	f101 0408 	add.w	r4, r1, #8
 80197f0:	1b1b      	subs	r3, r3, r4
 80197f2:	9c06      	ldr	r4, [sp, #24]
 80197f4:	fab3 f383 	clz	r3, r3
 80197f8:	095b      	lsrs	r3, r3, #5
 80197fa:	7023      	strb	r3, [r4, #0]
 80197fc:	f101 0314 	add.w	r3, r1, #20
 8019800:	1ad3      	subs	r3, r2, r3
 8019802:	9a07      	ldr	r2, [sp, #28]
 8019804:	fab3 f383 	clz	r3, r3
 8019808:	095b      	lsrs	r3, r3, #5
 801980a:	7013      	strb	r3, [r2, #0]
 801980c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019810:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8019814:	4770      	bx	lr
 8019816:	200b      	movs	r0, #11
 8019818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801981c <_execute_event_handler>:
 801981c:	2002      	movs	r0, #2
 801981e:	4770      	bx	lr

08019820 <_cancel_goal_event_handler>:
 8019820:	2003      	movs	r0, #3
 8019822:	4770      	bx	lr

08019824 <_succeed_event_handler>:
 8019824:	2004      	movs	r0, #4
 8019826:	4770      	bx	lr

08019828 <_abort_event_handler>:
 8019828:	2006      	movs	r0, #6
 801982a:	4770      	bx	lr

0801982c <_canceled_event_handler>:
 801982c:	2005      	movs	r0, #5
 801982e:	4770      	bx	lr

08019830 <rcl_action_transition_goal_state>:
 8019830:	b2c2      	uxtb	r2, r0
 8019832:	2a06      	cmp	r2, #6
 8019834:	d810      	bhi.n	8019858 <rcl_action_transition_goal_state+0x28>
 8019836:	2904      	cmp	r1, #4
 8019838:	d80e      	bhi.n	8019858 <rcl_action_transition_goal_state+0x28>
 801983a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801983e:	b410      	push	{r4}
 8019840:	1853      	adds	r3, r2, r1
 8019842:	4c06      	ldr	r4, [pc, #24]	@ (801985c <rcl_action_transition_goal_state+0x2c>)
 8019844:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019848:	b113      	cbz	r3, 8019850 <rcl_action_transition_goal_state+0x20>
 801984a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801984e:	4718      	bx	r3
 8019850:	2000      	movs	r0, #0
 8019852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019856:	4770      	bx	lr
 8019858:	2000      	movs	r0, #0
 801985a:	4770      	bx	lr
 801985c:	0801e74c 	.word	0x0801e74c

08019860 <rcl_action_get_zero_initialized_cancel_response>:
 8019860:	b510      	push	{r4, lr}
 8019862:	4c07      	ldr	r4, [pc, #28]	@ (8019880 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8019864:	4686      	mov	lr, r0
 8019866:	4684      	mov	ip, r0
 8019868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801986a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801986e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019874:	6823      	ldr	r3, [r4, #0]
 8019876:	4670      	mov	r0, lr
 8019878:	f8cc 3000 	str.w	r3, [ip]
 801987c:	bd10      	pop	{r4, pc}
 801987e:	bf00      	nop
 8019880:	0801e7d8 	.word	0x0801e7d8

08019884 <rclc_action_send_result_request>:
 8019884:	b1d0      	cbz	r0, 80198bc <rclc_action_send_result_request+0x38>
 8019886:	4684      	mov	ip, r0
 8019888:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801988c:	b500      	push	{lr}
 801988e:	b087      	sub	sp, #28
 8019890:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8019894:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8019898:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801989c:	f10d 0e08 	add.w	lr, sp, #8
 80198a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80198a4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80198a8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80198ac:	a902      	add	r1, sp, #8
 80198ae:	3010      	adds	r0, #16
 80198b0:	f7ff fbca 	bl	8019048 <rcl_action_send_result_request>
 80198b4:	b920      	cbnz	r0, 80198c0 <rclc_action_send_result_request+0x3c>
 80198b6:	b007      	add	sp, #28
 80198b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80198bc:	200b      	movs	r0, #11
 80198be:	4770      	bx	lr
 80198c0:	9001      	str	r0, [sp, #4]
 80198c2:	f7f6 fa9d 	bl	800fe00 <rcutils_reset_error>
 80198c6:	9801      	ldr	r0, [sp, #4]
 80198c8:	b007      	add	sp, #28
 80198ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80198ce:	bf00      	nop

080198d0 <rclc_action_take_goal_handle>:
 80198d0:	b160      	cbz	r0, 80198ec <rclc_action_take_goal_handle+0x1c>
 80198d2:	6883      	ldr	r3, [r0, #8]
 80198d4:	b143      	cbz	r3, 80198e8 <rclc_action_take_goal_handle+0x18>
 80198d6:	6819      	ldr	r1, [r3, #0]
 80198d8:	2200      	movs	r2, #0
 80198da:	6081      	str	r1, [r0, #8]
 80198dc:	721a      	strb	r2, [r3, #8]
 80198de:	68c1      	ldr	r1, [r0, #12]
 80198e0:	621a      	str	r2, [r3, #32]
 80198e2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80198e4:	6019      	str	r1, [r3, #0]
 80198e6:	60c3      	str	r3, [r0, #12]
 80198e8:	4618      	mov	r0, r3
 80198ea:	4770      	bx	lr
 80198ec:	4603      	mov	r3, r0
 80198ee:	e7fb      	b.n	80198e8 <rclc_action_take_goal_handle+0x18>

080198f0 <rclc_action_remove_used_goal_handle>:
 80198f0:	b180      	cbz	r0, 8019914 <rclc_action_remove_used_goal_handle+0x24>
 80198f2:	b179      	cbz	r1, 8019914 <rclc_action_remove_used_goal_handle+0x24>
 80198f4:	68c3      	ldr	r3, [r0, #12]
 80198f6:	4299      	cmp	r1, r3
 80198f8:	d00d      	beq.n	8019916 <rclc_action_remove_used_goal_handle+0x26>
 80198fa:	b12b      	cbz	r3, 8019908 <rclc_action_remove_used_goal_handle+0x18>
 80198fc:	681a      	ldr	r2, [r3, #0]
 80198fe:	4291      	cmp	r1, r2
 8019900:	d003      	beq.n	801990a <rclc_action_remove_used_goal_handle+0x1a>
 8019902:	4613      	mov	r3, r2
 8019904:	2b00      	cmp	r3, #0
 8019906:	d1f9      	bne.n	80198fc <rclc_action_remove_used_goal_handle+0xc>
 8019908:	4770      	bx	lr
 801990a:	680a      	ldr	r2, [r1, #0]
 801990c:	601a      	str	r2, [r3, #0]
 801990e:	6883      	ldr	r3, [r0, #8]
 8019910:	600b      	str	r3, [r1, #0]
 8019912:	6081      	str	r1, [r0, #8]
 8019914:	4770      	bx	lr
 8019916:	680b      	ldr	r3, [r1, #0]
 8019918:	60c3      	str	r3, [r0, #12]
 801991a:	e7f8      	b.n	801990e <rclc_action_remove_used_goal_handle+0x1e>

0801991c <rclc_action_find_goal_handle_by_uuid>:
 801991c:	b538      	push	{r3, r4, r5, lr}
 801991e:	b181      	cbz	r1, 8019942 <rclc_action_find_goal_handle_by_uuid+0x26>
 8019920:	b178      	cbz	r0, 8019942 <rclc_action_find_goal_handle_by_uuid+0x26>
 8019922:	68c4      	ldr	r4, [r0, #12]
 8019924:	460d      	mov	r5, r1
 8019926:	b914      	cbnz	r4, 801992e <rclc_action_find_goal_handle_by_uuid+0x12>
 8019928:	e009      	b.n	801993e <rclc_action_find_goal_handle_by_uuid+0x22>
 801992a:	6824      	ldr	r4, [r4, #0]
 801992c:	b13c      	cbz	r4, 801993e <rclc_action_find_goal_handle_by_uuid+0x22>
 801992e:	f104 0009 	add.w	r0, r4, #9
 8019932:	2210      	movs	r2, #16
 8019934:	4629      	mov	r1, r5
 8019936:	f003 fa85 	bl	801ce44 <memcmp>
 801993a:	2800      	cmp	r0, #0
 801993c:	d1f5      	bne.n	801992a <rclc_action_find_goal_handle_by_uuid+0xe>
 801993e:	4620      	mov	r0, r4
 8019940:	bd38      	pop	{r3, r4, r5, pc}
 8019942:	2400      	movs	r4, #0
 8019944:	4620      	mov	r0, r4
 8019946:	bd38      	pop	{r3, r4, r5, pc}

08019948 <rclc_action_find_first_handle_by_status>:
 8019948:	b140      	cbz	r0, 801995c <rclc_action_find_first_handle_by_status+0x14>
 801994a:	68c0      	ldr	r0, [r0, #12]
 801994c:	b910      	cbnz	r0, 8019954 <rclc_action_find_first_handle_by_status+0xc>
 801994e:	e005      	b.n	801995c <rclc_action_find_first_handle_by_status+0x14>
 8019950:	6800      	ldr	r0, [r0, #0]
 8019952:	b118      	cbz	r0, 801995c <rclc_action_find_first_handle_by_status+0x14>
 8019954:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019958:	428b      	cmp	r3, r1
 801995a:	d1f9      	bne.n	8019950 <rclc_action_find_first_handle_by_status+0x8>
 801995c:	4770      	bx	lr
 801995e:	bf00      	nop

08019960 <rclc_action_find_first_terminated_handle>:
 8019960:	b140      	cbz	r0, 8019974 <rclc_action_find_first_terminated_handle+0x14>
 8019962:	68c0      	ldr	r0, [r0, #12]
 8019964:	b910      	cbnz	r0, 801996c <rclc_action_find_first_terminated_handle+0xc>
 8019966:	e005      	b.n	8019974 <rclc_action_find_first_terminated_handle+0x14>
 8019968:	6800      	ldr	r0, [r0, #0]
 801996a:	b118      	cbz	r0, 8019974 <rclc_action_find_first_terminated_handle+0x14>
 801996c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019970:	2b03      	cmp	r3, #3
 8019972:	ddf9      	ble.n	8019968 <rclc_action_find_first_terminated_handle+0x8>
 8019974:	4770      	bx	lr
 8019976:	bf00      	nop

08019978 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8019978:	b170      	cbz	r0, 8019998 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801997a:	68c0      	ldr	r0, [r0, #12]
 801997c:	b160      	cbz	r0, 8019998 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801997e:	b410      	push	{r4}
 8019980:	e001      	b.n	8019986 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8019982:	6800      	ldr	r0, [r0, #0]
 8019984:	b128      	cbz	r0, 8019992 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8019986:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801998a:	4299      	cmp	r1, r3
 801998c:	bf08      	it	eq
 801998e:	4294      	cmpeq	r4, r2
 8019990:	d1f7      	bne.n	8019982 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8019992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019996:	4770      	bx	lr
 8019998:	4770      	bx	lr
 801999a:	bf00      	nop

0801999c <rclc_action_find_handle_by_result_request_sequence_number>:
 801999c:	b170      	cbz	r0, 80199bc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801999e:	68c0      	ldr	r0, [r0, #12]
 80199a0:	b160      	cbz	r0, 80199bc <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80199a2:	b410      	push	{r4}
 80199a4:	e001      	b.n	80199aa <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80199a6:	6800      	ldr	r0, [r0, #0]
 80199a8:	b128      	cbz	r0, 80199b6 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80199aa:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80199ae:	4299      	cmp	r1, r3
 80199b0:	bf08      	it	eq
 80199b2:	4294      	cmpeq	r4, r2
 80199b4:	d1f7      	bne.n	80199a6 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80199b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199ba:	4770      	bx	lr
 80199bc:	4770      	bx	lr
 80199be:	bf00      	nop

080199c0 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80199c0:	b170      	cbz	r0, 80199e0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80199c2:	68c0      	ldr	r0, [r0, #12]
 80199c4:	b160      	cbz	r0, 80199e0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80199c6:	b410      	push	{r4}
 80199c8:	e001      	b.n	80199ce <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80199ca:	6800      	ldr	r0, [r0, #0]
 80199cc:	b128      	cbz	r0, 80199da <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80199ce:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80199d2:	4299      	cmp	r1, r3
 80199d4:	bf08      	it	eq
 80199d6:	4294      	cmpeq	r4, r2
 80199d8:	d1f7      	bne.n	80199ca <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80199da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199de:	4770      	bx	lr
 80199e0:	4770      	bx	lr
 80199e2:	bf00      	nop

080199e4 <rclc_action_find_first_handle_with_goal_response>:
 80199e4:	b140      	cbz	r0, 80199f8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199e6:	68c0      	ldr	r0, [r0, #12]
 80199e8:	b910      	cbnz	r0, 80199f0 <rclc_action_find_first_handle_with_goal_response+0xc>
 80199ea:	e005      	b.n	80199f8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199ec:	6800      	ldr	r0, [r0, #0]
 80199ee:	b118      	cbz	r0, 80199f8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80199f0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d0f9      	beq.n	80199ec <rclc_action_find_first_handle_with_goal_response+0x8>
 80199f8:	4770      	bx	lr
 80199fa:	bf00      	nop

080199fc <rclc_action_find_first_handle_with_result_response>:
 80199fc:	b140      	cbz	r0, 8019a10 <rclc_action_find_first_handle_with_result_response+0x14>
 80199fe:	68c0      	ldr	r0, [r0, #12]
 8019a00:	b910      	cbnz	r0, 8019a08 <rclc_action_find_first_handle_with_result_response+0xc>
 8019a02:	e005      	b.n	8019a10 <rclc_action_find_first_handle_with_result_response+0x14>
 8019a04:	6800      	ldr	r0, [r0, #0]
 8019a06:	b118      	cbz	r0, 8019a10 <rclc_action_find_first_handle_with_result_response+0x14>
 8019a08:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d0f9      	beq.n	8019a04 <rclc_action_find_first_handle_with_result_response+0x8>
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop

08019a14 <rclc_action_server_response_goal_request>:
 8019a14:	b198      	cbz	r0, 8019a3e <rclc_action_server_response_goal_request+0x2a>
 8019a16:	2200      	movs	r2, #0
 8019a18:	460b      	mov	r3, r1
 8019a1a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8019a1e:	b510      	push	{r4, lr}
 8019a20:	6844      	ldr	r4, [r0, #4]
 8019a22:	b086      	sub	sp, #24
 8019a24:	f104 0010 	add.w	r0, r4, #16
 8019a28:	9205      	str	r2, [sp, #20]
 8019a2a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8019a2e:	aa03      	add	r2, sp, #12
 8019a30:	f88d 300c 	strb.w	r3, [sp, #12]
 8019a34:	f7ff fd3e 	bl	80194b4 <rcl_action_send_goal_response>
 8019a38:	b918      	cbnz	r0, 8019a42 <rclc_action_server_response_goal_request+0x2e>
 8019a3a:	b006      	add	sp, #24
 8019a3c:	bd10      	pop	{r4, pc}
 8019a3e:	200b      	movs	r0, #11
 8019a40:	4770      	bx	lr
 8019a42:	9001      	str	r0, [sp, #4]
 8019a44:	f7f6 f9dc 	bl	800fe00 <rcutils_reset_error>
 8019a48:	9801      	ldr	r0, [sp, #4]
 8019a4a:	b006      	add	sp, #24
 8019a4c:	bd10      	pop	{r4, pc}
 8019a4e:	bf00      	nop

08019a50 <rclc_action_server_goal_cancel_accept>:
 8019a50:	b310      	cbz	r0, 8019a98 <rclc_action_server_goal_cancel_accept+0x48>
 8019a52:	b510      	push	{r4, lr}
 8019a54:	b090      	sub	sp, #64	@ 0x40
 8019a56:	4604      	mov	r4, r0
 8019a58:	a806      	add	r0, sp, #24
 8019a5a:	f7ff ff01 	bl	8019860 <rcl_action_get_zero_initialized_cancel_response>
 8019a5e:	2300      	movs	r3, #0
 8019a60:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8019a64:	46ec      	mov	ip, sp
 8019a66:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019a6a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019a6e:	f88d 3018 	strb.w	r3, [sp, #24]
 8019a72:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8019a76:	f8cd d01c 	str.w	sp, [sp, #28]
 8019a7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019a7e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8019aa0 <rclc_action_server_goal_cancel_accept+0x50>
 8019a82:	6860      	ldr	r0, [r4, #4]
 8019a84:	aa06      	add	r2, sp, #24
 8019a86:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8019a8a:	3010      	adds	r0, #16
 8019a8c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019a90:	f7ff fdc8 	bl	8019624 <rcl_action_send_cancel_response>
 8019a94:	b010      	add	sp, #64	@ 0x40
 8019a96:	bd10      	pop	{r4, pc}
 8019a98:	200b      	movs	r0, #11
 8019a9a:	4770      	bx	lr
 8019a9c:	f3af 8000 	nop.w
 8019aa0:	00000001 	.word	0x00000001
 8019aa4:	00000001 	.word	0x00000001

08019aa8 <rclc_action_server_goal_cancel_reject>:
 8019aa8:	b082      	sub	sp, #8
 8019aaa:	b530      	push	{r4, r5, lr}
 8019aac:	b08b      	sub	sp, #44	@ 0x2c
 8019aae:	ac0e      	add	r4, sp, #56	@ 0x38
 8019ab0:	e884 000c 	stmia.w	r4, {r2, r3}
 8019ab4:	b188      	cbz	r0, 8019ada <rclc_action_server_goal_cancel_reject+0x32>
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	a801      	add	r0, sp, #4
 8019aba:	460d      	mov	r5, r1
 8019abc:	f7ff fed0 	bl	8019860 <rcl_action_get_zero_initialized_cancel_response>
 8019ac0:	aa01      	add	r2, sp, #4
 8019ac2:	a90e      	add	r1, sp, #56	@ 0x38
 8019ac4:	f104 0010 	add.w	r0, r4, #16
 8019ac8:	f88d 5004 	strb.w	r5, [sp, #4]
 8019acc:	f7ff fdaa 	bl	8019624 <rcl_action_send_cancel_response>
 8019ad0:	b00b      	add	sp, #44	@ 0x2c
 8019ad2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ad6:	b002      	add	sp, #8
 8019ad8:	4770      	bx	lr
 8019ada:	200b      	movs	r0, #11
 8019adc:	b00b      	add	sp, #44	@ 0x2c
 8019ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ae2:	b002      	add	sp, #8
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop

08019ae8 <__atomic_load_8>:
 8019ae8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8019aec:	4a16      	ldr	r2, [pc, #88]	@ (8019b48 <__atomic_load_8+0x60>)
 8019aee:	4b17      	ldr	r3, [pc, #92]	@ (8019b4c <__atomic_load_8+0x64>)
 8019af0:	f04f 0c01 	mov.w	ip, #1
 8019af4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8019af8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019afc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8019b00:	fb02 f101 	mul.w	r1, r2, r1
 8019b04:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8019b08:	fba3 2301 	umull	r2, r3, r3, r1
 8019b0c:	091b      	lsrs	r3, r3, #4
 8019b0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019b12:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8019b16:	b4d0      	push	{r4, r6, r7}
 8019b18:	1ac9      	subs	r1, r1, r3
 8019b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8019b50 <__atomic_load_8+0x68>)
 8019b1c:	1862      	adds	r2, r4, r1
 8019b1e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8019b22:	e8c2 cf46 	strexb	r6, ip, [r2]
 8019b26:	2e00      	cmp	r6, #0
 8019b28:	d1f9      	bne.n	8019b1e <__atomic_load_8+0x36>
 8019b2a:	b2db      	uxtb	r3, r3
 8019b2c:	f3bf 8f5b 	dmb	ish
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d1f4      	bne.n	8019b1e <__atomic_load_8+0x36>
 8019b34:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019b38:	f3bf 8f5b 	dmb	ish
 8019b3c:	5463      	strb	r3, [r4, r1]
 8019b3e:	4630      	mov	r0, r6
 8019b40:	4639      	mov	r1, r7
 8019b42:	bcd0      	pop	{r4, r6, r7}
 8019b44:	4770      	bx	lr
 8019b46:	bf00      	nop
 8019b48:	27d4eb2d 	.word	0x27d4eb2d
 8019b4c:	b21642c9 	.word	0xb21642c9
 8019b50:	24013a5c 	.word	0x24013a5c

08019b54 <__atomic_store_8>:
 8019b54:	b570      	push	{r4, r5, r6, lr}
 8019b56:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8019b5a:	4916      	ldr	r1, [pc, #88]	@ (8019bb4 <__atomic_store_8+0x60>)
 8019b5c:	4c16      	ldr	r4, [pc, #88]	@ (8019bb8 <__atomic_store_8+0x64>)
 8019b5e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8019b62:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8019b66:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8019b6a:	fb01 fe0e 	mul.w	lr, r1, lr
 8019b6e:	4913      	ldr	r1, [pc, #76]	@ (8019bbc <__atomic_store_8+0x68>)
 8019b70:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8019b74:	fba1 510e 	umull	r5, r1, r1, lr
 8019b78:	f04f 0501 	mov.w	r5, #1
 8019b7c:	0909      	lsrs	r1, r1, #4
 8019b7e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8019b82:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8019b86:	ebae 0e01 	sub.w	lr, lr, r1
 8019b8a:	eb04 0c0e 	add.w	ip, r4, lr
 8019b8e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8019b92:	e8cc 5f46 	strexb	r6, r5, [ip]
 8019b96:	2e00      	cmp	r6, #0
 8019b98:	d1f9      	bne.n	8019b8e <__atomic_store_8+0x3a>
 8019b9a:	b2c9      	uxtb	r1, r1
 8019b9c:	f3bf 8f5b 	dmb	ish
 8019ba0:	2900      	cmp	r1, #0
 8019ba2:	d1f4      	bne.n	8019b8e <__atomic_store_8+0x3a>
 8019ba4:	e9c0 2300 	strd	r2, r3, [r0]
 8019ba8:	f3bf 8f5b 	dmb	ish
 8019bac:	f804 100e 	strb.w	r1, [r4, lr]
 8019bb0:	bd70      	pop	{r4, r5, r6, pc}
 8019bb2:	bf00      	nop
 8019bb4:	27d4eb2d 	.word	0x27d4eb2d
 8019bb8:	24013a5c 	.word	0x24013a5c
 8019bbc:	b21642c9 	.word	0xb21642c9

08019bc0 <__atomic_exchange_8>:
 8019bc0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8019bc4:	4917      	ldr	r1, [pc, #92]	@ (8019c24 <__atomic_exchange_8+0x64>)
 8019bc6:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8019bca:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8019bce:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8019bd2:	fb01 fc0c 	mul.w	ip, r1, ip
 8019bd6:	4914      	ldr	r1, [pc, #80]	@ (8019c28 <__atomic_exchange_8+0x68>)
 8019bd8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8019bdc:	b570      	push	{r4, r5, r6, lr}
 8019bde:	4686      	mov	lr, r0
 8019be0:	fba1 010c 	umull	r0, r1, r1, ip
 8019be4:	4d11      	ldr	r5, [pc, #68]	@ (8019c2c <__atomic_exchange_8+0x6c>)
 8019be6:	f04f 0001 	mov.w	r0, #1
 8019bea:	0909      	lsrs	r1, r1, #4
 8019bec:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8019bf0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8019bf4:	ebac 0c01 	sub.w	ip, ip, r1
 8019bf8:	eb05 010c 	add.w	r1, r5, ip
 8019bfc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8019c00:	e8c1 0f46 	strexb	r6, r0, [r1]
 8019c04:	2e00      	cmp	r6, #0
 8019c06:	d1f9      	bne.n	8019bfc <__atomic_exchange_8+0x3c>
 8019c08:	b2e4      	uxtb	r4, r4
 8019c0a:	f3bf 8f5b 	dmb	ish
 8019c0e:	2c00      	cmp	r4, #0
 8019c10:	d1f4      	bne.n	8019bfc <__atomic_exchange_8+0x3c>
 8019c12:	e9de 0100 	ldrd	r0, r1, [lr]
 8019c16:	e9ce 2300 	strd	r2, r3, [lr]
 8019c1a:	f3bf 8f5b 	dmb	ish
 8019c1e:	f805 400c 	strb.w	r4, [r5, ip]
 8019c22:	bd70      	pop	{r4, r5, r6, pc}
 8019c24:	27d4eb2d 	.word	0x27d4eb2d
 8019c28:	b21642c9 	.word	0xb21642c9
 8019c2c:	24013a5c 	.word	0x24013a5c

08019c30 <rcutils_get_env>:
 8019c30:	b168      	cbz	r0, 8019c4e <rcutils_get_env+0x1e>
 8019c32:	b510      	push	{r4, lr}
 8019c34:	460c      	mov	r4, r1
 8019c36:	b129      	cbz	r1, 8019c44 <rcutils_get_env+0x14>
 8019c38:	f002 fc72 	bl	801c520 <getenv>
 8019c3c:	b120      	cbz	r0, 8019c48 <rcutils_get_env+0x18>
 8019c3e:	6020      	str	r0, [r4, #0]
 8019c40:	2000      	movs	r0, #0
 8019c42:	bd10      	pop	{r4, pc}
 8019c44:	4803      	ldr	r0, [pc, #12]	@ (8019c54 <rcutils_get_env+0x24>)
 8019c46:	bd10      	pop	{r4, pc}
 8019c48:	4b03      	ldr	r3, [pc, #12]	@ (8019c58 <rcutils_get_env+0x28>)
 8019c4a:	6023      	str	r3, [r4, #0]
 8019c4c:	bd10      	pop	{r4, pc}
 8019c4e:	4803      	ldr	r0, [pc, #12]	@ (8019c5c <rcutils_get_env+0x2c>)
 8019c50:	4770      	bx	lr
 8019c52:	bf00      	nop
 8019c54:	0801e818 	.word	0x0801e818
 8019c58:	0801ec08 	.word	0x0801ec08
 8019c5c:	0801e7fc 	.word	0x0801e7fc

08019c60 <rcutils_is_directory>:
 8019c60:	2000      	movs	r0, #0
 8019c62:	4770      	bx	lr

08019c64 <rcutils_join_path>:
 8019c64:	b082      	sub	sp, #8
 8019c66:	2000      	movs	r0, #0
 8019c68:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019c6c:	b002      	add	sp, #8
 8019c6e:	4770      	bx	lr

08019c70 <rcutils_to_native_path>:
 8019c70:	b084      	sub	sp, #16
 8019c72:	2000      	movs	r0, #0
 8019c74:	f10d 0c04 	add.w	ip, sp, #4
 8019c78:	b004      	add	sp, #16
 8019c7a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8019c7e:	4770      	bx	lr

08019c80 <rcutils_format_string_limit>:
 8019c80:	b40f      	push	{r0, r1, r2, r3}
 8019c82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c84:	b083      	sub	sp, #12
 8019c86:	ac08      	add	r4, sp, #32
 8019c88:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8019c8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019c8e:	b326      	cbz	r6, 8019cda <rcutils_format_string_limit+0x5a>
 8019c90:	a808      	add	r0, sp, #32
 8019c92:	f7f6 f891 	bl	800fdb8 <rcutils_allocator_is_valid>
 8019c96:	b300      	cbz	r0, 8019cda <rcutils_format_string_limit+0x5a>
 8019c98:	2100      	movs	r1, #0
 8019c9a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8019c9c:	4632      	mov	r2, r6
 8019c9e:	4608      	mov	r0, r1
 8019ca0:	e9cd 3300 	strd	r3, r3, [sp]
 8019ca4:	f000 f906 	bl	8019eb4 <rcutils_vsnprintf>
 8019ca8:	1c43      	adds	r3, r0, #1
 8019caa:	4605      	mov	r5, r0
 8019cac:	d015      	beq.n	8019cda <rcutils_format_string_limit+0x5a>
 8019cae:	1c47      	adds	r7, r0, #1
 8019cb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019cb2:	429f      	cmp	r7, r3
 8019cb4:	d901      	bls.n	8019cba <rcutils_format_string_limit+0x3a>
 8019cb6:	1e5d      	subs	r5, r3, #1
 8019cb8:	461f      	mov	r7, r3
 8019cba:	9b08      	ldr	r3, [sp, #32]
 8019cbc:	4638      	mov	r0, r7
 8019cbe:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019cc0:	4798      	blx	r3
 8019cc2:	4604      	mov	r4, r0
 8019cc4:	b148      	cbz	r0, 8019cda <rcutils_format_string_limit+0x5a>
 8019cc6:	4632      	mov	r2, r6
 8019cc8:	4639      	mov	r1, r7
 8019cca:	9b01      	ldr	r3, [sp, #4]
 8019ccc:	f000 f8f2 	bl	8019eb4 <rcutils_vsnprintf>
 8019cd0:	2800      	cmp	r0, #0
 8019cd2:	db09      	blt.n	8019ce8 <rcutils_format_string_limit+0x68>
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	5563      	strb	r3, [r4, r5]
 8019cd8:	e000      	b.n	8019cdc <rcutils_format_string_limit+0x5c>
 8019cda:	2400      	movs	r4, #0
 8019cdc:	4620      	mov	r0, r4
 8019cde:	b003      	add	sp, #12
 8019ce0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019ce4:	b004      	add	sp, #16
 8019ce6:	4770      	bx	lr
 8019ce8:	4620      	mov	r0, r4
 8019cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019cec:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019cee:	2400      	movs	r4, #0
 8019cf0:	4798      	blx	r3
 8019cf2:	e7f3      	b.n	8019cdc <rcutils_format_string_limit+0x5c>

08019cf4 <rcutils_repl_str>:
 8019cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cf8:	ed2d 8b02 	vpush	{d8}
 8019cfc:	b087      	sub	sp, #28
 8019cfe:	2600      	movs	r6, #0
 8019d00:	4680      	mov	r8, r0
 8019d02:	468a      	mov	sl, r1
 8019d04:	9000      	str	r0, [sp, #0]
 8019d06:	4608      	mov	r0, r1
 8019d08:	ee08 2a10 	vmov	s16, r2
 8019d0c:	4699      	mov	r9, r3
 8019d0e:	2510      	movs	r5, #16
 8019d10:	f7e6 faf0 	bl	80002f4 <strlen>
 8019d14:	4637      	mov	r7, r6
 8019d16:	46b3      	mov	fp, r6
 8019d18:	9001      	str	r0, [sp, #4]
 8019d1a:	e01e      	b.n	8019d5a <rcutils_repl_str+0x66>
 8019d1c:	f10b 0b01 	add.w	fp, fp, #1
 8019d20:	9b01      	ldr	r3, [sp, #4]
 8019d22:	455e      	cmp	r6, fp
 8019d24:	eb04 0803 	add.w	r8, r4, r3
 8019d28:	d211      	bcs.n	8019d4e <rcutils_repl_str+0x5a>
 8019d2a:	442e      	add	r6, r5
 8019d2c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019d30:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d38:	00b1      	lsls	r1, r6, #2
 8019d3a:	4798      	blx	r3
 8019d3c:	2800      	cmp	r0, #0
 8019d3e:	f000 8088 	beq.w	8019e52 <rcutils_repl_str+0x15e>
 8019d42:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8019d46:	4607      	mov	r7, r0
 8019d48:	bf28      	it	cs
 8019d4a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8019d4e:	9a00      	ldr	r2, [sp, #0]
 8019d50:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8019d54:	1aa4      	subs	r4, r4, r2
 8019d56:	f843 4c04 	str.w	r4, [r3, #-4]
 8019d5a:	4651      	mov	r1, sl
 8019d5c:	4640      	mov	r0, r8
 8019d5e:	f003 f8c2 	bl	801cee6 <strstr>
 8019d62:	4604      	mov	r4, r0
 8019d64:	4638      	mov	r0, r7
 8019d66:	2c00      	cmp	r4, #0
 8019d68:	d1d8      	bne.n	8019d1c <rcutils_repl_str+0x28>
 8019d6a:	4640      	mov	r0, r8
 8019d6c:	f7e6 fac2 	bl	80002f4 <strlen>
 8019d70:	9b00      	ldr	r3, [sp, #0]
 8019d72:	eba8 0803 	sub.w	r8, r8, r3
 8019d76:	eb08 0400 	add.w	r4, r8, r0
 8019d7a:	9402      	str	r4, [sp, #8]
 8019d7c:	f1bb 0f00 	cmp.w	fp, #0
 8019d80:	d045      	beq.n	8019e0e <rcutils_repl_str+0x11a>
 8019d82:	ee18 0a10 	vmov	r0, s16
 8019d86:	f7e6 fab5 	bl	80002f4 <strlen>
 8019d8a:	9a01      	ldr	r2, [sp, #4]
 8019d8c:	4606      	mov	r6, r0
 8019d8e:	f8d9 3000 	ldr.w	r3, [r9]
 8019d92:	1a82      	subs	r2, r0, r2
 8019d94:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019d98:	fb0b 4202 	mla	r2, fp, r2, r4
 8019d9c:	1c50      	adds	r0, r2, #1
 8019d9e:	9205      	str	r2, [sp, #20]
 8019da0:	4798      	blx	r3
 8019da2:	4682      	mov	sl, r0
 8019da4:	2800      	cmp	r0, #0
 8019da6:	d054      	beq.n	8019e52 <rcutils_repl_str+0x15e>
 8019da8:	683a      	ldr	r2, [r7, #0]
 8019daa:	463d      	mov	r5, r7
 8019dac:	9900      	ldr	r1, [sp, #0]
 8019dae:	2401      	movs	r4, #1
 8019db0:	f003 f93b 	bl	801d02a <memcpy>
 8019db4:	683b      	ldr	r3, [r7, #0]
 8019db6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8019dba:	eb0a 0803 	add.w	r8, sl, r3
 8019dbe:	ee18 7a10 	vmov	r7, s16
 8019dc2:	f8dd a000 	ldr.w	sl, [sp]
 8019dc6:	f8cd 9000 	str.w	r9, [sp]
 8019dca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019dce:	4632      	mov	r2, r6
 8019dd0:	4639      	mov	r1, r7
 8019dd2:	4640      	mov	r0, r8
 8019dd4:	44b0      	add	r8, r6
 8019dd6:	f003 f928 	bl	801d02a <memcpy>
 8019dda:	f855 2b04 	ldr.w	r2, [r5], #4
 8019dde:	45a3      	cmp	fp, r4
 8019de0:	444a      	add	r2, r9
 8019de2:	eb0a 0102 	add.w	r1, sl, r2
 8019de6:	d02a      	beq.n	8019e3e <rcutils_repl_str+0x14a>
 8019de8:	6828      	ldr	r0, [r5, #0]
 8019dea:	1a82      	subs	r2, r0, r2
 8019dec:	4640      	mov	r0, r8
 8019dee:	4490      	add	r8, r2
 8019df0:	f003 f91b 	bl	801d02a <memcpy>
 8019df4:	1c62      	adds	r2, r4, #1
 8019df6:	45a3      	cmp	fp, r4
 8019df8:	4614      	mov	r4, r2
 8019dfa:	d8e8      	bhi.n	8019dce <rcutils_repl_str+0xda>
 8019dfc:	f8dd 9000 	ldr.w	r9, [sp]
 8019e00:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019e04:	2300      	movs	r3, #0
 8019e06:	9a05      	ldr	r2, [sp, #20]
 8019e08:	f80a 3002 	strb.w	r3, [sl, r2]
 8019e0c:	e00b      	b.n	8019e26 <rcutils_repl_str+0x132>
 8019e0e:	4620      	mov	r0, r4
 8019e10:	f8d9 3000 	ldr.w	r3, [r9]
 8019e14:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019e18:	3001      	adds	r0, #1
 8019e1a:	4798      	blx	r3
 8019e1c:	4682      	mov	sl, r0
 8019e1e:	b110      	cbz	r0, 8019e26 <rcutils_repl_str+0x132>
 8019e20:	9900      	ldr	r1, [sp, #0]
 8019e22:	f003 f8fa 	bl	801d01a <strcpy>
 8019e26:	4638      	mov	r0, r7
 8019e28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019e2c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8019e30:	4798      	blx	r3
 8019e32:	4650      	mov	r0, sl
 8019e34:	b007      	add	sp, #28
 8019e36:	ecbd 8b02 	vpop	{d8}
 8019e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e3e:	9b02      	ldr	r3, [sp, #8]
 8019e40:	4640      	mov	r0, r8
 8019e42:	f8dd 9000 	ldr.w	r9, [sp]
 8019e46:	1a9a      	subs	r2, r3, r2
 8019e48:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8019e4c:	f003 f8ed 	bl	801d02a <memcpy>
 8019e50:	e7d8      	b.n	8019e04 <rcutils_repl_str+0x110>
 8019e52:	f04f 0a00 	mov.w	sl, #0
 8019e56:	e7e6      	b.n	8019e26 <rcutils_repl_str+0x132>

08019e58 <rcutils_snprintf>:
 8019e58:	b40c      	push	{r2, r3}
 8019e5a:	b530      	push	{r4, r5, lr}
 8019e5c:	b083      	sub	sp, #12
 8019e5e:	ab06      	add	r3, sp, #24
 8019e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8019e64:	9301      	str	r3, [sp, #4]
 8019e66:	b1e2      	cbz	r2, 8019ea2 <rcutils_snprintf+0x4a>
 8019e68:	fab0 f480 	clz	r4, r0
 8019e6c:	fab1 f581 	clz	r5, r1
 8019e70:	ea50 0c01 	orrs.w	ip, r0, r1
 8019e74:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019e78:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019e7c:	d008      	beq.n	8019e90 <rcutils_snprintf+0x38>
 8019e7e:	b984      	cbnz	r4, 8019ea2 <rcutils_snprintf+0x4a>
 8019e80:	b97d      	cbnz	r5, 8019ea2 <rcutils_snprintf+0x4a>
 8019e82:	f002 ff3d 	bl	801cd00 <vsniprintf>
 8019e86:	b003      	add	sp, #12
 8019e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e8c:	b002      	add	sp, #8
 8019e8e:	4770      	bx	lr
 8019e90:	4661      	mov	r1, ip
 8019e92:	4660      	mov	r0, ip
 8019e94:	f002 ff34 	bl	801cd00 <vsniprintf>
 8019e98:	b003      	add	sp, #12
 8019e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e9e:	b002      	add	sp, #8
 8019ea0:	4770      	bx	lr
 8019ea2:	f003 f88d 	bl	801cfc0 <__errno>
 8019ea6:	2216      	movs	r2, #22
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019eae:	601a      	str	r2, [r3, #0]
 8019eb0:	e7e9      	b.n	8019e86 <rcutils_snprintf+0x2e>
 8019eb2:	bf00      	nop

08019eb4 <rcutils_vsnprintf>:
 8019eb4:	b570      	push	{r4, r5, r6, lr}
 8019eb6:	b1b2      	cbz	r2, 8019ee6 <rcutils_vsnprintf+0x32>
 8019eb8:	fab0 f480 	clz	r4, r0
 8019ebc:	fab1 f581 	clz	r5, r1
 8019ec0:	ea50 0c01 	orrs.w	ip, r0, r1
 8019ec4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8019ec8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8019ecc:	d005      	beq.n	8019eda <rcutils_vsnprintf+0x26>
 8019ece:	b954      	cbnz	r4, 8019ee6 <rcutils_vsnprintf+0x32>
 8019ed0:	b94d      	cbnz	r5, 8019ee6 <rcutils_vsnprintf+0x32>
 8019ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ed6:	f002 bf13 	b.w	801cd00 <vsniprintf>
 8019eda:	4661      	mov	r1, ip
 8019edc:	4660      	mov	r0, ip
 8019ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ee2:	f002 bf0d 	b.w	801cd00 <vsniprintf>
 8019ee6:	f003 f86b 	bl	801cfc0 <__errno>
 8019eea:	2316      	movs	r3, #22
 8019eec:	6003      	str	r3, [r0, #0]
 8019eee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ef2:	bd70      	pop	{r4, r5, r6, pc}

08019ef4 <rcutils_strdup>:
 8019ef4:	b084      	sub	sp, #16
 8019ef6:	b570      	push	{r4, r5, r6, lr}
 8019ef8:	b082      	sub	sp, #8
 8019efa:	4605      	mov	r5, r0
 8019efc:	ac07      	add	r4, sp, #28
 8019efe:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019f02:	b1b0      	cbz	r0, 8019f32 <rcutils_strdup+0x3e>
 8019f04:	f7e6 f9f6 	bl	80002f4 <strlen>
 8019f08:	1c42      	adds	r2, r0, #1
 8019f0a:	9b07      	ldr	r3, [sp, #28]
 8019f0c:	4606      	mov	r6, r0
 8019f0e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019f10:	4610      	mov	r0, r2
 8019f12:	9201      	str	r2, [sp, #4]
 8019f14:	4798      	blx	r3
 8019f16:	4604      	mov	r4, r0
 8019f18:	b128      	cbz	r0, 8019f26 <rcutils_strdup+0x32>
 8019f1a:	9a01      	ldr	r2, [sp, #4]
 8019f1c:	4629      	mov	r1, r5
 8019f1e:	f003 f884 	bl	801d02a <memcpy>
 8019f22:	2300      	movs	r3, #0
 8019f24:	55a3      	strb	r3, [r4, r6]
 8019f26:	4620      	mov	r0, r4
 8019f28:	b002      	add	sp, #8
 8019f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f2e:	b004      	add	sp, #16
 8019f30:	4770      	bx	lr
 8019f32:	4604      	mov	r4, r0
 8019f34:	e7f7      	b.n	8019f26 <rcutils_strdup+0x32>
 8019f36:	bf00      	nop

08019f38 <rcutils_strndup>:
 8019f38:	b082      	sub	sp, #8
 8019f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f3c:	ac06      	add	r4, sp, #24
 8019f3e:	4605      	mov	r5, r0
 8019f40:	e884 000c 	stmia.w	r4, {r2, r3}
 8019f44:	b188      	cbz	r0, 8019f6a <rcutils_strndup+0x32>
 8019f46:	1c4f      	adds	r7, r1, #1
 8019f48:	460e      	mov	r6, r1
 8019f4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f4c:	4638      	mov	r0, r7
 8019f4e:	4790      	blx	r2
 8019f50:	4604      	mov	r4, r0
 8019f52:	b128      	cbz	r0, 8019f60 <rcutils_strndup+0x28>
 8019f54:	463a      	mov	r2, r7
 8019f56:	4629      	mov	r1, r5
 8019f58:	f003 f867 	bl	801d02a <memcpy>
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	55a3      	strb	r3, [r4, r6]
 8019f60:	4620      	mov	r0, r4
 8019f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019f66:	b002      	add	sp, #8
 8019f68:	4770      	bx	lr
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	e7f8      	b.n	8019f60 <rcutils_strndup+0x28>
 8019f6e:	bf00      	nop

08019f70 <rcutils_get_zero_initialized_string_map>:
 8019f70:	2000      	movs	r0, #0
 8019f72:	4b01      	ldr	r3, [pc, #4]	@ (8019f78 <rcutils_get_zero_initialized_string_map+0x8>)
 8019f74:	6018      	str	r0, [r3, #0]
 8019f76:	4770      	bx	lr
 8019f78:	24013a74 	.word	0x24013a74

08019f7c <rcutils_string_map_reserve>:
 8019f7c:	2800      	cmp	r0, #0
 8019f7e:	d05e      	beq.n	801a03e <rcutils_string_map_reserve+0xc2>
 8019f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f84:	460c      	mov	r4, r1
 8019f86:	6801      	ldr	r1, [r0, #0]
 8019f88:	b082      	sub	sp, #8
 8019f8a:	4605      	mov	r5, r0
 8019f8c:	b129      	cbz	r1, 8019f9a <rcutils_string_map_reserve+0x1e>
 8019f8e:	68cb      	ldr	r3, [r1, #12]
 8019f90:	42a3      	cmp	r3, r4
 8019f92:	d906      	bls.n	8019fa2 <rcutils_string_map_reserve+0x26>
 8019f94:	461c      	mov	r4, r3
 8019f96:	2900      	cmp	r1, #0
 8019f98:	d1f9      	bne.n	8019f8e <rcutils_string_map_reserve+0x12>
 8019f9a:	201f      	movs	r0, #31
 8019f9c:	b002      	add	sp, #8
 8019f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fa2:	688b      	ldr	r3, [r1, #8]
 8019fa4:	42a3      	cmp	r3, r4
 8019fa6:	d046      	beq.n	801a036 <rcutils_string_map_reserve+0xba>
 8019fa8:	6a0e      	ldr	r6, [r1, #32]
 8019faa:	2c00      	cmp	r4, #0
 8019fac:	d033      	beq.n	801a016 <rcutils_string_map_reserve+0x9a>
 8019fae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019fb2:	d242      	bcs.n	801a03a <rcutils_string_map_reserve+0xbe>
 8019fb4:	00a7      	lsls	r7, r4, #2
 8019fb6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8019fba:	6808      	ldr	r0, [r1, #0]
 8019fbc:	4632      	mov	r2, r6
 8019fbe:	4639      	mov	r1, r7
 8019fc0:	47c0      	blx	r8
 8019fc2:	2800      	cmp	r0, #0
 8019fc4:	d039      	beq.n	801a03a <rcutils_string_map_reserve+0xbe>
 8019fc6:	682b      	ldr	r3, [r5, #0]
 8019fc8:	4632      	mov	r2, r6
 8019fca:	4639      	mov	r1, r7
 8019fcc:	6018      	str	r0, [r3, #0]
 8019fce:	6858      	ldr	r0, [r3, #4]
 8019fd0:	47c0      	blx	r8
 8019fd2:	2800      	cmp	r0, #0
 8019fd4:	d031      	beq.n	801a03a <rcutils_string_map_reserve+0xbe>
 8019fd6:	682d      	ldr	r5, [r5, #0]
 8019fd8:	68ab      	ldr	r3, [r5, #8]
 8019fda:	6068      	str	r0, [r5, #4]
 8019fdc:	42a3      	cmp	r3, r4
 8019fde:	d225      	bcs.n	801a02c <rcutils_string_map_reserve+0xb0>
 8019fe0:	682a      	ldr	r2, [r5, #0]
 8019fe2:	eb00 0c07 	add.w	ip, r0, r7
 8019fe6:	0099      	lsls	r1, r3, #2
 8019fe8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8019fec:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8019ff0:	45e6      	cmp	lr, ip
 8019ff2:	d203      	bcs.n	8019ffc <rcutils_string_map_reserve+0x80>
 8019ff4:	eb02 0c07 	add.w	ip, r2, r7
 8019ff8:	4566      	cmp	r6, ip
 8019ffa:	d322      	bcc.n	801a042 <rcutils_string_map_reserve+0xc6>
 8019ffc:	1ae3      	subs	r3, r4, r3
 8019ffe:	4670      	mov	r0, lr
 801a000:	2100      	movs	r1, #0
 801a002:	009a      	lsls	r2, r3, #2
 801a004:	9201      	str	r2, [sp, #4]
 801a006:	f002 ff47 	bl	801ce98 <memset>
 801a00a:	9a01      	ldr	r2, [sp, #4]
 801a00c:	2100      	movs	r1, #0
 801a00e:	4630      	mov	r0, r6
 801a010:	f002 ff42 	bl	801ce98 <memset>
 801a014:	e00a      	b.n	801a02c <rcutils_string_map_reserve+0xb0>
 801a016:	694f      	ldr	r7, [r1, #20]
 801a018:	6808      	ldr	r0, [r1, #0]
 801a01a:	4631      	mov	r1, r6
 801a01c:	47b8      	blx	r7
 801a01e:	682b      	ldr	r3, [r5, #0]
 801a020:	4631      	mov	r1, r6
 801a022:	6858      	ldr	r0, [r3, #4]
 801a024:	601c      	str	r4, [r3, #0]
 801a026:	47b8      	blx	r7
 801a028:	682d      	ldr	r5, [r5, #0]
 801a02a:	606c      	str	r4, [r5, #4]
 801a02c:	2000      	movs	r0, #0
 801a02e:	60ac      	str	r4, [r5, #8]
 801a030:	b002      	add	sp, #8
 801a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a036:	2000      	movs	r0, #0
 801a038:	e7b0      	b.n	8019f9c <rcutils_string_map_reserve+0x20>
 801a03a:	200a      	movs	r0, #10
 801a03c:	e7ae      	b.n	8019f9c <rcutils_string_map_reserve+0x20>
 801a03e:	200b      	movs	r0, #11
 801a040:	4770      	bx	lr
 801a042:	1f0b      	subs	r3, r1, #4
 801a044:	4418      	add	r0, r3
 801a046:	4413      	add	r3, r2
 801a048:	3a04      	subs	r2, #4
 801a04a:	4417      	add	r7, r2
 801a04c:	2200      	movs	r2, #0
 801a04e:	f843 2f04 	str.w	r2, [r3, #4]!
 801a052:	42bb      	cmp	r3, r7
 801a054:	f840 2f04 	str.w	r2, [r0, #4]!
 801a058:	d1f9      	bne.n	801a04e <rcutils_string_map_reserve+0xd2>
 801a05a:	e7e7      	b.n	801a02c <rcutils_string_map_reserve+0xb0>

0801a05c <rcutils_string_map_init>:
 801a05c:	b082      	sub	sp, #8
 801a05e:	b570      	push	{r4, r5, r6, lr}
 801a060:	ac04      	add	r4, sp, #16
 801a062:	e884 000c 	stmia.w	r4, {r2, r3}
 801a066:	b380      	cbz	r0, 801a0ca <rcutils_string_map_init+0x6e>
 801a068:	6806      	ldr	r6, [r0, #0]
 801a06a:	4604      	mov	r4, r0
 801a06c:	b12e      	cbz	r6, 801a07a <rcutils_string_map_init+0x1e>
 801a06e:	251e      	movs	r5, #30
 801a070:	4628      	mov	r0, r5
 801a072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a076:	b002      	add	sp, #8
 801a078:	4770      	bx	lr
 801a07a:	a804      	add	r0, sp, #16
 801a07c:	460d      	mov	r5, r1
 801a07e:	f7f5 fe9b 	bl	800fdb8 <rcutils_allocator_is_valid>
 801a082:	b310      	cbz	r0, 801a0ca <rcutils_string_map_init+0x6e>
 801a084:	9b04      	ldr	r3, [sp, #16]
 801a086:	2024      	movs	r0, #36	@ 0x24
 801a088:	9908      	ldr	r1, [sp, #32]
 801a08a:	4798      	blx	r3
 801a08c:	6020      	str	r0, [r4, #0]
 801a08e:	b310      	cbz	r0, 801a0d6 <rcutils_string_map_init+0x7a>
 801a090:	f10d 0e10 	add.w	lr, sp, #16
 801a094:	f100 0c10 	add.w	ip, r0, #16
 801a098:	e9c0 6600 	strd	r6, r6, [r0]
 801a09c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801a0a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a0a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0a8:	f8de 3000 	ldr.w	r3, [lr]
 801a0ac:	4629      	mov	r1, r5
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f8cc 3000 	str.w	r3, [ip]
 801a0b4:	f7ff ff62 	bl	8019f7c <rcutils_string_map_reserve>
 801a0b8:	4605      	mov	r5, r0
 801a0ba:	2800      	cmp	r0, #0
 801a0bc:	d0d8      	beq.n	801a070 <rcutils_string_map_init+0x14>
 801a0be:	9b05      	ldr	r3, [sp, #20]
 801a0c0:	9908      	ldr	r1, [sp, #32]
 801a0c2:	6820      	ldr	r0, [r4, #0]
 801a0c4:	4798      	blx	r3
 801a0c6:	6026      	str	r6, [r4, #0]
 801a0c8:	e7d2      	b.n	801a070 <rcutils_string_map_init+0x14>
 801a0ca:	250b      	movs	r5, #11
 801a0cc:	4628      	mov	r0, r5
 801a0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0d2:	b002      	add	sp, #8
 801a0d4:	4770      	bx	lr
 801a0d6:	250a      	movs	r5, #10
 801a0d8:	e7ca      	b.n	801a070 <rcutils_string_map_init+0x14>
 801a0da:	bf00      	nop

0801a0dc <rcutils_string_map_fini>:
 801a0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e0:	b082      	sub	sp, #8
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	d03a      	beq.n	801a15c <rcutils_string_map_fini+0x80>
 801a0e6:	6804      	ldr	r4, [r0, #0]
 801a0e8:	4606      	mov	r6, r0
 801a0ea:	2c00      	cmp	r4, #0
 801a0ec:	d032      	beq.n	801a154 <rcutils_string_map_fini+0x78>
 801a0ee:	68a3      	ldr	r3, [r4, #8]
 801a0f0:	b32b      	cbz	r3, 801a13e <rcutils_string_map_fini+0x62>
 801a0f2:	2500      	movs	r5, #0
 801a0f4:	6822      	ldr	r2, [r4, #0]
 801a0f6:	462f      	mov	r7, r5
 801a0f8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a0fc:	b1e0      	cbz	r0, 801a138 <rcutils_string_map_fini+0x5c>
 801a0fe:	6a21      	ldr	r1, [r4, #32]
 801a100:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801a104:	9101      	str	r1, [sp, #4]
 801a106:	47c0      	blx	r8
 801a108:	9901      	ldr	r1, [sp, #4]
 801a10a:	e9d4 3200 	ldrd	r3, r2, [r4]
 801a10e:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 801a112:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a116:	47c0      	blx	r8
 801a118:	68e3      	ldr	r3, [r4, #12]
 801a11a:	6862      	ldr	r2, [r4, #4]
 801a11c:	3b01      	subs	r3, #1
 801a11e:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801a122:	3501      	adds	r5, #1
 801a124:	60e3      	str	r3, [r4, #12]
 801a126:	6834      	ldr	r4, [r6, #0]
 801a128:	68a3      	ldr	r3, [r4, #8]
 801a12a:	429d      	cmp	r5, r3
 801a12c:	d207      	bcs.n	801a13e <rcutils_string_map_fini+0x62>
 801a12e:	6822      	ldr	r2, [r4, #0]
 801a130:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801a134:	2800      	cmp	r0, #0
 801a136:	d1e2      	bne.n	801a0fe <rcutils_string_map_fini+0x22>
 801a138:	3501      	adds	r5, #1
 801a13a:	429d      	cmp	r5, r3
 801a13c:	d3dc      	bcc.n	801a0f8 <rcutils_string_map_fini+0x1c>
 801a13e:	2100      	movs	r1, #0
 801a140:	4630      	mov	r0, r6
 801a142:	f7ff ff1b 	bl	8019f7c <rcutils_string_map_reserve>
 801a146:	4604      	mov	r4, r0
 801a148:	b920      	cbnz	r0, 801a154 <rcutils_string_map_fini+0x78>
 801a14a:	6830      	ldr	r0, [r6, #0]
 801a14c:	6943      	ldr	r3, [r0, #20]
 801a14e:	6a01      	ldr	r1, [r0, #32]
 801a150:	4798      	blx	r3
 801a152:	6034      	str	r4, [r6, #0]
 801a154:	4620      	mov	r0, r4
 801a156:	b002      	add	sp, #8
 801a158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a15c:	240b      	movs	r4, #11
 801a15e:	4620      	mov	r0, r4
 801a160:	b002      	add	sp, #8
 801a162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a166:	bf00      	nop

0801a168 <rcutils_string_map_getn>:
 801a168:	b378      	cbz	r0, 801a1ca <rcutils_string_map_getn+0x62>
 801a16a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a16e:	f8d0 b000 	ldr.w	fp, [r0]
 801a172:	f1bb 0f00 	cmp.w	fp, #0
 801a176:	d01f      	beq.n	801a1b8 <rcutils_string_map_getn+0x50>
 801a178:	fab1 f481 	clz	r4, r1
 801a17c:	4688      	mov	r8, r1
 801a17e:	0964      	lsrs	r4, r4, #5
 801a180:	b1d1      	cbz	r1, 801a1b8 <rcutils_string_map_getn+0x50>
 801a182:	f8db 7008 	ldr.w	r7, [fp, #8]
 801a186:	f8db 6000 	ldr.w	r6, [fp]
 801a18a:	b1af      	cbz	r7, 801a1b8 <rcutils_string_map_getn+0x50>
 801a18c:	4691      	mov	r9, r2
 801a18e:	3e04      	subs	r6, #4
 801a190:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801a194:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801a198:	3401      	adds	r4, #1
 801a19a:	4628      	mov	r0, r5
 801a19c:	b155      	cbz	r5, 801a1b4 <rcutils_string_map_getn+0x4c>
 801a19e:	f7e6 f8a9 	bl	80002f4 <strlen>
 801a1a2:	4602      	mov	r2, r0
 801a1a4:	4629      	mov	r1, r5
 801a1a6:	4640      	mov	r0, r8
 801a1a8:	454a      	cmp	r2, r9
 801a1aa:	bf38      	it	cc
 801a1ac:	464a      	movcc	r2, r9
 801a1ae:	f002 fe88 	bl	801cec2 <strncmp>
 801a1b2:	b120      	cbz	r0, 801a1be <rcutils_string_map_getn+0x56>
 801a1b4:	42a7      	cmp	r7, r4
 801a1b6:	d1eb      	bne.n	801a190 <rcutils_string_map_getn+0x28>
 801a1b8:	2000      	movs	r0, #0
 801a1ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1be:	f8db 3004 	ldr.w	r3, [fp, #4]
 801a1c2:	f853 000a 	ldr.w	r0, [r3, sl]
 801a1c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1ca:	4770      	bx	lr
 801a1cc:	0000      	movs	r0, r0
	...

0801a1d0 <rmw_get_zero_initialized_context>:
 801a1d0:	b510      	push	{r4, lr}
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	3010      	adds	r0, #16
 801a1d6:	f7f5 fe7b 	bl	800fed0 <rmw_get_zero_initialized_init_options>
 801a1da:	2300      	movs	r3, #0
 801a1dc:	4620      	mov	r0, r4
 801a1de:	60a3      	str	r3, [r4, #8]
 801a1e0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801a1e2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801a1e4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 801a1f0 <rmw_get_zero_initialized_context+0x20>
 801a1e8:	ed84 7b00 	vstr	d7, [r4]
 801a1ec:	bd10      	pop	{r4, pc}
 801a1ee:	bf00      	nop
	...

0801a1f8 <rmw_time_equal>:
 801a1f8:	b4f0      	push	{r4, r5, r6, r7}
 801a1fa:	b084      	sub	sp, #16
 801a1fc:	ac04      	add	r4, sp, #16
 801a1fe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a202:	4603      	mov	r3, r0
 801a204:	4925      	ldr	r1, [pc, #148]	@ (801a29c <rmw_time_equal+0xa4>)
 801a206:	9d01      	ldr	r5, [sp, #4]
 801a208:	4610      	mov	r0, r2
 801a20a:	4299      	cmp	r1, r3
 801a20c:	f04f 0202 	mov.w	r2, #2
 801a210:	9e03      	ldr	r6, [sp, #12]
 801a212:	41aa      	sbcs	r2, r5
 801a214:	d330      	bcc.n	801a278 <rmw_time_equal+0x80>
 801a216:	4c22      	ldr	r4, [pc, #136]	@ (801a2a0 <rmw_time_equal+0xa8>)
 801a218:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a21c:	fba3 3204 	umull	r3, r2, r3, r4
 801a220:	fb04 2205 	mla	r2, r4, r5, r2
 801a224:	43dd      	mvns	r5, r3
 801a226:	1a8c      	subs	r4, r1, r2
 801a228:	4285      	cmp	r5, r0
 801a22a:	41b4      	sbcs	r4, r6
 801a22c:	d332      	bcc.n	801a294 <rmw_time_equal+0x9c>
 801a22e:	eb10 0c03 	adds.w	ip, r0, r3
 801a232:	eb42 0106 	adc.w	r1, r2, r6
 801a236:	4819      	ldr	r0, [pc, #100]	@ (801a29c <rmw_time_equal+0xa4>)
 801a238:	2202      	movs	r2, #2
 801a23a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801a23c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801a23e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801a242:	4298      	cmp	r0, r3
 801a244:	41b2      	sbcs	r2, r6
 801a246:	d31c      	bcc.n	801a282 <rmw_time_equal+0x8a>
 801a248:	4c15      	ldr	r4, [pc, #84]	@ (801a2a0 <rmw_time_equal+0xa8>)
 801a24a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a24e:	fba3 3204 	umull	r3, r2, r3, r4
 801a252:	fb04 2206 	mla	r2, r4, r6, r2
 801a256:	43de      	mvns	r6, r3
 801a258:	1a84      	subs	r4, r0, r2
 801a25a:	42ae      	cmp	r6, r5
 801a25c:	41bc      	sbcs	r4, r7
 801a25e:	d315      	bcc.n	801a28c <rmw_time_equal+0x94>
 801a260:	195b      	adds	r3, r3, r5
 801a262:	eb42 0207 	adc.w	r2, r2, r7
 801a266:	428a      	cmp	r2, r1
 801a268:	bf08      	it	eq
 801a26a:	4563      	cmpeq	r3, ip
 801a26c:	bf0c      	ite	eq
 801a26e:	2001      	moveq	r0, #1
 801a270:	2000      	movne	r0, #0
 801a272:	b004      	add	sp, #16
 801a274:	bcf0      	pop	{r4, r5, r6, r7}
 801a276:	4770      	bx	lr
 801a278:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a27c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a280:	e7d9      	b.n	801a236 <rmw_time_equal+0x3e>
 801a282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a286:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801a28a:	e7ec      	b.n	801a266 <rmw_time_equal+0x6e>
 801a28c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a290:	4602      	mov	r2, r0
 801a292:	e7e8      	b.n	801a266 <rmw_time_equal+0x6e>
 801a294:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801a298:	e7cd      	b.n	801a236 <rmw_time_equal+0x3e>
 801a29a:	bf00      	nop
 801a29c:	25c17d04 	.word	0x25c17d04
 801a2a0:	3b9aca00 	.word	0x3b9aca00

0801a2a4 <rmw_time_total_nsec>:
 801a2a4:	b470      	push	{r4, r5, r6}
 801a2a6:	b085      	sub	sp, #20
 801a2a8:	ac04      	add	r4, sp, #16
 801a2aa:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	4913      	ldr	r1, [pc, #76]	@ (801a300 <rmw_time_total_nsec+0x5c>)
 801a2b2:	9d01      	ldr	r5, [sp, #4]
 801a2b4:	4610      	mov	r0, r2
 801a2b6:	4299      	cmp	r1, r3
 801a2b8:	f04f 0202 	mov.w	r2, #2
 801a2bc:	9e03      	ldr	r6, [sp, #12]
 801a2be:	41aa      	sbcs	r2, r5
 801a2c0:	d311      	bcc.n	801a2e6 <rmw_time_total_nsec+0x42>
 801a2c2:	4c10      	ldr	r4, [pc, #64]	@ (801a304 <rmw_time_total_nsec+0x60>)
 801a2c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a2c8:	fba3 3204 	umull	r3, r2, r3, r4
 801a2cc:	fb04 2205 	mla	r2, r4, r5, r2
 801a2d0:	43dd      	mvns	r5, r3
 801a2d2:	1a8c      	subs	r4, r1, r2
 801a2d4:	4285      	cmp	r5, r0
 801a2d6:	41b4      	sbcs	r4, r6
 801a2d8:	d30c      	bcc.n	801a2f4 <rmw_time_total_nsec+0x50>
 801a2da:	1818      	adds	r0, r3, r0
 801a2dc:	eb42 0106 	adc.w	r1, r2, r6
 801a2e0:	b005      	add	sp, #20
 801a2e2:	bc70      	pop	{r4, r5, r6}
 801a2e4:	4770      	bx	lr
 801a2e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a2ee:	b005      	add	sp, #20
 801a2f0:	bc70      	pop	{r4, r5, r6}
 801a2f2:	4770      	bx	lr
 801a2f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2f8:	b005      	add	sp, #20
 801a2fa:	bc70      	pop	{r4, r5, r6}
 801a2fc:	4770      	bx	lr
 801a2fe:	bf00      	nop
 801a300:	25c17d04 	.word	0x25c17d04
 801a304:	3b9aca00 	.word	0x3b9aca00

0801a308 <rmw_get_zero_initialized_message_info>:
 801a308:	b510      	push	{r4, lr}
 801a30a:	4604      	mov	r4, r0
 801a30c:	2240      	movs	r2, #64	@ 0x40
 801a30e:	2100      	movs	r1, #0
 801a310:	f002 fdc2 	bl	801ce98 <memset>
 801a314:	4620      	mov	r0, r4
 801a316:	bd10      	pop	{r4, pc}

0801a318 <rmw_validate_full_topic_name>:
 801a318:	2800      	cmp	r0, #0
 801a31a:	d05d      	beq.n	801a3d8 <rmw_validate_full_topic_name+0xc0>
 801a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a320:	460d      	mov	r5, r1
 801a322:	2900      	cmp	r1, #0
 801a324:	d05a      	beq.n	801a3dc <rmw_validate_full_topic_name+0xc4>
 801a326:	4604      	mov	r4, r0
 801a328:	4616      	mov	r6, r2
 801a32a:	f7e5 ffe3 	bl	80002f4 <strlen>
 801a32e:	b150      	cbz	r0, 801a346 <rmw_validate_full_topic_name+0x2e>
 801a330:	7823      	ldrb	r3, [r4, #0]
 801a332:	2b2f      	cmp	r3, #47	@ 0x2f
 801a334:	d00e      	beq.n	801a354 <rmw_validate_full_topic_name+0x3c>
 801a336:	2302      	movs	r3, #2
 801a338:	602b      	str	r3, [r5, #0]
 801a33a:	b146      	cbz	r6, 801a34e <rmw_validate_full_topic_name+0x36>
 801a33c:	2300      	movs	r3, #0
 801a33e:	4618      	mov	r0, r3
 801a340:	6033      	str	r3, [r6, #0]
 801a342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a346:	2301      	movs	r3, #1
 801a348:	602b      	str	r3, [r5, #0]
 801a34a:	2e00      	cmp	r6, #0
 801a34c:	d1f6      	bne.n	801a33c <rmw_validate_full_topic_name+0x24>
 801a34e:	2000      	movs	r0, #0
 801a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a354:	1e43      	subs	r3, r0, #1
 801a356:	5ce2      	ldrb	r2, [r4, r3]
 801a358:	2a2f      	cmp	r2, #47	@ 0x2f
 801a35a:	d041      	beq.n	801a3e0 <rmw_validate_full_topic_name+0xc8>
 801a35c:	1e62      	subs	r2, r4, #1
 801a35e:	f1c4 0e01 	rsb	lr, r4, #1
 801a362:	eb02 0800 	add.w	r8, r2, r0
 801a366:	eb0e 0702 	add.w	r7, lr, r2
 801a36a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a36e:	f023 0120 	bic.w	r1, r3, #32
 801a372:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 801a376:	3941      	subs	r1, #65	@ 0x41
 801a378:	2919      	cmp	r1, #25
 801a37a:	d90f      	bls.n	801a39c <rmw_validate_full_topic_name+0x84>
 801a37c:	f1bc 0f0a 	cmp.w	ip, #10
 801a380:	d90c      	bls.n	801a39c <rmw_validate_full_topic_name+0x84>
 801a382:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 801a386:	fab3 f383 	clz	r3, r3
 801a38a:	095b      	lsrs	r3, r3, #5
 801a38c:	b933      	cbnz	r3, 801a39c <rmw_validate_full_topic_name+0x84>
 801a38e:	2204      	movs	r2, #4
 801a390:	602a      	str	r2, [r5, #0]
 801a392:	2e00      	cmp	r6, #0
 801a394:	d0db      	beq.n	801a34e <rmw_validate_full_topic_name+0x36>
 801a396:	4618      	mov	r0, r3
 801a398:	6037      	str	r7, [r6, #0]
 801a39a:	e7d2      	b.n	801a342 <rmw_validate_full_topic_name+0x2a>
 801a39c:	4542      	cmp	r2, r8
 801a39e:	d1e2      	bne.n	801a366 <rmw_validate_full_topic_name+0x4e>
 801a3a0:	2301      	movs	r3, #1
 801a3a2:	4f1a      	ldr	r7, [pc, #104]	@ (801a40c <rmw_validate_full_topic_name+0xf4>)
 801a3a4:	e004      	b.n	801a3b0 <rmw_validate_full_topic_name+0x98>
 801a3a6:	4298      	cmp	r0, r3
 801a3a8:	f104 0401 	add.w	r4, r4, #1
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	d91c      	bls.n	801a3ea <rmw_validate_full_topic_name+0xd2>
 801a3b0:	4298      	cmp	r0, r3
 801a3b2:	f103 0201 	add.w	r2, r3, #1
 801a3b6:	d0f6      	beq.n	801a3a6 <rmw_validate_full_topic_name+0x8e>
 801a3b8:	7821      	ldrb	r1, [r4, #0]
 801a3ba:	292f      	cmp	r1, #47	@ 0x2f
 801a3bc:	d1f3      	bne.n	801a3a6 <rmw_validate_full_topic_name+0x8e>
 801a3be:	7861      	ldrb	r1, [r4, #1]
 801a3c0:	292f      	cmp	r1, #47	@ 0x2f
 801a3c2:	d01e      	beq.n	801a402 <rmw_validate_full_topic_name+0xea>
 801a3c4:	5dc9      	ldrb	r1, [r1, r7]
 801a3c6:	0749      	lsls	r1, r1, #29
 801a3c8:	d5ed      	bpl.n	801a3a6 <rmw_validate_full_topic_name+0x8e>
 801a3ca:	2206      	movs	r2, #6
 801a3cc:	602a      	str	r2, [r5, #0]
 801a3ce:	2e00      	cmp	r6, #0
 801a3d0:	d0bd      	beq.n	801a34e <rmw_validate_full_topic_name+0x36>
 801a3d2:	2000      	movs	r0, #0
 801a3d4:	6033      	str	r3, [r6, #0]
 801a3d6:	e7b4      	b.n	801a342 <rmw_validate_full_topic_name+0x2a>
 801a3d8:	200b      	movs	r0, #11
 801a3da:	4770      	bx	lr
 801a3dc:	200b      	movs	r0, #11
 801a3de:	e7b0      	b.n	801a342 <rmw_validate_full_topic_name+0x2a>
 801a3e0:	2203      	movs	r2, #3
 801a3e2:	602a      	str	r2, [r5, #0]
 801a3e4:	2e00      	cmp	r6, #0
 801a3e6:	d1f4      	bne.n	801a3d2 <rmw_validate_full_topic_name+0xba>
 801a3e8:	e7b1      	b.n	801a34e <rmw_validate_full_topic_name+0x36>
 801a3ea:	28f7      	cmp	r0, #247	@ 0xf7
 801a3ec:	d803      	bhi.n	801a3f6 <rmw_validate_full_topic_name+0xde>
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	602b      	str	r3, [r5, #0]
 801a3f4:	e7a5      	b.n	801a342 <rmw_validate_full_topic_name+0x2a>
 801a3f6:	2307      	movs	r3, #7
 801a3f8:	602b      	str	r3, [r5, #0]
 801a3fa:	2e00      	cmp	r6, #0
 801a3fc:	d0a7      	beq.n	801a34e <rmw_validate_full_topic_name+0x36>
 801a3fe:	23f6      	movs	r3, #246	@ 0xf6
 801a400:	e7e7      	b.n	801a3d2 <rmw_validate_full_topic_name+0xba>
 801a402:	2205      	movs	r2, #5
 801a404:	602a      	str	r2, [r5, #0]
 801a406:	2e00      	cmp	r6, #0
 801a408:	d1e3      	bne.n	801a3d2 <rmw_validate_full_topic_name+0xba>
 801a40a:	e7a0      	b.n	801a34e <rmw_validate_full_topic_name+0x36>
 801a40c:	0801ed1e 	.word	0x0801ed1e

0801a410 <rmw_validate_namespace_with_size>:
 801a410:	2800      	cmp	r0, #0
 801a412:	d043      	beq.n	801a49c <rmw_validate_namespace_with_size+0x8c>
 801a414:	b570      	push	{r4, r5, r6, lr}
 801a416:	4614      	mov	r4, r2
 801a418:	b0c2      	sub	sp, #264	@ 0x108
 801a41a:	b32a      	cbz	r2, 801a468 <rmw_validate_namespace_with_size+0x58>
 801a41c:	2901      	cmp	r1, #1
 801a41e:	460d      	mov	r5, r1
 801a420:	461e      	mov	r6, r3
 801a422:	d102      	bne.n	801a42a <rmw_validate_namespace_with_size+0x1a>
 801a424:	7803      	ldrb	r3, [r0, #0]
 801a426:	2b2f      	cmp	r3, #47	@ 0x2f
 801a428:	d012      	beq.n	801a450 <rmw_validate_namespace_with_size+0x40>
 801a42a:	aa01      	add	r2, sp, #4
 801a42c:	4669      	mov	r1, sp
 801a42e:	f7ff ff73 	bl	801a318 <rmw_validate_full_topic_name>
 801a432:	b980      	cbnz	r0, 801a456 <rmw_validate_namespace_with_size+0x46>
 801a434:	9a00      	ldr	r2, [sp, #0]
 801a436:	b14a      	cbz	r2, 801a44c <rmw_validate_namespace_with_size+0x3c>
 801a438:	2a07      	cmp	r2, #7
 801a43a:	d007      	beq.n	801a44c <rmw_validate_namespace_with_size+0x3c>
 801a43c:	1e53      	subs	r3, r2, #1
 801a43e:	2b05      	cmp	r3, #5
 801a440:	d82e      	bhi.n	801a4a0 <rmw_validate_namespace_with_size+0x90>
 801a442:	e8df f003 	tbb	[pc, r3]
 801a446:	1f1c      	.short	0x1f1c
 801a448:	14282522 	.word	0x14282522
 801a44c:	2df5      	cmp	r5, #245	@ 0xf5
 801a44e:	d804      	bhi.n	801a45a <rmw_validate_namespace_with_size+0x4a>
 801a450:	2300      	movs	r3, #0
 801a452:	4618      	mov	r0, r3
 801a454:	6023      	str	r3, [r4, #0]
 801a456:	b042      	add	sp, #264	@ 0x108
 801a458:	bd70      	pop	{r4, r5, r6, pc}
 801a45a:	2307      	movs	r3, #7
 801a45c:	6023      	str	r3, [r4, #0]
 801a45e:	2e00      	cmp	r6, #0
 801a460:	d0f9      	beq.n	801a456 <rmw_validate_namespace_with_size+0x46>
 801a462:	23f4      	movs	r3, #244	@ 0xf4
 801a464:	6033      	str	r3, [r6, #0]
 801a466:	e7f6      	b.n	801a456 <rmw_validate_namespace_with_size+0x46>
 801a468:	200b      	movs	r0, #11
 801a46a:	b042      	add	sp, #264	@ 0x108
 801a46c:	bd70      	pop	{r4, r5, r6, pc}
 801a46e:	2306      	movs	r3, #6
 801a470:	6023      	str	r3, [r4, #0]
 801a472:	2e00      	cmp	r6, #0
 801a474:	d0ef      	beq.n	801a456 <rmw_validate_namespace_with_size+0x46>
 801a476:	9b01      	ldr	r3, [sp, #4]
 801a478:	6033      	str	r3, [r6, #0]
 801a47a:	b042      	add	sp, #264	@ 0x108
 801a47c:	bd70      	pop	{r4, r5, r6, pc}
 801a47e:	2301      	movs	r3, #1
 801a480:	6023      	str	r3, [r4, #0]
 801a482:	e7f6      	b.n	801a472 <rmw_validate_namespace_with_size+0x62>
 801a484:	2302      	movs	r3, #2
 801a486:	6023      	str	r3, [r4, #0]
 801a488:	e7f3      	b.n	801a472 <rmw_validate_namespace_with_size+0x62>
 801a48a:	2303      	movs	r3, #3
 801a48c:	6023      	str	r3, [r4, #0]
 801a48e:	e7f0      	b.n	801a472 <rmw_validate_namespace_with_size+0x62>
 801a490:	2304      	movs	r3, #4
 801a492:	6023      	str	r3, [r4, #0]
 801a494:	e7ed      	b.n	801a472 <rmw_validate_namespace_with_size+0x62>
 801a496:	2305      	movs	r3, #5
 801a498:	6023      	str	r3, [r4, #0]
 801a49a:	e7ea      	b.n	801a472 <rmw_validate_namespace_with_size+0x62>
 801a49c:	200b      	movs	r0, #11
 801a49e:	4770      	bx	lr
 801a4a0:	4613      	mov	r3, r2
 801a4a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a4a6:	4a03      	ldr	r2, [pc, #12]	@ (801a4b4 <rmw_validate_namespace_with_size+0xa4>)
 801a4a8:	a802      	add	r0, sp, #8
 801a4aa:	f7ff fcd5 	bl	8019e58 <rcutils_snprintf>
 801a4ae:	2001      	movs	r0, #1
 801a4b0:	e7d1      	b.n	801a456 <rmw_validate_namespace_with_size+0x46>
 801a4b2:	bf00      	nop
 801a4b4:	0801e834 	.word	0x0801e834

0801a4b8 <rmw_validate_namespace>:
 801a4b8:	b168      	cbz	r0, 801a4d6 <rmw_validate_namespace+0x1e>
 801a4ba:	b570      	push	{r4, r5, r6, lr}
 801a4bc:	460d      	mov	r5, r1
 801a4be:	4616      	mov	r6, r2
 801a4c0:	4604      	mov	r4, r0
 801a4c2:	f7e5 ff17 	bl	80002f4 <strlen>
 801a4c6:	4633      	mov	r3, r6
 801a4c8:	4601      	mov	r1, r0
 801a4ca:	462a      	mov	r2, r5
 801a4cc:	4620      	mov	r0, r4
 801a4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4d2:	f7ff bf9d 	b.w	801a410 <rmw_validate_namespace_with_size>
 801a4d6:	200b      	movs	r0, #11
 801a4d8:	4770      	bx	lr
 801a4da:	bf00      	nop

0801a4dc <rmw_namespace_validation_result_string>:
 801a4dc:	2807      	cmp	r0, #7
 801a4de:	d803      	bhi.n	801a4e8 <rmw_namespace_validation_result_string+0xc>
 801a4e0:	4b02      	ldr	r3, [pc, #8]	@ (801a4ec <rmw_namespace_validation_result_string+0x10>)
 801a4e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a4e6:	4770      	bx	lr
 801a4e8:	4801      	ldr	r0, [pc, #4]	@ (801a4f0 <rmw_namespace_validation_result_string+0x14>)
 801a4ea:	4770      	bx	lr
 801a4ec:	0801ea2c 	.word	0x0801ea2c
 801a4f0:	0801e884 	.word	0x0801e884

0801a4f4 <rmw_validate_node_name>:
 801a4f4:	2800      	cmp	r0, #0
 801a4f6:	d042      	beq.n	801a57e <rmw_validate_node_name+0x8a>
 801a4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4fc:	460d      	mov	r5, r1
 801a4fe:	2900      	cmp	r1, #0
 801a500:	d03f      	beq.n	801a582 <rmw_validate_node_name+0x8e>
 801a502:	4604      	mov	r4, r0
 801a504:	4616      	mov	r6, r2
 801a506:	f7e5 fef5 	bl	80002f4 <strlen>
 801a50a:	b310      	cbz	r0, 801a552 <rmw_validate_node_name+0x5e>
 801a50c:	1e63      	subs	r3, r4, #1
 801a50e:	f1c4 0101 	rsb	r1, r4, #1
 801a512:	eb03 0800 	add.w	r8, r3, r0
 801a516:	18cf      	adds	r7, r1, r3
 801a518:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801a51c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801a520:	f02e 0c20 	bic.w	ip, lr, #32
 801a524:	2a09      	cmp	r2, #9
 801a526:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801a52a:	d905      	bls.n	801a538 <rmw_validate_node_name+0x44>
 801a52c:	f1bc 0f19 	cmp.w	ip, #25
 801a530:	d902      	bls.n	801a538 <rmw_validate_node_name+0x44>
 801a532:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801a536:	d114      	bne.n	801a562 <rmw_validate_node_name+0x6e>
 801a538:	4598      	cmp	r8, r3
 801a53a:	d1ec      	bne.n	801a516 <rmw_validate_node_name+0x22>
 801a53c:	7822      	ldrb	r2, [r4, #0]
 801a53e:	4b16      	ldr	r3, [pc, #88]	@ (801a598 <rmw_validate_node_name+0xa4>)
 801a540:	5cd3      	ldrb	r3, [r2, r3]
 801a542:	f013 0304 	ands.w	r3, r3, #4
 801a546:	d113      	bne.n	801a570 <rmw_validate_node_name+0x7c>
 801a548:	28ff      	cmp	r0, #255	@ 0xff
 801a54a:	d81c      	bhi.n	801a586 <rmw_validate_node_name+0x92>
 801a54c:	4618      	mov	r0, r3
 801a54e:	602b      	str	r3, [r5, #0]
 801a550:	e00c      	b.n	801a56c <rmw_validate_node_name+0x78>
 801a552:	2301      	movs	r3, #1
 801a554:	602b      	str	r3, [r5, #0]
 801a556:	b17e      	cbz	r6, 801a578 <rmw_validate_node_name+0x84>
 801a558:	2300      	movs	r3, #0
 801a55a:	4618      	mov	r0, r3
 801a55c:	6033      	str	r3, [r6, #0]
 801a55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a562:	2302      	movs	r3, #2
 801a564:	602b      	str	r3, [r5, #0]
 801a566:	b13e      	cbz	r6, 801a578 <rmw_validate_node_name+0x84>
 801a568:	2000      	movs	r0, #0
 801a56a:	6037      	str	r7, [r6, #0]
 801a56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a570:	2303      	movs	r3, #3
 801a572:	602b      	str	r3, [r5, #0]
 801a574:	2e00      	cmp	r6, #0
 801a576:	d1ef      	bne.n	801a558 <rmw_validate_node_name+0x64>
 801a578:	2000      	movs	r0, #0
 801a57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a57e:	200b      	movs	r0, #11
 801a580:	4770      	bx	lr
 801a582:	200b      	movs	r0, #11
 801a584:	e7f2      	b.n	801a56c <rmw_validate_node_name+0x78>
 801a586:	2204      	movs	r2, #4
 801a588:	602a      	str	r2, [r5, #0]
 801a58a:	2e00      	cmp	r6, #0
 801a58c:	d0f4      	beq.n	801a578 <rmw_validate_node_name+0x84>
 801a58e:	22fe      	movs	r2, #254	@ 0xfe
 801a590:	4618      	mov	r0, r3
 801a592:	6032      	str	r2, [r6, #0]
 801a594:	e7ea      	b.n	801a56c <rmw_validate_node_name+0x78>
 801a596:	bf00      	nop
 801a598:	0801ed1e 	.word	0x0801ed1e

0801a59c <rmw_node_name_validation_result_string>:
 801a59c:	2804      	cmp	r0, #4
 801a59e:	d803      	bhi.n	801a5a8 <rmw_node_name_validation_result_string+0xc>
 801a5a0:	4b02      	ldr	r3, [pc, #8]	@ (801a5ac <rmw_node_name_validation_result_string+0x10>)
 801a5a2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801a5a6:	4770      	bx	lr
 801a5a8:	4801      	ldr	r0, [pc, #4]	@ (801a5b0 <rmw_node_name_validation_result_string+0x14>)
 801a5aa:	4770      	bx	lr
 801a5ac:	0801eb38 	.word	0x0801eb38
 801a5b0:	0801ea4c 	.word	0x0801ea4c

0801a5b4 <on_status>:
 801a5b4:	b082      	sub	sp, #8
 801a5b6:	b002      	add	sp, #8
 801a5b8:	4770      	bx	lr
 801a5ba:	bf00      	nop

0801a5bc <on_topic>:
 801a5bc:	4a23      	ldr	r2, [pc, #140]	@ (801a64c <on_topic+0x90>)
 801a5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5c2:	6812      	ldr	r2, [r2, #0]
 801a5c4:	b094      	sub	sp, #80	@ 0x50
 801a5c6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a5c8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 801a5cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a5ce:	9312      	str	r3, [sp, #72]	@ 0x48
 801a5d0:	b3c2      	cbz	r2, 801a644 <on_topic+0x88>
 801a5d2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801a5d6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801a5da:	e001      	b.n	801a5e0 <on_topic+0x24>
 801a5dc:	6852      	ldr	r2, [r2, #4]
 801a5de:	b38a      	cbz	r2, 801a644 <on_topic+0x88>
 801a5e0:	6894      	ldr	r4, [r2, #8]
 801a5e2:	8aa3      	ldrh	r3, [r4, #20]
 801a5e4:	428b      	cmp	r3, r1
 801a5e6:	d1f9      	bne.n	801a5dc <on_topic+0x20>
 801a5e8:	7da3      	ldrb	r3, [r4, #22]
 801a5ea:	4283      	cmp	r3, r0
 801a5ec:	d1f6      	bne.n	801a5dc <on_topic+0x20>
 801a5ee:	2248      	movs	r2, #72	@ 0x48
 801a5f0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801a5f4:	4668      	mov	r0, sp
 801a5f6:	f002 fd18 	bl	801d02a <memcpy>
 801a5fa:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801a5fe:	4620      	mov	r0, r4
 801a600:	cb0c      	ldmia	r3, {r2, r3}
 801a602:	f7f6 fc7f 	bl	8010f04 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a606:	4607      	mov	r7, r0
 801a608:	b1e0      	cbz	r0, 801a644 <on_topic+0x88>
 801a60a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a60e:	462a      	mov	r2, r5
 801a610:	4630      	mov	r0, r6
 801a612:	f108 0110 	add.w	r1, r8, #16
 801a616:	f7f7 fbb7 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801a61a:	b930      	cbnz	r0, 801a62a <on_topic+0x6e>
 801a61c:	4639      	mov	r1, r7
 801a61e:	480c      	ldr	r0, [pc, #48]	@ (801a650 <on_topic+0x94>)
 801a620:	b014      	add	sp, #80	@ 0x50
 801a622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a626:	f000 b8bd 	b.w	801a7a4 <put_memory>
 801a62a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801a62e:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 801a632:	f7f6 fa65 	bl	8010b00 <rmw_uros_epoch_nanos>
 801a636:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801a63a:	2305      	movs	r3, #5
 801a63c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a640:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801a644:	b014      	add	sp, #80	@ 0x50
 801a646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a64a:	bf00      	nop
 801a64c:	24013a24 	.word	0x24013a24
 801a650:	24013a14 	.word	0x24013a14

0801a654 <on_request>:
 801a654:	4824      	ldr	r0, [pc, #144]	@ (801a6e8 <on_request+0x94>)
 801a656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65a:	6800      	ldr	r0, [r0, #0]
 801a65c:	b094      	sub	sp, #80	@ 0x50
 801a65e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a660:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a664:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a666:	2800      	cmp	r0, #0
 801a668:	d03b      	beq.n	801a6e2 <on_request+0x8e>
 801a66a:	461d      	mov	r5, r3
 801a66c:	e001      	b.n	801a672 <on_request+0x1e>
 801a66e:	6840      	ldr	r0, [r0, #4]
 801a670:	b3b8      	cbz	r0, 801a6e2 <on_request+0x8e>
 801a672:	6884      	ldr	r4, [r0, #8]
 801a674:	8b21      	ldrh	r1, [r4, #24]
 801a676:	4291      	cmp	r1, r2
 801a678:	d1f9      	bne.n	801a66e <on_request+0x1a>
 801a67a:	2248      	movs	r2, #72	@ 0x48
 801a67c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a680:	4668      	mov	r0, sp
 801a682:	f002 fcd2 	bl	801d02a <memcpy>
 801a686:	f104 0320 	add.w	r3, r4, #32
 801a68a:	4620      	mov	r0, r4
 801a68c:	cb0c      	ldmia	r3, {r2, r3}
 801a68e:	f7f6 fc39 	bl	8010f04 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a692:	4680      	mov	r8, r0
 801a694:	b328      	cbz	r0, 801a6e2 <on_request+0x8e>
 801a696:	4630      	mov	r0, r6
 801a698:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a69c:	463a      	mov	r2, r7
 801a69e:	f106 0110 	add.w	r1, r6, #16
 801a6a2:	f7f7 fb71 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801a6a6:	b930      	cbnz	r0, 801a6b6 <on_request+0x62>
 801a6a8:	4641      	mov	r1, r8
 801a6aa:	4810      	ldr	r0, [pc, #64]	@ (801a6ec <on_request+0x98>)
 801a6ac:	b014      	add	sp, #80	@ 0x50
 801a6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6b2:	f000 b877 	b.w	801a7a4 <put_memory>
 801a6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a6b8:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801a6bc:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a6c0:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a6c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a6c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a6cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a6d0:	f7f6 fa16 	bl	8010b00 <rmw_uros_epoch_nanos>
 801a6d4:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a6d8:	2303      	movs	r3, #3
 801a6da:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a6de:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a6e2:	b014      	add	sp, #80	@ 0x50
 801a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6e8:	240139f4 	.word	0x240139f4
 801a6ec:	24013a14 	.word	0x24013a14

0801a6f0 <on_reply>:
 801a6f0:	4822      	ldr	r0, [pc, #136]	@ (801a77c <on_reply+0x8c>)
 801a6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6f6:	6800      	ldr	r0, [r0, #0]
 801a6f8:	b094      	sub	sp, #80	@ 0x50
 801a6fa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801a6fc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 801a700:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a702:	b3b8      	cbz	r0, 801a774 <on_reply+0x84>
 801a704:	461d      	mov	r5, r3
 801a706:	e001      	b.n	801a70c <on_reply+0x1c>
 801a708:	6840      	ldr	r0, [r0, #4]
 801a70a:	b398      	cbz	r0, 801a774 <on_reply+0x84>
 801a70c:	6884      	ldr	r4, [r0, #8]
 801a70e:	8b21      	ldrh	r1, [r4, #24]
 801a710:	4291      	cmp	r1, r2
 801a712:	d1f9      	bne.n	801a708 <on_reply+0x18>
 801a714:	2248      	movs	r2, #72	@ 0x48
 801a716:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801a71a:	4668      	mov	r0, sp
 801a71c:	f002 fc85 	bl	801d02a <memcpy>
 801a720:	f104 0320 	add.w	r3, r4, #32
 801a724:	4620      	mov	r0, r4
 801a726:	cb0c      	ldmia	r3, {r2, r3}
 801a728:	f7f6 fbec 	bl	8010f04 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a72c:	4680      	mov	r8, r0
 801a72e:	b308      	cbz	r0, 801a774 <on_reply+0x84>
 801a730:	4630      	mov	r0, r6
 801a732:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a736:	463a      	mov	r2, r7
 801a738:	f106 0110 	add.w	r1, r6, #16
 801a73c:	f7f7 fb24 	bl	8011d88 <ucdr_deserialize_array_uint8_t>
 801a740:	b930      	cbnz	r0, 801a750 <on_reply+0x60>
 801a742:	4641      	mov	r1, r8
 801a744:	480e      	ldr	r0, [pc, #56]	@ (801a780 <on_reply+0x90>)
 801a746:	b014      	add	sp, #80	@ 0x50
 801a748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a74c:	f000 b82a 	b.w	801a7a4 <put_memory>
 801a750:	2200      	movs	r2, #0
 801a752:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 801a756:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801a75a:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801a75e:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 801a762:	f7f6 f9cd 	bl	8010b00 <rmw_uros_epoch_nanos>
 801a766:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801a76a:	2304      	movs	r3, #4
 801a76c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a770:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 801a774:	b014      	add	sp, #80	@ 0x50
 801a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a77a:	bf00      	nop
 801a77c:	2400f104 	.word	0x2400f104
 801a780:	24013a14 	.word	0x24013a14

0801a784 <get_memory>:
 801a784:	4603      	mov	r3, r0
 801a786:	6840      	ldr	r0, [r0, #4]
 801a788:	b158      	cbz	r0, 801a7a2 <get_memory+0x1e>
 801a78a:	6842      	ldr	r2, [r0, #4]
 801a78c:	605a      	str	r2, [r3, #4]
 801a78e:	b10a      	cbz	r2, 801a794 <get_memory+0x10>
 801a790:	2100      	movs	r1, #0
 801a792:	6011      	str	r1, [r2, #0]
 801a794:	681a      	ldr	r2, [r3, #0]
 801a796:	6042      	str	r2, [r0, #4]
 801a798:	b102      	cbz	r2, 801a79c <get_memory+0x18>
 801a79a:	6010      	str	r0, [r2, #0]
 801a79c:	2200      	movs	r2, #0
 801a79e:	6002      	str	r2, [r0, #0]
 801a7a0:	6018      	str	r0, [r3, #0]
 801a7a2:	4770      	bx	lr

0801a7a4 <put_memory>:
 801a7a4:	680b      	ldr	r3, [r1, #0]
 801a7a6:	b10b      	cbz	r3, 801a7ac <put_memory+0x8>
 801a7a8:	684a      	ldr	r2, [r1, #4]
 801a7aa:	605a      	str	r2, [r3, #4]
 801a7ac:	684a      	ldr	r2, [r1, #4]
 801a7ae:	b102      	cbz	r2, 801a7b2 <put_memory+0xe>
 801a7b0:	6013      	str	r3, [r2, #0]
 801a7b2:	6803      	ldr	r3, [r0, #0]
 801a7b4:	428b      	cmp	r3, r1
 801a7b6:	6843      	ldr	r3, [r0, #4]
 801a7b8:	bf08      	it	eq
 801a7ba:	6002      	streq	r2, [r0, #0]
 801a7bc:	604b      	str	r3, [r1, #4]
 801a7be:	b103      	cbz	r3, 801a7c2 <put_memory+0x1e>
 801a7c0:	6019      	str	r1, [r3, #0]
 801a7c2:	2300      	movs	r3, #0
 801a7c4:	600b      	str	r3, [r1, #0]
 801a7c6:	6041      	str	r1, [r0, #4]
 801a7c8:	4770      	bx	lr
 801a7ca:	bf00      	nop

0801a7cc <rmw_destroy_client>:
 801a7cc:	b570      	push	{r4, r5, r6, lr}
 801a7ce:	b128      	cbz	r0, 801a7dc <rmw_destroy_client+0x10>
 801a7d0:	4604      	mov	r4, r0
 801a7d2:	6800      	ldr	r0, [r0, #0]
 801a7d4:	460d      	mov	r5, r1
 801a7d6:	f7f6 fd0f 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 801a7da:	b910      	cbnz	r0, 801a7e2 <rmw_destroy_client+0x16>
 801a7dc:	2401      	movs	r4, #1
 801a7de:	4620      	mov	r0, r4
 801a7e0:	bd70      	pop	{r4, r5, r6, pc}
 801a7e2:	6863      	ldr	r3, [r4, #4]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d0f9      	beq.n	801a7dc <rmw_destroy_client+0x10>
 801a7e8:	2d00      	cmp	r5, #0
 801a7ea:	d0f7      	beq.n	801a7dc <rmw_destroy_client+0x10>
 801a7ec:	6828      	ldr	r0, [r5, #0]
 801a7ee:	f7f6 fd03 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 801a7f2:	2800      	cmp	r0, #0
 801a7f4:	d0f2      	beq.n	801a7dc <rmw_destroy_client+0x10>
 801a7f6:	686e      	ldr	r6, [r5, #4]
 801a7f8:	2e00      	cmp	r6, #0
 801a7fa:	d0ef      	beq.n	801a7dc <rmw_destroy_client+0x10>
 801a7fc:	6864      	ldr	r4, [r4, #4]
 801a7fe:	6932      	ldr	r2, [r6, #16]
 801a800:	6920      	ldr	r0, [r4, #16]
 801a802:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a806:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a80a:	6819      	ldr	r1, [r3, #0]
 801a80c:	f7f9 f9f0 	bl	8013bf0 <uxr_buffer_cancel_data>
 801a810:	4602      	mov	r2, r0
 801a812:	6920      	ldr	r0, [r4, #16]
 801a814:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a818:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a81c:	f7f6 fc72 	bl	8011104 <run_xrce_session>
 801a820:	6920      	ldr	r0, [r4, #16]
 801a822:	6932      	ldr	r2, [r6, #16]
 801a824:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a828:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a82c:	6819      	ldr	r1, [r3, #0]
 801a82e:	f7f8 ff97 	bl	8013760 <uxr_buffer_delete_entity>
 801a832:	4602      	mov	r2, r0
 801a834:	6920      	ldr	r0, [r4, #16]
 801a836:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a83a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a83e:	f7f6 fc61 	bl	8011104 <run_xrce_session>
 801a842:	4603      	mov	r3, r0
 801a844:	4628      	mov	r0, r5
 801a846:	2b00      	cmp	r3, #0
 801a848:	bf14      	ite	ne
 801a84a:	2400      	movne	r4, #0
 801a84c:	2402      	moveq	r4, #2
 801a84e:	f7f6 fb37 	bl	8010ec0 <rmw_uxrce_fini_client_memory>
 801a852:	e7c4      	b.n	801a7de <rmw_destroy_client+0x12>

0801a854 <rmw_get_implementation_identifier>:
 801a854:	4b01      	ldr	r3, [pc, #4]	@ (801a85c <rmw_get_implementation_identifier+0x8>)
 801a856:	6818      	ldr	r0, [r3, #0]
 801a858:	4770      	bx	lr
 801a85a:	bf00      	nop
 801a85c:	0801eb64 	.word	0x0801eb64

0801a860 <create_topic>:
 801a860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a864:	4605      	mov	r5, r0
 801a866:	b084      	sub	sp, #16
 801a868:	4822      	ldr	r0, [pc, #136]	@ (801a8f4 <create_topic+0x94>)
 801a86a:	460f      	mov	r7, r1
 801a86c:	4616      	mov	r6, r2
 801a86e:	f7ff ff89 	bl	801a784 <get_memory>
 801a872:	4604      	mov	r4, r0
 801a874:	2800      	cmp	r0, #0
 801a876:	d039      	beq.n	801a8ec <create_topic+0x8c>
 801a878:	692b      	ldr	r3, [r5, #16]
 801a87a:	2102      	movs	r1, #2
 801a87c:	6884      	ldr	r4, [r0, #8]
 801a87e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a882:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 801a8fc <create_topic+0x9c>
 801a886:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801a88a:	1c42      	adds	r2, r0, #1
 801a88c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801a890:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801a894:	f7f9 f97c 	bl	8013b90 <uxr_object_id>
 801a898:	223c      	movs	r2, #60	@ 0x3c
 801a89a:	6120      	str	r0, [r4, #16]
 801a89c:	4641      	mov	r1, r8
 801a89e:	4638      	mov	r0, r7
 801a8a0:	f7f6 fc92 	bl	80111c8 <generate_topic_name>
 801a8a4:	b1f0      	cbz	r0, 801a8e4 <create_topic+0x84>
 801a8a6:	4f14      	ldr	r7, [pc, #80]	@ (801a8f8 <create_topic+0x98>)
 801a8a8:	4630      	mov	r0, r6
 801a8aa:	2264      	movs	r2, #100	@ 0x64
 801a8ac:	4639      	mov	r1, r7
 801a8ae:	f7f6 fc5d 	bl	801116c <generate_type_name>
 801a8b2:	b1b8      	cbz	r0, 801a8e4 <create_topic+0x84>
 801a8b4:	6928      	ldr	r0, [r5, #16]
 801a8b6:	2106      	movs	r1, #6
 801a8b8:	696b      	ldr	r3, [r5, #20]
 801a8ba:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801a8be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a8c2:	f8cd 8000 	str.w	r8, [sp]
 801a8c6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a8ca:	6811      	ldr	r1, [r2, #0]
 801a8cc:	6922      	ldr	r2, [r4, #16]
 801a8ce:	f7f8 ffc5 	bl	801385c <uxr_buffer_create_topic_bin>
 801a8d2:	4602      	mov	r2, r0
 801a8d4:	6928      	ldr	r0, [r5, #16]
 801a8d6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801a8da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801a8de:	f7f6 fc11 	bl	8011104 <run_xrce_session>
 801a8e2:	b918      	cbnz	r0, 801a8ec <create_topic+0x8c>
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	2400      	movs	r4, #0
 801a8e8:	f7f6 fb00 	bl	8010eec <rmw_uxrce_fini_topic_memory>
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	b004      	add	sp, #16
 801a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8f4:	24013a34 	.word	0x24013a34
 801a8f8:	24013ab4 	.word	0x24013ab4
 801a8fc:	24013a78 	.word	0x24013a78

0801a900 <destroy_topic>:
 801a900:	b538      	push	{r3, r4, r5, lr}
 801a902:	6985      	ldr	r5, [r0, #24]
 801a904:	b1dd      	cbz	r5, 801a93e <destroy_topic+0x3e>
 801a906:	4604      	mov	r4, r0
 801a908:	6928      	ldr	r0, [r5, #16]
 801a90a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801a90e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a912:	6922      	ldr	r2, [r4, #16]
 801a914:	6819      	ldr	r1, [r3, #0]
 801a916:	f7f8 ff23 	bl	8013760 <uxr_buffer_delete_entity>
 801a91a:	4602      	mov	r2, r0
 801a91c:	6928      	ldr	r0, [r5, #16]
 801a91e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801a922:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801a926:	f7f6 fbed 	bl	8011104 <run_xrce_session>
 801a92a:	4603      	mov	r3, r0
 801a92c:	4620      	mov	r0, r4
 801a92e:	2b00      	cmp	r3, #0
 801a930:	bf14      	ite	ne
 801a932:	2400      	movne	r4, #0
 801a934:	2402      	moveq	r4, #2
 801a936:	f7f6 fad9 	bl	8010eec <rmw_uxrce_fini_topic_memory>
 801a93a:	4620      	mov	r0, r4
 801a93c:	bd38      	pop	{r3, r4, r5, pc}
 801a93e:	2401      	movs	r4, #1
 801a940:	4620      	mov	r0, r4
 801a942:	bd38      	pop	{r3, r4, r5, pc}

0801a944 <rmw_send_request>:
 801a944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a948:	4604      	mov	r4, r0
 801a94a:	6800      	ldr	r0, [r0, #0]
 801a94c:	b08b      	sub	sp, #44	@ 0x2c
 801a94e:	460e      	mov	r6, r1
 801a950:	4615      	mov	r5, r2
 801a952:	b128      	cbz	r0, 801a960 <rmw_send_request+0x1c>
 801a954:	4b21      	ldr	r3, [pc, #132]	@ (801a9dc <rmw_send_request+0x98>)
 801a956:	6819      	ldr	r1, [r3, #0]
 801a958:	f7e5 fcc2 	bl	80002e0 <strcmp>
 801a95c:	2800      	cmp	r0, #0
 801a95e:	d139      	bne.n	801a9d4 <rmw_send_request+0x90>
 801a960:	6864      	ldr	r4, [r4, #4]
 801a962:	2700      	movs	r7, #0
 801a964:	6963      	ldr	r3, [r4, #20]
 801a966:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801a96a:	689b      	ldr	r3, [r3, #8]
 801a96c:	4798      	blx	r3
 801a96e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801a972:	4630      	mov	r0, r6
 801a974:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a978:	4798      	blx	r3
 801a97a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a97e:	9000      	str	r0, [sp, #0]
 801a980:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801a984:	6922      	ldr	r2, [r4, #16]
 801a986:	ab02      	add	r3, sp, #8
 801a988:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801a98a:	f7fb f9d1 	bl	8015d30 <uxr_prepare_output_stream>
 801a98e:	e9c5 0700 	strd	r0, r7, [r5]
 801a992:	b198      	cbz	r0, 801a9bc <rmw_send_request+0x78>
 801a994:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801a998:	a902      	add	r1, sp, #8
 801a99a:	4630      	mov	r0, r6
 801a99c:	4798      	blx	r3
 801a99e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801a9a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a9a6:	2b01      	cmp	r3, #1
 801a9a8:	d00c      	beq.n	801a9c4 <rmw_send_request+0x80>
 801a9aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801a9ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a9b0:	f7f9 feee 	bl	8014790 <uxr_run_session_until_confirm_delivery>
 801a9b4:	4638      	mov	r0, r7
 801a9b6:	b00b      	add	sp, #44	@ 0x2c
 801a9b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9bc:	2001      	movs	r0, #1
 801a9be:	b00b      	add	sp, #44	@ 0x2c
 801a9c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801a9c8:	f7f9 fb28 	bl	801401c <uxr_flash_output_streams>
 801a9cc:	4638      	mov	r0, r7
 801a9ce:	b00b      	add	sp, #44	@ 0x2c
 801a9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9d4:	200c      	movs	r0, #12
 801a9d6:	b00b      	add	sp, #44	@ 0x2c
 801a9d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a9dc:	0801eb64 	.word	0x0801eb64

0801a9e0 <rmw_take_request>:
 801a9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9e4:	4605      	mov	r5, r0
 801a9e6:	6800      	ldr	r0, [r0, #0]
 801a9e8:	b089      	sub	sp, #36	@ 0x24
 801a9ea:	460c      	mov	r4, r1
 801a9ec:	4690      	mov	r8, r2
 801a9ee:	461e      	mov	r6, r3
 801a9f0:	b128      	cbz	r0, 801a9fe <rmw_take_request+0x1e>
 801a9f2:	4b28      	ldr	r3, [pc, #160]	@ (801aa94 <rmw_take_request+0xb4>)
 801a9f4:	6819      	ldr	r1, [r3, #0]
 801a9f6:	f7e5 fc73 	bl	80002e0 <strcmp>
 801a9fa:	2800      	cmp	r0, #0
 801a9fc:	d146      	bne.n	801aa8c <rmw_take_request+0xac>
 801a9fe:	b10e      	cbz	r6, 801aa04 <rmw_take_request+0x24>
 801aa00:	2300      	movs	r3, #0
 801aa02:	7033      	strb	r3, [r6, #0]
 801aa04:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801aa08:	f7f6 fafe 	bl	8011008 <rmw_uxrce_clean_expired_static_input_buffer>
 801aa0c:	4648      	mov	r0, r9
 801aa0e:	f7f6 fad3 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801aa12:	4607      	mov	r7, r0
 801aa14:	b3b0      	cbz	r0, 801aa84 <rmw_take_request+0xa4>
 801aa16:	6885      	ldr	r5, [r0, #8]
 801aa18:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 801aa1c:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 801aa20:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801aa24:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801aa28:	7423      	strb	r3, [r4, #16]
 801aa2a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801aa2e:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 801aa32:	f8a4 2011 	strh.w	r2, [r4, #17]
 801aa36:	74e3      	strb	r3, [r4, #19]
 801aa38:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801aa3c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 801aa40:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 801aa44:	6161      	str	r1, [r4, #20]
 801aa46:	61a2      	str	r2, [r4, #24]
 801aa48:	61e3      	str	r3, [r4, #28]
 801aa4a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801aa4e:	689b      	ldr	r3, [r3, #8]
 801aa50:	4798      	blx	r3
 801aa52:	6844      	ldr	r4, [r0, #4]
 801aa54:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801aa58:	f105 0110 	add.w	r1, r5, #16
 801aa5c:	4668      	mov	r0, sp
 801aa5e:	f7f8 fdb3 	bl	80135c8 <ucdr_init_buffer>
 801aa62:	4641      	mov	r1, r8
 801aa64:	68e3      	ldr	r3, [r4, #12]
 801aa66:	4668      	mov	r0, sp
 801aa68:	4798      	blx	r3
 801aa6a:	4639      	mov	r1, r7
 801aa6c:	4604      	mov	r4, r0
 801aa6e:	480a      	ldr	r0, [pc, #40]	@ (801aa98 <rmw_take_request+0xb8>)
 801aa70:	f7ff fe98 	bl	801a7a4 <put_memory>
 801aa74:	b106      	cbz	r6, 801aa78 <rmw_take_request+0x98>
 801aa76:	7034      	strb	r4, [r6, #0]
 801aa78:	f084 0001 	eor.w	r0, r4, #1
 801aa7c:	b2c0      	uxtb	r0, r0
 801aa7e:	b009      	add	sp, #36	@ 0x24
 801aa80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa84:	2001      	movs	r0, #1
 801aa86:	b009      	add	sp, #36	@ 0x24
 801aa88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa8c:	200c      	movs	r0, #12
 801aa8e:	b009      	add	sp, #36	@ 0x24
 801aa90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa94:	0801eb64 	.word	0x0801eb64
 801aa98:	24013a14 	.word	0x24013a14

0801aa9c <rmw_send_response>:
 801aa9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aa9e:	4605      	mov	r5, r0
 801aaa0:	6800      	ldr	r0, [r0, #0]
 801aaa2:	b091      	sub	sp, #68	@ 0x44
 801aaa4:	460c      	mov	r4, r1
 801aaa6:	4616      	mov	r6, r2
 801aaa8:	b128      	cbz	r0, 801aab6 <rmw_send_response+0x1a>
 801aaaa:	4b29      	ldr	r3, [pc, #164]	@ (801ab50 <rmw_send_response+0xb4>)
 801aaac:	6819      	ldr	r1, [r3, #0]
 801aaae:	f7e5 fc17 	bl	80002e0 <strcmp>
 801aab2:	2800      	cmp	r0, #0
 801aab4:	d141      	bne.n	801ab3a <rmw_send_response+0x9e>
 801aab6:	686d      	ldr	r5, [r5, #4]
 801aab8:	68a1      	ldr	r1, [r4, #8]
 801aaba:	6860      	ldr	r0, [r4, #4]
 801aabc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801aabe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801aac2:	9307      	str	r3, [sp, #28]
 801aac4:	4623      	mov	r3, r4
 801aac6:	9206      	str	r2, [sp, #24]
 801aac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aacc:	789b      	ldrb	r3, [r3, #2]
 801aace:	f88d 2017 	strb.w	r2, [sp, #23]
 801aad2:	f88d 3016 	strb.w	r3, [sp, #22]
 801aad6:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801aada:	68e2      	ldr	r2, [r4, #12]
 801aadc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aae0:	ab02      	add	r3, sp, #8
 801aae2:	696c      	ldr	r4, [r5, #20]
 801aae4:	c307      	stmia	r3!, {r0, r1, r2}
 801aae6:	68e3      	ldr	r3, [r4, #12]
 801aae8:	4798      	blx	r3
 801aaea:	6844      	ldr	r4, [r0, #4]
 801aaec:	4630      	mov	r0, r6
 801aaee:	6923      	ldr	r3, [r4, #16]
 801aaf0:	4798      	blx	r3
 801aaf2:	f100 0318 	add.w	r3, r0, #24
 801aaf6:	6938      	ldr	r0, [r7, #16]
 801aaf8:	9300      	str	r3, [sp, #0]
 801aafa:	ab08      	add	r3, sp, #32
 801aafc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab00:	692a      	ldr	r2, [r5, #16]
 801ab02:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801ab04:	f7fb f914 	bl	8015d30 <uxr_prepare_output_stream>
 801ab08:	b910      	cbnz	r0, 801ab10 <rmw_send_response+0x74>
 801ab0a:	2001      	movs	r0, #1
 801ab0c:	b011      	add	sp, #68	@ 0x44
 801ab0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab10:	a902      	add	r1, sp, #8
 801ab12:	a808      	add	r0, sp, #32
 801ab14:	f7fc f966 	bl	8016de4 <uxr_serialize_SampleIdentity>
 801ab18:	68a3      	ldr	r3, [r4, #8]
 801ab1a:	a908      	add	r1, sp, #32
 801ab1c:	4630      	mov	r0, r6
 801ab1e:	4798      	blx	r3
 801ab20:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801ab24:	6938      	ldr	r0, [r7, #16]
 801ab26:	2b01      	cmp	r3, #1
 801ab28:	d00a      	beq.n	801ab40 <rmw_send_response+0xa4>
 801ab2a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801ab2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab30:	f7f9 fe2e 	bl	8014790 <uxr_run_session_until_confirm_delivery>
 801ab34:	2000      	movs	r0, #0
 801ab36:	b011      	add	sp, #68	@ 0x44
 801ab38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab3a:	200c      	movs	r0, #12
 801ab3c:	b011      	add	sp, #68	@ 0x44
 801ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ab44:	f7f9 fa6a 	bl	801401c <uxr_flash_output_streams>
 801ab48:	2000      	movs	r0, #0
 801ab4a:	b011      	add	sp, #68	@ 0x44
 801ab4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab4e:	bf00      	nop
 801ab50:	0801eb64 	.word	0x0801eb64

0801ab54 <rmw_take_response>:
 801ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab58:	4604      	mov	r4, r0
 801ab5a:	6800      	ldr	r0, [r0, #0]
 801ab5c:	b088      	sub	sp, #32
 801ab5e:	460f      	mov	r7, r1
 801ab60:	4690      	mov	r8, r2
 801ab62:	461d      	mov	r5, r3
 801ab64:	b120      	cbz	r0, 801ab70 <rmw_take_response+0x1c>
 801ab66:	4b1d      	ldr	r3, [pc, #116]	@ (801abdc <rmw_take_response+0x88>)
 801ab68:	6819      	ldr	r1, [r3, #0]
 801ab6a:	f7e5 fbb9 	bl	80002e0 <strcmp>
 801ab6e:	bb68      	cbnz	r0, 801abcc <rmw_take_response+0x78>
 801ab70:	b10d      	cbz	r5, 801ab76 <rmw_take_response+0x22>
 801ab72:	2300      	movs	r3, #0
 801ab74:	702b      	strb	r3, [r5, #0]
 801ab76:	6864      	ldr	r4, [r4, #4]
 801ab78:	f7f6 fa46 	bl	8011008 <rmw_uxrce_clean_expired_static_input_buffer>
 801ab7c:	4620      	mov	r0, r4
 801ab7e:	f7f6 fa1b 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ab82:	4606      	mov	r6, r0
 801ab84:	b330      	cbz	r0, 801abd4 <rmw_take_response+0x80>
 801ab86:	6963      	ldr	r3, [r4, #20]
 801ab88:	6884      	ldr	r4, [r0, #8]
 801ab8a:	68db      	ldr	r3, [r3, #12]
 801ab8c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801ab90:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801ab94:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801ab98:	4798      	blx	r3
 801ab9a:	6847      	ldr	r7, [r0, #4]
 801ab9c:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801aba0:	f104 0110 	add.w	r1, r4, #16
 801aba4:	4668      	mov	r0, sp
 801aba6:	f7f8 fd0f 	bl	80135c8 <ucdr_init_buffer>
 801abaa:	4641      	mov	r1, r8
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	4668      	mov	r0, sp
 801abb0:	4798      	blx	r3
 801abb2:	4631      	mov	r1, r6
 801abb4:	4604      	mov	r4, r0
 801abb6:	480a      	ldr	r0, [pc, #40]	@ (801abe0 <rmw_take_response+0x8c>)
 801abb8:	f7ff fdf4 	bl	801a7a4 <put_memory>
 801abbc:	b105      	cbz	r5, 801abc0 <rmw_take_response+0x6c>
 801abbe:	702c      	strb	r4, [r5, #0]
 801abc0:	f084 0001 	eor.w	r0, r4, #1
 801abc4:	b2c0      	uxtb	r0, r0
 801abc6:	b008      	add	sp, #32
 801abc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abcc:	200c      	movs	r0, #12
 801abce:	b008      	add	sp, #32
 801abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abd4:	2001      	movs	r0, #1
 801abd6:	b008      	add	sp, #32
 801abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abdc:	0801eb64 	.word	0x0801eb64
 801abe0:	24013a14 	.word	0x24013a14

0801abe4 <rmw_take_with_info>:
 801abe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abe6:	4604      	mov	r4, r0
 801abe8:	6800      	ldr	r0, [r0, #0]
 801abea:	b089      	sub	sp, #36	@ 0x24
 801abec:	460f      	mov	r7, r1
 801abee:	4615      	mov	r5, r2
 801abf0:	b128      	cbz	r0, 801abfe <rmw_take_with_info+0x1a>
 801abf2:	4b24      	ldr	r3, [pc, #144]	@ (801ac84 <rmw_take_with_info+0xa0>)
 801abf4:	6819      	ldr	r1, [r3, #0]
 801abf6:	f7e5 fb73 	bl	80002e0 <strcmp>
 801abfa:	2800      	cmp	r0, #0
 801abfc:	d13e      	bne.n	801ac7c <rmw_take_with_info+0x98>
 801abfe:	b305      	cbz	r5, 801ac42 <rmw_take_with_info+0x5e>
 801ac00:	2300      	movs	r3, #0
 801ac02:	6864      	ldr	r4, [r4, #4]
 801ac04:	702b      	strb	r3, [r5, #0]
 801ac06:	f7f6 f9ff 	bl	8011008 <rmw_uxrce_clean_expired_static_input_buffer>
 801ac0a:	4620      	mov	r0, r4
 801ac0c:	f7f6 f9d4 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ac10:	4606      	mov	r6, r0
 801ac12:	b1f0      	cbz	r0, 801ac52 <rmw_take_with_info+0x6e>
 801ac14:	6881      	ldr	r1, [r0, #8]
 801ac16:	4668      	mov	r0, sp
 801ac18:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801ac1c:	3110      	adds	r1, #16
 801ac1e:	f7f8 fcd3 	bl	80135c8 <ucdr_init_buffer>
 801ac22:	69a3      	ldr	r3, [r4, #24]
 801ac24:	4639      	mov	r1, r7
 801ac26:	4668      	mov	r0, sp
 801ac28:	68db      	ldr	r3, [r3, #12]
 801ac2a:	4798      	blx	r3
 801ac2c:	4604      	mov	r4, r0
 801ac2e:	4631      	mov	r1, r6
 801ac30:	4815      	ldr	r0, [pc, #84]	@ (801ac88 <rmw_take_with_info+0xa4>)
 801ac32:	f7ff fdb7 	bl	801a7a4 <put_memory>
 801ac36:	702c      	strb	r4, [r5, #0]
 801ac38:	f084 0001 	eor.w	r0, r4, #1
 801ac3c:	b2c0      	uxtb	r0, r0
 801ac3e:	b009      	add	sp, #36	@ 0x24
 801ac40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac42:	6864      	ldr	r4, [r4, #4]
 801ac44:	f7f6 f9e0 	bl	8011008 <rmw_uxrce_clean_expired_static_input_buffer>
 801ac48:	4620      	mov	r0, r4
 801ac4a:	f7f6 f9b5 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ac4e:	4605      	mov	r5, r0
 801ac50:	b910      	cbnz	r0, 801ac58 <rmw_take_with_info+0x74>
 801ac52:	2001      	movs	r0, #1
 801ac54:	b009      	add	sp, #36	@ 0x24
 801ac56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac58:	68a9      	ldr	r1, [r5, #8]
 801ac5a:	4668      	mov	r0, sp
 801ac5c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801ac60:	3110      	adds	r1, #16
 801ac62:	f7f8 fcb1 	bl	80135c8 <ucdr_init_buffer>
 801ac66:	69a3      	ldr	r3, [r4, #24]
 801ac68:	4639      	mov	r1, r7
 801ac6a:	4668      	mov	r0, sp
 801ac6c:	68db      	ldr	r3, [r3, #12]
 801ac6e:	4798      	blx	r3
 801ac70:	4629      	mov	r1, r5
 801ac72:	4604      	mov	r4, r0
 801ac74:	4804      	ldr	r0, [pc, #16]	@ (801ac88 <rmw_take_with_info+0xa4>)
 801ac76:	f7ff fd95 	bl	801a7a4 <put_memory>
 801ac7a:	e7dd      	b.n	801ac38 <rmw_take_with_info+0x54>
 801ac7c:	200c      	movs	r0, #12
 801ac7e:	b009      	add	sp, #36	@ 0x24
 801ac80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac82:	bf00      	nop
 801ac84:	0801eb64 	.word	0x0801eb64
 801ac88:	24013a14 	.word	0x24013a14

0801ac8c <rmw_wait>:
 801ac8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac90:	4698      	mov	r8, r3
 801ac92:	ea40 0301 	orr.w	r3, r0, r1
 801ac96:	b089      	sub	sp, #36	@ 0x24
 801ac98:	ea48 0303 	orr.w	r3, r8, r3
 801ac9c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ac9e:	4313      	orrs	r3, r2
 801aca0:	f000 8106 	beq.w	801aeb0 <rmw_wait+0x224>
 801aca4:	4605      	mov	r5, r0
 801aca6:	460e      	mov	r6, r1
 801aca8:	4691      	mov	r9, r2
 801acaa:	b16c      	cbz	r4, 801acc8 <rmw_wait+0x3c>
 801acac:	4ba6      	ldr	r3, [pc, #664]	@ (801af48 <rmw_wait+0x2bc>)
 801acae:	af04      	add	r7, sp, #16
 801acb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801acb2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801acb6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801acba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801acbe:	f7ff fa9b 	bl	801a1f8 <rmw_time_equal>
 801acc2:	2800      	cmp	r0, #0
 801acc4:	f000 810b 	beq.w	801aede <rmw_wait+0x252>
 801acc8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801accc:	f7f6 f99c 	bl	8011008 <rmw_uxrce_clean_expired_static_input_buffer>
 801acd0:	4b9e      	ldr	r3, [pc, #632]	@ (801af4c <rmw_wait+0x2c0>)
 801acd2:	681c      	ldr	r4, [r3, #0]
 801acd4:	b14c      	cbz	r4, 801acea <rmw_wait+0x5e>
 801acd6:	4623      	mov	r3, r4
 801acd8:	2100      	movs	r1, #0
 801acda:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801acde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ace2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d1f7      	bne.n	801acda <rmw_wait+0x4e>
 801acea:	f1b9 0f00 	cmp.w	r9, #0
 801acee:	d011      	beq.n	801ad14 <rmw_wait+0x88>
 801acf0:	f8d9 1000 	ldr.w	r1, [r9]
 801acf4:	b171      	cbz	r1, 801ad14 <rmw_wait+0x88>
 801acf6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801acfa:	2300      	movs	r3, #0
 801acfc:	2001      	movs	r0, #1
 801acfe:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ad02:	3301      	adds	r3, #1
 801ad04:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ad06:	4299      	cmp	r1, r3
 801ad08:	6912      	ldr	r2, [r2, #16]
 801ad0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad0e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad12:	d1f4      	bne.n	801acfe <rmw_wait+0x72>
 801ad14:	f1b8 0f00 	cmp.w	r8, #0
 801ad18:	d011      	beq.n	801ad3e <rmw_wait+0xb2>
 801ad1a:	f8d8 1000 	ldr.w	r1, [r8]
 801ad1e:	b171      	cbz	r1, 801ad3e <rmw_wait+0xb2>
 801ad20:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801ad24:	2300      	movs	r3, #0
 801ad26:	2001      	movs	r0, #1
 801ad28:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ad2c:	3301      	adds	r3, #1
 801ad2e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801ad30:	4299      	cmp	r1, r3
 801ad32:	6912      	ldr	r2, [r2, #16]
 801ad34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad38:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad3c:	d1f4      	bne.n	801ad28 <rmw_wait+0x9c>
 801ad3e:	b185      	cbz	r5, 801ad62 <rmw_wait+0xd6>
 801ad40:	6829      	ldr	r1, [r5, #0]
 801ad42:	b171      	cbz	r1, 801ad62 <rmw_wait+0xd6>
 801ad44:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801ad48:	2300      	movs	r3, #0
 801ad4a:	2001      	movs	r0, #1
 801ad4c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ad50:	3301      	adds	r3, #1
 801ad52:	6a12      	ldr	r2, [r2, #32]
 801ad54:	4299      	cmp	r1, r3
 801ad56:	6912      	ldr	r2, [r2, #16]
 801ad58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801ad5c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801ad60:	d1f4      	bne.n	801ad4c <rmw_wait+0xc0>
 801ad62:	b344      	cbz	r4, 801adb6 <rmw_wait+0x12a>
 801ad64:	4622      	mov	r2, r4
 801ad66:	2300      	movs	r3, #0
 801ad68:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801ad6c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801ad70:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801ad74:	440b      	add	r3, r1
 801ad76:	b2db      	uxtb	r3, r3
 801ad78:	2a00      	cmp	r2, #0
 801ad7a:	d1f5      	bne.n	801ad68 <rmw_wait+0xdc>
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d05f      	beq.n	801ae40 <rmw_wait+0x1b4>
 801ad80:	1c7a      	adds	r2, r7, #1
 801ad82:	d00d      	beq.n	801ada0 <rmw_wait+0x114>
 801ad84:	ee07 7a90 	vmov	s15, r7
 801ad88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ad8c:	ee07 3a90 	vmov	s15, r3
 801ad90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ad94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ad98:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801ad9c:	ee17 7a90 	vmov	r7, s15
 801ada0:	68a0      	ldr	r0, [r4, #8]
 801ada2:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801ada6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801adaa:	2b00      	cmp	r3, #0
 801adac:	f040 808d 	bne.w	801aeca <rmw_wait+0x23e>
 801adb0:	6864      	ldr	r4, [r4, #4]
 801adb2:	2c00      	cmp	r4, #0
 801adb4:	d1f4      	bne.n	801ada0 <rmw_wait+0x114>
 801adb6:	f1b9 0f00 	cmp.w	r9, #0
 801adba:	f000 80a1 	beq.w	801af00 <rmw_wait+0x274>
 801adbe:	f8d9 7000 	ldr.w	r7, [r9]
 801adc2:	2f00      	cmp	r7, #0
 801adc4:	f000 80a4 	beq.w	801af10 <rmw_wait+0x284>
 801adc8:	2400      	movs	r4, #0
 801adca:	4627      	mov	r7, r4
 801adcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801add0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801add4:	f7f6 f8f0 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801add8:	2800      	cmp	r0, #0
 801adda:	d03b      	beq.n	801ae54 <rmw_wait+0x1c8>
 801addc:	3401      	adds	r4, #1
 801adde:	f8d9 3000 	ldr.w	r3, [r9]
 801ade2:	2701      	movs	r7, #1
 801ade4:	42a3      	cmp	r3, r4
 801ade6:	d8f1      	bhi.n	801adcc <rmw_wait+0x140>
 801ade8:	2701      	movs	r7, #1
 801adea:	f1b8 0f00 	cmp.w	r8, #0
 801adee:	d010      	beq.n	801ae12 <rmw_wait+0x186>
 801adf0:	f8d8 3000 	ldr.w	r3, [r8]
 801adf4:	b16b      	cbz	r3, 801ae12 <rmw_wait+0x186>
 801adf6:	2400      	movs	r4, #0
 801adf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801adfc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae00:	f7f6 f8da 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ae04:	b370      	cbz	r0, 801ae64 <rmw_wait+0x1d8>
 801ae06:	3401      	adds	r4, #1
 801ae08:	f8d8 3000 	ldr.w	r3, [r8]
 801ae0c:	2701      	movs	r7, #1
 801ae0e:	42a3      	cmp	r3, r4
 801ae10:	d8f2      	bhi.n	801adf8 <rmw_wait+0x16c>
 801ae12:	2d00      	cmp	r5, #0
 801ae14:	d035      	beq.n	801ae82 <rmw_wait+0x1f6>
 801ae16:	682b      	ldr	r3, [r5, #0]
 801ae18:	b39b      	cbz	r3, 801ae82 <rmw_wait+0x1f6>
 801ae1a:	2400      	movs	r4, #0
 801ae1c:	686b      	ldr	r3, [r5, #4]
 801ae1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae22:	f7f6 f8c9 	bl	8010fb8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801ae26:	b328      	cbz	r0, 801ae74 <rmw_wait+0x1e8>
 801ae28:	3401      	adds	r4, #1
 801ae2a:	682b      	ldr	r3, [r5, #0]
 801ae2c:	2701      	movs	r7, #1
 801ae2e:	42a3      	cmp	r3, r4
 801ae30:	d8f4      	bhi.n	801ae1c <rmw_wait+0x190>
 801ae32:	2e00      	cmp	r6, #0
 801ae34:	d03c      	beq.n	801aeb0 <rmw_wait+0x224>
 801ae36:	6834      	ldr	r4, [r6, #0]
 801ae38:	2c00      	cmp	r4, #0
 801ae3a:	d039      	beq.n	801aeb0 <rmw_wait+0x224>
 801ae3c:	2701      	movs	r7, #1
 801ae3e:	e023      	b.n	801ae88 <rmw_wait+0x1fc>
 801ae40:	68a0      	ldr	r0, [r4, #8]
 801ae42:	2100      	movs	r1, #0
 801ae44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ae48:	f7f9 fc68 	bl	801471c <uxr_run_session_timeout>
 801ae4c:	6864      	ldr	r4, [r4, #4]
 801ae4e:	2c00      	cmp	r4, #0
 801ae50:	d1f6      	bne.n	801ae40 <rmw_wait+0x1b4>
 801ae52:	e7b0      	b.n	801adb6 <rmw_wait+0x12a>
 801ae54:	e9d9 3200 	ldrd	r3, r2, [r9]
 801ae58:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae5c:	3401      	adds	r4, #1
 801ae5e:	42a3      	cmp	r3, r4
 801ae60:	d8b4      	bhi.n	801adcc <rmw_wait+0x140>
 801ae62:	e7c2      	b.n	801adea <rmw_wait+0x15e>
 801ae64:	e9d8 3200 	ldrd	r3, r2, [r8]
 801ae68:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae6c:	3401      	adds	r4, #1
 801ae6e:	429c      	cmp	r4, r3
 801ae70:	d3c2      	bcc.n	801adf8 <rmw_wait+0x16c>
 801ae72:	e7ce      	b.n	801ae12 <rmw_wait+0x186>
 801ae74:	e9d5 3200 	ldrd	r3, r2, [r5]
 801ae78:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801ae7c:	3401      	adds	r4, #1
 801ae7e:	42a3      	cmp	r3, r4
 801ae80:	d8cc      	bhi.n	801ae1c <rmw_wait+0x190>
 801ae82:	b1a6      	cbz	r6, 801aeae <rmw_wait+0x222>
 801ae84:	6834      	ldr	r4, [r6, #0]
 801ae86:	b194      	cbz	r4, 801aeae <rmw_wait+0x222>
 801ae88:	2300      	movs	r3, #0
 801ae8a:	461d      	mov	r5, r3
 801ae8c:	e004      	b.n	801ae98 <rmw_wait+0x20c>
 801ae8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801ae92:	3301      	adds	r3, #1
 801ae94:	42a3      	cmp	r3, r4
 801ae96:	d00a      	beq.n	801aeae <rmw_wait+0x222>
 801ae98:	6870      	ldr	r0, [r6, #4]
 801ae9a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801ae9e:	7c0a      	ldrb	r2, [r1, #16]
 801aea0:	2a00      	cmp	r2, #0
 801aea2:	d0f4      	beq.n	801ae8e <rmw_wait+0x202>
 801aea4:	3301      	adds	r3, #1
 801aea6:	4617      	mov	r7, r2
 801aea8:	740d      	strb	r5, [r1, #16]
 801aeaa:	42a3      	cmp	r3, r4
 801aeac:	d1f4      	bne.n	801ae98 <rmw_wait+0x20c>
 801aeae:	b147      	cbz	r7, 801aec2 <rmw_wait+0x236>
 801aeb0:	2000      	movs	r0, #0
 801aeb2:	b009      	add	sp, #36	@ 0x24
 801aeb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aeb8:	b11e      	cbz	r6, 801aec2 <rmw_wait+0x236>
 801aeba:	6834      	ldr	r4, [r6, #0]
 801aebc:	462f      	mov	r7, r5
 801aebe:	2c00      	cmp	r4, #0
 801aec0:	d1e2      	bne.n	801ae88 <rmw_wait+0x1fc>
 801aec2:	2002      	movs	r0, #2
 801aec4:	b009      	add	sp, #36	@ 0x24
 801aec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aeca:	4639      	mov	r1, r7
 801aecc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801aed0:	f7f9 fc3e 	bl	8014750 <uxr_run_session_until_data>
 801aed4:	6864      	ldr	r4, [r4, #4]
 801aed6:	2c00      	cmp	r4, #0
 801aed8:	f47f af62 	bne.w	801ada0 <rmw_wait+0x114>
 801aedc:	e76b      	b.n	801adb6 <rmw_wait+0x12a>
 801aede:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801aee2:	f7ff f9df 	bl	801a2a4 <rmw_time_total_nsec>
 801aee6:	2300      	movs	r3, #0
 801aee8:	4a19      	ldr	r2, [pc, #100]	@ (801af50 <rmw_wait+0x2c4>)
 801aeea:	f7e5 fab1 	bl	8000450 <__aeabi_uldivmod>
 801aeee:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801aef2:	4607      	mov	r7, r0
 801aef4:	f171 0300 	sbcs.w	r3, r1, #0
 801aef8:	bfa8      	it	ge
 801aefa:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801aefe:	e6e5      	b.n	801accc <rmw_wait+0x40>
 801af00:	f1b8 0f00 	cmp.w	r8, #0
 801af04:	d00f      	beq.n	801af26 <rmw_wait+0x29a>
 801af06:	f8d8 3000 	ldr.w	r3, [r8]
 801af0a:	b193      	cbz	r3, 801af32 <rmw_wait+0x2a6>
 801af0c:	464f      	mov	r7, r9
 801af0e:	e772      	b.n	801adf6 <rmw_wait+0x16a>
 801af10:	f1b8 0f00 	cmp.w	r8, #0
 801af14:	d007      	beq.n	801af26 <rmw_wait+0x29a>
 801af16:	f8d8 3000 	ldr.w	r3, [r8]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	f47f af6b 	bne.w	801adf6 <rmw_wait+0x16a>
 801af20:	b155      	cbz	r5, 801af38 <rmw_wait+0x2ac>
 801af22:	461f      	mov	r7, r3
 801af24:	e777      	b.n	801ae16 <rmw_wait+0x18a>
 801af26:	2d00      	cmp	r5, #0
 801af28:	d0c6      	beq.n	801aeb8 <rmw_wait+0x22c>
 801af2a:	682b      	ldr	r3, [r5, #0]
 801af2c:	b143      	cbz	r3, 801af40 <rmw_wait+0x2b4>
 801af2e:	4647      	mov	r7, r8
 801af30:	e773      	b.n	801ae1a <rmw_wait+0x18e>
 801af32:	b10d      	cbz	r5, 801af38 <rmw_wait+0x2ac>
 801af34:	464f      	mov	r7, r9
 801af36:	e76e      	b.n	801ae16 <rmw_wait+0x18a>
 801af38:	462f      	mov	r7, r5
 801af3a:	2e00      	cmp	r6, #0
 801af3c:	d1a2      	bne.n	801ae84 <rmw_wait+0x1f8>
 801af3e:	e7c0      	b.n	801aec2 <rmw_wait+0x236>
 801af40:	4647      	mov	r7, r8
 801af42:	2e00      	cmp	r6, #0
 801af44:	d19e      	bne.n	801ae84 <rmw_wait+0x1f8>
 801af46:	e7bc      	b.n	801aec2 <rmw_wait+0x236>
 801af48:	0801dd98 	.word	0x0801dd98
 801af4c:	24013a04 	.word	0x24013a04
 801af50:	000f4240 	.word	0x000f4240

0801af54 <rmw_create_wait_set>:
 801af54:	b508      	push	{r3, lr}
 801af56:	4803      	ldr	r0, [pc, #12]	@ (801af64 <rmw_create_wait_set+0x10>)
 801af58:	f7ff fc14 	bl	801a784 <get_memory>
 801af5c:	b108      	cbz	r0, 801af62 <rmw_create_wait_set+0xe>
 801af5e:	6880      	ldr	r0, [r0, #8]
 801af60:	3010      	adds	r0, #16
 801af62:	bd08      	pop	{r3, pc}
 801af64:	24013a44 	.word	0x24013a44

0801af68 <rmw_destroy_wait_set>:
 801af68:	b508      	push	{r3, lr}
 801af6a:	4b08      	ldr	r3, [pc, #32]	@ (801af8c <rmw_destroy_wait_set+0x24>)
 801af6c:	6819      	ldr	r1, [r3, #0]
 801af6e:	b911      	cbnz	r1, 801af76 <rmw_destroy_wait_set+0xe>
 801af70:	e00a      	b.n	801af88 <rmw_destroy_wait_set+0x20>
 801af72:	6849      	ldr	r1, [r1, #4]
 801af74:	b141      	cbz	r1, 801af88 <rmw_destroy_wait_set+0x20>
 801af76:	688b      	ldr	r3, [r1, #8]
 801af78:	3310      	adds	r3, #16
 801af7a:	4298      	cmp	r0, r3
 801af7c:	d1f9      	bne.n	801af72 <rmw_destroy_wait_set+0xa>
 801af7e:	4803      	ldr	r0, [pc, #12]	@ (801af8c <rmw_destroy_wait_set+0x24>)
 801af80:	f7ff fc10 	bl	801a7a4 <put_memory>
 801af84:	2000      	movs	r0, #0
 801af86:	bd08      	pop	{r3, pc}
 801af88:	2001      	movs	r0, #1
 801af8a:	bd08      	pop	{r3, pc}
 801af8c:	24013a44 	.word	0x24013a44

0801af90 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af94:	6805      	ldr	r5, [r0, #0]
 801af96:	4604      	mov	r4, r0
 801af98:	460e      	mov	r6, r1
 801af9a:	4628      	mov	r0, r5
 801af9c:	f7e5 f9a0 	bl	80002e0 <strcmp>
 801afa0:	b1c8      	cbz	r0, 801afd6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801afa2:	4b11      	ldr	r3, [pc, #68]	@ (801afe8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	429d      	cmp	r5, r3
 801afa8:	d112      	bne.n	801afd0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801afaa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801afae:	f8d8 4000 	ldr.w	r4, [r8]
 801afb2:	b16c      	cbz	r4, 801afd0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801afb4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801afb8:	2700      	movs	r7, #0
 801afba:	3d04      	subs	r5, #4
 801afbc:	4631      	mov	r1, r6
 801afbe:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801afc2:	f7e5 f98d 	bl	80002e0 <strcmp>
 801afc6:	00bb      	lsls	r3, r7, #2
 801afc8:	b140      	cbz	r0, 801afdc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801afca:	3701      	adds	r7, #1
 801afcc:	42bc      	cmp	r4, r7
 801afce:	d1f5      	bne.n	801afbc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801afd0:	2000      	movs	r0, #0
 801afd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afd6:	4620      	mov	r0, r4
 801afd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801afdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801afe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801afe4:	58d3      	ldr	r3, [r2, r3]
 801afe6:	4718      	bx	r3
 801afe8:	24000678 	.word	0x24000678

0801afec <sensor_msgs__msg__Imu__init>:
 801afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aff0:	4605      	mov	r5, r0
 801aff2:	b3c0      	cbz	r0, 801b066 <sensor_msgs__msg__Imu__init+0x7a>
 801aff4:	f000 f894 	bl	801b120 <std_msgs__msg__Header__init>
 801aff8:	4604      	mov	r4, r0
 801affa:	b310      	cbz	r0, 801b042 <sensor_msgs__msg__Imu__init+0x56>
 801affc:	f105 0618 	add.w	r6, r5, #24
 801b000:	4630      	mov	r0, r6
 801b002:	f000 f8c3 	bl	801b18c <geometry_msgs__msg__Quaternion__init>
 801b006:	4604      	mov	r4, r0
 801b008:	2800      	cmp	r0, #0
 801b00a:	d040      	beq.n	801b08e <sensor_msgs__msg__Imu__init+0xa2>
 801b00c:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 801b010:	4638      	mov	r0, r7
 801b012:	f000 f8cd 	bl	801b1b0 <geometry_msgs__msg__Vector3__init>
 801b016:	4604      	mov	r4, r0
 801b018:	b348      	cbz	r0, 801b06e <sensor_msgs__msg__Imu__init+0x82>
 801b01a:	f105 08e0 	add.w	r8, r5, #224	@ 0xe0
 801b01e:	4640      	mov	r0, r8
 801b020:	f000 f8c6 	bl	801b1b0 <geometry_msgs__msg__Vector3__init>
 801b024:	4604      	mov	r4, r0
 801b026:	b9d8      	cbnz	r0, 801b060 <sensor_msgs__msg__Imu__init+0x74>
 801b028:	4628      	mov	r0, r5
 801b02a:	f000 f89d 	bl	801b168 <std_msgs__msg__Header__fini>
 801b02e:	4630      	mov	r0, r6
 801b030:	f000 f8bc 	bl	801b1ac <geometry_msgs__msg__Quaternion__fini>
 801b034:	4638      	mov	r0, r7
 801b036:	f000 f8bf 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b03a:	4640      	mov	r0, r8
 801b03c:	f000 f8bc 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b040:	e00e      	b.n	801b060 <sensor_msgs__msg__Imu__init+0x74>
 801b042:	4628      	mov	r0, r5
 801b044:	f000 f890 	bl	801b168 <std_msgs__msg__Header__fini>
 801b048:	f105 0018 	add.w	r0, r5, #24
 801b04c:	f000 f8ae 	bl	801b1ac <geometry_msgs__msg__Quaternion__fini>
 801b050:	f105 0080 	add.w	r0, r5, #128	@ 0x80
 801b054:	f000 f8b0 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b058:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801b05c:	f000 f8ac 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b060:	4620      	mov	r0, r4
 801b062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b066:	4604      	mov	r4, r0
 801b068:	4620      	mov	r0, r4
 801b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b06e:	4628      	mov	r0, r5
 801b070:	f000 f87a 	bl	801b168 <std_msgs__msg__Header__fini>
 801b074:	4630      	mov	r0, r6
 801b076:	f000 f899 	bl	801b1ac <geometry_msgs__msg__Quaternion__fini>
 801b07a:	4638      	mov	r0, r7
 801b07c:	f000 f89c 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b080:	f105 00e0 	add.w	r0, r5, #224	@ 0xe0
 801b084:	f000 f898 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b088:	4620      	mov	r0, r4
 801b08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b08e:	4628      	mov	r0, r5
 801b090:	f000 f86a 	bl	801b168 <std_msgs__msg__Header__fini>
 801b094:	4630      	mov	r0, r6
 801b096:	e7d9      	b.n	801b04c <sensor_msgs__msg__Imu__init+0x60>

0801b098 <sensor_msgs__msg__Imu__fini>:
 801b098:	b188      	cbz	r0, 801b0be <sensor_msgs__msg__Imu__fini+0x26>
 801b09a:	b510      	push	{r4, lr}
 801b09c:	4604      	mov	r4, r0
 801b09e:	f000 f863 	bl	801b168 <std_msgs__msg__Header__fini>
 801b0a2:	f104 0018 	add.w	r0, r4, #24
 801b0a6:	f000 f881 	bl	801b1ac <geometry_msgs__msg__Quaternion__fini>
 801b0aa:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801b0ae:	f000 f883 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b0b2:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 801b0b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0ba:	f000 b87d 	b.w	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b0be:	4770      	bx	lr

0801b0c0 <sensor_msgs__msg__MagneticField__init>:
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	4605      	mov	r5, r0
 801b0c4:	b1a8      	cbz	r0, 801b0f2 <sensor_msgs__msg__MagneticField__init+0x32>
 801b0c6:	f000 f82b 	bl	801b120 <std_msgs__msg__Header__init>
 801b0ca:	4604      	mov	r4, r0
 801b0cc:	b140      	cbz	r0, 801b0e0 <sensor_msgs__msg__MagneticField__init+0x20>
 801b0ce:	f105 0618 	add.w	r6, r5, #24
 801b0d2:	4630      	mov	r0, r6
 801b0d4:	f000 f86c 	bl	801b1b0 <geometry_msgs__msg__Vector3__init>
 801b0d8:	4604      	mov	r4, r0
 801b0da:	b168      	cbz	r0, 801b0f8 <sensor_msgs__msg__MagneticField__init+0x38>
 801b0dc:	4620      	mov	r0, r4
 801b0de:	bd70      	pop	{r4, r5, r6, pc}
 801b0e0:	4628      	mov	r0, r5
 801b0e2:	f000 f841 	bl	801b168 <std_msgs__msg__Header__fini>
 801b0e6:	f105 0018 	add.w	r0, r5, #24
 801b0ea:	f000 f865 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	bd70      	pop	{r4, r5, r6, pc}
 801b0f2:	4604      	mov	r4, r0
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	bd70      	pop	{r4, r5, r6, pc}
 801b0f8:	4628      	mov	r0, r5
 801b0fa:	f000 f835 	bl	801b168 <std_msgs__msg__Header__fini>
 801b0fe:	4630      	mov	r0, r6
 801b100:	f000 f85a 	bl	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b104:	e7ea      	b.n	801b0dc <sensor_msgs__msg__MagneticField__init+0x1c>
 801b106:	bf00      	nop

0801b108 <sensor_msgs__msg__MagneticField__fini>:
 801b108:	b148      	cbz	r0, 801b11e <sensor_msgs__msg__MagneticField__fini+0x16>
 801b10a:	b510      	push	{r4, lr}
 801b10c:	4604      	mov	r4, r0
 801b10e:	f000 f82b 	bl	801b168 <std_msgs__msg__Header__fini>
 801b112:	f104 0018 	add.w	r0, r4, #24
 801b116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b11a:	f000 b84d 	b.w	801b1b8 <geometry_msgs__msg__Vector3__fini>
 801b11e:	4770      	bx	lr

0801b120 <std_msgs__msg__Header__init>:
 801b120:	b570      	push	{r4, r5, r6, lr}
 801b122:	4605      	mov	r5, r0
 801b124:	b1a8      	cbz	r0, 801b152 <std_msgs__msg__Header__init+0x32>
 801b126:	f000 f82b 	bl	801b180 <builtin_interfaces__msg__Time__init>
 801b12a:	4604      	mov	r4, r0
 801b12c:	b140      	cbz	r0, 801b140 <std_msgs__msg__Header__init+0x20>
 801b12e:	f105 0608 	add.w	r6, r5, #8
 801b132:	4630      	mov	r0, r6
 801b134:	f001 f968 	bl	801c408 <rosidl_runtime_c__String__init>
 801b138:	4604      	mov	r4, r0
 801b13a:	b168      	cbz	r0, 801b158 <std_msgs__msg__Header__init+0x38>
 801b13c:	4620      	mov	r0, r4
 801b13e:	bd70      	pop	{r4, r5, r6, pc}
 801b140:	4628      	mov	r0, r5
 801b142:	f000 f821 	bl	801b188 <builtin_interfaces__msg__Time__fini>
 801b146:	f105 0008 	add.w	r0, r5, #8
 801b14a:	f001 f973 	bl	801c434 <rosidl_runtime_c__String__fini>
 801b14e:	4620      	mov	r0, r4
 801b150:	bd70      	pop	{r4, r5, r6, pc}
 801b152:	4604      	mov	r4, r0
 801b154:	4620      	mov	r0, r4
 801b156:	bd70      	pop	{r4, r5, r6, pc}
 801b158:	4628      	mov	r0, r5
 801b15a:	f000 f815 	bl	801b188 <builtin_interfaces__msg__Time__fini>
 801b15e:	4630      	mov	r0, r6
 801b160:	f001 f968 	bl	801c434 <rosidl_runtime_c__String__fini>
 801b164:	e7ea      	b.n	801b13c <std_msgs__msg__Header__init+0x1c>
 801b166:	bf00      	nop

0801b168 <std_msgs__msg__Header__fini>:
 801b168:	b148      	cbz	r0, 801b17e <std_msgs__msg__Header__fini+0x16>
 801b16a:	b510      	push	{r4, lr}
 801b16c:	4604      	mov	r4, r0
 801b16e:	f000 f80b 	bl	801b188 <builtin_interfaces__msg__Time__fini>
 801b172:	f104 0008 	add.w	r0, r4, #8
 801b176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b17a:	f001 b95b 	b.w	801c434 <rosidl_runtime_c__String__fini>
 801b17e:	4770      	bx	lr

0801b180 <builtin_interfaces__msg__Time__init>:
 801b180:	3800      	subs	r0, #0
 801b182:	bf18      	it	ne
 801b184:	2001      	movne	r0, #1
 801b186:	4770      	bx	lr

0801b188 <builtin_interfaces__msg__Time__fini>:
 801b188:	4770      	bx	lr
 801b18a:	bf00      	nop

0801b18c <geometry_msgs__msg__Quaternion__init>:
 801b18c:	b160      	cbz	r0, 801b1a8 <geometry_msgs__msg__Quaternion__init+0x1c>
 801b18e:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 801b192:	2200      	movs	r2, #0
 801b194:	2300      	movs	r3, #0
 801b196:	ed80 7b06 	vstr	d7, [r0, #24]
 801b19a:	e9c0 2300 	strd	r2, r3, [r0]
 801b19e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b1a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b1a6:	2001      	movs	r0, #1
 801b1a8:	4770      	bx	lr
 801b1aa:	bf00      	nop

0801b1ac <geometry_msgs__msg__Quaternion__fini>:
 801b1ac:	4770      	bx	lr
 801b1ae:	bf00      	nop

0801b1b0 <geometry_msgs__msg__Vector3__init>:
 801b1b0:	3800      	subs	r0, #0
 801b1b2:	bf18      	it	ne
 801b1b4:	2001      	movne	r0, #1
 801b1b6:	4770      	bx	lr

0801b1b8 <geometry_msgs__msg__Vector3__fini>:
 801b1b8:	4770      	bx	lr
 801b1ba:	bf00      	nop

0801b1bc <ucdr_serialize_string>:
 801b1bc:	b510      	push	{r4, lr}
 801b1be:	b082      	sub	sp, #8
 801b1c0:	4604      	mov	r4, r0
 801b1c2:	4608      	mov	r0, r1
 801b1c4:	9101      	str	r1, [sp, #4]
 801b1c6:	f7e5 f895 	bl	80002f4 <strlen>
 801b1ca:	4602      	mov	r2, r0
 801b1cc:	9901      	ldr	r1, [sp, #4]
 801b1ce:	4620      	mov	r0, r4
 801b1d0:	3201      	adds	r2, #1
 801b1d2:	b002      	add	sp, #8
 801b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1d8:	f7f8 ba6a 	b.w	80136b0 <ucdr_serialize_sequence_char>

0801b1dc <ucdr_deserialize_string>:
 801b1dc:	b500      	push	{lr}
 801b1de:	b083      	sub	sp, #12
 801b1e0:	ab01      	add	r3, sp, #4
 801b1e2:	f7f8 fa77 	bl	80136d4 <ucdr_deserialize_sequence_char>
 801b1e6:	b003      	add	sp, #12
 801b1e8:	f85d fb04 	ldr.w	pc, [sp], #4

0801b1ec <uxr_init_input_best_effort_stream>:
 801b1ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1f0:	8003      	strh	r3, [r0, #0]
 801b1f2:	4770      	bx	lr

0801b1f4 <uxr_reset_input_best_effort_stream>:
 801b1f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b1f8:	8003      	strh	r3, [r0, #0]
 801b1fa:	4770      	bx	lr

0801b1fc <uxr_receive_best_effort_message>:
 801b1fc:	b538      	push	{r3, r4, r5, lr}
 801b1fe:	4604      	mov	r4, r0
 801b200:	8800      	ldrh	r0, [r0, #0]
 801b202:	460d      	mov	r5, r1
 801b204:	f000 fd44 	bl	801bc90 <uxr_seq_num_cmp>
 801b208:	4603      	mov	r3, r0
 801b20a:	0fc0      	lsrs	r0, r0, #31
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	bfb8      	it	lt
 801b210:	8025      	strhlt	r5, [r4, #0]
 801b212:	bd38      	pop	{r3, r4, r5, pc}

0801b214 <on_full_input_buffer>:
 801b214:	b570      	push	{r4, r5, r6, lr}
 801b216:	460c      	mov	r4, r1
 801b218:	4605      	mov	r5, r0
 801b21a:	8908      	ldrh	r0, [r1, #8]
 801b21c:	682b      	ldr	r3, [r5, #0]
 801b21e:	7d26      	ldrb	r6, [r4, #20]
 801b220:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b224:	fbb2 f2f0 	udiv	r2, r2, r0
 801b228:	eba3 0c01 	sub.w	ip, r3, r1
 801b22c:	fbbc fcf2 	udiv	ip, ip, r2
 801b230:	f10c 0c01 	add.w	ip, ip, #1
 801b234:	fa1f f38c 	uxth.w	r3, ip
 801b238:	fbb3 fcf0 	udiv	ip, r3, r0
 801b23c:	fb00 331c 	mls	r3, r0, ip, r3
 801b240:	b29b      	uxth	r3, r3
 801b242:	fb02 f303 	mul.w	r3, r2, r3
 801b246:	1d18      	adds	r0, r3, #4
 801b248:	4408      	add	r0, r1
 801b24a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801b24e:	b116      	cbz	r6, 801b256 <on_full_input_buffer+0x42>
 801b250:	2600      	movs	r6, #0
 801b252:	f840 6c04 	str.w	r6, [r0, #-4]
 801b256:	2a03      	cmp	r2, #3
 801b258:	d801      	bhi.n	801b25e <on_full_input_buffer+0x4a>
 801b25a:	2001      	movs	r0, #1
 801b25c:	bd70      	pop	{r4, r5, r6, pc}
 801b25e:	3308      	adds	r3, #8
 801b260:	4628      	mov	r0, r5
 801b262:	3a04      	subs	r2, #4
 801b264:	4419      	add	r1, r3
 801b266:	692b      	ldr	r3, [r5, #16]
 801b268:	f7f8 f9a6 	bl	80135b8 <ucdr_init_buffer_origin>
 801b26c:	4628      	mov	r0, r5
 801b26e:	4622      	mov	r2, r4
 801b270:	4902      	ldr	r1, [pc, #8]	@ (801b27c <on_full_input_buffer+0x68>)
 801b272:	f7f8 f97d 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 801b276:	2000      	movs	r0, #0
 801b278:	bd70      	pop	{r4, r5, r6, pc}
 801b27a:	bf00      	nop
 801b27c:	0801b215 	.word	0x0801b215

0801b280 <uxr_init_input_reliable_stream>:
 801b280:	b510      	push	{r4, lr}
 801b282:	e9c0 1200 	strd	r1, r2, [r0]
 801b286:	2400      	movs	r4, #0
 801b288:	9a02      	ldr	r2, [sp, #8]
 801b28a:	8103      	strh	r3, [r0, #8]
 801b28c:	6102      	str	r2, [r0, #16]
 801b28e:	7504      	strb	r4, [r0, #20]
 801b290:	b1c3      	cbz	r3, 801b2c4 <uxr_init_input_reliable_stream+0x44>
 801b292:	600c      	str	r4, [r1, #0]
 801b294:	8901      	ldrh	r1, [r0, #8]
 801b296:	2901      	cmp	r1, #1
 801b298:	d914      	bls.n	801b2c4 <uxr_init_input_reliable_stream+0x44>
 801b29a:	f04f 0c01 	mov.w	ip, #1
 801b29e:	6843      	ldr	r3, [r0, #4]
 801b2a0:	f10c 0e01 	add.w	lr, ip, #1
 801b2a4:	fbbc f2f1 	udiv	r2, ip, r1
 801b2a8:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2ac:	fb01 c212 	mls	r2, r1, r2, ip
 801b2b0:	fa1f fc8e 	uxth.w	ip, lr
 801b2b4:	b292      	uxth	r2, r2
 801b2b6:	fb02 f303 	mul.w	r3, r2, r3
 801b2ba:	6802      	ldr	r2, [r0, #0]
 801b2bc:	50d4      	str	r4, [r2, r3]
 801b2be:	8901      	ldrh	r1, [r0, #8]
 801b2c0:	4561      	cmp	r1, ip
 801b2c2:	d8ec      	bhi.n	801b29e <uxr_init_input_reliable_stream+0x1e>
 801b2c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2c8:	60c3      	str	r3, [r0, #12]
 801b2ca:	bd10      	pop	{r4, pc}

0801b2cc <uxr_reset_input_reliable_stream>:
 801b2cc:	8901      	ldrh	r1, [r0, #8]
 801b2ce:	b1d9      	cbz	r1, 801b308 <uxr_reset_input_reliable_stream+0x3c>
 801b2d0:	b510      	push	{r4, lr}
 801b2d2:	f04f 0e00 	mov.w	lr, #0
 801b2d6:	46f4      	mov	ip, lr
 801b2d8:	4674      	mov	r4, lr
 801b2da:	6843      	ldr	r3, [r0, #4]
 801b2dc:	f10e 0e01 	add.w	lr, lr, #1
 801b2e0:	fbbc f2f1 	udiv	r2, ip, r1
 801b2e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801b2e8:	fb01 c212 	mls	r2, r1, r2, ip
 801b2ec:	fa1f fc8e 	uxth.w	ip, lr
 801b2f0:	b292      	uxth	r2, r2
 801b2f2:	fb02 f303 	mul.w	r3, r2, r3
 801b2f6:	6802      	ldr	r2, [r0, #0]
 801b2f8:	50d4      	str	r4, [r2, r3]
 801b2fa:	8901      	ldrh	r1, [r0, #8]
 801b2fc:	4561      	cmp	r1, ip
 801b2fe:	d8ec      	bhi.n	801b2da <uxr_reset_input_reliable_stream+0xe>
 801b300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b304:	60c3      	str	r3, [r0, #12]
 801b306:	bd10      	pop	{r4, pc}
 801b308:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b30c:	60c3      	str	r3, [r0, #12]
 801b30e:	4770      	bx	lr

0801b310 <uxr_receive_reliable_message>:
 801b310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b314:	4604      	mov	r4, r0
 801b316:	460d      	mov	r5, r1
 801b318:	8901      	ldrh	r1, [r0, #8]
 801b31a:	4617      	mov	r7, r2
 801b31c:	8980      	ldrh	r0, [r0, #12]
 801b31e:	4698      	mov	r8, r3
 801b320:	f000 fcae 	bl	801bc80 <uxr_seq_num_add>
 801b324:	4629      	mov	r1, r5
 801b326:	4606      	mov	r6, r0
 801b328:	89a0      	ldrh	r0, [r4, #12]
 801b32a:	f000 fcb1 	bl	801bc90 <uxr_seq_num_cmp>
 801b32e:	2800      	cmp	r0, #0
 801b330:	db0a      	blt.n	801b348 <uxr_receive_reliable_message+0x38>
 801b332:	2600      	movs	r6, #0
 801b334:	4629      	mov	r1, r5
 801b336:	89e0      	ldrh	r0, [r4, #14]
 801b338:	f000 fcaa 	bl	801bc90 <uxr_seq_num_cmp>
 801b33c:	2800      	cmp	r0, #0
 801b33e:	da00      	bge.n	801b342 <uxr_receive_reliable_message+0x32>
 801b340:	81e5      	strh	r5, [r4, #14]
 801b342:	4630      	mov	r0, r6
 801b344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b348:	4630      	mov	r0, r6
 801b34a:	4629      	mov	r1, r5
 801b34c:	f000 fca0 	bl	801bc90 <uxr_seq_num_cmp>
 801b350:	2800      	cmp	r0, #0
 801b352:	dbee      	blt.n	801b332 <uxr_receive_reliable_message+0x22>
 801b354:	6923      	ldr	r3, [r4, #16]
 801b356:	4638      	mov	r0, r7
 801b358:	4798      	blx	r3
 801b35a:	4681      	mov	r9, r0
 801b35c:	2101      	movs	r1, #1
 801b35e:	89a0      	ldrh	r0, [r4, #12]
 801b360:	f000 fc8e 	bl	801bc80 <uxr_seq_num_add>
 801b364:	f1b9 0f00 	cmp.w	r9, #0
 801b368:	bf08      	it	eq
 801b36a:	4285      	cmpeq	r5, r0
 801b36c:	bf0c      	ite	eq
 801b36e:	2601      	moveq	r6, #1
 801b370:	2600      	movne	r6, #0
 801b372:	d104      	bne.n	801b37e <uxr_receive_reliable_message+0x6e>
 801b374:	2300      	movs	r3, #0
 801b376:	9a08      	ldr	r2, [sp, #32]
 801b378:	81a0      	strh	r0, [r4, #12]
 801b37a:	7013      	strb	r3, [r2, #0]
 801b37c:	e7da      	b.n	801b334 <uxr_receive_reliable_message+0x24>
 801b37e:	8922      	ldrh	r2, [r4, #8]
 801b380:	6863      	ldr	r3, [r4, #4]
 801b382:	fbb5 f0f2 	udiv	r0, r5, r2
 801b386:	fbb3 f3f2 	udiv	r3, r3, r2
 801b38a:	fb02 5010 	mls	r0, r2, r0, r5
 801b38e:	b280      	uxth	r0, r0
 801b390:	fb03 f000 	mul.w	r0, r3, r0
 801b394:	6823      	ldr	r3, [r4, #0]
 801b396:	3004      	adds	r0, #4
 801b398:	4418      	add	r0, r3
 801b39a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d1c7      	bne.n	801b332 <uxr_receive_reliable_message+0x22>
 801b3a2:	4639      	mov	r1, r7
 801b3a4:	4642      	mov	r2, r8
 801b3a6:	f001 fe40 	bl	801d02a <memcpy>
 801b3aa:	8921      	ldrh	r1, [r4, #8]
 801b3ac:	6863      	ldr	r3, [r4, #4]
 801b3ae:	fbb5 f2f1 	udiv	r2, r5, r1
 801b3b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3b6:	fb01 5212 	mls	r2, r1, r2, r5
 801b3ba:	b292      	uxth	r2, r2
 801b3bc:	fb02 f303 	mul.w	r3, r2, r3
 801b3c0:	6822      	ldr	r2, [r4, #0]
 801b3c2:	f842 8003 	str.w	r8, [r2, r3]
 801b3c6:	2301      	movs	r3, #1
 801b3c8:	9a08      	ldr	r2, [sp, #32]
 801b3ca:	7013      	strb	r3, [r2, #0]
 801b3cc:	f1b9 0f00 	cmp.w	r9, #0
 801b3d0:	d0af      	beq.n	801b332 <uxr_receive_reliable_message+0x22>
 801b3d2:	89a6      	ldrh	r6, [r4, #12]
 801b3d4:	2101      	movs	r1, #1
 801b3d6:	4630      	mov	r0, r6
 801b3d8:	f000 fc52 	bl	801bc80 <uxr_seq_num_add>
 801b3dc:	8921      	ldrh	r1, [r4, #8]
 801b3de:	6863      	ldr	r3, [r4, #4]
 801b3e0:	4606      	mov	r6, r0
 801b3e2:	fbb0 f2f1 	udiv	r2, r0, r1
 801b3e6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b3ea:	fb01 0212 	mls	r2, r1, r2, r0
 801b3ee:	6820      	ldr	r0, [r4, #0]
 801b3f0:	b292      	uxth	r2, r2
 801b3f2:	fb02 f303 	mul.w	r3, r2, r3
 801b3f6:	3304      	adds	r3, #4
 801b3f8:	4418      	add	r0, r3
 801b3fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d097      	beq.n	801b332 <uxr_receive_reliable_message+0x22>
 801b402:	6923      	ldr	r3, [r4, #16]
 801b404:	4798      	blx	r3
 801b406:	2802      	cmp	r0, #2
 801b408:	d002      	beq.n	801b410 <uxr_receive_reliable_message+0x100>
 801b40a:	2801      	cmp	r0, #1
 801b40c:	d0e2      	beq.n	801b3d4 <uxr_receive_reliable_message+0xc4>
 801b40e:	e790      	b.n	801b332 <uxr_receive_reliable_message+0x22>
 801b410:	2601      	movs	r6, #1
 801b412:	e78f      	b.n	801b334 <uxr_receive_reliable_message+0x24>

0801b414 <uxr_next_input_reliable_buffer_available>:
 801b414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b418:	4604      	mov	r4, r0
 801b41a:	460f      	mov	r7, r1
 801b41c:	8980      	ldrh	r0, [r0, #12]
 801b41e:	2101      	movs	r1, #1
 801b420:	4690      	mov	r8, r2
 801b422:	f000 fc2d 	bl	801bc80 <uxr_seq_num_add>
 801b426:	8922      	ldrh	r2, [r4, #8]
 801b428:	6866      	ldr	r6, [r4, #4]
 801b42a:	fbb0 f3f2 	udiv	r3, r0, r2
 801b42e:	fbb6 f6f2 	udiv	r6, r6, r2
 801b432:	fb02 0313 	mls	r3, r2, r3, r0
 801b436:	b29b      	uxth	r3, r3
 801b438:	fb03 f606 	mul.w	r6, r3, r6
 801b43c:	6823      	ldr	r3, [r4, #0]
 801b43e:	3604      	adds	r6, #4
 801b440:	441e      	add	r6, r3
 801b442:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b446:	f1b9 0f00 	cmp.w	r9, #0
 801b44a:	d023      	beq.n	801b494 <uxr_next_input_reliable_buffer_available+0x80>
 801b44c:	4605      	mov	r5, r0
 801b44e:	6923      	ldr	r3, [r4, #16]
 801b450:	4630      	mov	r0, r6
 801b452:	4798      	blx	r3
 801b454:	4682      	mov	sl, r0
 801b456:	b300      	cbz	r0, 801b49a <uxr_next_input_reliable_buffer_available+0x86>
 801b458:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b45c:	2101      	movs	r1, #1
 801b45e:	4650      	mov	r0, sl
 801b460:	f000 fc0e 	bl	801bc80 <uxr_seq_num_add>
 801b464:	8921      	ldrh	r1, [r4, #8]
 801b466:	4682      	mov	sl, r0
 801b468:	6863      	ldr	r3, [r4, #4]
 801b46a:	6820      	ldr	r0, [r4, #0]
 801b46c:	fbba f2f1 	udiv	r2, sl, r1
 801b470:	fbb3 f3f1 	udiv	r3, r3, r1
 801b474:	fb01 a212 	mls	r2, r1, r2, sl
 801b478:	b292      	uxth	r2, r2
 801b47a:	fb02 f303 	mul.w	r3, r2, r3
 801b47e:	3304      	adds	r3, #4
 801b480:	4418      	add	r0, r3
 801b482:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b486:	b12b      	cbz	r3, 801b494 <uxr_next_input_reliable_buffer_available+0x80>
 801b488:	6923      	ldr	r3, [r4, #16]
 801b48a:	4798      	blx	r3
 801b48c:	2802      	cmp	r0, #2
 801b48e:	d01b      	beq.n	801b4c8 <uxr_next_input_reliable_buffer_available+0xb4>
 801b490:	2801      	cmp	r0, #1
 801b492:	d0e3      	beq.n	801b45c <uxr_next_input_reliable_buffer_available+0x48>
 801b494:	2000      	movs	r0, #0
 801b496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b49a:	464a      	mov	r2, r9
 801b49c:	4631      	mov	r1, r6
 801b49e:	4638      	mov	r0, r7
 801b4a0:	f7f8 f892 	bl	80135c8 <ucdr_init_buffer>
 801b4a4:	8921      	ldrh	r1, [r4, #8]
 801b4a6:	6863      	ldr	r3, [r4, #4]
 801b4a8:	2001      	movs	r0, #1
 801b4aa:	fbb5 f2f1 	udiv	r2, r5, r1
 801b4ae:	fbb3 f3f1 	udiv	r3, r3, r1
 801b4b2:	fb01 5212 	mls	r2, r1, r2, r5
 801b4b6:	b292      	uxth	r2, r2
 801b4b8:	fb02 f303 	mul.w	r3, r2, r3
 801b4bc:	6822      	ldr	r2, [r4, #0]
 801b4be:	f842 a003 	str.w	sl, [r2, r3]
 801b4c2:	81a5      	strh	r5, [r4, #12]
 801b4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4c8:	8920      	ldrh	r0, [r4, #8]
 801b4ca:	eb06 0108 	add.w	r1, r6, r8
 801b4ce:	6863      	ldr	r3, [r4, #4]
 801b4d0:	eba9 0208 	sub.w	r2, r9, r8
 801b4d4:	fbb5 f6f0 	udiv	r6, r5, r0
 801b4d8:	fbb3 f3f0 	udiv	r3, r3, r0
 801b4dc:	fb00 5516 	mls	r5, r0, r6, r5
 801b4e0:	2000      	movs	r0, #0
 801b4e2:	b2ad      	uxth	r5, r5
 801b4e4:	fb03 f505 	mul.w	r5, r3, r5
 801b4e8:	6823      	ldr	r3, [r4, #0]
 801b4ea:	5158      	str	r0, [r3, r5]
 801b4ec:	4638      	mov	r0, r7
 801b4ee:	f7f8 f86b 	bl	80135c8 <ucdr_init_buffer>
 801b4f2:	4638      	mov	r0, r7
 801b4f4:	4622      	mov	r2, r4
 801b4f6:	4903      	ldr	r1, [pc, #12]	@ (801b504 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b4f8:	f7f8 f83a 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 801b4fc:	2001      	movs	r0, #1
 801b4fe:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b502:	e7c8      	b.n	801b496 <uxr_next_input_reliable_buffer_available+0x82>
 801b504:	0801b215 	.word	0x0801b215

0801b508 <uxr_process_heartbeat>:
 801b508:	b538      	push	{r3, r4, r5, lr}
 801b50a:	4611      	mov	r1, r2
 801b50c:	4604      	mov	r4, r0
 801b50e:	89c0      	ldrh	r0, [r0, #14]
 801b510:	4615      	mov	r5, r2
 801b512:	f000 fbbd 	bl	801bc90 <uxr_seq_num_cmp>
 801b516:	2800      	cmp	r0, #0
 801b518:	bfb8      	it	lt
 801b51a:	81e5      	strhlt	r5, [r4, #14]
 801b51c:	bd38      	pop	{r3, r4, r5, pc}
 801b51e:	bf00      	nop

0801b520 <uxr_compute_acknack>:
 801b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b524:	8903      	ldrh	r3, [r0, #8]
 801b526:	4604      	mov	r4, r0
 801b528:	460f      	mov	r7, r1
 801b52a:	8985      	ldrh	r5, [r0, #12]
 801b52c:	b1db      	cbz	r3, 801b566 <uxr_compute_acknack+0x46>
 801b52e:	4628      	mov	r0, r5
 801b530:	2601      	movs	r6, #1
 801b532:	e004      	b.n	801b53e <uxr_compute_acknack+0x1e>
 801b534:	4566      	cmp	r6, ip
 801b536:	f106 0601 	add.w	r6, r6, #1
 801b53a:	d214      	bcs.n	801b566 <uxr_compute_acknack+0x46>
 801b53c:	89a0      	ldrh	r0, [r4, #12]
 801b53e:	b2b1      	uxth	r1, r6
 801b540:	f000 fb9e 	bl	801bc80 <uxr_seq_num_add>
 801b544:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b548:	fbb0 f2fc 	udiv	r2, r0, ip
 801b54c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b550:	fb0c 0212 	mls	r2, ip, r2, r0
 801b554:	fbb3 f3fc 	udiv	r3, r3, ip
 801b558:	b292      	uxth	r2, r2
 801b55a:	fb02 f303 	mul.w	r3, r2, r3
 801b55e:	58cb      	ldr	r3, [r1, r3]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d1e7      	bne.n	801b534 <uxr_compute_acknack+0x14>
 801b564:	4605      	mov	r5, r0
 801b566:	803d      	strh	r5, [r7, #0]
 801b568:	2101      	movs	r1, #1
 801b56a:	89e6      	ldrh	r6, [r4, #14]
 801b56c:	4628      	mov	r0, r5
 801b56e:	f000 fb8b 	bl	801bc88 <uxr_seq_num_sub>
 801b572:	4601      	mov	r1, r0
 801b574:	4630      	mov	r0, r6
 801b576:	f000 fb87 	bl	801bc88 <uxr_seq_num_sub>
 801b57a:	4606      	mov	r6, r0
 801b57c:	b328      	cbz	r0, 801b5ca <uxr_compute_acknack+0xaa>
 801b57e:	f04f 0900 	mov.w	r9, #0
 801b582:	f04f 0801 	mov.w	r8, #1
 801b586:	464d      	mov	r5, r9
 801b588:	fa1f f189 	uxth.w	r1, r9
 801b58c:	8838      	ldrh	r0, [r7, #0]
 801b58e:	f000 fb77 	bl	801bc80 <uxr_seq_num_add>
 801b592:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b596:	6861      	ldr	r1, [r4, #4]
 801b598:	fa08 fe09 	lsl.w	lr, r8, r9
 801b59c:	6822      	ldr	r2, [r4, #0]
 801b59e:	f109 0901 	add.w	r9, r9, #1
 801b5a2:	ea4e 0e05 	orr.w	lr, lr, r5
 801b5a6:	fbb0 f3fc 	udiv	r3, r0, ip
 801b5aa:	fbb1 f1fc 	udiv	r1, r1, ip
 801b5ae:	fb03 001c 	mls	r0, r3, ip, r0
 801b5b2:	b283      	uxth	r3, r0
 801b5b4:	fb01 f303 	mul.w	r3, r1, r3
 801b5b8:	58d3      	ldr	r3, [r2, r3]
 801b5ba:	b90b      	cbnz	r3, 801b5c0 <uxr_compute_acknack+0xa0>
 801b5bc:	fa1f f58e 	uxth.w	r5, lr
 801b5c0:	454e      	cmp	r6, r9
 801b5c2:	d1e1      	bne.n	801b588 <uxr_compute_acknack+0x68>
 801b5c4:	4628      	mov	r0, r5
 801b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5ca:	4605      	mov	r5, r0
 801b5cc:	4628      	mov	r0, r5
 801b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b5d2:	bf00      	nop

0801b5d4 <uxr_init_output_best_effort_stream>:
 801b5d4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801b5d8:	6001      	str	r1, [r0, #0]
 801b5da:	7303      	strb	r3, [r0, #12]
 801b5dc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b5e0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b5e4:	4770      	bx	lr
 801b5e6:	bf00      	nop

0801b5e8 <uxr_reset_output_best_effort_stream>:
 801b5e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b5ec:	7b03      	ldrb	r3, [r0, #12]
 801b5ee:	81c2      	strh	r2, [r0, #14]
 801b5f0:	6043      	str	r3, [r0, #4]
 801b5f2:	4770      	bx	lr

0801b5f4 <uxr_prepare_best_effort_buffer_to_write>:
 801b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5f6:	4604      	mov	r4, r0
 801b5f8:	b083      	sub	sp, #12
 801b5fa:	6840      	ldr	r0, [r0, #4]
 801b5fc:	460d      	mov	r5, r1
 801b5fe:	4616      	mov	r6, r2
 801b600:	f7fa fad4 	bl	8015bac <uxr_submessage_padding>
 801b604:	6863      	ldr	r3, [r4, #4]
 801b606:	4418      	add	r0, r3
 801b608:	68a3      	ldr	r3, [r4, #8]
 801b60a:	1942      	adds	r2, r0, r5
 801b60c:	4293      	cmp	r3, r2
 801b60e:	bf2c      	ite	cs
 801b610:	2701      	movcs	r7, #1
 801b612:	2700      	movcc	r7, #0
 801b614:	d202      	bcs.n	801b61c <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b616:	4638      	mov	r0, r7
 801b618:	b003      	add	sp, #12
 801b61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b61c:	9000      	str	r0, [sp, #0]
 801b61e:	2300      	movs	r3, #0
 801b620:	4630      	mov	r0, r6
 801b622:	6821      	ldr	r1, [r4, #0]
 801b624:	f7f7 ffbe 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 801b628:	6861      	ldr	r1, [r4, #4]
 801b62a:	4638      	mov	r0, r7
 801b62c:	4429      	add	r1, r5
 801b62e:	6061      	str	r1, [r4, #4]
 801b630:	b003      	add	sp, #12
 801b632:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b634 <uxr_prepare_best_effort_buffer_to_send>:
 801b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b638:	4604      	mov	r4, r0
 801b63a:	461d      	mov	r5, r3
 801b63c:	6840      	ldr	r0, [r0, #4]
 801b63e:	7b23      	ldrb	r3, [r4, #12]
 801b640:	4298      	cmp	r0, r3
 801b642:	bf8c      	ite	hi
 801b644:	2601      	movhi	r6, #1
 801b646:	2600      	movls	r6, #0
 801b648:	d802      	bhi.n	801b650 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b64a:	4630      	mov	r0, r6
 801b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b650:	4688      	mov	r8, r1
 801b652:	89e0      	ldrh	r0, [r4, #14]
 801b654:	2101      	movs	r1, #1
 801b656:	4617      	mov	r7, r2
 801b658:	f000 fb12 	bl	801bc80 <uxr_seq_num_add>
 801b65c:	6823      	ldr	r3, [r4, #0]
 801b65e:	81e0      	strh	r0, [r4, #14]
 801b660:	8028      	strh	r0, [r5, #0]
 801b662:	4630      	mov	r0, r6
 801b664:	f8c8 3000 	str.w	r3, [r8]
 801b668:	6863      	ldr	r3, [r4, #4]
 801b66a:	603b      	str	r3, [r7, #0]
 801b66c:	7b23      	ldrb	r3, [r4, #12]
 801b66e:	6063      	str	r3, [r4, #4]
 801b670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b674 <on_full_output_buffer>:
 801b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b676:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b67a:	460c      	mov	r4, r1
 801b67c:	6803      	ldr	r3, [r0, #0]
 801b67e:	4605      	mov	r5, r0
 801b680:	7b26      	ldrb	r6, [r4, #12]
 801b682:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b686:	fbb2 f2fc 	udiv	r2, r2, ip
 801b68a:	eba3 0e01 	sub.w	lr, r3, r1
 801b68e:	6903      	ldr	r3, [r0, #16]
 801b690:	fbbe fef2 	udiv	lr, lr, r2
 801b694:	f10e 0e01 	add.w	lr, lr, #1
 801b698:	fa1f fe8e 	uxth.w	lr, lr
 801b69c:	fbbe f7fc 	udiv	r7, lr, ip
 801b6a0:	fb0c ec17 	mls	ip, ip, r7, lr
 801b6a4:	fa1f fc8c 	uxth.w	ip, ip
 801b6a8:	fb02 fc0c 	mul.w	ip, r2, ip
 801b6ac:	f851 200c 	ldr.w	r2, [r1, ip]
 801b6b0:	44b4      	add	ip, r6
 801b6b2:	1b92      	subs	r2, r2, r6
 801b6b4:	f10c 0c08 	add.w	ip, ip, #8
 801b6b8:	3a04      	subs	r2, #4
 801b6ba:	4461      	add	r1, ip
 801b6bc:	f7f7 ff7c 	bl	80135b8 <ucdr_init_buffer_origin>
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	4622      	mov	r2, r4
 801b6c4:	4902      	ldr	r1, [pc, #8]	@ (801b6d0 <on_full_output_buffer+0x5c>)
 801b6c6:	f7f7 ff53 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 801b6ca:	2000      	movs	r0, #0
 801b6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6ce:	bf00      	nop
 801b6d0:	0801b675 	.word	0x0801b675

0801b6d4 <uxr_init_output_reliable_stream>:
 801b6d4:	b530      	push	{r4, r5, lr}
 801b6d6:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b6da:	8103      	strh	r3, [r0, #8]
 801b6dc:	7304      	strb	r4, [r0, #12]
 801b6de:	e9c0 1200 	strd	r1, r2, [r0]
 801b6e2:	b1e3      	cbz	r3, 801b71e <uxr_init_output_reliable_stream+0x4a>
 801b6e4:	600c      	str	r4, [r1, #0]
 801b6e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b6ea:	f1bc 0f01 	cmp.w	ip, #1
 801b6ee:	d916      	bls.n	801b71e <uxr_init_output_reliable_stream+0x4a>
 801b6f0:	f04f 0e01 	mov.w	lr, #1
 801b6f4:	6843      	ldr	r3, [r0, #4]
 801b6f6:	f10e 0501 	add.w	r5, lr, #1
 801b6fa:	7b04      	ldrb	r4, [r0, #12]
 801b6fc:	6801      	ldr	r1, [r0, #0]
 801b6fe:	fbbe f2fc 	udiv	r2, lr, ip
 801b702:	fbb3 f3fc 	udiv	r3, r3, ip
 801b706:	fb0c e212 	mls	r2, ip, r2, lr
 801b70a:	fa1f fe85 	uxth.w	lr, r5
 801b70e:	b292      	uxth	r2, r2
 801b710:	fb02 f303 	mul.w	r3, r2, r3
 801b714:	50cc      	str	r4, [r1, r3]
 801b716:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b71a:	45f4      	cmp	ip, lr
 801b71c:	d8ea      	bhi.n	801b6f4 <uxr_init_output_reliable_stream+0x20>
 801b71e:	4b07      	ldr	r3, [pc, #28]	@ (801b73c <uxr_init_output_reliable_stream+0x68>)
 801b720:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b724:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b728:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801b72c:	f8c0 300e 	str.w	r3, [r0, #14]
 801b730:	2300      	movs	r3, #0
 801b732:	8242      	strh	r2, [r0, #18]
 801b734:	8403      	strh	r3, [r0, #32]
 801b736:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b73a:	bd30      	pop	{r4, r5, pc}
 801b73c:	ffff0000 	.word	0xffff0000

0801b740 <uxr_reset_output_reliable_stream>:
 801b740:	8901      	ldrh	r1, [r0, #8]
 801b742:	b510      	push	{r4, lr}
 801b744:	b1b1      	cbz	r1, 801b774 <uxr_reset_output_reliable_stream+0x34>
 801b746:	f04f 0e00 	mov.w	lr, #0
 801b74a:	46f4      	mov	ip, lr
 801b74c:	6843      	ldr	r3, [r0, #4]
 801b74e:	f10e 0e01 	add.w	lr, lr, #1
 801b752:	7b04      	ldrb	r4, [r0, #12]
 801b754:	fbbc f2f1 	udiv	r2, ip, r1
 801b758:	fbb3 f3f1 	udiv	r3, r3, r1
 801b75c:	fb01 c212 	mls	r2, r1, r2, ip
 801b760:	fa1f fc8e 	uxth.w	ip, lr
 801b764:	b292      	uxth	r2, r2
 801b766:	fb02 f303 	mul.w	r3, r2, r3
 801b76a:	6802      	ldr	r2, [r0, #0]
 801b76c:	50d4      	str	r4, [r2, r3]
 801b76e:	8901      	ldrh	r1, [r0, #8]
 801b770:	4561      	cmp	r1, ip
 801b772:	d8eb      	bhi.n	801b74c <uxr_reset_output_reliable_stream+0xc>
 801b774:	4b08      	ldr	r3, [pc, #32]	@ (801b798 <uxr_reset_output_reliable_stream+0x58>)
 801b776:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b77a:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801b790 <uxr_reset_output_reliable_stream+0x50>
 801b77e:	f8c0 300e 	str.w	r3, [r0, #14]
 801b782:	2300      	movs	r3, #0
 801b784:	8242      	strh	r2, [r0, #18]
 801b786:	8403      	strh	r3, [r0, #32]
 801b788:	ed80 7b06 	vstr	d7, [r0, #24]
 801b78c:	bd10      	pop	{r4, pc}
 801b78e:	bf00      	nop
 801b790:	ffffffff 	.word	0xffffffff
 801b794:	7fffffff 	.word	0x7fffffff
 801b798:	ffff0000 	.word	0xffff0000

0801b79c <uxr_prepare_reliable_buffer_to_write>:
 801b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7a0:	4604      	mov	r4, r0
 801b7a2:	b091      	sub	sp, #68	@ 0x44
 801b7a4:	8900      	ldrh	r0, [r0, #8]
 801b7a6:	468b      	mov	fp, r1
 801b7a8:	89e6      	ldrh	r6, [r4, #14]
 801b7aa:	9204      	str	r2, [sp, #16]
 801b7ac:	6865      	ldr	r5, [r4, #4]
 801b7ae:	6823      	ldr	r3, [r4, #0]
 801b7b0:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b7b4:	fbb6 f2f0 	udiv	r2, r6, r0
 801b7b8:	fbb5 f5f0 	udiv	r5, r5, r0
 801b7bc:	fb00 6212 	mls	r2, r0, r2, r6
 801b7c0:	1f2f      	subs	r7, r5, #4
 801b7c2:	b292      	uxth	r2, r2
 801b7c4:	fb05 3202 	mla	r2, r5, r2, r3
 801b7c8:	1d11      	adds	r1, r2, #4
 801b7ca:	f8d2 8000 	ldr.w	r8, [r2]
 801b7ce:	9103      	str	r1, [sp, #12]
 801b7d0:	2800      	cmp	r0, #0
 801b7d2:	f000 814a 	beq.w	801ba6a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b7d6:	f04f 0c00 	mov.w	ip, #0
 801b7da:	46e2      	mov	sl, ip
 801b7dc:	4661      	mov	r1, ip
 801b7de:	f10c 0c01 	add.w	ip, ip, #1
 801b7e2:	fbb1 f2f0 	udiv	r2, r1, r0
 801b7e6:	fb00 1212 	mls	r2, r0, r2, r1
 801b7ea:	fa1f f18c 	uxth.w	r1, ip
 801b7ee:	b292      	uxth	r2, r2
 801b7f0:	fb05 f202 	mul.w	r2, r5, r2
 801b7f4:	589a      	ldr	r2, [r3, r2]
 801b7f6:	454a      	cmp	r2, r9
 801b7f8:	d103      	bne.n	801b802 <uxr_prepare_reliable_buffer_to_write+0x66>
 801b7fa:	f10a 0a01 	add.w	sl, sl, #1
 801b7fe:	fa1f fa8a 	uxth.w	sl, sl
 801b802:	4281      	cmp	r1, r0
 801b804:	d3eb      	bcc.n	801b7de <uxr_prepare_reliable_buffer_to_write+0x42>
 801b806:	4640      	mov	r0, r8
 801b808:	2104      	movs	r1, #4
 801b80a:	f8cd a014 	str.w	sl, [sp, #20]
 801b80e:	f7f7 fedf 	bl	80135d0 <ucdr_alignment>
 801b812:	4480      	add	r8, r0
 801b814:	eb08 020b 	add.w	r2, r8, fp
 801b818:	42ba      	cmp	r2, r7
 801b81a:	f240 80ca 	bls.w	801b9b2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801b81e:	7b22      	ldrb	r2, [r4, #12]
 801b820:	445a      	add	r2, fp
 801b822:	42ba      	cmp	r2, r7
 801b824:	f240 80b2 	bls.w	801b98c <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b828:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801b82c:	b2bb      	uxth	r3, r7
 801b82e:	eba2 0209 	sub.w	r2, r2, r9
 801b832:	441a      	add	r2, r3
 801b834:	b292      	uxth	r2, r2
 801b836:	fb0a f902 	mul.w	r9, sl, r2
 801b83a:	9205      	str	r2, [sp, #20]
 801b83c:	45d9      	cmp	r9, fp
 801b83e:	9206      	str	r2, [sp, #24]
 801b840:	f0c0 80b3 	bcc.w	801b9aa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b844:	f108 0204 	add.w	r2, r8, #4
 801b848:	42ba      	cmp	r2, r7
 801b84a:	f080 80da 	bcs.w	801ba02 <uxr_prepare_reliable_buffer_to_write+0x266>
 801b84e:	f1a3 0904 	sub.w	r9, r3, #4
 801b852:	9b05      	ldr	r3, [sp, #20]
 801b854:	eba9 0908 	sub.w	r9, r9, r8
 801b858:	fa1f f989 	uxth.w	r9, r9
 801b85c:	ebab 0b09 	sub.w	fp, fp, r9
 801b860:	fbbb f2f3 	udiv	r2, fp, r3
 801b864:	fb03 b312 	mls	r3, r3, r2, fp
 801b868:	2b00      	cmp	r3, #0
 801b86a:	f040 80c4 	bne.w	801b9f6 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b86e:	b293      	uxth	r3, r2
 801b870:	4553      	cmp	r3, sl
 801b872:	f200 809a 	bhi.w	801b9aa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b876:	2b00      	cmp	r3, #0
 801b878:	f000 80f9 	beq.w	801ba6e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b87c:	f8cd 801c 	str.w	r8, [sp, #28]
 801b880:	f04f 0a00 	mov.w	sl, #0
 801b884:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b888:	f10d 0b20 	add.w	fp, sp, #32
 801b88c:	9505      	str	r5, [sp, #20]
 801b88e:	461d      	mov	r5, r3
 801b890:	e000      	b.n	801b894 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b892:	46c1      	mov	r9, r8
 801b894:	8922      	ldrh	r2, [r4, #8]
 801b896:	4658      	mov	r0, fp
 801b898:	6863      	ldr	r3, [r4, #4]
 801b89a:	f10a 0a01 	add.w	sl, sl, #1
 801b89e:	fbb6 f1f2 	udiv	r1, r6, r2
 801b8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8a6:	fb02 6111 	mls	r1, r2, r1, r6
 801b8aa:	463a      	mov	r2, r7
 801b8ac:	b289      	uxth	r1, r1
 801b8ae:	fb03 f101 	mul.w	r1, r3, r1
 801b8b2:	6823      	ldr	r3, [r4, #0]
 801b8b4:	3104      	adds	r1, #4
 801b8b6:	4419      	add	r1, r3
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b8be:	f8cd c000 	str.w	ip, [sp]
 801b8c2:	f7f7 fe6f 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 801b8c6:	464a      	mov	r2, r9
 801b8c8:	2300      	movs	r3, #0
 801b8ca:	210d      	movs	r1, #13
 801b8cc:	4658      	mov	r0, fp
 801b8ce:	f7fa f92d 	bl	8015b2c <uxr_buffer_submessage_header>
 801b8d2:	8921      	ldrh	r1, [r4, #8]
 801b8d4:	6863      	ldr	r3, [r4, #4]
 801b8d6:	4630      	mov	r0, r6
 801b8d8:	fbb6 f2f1 	udiv	r2, r6, r1
 801b8dc:	fbb3 f3f1 	udiv	r3, r3, r1
 801b8e0:	fb01 6212 	mls	r2, r1, r2, r6
 801b8e4:	2101      	movs	r1, #1
 801b8e6:	b292      	uxth	r2, r2
 801b8e8:	fb02 f303 	mul.w	r3, r2, r3
 801b8ec:	6822      	ldr	r2, [r4, #0]
 801b8ee:	50d7      	str	r7, [r2, r3]
 801b8f0:	f000 f9c6 	bl	801bc80 <uxr_seq_num_add>
 801b8f4:	4606      	mov	r6, r0
 801b8f6:	fa1f f38a 	uxth.w	r3, sl
 801b8fa:	429d      	cmp	r5, r3
 801b8fc:	d8c9      	bhi.n	801b892 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b8fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b902:	9d05      	ldr	r5, [sp, #20]
 801b904:	8920      	ldrh	r0, [r4, #8]
 801b906:	463a      	mov	r2, r7
 801b908:	6863      	ldr	r3, [r4, #4]
 801b90a:	fbb6 f1f0 	udiv	r1, r6, r0
 801b90e:	fbb3 f3f0 	udiv	r3, r3, r0
 801b912:	fb00 6111 	mls	r1, r0, r1, r6
 801b916:	4658      	mov	r0, fp
 801b918:	b289      	uxth	r1, r1
 801b91a:	fb01 f303 	mul.w	r3, r1, r3
 801b91e:	6821      	ldr	r1, [r4, #0]
 801b920:	3304      	adds	r3, #4
 801b922:	4419      	add	r1, r3
 801b924:	2300      	movs	r3, #0
 801b926:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b92a:	9700      	str	r7, [sp, #0]
 801b92c:	f7f7 fe3a 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 801b930:	9f06      	ldr	r7, [sp, #24]
 801b932:	4658      	mov	r0, fp
 801b934:	2302      	movs	r3, #2
 801b936:	b2ba      	uxth	r2, r7
 801b938:	210d      	movs	r1, #13
 801b93a:	f7fa f8f7 	bl	8015b2c <uxr_buffer_submessage_header>
 801b93e:	f108 0104 	add.w	r1, r8, #4
 801b942:	9b03      	ldr	r3, [sp, #12]
 801b944:	f1a5 0208 	sub.w	r2, r5, #8
 801b948:	8925      	ldrh	r5, [r4, #8]
 801b94a:	440b      	add	r3, r1
 801b94c:	eba2 0208 	sub.w	r2, r2, r8
 801b950:	fbb6 f0f5 	udiv	r0, r6, r5
 801b954:	4619      	mov	r1, r3
 801b956:	6863      	ldr	r3, [r4, #4]
 801b958:	fb05 6010 	mls	r0, r5, r0, r6
 801b95c:	fbb3 f3f5 	udiv	r3, r3, r5
 801b960:	b280      	uxth	r0, r0
 801b962:	6825      	ldr	r5, [r4, #0]
 801b964:	fb00 f303 	mul.w	r3, r0, r3
 801b968:	7b20      	ldrb	r0, [r4, #12]
 801b96a:	3004      	adds	r0, #4
 801b96c:	4438      	add	r0, r7
 801b96e:	50e8      	str	r0, [r5, r3]
 801b970:	9d04      	ldr	r5, [sp, #16]
 801b972:	4628      	mov	r0, r5
 801b974:	f7f7 fe28 	bl	80135c8 <ucdr_init_buffer>
 801b978:	4628      	mov	r0, r5
 801b97a:	4622      	mov	r2, r4
 801b97c:	493d      	ldr	r1, [pc, #244]	@ (801ba74 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b97e:	f7f7 fdf7 	bl	8013570 <ucdr_set_on_full_buffer_callback>
 801b982:	2001      	movs	r0, #1
 801b984:	81e6      	strh	r6, [r4, #14]
 801b986:	b011      	add	sp, #68	@ 0x44
 801b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b98c:	2101      	movs	r1, #1
 801b98e:	89e0      	ldrh	r0, [r4, #14]
 801b990:	f000 f976 	bl	801bc80 <uxr_seq_num_add>
 801b994:	4605      	mov	r5, r0
 801b996:	8921      	ldrh	r1, [r4, #8]
 801b998:	8a60      	ldrh	r0, [r4, #18]
 801b99a:	f000 f971 	bl	801bc80 <uxr_seq_num_add>
 801b99e:	4601      	mov	r1, r0
 801b9a0:	4628      	mov	r0, r5
 801b9a2:	f000 f975 	bl	801bc90 <uxr_seq_num_cmp>
 801b9a6:	2800      	cmp	r0, #0
 801b9a8:	dd44      	ble.n	801ba34 <uxr_prepare_reliable_buffer_to_write+0x298>
 801b9aa:	2000      	movs	r0, #0
 801b9ac:	b011      	add	sp, #68	@ 0x44
 801b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9b2:	8921      	ldrh	r1, [r4, #8]
 801b9b4:	8a60      	ldrh	r0, [r4, #18]
 801b9b6:	9205      	str	r2, [sp, #20]
 801b9b8:	f000 f962 	bl	801bc80 <uxr_seq_num_add>
 801b9bc:	4601      	mov	r1, r0
 801b9be:	4630      	mov	r0, r6
 801b9c0:	f000 f966 	bl	801bc90 <uxr_seq_num_cmp>
 801b9c4:	2800      	cmp	r0, #0
 801b9c6:	9a05      	ldr	r2, [sp, #20]
 801b9c8:	dcef      	bgt.n	801b9aa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b9ca:	8925      	ldrh	r5, [r4, #8]
 801b9cc:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b9d0:	fbb6 f4f5 	udiv	r4, r6, r5
 801b9d4:	fbb3 f3f5 	udiv	r3, r3, r5
 801b9d8:	fb05 6414 	mls	r4, r5, r4, r6
 801b9dc:	b2a4      	uxth	r4, r4
 801b9de:	fb04 f303 	mul.w	r3, r4, r3
 801b9e2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b9e6:	50fa      	str	r2, [r7, r3]
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	f8cd 8000 	str.w	r8, [sp]
 801b9ee:	f7f7 fdd9 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 801b9f2:	2001      	movs	r0, #1
 801b9f4:	e7da      	b.n	801b9ac <uxr_prepare_reliable_buffer_to_write+0x210>
 801b9f6:	3201      	adds	r2, #1
 801b9f8:	9306      	str	r3, [sp, #24]
 801b9fa:	b293      	uxth	r3, r2
 801b9fc:	4553      	cmp	r3, sl
 801b9fe:	d8d4      	bhi.n	801b9aa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801ba00:	e739      	b.n	801b876 <uxr_prepare_reliable_buffer_to_write+0xda>
 801ba02:	4630      	mov	r0, r6
 801ba04:	2101      	movs	r1, #1
 801ba06:	9307      	str	r3, [sp, #28]
 801ba08:	f000 f93a 	bl	801bc80 <uxr_seq_num_add>
 801ba0c:	4606      	mov	r6, r0
 801ba0e:	8920      	ldrh	r0, [r4, #8]
 801ba10:	6862      	ldr	r2, [r4, #4]
 801ba12:	fbb6 f1f0 	udiv	r1, r6, r0
 801ba16:	fbb2 f2f0 	udiv	r2, r2, r0
 801ba1a:	fb00 6111 	mls	r1, r0, r1, r6
 801ba1e:	b289      	uxth	r1, r1
 801ba20:	fb01 f202 	mul.w	r2, r1, r2
 801ba24:	6821      	ldr	r1, [r4, #0]
 801ba26:	3204      	adds	r2, #4
 801ba28:	188b      	adds	r3, r1, r2
 801ba2a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ba2e:	9303      	str	r3, [sp, #12]
 801ba30:	9b07      	ldr	r3, [sp, #28]
 801ba32:	e70c      	b.n	801b84e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ba34:	8921      	ldrh	r1, [r4, #8]
 801ba36:	6863      	ldr	r3, [r4, #4]
 801ba38:	9804      	ldr	r0, [sp, #16]
 801ba3a:	fbb5 f2f1 	udiv	r2, r5, r1
 801ba3e:	fbb3 f3f1 	udiv	r3, r3, r1
 801ba42:	fb01 5212 	mls	r2, r1, r2, r5
 801ba46:	6821      	ldr	r1, [r4, #0]
 801ba48:	b292      	uxth	r2, r2
 801ba4a:	fb02 f303 	mul.w	r3, r2, r3
 801ba4e:	7b22      	ldrb	r2, [r4, #12]
 801ba50:	3304      	adds	r3, #4
 801ba52:	445a      	add	r2, fp
 801ba54:	4419      	add	r1, r3
 801ba56:	f841 2c04 	str.w	r2, [r1, #-4]
 801ba5a:	7b23      	ldrb	r3, [r4, #12]
 801ba5c:	9300      	str	r3, [sp, #0]
 801ba5e:	2300      	movs	r3, #0
 801ba60:	f7f7 fda0 	bl	80135a4 <ucdr_init_buffer_origin_offset>
 801ba64:	2001      	movs	r0, #1
 801ba66:	81e5      	strh	r5, [r4, #14]
 801ba68:	e7a0      	b.n	801b9ac <uxr_prepare_reliable_buffer_to_write+0x210>
 801ba6a:	4682      	mov	sl, r0
 801ba6c:	e6cb      	b.n	801b806 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801ba6e:	f10d 0b20 	add.w	fp, sp, #32
 801ba72:	e747      	b.n	801b904 <uxr_prepare_reliable_buffer_to_write+0x168>
 801ba74:	0801b675 	.word	0x0801b675

0801ba78 <uxr_prepare_next_reliable_buffer_to_send>:
 801ba78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	461d      	mov	r5, r3
 801ba7e:	460f      	mov	r7, r1
 801ba80:	8a00      	ldrh	r0, [r0, #16]
 801ba82:	2101      	movs	r1, #1
 801ba84:	4616      	mov	r6, r2
 801ba86:	f000 f8fb 	bl	801bc80 <uxr_seq_num_add>
 801ba8a:	8028      	strh	r0, [r5, #0]
 801ba8c:	8922      	ldrh	r2, [r4, #8]
 801ba8e:	6863      	ldr	r3, [r4, #4]
 801ba90:	fbb0 f1f2 	udiv	r1, r0, r2
 801ba94:	fbb3 f3f2 	udiv	r3, r3, r2
 801ba98:	fb02 0c11 	mls	ip, r2, r1, r0
 801ba9c:	89e1      	ldrh	r1, [r4, #14]
 801ba9e:	fa1f fc8c 	uxth.w	ip, ip
 801baa2:	fb0c fc03 	mul.w	ip, ip, r3
 801baa6:	6823      	ldr	r3, [r4, #0]
 801baa8:	f10c 0c04 	add.w	ip, ip, #4
 801baac:	4463      	add	r3, ip
 801baae:	603b      	str	r3, [r7, #0]
 801bab0:	6823      	ldr	r3, [r4, #0]
 801bab2:	449c      	add	ip, r3
 801bab4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801bab8:	6033      	str	r3, [r6, #0]
 801baba:	f000 f8e9 	bl	801bc90 <uxr_seq_num_cmp>
 801babe:	2800      	cmp	r0, #0
 801bac0:	dd01      	ble.n	801bac6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801bac2:	2000      	movs	r0, #0
 801bac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bac6:	7b23      	ldrb	r3, [r4, #12]
 801bac8:	6832      	ldr	r2, [r6, #0]
 801baca:	429a      	cmp	r2, r3
 801bacc:	d9f9      	bls.n	801bac2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801bace:	8a61      	ldrh	r1, [r4, #18]
 801bad0:	8a20      	ldrh	r0, [r4, #16]
 801bad2:	f000 f8d9 	bl	801bc88 <uxr_seq_num_sub>
 801bad6:	8923      	ldrh	r3, [r4, #8]
 801bad8:	4283      	cmp	r3, r0
 801bada:	d0f2      	beq.n	801bac2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801badc:	8828      	ldrh	r0, [r5, #0]
 801bade:	89e3      	ldrh	r3, [r4, #14]
 801bae0:	8220      	strh	r0, [r4, #16]
 801bae2:	4298      	cmp	r0, r3
 801bae4:	d001      	beq.n	801baea <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801bae6:	2001      	movs	r0, #1
 801bae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801baea:	2101      	movs	r1, #1
 801baec:	f000 f8c8 	bl	801bc80 <uxr_seq_num_add>
 801baf0:	4603      	mov	r3, r0
 801baf2:	2001      	movs	r0, #1
 801baf4:	81e3      	strh	r3, [r4, #14]
 801baf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801baf8 <uxr_update_output_stream_heartbeat_timestamp>:
 801baf8:	b570      	push	{r4, r5, r6, lr}
 801bafa:	8a01      	ldrh	r1, [r0, #16]
 801bafc:	4604      	mov	r4, r0
 801bafe:	8a40      	ldrh	r0, [r0, #18]
 801bb00:	4615      	mov	r5, r2
 801bb02:	461e      	mov	r6, r3
 801bb04:	f000 f8c4 	bl	801bc90 <uxr_seq_num_cmp>
 801bb08:	2800      	cmp	r0, #0
 801bb0a:	db07      	blt.n	801bb1c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801bb0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801bb10:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801bb14:	2000      	movs	r0, #0
 801bb16:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801bb1a:	bd70      	pop	{r4, r5, r6, pc}
 801bb1c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801bb20:	b940      	cbnz	r0, 801bb34 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801bb22:	2301      	movs	r3, #1
 801bb24:	f884 3020 	strb.w	r3, [r4, #32]
 801bb28:	3564      	adds	r5, #100	@ 0x64
 801bb2a:	f146 0600 	adc.w	r6, r6, #0
 801bb2e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801bb32:	bd70      	pop	{r4, r5, r6, pc}
 801bb34:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801bb38:	4295      	cmp	r5, r2
 801bb3a:	eb76 0303 	sbcs.w	r3, r6, r3
 801bb3e:	db04      	blt.n	801bb4a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801bb40:	1c43      	adds	r3, r0, #1
 801bb42:	2001      	movs	r0, #1
 801bb44:	f884 3020 	strb.w	r3, [r4, #32]
 801bb48:	e7ee      	b.n	801bb28 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bb4a:	2000      	movs	r0, #0
 801bb4c:	e7ec      	b.n	801bb28 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801bb4e:	bf00      	nop

0801bb50 <uxr_begin_output_nack_buffer_it>:
 801bb50:	8a40      	ldrh	r0, [r0, #18]
 801bb52:	4770      	bx	lr

0801bb54 <uxr_next_reliable_nack_buffer_to_send>:
 801bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb58:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801bb5c:	b197      	cbz	r7, 801bb84 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801bb5e:	4680      	mov	r8, r0
 801bb60:	460d      	mov	r5, r1
 801bb62:	4616      	mov	r6, r2
 801bb64:	461c      	mov	r4, r3
 801bb66:	8818      	ldrh	r0, [r3, #0]
 801bb68:	2101      	movs	r1, #1
 801bb6a:	f000 f889 	bl	801bc80 <uxr_seq_num_add>
 801bb6e:	8020      	strh	r0, [r4, #0]
 801bb70:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801bb74:	f000 f88c 	bl	801bc90 <uxr_seq_num_cmp>
 801bb78:	2800      	cmp	r0, #0
 801bb7a:	dd06      	ble.n	801bb8a <uxr_next_reliable_nack_buffer_to_send+0x36>
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	461f      	mov	r7, r3
 801bb80:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801bb84:	4638      	mov	r0, r7
 801bb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb8a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801bb8e:	8820      	ldrh	r0, [r4, #0]
 801bb90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bb94:	fbb0 f3f2 	udiv	r3, r0, r2
 801bb98:	fbb1 fcf2 	udiv	ip, r1, r2
 801bb9c:	fb02 0313 	mls	r3, r2, r3, r0
 801bba0:	b29b      	uxth	r3, r3
 801bba2:	fb03 fc0c 	mul.w	ip, r3, ip
 801bba6:	f8d8 3000 	ldr.w	r3, [r8]
 801bbaa:	f10c 0c04 	add.w	ip, ip, #4
 801bbae:	4463      	add	r3, ip
 801bbb0:	602b      	str	r3, [r5, #0]
 801bbb2:	f8d8 3000 	ldr.w	r3, [r8]
 801bbb6:	4463      	add	r3, ip
 801bbb8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801bbbc:	6033      	str	r3, [r6, #0]
 801bbbe:	f898 200c 	ldrb.w	r2, [r8, #12]
 801bbc2:	429a      	cmp	r2, r3
 801bbc4:	d0d0      	beq.n	801bb68 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801bbc6:	e7dd      	b.n	801bb84 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801bbc8 <uxr_process_acknack>:
 801bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbca:	4604      	mov	r4, r0
 801bbcc:	460e      	mov	r6, r1
 801bbce:	4610      	mov	r0, r2
 801bbd0:	2101      	movs	r1, #1
 801bbd2:	f000 f859 	bl	801bc88 <uxr_seq_num_sub>
 801bbd6:	8a61      	ldrh	r1, [r4, #18]
 801bbd8:	f000 f856 	bl	801bc88 <uxr_seq_num_sub>
 801bbdc:	b1c8      	cbz	r0, 801bc12 <uxr_process_acknack+0x4a>
 801bbde:	4605      	mov	r5, r0
 801bbe0:	2700      	movs	r7, #0
 801bbe2:	2101      	movs	r1, #1
 801bbe4:	8a60      	ldrh	r0, [r4, #18]
 801bbe6:	f000 f84b 	bl	801bc80 <uxr_seq_num_add>
 801bbea:	8923      	ldrh	r3, [r4, #8]
 801bbec:	6862      	ldr	r2, [r4, #4]
 801bbee:	3701      	adds	r7, #1
 801bbf0:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801bbf4:	6821      	ldr	r1, [r4, #0]
 801bbf6:	42bd      	cmp	r5, r7
 801bbf8:	8260      	strh	r0, [r4, #18]
 801bbfa:	fbb0 fef3 	udiv	lr, r0, r3
 801bbfe:	fbb2 f2f3 	udiv	r2, r2, r3
 801bc02:	fb03 031e 	mls	r3, r3, lr, r0
 801bc06:	b29b      	uxth	r3, r3
 801bc08:	fb02 f303 	mul.w	r3, r2, r3
 801bc0c:	f841 c003 	str.w	ip, [r1, r3]
 801bc10:	d1e7      	bne.n	801bbe2 <uxr_process_acknack+0x1a>
 801bc12:	3e00      	subs	r6, #0
 801bc14:	f04f 0300 	mov.w	r3, #0
 801bc18:	bf18      	it	ne
 801bc1a:	2601      	movne	r6, #1
 801bc1c:	f884 3020 	strb.w	r3, [r4, #32]
 801bc20:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801bc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc26:	bf00      	nop

0801bc28 <uxr_is_output_up_to_date>:
 801bc28:	8a01      	ldrh	r1, [r0, #16]
 801bc2a:	8a40      	ldrh	r0, [r0, #18]
 801bc2c:	b508      	push	{r3, lr}
 801bc2e:	f000 f82f 	bl	801bc90 <uxr_seq_num_cmp>
 801bc32:	fab0 f080 	clz	r0, r0
 801bc36:	0940      	lsrs	r0, r0, #5
 801bc38:	bd08      	pop	{r3, pc}
 801bc3a:	bf00      	nop

0801bc3c <get_available_free_slots>:
 801bc3c:	8901      	ldrh	r1, [r0, #8]
 801bc3e:	b1e1      	cbz	r1, 801bc7a <get_available_free_slots+0x3e>
 801bc40:	6843      	ldr	r3, [r0, #4]
 801bc42:	f04f 0c00 	mov.w	ip, #0
 801bc46:	b530      	push	{r4, r5, lr}
 801bc48:	fbb3 fef1 	udiv	lr, r3, r1
 801bc4c:	6805      	ldr	r5, [r0, #0]
 801bc4e:	4662      	mov	r2, ip
 801bc50:	7b04      	ldrb	r4, [r0, #12]
 801bc52:	4660      	mov	r0, ip
 801bc54:	f10c 0c01 	add.w	ip, ip, #1
 801bc58:	fbb2 f3f1 	udiv	r3, r2, r1
 801bc5c:	fb01 2313 	mls	r3, r1, r3, r2
 801bc60:	fa1f f28c 	uxth.w	r2, ip
 801bc64:	b29b      	uxth	r3, r3
 801bc66:	fb0e f303 	mul.w	r3, lr, r3
 801bc6a:	58eb      	ldr	r3, [r5, r3]
 801bc6c:	429c      	cmp	r4, r3
 801bc6e:	d101      	bne.n	801bc74 <get_available_free_slots+0x38>
 801bc70:	3001      	adds	r0, #1
 801bc72:	b280      	uxth	r0, r0
 801bc74:	428a      	cmp	r2, r1
 801bc76:	d3ed      	bcc.n	801bc54 <get_available_free_slots+0x18>
 801bc78:	bd30      	pop	{r4, r5, pc}
 801bc7a:	4608      	mov	r0, r1
 801bc7c:	4770      	bx	lr
 801bc7e:	bf00      	nop

0801bc80 <uxr_seq_num_add>:
 801bc80:	4408      	add	r0, r1
 801bc82:	b280      	uxth	r0, r0
 801bc84:	4770      	bx	lr
 801bc86:	bf00      	nop

0801bc88 <uxr_seq_num_sub>:
 801bc88:	1a40      	subs	r0, r0, r1
 801bc8a:	b280      	uxth	r0, r0
 801bc8c:	4770      	bx	lr
 801bc8e:	bf00      	nop

0801bc90 <uxr_seq_num_cmp>:
 801bc90:	4288      	cmp	r0, r1
 801bc92:	d011      	beq.n	801bcb8 <uxr_seq_num_cmp+0x28>
 801bc94:	d309      	bcc.n	801bcaa <uxr_seq_num_cmp+0x1a>
 801bc96:	4288      	cmp	r0, r1
 801bc98:	d910      	bls.n	801bcbc <uxr_seq_num_cmp+0x2c>
 801bc9a:	1a40      	subs	r0, r0, r1
 801bc9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801bca0:	bfd4      	ite	le
 801bca2:	2001      	movle	r0, #1
 801bca4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801bca8:	4770      	bx	lr
 801bcaa:	1a0b      	subs	r3, r1, r0
 801bcac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bcb0:	daf1      	bge.n	801bc96 <uxr_seq_num_cmp+0x6>
 801bcb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bcb6:	4770      	bx	lr
 801bcb8:	2000      	movs	r0, #0
 801bcba:	4770      	bx	lr
 801bcbc:	2001      	movs	r0, #1
 801bcbe:	4770      	bx	lr

0801bcc0 <rcl_get_default_domain_id>:
 801bcc0:	b530      	push	{r4, r5, lr}
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	b083      	sub	sp, #12
 801bcc6:	9300      	str	r3, [sp, #0]
 801bcc8:	b1d0      	cbz	r0, 801bd00 <rcl_get_default_domain_id+0x40>
 801bcca:	4604      	mov	r4, r0
 801bccc:	4669      	mov	r1, sp
 801bcce:	4815      	ldr	r0, [pc, #84]	@ (801bd24 <rcl_get_default_domain_id+0x64>)
 801bcd0:	f7fd ffae 	bl	8019c30 <rcutils_get_env>
 801bcd4:	4602      	mov	r2, r0
 801bcd6:	b110      	cbz	r0, 801bcde <rcl_get_default_domain_id+0x1e>
 801bcd8:	2001      	movs	r0, #1
 801bcda:	b003      	add	sp, #12
 801bcdc:	bd30      	pop	{r4, r5, pc}
 801bcde:	9b00      	ldr	r3, [sp, #0]
 801bce0:	b18b      	cbz	r3, 801bd06 <rcl_get_default_domain_id+0x46>
 801bce2:	7818      	ldrb	r0, [r3, #0]
 801bce4:	2800      	cmp	r0, #0
 801bce6:	d0f8      	beq.n	801bcda <rcl_get_default_domain_id+0x1a>
 801bce8:	a901      	add	r1, sp, #4
 801bcea:	4618      	mov	r0, r3
 801bcec:	9201      	str	r2, [sp, #4]
 801bcee:	f000 fe2d 	bl	801c94c <strtoul>
 801bcf2:	4605      	mov	r5, r0
 801bcf4:	b150      	cbz	r0, 801bd0c <rcl_get_default_domain_id+0x4c>
 801bcf6:	1c43      	adds	r3, r0, #1
 801bcf8:	d00d      	beq.n	801bd16 <rcl_get_default_domain_id+0x56>
 801bcfa:	2000      	movs	r0, #0
 801bcfc:	6025      	str	r5, [r4, #0]
 801bcfe:	e7ec      	b.n	801bcda <rcl_get_default_domain_id+0x1a>
 801bd00:	200b      	movs	r0, #11
 801bd02:	b003      	add	sp, #12
 801bd04:	bd30      	pop	{r4, r5, pc}
 801bd06:	4618      	mov	r0, r3
 801bd08:	b003      	add	sp, #12
 801bd0a:	bd30      	pop	{r4, r5, pc}
 801bd0c:	9b01      	ldr	r3, [sp, #4]
 801bd0e:	781b      	ldrb	r3, [r3, #0]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d0f2      	beq.n	801bcfa <rcl_get_default_domain_id+0x3a>
 801bd14:	e7e0      	b.n	801bcd8 <rcl_get_default_domain_id+0x18>
 801bd16:	f001 f953 	bl	801cfc0 <__errno>
 801bd1a:	6803      	ldr	r3, [r0, #0]
 801bd1c:	2b22      	cmp	r3, #34	@ 0x22
 801bd1e:	d1ec      	bne.n	801bcfa <rcl_get_default_domain_id+0x3a>
 801bd20:	e7da      	b.n	801bcd8 <rcl_get_default_domain_id+0x18>
 801bd22:	bf00      	nop
 801bd24:	0801eb80 	.word	0x0801eb80

0801bd28 <rcl_expand_topic_name>:
 801bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd2c:	b08d      	sub	sp, #52	@ 0x34
 801bd2e:	4698      	mov	r8, r3
 801bd30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bd32:	9207      	str	r2, [sp, #28]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	bf18      	it	ne
 801bd38:	f1b8 0f00 	cmpne.w	r8, #0
 801bd3c:	bf0c      	ite	eq
 801bd3e:	2301      	moveq	r3, #1
 801bd40:	2300      	movne	r3, #0
 801bd42:	2a00      	cmp	r2, #0
 801bd44:	bf08      	it	eq
 801bd46:	f043 0301 	orreq.w	r3, r3, #1
 801bd4a:	2900      	cmp	r1, #0
 801bd4c:	bf08      	it	eq
 801bd4e:	f043 0301 	orreq.w	r3, r3, #1
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d13d      	bne.n	801bdd2 <rcl_expand_topic_name+0xaa>
 801bd56:	fab0 f280 	clz	r2, r0
 801bd5a:	4604      	mov	r4, r0
 801bd5c:	0952      	lsrs	r2, r2, #5
 801bd5e:	2800      	cmp	r0, #0
 801bd60:	d037      	beq.n	801bdd2 <rcl_expand_topic_name+0xaa>
 801bd62:	460f      	mov	r7, r1
 801bd64:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd66:	f000 fa51 	bl	801c20c <rcl_validate_topic_name>
 801bd6a:	4605      	mov	r5, r0
 801bd6c:	bb68      	cbnz	r0, 801bdca <rcl_expand_topic_name+0xa2>
 801bd6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d137      	bne.n	801bde4 <rcl_expand_topic_name+0xbc>
 801bd74:	4602      	mov	r2, r0
 801bd76:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd78:	4638      	mov	r0, r7
 801bd7a:	f7fe fbbb 	bl	801a4f4 <rmw_validate_node_name>
 801bd7e:	bb68      	cbnz	r0, 801bddc <rcl_expand_topic_name+0xb4>
 801bd80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d133      	bne.n	801bdee <rcl_expand_topic_name+0xc6>
 801bd86:	462a      	mov	r2, r5
 801bd88:	a90b      	add	r1, sp, #44	@ 0x2c
 801bd8a:	9807      	ldr	r0, [sp, #28]
 801bd8c:	f7fe fb94 	bl	801a4b8 <rmw_validate_namespace>
 801bd90:	bb20      	cbnz	r0, 801bddc <rcl_expand_topic_name+0xb4>
 801bd92:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bd94:	2d00      	cmp	r5, #0
 801bd96:	f040 80a2 	bne.w	801bede <rcl_expand_topic_name+0x1b6>
 801bd9a:	217b      	movs	r1, #123	@ 0x7b
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f001 f883 	bl	801cea8 <strchr>
 801bda2:	7823      	ldrb	r3, [r4, #0]
 801bda4:	4681      	mov	r9, r0
 801bda6:	bb20      	cbnz	r0, 801bdf2 <rcl_expand_topic_name+0xca>
 801bda8:	2b2f      	cmp	r3, #47	@ 0x2f
 801bdaa:	d122      	bne.n	801bdf2 <rcl_expand_topic_name+0xca>
 801bdac:	ab19      	add	r3, sp, #100	@ 0x64
 801bdae:	e893 0003 	ldmia.w	r3, {r0, r1}
 801bdb2:	ab16      	add	r3, sp, #88	@ 0x58
 801bdb4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801bdb8:	4620      	mov	r0, r4
 801bdba:	cb0e      	ldmia	r3, {r1, r2, r3}
 801bdbc:	f7fe f89a 	bl	8019ef4 <rcutils_strdup>
 801bdc0:	2800      	cmp	r0, #0
 801bdc2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bdc4:	bf08      	it	eq
 801bdc6:	250a      	moveq	r5, #10
 801bdc8:	6018      	str	r0, [r3, #0]
 801bdca:	4628      	mov	r0, r5
 801bdcc:	b00d      	add	sp, #52	@ 0x34
 801bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd2:	250b      	movs	r5, #11
 801bdd4:	4628      	mov	r0, r5
 801bdd6:	b00d      	add	sp, #52	@ 0x34
 801bdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bddc:	f7fb f8e2 	bl	8016fa4 <rcl_convert_rmw_ret_to_rcl_ret>
 801bde0:	4605      	mov	r5, r0
 801bde2:	e7f2      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801bde4:	2567      	movs	r5, #103	@ 0x67
 801bde6:	4628      	mov	r0, r5
 801bde8:	b00d      	add	sp, #52	@ 0x34
 801bdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdee:	25c9      	movs	r5, #201	@ 0xc9
 801bdf0:	e7eb      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801bdf2:	2b7e      	cmp	r3, #126	@ 0x7e
 801bdf4:	d075      	beq.n	801bee2 <rcl_expand_topic_name+0x1ba>
 801bdf6:	f1b9 0f00 	cmp.w	r9, #0
 801bdfa:	f000 80c2 	beq.w	801bf82 <rcl_expand_topic_name+0x25a>
 801bdfe:	2300      	movs	r3, #0
 801be00:	46a2      	mov	sl, r4
 801be02:	461e      	mov	r6, r3
 801be04:	9508      	str	r5, [sp, #32]
 801be06:	4655      	mov	r5, sl
 801be08:	9409      	str	r4, [sp, #36]	@ 0x24
 801be0a:	46b2      	mov	sl, r6
 801be0c:	464c      	mov	r4, r9
 801be0e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801be12:	2c00      	cmp	r4, #0
 801be14:	f000 80ae 	beq.w	801bf74 <rcl_expand_topic_name+0x24c>
 801be18:	217d      	movs	r1, #125	@ 0x7d
 801be1a:	4628      	mov	r0, r5
 801be1c:	f001 f844 	bl	801cea8 <strchr>
 801be20:	eba0 0904 	sub.w	r9, r0, r4
 801be24:	4621      	mov	r1, r4
 801be26:	4869      	ldr	r0, [pc, #420]	@ (801bfcc <rcl_expand_topic_name+0x2a4>)
 801be28:	f109 0601 	add.w	r6, r9, #1
 801be2c:	4632      	mov	r2, r6
 801be2e:	f001 f848 	bl	801cec2 <strncmp>
 801be32:	2800      	cmp	r0, #0
 801be34:	d051      	beq.n	801beda <rcl_expand_topic_name+0x1b2>
 801be36:	4632      	mov	r2, r6
 801be38:	4621      	mov	r1, r4
 801be3a:	4865      	ldr	r0, [pc, #404]	@ (801bfd0 <rcl_expand_topic_name+0x2a8>)
 801be3c:	f001 f841 	bl	801cec2 <strncmp>
 801be40:	b128      	cbz	r0, 801be4e <rcl_expand_topic_name+0x126>
 801be42:	4632      	mov	r2, r6
 801be44:	4621      	mov	r1, r4
 801be46:	4863      	ldr	r0, [pc, #396]	@ (801bfd4 <rcl_expand_topic_name+0x2ac>)
 801be48:	f001 f83b 	bl	801cec2 <strncmp>
 801be4c:	bb38      	cbnz	r0, 801be9e <rcl_expand_topic_name+0x176>
 801be4e:	46d9      	mov	r9, fp
 801be50:	ab18      	add	r3, sp, #96	@ 0x60
 801be52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801be56:	ab16      	add	r3, sp, #88	@ 0x58
 801be58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801be5c:	4620      	mov	r0, r4
 801be5e:	4631      	mov	r1, r6
 801be60:	cb0c      	ldmia	r3, {r2, r3}
 801be62:	f7fe f869 	bl	8019f38 <rcutils_strndup>
 801be66:	4604      	mov	r4, r0
 801be68:	2800      	cmp	r0, #0
 801be6a:	f000 80a3 	beq.w	801bfb4 <rcl_expand_topic_name+0x28c>
 801be6e:	464a      	mov	r2, r9
 801be70:	4628      	mov	r0, r5
 801be72:	ab16      	add	r3, sp, #88	@ 0x58
 801be74:	4621      	mov	r1, r4
 801be76:	f7fd ff3d 	bl	8019cf4 <rcutils_repl_str>
 801be7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be7c:	4605      	mov	r5, r0
 801be7e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be80:	4620      	mov	r0, r4
 801be82:	4798      	blx	r3
 801be84:	4650      	mov	r0, sl
 801be86:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be8a:	4798      	blx	r3
 801be8c:	2d00      	cmp	r5, #0
 801be8e:	d06c      	beq.n	801bf6a <rcl_expand_topic_name+0x242>
 801be90:	217b      	movs	r1, #123	@ 0x7b
 801be92:	4628      	mov	r0, r5
 801be94:	f001 f808 	bl	801cea8 <strchr>
 801be98:	46aa      	mov	sl, r5
 801be9a:	4604      	mov	r4, r0
 801be9c:	e7b9      	b.n	801be12 <rcl_expand_topic_name+0xea>
 801be9e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801bea2:	1c61      	adds	r1, r4, #1
 801bea4:	4640      	mov	r0, r8
 801bea6:	f7fe f95f 	bl	801a168 <rcutils_string_map_getn>
 801beaa:	4681      	mov	r9, r0
 801beac:	2800      	cmp	r0, #0
 801beae:	d1cf      	bne.n	801be50 <rcl_expand_topic_name+0x128>
 801beb0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801beb2:	aa18      	add	r2, sp, #96	@ 0x60
 801beb4:	2569      	movs	r5, #105	@ 0x69
 801beb6:	6018      	str	r0, [r3, #0]
 801beb8:	ab16      	add	r3, sp, #88	@ 0x58
 801beba:	ca07      	ldmia	r2, {r0, r1, r2}
 801bebc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801bec0:	4631      	mov	r1, r6
 801bec2:	4620      	mov	r0, r4
 801bec4:	cb0c      	ldmia	r3, {r2, r3}
 801bec6:	f7fe f837 	bl	8019f38 <rcutils_strndup>
 801beca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801becc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bece:	4798      	blx	r3
 801bed0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bed4:	4650      	mov	r0, sl
 801bed6:	4798      	blx	r3
 801bed8:	e777      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801beda:	46b9      	mov	r9, r7
 801bedc:	e7b8      	b.n	801be50 <rcl_expand_topic_name+0x128>
 801bede:	25ca      	movs	r5, #202	@ 0xca
 801bee0:	e773      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801bee2:	9e07      	ldr	r6, [sp, #28]
 801bee4:	4630      	mov	r0, r6
 801bee6:	f7e4 fa05 	bl	80002f4 <strlen>
 801beea:	4a3b      	ldr	r2, [pc, #236]	@ (801bfd8 <rcl_expand_topic_name+0x2b0>)
 801beec:	4b3b      	ldr	r3, [pc, #236]	@ (801bfdc <rcl_expand_topic_name+0x2b4>)
 801beee:	9603      	str	r6, [sp, #12]
 801bef0:	2801      	cmp	r0, #1
 801bef2:	bf18      	it	ne
 801bef4:	4613      	movne	r3, r2
 801bef6:	9704      	str	r7, [sp, #16]
 801bef8:	9302      	str	r3, [sp, #8]
 801befa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801befc:	9300      	str	r3, [sp, #0]
 801befe:	1c63      	adds	r3, r4, #1
 801bf00:	9305      	str	r3, [sp, #20]
 801bf02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf06:	9301      	str	r3, [sp, #4]
 801bf08:	ab16      	add	r3, sp, #88	@ 0x58
 801bf0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf0c:	f7fd feb8 	bl	8019c80 <rcutils_format_string_limit>
 801bf10:	4606      	mov	r6, r0
 801bf12:	b350      	cbz	r0, 801bf6a <rcl_expand_topic_name+0x242>
 801bf14:	f1b9 0f00 	cmp.w	r9, #0
 801bf18:	d005      	beq.n	801bf26 <rcl_expand_topic_name+0x1fe>
 801bf1a:	217b      	movs	r1, #123	@ 0x7b
 801bf1c:	46b2      	mov	sl, r6
 801bf1e:	f000 ffc3 	bl	801cea8 <strchr>
 801bf22:	4681      	mov	r9, r0
 801bf24:	e76e      	b.n	801be04 <rcl_expand_topic_name+0xdc>
 801bf26:	7833      	ldrb	r3, [r6, #0]
 801bf28:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf2a:	d01b      	beq.n	801bf64 <rcl_expand_topic_name+0x23c>
 801bf2c:	9c07      	ldr	r4, [sp, #28]
 801bf2e:	4620      	mov	r0, r4
 801bf30:	f7e4 f9e0 	bl	80002f4 <strlen>
 801bf34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf38:	4a29      	ldr	r2, [pc, #164]	@ (801bfe0 <rcl_expand_topic_name+0x2b8>)
 801bf3a:	9301      	str	r3, [sp, #4]
 801bf3c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801bf3e:	9604      	str	r6, [sp, #16]
 801bf40:	9300      	str	r3, [sp, #0]
 801bf42:	4b28      	ldr	r3, [pc, #160]	@ (801bfe4 <rcl_expand_topic_name+0x2bc>)
 801bf44:	9403      	str	r4, [sp, #12]
 801bf46:	2801      	cmp	r0, #1
 801bf48:	bf18      	it	ne
 801bf4a:	4613      	movne	r3, r2
 801bf4c:	9302      	str	r3, [sp, #8]
 801bf4e:	ab16      	add	r3, sp, #88	@ 0x58
 801bf50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf52:	f7fd fe95 	bl	8019c80 <rcutils_format_string_limit>
 801bf56:	4603      	mov	r3, r0
 801bf58:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801bf5a:	4630      	mov	r0, r6
 801bf5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801bf5e:	461e      	mov	r6, r3
 801bf60:	4790      	blx	r2
 801bf62:	b116      	cbz	r6, 801bf6a <rcl_expand_topic_name+0x242>
 801bf64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801bf66:	601e      	str	r6, [r3, #0]
 801bf68:	e72f      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bf6e:	250a      	movs	r5, #10
 801bf70:	6013      	str	r3, [r2, #0]
 801bf72:	e72a      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801bf74:	4653      	mov	r3, sl
 801bf76:	4656      	mov	r6, sl
 801bf78:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d1d2      	bne.n	801bf26 <rcl_expand_topic_name+0x1fe>
 801bf80:	7823      	ldrb	r3, [r4, #0]
 801bf82:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf84:	d01e      	beq.n	801bfc4 <rcl_expand_topic_name+0x29c>
 801bf86:	9e07      	ldr	r6, [sp, #28]
 801bf88:	4630      	mov	r0, r6
 801bf8a:	f7e4 f9b3 	bl	80002f4 <strlen>
 801bf8e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801bf90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801bf94:	9603      	str	r6, [sp, #12]
 801bf96:	9404      	str	r4, [sp, #16]
 801bf98:	e9cd 2300 	strd	r2, r3, [sp]
 801bf9c:	4a10      	ldr	r2, [pc, #64]	@ (801bfe0 <rcl_expand_topic_name+0x2b8>)
 801bf9e:	4b11      	ldr	r3, [pc, #68]	@ (801bfe4 <rcl_expand_topic_name+0x2bc>)
 801bfa0:	2801      	cmp	r0, #1
 801bfa2:	bf18      	it	ne
 801bfa4:	4613      	movne	r3, r2
 801bfa6:	9302      	str	r3, [sp, #8]
 801bfa8:	ab16      	add	r3, sp, #88	@ 0x58
 801bfaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bfac:	f7fd fe68 	bl	8019c80 <rcutils_format_string_limit>
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	e7d6      	b.n	801bf62 <rcl_expand_topic_name+0x23a>
 801bfb4:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801bfb8:	4650      	mov	r0, sl
 801bfba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bfbc:	6014      	str	r4, [r2, #0]
 801bfbe:	250a      	movs	r5, #10
 801bfc0:	4798      	blx	r3
 801bfc2:	e702      	b.n	801bdca <rcl_expand_topic_name+0xa2>
 801bfc4:	2300      	movs	r3, #0
 801bfc6:	461e      	mov	r6, r3
 801bfc8:	e7cc      	b.n	801bf64 <rcl_expand_topic_name+0x23c>
 801bfca:	bf00      	nop
 801bfcc:	0801eb98 	.word	0x0801eb98
 801bfd0:	0801eba0 	.word	0x0801eba0
 801bfd4:	0801eba8 	.word	0x0801eba8
 801bfd8:	0801eb90 	.word	0x0801eb90
 801bfdc:	0801df88 	.word	0x0801df88
 801bfe0:	0801df50 	.word	0x0801df50
 801bfe4:	0801df98 	.word	0x0801df98

0801bfe8 <rcl_get_default_topic_name_substitutions>:
 801bfe8:	2800      	cmp	r0, #0
 801bfea:	bf0c      	ite	eq
 801bfec:	200b      	moveq	r0, #11
 801bfee:	2000      	movne	r0, #0
 801bff0:	4770      	bx	lr
 801bff2:	bf00      	nop

0801bff4 <rcl_get_zero_initialized_guard_condition>:
 801bff4:	4a03      	ldr	r2, [pc, #12]	@ (801c004 <rcl_get_zero_initialized_guard_condition+0x10>)
 801bff6:	4603      	mov	r3, r0
 801bff8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bffc:	e883 0003 	stmia.w	r3, {r0, r1}
 801c000:	4618      	mov	r0, r3
 801c002:	4770      	bx	lr
 801c004:	0801ebb4 	.word	0x0801ebb4

0801c008 <rcl_guard_condition_init>:
 801c008:	b082      	sub	sp, #8
 801c00a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c00c:	b087      	sub	sp, #28
 801c00e:	4604      	mov	r4, r0
 801c010:	460d      	mov	r5, r1
 801c012:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801c016:	f10d 0c04 	add.w	ip, sp, #4
 801c01a:	e9ce 2300 	strd	r2, r3, [lr]
 801c01e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c022:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c026:	f8de 3000 	ldr.w	r3, [lr]
 801c02a:	a801      	add	r0, sp, #4
 801c02c:	f8cc 3000 	str.w	r3, [ip]
 801c030:	f7f3 fec2 	bl	800fdb8 <rcutils_allocator_is_valid>
 801c034:	b354      	cbz	r4, 801c08c <rcl_guard_condition_init+0x84>
 801c036:	f080 0301 	eor.w	r3, r0, #1
 801c03a:	b2db      	uxtb	r3, r3
 801c03c:	bb33      	cbnz	r3, 801c08c <rcl_guard_condition_init+0x84>
 801c03e:	6866      	ldr	r6, [r4, #4]
 801c040:	b9ee      	cbnz	r6, 801c07e <rcl_guard_condition_init+0x76>
 801c042:	b31d      	cbz	r5, 801c08c <rcl_guard_condition_init+0x84>
 801c044:	4628      	mov	r0, r5
 801c046:	f7fa ffcb 	bl	8016fe0 <rcl_context_is_valid>
 801c04a:	b308      	cbz	r0, 801c090 <rcl_guard_condition_init+0x88>
 801c04c:	9b01      	ldr	r3, [sp, #4]
 801c04e:	201c      	movs	r0, #28
 801c050:	9905      	ldr	r1, [sp, #20]
 801c052:	4798      	blx	r3
 801c054:	4607      	mov	r7, r0
 801c056:	6060      	str	r0, [r4, #4]
 801c058:	b310      	cbz	r0, 801c0a0 <rcl_guard_condition_init+0x98>
 801c05a:	6828      	ldr	r0, [r5, #0]
 801c05c:	3028      	adds	r0, #40	@ 0x28
 801c05e:	f000 f999 	bl	801c394 <rmw_create_guard_condition>
 801c062:	6038      	str	r0, [r7, #0]
 801c064:	6860      	ldr	r0, [r4, #4]
 801c066:	6807      	ldr	r7, [r0, #0]
 801c068:	b1a7      	cbz	r7, 801c094 <rcl_guard_condition_init+0x8c>
 801c06a:	2301      	movs	r3, #1
 801c06c:	ac01      	add	r4, sp, #4
 801c06e:	f100 0708 	add.w	r7, r0, #8
 801c072:	7103      	strb	r3, [r0, #4]
 801c074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c076:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c078:	6823      	ldr	r3, [r4, #0]
 801c07a:	603b      	str	r3, [r7, #0]
 801c07c:	e000      	b.n	801c080 <rcl_guard_condition_init+0x78>
 801c07e:	2664      	movs	r6, #100	@ 0x64
 801c080:	4630      	mov	r0, r6
 801c082:	b007      	add	sp, #28
 801c084:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c088:	b002      	add	sp, #8
 801c08a:	4770      	bx	lr
 801c08c:	260b      	movs	r6, #11
 801c08e:	e7f7      	b.n	801c080 <rcl_guard_condition_init+0x78>
 801c090:	2665      	movs	r6, #101	@ 0x65
 801c092:	e7f5      	b.n	801c080 <rcl_guard_condition_init+0x78>
 801c094:	9b02      	ldr	r3, [sp, #8]
 801c096:	2601      	movs	r6, #1
 801c098:	9905      	ldr	r1, [sp, #20]
 801c09a:	4798      	blx	r3
 801c09c:	6067      	str	r7, [r4, #4]
 801c09e:	e7ef      	b.n	801c080 <rcl_guard_condition_init+0x78>
 801c0a0:	260a      	movs	r6, #10
 801c0a2:	e7ed      	b.n	801c080 <rcl_guard_condition_init+0x78>

0801c0a4 <rcl_guard_condition_init_from_rmw>:
 801c0a4:	b082      	sub	sp, #8
 801c0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0aa:	b086      	sub	sp, #24
 801c0ac:	4604      	mov	r4, r0
 801c0ae:	460e      	mov	r6, r1
 801c0b0:	4615      	mov	r5, r2
 801c0b2:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801c0b6:	f10d 0e04 	add.w	lr, sp, #4
 801c0ba:	f84c 3f04 	str.w	r3, [ip, #4]!
 801c0be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c0c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801c0c6:	f8dc 3000 	ldr.w	r3, [ip]
 801c0ca:	a801      	add	r0, sp, #4
 801c0cc:	f8ce 3000 	str.w	r3, [lr]
 801c0d0:	f7f3 fe72 	bl	800fdb8 <rcutils_allocator_is_valid>
 801c0d4:	f080 0301 	eor.w	r3, r0, #1
 801c0d8:	b2db      	uxtb	r3, r3
 801c0da:	bb3b      	cbnz	r3, 801c12c <rcl_guard_condition_init_from_rmw+0x88>
 801c0dc:	b334      	cbz	r4, 801c12c <rcl_guard_condition_init_from_rmw+0x88>
 801c0de:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801c0e2:	f1b8 0f00 	cmp.w	r8, #0
 801c0e6:	d11a      	bne.n	801c11e <rcl_guard_condition_init_from_rmw+0x7a>
 801c0e8:	b305      	cbz	r5, 801c12c <rcl_guard_condition_init_from_rmw+0x88>
 801c0ea:	4628      	mov	r0, r5
 801c0ec:	f7fa ff78 	bl	8016fe0 <rcl_context_is_valid>
 801c0f0:	b1f0      	cbz	r0, 801c130 <rcl_guard_condition_init_from_rmw+0x8c>
 801c0f2:	9b01      	ldr	r3, [sp, #4]
 801c0f4:	201c      	movs	r0, #28
 801c0f6:	9905      	ldr	r1, [sp, #20]
 801c0f8:	4798      	blx	r3
 801c0fa:	4607      	mov	r7, r0
 801c0fc:	6060      	str	r0, [r4, #4]
 801c0fe:	b320      	cbz	r0, 801c14a <rcl_guard_condition_init_from_rmw+0xa6>
 801c100:	b1c6      	cbz	r6, 801c134 <rcl_guard_condition_init_from_rmw+0x90>
 801c102:	6006      	str	r6, [r0, #0]
 801c104:	f880 8004 	strb.w	r8, [r0, #4]
 801c108:	ac01      	add	r4, sp, #4
 801c10a:	f107 0c08 	add.w	ip, r7, #8
 801c10e:	2500      	movs	r5, #0
 801c110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c112:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c116:	6823      	ldr	r3, [r4, #0]
 801c118:	f8cc 3000 	str.w	r3, [ip]
 801c11c:	e000      	b.n	801c120 <rcl_guard_condition_init_from_rmw+0x7c>
 801c11e:	2564      	movs	r5, #100	@ 0x64
 801c120:	4628      	mov	r0, r5
 801c122:	b006      	add	sp, #24
 801c124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c128:	b002      	add	sp, #8
 801c12a:	4770      	bx	lr
 801c12c:	250b      	movs	r5, #11
 801c12e:	e7f7      	b.n	801c120 <rcl_guard_condition_init_from_rmw+0x7c>
 801c130:	2565      	movs	r5, #101	@ 0x65
 801c132:	e7f5      	b.n	801c120 <rcl_guard_condition_init_from_rmw+0x7c>
 801c134:	6828      	ldr	r0, [r5, #0]
 801c136:	3028      	adds	r0, #40	@ 0x28
 801c138:	f000 f92c 	bl	801c394 <rmw_create_guard_condition>
 801c13c:	6038      	str	r0, [r7, #0]
 801c13e:	6867      	ldr	r7, [r4, #4]
 801c140:	683e      	ldr	r6, [r7, #0]
 801c142:	b126      	cbz	r6, 801c14e <rcl_guard_condition_init_from_rmw+0xaa>
 801c144:	2301      	movs	r3, #1
 801c146:	713b      	strb	r3, [r7, #4]
 801c148:	e7de      	b.n	801c108 <rcl_guard_condition_init_from_rmw+0x64>
 801c14a:	250a      	movs	r5, #10
 801c14c:	e7e8      	b.n	801c120 <rcl_guard_condition_init_from_rmw+0x7c>
 801c14e:	9b02      	ldr	r3, [sp, #8]
 801c150:	4638      	mov	r0, r7
 801c152:	9905      	ldr	r1, [sp, #20]
 801c154:	2501      	movs	r5, #1
 801c156:	4798      	blx	r3
 801c158:	6066      	str	r6, [r4, #4]
 801c15a:	e7e1      	b.n	801c120 <rcl_guard_condition_init_from_rmw+0x7c>

0801c15c <rcl_guard_condition_fini>:
 801c15c:	b570      	push	{r4, r5, r6, lr}
 801c15e:	b082      	sub	sp, #8
 801c160:	b1f0      	cbz	r0, 801c1a0 <rcl_guard_condition_fini+0x44>
 801c162:	6843      	ldr	r3, [r0, #4]
 801c164:	4604      	mov	r4, r0
 801c166:	b163      	cbz	r3, 801c182 <rcl_guard_condition_fini+0x26>
 801c168:	6818      	ldr	r0, [r3, #0]
 801c16a:	68de      	ldr	r6, [r3, #12]
 801c16c:	6999      	ldr	r1, [r3, #24]
 801c16e:	b160      	cbz	r0, 801c18a <rcl_guard_condition_fini+0x2e>
 801c170:	791d      	ldrb	r5, [r3, #4]
 801c172:	b965      	cbnz	r5, 801c18e <rcl_guard_condition_fini+0x32>
 801c174:	4618      	mov	r0, r3
 801c176:	47b0      	blx	r6
 801c178:	2300      	movs	r3, #0
 801c17a:	4628      	mov	r0, r5
 801c17c:	6063      	str	r3, [r4, #4]
 801c17e:	b002      	add	sp, #8
 801c180:	bd70      	pop	{r4, r5, r6, pc}
 801c182:	461d      	mov	r5, r3
 801c184:	4628      	mov	r0, r5
 801c186:	b002      	add	sp, #8
 801c188:	bd70      	pop	{r4, r5, r6, pc}
 801c18a:	4605      	mov	r5, r0
 801c18c:	e7f2      	b.n	801c174 <rcl_guard_condition_fini+0x18>
 801c18e:	9101      	str	r1, [sp, #4]
 801c190:	f000 f916 	bl	801c3c0 <rmw_destroy_guard_condition>
 801c194:	1e05      	subs	r5, r0, #0
 801c196:	6863      	ldr	r3, [r4, #4]
 801c198:	9901      	ldr	r1, [sp, #4]
 801c19a:	bf18      	it	ne
 801c19c:	2501      	movne	r5, #1
 801c19e:	e7e9      	b.n	801c174 <rcl_guard_condition_fini+0x18>
 801c1a0:	250b      	movs	r5, #11
 801c1a2:	4628      	mov	r0, r5
 801c1a4:	b002      	add	sp, #8
 801c1a6:	bd70      	pop	{r4, r5, r6, pc}

0801c1a8 <rcl_guard_condition_get_default_options>:
 801c1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1aa:	b087      	sub	sp, #28
 801c1ac:	4606      	mov	r6, r0
 801c1ae:	4c0b      	ldr	r4, [pc, #44]	@ (801c1dc <rcl_guard_condition_get_default_options+0x34>)
 801c1b0:	4668      	mov	r0, sp
 801c1b2:	f7f3 fdf3 	bl	800fd9c <rcutils_get_default_allocator>
 801c1b6:	46ee      	mov	lr, sp
 801c1b8:	46a4      	mov	ip, r4
 801c1ba:	4625      	mov	r5, r4
 801c1bc:	4634      	mov	r4, r6
 801c1be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c1c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c1c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1c8:	f8de 7000 	ldr.w	r7, [lr]
 801c1cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c1ce:	4630      	mov	r0, r6
 801c1d0:	f8cc 7000 	str.w	r7, [ip]
 801c1d4:	6027      	str	r7, [r4, #0]
 801c1d6:	b007      	add	sp, #28
 801c1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1da:	bf00      	nop
 801c1dc:	24013b18 	.word	0x24013b18

0801c1e0 <rcl_trigger_guard_condition>:
 801c1e0:	b148      	cbz	r0, 801c1f6 <rcl_trigger_guard_condition+0x16>
 801c1e2:	b508      	push	{r3, lr}
 801c1e4:	6843      	ldr	r3, [r0, #4]
 801c1e6:	b143      	cbz	r3, 801c1fa <rcl_trigger_guard_condition+0x1a>
 801c1e8:	6818      	ldr	r0, [r3, #0]
 801c1ea:	f000 f8fd 	bl	801c3e8 <rmw_trigger_guard_condition>
 801c1ee:	3800      	subs	r0, #0
 801c1f0:	bf18      	it	ne
 801c1f2:	2001      	movne	r0, #1
 801c1f4:	bd08      	pop	{r3, pc}
 801c1f6:	200b      	movs	r0, #11
 801c1f8:	4770      	bx	lr
 801c1fa:	200b      	movs	r0, #11
 801c1fc:	bd08      	pop	{r3, pc}
 801c1fe:	bf00      	nop

0801c200 <rcl_guard_condition_get_rmw_handle>:
 801c200:	b110      	cbz	r0, 801c208 <rcl_guard_condition_get_rmw_handle+0x8>
 801c202:	6840      	ldr	r0, [r0, #4]
 801c204:	b100      	cbz	r0, 801c208 <rcl_guard_condition_get_rmw_handle+0x8>
 801c206:	6800      	ldr	r0, [r0, #0]
 801c208:	4770      	bx	lr
 801c20a:	bf00      	nop

0801c20c <rcl_validate_topic_name>:
 801c20c:	2800      	cmp	r0, #0
 801c20e:	f000 8089 	beq.w	801c324 <rcl_validate_topic_name+0x118>
 801c212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c216:	460e      	mov	r6, r1
 801c218:	2900      	cmp	r1, #0
 801c21a:	f000 8085 	beq.w	801c328 <rcl_validate_topic_name+0x11c>
 801c21e:	4604      	mov	r4, r0
 801c220:	4617      	mov	r7, r2
 801c222:	f7e4 f867 	bl	80002f4 <strlen>
 801c226:	b1b0      	cbz	r0, 801c256 <rcl_validate_topic_name+0x4a>
 801c228:	f894 e000 	ldrb.w	lr, [r4]
 801c22c:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801c390 <rcl_validate_topic_name+0x184>
 801c230:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801c234:	f013 0304 	ands.w	r3, r3, #4
 801c238:	d139      	bne.n	801c2ae <rcl_validate_topic_name+0xa2>
 801c23a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801c23e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801c242:	2a2f      	cmp	r2, #47	@ 0x2f
 801c244:	d10f      	bne.n	801c266 <rcl_validate_topic_name+0x5a>
 801c246:	2202      	movs	r2, #2
 801c248:	6032      	str	r2, [r6, #0]
 801c24a:	b3a7      	cbz	r7, 801c2b6 <rcl_validate_topic_name+0xaa>
 801c24c:	4618      	mov	r0, r3
 801c24e:	f8c7 8000 	str.w	r8, [r7]
 801c252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c256:	2301      	movs	r3, #1
 801c258:	6033      	str	r3, [r6, #0]
 801c25a:	b367      	cbz	r7, 801c2b6 <rcl_validate_topic_name+0xaa>
 801c25c:	2300      	movs	r3, #0
 801c25e:	4618      	mov	r0, r3
 801c260:	603b      	str	r3, [r7, #0]
 801c262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c266:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801c26a:	461d      	mov	r5, r3
 801c26c:	4619      	mov	r1, r3
 801c26e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801c272:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801c276:	f1b9 0f09 	cmp.w	r9, #9
 801c27a:	d91f      	bls.n	801c2bc <rcl_validate_topic_name+0xb0>
 801c27c:	f022 0920 	bic.w	r9, r2, #32
 801c280:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801c284:	f1b9 0f19 	cmp.w	r9, #25
 801c288:	d918      	bls.n	801c2bc <rcl_validate_topic_name+0xb0>
 801c28a:	2a5f      	cmp	r2, #95	@ 0x5f
 801c28c:	d024      	beq.n	801c2d8 <rcl_validate_topic_name+0xcc>
 801c28e:	2a2f      	cmp	r2, #47	@ 0x2f
 801c290:	d058      	beq.n	801c344 <rcl_validate_topic_name+0x138>
 801c292:	2a7e      	cmp	r2, #126	@ 0x7e
 801c294:	d04a      	beq.n	801c32c <rcl_validate_topic_name+0x120>
 801c296:	2a7b      	cmp	r2, #123	@ 0x7b
 801c298:	d05b      	beq.n	801c352 <rcl_validate_topic_name+0x146>
 801c29a:	2a7d      	cmp	r2, #125	@ 0x7d
 801c29c:	d169      	bne.n	801c372 <rcl_validate_topic_name+0x166>
 801c29e:	2d00      	cmp	r5, #0
 801c2a0:	d15c      	bne.n	801c35c <rcl_validate_topic_name+0x150>
 801c2a2:	2305      	movs	r3, #5
 801c2a4:	6033      	str	r3, [r6, #0]
 801c2a6:	b137      	cbz	r7, 801c2b6 <rcl_validate_topic_name+0xaa>
 801c2a8:	2000      	movs	r0, #0
 801c2aa:	6039      	str	r1, [r7, #0]
 801c2ac:	e7d9      	b.n	801c262 <rcl_validate_topic_name+0x56>
 801c2ae:	2304      	movs	r3, #4
 801c2b0:	6033      	str	r3, [r6, #0]
 801c2b2:	2f00      	cmp	r7, #0
 801c2b4:	d1d2      	bne.n	801c25c <rcl_validate_topic_name+0x50>
 801c2b6:	2000      	movs	r0, #0
 801c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c2c0:	0752      	lsls	r2, r2, #29
 801c2c2:	d509      	bpl.n	801c2d8 <rcl_validate_topic_name+0xcc>
 801c2c4:	2900      	cmp	r1, #0
 801c2c6:	bf0c      	ite	eq
 801c2c8:	2200      	moveq	r2, #0
 801c2ca:	f005 0201 	andne.w	r2, r5, #1
 801c2ce:	b11a      	cbz	r2, 801c2d8 <rcl_validate_topic_name+0xcc>
 801c2d0:	1e4d      	subs	r5, r1, #1
 801c2d2:	429d      	cmp	r5, r3
 801c2d4:	d031      	beq.n	801c33a <rcl_validate_topic_name+0x12e>
 801c2d6:	4615      	mov	r5, r2
 801c2d8:	3101      	adds	r1, #1
 801c2da:	4288      	cmp	r0, r1
 801c2dc:	d1c7      	bne.n	801c26e <rcl_validate_topic_name+0x62>
 801c2de:	2d00      	cmp	r5, #0
 801c2e0:	d142      	bne.n	801c368 <rcl_validate_topic_name+0x15c>
 801c2e2:	4628      	mov	r0, r5
 801c2e4:	2301      	movs	r3, #1
 801c2e6:	e00c      	b.n	801c302 <rcl_validate_topic_name+0xf6>
 801c2e8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801c2ec:	d101      	bne.n	801c2f2 <rcl_validate_topic_name+0xe6>
 801c2ee:	2801      	cmp	r0, #1
 801c2f0:	d047      	beq.n	801c382 <rcl_validate_topic_name+0x176>
 801c2f2:	1c5a      	adds	r2, r3, #1
 801c2f4:	428b      	cmp	r3, r1
 801c2f6:	f100 0001 	add.w	r0, r0, #1
 801c2fa:	f104 0401 	add.w	r4, r4, #1
 801c2fe:	4613      	mov	r3, r2
 801c300:	d22e      	bcs.n	801c360 <rcl_validate_topic_name+0x154>
 801c302:	4580      	cmp	r8, r0
 801c304:	d0f5      	beq.n	801c2f2 <rcl_validate_topic_name+0xe6>
 801c306:	7822      	ldrb	r2, [r4, #0]
 801c308:	2a2f      	cmp	r2, #47	@ 0x2f
 801c30a:	d1ed      	bne.n	801c2e8 <rcl_validate_topic_name+0xdc>
 801c30c:	7862      	ldrb	r2, [r4, #1]
 801c30e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c312:	0752      	lsls	r2, r2, #29
 801c314:	d5ed      	bpl.n	801c2f2 <rcl_validate_topic_name+0xe6>
 801c316:	2204      	movs	r2, #4
 801c318:	6032      	str	r2, [r6, #0]
 801c31a:	2f00      	cmp	r7, #0
 801c31c:	d0cb      	beq.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c31e:	2000      	movs	r0, #0
 801c320:	603b      	str	r3, [r7, #0]
 801c322:	e79e      	b.n	801c262 <rcl_validate_topic_name+0x56>
 801c324:	200b      	movs	r0, #11
 801c326:	4770      	bx	lr
 801c328:	200b      	movs	r0, #11
 801c32a:	e79a      	b.n	801c262 <rcl_validate_topic_name+0x56>
 801c32c:	2900      	cmp	r1, #0
 801c32e:	d0d3      	beq.n	801c2d8 <rcl_validate_topic_name+0xcc>
 801c330:	2306      	movs	r3, #6
 801c332:	6033      	str	r3, [r6, #0]
 801c334:	2f00      	cmp	r7, #0
 801c336:	d1b7      	bne.n	801c2a8 <rcl_validate_topic_name+0x9c>
 801c338:	e7bd      	b.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c33a:	2309      	movs	r3, #9
 801c33c:	6033      	str	r3, [r6, #0]
 801c33e:	2f00      	cmp	r7, #0
 801c340:	d1b2      	bne.n	801c2a8 <rcl_validate_topic_name+0x9c>
 801c342:	e7b8      	b.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c344:	2d00      	cmp	r5, #0
 801c346:	d0c7      	beq.n	801c2d8 <rcl_validate_topic_name+0xcc>
 801c348:	2308      	movs	r3, #8
 801c34a:	6033      	str	r3, [r6, #0]
 801c34c:	2f00      	cmp	r7, #0
 801c34e:	d1ab      	bne.n	801c2a8 <rcl_validate_topic_name+0x9c>
 801c350:	e7b1      	b.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c352:	2d00      	cmp	r5, #0
 801c354:	d1f8      	bne.n	801c348 <rcl_validate_topic_name+0x13c>
 801c356:	460b      	mov	r3, r1
 801c358:	2501      	movs	r5, #1
 801c35a:	e7bd      	b.n	801c2d8 <rcl_validate_topic_name+0xcc>
 801c35c:	2500      	movs	r5, #0
 801c35e:	e7bb      	b.n	801c2d8 <rcl_validate_topic_name+0xcc>
 801c360:	2300      	movs	r3, #0
 801c362:	4618      	mov	r0, r3
 801c364:	6033      	str	r3, [r6, #0]
 801c366:	e77c      	b.n	801c262 <rcl_validate_topic_name+0x56>
 801c368:	2205      	movs	r2, #5
 801c36a:	6032      	str	r2, [r6, #0]
 801c36c:	2f00      	cmp	r7, #0
 801c36e:	d1d6      	bne.n	801c31e <rcl_validate_topic_name+0x112>
 801c370:	e7a1      	b.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c372:	2d00      	cmp	r5, #0
 801c374:	bf14      	ite	ne
 801c376:	2308      	movne	r3, #8
 801c378:	2303      	moveq	r3, #3
 801c37a:	6033      	str	r3, [r6, #0]
 801c37c:	2f00      	cmp	r7, #0
 801c37e:	d193      	bne.n	801c2a8 <rcl_validate_topic_name+0x9c>
 801c380:	e799      	b.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c382:	2307      	movs	r3, #7
 801c384:	6033      	str	r3, [r6, #0]
 801c386:	2f00      	cmp	r7, #0
 801c388:	d095      	beq.n	801c2b6 <rcl_validate_topic_name+0xaa>
 801c38a:	2301      	movs	r3, #1
 801c38c:	e7c7      	b.n	801c31e <rcl_validate_topic_name+0x112>
 801c38e:	bf00      	nop
 801c390:	0801ed1e 	.word	0x0801ed1e

0801c394 <rmw_create_guard_condition>:
 801c394:	b538      	push	{r3, r4, r5, lr}
 801c396:	4605      	mov	r5, r0
 801c398:	4808      	ldr	r0, [pc, #32]	@ (801c3bc <rmw_create_guard_condition+0x28>)
 801c39a:	f7fe f9f3 	bl	801a784 <get_memory>
 801c39e:	4603      	mov	r3, r0
 801c3a0:	b148      	cbz	r0, 801c3b6 <rmw_create_guard_condition+0x22>
 801c3a2:	6884      	ldr	r4, [r0, #8]
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	61e5      	str	r5, [r4, #28]
 801c3a8:	7423      	strb	r3, [r4, #16]
 801c3aa:	f7fe fa53 	bl	801a854 <rmw_get_implementation_identifier>
 801c3ae:	f104 0314 	add.w	r3, r4, #20
 801c3b2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	bd38      	pop	{r3, r4, r5, pc}
 801c3ba:	bf00      	nop
 801c3bc:	240139b4 	.word	0x240139b4

0801c3c0 <rmw_destroy_guard_condition>:
 801c3c0:	b508      	push	{r3, lr}
 801c3c2:	4b08      	ldr	r3, [pc, #32]	@ (801c3e4 <rmw_destroy_guard_condition+0x24>)
 801c3c4:	6819      	ldr	r1, [r3, #0]
 801c3c6:	b911      	cbnz	r1, 801c3ce <rmw_destroy_guard_condition+0xe>
 801c3c8:	e00a      	b.n	801c3e0 <rmw_destroy_guard_condition+0x20>
 801c3ca:	6849      	ldr	r1, [r1, #4]
 801c3cc:	b141      	cbz	r1, 801c3e0 <rmw_destroy_guard_condition+0x20>
 801c3ce:	688b      	ldr	r3, [r1, #8]
 801c3d0:	3314      	adds	r3, #20
 801c3d2:	4298      	cmp	r0, r3
 801c3d4:	d1f9      	bne.n	801c3ca <rmw_destroy_guard_condition+0xa>
 801c3d6:	4803      	ldr	r0, [pc, #12]	@ (801c3e4 <rmw_destroy_guard_condition+0x24>)
 801c3d8:	f7fe f9e4 	bl	801a7a4 <put_memory>
 801c3dc:	2000      	movs	r0, #0
 801c3de:	bd08      	pop	{r3, pc}
 801c3e0:	2001      	movs	r0, #1
 801c3e2:	bd08      	pop	{r3, pc}
 801c3e4:	240139b4 	.word	0x240139b4

0801c3e8 <rmw_trigger_guard_condition>:
 801c3e8:	b160      	cbz	r0, 801c404 <rmw_trigger_guard_condition+0x1c>
 801c3ea:	b510      	push	{r4, lr}
 801c3ec:	4604      	mov	r4, r0
 801c3ee:	6800      	ldr	r0, [r0, #0]
 801c3f0:	f7f4 ff02 	bl	80111f8 <is_uxrce_rmw_identifier_valid>
 801c3f4:	b908      	cbnz	r0, 801c3fa <rmw_trigger_guard_condition+0x12>
 801c3f6:	2001      	movs	r0, #1
 801c3f8:	bd10      	pop	{r4, pc}
 801c3fa:	6863      	ldr	r3, [r4, #4]
 801c3fc:	2201      	movs	r2, #1
 801c3fe:	2000      	movs	r0, #0
 801c400:	741a      	strb	r2, [r3, #16]
 801c402:	bd10      	pop	{r4, pc}
 801c404:	2001      	movs	r0, #1
 801c406:	4770      	bx	lr

0801c408 <rosidl_runtime_c__String__init>:
 801c408:	b510      	push	{r4, lr}
 801c40a:	4604      	mov	r4, r0
 801c40c:	b086      	sub	sp, #24
 801c40e:	b170      	cbz	r0, 801c42e <rosidl_runtime_c__String__init+0x26>
 801c410:	a801      	add	r0, sp, #4
 801c412:	f7f3 fcc3 	bl	800fd9c <rcutils_get_default_allocator>
 801c416:	9b01      	ldr	r3, [sp, #4]
 801c418:	9905      	ldr	r1, [sp, #20]
 801c41a:	2001      	movs	r0, #1
 801c41c:	4798      	blx	r3
 801c41e:	6020      	str	r0, [r4, #0]
 801c420:	b128      	cbz	r0, 801c42e <rosidl_runtime_c__String__init+0x26>
 801c422:	2100      	movs	r1, #0
 801c424:	2201      	movs	r2, #1
 801c426:	7001      	strb	r1, [r0, #0]
 801c428:	4610      	mov	r0, r2
 801c42a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801c42e:	b006      	add	sp, #24
 801c430:	bd10      	pop	{r4, pc}
 801c432:	bf00      	nop

0801c434 <rosidl_runtime_c__String__fini>:
 801c434:	b320      	cbz	r0, 801c480 <rosidl_runtime_c__String__fini+0x4c>
 801c436:	6803      	ldr	r3, [r0, #0]
 801c438:	b510      	push	{r4, lr}
 801c43a:	4604      	mov	r4, r0
 801c43c:	b086      	sub	sp, #24
 801c43e:	b173      	cbz	r3, 801c45e <rosidl_runtime_c__String__fini+0x2a>
 801c440:	6883      	ldr	r3, [r0, #8]
 801c442:	b1f3      	cbz	r3, 801c482 <rosidl_runtime_c__String__fini+0x4e>
 801c444:	a801      	add	r0, sp, #4
 801c446:	f7f3 fca9 	bl	800fd9c <rcutils_get_default_allocator>
 801c44a:	9b02      	ldr	r3, [sp, #8]
 801c44c:	9905      	ldr	r1, [sp, #20]
 801c44e:	6820      	ldr	r0, [r4, #0]
 801c450:	4798      	blx	r3
 801c452:	2300      	movs	r3, #0
 801c454:	e9c4 3300 	strd	r3, r3, [r4]
 801c458:	60a3      	str	r3, [r4, #8]
 801c45a:	b006      	add	sp, #24
 801c45c:	bd10      	pop	{r4, pc}
 801c45e:	6843      	ldr	r3, [r0, #4]
 801c460:	b9db      	cbnz	r3, 801c49a <rosidl_runtime_c__String__fini+0x66>
 801c462:	6883      	ldr	r3, [r0, #8]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d0f8      	beq.n	801c45a <rosidl_runtime_c__String__fini+0x26>
 801c468:	4b12      	ldr	r3, [pc, #72]	@ (801c4b4 <rosidl_runtime_c__String__fini+0x80>)
 801c46a:	2251      	movs	r2, #81	@ 0x51
 801c46c:	2101      	movs	r1, #1
 801c46e:	4812      	ldr	r0, [pc, #72]	@ (801c4b8 <rosidl_runtime_c__String__fini+0x84>)
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	68db      	ldr	r3, [r3, #12]
 801c474:	f000 fb82 	bl	801cb7c <fwrite>
 801c478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c47c:	f000 f83e 	bl	801c4fc <exit>
 801c480:	4770      	bx	lr
 801c482:	4b0c      	ldr	r3, [pc, #48]	@ (801c4b4 <rosidl_runtime_c__String__fini+0x80>)
 801c484:	224c      	movs	r2, #76	@ 0x4c
 801c486:	2101      	movs	r1, #1
 801c488:	480c      	ldr	r0, [pc, #48]	@ (801c4bc <rosidl_runtime_c__String__fini+0x88>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	68db      	ldr	r3, [r3, #12]
 801c48e:	f000 fb75 	bl	801cb7c <fwrite>
 801c492:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c496:	f000 f831 	bl	801c4fc <exit>
 801c49a:	4b06      	ldr	r3, [pc, #24]	@ (801c4b4 <rosidl_runtime_c__String__fini+0x80>)
 801c49c:	224e      	movs	r2, #78	@ 0x4e
 801c49e:	2101      	movs	r1, #1
 801c4a0:	4807      	ldr	r0, [pc, #28]	@ (801c4c0 <rosidl_runtime_c__String__fini+0x8c>)
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	68db      	ldr	r3, [r3, #12]
 801c4a6:	f000 fb69 	bl	801cb7c <fwrite>
 801c4aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c4ae:	f000 f825 	bl	801c4fc <exit>
 801c4b2:	bf00      	nop
 801c4b4:	2400068c 	.word	0x2400068c
 801c4b8:	0801ec5c 	.word	0x0801ec5c
 801c4bc:	0801ebbc 	.word	0x0801ebbc
 801c4c0:	0801ec0c 	.word	0x0801ec0c

0801c4c4 <calloc>:
 801c4c4:	4b02      	ldr	r3, [pc, #8]	@ (801c4d0 <calloc+0xc>)
 801c4c6:	460a      	mov	r2, r1
 801c4c8:	4601      	mov	r1, r0
 801c4ca:	6818      	ldr	r0, [r3, #0]
 801c4cc:	f000 b802 	b.w	801c4d4 <_calloc_r>
 801c4d0:	2400068c 	.word	0x2400068c

0801c4d4 <_calloc_r>:
 801c4d4:	b570      	push	{r4, r5, r6, lr}
 801c4d6:	fba1 5402 	umull	r5, r4, r1, r2
 801c4da:	b93c      	cbnz	r4, 801c4ec <_calloc_r+0x18>
 801c4dc:	4629      	mov	r1, r5
 801c4de:	f000 f899 	bl	801c614 <_malloc_r>
 801c4e2:	4606      	mov	r6, r0
 801c4e4:	b928      	cbnz	r0, 801c4f2 <_calloc_r+0x1e>
 801c4e6:	2600      	movs	r6, #0
 801c4e8:	4630      	mov	r0, r6
 801c4ea:	bd70      	pop	{r4, r5, r6, pc}
 801c4ec:	220c      	movs	r2, #12
 801c4ee:	6002      	str	r2, [r0, #0]
 801c4f0:	e7f9      	b.n	801c4e6 <_calloc_r+0x12>
 801c4f2:	462a      	mov	r2, r5
 801c4f4:	4621      	mov	r1, r4
 801c4f6:	f000 fccf 	bl	801ce98 <memset>
 801c4fa:	e7f5      	b.n	801c4e8 <_calloc_r+0x14>

0801c4fc <exit>:
 801c4fc:	b508      	push	{r3, lr}
 801c4fe:	4b06      	ldr	r3, [pc, #24]	@ (801c518 <exit+0x1c>)
 801c500:	4604      	mov	r4, r0
 801c502:	b113      	cbz	r3, 801c50a <exit+0xe>
 801c504:	2100      	movs	r1, #0
 801c506:	f3af 8000 	nop.w
 801c50a:	4b04      	ldr	r3, [pc, #16]	@ (801c51c <exit+0x20>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	b103      	cbz	r3, 801c512 <exit+0x16>
 801c510:	4798      	blx	r3
 801c512:	4620      	mov	r0, r4
 801c514:	f7e5 fcba 	bl	8001e8c <_exit>
 801c518:	00000000 	.word	0x00000000
 801c51c:	24013c6c 	.word	0x24013c6c

0801c520 <getenv>:
 801c520:	b507      	push	{r0, r1, r2, lr}
 801c522:	4b04      	ldr	r3, [pc, #16]	@ (801c534 <getenv+0x14>)
 801c524:	4601      	mov	r1, r0
 801c526:	aa01      	add	r2, sp, #4
 801c528:	6818      	ldr	r0, [r3, #0]
 801c52a:	f000 f805 	bl	801c538 <_findenv_r>
 801c52e:	b003      	add	sp, #12
 801c530:	f85d fb04 	ldr.w	pc, [sp], #4
 801c534:	2400068c 	.word	0x2400068c

0801c538 <_findenv_r>:
 801c538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c53c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c5ac <_findenv_r+0x74>
 801c540:	4606      	mov	r6, r0
 801c542:	4689      	mov	r9, r1
 801c544:	4617      	mov	r7, r2
 801c546:	f000 fd9d 	bl	801d084 <__env_lock>
 801c54a:	f8da 4000 	ldr.w	r4, [sl]
 801c54e:	b134      	cbz	r4, 801c55e <_findenv_r+0x26>
 801c550:	464b      	mov	r3, r9
 801c552:	4698      	mov	r8, r3
 801c554:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c558:	b13a      	cbz	r2, 801c56a <_findenv_r+0x32>
 801c55a:	2a3d      	cmp	r2, #61	@ 0x3d
 801c55c:	d1f9      	bne.n	801c552 <_findenv_r+0x1a>
 801c55e:	4630      	mov	r0, r6
 801c560:	f000 fd96 	bl	801d090 <__env_unlock>
 801c564:	2000      	movs	r0, #0
 801c566:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c56a:	eba8 0809 	sub.w	r8, r8, r9
 801c56e:	46a3      	mov	fp, r4
 801c570:	f854 0b04 	ldr.w	r0, [r4], #4
 801c574:	2800      	cmp	r0, #0
 801c576:	d0f2      	beq.n	801c55e <_findenv_r+0x26>
 801c578:	4642      	mov	r2, r8
 801c57a:	4649      	mov	r1, r9
 801c57c:	f000 fca1 	bl	801cec2 <strncmp>
 801c580:	2800      	cmp	r0, #0
 801c582:	d1f4      	bne.n	801c56e <_findenv_r+0x36>
 801c584:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c588:	eb03 0508 	add.w	r5, r3, r8
 801c58c:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c590:	2b3d      	cmp	r3, #61	@ 0x3d
 801c592:	d1ec      	bne.n	801c56e <_findenv_r+0x36>
 801c594:	f8da 3000 	ldr.w	r3, [sl]
 801c598:	ebab 0303 	sub.w	r3, fp, r3
 801c59c:	109b      	asrs	r3, r3, #2
 801c59e:	4630      	mov	r0, r6
 801c5a0:	603b      	str	r3, [r7, #0]
 801c5a2:	f000 fd75 	bl	801d090 <__env_unlock>
 801c5a6:	1c68      	adds	r0, r5, #1
 801c5a8:	e7dd      	b.n	801c566 <_findenv_r+0x2e>
 801c5aa:	bf00      	nop
 801c5ac:	24000008 	.word	0x24000008

0801c5b0 <malloc>:
 801c5b0:	4b02      	ldr	r3, [pc, #8]	@ (801c5bc <malloc+0xc>)
 801c5b2:	4601      	mov	r1, r0
 801c5b4:	6818      	ldr	r0, [r3, #0]
 801c5b6:	f000 b82d 	b.w	801c614 <_malloc_r>
 801c5ba:	bf00      	nop
 801c5bc:	2400068c 	.word	0x2400068c

0801c5c0 <free>:
 801c5c0:	4b02      	ldr	r3, [pc, #8]	@ (801c5cc <free+0xc>)
 801c5c2:	4601      	mov	r1, r0
 801c5c4:	6818      	ldr	r0, [r3, #0]
 801c5c6:	f000 bd69 	b.w	801d09c <_free_r>
 801c5ca:	bf00      	nop
 801c5cc:	2400068c 	.word	0x2400068c

0801c5d0 <sbrk_aligned>:
 801c5d0:	b570      	push	{r4, r5, r6, lr}
 801c5d2:	4e0f      	ldr	r6, [pc, #60]	@ (801c610 <sbrk_aligned+0x40>)
 801c5d4:	460c      	mov	r4, r1
 801c5d6:	6831      	ldr	r1, [r6, #0]
 801c5d8:	4605      	mov	r5, r0
 801c5da:	b911      	cbnz	r1, 801c5e2 <sbrk_aligned+0x12>
 801c5dc:	f000 fcce 	bl	801cf7c <_sbrk_r>
 801c5e0:	6030      	str	r0, [r6, #0]
 801c5e2:	4621      	mov	r1, r4
 801c5e4:	4628      	mov	r0, r5
 801c5e6:	f000 fcc9 	bl	801cf7c <_sbrk_r>
 801c5ea:	1c43      	adds	r3, r0, #1
 801c5ec:	d103      	bne.n	801c5f6 <sbrk_aligned+0x26>
 801c5ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c5f2:	4620      	mov	r0, r4
 801c5f4:	bd70      	pop	{r4, r5, r6, pc}
 801c5f6:	1cc4      	adds	r4, r0, #3
 801c5f8:	f024 0403 	bic.w	r4, r4, #3
 801c5fc:	42a0      	cmp	r0, r4
 801c5fe:	d0f8      	beq.n	801c5f2 <sbrk_aligned+0x22>
 801c600:	1a21      	subs	r1, r4, r0
 801c602:	4628      	mov	r0, r5
 801c604:	f000 fcba 	bl	801cf7c <_sbrk_r>
 801c608:	3001      	adds	r0, #1
 801c60a:	d1f2      	bne.n	801c5f2 <sbrk_aligned+0x22>
 801c60c:	e7ef      	b.n	801c5ee <sbrk_aligned+0x1e>
 801c60e:	bf00      	nop
 801c610:	24013b2c 	.word	0x24013b2c

0801c614 <_malloc_r>:
 801c614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c618:	1ccd      	adds	r5, r1, #3
 801c61a:	f025 0503 	bic.w	r5, r5, #3
 801c61e:	3508      	adds	r5, #8
 801c620:	2d0c      	cmp	r5, #12
 801c622:	bf38      	it	cc
 801c624:	250c      	movcc	r5, #12
 801c626:	2d00      	cmp	r5, #0
 801c628:	4606      	mov	r6, r0
 801c62a:	db01      	blt.n	801c630 <_malloc_r+0x1c>
 801c62c:	42a9      	cmp	r1, r5
 801c62e:	d904      	bls.n	801c63a <_malloc_r+0x26>
 801c630:	230c      	movs	r3, #12
 801c632:	6033      	str	r3, [r6, #0]
 801c634:	2000      	movs	r0, #0
 801c636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c63a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c710 <_malloc_r+0xfc>
 801c63e:	f000 f869 	bl	801c714 <__malloc_lock>
 801c642:	f8d8 3000 	ldr.w	r3, [r8]
 801c646:	461c      	mov	r4, r3
 801c648:	bb44      	cbnz	r4, 801c69c <_malloc_r+0x88>
 801c64a:	4629      	mov	r1, r5
 801c64c:	4630      	mov	r0, r6
 801c64e:	f7ff ffbf 	bl	801c5d0 <sbrk_aligned>
 801c652:	1c43      	adds	r3, r0, #1
 801c654:	4604      	mov	r4, r0
 801c656:	d158      	bne.n	801c70a <_malloc_r+0xf6>
 801c658:	f8d8 4000 	ldr.w	r4, [r8]
 801c65c:	4627      	mov	r7, r4
 801c65e:	2f00      	cmp	r7, #0
 801c660:	d143      	bne.n	801c6ea <_malloc_r+0xd6>
 801c662:	2c00      	cmp	r4, #0
 801c664:	d04b      	beq.n	801c6fe <_malloc_r+0xea>
 801c666:	6823      	ldr	r3, [r4, #0]
 801c668:	4639      	mov	r1, r7
 801c66a:	4630      	mov	r0, r6
 801c66c:	eb04 0903 	add.w	r9, r4, r3
 801c670:	f000 fc84 	bl	801cf7c <_sbrk_r>
 801c674:	4581      	cmp	r9, r0
 801c676:	d142      	bne.n	801c6fe <_malloc_r+0xea>
 801c678:	6821      	ldr	r1, [r4, #0]
 801c67a:	1a6d      	subs	r5, r5, r1
 801c67c:	4629      	mov	r1, r5
 801c67e:	4630      	mov	r0, r6
 801c680:	f7ff ffa6 	bl	801c5d0 <sbrk_aligned>
 801c684:	3001      	adds	r0, #1
 801c686:	d03a      	beq.n	801c6fe <_malloc_r+0xea>
 801c688:	6823      	ldr	r3, [r4, #0]
 801c68a:	442b      	add	r3, r5
 801c68c:	6023      	str	r3, [r4, #0]
 801c68e:	f8d8 3000 	ldr.w	r3, [r8]
 801c692:	685a      	ldr	r2, [r3, #4]
 801c694:	bb62      	cbnz	r2, 801c6f0 <_malloc_r+0xdc>
 801c696:	f8c8 7000 	str.w	r7, [r8]
 801c69a:	e00f      	b.n	801c6bc <_malloc_r+0xa8>
 801c69c:	6822      	ldr	r2, [r4, #0]
 801c69e:	1b52      	subs	r2, r2, r5
 801c6a0:	d420      	bmi.n	801c6e4 <_malloc_r+0xd0>
 801c6a2:	2a0b      	cmp	r2, #11
 801c6a4:	d917      	bls.n	801c6d6 <_malloc_r+0xc2>
 801c6a6:	1961      	adds	r1, r4, r5
 801c6a8:	42a3      	cmp	r3, r4
 801c6aa:	6025      	str	r5, [r4, #0]
 801c6ac:	bf18      	it	ne
 801c6ae:	6059      	strne	r1, [r3, #4]
 801c6b0:	6863      	ldr	r3, [r4, #4]
 801c6b2:	bf08      	it	eq
 801c6b4:	f8c8 1000 	streq.w	r1, [r8]
 801c6b8:	5162      	str	r2, [r4, r5]
 801c6ba:	604b      	str	r3, [r1, #4]
 801c6bc:	4630      	mov	r0, r6
 801c6be:	f000 f82f 	bl	801c720 <__malloc_unlock>
 801c6c2:	f104 000b 	add.w	r0, r4, #11
 801c6c6:	1d23      	adds	r3, r4, #4
 801c6c8:	f020 0007 	bic.w	r0, r0, #7
 801c6cc:	1ac2      	subs	r2, r0, r3
 801c6ce:	bf1c      	itt	ne
 801c6d0:	1a1b      	subne	r3, r3, r0
 801c6d2:	50a3      	strne	r3, [r4, r2]
 801c6d4:	e7af      	b.n	801c636 <_malloc_r+0x22>
 801c6d6:	6862      	ldr	r2, [r4, #4]
 801c6d8:	42a3      	cmp	r3, r4
 801c6da:	bf0c      	ite	eq
 801c6dc:	f8c8 2000 	streq.w	r2, [r8]
 801c6e0:	605a      	strne	r2, [r3, #4]
 801c6e2:	e7eb      	b.n	801c6bc <_malloc_r+0xa8>
 801c6e4:	4623      	mov	r3, r4
 801c6e6:	6864      	ldr	r4, [r4, #4]
 801c6e8:	e7ae      	b.n	801c648 <_malloc_r+0x34>
 801c6ea:	463c      	mov	r4, r7
 801c6ec:	687f      	ldr	r7, [r7, #4]
 801c6ee:	e7b6      	b.n	801c65e <_malloc_r+0x4a>
 801c6f0:	461a      	mov	r2, r3
 801c6f2:	685b      	ldr	r3, [r3, #4]
 801c6f4:	42a3      	cmp	r3, r4
 801c6f6:	d1fb      	bne.n	801c6f0 <_malloc_r+0xdc>
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	6053      	str	r3, [r2, #4]
 801c6fc:	e7de      	b.n	801c6bc <_malloc_r+0xa8>
 801c6fe:	230c      	movs	r3, #12
 801c700:	6033      	str	r3, [r6, #0]
 801c702:	4630      	mov	r0, r6
 801c704:	f000 f80c 	bl	801c720 <__malloc_unlock>
 801c708:	e794      	b.n	801c634 <_malloc_r+0x20>
 801c70a:	6005      	str	r5, [r0, #0]
 801c70c:	e7d6      	b.n	801c6bc <_malloc_r+0xa8>
 801c70e:	bf00      	nop
 801c710:	24013b30 	.word	0x24013b30

0801c714 <__malloc_lock>:
 801c714:	4801      	ldr	r0, [pc, #4]	@ (801c71c <__malloc_lock+0x8>)
 801c716:	f000 bc7e 	b.w	801d016 <__retarget_lock_acquire_recursive>
 801c71a:	bf00      	nop
 801c71c:	24013c75 	.word	0x24013c75

0801c720 <__malloc_unlock>:
 801c720:	4801      	ldr	r0, [pc, #4]	@ (801c728 <__malloc_unlock+0x8>)
 801c722:	f000 bc79 	b.w	801d018 <__retarget_lock_release_recursive>
 801c726:	bf00      	nop
 801c728:	24013c75 	.word	0x24013c75

0801c72c <srand>:
 801c72c:	b538      	push	{r3, r4, r5, lr}
 801c72e:	4b10      	ldr	r3, [pc, #64]	@ (801c770 <srand+0x44>)
 801c730:	681d      	ldr	r5, [r3, #0]
 801c732:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c734:	4604      	mov	r4, r0
 801c736:	b9b3      	cbnz	r3, 801c766 <srand+0x3a>
 801c738:	2018      	movs	r0, #24
 801c73a:	f7ff ff39 	bl	801c5b0 <malloc>
 801c73e:	4602      	mov	r2, r0
 801c740:	6328      	str	r0, [r5, #48]	@ 0x30
 801c742:	b920      	cbnz	r0, 801c74e <srand+0x22>
 801c744:	4b0b      	ldr	r3, [pc, #44]	@ (801c774 <srand+0x48>)
 801c746:	480c      	ldr	r0, [pc, #48]	@ (801c778 <srand+0x4c>)
 801c748:	2146      	movs	r1, #70	@ 0x46
 801c74a:	f000 fc7d 	bl	801d048 <__assert_func>
 801c74e:	490b      	ldr	r1, [pc, #44]	@ (801c77c <srand+0x50>)
 801c750:	4b0b      	ldr	r3, [pc, #44]	@ (801c780 <srand+0x54>)
 801c752:	e9c0 1300 	strd	r1, r3, [r0]
 801c756:	4b0b      	ldr	r3, [pc, #44]	@ (801c784 <srand+0x58>)
 801c758:	6083      	str	r3, [r0, #8]
 801c75a:	230b      	movs	r3, #11
 801c75c:	8183      	strh	r3, [r0, #12]
 801c75e:	2100      	movs	r1, #0
 801c760:	2001      	movs	r0, #1
 801c762:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c766:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c768:	2200      	movs	r2, #0
 801c76a:	611c      	str	r4, [r3, #16]
 801c76c:	615a      	str	r2, [r3, #20]
 801c76e:	bd38      	pop	{r3, r4, r5, pc}
 801c770:	2400068c 	.word	0x2400068c
 801c774:	0801ecae 	.word	0x0801ecae
 801c778:	0801ecc5 	.word	0x0801ecc5
 801c77c:	abcd330e 	.word	0xabcd330e
 801c780:	e66d1234 	.word	0xe66d1234
 801c784:	0005deec 	.word	0x0005deec

0801c788 <rand>:
 801c788:	4b16      	ldr	r3, [pc, #88]	@ (801c7e4 <rand+0x5c>)
 801c78a:	b510      	push	{r4, lr}
 801c78c:	681c      	ldr	r4, [r3, #0]
 801c78e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c790:	b9b3      	cbnz	r3, 801c7c0 <rand+0x38>
 801c792:	2018      	movs	r0, #24
 801c794:	f7ff ff0c 	bl	801c5b0 <malloc>
 801c798:	4602      	mov	r2, r0
 801c79a:	6320      	str	r0, [r4, #48]	@ 0x30
 801c79c:	b920      	cbnz	r0, 801c7a8 <rand+0x20>
 801c79e:	4b12      	ldr	r3, [pc, #72]	@ (801c7e8 <rand+0x60>)
 801c7a0:	4812      	ldr	r0, [pc, #72]	@ (801c7ec <rand+0x64>)
 801c7a2:	2152      	movs	r1, #82	@ 0x52
 801c7a4:	f000 fc50 	bl	801d048 <__assert_func>
 801c7a8:	4911      	ldr	r1, [pc, #68]	@ (801c7f0 <rand+0x68>)
 801c7aa:	4b12      	ldr	r3, [pc, #72]	@ (801c7f4 <rand+0x6c>)
 801c7ac:	e9c0 1300 	strd	r1, r3, [r0]
 801c7b0:	4b11      	ldr	r3, [pc, #68]	@ (801c7f8 <rand+0x70>)
 801c7b2:	6083      	str	r3, [r0, #8]
 801c7b4:	230b      	movs	r3, #11
 801c7b6:	8183      	strh	r3, [r0, #12]
 801c7b8:	2100      	movs	r1, #0
 801c7ba:	2001      	movs	r0, #1
 801c7bc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c7c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c7c2:	480e      	ldr	r0, [pc, #56]	@ (801c7fc <rand+0x74>)
 801c7c4:	690b      	ldr	r3, [r1, #16]
 801c7c6:	694c      	ldr	r4, [r1, #20]
 801c7c8:	4a0d      	ldr	r2, [pc, #52]	@ (801c800 <rand+0x78>)
 801c7ca:	4358      	muls	r0, r3
 801c7cc:	fb02 0004 	mla	r0, r2, r4, r0
 801c7d0:	fba3 3202 	umull	r3, r2, r3, r2
 801c7d4:	3301      	adds	r3, #1
 801c7d6:	eb40 0002 	adc.w	r0, r0, r2
 801c7da:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c7de:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c7e2:	bd10      	pop	{r4, pc}
 801c7e4:	2400068c 	.word	0x2400068c
 801c7e8:	0801ecae 	.word	0x0801ecae
 801c7ec:	0801ecc5 	.word	0x0801ecc5
 801c7f0:	abcd330e 	.word	0xabcd330e
 801c7f4:	e66d1234 	.word	0xe66d1234
 801c7f8:	0005deec 	.word	0x0005deec
 801c7fc:	5851f42d 	.word	0x5851f42d
 801c800:	4c957f2d 	.word	0x4c957f2d

0801c804 <realloc>:
 801c804:	4b02      	ldr	r3, [pc, #8]	@ (801c810 <realloc+0xc>)
 801c806:	460a      	mov	r2, r1
 801c808:	4601      	mov	r1, r0
 801c80a:	6818      	ldr	r0, [r3, #0]
 801c80c:	f000 b802 	b.w	801c814 <_realloc_r>
 801c810:	2400068c 	.word	0x2400068c

0801c814 <_realloc_r>:
 801c814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c818:	4680      	mov	r8, r0
 801c81a:	4615      	mov	r5, r2
 801c81c:	460c      	mov	r4, r1
 801c81e:	b921      	cbnz	r1, 801c82a <_realloc_r+0x16>
 801c820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c824:	4611      	mov	r1, r2
 801c826:	f7ff bef5 	b.w	801c614 <_malloc_r>
 801c82a:	b92a      	cbnz	r2, 801c838 <_realloc_r+0x24>
 801c82c:	f000 fc36 	bl	801d09c <_free_r>
 801c830:	2400      	movs	r4, #0
 801c832:	4620      	mov	r0, r4
 801c834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c838:	f000 fc7a 	bl	801d130 <_malloc_usable_size_r>
 801c83c:	4285      	cmp	r5, r0
 801c83e:	4606      	mov	r6, r0
 801c840:	d802      	bhi.n	801c848 <_realloc_r+0x34>
 801c842:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c846:	d8f4      	bhi.n	801c832 <_realloc_r+0x1e>
 801c848:	4629      	mov	r1, r5
 801c84a:	4640      	mov	r0, r8
 801c84c:	f7ff fee2 	bl	801c614 <_malloc_r>
 801c850:	4607      	mov	r7, r0
 801c852:	2800      	cmp	r0, #0
 801c854:	d0ec      	beq.n	801c830 <_realloc_r+0x1c>
 801c856:	42b5      	cmp	r5, r6
 801c858:	462a      	mov	r2, r5
 801c85a:	4621      	mov	r1, r4
 801c85c:	bf28      	it	cs
 801c85e:	4632      	movcs	r2, r6
 801c860:	f000 fbe3 	bl	801d02a <memcpy>
 801c864:	4621      	mov	r1, r4
 801c866:	4640      	mov	r0, r8
 801c868:	f000 fc18 	bl	801d09c <_free_r>
 801c86c:	463c      	mov	r4, r7
 801c86e:	e7e0      	b.n	801c832 <_realloc_r+0x1e>

0801c870 <_strtoul_l.constprop.0>:
 801c870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c874:	4e34      	ldr	r6, [pc, #208]	@ (801c948 <_strtoul_l.constprop.0+0xd8>)
 801c876:	4686      	mov	lr, r0
 801c878:	460d      	mov	r5, r1
 801c87a:	4628      	mov	r0, r5
 801c87c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c880:	5d37      	ldrb	r7, [r6, r4]
 801c882:	f017 0708 	ands.w	r7, r7, #8
 801c886:	d1f8      	bne.n	801c87a <_strtoul_l.constprop.0+0xa>
 801c888:	2c2d      	cmp	r4, #45	@ 0x2d
 801c88a:	d12f      	bne.n	801c8ec <_strtoul_l.constprop.0+0x7c>
 801c88c:	782c      	ldrb	r4, [r5, #0]
 801c88e:	2701      	movs	r7, #1
 801c890:	1c85      	adds	r5, r0, #2
 801c892:	f033 0010 	bics.w	r0, r3, #16
 801c896:	d109      	bne.n	801c8ac <_strtoul_l.constprop.0+0x3c>
 801c898:	2c30      	cmp	r4, #48	@ 0x30
 801c89a:	d12c      	bne.n	801c8f6 <_strtoul_l.constprop.0+0x86>
 801c89c:	7828      	ldrb	r0, [r5, #0]
 801c89e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c8a2:	2858      	cmp	r0, #88	@ 0x58
 801c8a4:	d127      	bne.n	801c8f6 <_strtoul_l.constprop.0+0x86>
 801c8a6:	786c      	ldrb	r4, [r5, #1]
 801c8a8:	2310      	movs	r3, #16
 801c8aa:	3502      	adds	r5, #2
 801c8ac:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801c8b0:	2600      	movs	r6, #0
 801c8b2:	fbb8 f8f3 	udiv	r8, r8, r3
 801c8b6:	fb03 f908 	mul.w	r9, r3, r8
 801c8ba:	ea6f 0909 	mvn.w	r9, r9
 801c8be:	4630      	mov	r0, r6
 801c8c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c8c4:	f1bc 0f09 	cmp.w	ip, #9
 801c8c8:	d81c      	bhi.n	801c904 <_strtoul_l.constprop.0+0x94>
 801c8ca:	4664      	mov	r4, ip
 801c8cc:	42a3      	cmp	r3, r4
 801c8ce:	dd2a      	ble.n	801c926 <_strtoul_l.constprop.0+0xb6>
 801c8d0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801c8d4:	d007      	beq.n	801c8e6 <_strtoul_l.constprop.0+0x76>
 801c8d6:	4580      	cmp	r8, r0
 801c8d8:	d322      	bcc.n	801c920 <_strtoul_l.constprop.0+0xb0>
 801c8da:	d101      	bne.n	801c8e0 <_strtoul_l.constprop.0+0x70>
 801c8dc:	45a1      	cmp	r9, r4
 801c8de:	db1f      	blt.n	801c920 <_strtoul_l.constprop.0+0xb0>
 801c8e0:	fb00 4003 	mla	r0, r0, r3, r4
 801c8e4:	2601      	movs	r6, #1
 801c8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c8ea:	e7e9      	b.n	801c8c0 <_strtoul_l.constprop.0+0x50>
 801c8ec:	2c2b      	cmp	r4, #43	@ 0x2b
 801c8ee:	bf04      	itt	eq
 801c8f0:	782c      	ldrbeq	r4, [r5, #0]
 801c8f2:	1c85      	addeq	r5, r0, #2
 801c8f4:	e7cd      	b.n	801c892 <_strtoul_l.constprop.0+0x22>
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d1d8      	bne.n	801c8ac <_strtoul_l.constprop.0+0x3c>
 801c8fa:	2c30      	cmp	r4, #48	@ 0x30
 801c8fc:	bf0c      	ite	eq
 801c8fe:	2308      	moveq	r3, #8
 801c900:	230a      	movne	r3, #10
 801c902:	e7d3      	b.n	801c8ac <_strtoul_l.constprop.0+0x3c>
 801c904:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c908:	f1bc 0f19 	cmp.w	ip, #25
 801c90c:	d801      	bhi.n	801c912 <_strtoul_l.constprop.0+0xa2>
 801c90e:	3c37      	subs	r4, #55	@ 0x37
 801c910:	e7dc      	b.n	801c8cc <_strtoul_l.constprop.0+0x5c>
 801c912:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c916:	f1bc 0f19 	cmp.w	ip, #25
 801c91a:	d804      	bhi.n	801c926 <_strtoul_l.constprop.0+0xb6>
 801c91c:	3c57      	subs	r4, #87	@ 0x57
 801c91e:	e7d5      	b.n	801c8cc <_strtoul_l.constprop.0+0x5c>
 801c920:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c924:	e7df      	b.n	801c8e6 <_strtoul_l.constprop.0+0x76>
 801c926:	1c73      	adds	r3, r6, #1
 801c928:	d106      	bne.n	801c938 <_strtoul_l.constprop.0+0xc8>
 801c92a:	2322      	movs	r3, #34	@ 0x22
 801c92c:	f8ce 3000 	str.w	r3, [lr]
 801c930:	4630      	mov	r0, r6
 801c932:	b932      	cbnz	r2, 801c942 <_strtoul_l.constprop.0+0xd2>
 801c934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c938:	b107      	cbz	r7, 801c93c <_strtoul_l.constprop.0+0xcc>
 801c93a:	4240      	negs	r0, r0
 801c93c:	2a00      	cmp	r2, #0
 801c93e:	d0f9      	beq.n	801c934 <_strtoul_l.constprop.0+0xc4>
 801c940:	b106      	cbz	r6, 801c944 <_strtoul_l.constprop.0+0xd4>
 801c942:	1e69      	subs	r1, r5, #1
 801c944:	6011      	str	r1, [r2, #0]
 801c946:	e7f5      	b.n	801c934 <_strtoul_l.constprop.0+0xc4>
 801c948:	0801ed1e 	.word	0x0801ed1e

0801c94c <strtoul>:
 801c94c:	4613      	mov	r3, r2
 801c94e:	460a      	mov	r2, r1
 801c950:	4601      	mov	r1, r0
 801c952:	4802      	ldr	r0, [pc, #8]	@ (801c95c <strtoul+0x10>)
 801c954:	6800      	ldr	r0, [r0, #0]
 801c956:	f7ff bf8b 	b.w	801c870 <_strtoul_l.constprop.0>
 801c95a:	bf00      	nop
 801c95c:	2400068c 	.word	0x2400068c

0801c960 <std>:
 801c960:	2300      	movs	r3, #0
 801c962:	b510      	push	{r4, lr}
 801c964:	4604      	mov	r4, r0
 801c966:	e9c0 3300 	strd	r3, r3, [r0]
 801c96a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c96e:	6083      	str	r3, [r0, #8]
 801c970:	8181      	strh	r1, [r0, #12]
 801c972:	6643      	str	r3, [r0, #100]	@ 0x64
 801c974:	81c2      	strh	r2, [r0, #14]
 801c976:	6183      	str	r3, [r0, #24]
 801c978:	4619      	mov	r1, r3
 801c97a:	2208      	movs	r2, #8
 801c97c:	305c      	adds	r0, #92	@ 0x5c
 801c97e:	f000 fa8b 	bl	801ce98 <memset>
 801c982:	4b0d      	ldr	r3, [pc, #52]	@ (801c9b8 <std+0x58>)
 801c984:	6263      	str	r3, [r4, #36]	@ 0x24
 801c986:	4b0d      	ldr	r3, [pc, #52]	@ (801c9bc <std+0x5c>)
 801c988:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c98a:	4b0d      	ldr	r3, [pc, #52]	@ (801c9c0 <std+0x60>)
 801c98c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c98e:	4b0d      	ldr	r3, [pc, #52]	@ (801c9c4 <std+0x64>)
 801c990:	6323      	str	r3, [r4, #48]	@ 0x30
 801c992:	4b0d      	ldr	r3, [pc, #52]	@ (801c9c8 <std+0x68>)
 801c994:	6224      	str	r4, [r4, #32]
 801c996:	429c      	cmp	r4, r3
 801c998:	d006      	beq.n	801c9a8 <std+0x48>
 801c99a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c99e:	4294      	cmp	r4, r2
 801c9a0:	d002      	beq.n	801c9a8 <std+0x48>
 801c9a2:	33d0      	adds	r3, #208	@ 0xd0
 801c9a4:	429c      	cmp	r4, r3
 801c9a6:	d105      	bne.n	801c9b4 <std+0x54>
 801c9a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9b0:	f000 bb30 	b.w	801d014 <__retarget_lock_init_recursive>
 801c9b4:	bd10      	pop	{r4, pc}
 801c9b6:	bf00      	nop
 801c9b8:	0801cc25 	.word	0x0801cc25
 801c9bc:	0801cc47 	.word	0x0801cc47
 801c9c0:	0801cc7f 	.word	0x0801cc7f
 801c9c4:	0801cca3 	.word	0x0801cca3
 801c9c8:	24013b34 	.word	0x24013b34

0801c9cc <stdio_exit_handler>:
 801c9cc:	4a02      	ldr	r2, [pc, #8]	@ (801c9d8 <stdio_exit_handler+0xc>)
 801c9ce:	4903      	ldr	r1, [pc, #12]	@ (801c9dc <stdio_exit_handler+0x10>)
 801c9d0:	4803      	ldr	r0, [pc, #12]	@ (801c9e0 <stdio_exit_handler+0x14>)
 801c9d2:	f000 b869 	b.w	801caa8 <_fwalk_sglue>
 801c9d6:	bf00      	nop
 801c9d8:	24000680 	.word	0x24000680
 801c9dc:	0801da99 	.word	0x0801da99
 801c9e0:	24000690 	.word	0x24000690

0801c9e4 <cleanup_stdio>:
 801c9e4:	6841      	ldr	r1, [r0, #4]
 801c9e6:	4b0c      	ldr	r3, [pc, #48]	@ (801ca18 <cleanup_stdio+0x34>)
 801c9e8:	4299      	cmp	r1, r3
 801c9ea:	b510      	push	{r4, lr}
 801c9ec:	4604      	mov	r4, r0
 801c9ee:	d001      	beq.n	801c9f4 <cleanup_stdio+0x10>
 801c9f0:	f001 f852 	bl	801da98 <_fflush_r>
 801c9f4:	68a1      	ldr	r1, [r4, #8]
 801c9f6:	4b09      	ldr	r3, [pc, #36]	@ (801ca1c <cleanup_stdio+0x38>)
 801c9f8:	4299      	cmp	r1, r3
 801c9fa:	d002      	beq.n	801ca02 <cleanup_stdio+0x1e>
 801c9fc:	4620      	mov	r0, r4
 801c9fe:	f001 f84b 	bl	801da98 <_fflush_r>
 801ca02:	68e1      	ldr	r1, [r4, #12]
 801ca04:	4b06      	ldr	r3, [pc, #24]	@ (801ca20 <cleanup_stdio+0x3c>)
 801ca06:	4299      	cmp	r1, r3
 801ca08:	d004      	beq.n	801ca14 <cleanup_stdio+0x30>
 801ca0a:	4620      	mov	r0, r4
 801ca0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca10:	f001 b842 	b.w	801da98 <_fflush_r>
 801ca14:	bd10      	pop	{r4, pc}
 801ca16:	bf00      	nop
 801ca18:	24013b34 	.word	0x24013b34
 801ca1c:	24013b9c 	.word	0x24013b9c
 801ca20:	24013c04 	.word	0x24013c04

0801ca24 <global_stdio_init.part.0>:
 801ca24:	b510      	push	{r4, lr}
 801ca26:	4b0b      	ldr	r3, [pc, #44]	@ (801ca54 <global_stdio_init.part.0+0x30>)
 801ca28:	4c0b      	ldr	r4, [pc, #44]	@ (801ca58 <global_stdio_init.part.0+0x34>)
 801ca2a:	4a0c      	ldr	r2, [pc, #48]	@ (801ca5c <global_stdio_init.part.0+0x38>)
 801ca2c:	601a      	str	r2, [r3, #0]
 801ca2e:	4620      	mov	r0, r4
 801ca30:	2200      	movs	r2, #0
 801ca32:	2104      	movs	r1, #4
 801ca34:	f7ff ff94 	bl	801c960 <std>
 801ca38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801ca3c:	2201      	movs	r2, #1
 801ca3e:	2109      	movs	r1, #9
 801ca40:	f7ff ff8e 	bl	801c960 <std>
 801ca44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801ca48:	2202      	movs	r2, #2
 801ca4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca4e:	2112      	movs	r1, #18
 801ca50:	f7ff bf86 	b.w	801c960 <std>
 801ca54:	24013c6c 	.word	0x24013c6c
 801ca58:	24013b34 	.word	0x24013b34
 801ca5c:	0801c9cd 	.word	0x0801c9cd

0801ca60 <__sfp_lock_acquire>:
 801ca60:	4801      	ldr	r0, [pc, #4]	@ (801ca68 <__sfp_lock_acquire+0x8>)
 801ca62:	f000 bad8 	b.w	801d016 <__retarget_lock_acquire_recursive>
 801ca66:	bf00      	nop
 801ca68:	24013c76 	.word	0x24013c76

0801ca6c <__sfp_lock_release>:
 801ca6c:	4801      	ldr	r0, [pc, #4]	@ (801ca74 <__sfp_lock_release+0x8>)
 801ca6e:	f000 bad3 	b.w	801d018 <__retarget_lock_release_recursive>
 801ca72:	bf00      	nop
 801ca74:	24013c76 	.word	0x24013c76

0801ca78 <__sinit>:
 801ca78:	b510      	push	{r4, lr}
 801ca7a:	4604      	mov	r4, r0
 801ca7c:	f7ff fff0 	bl	801ca60 <__sfp_lock_acquire>
 801ca80:	6a23      	ldr	r3, [r4, #32]
 801ca82:	b11b      	cbz	r3, 801ca8c <__sinit+0x14>
 801ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca88:	f7ff bff0 	b.w	801ca6c <__sfp_lock_release>
 801ca8c:	4b04      	ldr	r3, [pc, #16]	@ (801caa0 <__sinit+0x28>)
 801ca8e:	6223      	str	r3, [r4, #32]
 801ca90:	4b04      	ldr	r3, [pc, #16]	@ (801caa4 <__sinit+0x2c>)
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	d1f5      	bne.n	801ca84 <__sinit+0xc>
 801ca98:	f7ff ffc4 	bl	801ca24 <global_stdio_init.part.0>
 801ca9c:	e7f2      	b.n	801ca84 <__sinit+0xc>
 801ca9e:	bf00      	nop
 801caa0:	0801c9e5 	.word	0x0801c9e5
 801caa4:	24013c6c 	.word	0x24013c6c

0801caa8 <_fwalk_sglue>:
 801caa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801caac:	4607      	mov	r7, r0
 801caae:	4688      	mov	r8, r1
 801cab0:	4614      	mov	r4, r2
 801cab2:	2600      	movs	r6, #0
 801cab4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cab8:	f1b9 0901 	subs.w	r9, r9, #1
 801cabc:	d505      	bpl.n	801caca <_fwalk_sglue+0x22>
 801cabe:	6824      	ldr	r4, [r4, #0]
 801cac0:	2c00      	cmp	r4, #0
 801cac2:	d1f7      	bne.n	801cab4 <_fwalk_sglue+0xc>
 801cac4:	4630      	mov	r0, r6
 801cac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801caca:	89ab      	ldrh	r3, [r5, #12]
 801cacc:	2b01      	cmp	r3, #1
 801cace:	d907      	bls.n	801cae0 <_fwalk_sglue+0x38>
 801cad0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cad4:	3301      	adds	r3, #1
 801cad6:	d003      	beq.n	801cae0 <_fwalk_sglue+0x38>
 801cad8:	4629      	mov	r1, r5
 801cada:	4638      	mov	r0, r7
 801cadc:	47c0      	blx	r8
 801cade:	4306      	orrs	r6, r0
 801cae0:	3568      	adds	r5, #104	@ 0x68
 801cae2:	e7e9      	b.n	801cab8 <_fwalk_sglue+0x10>

0801cae4 <_fwrite_r>:
 801cae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cae8:	9c08      	ldr	r4, [sp, #32]
 801caea:	468a      	mov	sl, r1
 801caec:	4690      	mov	r8, r2
 801caee:	fb02 f903 	mul.w	r9, r2, r3
 801caf2:	4606      	mov	r6, r0
 801caf4:	b118      	cbz	r0, 801cafe <_fwrite_r+0x1a>
 801caf6:	6a03      	ldr	r3, [r0, #32]
 801caf8:	b90b      	cbnz	r3, 801cafe <_fwrite_r+0x1a>
 801cafa:	f7ff ffbd 	bl	801ca78 <__sinit>
 801cafe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb00:	07dd      	lsls	r5, r3, #31
 801cb02:	d405      	bmi.n	801cb10 <_fwrite_r+0x2c>
 801cb04:	89a3      	ldrh	r3, [r4, #12]
 801cb06:	0598      	lsls	r0, r3, #22
 801cb08:	d402      	bmi.n	801cb10 <_fwrite_r+0x2c>
 801cb0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb0c:	f000 fa83 	bl	801d016 <__retarget_lock_acquire_recursive>
 801cb10:	89a3      	ldrh	r3, [r4, #12]
 801cb12:	0719      	lsls	r1, r3, #28
 801cb14:	d516      	bpl.n	801cb44 <_fwrite_r+0x60>
 801cb16:	6923      	ldr	r3, [r4, #16]
 801cb18:	b1a3      	cbz	r3, 801cb44 <_fwrite_r+0x60>
 801cb1a:	2500      	movs	r5, #0
 801cb1c:	454d      	cmp	r5, r9
 801cb1e:	d01f      	beq.n	801cb60 <_fwrite_r+0x7c>
 801cb20:	68a7      	ldr	r7, [r4, #8]
 801cb22:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801cb26:	3f01      	subs	r7, #1
 801cb28:	2f00      	cmp	r7, #0
 801cb2a:	60a7      	str	r7, [r4, #8]
 801cb2c:	da04      	bge.n	801cb38 <_fwrite_r+0x54>
 801cb2e:	69a3      	ldr	r3, [r4, #24]
 801cb30:	429f      	cmp	r7, r3
 801cb32:	db0f      	blt.n	801cb54 <_fwrite_r+0x70>
 801cb34:	290a      	cmp	r1, #10
 801cb36:	d00d      	beq.n	801cb54 <_fwrite_r+0x70>
 801cb38:	6823      	ldr	r3, [r4, #0]
 801cb3a:	1c5a      	adds	r2, r3, #1
 801cb3c:	6022      	str	r2, [r4, #0]
 801cb3e:	7019      	strb	r1, [r3, #0]
 801cb40:	3501      	adds	r5, #1
 801cb42:	e7eb      	b.n	801cb1c <_fwrite_r+0x38>
 801cb44:	4621      	mov	r1, r4
 801cb46:	4630      	mov	r0, r6
 801cb48:	f000 f926 	bl	801cd98 <__swsetup_r>
 801cb4c:	2800      	cmp	r0, #0
 801cb4e:	d0e4      	beq.n	801cb1a <_fwrite_r+0x36>
 801cb50:	2500      	movs	r5, #0
 801cb52:	e005      	b.n	801cb60 <_fwrite_r+0x7c>
 801cb54:	4622      	mov	r2, r4
 801cb56:	4630      	mov	r0, r6
 801cb58:	f000 f8e0 	bl	801cd1c <__swbuf_r>
 801cb5c:	3001      	adds	r0, #1
 801cb5e:	d1ef      	bne.n	801cb40 <_fwrite_r+0x5c>
 801cb60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb62:	07da      	lsls	r2, r3, #31
 801cb64:	d405      	bmi.n	801cb72 <_fwrite_r+0x8e>
 801cb66:	89a3      	ldrh	r3, [r4, #12]
 801cb68:	059b      	lsls	r3, r3, #22
 801cb6a:	d402      	bmi.n	801cb72 <_fwrite_r+0x8e>
 801cb6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb6e:	f000 fa53 	bl	801d018 <__retarget_lock_release_recursive>
 801cb72:	fbb5 f0f8 	udiv	r0, r5, r8
 801cb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801cb7c <fwrite>:
 801cb7c:	b507      	push	{r0, r1, r2, lr}
 801cb7e:	9300      	str	r3, [sp, #0]
 801cb80:	4613      	mov	r3, r2
 801cb82:	460a      	mov	r2, r1
 801cb84:	4601      	mov	r1, r0
 801cb86:	4803      	ldr	r0, [pc, #12]	@ (801cb94 <fwrite+0x18>)
 801cb88:	6800      	ldr	r0, [r0, #0]
 801cb8a:	f7ff ffab 	bl	801cae4 <_fwrite_r>
 801cb8e:	b003      	add	sp, #12
 801cb90:	f85d fb04 	ldr.w	pc, [sp], #4
 801cb94:	2400068c 	.word	0x2400068c

0801cb98 <iprintf>:
 801cb98:	b40f      	push	{r0, r1, r2, r3}
 801cb9a:	b507      	push	{r0, r1, r2, lr}
 801cb9c:	4906      	ldr	r1, [pc, #24]	@ (801cbb8 <iprintf+0x20>)
 801cb9e:	ab04      	add	r3, sp, #16
 801cba0:	6808      	ldr	r0, [r1, #0]
 801cba2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cba6:	6881      	ldr	r1, [r0, #8]
 801cba8:	9301      	str	r3, [sp, #4]
 801cbaa:	f000 fc4b 	bl	801d444 <_vfiprintf_r>
 801cbae:	b003      	add	sp, #12
 801cbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cbb4:	b004      	add	sp, #16
 801cbb6:	4770      	bx	lr
 801cbb8:	2400068c 	.word	0x2400068c

0801cbbc <sniprintf>:
 801cbbc:	b40c      	push	{r2, r3}
 801cbbe:	b530      	push	{r4, r5, lr}
 801cbc0:	4b17      	ldr	r3, [pc, #92]	@ (801cc20 <sniprintf+0x64>)
 801cbc2:	1e0c      	subs	r4, r1, #0
 801cbc4:	681d      	ldr	r5, [r3, #0]
 801cbc6:	b09d      	sub	sp, #116	@ 0x74
 801cbc8:	da08      	bge.n	801cbdc <sniprintf+0x20>
 801cbca:	238b      	movs	r3, #139	@ 0x8b
 801cbcc:	602b      	str	r3, [r5, #0]
 801cbce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cbd2:	b01d      	add	sp, #116	@ 0x74
 801cbd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cbd8:	b002      	add	sp, #8
 801cbda:	4770      	bx	lr
 801cbdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801cbe0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cbe4:	bf14      	ite	ne
 801cbe6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801cbea:	4623      	moveq	r3, r4
 801cbec:	9304      	str	r3, [sp, #16]
 801cbee:	9307      	str	r3, [sp, #28]
 801cbf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801cbf4:	9002      	str	r0, [sp, #8]
 801cbf6:	9006      	str	r0, [sp, #24]
 801cbf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cbfc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cbfe:	ab21      	add	r3, sp, #132	@ 0x84
 801cc00:	a902      	add	r1, sp, #8
 801cc02:	4628      	mov	r0, r5
 801cc04:	9301      	str	r3, [sp, #4]
 801cc06:	f000 faf7 	bl	801d1f8 <_svfiprintf_r>
 801cc0a:	1c43      	adds	r3, r0, #1
 801cc0c:	bfbc      	itt	lt
 801cc0e:	238b      	movlt	r3, #139	@ 0x8b
 801cc10:	602b      	strlt	r3, [r5, #0]
 801cc12:	2c00      	cmp	r4, #0
 801cc14:	d0dd      	beq.n	801cbd2 <sniprintf+0x16>
 801cc16:	9b02      	ldr	r3, [sp, #8]
 801cc18:	2200      	movs	r2, #0
 801cc1a:	701a      	strb	r2, [r3, #0]
 801cc1c:	e7d9      	b.n	801cbd2 <sniprintf+0x16>
 801cc1e:	bf00      	nop
 801cc20:	2400068c 	.word	0x2400068c

0801cc24 <__sread>:
 801cc24:	b510      	push	{r4, lr}
 801cc26:	460c      	mov	r4, r1
 801cc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc2c:	f000 f994 	bl	801cf58 <_read_r>
 801cc30:	2800      	cmp	r0, #0
 801cc32:	bfab      	itete	ge
 801cc34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801cc36:	89a3      	ldrhlt	r3, [r4, #12]
 801cc38:	181b      	addge	r3, r3, r0
 801cc3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801cc3e:	bfac      	ite	ge
 801cc40:	6563      	strge	r3, [r4, #84]	@ 0x54
 801cc42:	81a3      	strhlt	r3, [r4, #12]
 801cc44:	bd10      	pop	{r4, pc}

0801cc46 <__swrite>:
 801cc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc4a:	461f      	mov	r7, r3
 801cc4c:	898b      	ldrh	r3, [r1, #12]
 801cc4e:	05db      	lsls	r3, r3, #23
 801cc50:	4605      	mov	r5, r0
 801cc52:	460c      	mov	r4, r1
 801cc54:	4616      	mov	r6, r2
 801cc56:	d505      	bpl.n	801cc64 <__swrite+0x1e>
 801cc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc5c:	2302      	movs	r3, #2
 801cc5e:	2200      	movs	r2, #0
 801cc60:	f000 f968 	bl	801cf34 <_lseek_r>
 801cc64:	89a3      	ldrh	r3, [r4, #12]
 801cc66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cc6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cc6e:	81a3      	strh	r3, [r4, #12]
 801cc70:	4632      	mov	r2, r6
 801cc72:	463b      	mov	r3, r7
 801cc74:	4628      	mov	r0, r5
 801cc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cc7a:	f000 b98f 	b.w	801cf9c <_write_r>

0801cc7e <__sseek>:
 801cc7e:	b510      	push	{r4, lr}
 801cc80:	460c      	mov	r4, r1
 801cc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc86:	f000 f955 	bl	801cf34 <_lseek_r>
 801cc8a:	1c43      	adds	r3, r0, #1
 801cc8c:	89a3      	ldrh	r3, [r4, #12]
 801cc8e:	bf15      	itete	ne
 801cc90:	6560      	strne	r0, [r4, #84]	@ 0x54
 801cc92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801cc96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801cc9a:	81a3      	strheq	r3, [r4, #12]
 801cc9c:	bf18      	it	ne
 801cc9e:	81a3      	strhne	r3, [r4, #12]
 801cca0:	bd10      	pop	{r4, pc}

0801cca2 <__sclose>:
 801cca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cca6:	f000 b935 	b.w	801cf14 <_close_r>

0801ccaa <_vsniprintf_r>:
 801ccaa:	b530      	push	{r4, r5, lr}
 801ccac:	4614      	mov	r4, r2
 801ccae:	2c00      	cmp	r4, #0
 801ccb0:	b09b      	sub	sp, #108	@ 0x6c
 801ccb2:	4605      	mov	r5, r0
 801ccb4:	461a      	mov	r2, r3
 801ccb6:	da05      	bge.n	801ccc4 <_vsniprintf_r+0x1a>
 801ccb8:	238b      	movs	r3, #139	@ 0x8b
 801ccba:	6003      	str	r3, [r0, #0]
 801ccbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ccc0:	b01b      	add	sp, #108	@ 0x6c
 801ccc2:	bd30      	pop	{r4, r5, pc}
 801ccc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801ccc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cccc:	bf14      	ite	ne
 801ccce:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ccd2:	4623      	moveq	r3, r4
 801ccd4:	9302      	str	r3, [sp, #8]
 801ccd6:	9305      	str	r3, [sp, #20]
 801ccd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ccdc:	9100      	str	r1, [sp, #0]
 801ccde:	9104      	str	r1, [sp, #16]
 801cce0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cce4:	4669      	mov	r1, sp
 801cce6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801cce8:	f000 fa86 	bl	801d1f8 <_svfiprintf_r>
 801ccec:	1c43      	adds	r3, r0, #1
 801ccee:	bfbc      	itt	lt
 801ccf0:	238b      	movlt	r3, #139	@ 0x8b
 801ccf2:	602b      	strlt	r3, [r5, #0]
 801ccf4:	2c00      	cmp	r4, #0
 801ccf6:	d0e3      	beq.n	801ccc0 <_vsniprintf_r+0x16>
 801ccf8:	9b00      	ldr	r3, [sp, #0]
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	701a      	strb	r2, [r3, #0]
 801ccfe:	e7df      	b.n	801ccc0 <_vsniprintf_r+0x16>

0801cd00 <vsniprintf>:
 801cd00:	b507      	push	{r0, r1, r2, lr}
 801cd02:	9300      	str	r3, [sp, #0]
 801cd04:	4613      	mov	r3, r2
 801cd06:	460a      	mov	r2, r1
 801cd08:	4601      	mov	r1, r0
 801cd0a:	4803      	ldr	r0, [pc, #12]	@ (801cd18 <vsniprintf+0x18>)
 801cd0c:	6800      	ldr	r0, [r0, #0]
 801cd0e:	f7ff ffcc 	bl	801ccaa <_vsniprintf_r>
 801cd12:	b003      	add	sp, #12
 801cd14:	f85d fb04 	ldr.w	pc, [sp], #4
 801cd18:	2400068c 	.word	0x2400068c

0801cd1c <__swbuf_r>:
 801cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd1e:	460e      	mov	r6, r1
 801cd20:	4614      	mov	r4, r2
 801cd22:	4605      	mov	r5, r0
 801cd24:	b118      	cbz	r0, 801cd2e <__swbuf_r+0x12>
 801cd26:	6a03      	ldr	r3, [r0, #32]
 801cd28:	b90b      	cbnz	r3, 801cd2e <__swbuf_r+0x12>
 801cd2a:	f7ff fea5 	bl	801ca78 <__sinit>
 801cd2e:	69a3      	ldr	r3, [r4, #24]
 801cd30:	60a3      	str	r3, [r4, #8]
 801cd32:	89a3      	ldrh	r3, [r4, #12]
 801cd34:	071a      	lsls	r2, r3, #28
 801cd36:	d501      	bpl.n	801cd3c <__swbuf_r+0x20>
 801cd38:	6923      	ldr	r3, [r4, #16]
 801cd3a:	b943      	cbnz	r3, 801cd4e <__swbuf_r+0x32>
 801cd3c:	4621      	mov	r1, r4
 801cd3e:	4628      	mov	r0, r5
 801cd40:	f000 f82a 	bl	801cd98 <__swsetup_r>
 801cd44:	b118      	cbz	r0, 801cd4e <__swbuf_r+0x32>
 801cd46:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801cd4a:	4638      	mov	r0, r7
 801cd4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd4e:	6823      	ldr	r3, [r4, #0]
 801cd50:	6922      	ldr	r2, [r4, #16]
 801cd52:	1a98      	subs	r0, r3, r2
 801cd54:	6963      	ldr	r3, [r4, #20]
 801cd56:	b2f6      	uxtb	r6, r6
 801cd58:	4283      	cmp	r3, r0
 801cd5a:	4637      	mov	r7, r6
 801cd5c:	dc05      	bgt.n	801cd6a <__swbuf_r+0x4e>
 801cd5e:	4621      	mov	r1, r4
 801cd60:	4628      	mov	r0, r5
 801cd62:	f000 fe99 	bl	801da98 <_fflush_r>
 801cd66:	2800      	cmp	r0, #0
 801cd68:	d1ed      	bne.n	801cd46 <__swbuf_r+0x2a>
 801cd6a:	68a3      	ldr	r3, [r4, #8]
 801cd6c:	3b01      	subs	r3, #1
 801cd6e:	60a3      	str	r3, [r4, #8]
 801cd70:	6823      	ldr	r3, [r4, #0]
 801cd72:	1c5a      	adds	r2, r3, #1
 801cd74:	6022      	str	r2, [r4, #0]
 801cd76:	701e      	strb	r6, [r3, #0]
 801cd78:	6962      	ldr	r2, [r4, #20]
 801cd7a:	1c43      	adds	r3, r0, #1
 801cd7c:	429a      	cmp	r2, r3
 801cd7e:	d004      	beq.n	801cd8a <__swbuf_r+0x6e>
 801cd80:	89a3      	ldrh	r3, [r4, #12]
 801cd82:	07db      	lsls	r3, r3, #31
 801cd84:	d5e1      	bpl.n	801cd4a <__swbuf_r+0x2e>
 801cd86:	2e0a      	cmp	r6, #10
 801cd88:	d1df      	bne.n	801cd4a <__swbuf_r+0x2e>
 801cd8a:	4621      	mov	r1, r4
 801cd8c:	4628      	mov	r0, r5
 801cd8e:	f000 fe83 	bl	801da98 <_fflush_r>
 801cd92:	2800      	cmp	r0, #0
 801cd94:	d0d9      	beq.n	801cd4a <__swbuf_r+0x2e>
 801cd96:	e7d6      	b.n	801cd46 <__swbuf_r+0x2a>

0801cd98 <__swsetup_r>:
 801cd98:	b538      	push	{r3, r4, r5, lr}
 801cd9a:	4b29      	ldr	r3, [pc, #164]	@ (801ce40 <__swsetup_r+0xa8>)
 801cd9c:	4605      	mov	r5, r0
 801cd9e:	6818      	ldr	r0, [r3, #0]
 801cda0:	460c      	mov	r4, r1
 801cda2:	b118      	cbz	r0, 801cdac <__swsetup_r+0x14>
 801cda4:	6a03      	ldr	r3, [r0, #32]
 801cda6:	b90b      	cbnz	r3, 801cdac <__swsetup_r+0x14>
 801cda8:	f7ff fe66 	bl	801ca78 <__sinit>
 801cdac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cdb0:	0719      	lsls	r1, r3, #28
 801cdb2:	d422      	bmi.n	801cdfa <__swsetup_r+0x62>
 801cdb4:	06da      	lsls	r2, r3, #27
 801cdb6:	d407      	bmi.n	801cdc8 <__swsetup_r+0x30>
 801cdb8:	2209      	movs	r2, #9
 801cdba:	602a      	str	r2, [r5, #0]
 801cdbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cdc0:	81a3      	strh	r3, [r4, #12]
 801cdc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cdc6:	e033      	b.n	801ce30 <__swsetup_r+0x98>
 801cdc8:	0758      	lsls	r0, r3, #29
 801cdca:	d512      	bpl.n	801cdf2 <__swsetup_r+0x5a>
 801cdcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cdce:	b141      	cbz	r1, 801cde2 <__swsetup_r+0x4a>
 801cdd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cdd4:	4299      	cmp	r1, r3
 801cdd6:	d002      	beq.n	801cdde <__swsetup_r+0x46>
 801cdd8:	4628      	mov	r0, r5
 801cdda:	f000 f95f 	bl	801d09c <_free_r>
 801cdde:	2300      	movs	r3, #0
 801cde0:	6363      	str	r3, [r4, #52]	@ 0x34
 801cde2:	89a3      	ldrh	r3, [r4, #12]
 801cde4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cde8:	81a3      	strh	r3, [r4, #12]
 801cdea:	2300      	movs	r3, #0
 801cdec:	6063      	str	r3, [r4, #4]
 801cdee:	6923      	ldr	r3, [r4, #16]
 801cdf0:	6023      	str	r3, [r4, #0]
 801cdf2:	89a3      	ldrh	r3, [r4, #12]
 801cdf4:	f043 0308 	orr.w	r3, r3, #8
 801cdf8:	81a3      	strh	r3, [r4, #12]
 801cdfa:	6923      	ldr	r3, [r4, #16]
 801cdfc:	b94b      	cbnz	r3, 801ce12 <__swsetup_r+0x7a>
 801cdfe:	89a3      	ldrh	r3, [r4, #12]
 801ce00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ce04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ce08:	d003      	beq.n	801ce12 <__swsetup_r+0x7a>
 801ce0a:	4621      	mov	r1, r4
 801ce0c:	4628      	mov	r0, r5
 801ce0e:	f000 fea3 	bl	801db58 <__smakebuf_r>
 801ce12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce16:	f013 0201 	ands.w	r2, r3, #1
 801ce1a:	d00a      	beq.n	801ce32 <__swsetup_r+0x9a>
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	60a2      	str	r2, [r4, #8]
 801ce20:	6962      	ldr	r2, [r4, #20]
 801ce22:	4252      	negs	r2, r2
 801ce24:	61a2      	str	r2, [r4, #24]
 801ce26:	6922      	ldr	r2, [r4, #16]
 801ce28:	b942      	cbnz	r2, 801ce3c <__swsetup_r+0xa4>
 801ce2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ce2e:	d1c5      	bne.n	801cdbc <__swsetup_r+0x24>
 801ce30:	bd38      	pop	{r3, r4, r5, pc}
 801ce32:	0799      	lsls	r1, r3, #30
 801ce34:	bf58      	it	pl
 801ce36:	6962      	ldrpl	r2, [r4, #20]
 801ce38:	60a2      	str	r2, [r4, #8]
 801ce3a:	e7f4      	b.n	801ce26 <__swsetup_r+0x8e>
 801ce3c:	2000      	movs	r0, #0
 801ce3e:	e7f7      	b.n	801ce30 <__swsetup_r+0x98>
 801ce40:	2400068c 	.word	0x2400068c

0801ce44 <memcmp>:
 801ce44:	b510      	push	{r4, lr}
 801ce46:	3901      	subs	r1, #1
 801ce48:	4402      	add	r2, r0
 801ce4a:	4290      	cmp	r0, r2
 801ce4c:	d101      	bne.n	801ce52 <memcmp+0xe>
 801ce4e:	2000      	movs	r0, #0
 801ce50:	e005      	b.n	801ce5e <memcmp+0x1a>
 801ce52:	7803      	ldrb	r3, [r0, #0]
 801ce54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ce58:	42a3      	cmp	r3, r4
 801ce5a:	d001      	beq.n	801ce60 <memcmp+0x1c>
 801ce5c:	1b18      	subs	r0, r3, r4
 801ce5e:	bd10      	pop	{r4, pc}
 801ce60:	3001      	adds	r0, #1
 801ce62:	e7f2      	b.n	801ce4a <memcmp+0x6>

0801ce64 <memmove>:
 801ce64:	4288      	cmp	r0, r1
 801ce66:	b510      	push	{r4, lr}
 801ce68:	eb01 0402 	add.w	r4, r1, r2
 801ce6c:	d902      	bls.n	801ce74 <memmove+0x10>
 801ce6e:	4284      	cmp	r4, r0
 801ce70:	4623      	mov	r3, r4
 801ce72:	d807      	bhi.n	801ce84 <memmove+0x20>
 801ce74:	1e43      	subs	r3, r0, #1
 801ce76:	42a1      	cmp	r1, r4
 801ce78:	d008      	beq.n	801ce8c <memmove+0x28>
 801ce7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce82:	e7f8      	b.n	801ce76 <memmove+0x12>
 801ce84:	4402      	add	r2, r0
 801ce86:	4601      	mov	r1, r0
 801ce88:	428a      	cmp	r2, r1
 801ce8a:	d100      	bne.n	801ce8e <memmove+0x2a>
 801ce8c:	bd10      	pop	{r4, pc}
 801ce8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce96:	e7f7      	b.n	801ce88 <memmove+0x24>

0801ce98 <memset>:
 801ce98:	4402      	add	r2, r0
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	4293      	cmp	r3, r2
 801ce9e:	d100      	bne.n	801cea2 <memset+0xa>
 801cea0:	4770      	bx	lr
 801cea2:	f803 1b01 	strb.w	r1, [r3], #1
 801cea6:	e7f9      	b.n	801ce9c <memset+0x4>

0801cea8 <strchr>:
 801cea8:	b2c9      	uxtb	r1, r1
 801ceaa:	4603      	mov	r3, r0
 801ceac:	4618      	mov	r0, r3
 801ceae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ceb2:	b112      	cbz	r2, 801ceba <strchr+0x12>
 801ceb4:	428a      	cmp	r2, r1
 801ceb6:	d1f9      	bne.n	801ceac <strchr+0x4>
 801ceb8:	4770      	bx	lr
 801ceba:	2900      	cmp	r1, #0
 801cebc:	bf18      	it	ne
 801cebe:	2000      	movne	r0, #0
 801cec0:	4770      	bx	lr

0801cec2 <strncmp>:
 801cec2:	b510      	push	{r4, lr}
 801cec4:	b16a      	cbz	r2, 801cee2 <strncmp+0x20>
 801cec6:	3901      	subs	r1, #1
 801cec8:	1884      	adds	r4, r0, r2
 801ceca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cece:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ced2:	429a      	cmp	r2, r3
 801ced4:	d103      	bne.n	801cede <strncmp+0x1c>
 801ced6:	42a0      	cmp	r0, r4
 801ced8:	d001      	beq.n	801cede <strncmp+0x1c>
 801ceda:	2a00      	cmp	r2, #0
 801cedc:	d1f5      	bne.n	801ceca <strncmp+0x8>
 801cede:	1ad0      	subs	r0, r2, r3
 801cee0:	bd10      	pop	{r4, pc}
 801cee2:	4610      	mov	r0, r2
 801cee4:	e7fc      	b.n	801cee0 <strncmp+0x1e>

0801cee6 <strstr>:
 801cee6:	780a      	ldrb	r2, [r1, #0]
 801cee8:	b570      	push	{r4, r5, r6, lr}
 801ceea:	b96a      	cbnz	r2, 801cf08 <strstr+0x22>
 801ceec:	bd70      	pop	{r4, r5, r6, pc}
 801ceee:	429a      	cmp	r2, r3
 801cef0:	d109      	bne.n	801cf06 <strstr+0x20>
 801cef2:	460c      	mov	r4, r1
 801cef4:	4605      	mov	r5, r0
 801cef6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d0f6      	beq.n	801ceec <strstr+0x6>
 801cefe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801cf02:	429e      	cmp	r6, r3
 801cf04:	d0f7      	beq.n	801cef6 <strstr+0x10>
 801cf06:	3001      	adds	r0, #1
 801cf08:	7803      	ldrb	r3, [r0, #0]
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d1ef      	bne.n	801ceee <strstr+0x8>
 801cf0e:	4618      	mov	r0, r3
 801cf10:	e7ec      	b.n	801ceec <strstr+0x6>
	...

0801cf14 <_close_r>:
 801cf14:	b538      	push	{r3, r4, r5, lr}
 801cf16:	4d06      	ldr	r5, [pc, #24]	@ (801cf30 <_close_r+0x1c>)
 801cf18:	2300      	movs	r3, #0
 801cf1a:	4604      	mov	r4, r0
 801cf1c:	4608      	mov	r0, r1
 801cf1e:	602b      	str	r3, [r5, #0]
 801cf20:	f7e4 fff8 	bl	8001f14 <_close>
 801cf24:	1c43      	adds	r3, r0, #1
 801cf26:	d102      	bne.n	801cf2e <_close_r+0x1a>
 801cf28:	682b      	ldr	r3, [r5, #0]
 801cf2a:	b103      	cbz	r3, 801cf2e <_close_r+0x1a>
 801cf2c:	6023      	str	r3, [r4, #0]
 801cf2e:	bd38      	pop	{r3, r4, r5, pc}
 801cf30:	24013c70 	.word	0x24013c70

0801cf34 <_lseek_r>:
 801cf34:	b538      	push	{r3, r4, r5, lr}
 801cf36:	4d07      	ldr	r5, [pc, #28]	@ (801cf54 <_lseek_r+0x20>)
 801cf38:	4604      	mov	r4, r0
 801cf3a:	4608      	mov	r0, r1
 801cf3c:	4611      	mov	r1, r2
 801cf3e:	2200      	movs	r2, #0
 801cf40:	602a      	str	r2, [r5, #0]
 801cf42:	461a      	mov	r2, r3
 801cf44:	f7e5 f80d 	bl	8001f62 <_lseek>
 801cf48:	1c43      	adds	r3, r0, #1
 801cf4a:	d102      	bne.n	801cf52 <_lseek_r+0x1e>
 801cf4c:	682b      	ldr	r3, [r5, #0]
 801cf4e:	b103      	cbz	r3, 801cf52 <_lseek_r+0x1e>
 801cf50:	6023      	str	r3, [r4, #0]
 801cf52:	bd38      	pop	{r3, r4, r5, pc}
 801cf54:	24013c70 	.word	0x24013c70

0801cf58 <_read_r>:
 801cf58:	b538      	push	{r3, r4, r5, lr}
 801cf5a:	4d07      	ldr	r5, [pc, #28]	@ (801cf78 <_read_r+0x20>)
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	4608      	mov	r0, r1
 801cf60:	4611      	mov	r1, r2
 801cf62:	2200      	movs	r2, #0
 801cf64:	602a      	str	r2, [r5, #0]
 801cf66:	461a      	mov	r2, r3
 801cf68:	f7e4 ff9b 	bl	8001ea2 <_read>
 801cf6c:	1c43      	adds	r3, r0, #1
 801cf6e:	d102      	bne.n	801cf76 <_read_r+0x1e>
 801cf70:	682b      	ldr	r3, [r5, #0]
 801cf72:	b103      	cbz	r3, 801cf76 <_read_r+0x1e>
 801cf74:	6023      	str	r3, [r4, #0]
 801cf76:	bd38      	pop	{r3, r4, r5, pc}
 801cf78:	24013c70 	.word	0x24013c70

0801cf7c <_sbrk_r>:
 801cf7c:	b538      	push	{r3, r4, r5, lr}
 801cf7e:	4d06      	ldr	r5, [pc, #24]	@ (801cf98 <_sbrk_r+0x1c>)
 801cf80:	2300      	movs	r3, #0
 801cf82:	4604      	mov	r4, r0
 801cf84:	4608      	mov	r0, r1
 801cf86:	602b      	str	r3, [r5, #0]
 801cf88:	f7e4 fff8 	bl	8001f7c <_sbrk>
 801cf8c:	1c43      	adds	r3, r0, #1
 801cf8e:	d102      	bne.n	801cf96 <_sbrk_r+0x1a>
 801cf90:	682b      	ldr	r3, [r5, #0]
 801cf92:	b103      	cbz	r3, 801cf96 <_sbrk_r+0x1a>
 801cf94:	6023      	str	r3, [r4, #0]
 801cf96:	bd38      	pop	{r3, r4, r5, pc}
 801cf98:	24013c70 	.word	0x24013c70

0801cf9c <_write_r>:
 801cf9c:	b538      	push	{r3, r4, r5, lr}
 801cf9e:	4d07      	ldr	r5, [pc, #28]	@ (801cfbc <_write_r+0x20>)
 801cfa0:	4604      	mov	r4, r0
 801cfa2:	4608      	mov	r0, r1
 801cfa4:	4611      	mov	r1, r2
 801cfa6:	2200      	movs	r2, #0
 801cfa8:	602a      	str	r2, [r5, #0]
 801cfaa:	461a      	mov	r2, r3
 801cfac:	f7e4 ff96 	bl	8001edc <_write>
 801cfb0:	1c43      	adds	r3, r0, #1
 801cfb2:	d102      	bne.n	801cfba <_write_r+0x1e>
 801cfb4:	682b      	ldr	r3, [r5, #0]
 801cfb6:	b103      	cbz	r3, 801cfba <_write_r+0x1e>
 801cfb8:	6023      	str	r3, [r4, #0]
 801cfba:	bd38      	pop	{r3, r4, r5, pc}
 801cfbc:	24013c70 	.word	0x24013c70

0801cfc0 <__errno>:
 801cfc0:	4b01      	ldr	r3, [pc, #4]	@ (801cfc8 <__errno+0x8>)
 801cfc2:	6818      	ldr	r0, [r3, #0]
 801cfc4:	4770      	bx	lr
 801cfc6:	bf00      	nop
 801cfc8:	2400068c 	.word	0x2400068c

0801cfcc <__libc_init_array>:
 801cfcc:	b570      	push	{r4, r5, r6, lr}
 801cfce:	4d0d      	ldr	r5, [pc, #52]	@ (801d004 <__libc_init_array+0x38>)
 801cfd0:	4c0d      	ldr	r4, [pc, #52]	@ (801d008 <__libc_init_array+0x3c>)
 801cfd2:	1b64      	subs	r4, r4, r5
 801cfd4:	10a4      	asrs	r4, r4, #2
 801cfd6:	2600      	movs	r6, #0
 801cfd8:	42a6      	cmp	r6, r4
 801cfda:	d109      	bne.n	801cff0 <__libc_init_array+0x24>
 801cfdc:	4d0b      	ldr	r5, [pc, #44]	@ (801d00c <__libc_init_array+0x40>)
 801cfde:	4c0c      	ldr	r4, [pc, #48]	@ (801d010 <__libc_init_array+0x44>)
 801cfe0:	f000 fe64 	bl	801dcac <_init>
 801cfe4:	1b64      	subs	r4, r4, r5
 801cfe6:	10a4      	asrs	r4, r4, #2
 801cfe8:	2600      	movs	r6, #0
 801cfea:	42a6      	cmp	r6, r4
 801cfec:	d105      	bne.n	801cffa <__libc_init_array+0x2e>
 801cfee:	bd70      	pop	{r4, r5, r6, pc}
 801cff0:	f855 3b04 	ldr.w	r3, [r5], #4
 801cff4:	4798      	blx	r3
 801cff6:	3601      	adds	r6, #1
 801cff8:	e7ee      	b.n	801cfd8 <__libc_init_array+0xc>
 801cffa:	f855 3b04 	ldr.w	r3, [r5], #4
 801cffe:	4798      	blx	r3
 801d000:	3601      	adds	r6, #1
 801d002:	e7f2      	b.n	801cfea <__libc_init_array+0x1e>
 801d004:	0801ee98 	.word	0x0801ee98
 801d008:	0801ee98 	.word	0x0801ee98
 801d00c:	0801ee98 	.word	0x0801ee98
 801d010:	0801eea4 	.word	0x0801eea4

0801d014 <__retarget_lock_init_recursive>:
 801d014:	4770      	bx	lr

0801d016 <__retarget_lock_acquire_recursive>:
 801d016:	4770      	bx	lr

0801d018 <__retarget_lock_release_recursive>:
 801d018:	4770      	bx	lr

0801d01a <strcpy>:
 801d01a:	4603      	mov	r3, r0
 801d01c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d020:	f803 2b01 	strb.w	r2, [r3], #1
 801d024:	2a00      	cmp	r2, #0
 801d026:	d1f9      	bne.n	801d01c <strcpy+0x2>
 801d028:	4770      	bx	lr

0801d02a <memcpy>:
 801d02a:	440a      	add	r2, r1
 801d02c:	4291      	cmp	r1, r2
 801d02e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801d032:	d100      	bne.n	801d036 <memcpy+0xc>
 801d034:	4770      	bx	lr
 801d036:	b510      	push	{r4, lr}
 801d038:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d03c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d040:	4291      	cmp	r1, r2
 801d042:	d1f9      	bne.n	801d038 <memcpy+0xe>
 801d044:	bd10      	pop	{r4, pc}
	...

0801d048 <__assert_func>:
 801d048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d04a:	4614      	mov	r4, r2
 801d04c:	461a      	mov	r2, r3
 801d04e:	4b09      	ldr	r3, [pc, #36]	@ (801d074 <__assert_func+0x2c>)
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	4605      	mov	r5, r0
 801d054:	68d8      	ldr	r0, [r3, #12]
 801d056:	b954      	cbnz	r4, 801d06e <__assert_func+0x26>
 801d058:	4b07      	ldr	r3, [pc, #28]	@ (801d078 <__assert_func+0x30>)
 801d05a:	461c      	mov	r4, r3
 801d05c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d060:	9100      	str	r1, [sp, #0]
 801d062:	462b      	mov	r3, r5
 801d064:	4905      	ldr	r1, [pc, #20]	@ (801d07c <__assert_func+0x34>)
 801d066:	f000 fd3f 	bl	801dae8 <fiprintf>
 801d06a:	f000 fdd3 	bl	801dc14 <abort>
 801d06e:	4b04      	ldr	r3, [pc, #16]	@ (801d080 <__assert_func+0x38>)
 801d070:	e7f4      	b.n	801d05c <__assert_func+0x14>
 801d072:	bf00      	nop
 801d074:	2400068c 	.word	0x2400068c
 801d078:	0801ee59 	.word	0x0801ee59
 801d07c:	0801ee2b 	.word	0x0801ee2b
 801d080:	0801ee1e 	.word	0x0801ee1e

0801d084 <__env_lock>:
 801d084:	4801      	ldr	r0, [pc, #4]	@ (801d08c <__env_lock+0x8>)
 801d086:	f7ff bfc6 	b.w	801d016 <__retarget_lock_acquire_recursive>
 801d08a:	bf00      	nop
 801d08c:	24013c74 	.word	0x24013c74

0801d090 <__env_unlock>:
 801d090:	4801      	ldr	r0, [pc, #4]	@ (801d098 <__env_unlock+0x8>)
 801d092:	f7ff bfc1 	b.w	801d018 <__retarget_lock_release_recursive>
 801d096:	bf00      	nop
 801d098:	24013c74 	.word	0x24013c74

0801d09c <_free_r>:
 801d09c:	b538      	push	{r3, r4, r5, lr}
 801d09e:	4605      	mov	r5, r0
 801d0a0:	2900      	cmp	r1, #0
 801d0a2:	d041      	beq.n	801d128 <_free_r+0x8c>
 801d0a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d0a8:	1f0c      	subs	r4, r1, #4
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	bfb8      	it	lt
 801d0ae:	18e4      	addlt	r4, r4, r3
 801d0b0:	f7ff fb30 	bl	801c714 <__malloc_lock>
 801d0b4:	4a1d      	ldr	r2, [pc, #116]	@ (801d12c <_free_r+0x90>)
 801d0b6:	6813      	ldr	r3, [r2, #0]
 801d0b8:	b933      	cbnz	r3, 801d0c8 <_free_r+0x2c>
 801d0ba:	6063      	str	r3, [r4, #4]
 801d0bc:	6014      	str	r4, [r2, #0]
 801d0be:	4628      	mov	r0, r5
 801d0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d0c4:	f7ff bb2c 	b.w	801c720 <__malloc_unlock>
 801d0c8:	42a3      	cmp	r3, r4
 801d0ca:	d908      	bls.n	801d0de <_free_r+0x42>
 801d0cc:	6820      	ldr	r0, [r4, #0]
 801d0ce:	1821      	adds	r1, r4, r0
 801d0d0:	428b      	cmp	r3, r1
 801d0d2:	bf01      	itttt	eq
 801d0d4:	6819      	ldreq	r1, [r3, #0]
 801d0d6:	685b      	ldreq	r3, [r3, #4]
 801d0d8:	1809      	addeq	r1, r1, r0
 801d0da:	6021      	streq	r1, [r4, #0]
 801d0dc:	e7ed      	b.n	801d0ba <_free_r+0x1e>
 801d0de:	461a      	mov	r2, r3
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	b10b      	cbz	r3, 801d0e8 <_free_r+0x4c>
 801d0e4:	42a3      	cmp	r3, r4
 801d0e6:	d9fa      	bls.n	801d0de <_free_r+0x42>
 801d0e8:	6811      	ldr	r1, [r2, #0]
 801d0ea:	1850      	adds	r0, r2, r1
 801d0ec:	42a0      	cmp	r0, r4
 801d0ee:	d10b      	bne.n	801d108 <_free_r+0x6c>
 801d0f0:	6820      	ldr	r0, [r4, #0]
 801d0f2:	4401      	add	r1, r0
 801d0f4:	1850      	adds	r0, r2, r1
 801d0f6:	4283      	cmp	r3, r0
 801d0f8:	6011      	str	r1, [r2, #0]
 801d0fa:	d1e0      	bne.n	801d0be <_free_r+0x22>
 801d0fc:	6818      	ldr	r0, [r3, #0]
 801d0fe:	685b      	ldr	r3, [r3, #4]
 801d100:	6053      	str	r3, [r2, #4]
 801d102:	4408      	add	r0, r1
 801d104:	6010      	str	r0, [r2, #0]
 801d106:	e7da      	b.n	801d0be <_free_r+0x22>
 801d108:	d902      	bls.n	801d110 <_free_r+0x74>
 801d10a:	230c      	movs	r3, #12
 801d10c:	602b      	str	r3, [r5, #0]
 801d10e:	e7d6      	b.n	801d0be <_free_r+0x22>
 801d110:	6820      	ldr	r0, [r4, #0]
 801d112:	1821      	adds	r1, r4, r0
 801d114:	428b      	cmp	r3, r1
 801d116:	bf04      	itt	eq
 801d118:	6819      	ldreq	r1, [r3, #0]
 801d11a:	685b      	ldreq	r3, [r3, #4]
 801d11c:	6063      	str	r3, [r4, #4]
 801d11e:	bf04      	itt	eq
 801d120:	1809      	addeq	r1, r1, r0
 801d122:	6021      	streq	r1, [r4, #0]
 801d124:	6054      	str	r4, [r2, #4]
 801d126:	e7ca      	b.n	801d0be <_free_r+0x22>
 801d128:	bd38      	pop	{r3, r4, r5, pc}
 801d12a:	bf00      	nop
 801d12c:	24013b30 	.word	0x24013b30

0801d130 <_malloc_usable_size_r>:
 801d130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d134:	1f18      	subs	r0, r3, #4
 801d136:	2b00      	cmp	r3, #0
 801d138:	bfbc      	itt	lt
 801d13a:	580b      	ldrlt	r3, [r1, r0]
 801d13c:	18c0      	addlt	r0, r0, r3
 801d13e:	4770      	bx	lr

0801d140 <__ssputs_r>:
 801d140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d144:	688e      	ldr	r6, [r1, #8]
 801d146:	461f      	mov	r7, r3
 801d148:	42be      	cmp	r6, r7
 801d14a:	680b      	ldr	r3, [r1, #0]
 801d14c:	4682      	mov	sl, r0
 801d14e:	460c      	mov	r4, r1
 801d150:	4690      	mov	r8, r2
 801d152:	d82d      	bhi.n	801d1b0 <__ssputs_r+0x70>
 801d154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d158:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d15c:	d026      	beq.n	801d1ac <__ssputs_r+0x6c>
 801d15e:	6965      	ldr	r5, [r4, #20]
 801d160:	6909      	ldr	r1, [r1, #16]
 801d162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d166:	eba3 0901 	sub.w	r9, r3, r1
 801d16a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d16e:	1c7b      	adds	r3, r7, #1
 801d170:	444b      	add	r3, r9
 801d172:	106d      	asrs	r5, r5, #1
 801d174:	429d      	cmp	r5, r3
 801d176:	bf38      	it	cc
 801d178:	461d      	movcc	r5, r3
 801d17a:	0553      	lsls	r3, r2, #21
 801d17c:	d527      	bpl.n	801d1ce <__ssputs_r+0x8e>
 801d17e:	4629      	mov	r1, r5
 801d180:	f7ff fa48 	bl	801c614 <_malloc_r>
 801d184:	4606      	mov	r6, r0
 801d186:	b360      	cbz	r0, 801d1e2 <__ssputs_r+0xa2>
 801d188:	6921      	ldr	r1, [r4, #16]
 801d18a:	464a      	mov	r2, r9
 801d18c:	f7ff ff4d 	bl	801d02a <memcpy>
 801d190:	89a3      	ldrh	r3, [r4, #12]
 801d192:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d19a:	81a3      	strh	r3, [r4, #12]
 801d19c:	6126      	str	r6, [r4, #16]
 801d19e:	6165      	str	r5, [r4, #20]
 801d1a0:	444e      	add	r6, r9
 801d1a2:	eba5 0509 	sub.w	r5, r5, r9
 801d1a6:	6026      	str	r6, [r4, #0]
 801d1a8:	60a5      	str	r5, [r4, #8]
 801d1aa:	463e      	mov	r6, r7
 801d1ac:	42be      	cmp	r6, r7
 801d1ae:	d900      	bls.n	801d1b2 <__ssputs_r+0x72>
 801d1b0:	463e      	mov	r6, r7
 801d1b2:	6820      	ldr	r0, [r4, #0]
 801d1b4:	4632      	mov	r2, r6
 801d1b6:	4641      	mov	r1, r8
 801d1b8:	f7ff fe54 	bl	801ce64 <memmove>
 801d1bc:	68a3      	ldr	r3, [r4, #8]
 801d1be:	1b9b      	subs	r3, r3, r6
 801d1c0:	60a3      	str	r3, [r4, #8]
 801d1c2:	6823      	ldr	r3, [r4, #0]
 801d1c4:	4433      	add	r3, r6
 801d1c6:	6023      	str	r3, [r4, #0]
 801d1c8:	2000      	movs	r0, #0
 801d1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1ce:	462a      	mov	r2, r5
 801d1d0:	f7ff fb20 	bl	801c814 <_realloc_r>
 801d1d4:	4606      	mov	r6, r0
 801d1d6:	2800      	cmp	r0, #0
 801d1d8:	d1e0      	bne.n	801d19c <__ssputs_r+0x5c>
 801d1da:	6921      	ldr	r1, [r4, #16]
 801d1dc:	4650      	mov	r0, sl
 801d1de:	f7ff ff5d 	bl	801d09c <_free_r>
 801d1e2:	230c      	movs	r3, #12
 801d1e4:	f8ca 3000 	str.w	r3, [sl]
 801d1e8:	89a3      	ldrh	r3, [r4, #12]
 801d1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d1ee:	81a3      	strh	r3, [r4, #12]
 801d1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1f4:	e7e9      	b.n	801d1ca <__ssputs_r+0x8a>
	...

0801d1f8 <_svfiprintf_r>:
 801d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1fc:	4698      	mov	r8, r3
 801d1fe:	898b      	ldrh	r3, [r1, #12]
 801d200:	061b      	lsls	r3, r3, #24
 801d202:	b09d      	sub	sp, #116	@ 0x74
 801d204:	4607      	mov	r7, r0
 801d206:	460d      	mov	r5, r1
 801d208:	4614      	mov	r4, r2
 801d20a:	d510      	bpl.n	801d22e <_svfiprintf_r+0x36>
 801d20c:	690b      	ldr	r3, [r1, #16]
 801d20e:	b973      	cbnz	r3, 801d22e <_svfiprintf_r+0x36>
 801d210:	2140      	movs	r1, #64	@ 0x40
 801d212:	f7ff f9ff 	bl	801c614 <_malloc_r>
 801d216:	6028      	str	r0, [r5, #0]
 801d218:	6128      	str	r0, [r5, #16]
 801d21a:	b930      	cbnz	r0, 801d22a <_svfiprintf_r+0x32>
 801d21c:	230c      	movs	r3, #12
 801d21e:	603b      	str	r3, [r7, #0]
 801d220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d224:	b01d      	add	sp, #116	@ 0x74
 801d226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d22a:	2340      	movs	r3, #64	@ 0x40
 801d22c:	616b      	str	r3, [r5, #20]
 801d22e:	2300      	movs	r3, #0
 801d230:	9309      	str	r3, [sp, #36]	@ 0x24
 801d232:	2320      	movs	r3, #32
 801d234:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d238:	f8cd 800c 	str.w	r8, [sp, #12]
 801d23c:	2330      	movs	r3, #48	@ 0x30
 801d23e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d3dc <_svfiprintf_r+0x1e4>
 801d242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d246:	f04f 0901 	mov.w	r9, #1
 801d24a:	4623      	mov	r3, r4
 801d24c:	469a      	mov	sl, r3
 801d24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d252:	b10a      	cbz	r2, 801d258 <_svfiprintf_r+0x60>
 801d254:	2a25      	cmp	r2, #37	@ 0x25
 801d256:	d1f9      	bne.n	801d24c <_svfiprintf_r+0x54>
 801d258:	ebba 0b04 	subs.w	fp, sl, r4
 801d25c:	d00b      	beq.n	801d276 <_svfiprintf_r+0x7e>
 801d25e:	465b      	mov	r3, fp
 801d260:	4622      	mov	r2, r4
 801d262:	4629      	mov	r1, r5
 801d264:	4638      	mov	r0, r7
 801d266:	f7ff ff6b 	bl	801d140 <__ssputs_r>
 801d26a:	3001      	adds	r0, #1
 801d26c:	f000 80a7 	beq.w	801d3be <_svfiprintf_r+0x1c6>
 801d270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d272:	445a      	add	r2, fp
 801d274:	9209      	str	r2, [sp, #36]	@ 0x24
 801d276:	f89a 3000 	ldrb.w	r3, [sl]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	f000 809f 	beq.w	801d3be <_svfiprintf_r+0x1c6>
 801d280:	2300      	movs	r3, #0
 801d282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d28a:	f10a 0a01 	add.w	sl, sl, #1
 801d28e:	9304      	str	r3, [sp, #16]
 801d290:	9307      	str	r3, [sp, #28]
 801d292:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d296:	931a      	str	r3, [sp, #104]	@ 0x68
 801d298:	4654      	mov	r4, sl
 801d29a:	2205      	movs	r2, #5
 801d29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2a0:	484e      	ldr	r0, [pc, #312]	@ (801d3dc <_svfiprintf_r+0x1e4>)
 801d2a2:	f7e3 f835 	bl	8000310 <memchr>
 801d2a6:	9a04      	ldr	r2, [sp, #16]
 801d2a8:	b9d8      	cbnz	r0, 801d2e2 <_svfiprintf_r+0xea>
 801d2aa:	06d0      	lsls	r0, r2, #27
 801d2ac:	bf44      	itt	mi
 801d2ae:	2320      	movmi	r3, #32
 801d2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d2b4:	0711      	lsls	r1, r2, #28
 801d2b6:	bf44      	itt	mi
 801d2b8:	232b      	movmi	r3, #43	@ 0x2b
 801d2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d2be:	f89a 3000 	ldrb.w	r3, [sl]
 801d2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d2c4:	d015      	beq.n	801d2f2 <_svfiprintf_r+0xfa>
 801d2c6:	9a07      	ldr	r2, [sp, #28]
 801d2c8:	4654      	mov	r4, sl
 801d2ca:	2000      	movs	r0, #0
 801d2cc:	f04f 0c0a 	mov.w	ip, #10
 801d2d0:	4621      	mov	r1, r4
 801d2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2d6:	3b30      	subs	r3, #48	@ 0x30
 801d2d8:	2b09      	cmp	r3, #9
 801d2da:	d94b      	bls.n	801d374 <_svfiprintf_r+0x17c>
 801d2dc:	b1b0      	cbz	r0, 801d30c <_svfiprintf_r+0x114>
 801d2de:	9207      	str	r2, [sp, #28]
 801d2e0:	e014      	b.n	801d30c <_svfiprintf_r+0x114>
 801d2e2:	eba0 0308 	sub.w	r3, r0, r8
 801d2e6:	fa09 f303 	lsl.w	r3, r9, r3
 801d2ea:	4313      	orrs	r3, r2
 801d2ec:	9304      	str	r3, [sp, #16]
 801d2ee:	46a2      	mov	sl, r4
 801d2f0:	e7d2      	b.n	801d298 <_svfiprintf_r+0xa0>
 801d2f2:	9b03      	ldr	r3, [sp, #12]
 801d2f4:	1d19      	adds	r1, r3, #4
 801d2f6:	681b      	ldr	r3, [r3, #0]
 801d2f8:	9103      	str	r1, [sp, #12]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	bfbb      	ittet	lt
 801d2fe:	425b      	neglt	r3, r3
 801d300:	f042 0202 	orrlt.w	r2, r2, #2
 801d304:	9307      	strge	r3, [sp, #28]
 801d306:	9307      	strlt	r3, [sp, #28]
 801d308:	bfb8      	it	lt
 801d30a:	9204      	strlt	r2, [sp, #16]
 801d30c:	7823      	ldrb	r3, [r4, #0]
 801d30e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d310:	d10a      	bne.n	801d328 <_svfiprintf_r+0x130>
 801d312:	7863      	ldrb	r3, [r4, #1]
 801d314:	2b2a      	cmp	r3, #42	@ 0x2a
 801d316:	d132      	bne.n	801d37e <_svfiprintf_r+0x186>
 801d318:	9b03      	ldr	r3, [sp, #12]
 801d31a:	1d1a      	adds	r2, r3, #4
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	9203      	str	r2, [sp, #12]
 801d320:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d324:	3402      	adds	r4, #2
 801d326:	9305      	str	r3, [sp, #20]
 801d328:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d3ec <_svfiprintf_r+0x1f4>
 801d32c:	7821      	ldrb	r1, [r4, #0]
 801d32e:	2203      	movs	r2, #3
 801d330:	4650      	mov	r0, sl
 801d332:	f7e2 ffed 	bl	8000310 <memchr>
 801d336:	b138      	cbz	r0, 801d348 <_svfiprintf_r+0x150>
 801d338:	9b04      	ldr	r3, [sp, #16]
 801d33a:	eba0 000a 	sub.w	r0, r0, sl
 801d33e:	2240      	movs	r2, #64	@ 0x40
 801d340:	4082      	lsls	r2, r0
 801d342:	4313      	orrs	r3, r2
 801d344:	3401      	adds	r4, #1
 801d346:	9304      	str	r3, [sp, #16]
 801d348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d34c:	4824      	ldr	r0, [pc, #144]	@ (801d3e0 <_svfiprintf_r+0x1e8>)
 801d34e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d352:	2206      	movs	r2, #6
 801d354:	f7e2 ffdc 	bl	8000310 <memchr>
 801d358:	2800      	cmp	r0, #0
 801d35a:	d036      	beq.n	801d3ca <_svfiprintf_r+0x1d2>
 801d35c:	4b21      	ldr	r3, [pc, #132]	@ (801d3e4 <_svfiprintf_r+0x1ec>)
 801d35e:	bb1b      	cbnz	r3, 801d3a8 <_svfiprintf_r+0x1b0>
 801d360:	9b03      	ldr	r3, [sp, #12]
 801d362:	3307      	adds	r3, #7
 801d364:	f023 0307 	bic.w	r3, r3, #7
 801d368:	3308      	adds	r3, #8
 801d36a:	9303      	str	r3, [sp, #12]
 801d36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d36e:	4433      	add	r3, r6
 801d370:	9309      	str	r3, [sp, #36]	@ 0x24
 801d372:	e76a      	b.n	801d24a <_svfiprintf_r+0x52>
 801d374:	fb0c 3202 	mla	r2, ip, r2, r3
 801d378:	460c      	mov	r4, r1
 801d37a:	2001      	movs	r0, #1
 801d37c:	e7a8      	b.n	801d2d0 <_svfiprintf_r+0xd8>
 801d37e:	2300      	movs	r3, #0
 801d380:	3401      	adds	r4, #1
 801d382:	9305      	str	r3, [sp, #20]
 801d384:	4619      	mov	r1, r3
 801d386:	f04f 0c0a 	mov.w	ip, #10
 801d38a:	4620      	mov	r0, r4
 801d38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d390:	3a30      	subs	r2, #48	@ 0x30
 801d392:	2a09      	cmp	r2, #9
 801d394:	d903      	bls.n	801d39e <_svfiprintf_r+0x1a6>
 801d396:	2b00      	cmp	r3, #0
 801d398:	d0c6      	beq.n	801d328 <_svfiprintf_r+0x130>
 801d39a:	9105      	str	r1, [sp, #20]
 801d39c:	e7c4      	b.n	801d328 <_svfiprintf_r+0x130>
 801d39e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d3a2:	4604      	mov	r4, r0
 801d3a4:	2301      	movs	r3, #1
 801d3a6:	e7f0      	b.n	801d38a <_svfiprintf_r+0x192>
 801d3a8:	ab03      	add	r3, sp, #12
 801d3aa:	9300      	str	r3, [sp, #0]
 801d3ac:	462a      	mov	r2, r5
 801d3ae:	4b0e      	ldr	r3, [pc, #56]	@ (801d3e8 <_svfiprintf_r+0x1f0>)
 801d3b0:	a904      	add	r1, sp, #16
 801d3b2:	4638      	mov	r0, r7
 801d3b4:	f3af 8000 	nop.w
 801d3b8:	1c42      	adds	r2, r0, #1
 801d3ba:	4606      	mov	r6, r0
 801d3bc:	d1d6      	bne.n	801d36c <_svfiprintf_r+0x174>
 801d3be:	89ab      	ldrh	r3, [r5, #12]
 801d3c0:	065b      	lsls	r3, r3, #25
 801d3c2:	f53f af2d 	bmi.w	801d220 <_svfiprintf_r+0x28>
 801d3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d3c8:	e72c      	b.n	801d224 <_svfiprintf_r+0x2c>
 801d3ca:	ab03      	add	r3, sp, #12
 801d3cc:	9300      	str	r3, [sp, #0]
 801d3ce:	462a      	mov	r2, r5
 801d3d0:	4b05      	ldr	r3, [pc, #20]	@ (801d3e8 <_svfiprintf_r+0x1f0>)
 801d3d2:	a904      	add	r1, sp, #16
 801d3d4:	4638      	mov	r0, r7
 801d3d6:	f000 f9bb 	bl	801d750 <_printf_i>
 801d3da:	e7ed      	b.n	801d3b8 <_svfiprintf_r+0x1c0>
 801d3dc:	0801ee5a 	.word	0x0801ee5a
 801d3e0:	0801ee64 	.word	0x0801ee64
 801d3e4:	00000000 	.word	0x00000000
 801d3e8:	0801d141 	.word	0x0801d141
 801d3ec:	0801ee60 	.word	0x0801ee60

0801d3f0 <__sfputc_r>:
 801d3f0:	6893      	ldr	r3, [r2, #8]
 801d3f2:	3b01      	subs	r3, #1
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	b410      	push	{r4}
 801d3f8:	6093      	str	r3, [r2, #8]
 801d3fa:	da08      	bge.n	801d40e <__sfputc_r+0x1e>
 801d3fc:	6994      	ldr	r4, [r2, #24]
 801d3fe:	42a3      	cmp	r3, r4
 801d400:	db01      	blt.n	801d406 <__sfputc_r+0x16>
 801d402:	290a      	cmp	r1, #10
 801d404:	d103      	bne.n	801d40e <__sfputc_r+0x1e>
 801d406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d40a:	f7ff bc87 	b.w	801cd1c <__swbuf_r>
 801d40e:	6813      	ldr	r3, [r2, #0]
 801d410:	1c58      	adds	r0, r3, #1
 801d412:	6010      	str	r0, [r2, #0]
 801d414:	7019      	strb	r1, [r3, #0]
 801d416:	4608      	mov	r0, r1
 801d418:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d41c:	4770      	bx	lr

0801d41e <__sfputs_r>:
 801d41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d420:	4606      	mov	r6, r0
 801d422:	460f      	mov	r7, r1
 801d424:	4614      	mov	r4, r2
 801d426:	18d5      	adds	r5, r2, r3
 801d428:	42ac      	cmp	r4, r5
 801d42a:	d101      	bne.n	801d430 <__sfputs_r+0x12>
 801d42c:	2000      	movs	r0, #0
 801d42e:	e007      	b.n	801d440 <__sfputs_r+0x22>
 801d430:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d434:	463a      	mov	r2, r7
 801d436:	4630      	mov	r0, r6
 801d438:	f7ff ffda 	bl	801d3f0 <__sfputc_r>
 801d43c:	1c43      	adds	r3, r0, #1
 801d43e:	d1f3      	bne.n	801d428 <__sfputs_r+0xa>
 801d440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d444 <_vfiprintf_r>:
 801d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d448:	460d      	mov	r5, r1
 801d44a:	b09d      	sub	sp, #116	@ 0x74
 801d44c:	4614      	mov	r4, r2
 801d44e:	4698      	mov	r8, r3
 801d450:	4606      	mov	r6, r0
 801d452:	b118      	cbz	r0, 801d45c <_vfiprintf_r+0x18>
 801d454:	6a03      	ldr	r3, [r0, #32]
 801d456:	b90b      	cbnz	r3, 801d45c <_vfiprintf_r+0x18>
 801d458:	f7ff fb0e 	bl	801ca78 <__sinit>
 801d45c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d45e:	07d9      	lsls	r1, r3, #31
 801d460:	d405      	bmi.n	801d46e <_vfiprintf_r+0x2a>
 801d462:	89ab      	ldrh	r3, [r5, #12]
 801d464:	059a      	lsls	r2, r3, #22
 801d466:	d402      	bmi.n	801d46e <_vfiprintf_r+0x2a>
 801d468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d46a:	f7ff fdd4 	bl	801d016 <__retarget_lock_acquire_recursive>
 801d46e:	89ab      	ldrh	r3, [r5, #12]
 801d470:	071b      	lsls	r3, r3, #28
 801d472:	d501      	bpl.n	801d478 <_vfiprintf_r+0x34>
 801d474:	692b      	ldr	r3, [r5, #16]
 801d476:	b99b      	cbnz	r3, 801d4a0 <_vfiprintf_r+0x5c>
 801d478:	4629      	mov	r1, r5
 801d47a:	4630      	mov	r0, r6
 801d47c:	f7ff fc8c 	bl	801cd98 <__swsetup_r>
 801d480:	b170      	cbz	r0, 801d4a0 <_vfiprintf_r+0x5c>
 801d482:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d484:	07dc      	lsls	r4, r3, #31
 801d486:	d504      	bpl.n	801d492 <_vfiprintf_r+0x4e>
 801d488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d48c:	b01d      	add	sp, #116	@ 0x74
 801d48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d492:	89ab      	ldrh	r3, [r5, #12]
 801d494:	0598      	lsls	r0, r3, #22
 801d496:	d4f7      	bmi.n	801d488 <_vfiprintf_r+0x44>
 801d498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d49a:	f7ff fdbd 	bl	801d018 <__retarget_lock_release_recursive>
 801d49e:	e7f3      	b.n	801d488 <_vfiprintf_r+0x44>
 801d4a0:	2300      	movs	r3, #0
 801d4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d4a4:	2320      	movs	r3, #32
 801d4a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d4aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801d4ae:	2330      	movs	r3, #48	@ 0x30
 801d4b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d660 <_vfiprintf_r+0x21c>
 801d4b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d4b8:	f04f 0901 	mov.w	r9, #1
 801d4bc:	4623      	mov	r3, r4
 801d4be:	469a      	mov	sl, r3
 801d4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d4c4:	b10a      	cbz	r2, 801d4ca <_vfiprintf_r+0x86>
 801d4c6:	2a25      	cmp	r2, #37	@ 0x25
 801d4c8:	d1f9      	bne.n	801d4be <_vfiprintf_r+0x7a>
 801d4ca:	ebba 0b04 	subs.w	fp, sl, r4
 801d4ce:	d00b      	beq.n	801d4e8 <_vfiprintf_r+0xa4>
 801d4d0:	465b      	mov	r3, fp
 801d4d2:	4622      	mov	r2, r4
 801d4d4:	4629      	mov	r1, r5
 801d4d6:	4630      	mov	r0, r6
 801d4d8:	f7ff ffa1 	bl	801d41e <__sfputs_r>
 801d4dc:	3001      	adds	r0, #1
 801d4de:	f000 80a7 	beq.w	801d630 <_vfiprintf_r+0x1ec>
 801d4e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4e4:	445a      	add	r2, fp
 801d4e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d4e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	f000 809f 	beq.w	801d630 <_vfiprintf_r+0x1ec>
 801d4f2:	2300      	movs	r3, #0
 801d4f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d4fc:	f10a 0a01 	add.w	sl, sl, #1
 801d500:	9304      	str	r3, [sp, #16]
 801d502:	9307      	str	r3, [sp, #28]
 801d504:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d508:	931a      	str	r3, [sp, #104]	@ 0x68
 801d50a:	4654      	mov	r4, sl
 801d50c:	2205      	movs	r2, #5
 801d50e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d512:	4853      	ldr	r0, [pc, #332]	@ (801d660 <_vfiprintf_r+0x21c>)
 801d514:	f7e2 fefc 	bl	8000310 <memchr>
 801d518:	9a04      	ldr	r2, [sp, #16]
 801d51a:	b9d8      	cbnz	r0, 801d554 <_vfiprintf_r+0x110>
 801d51c:	06d1      	lsls	r1, r2, #27
 801d51e:	bf44      	itt	mi
 801d520:	2320      	movmi	r3, #32
 801d522:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d526:	0713      	lsls	r3, r2, #28
 801d528:	bf44      	itt	mi
 801d52a:	232b      	movmi	r3, #43	@ 0x2b
 801d52c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d530:	f89a 3000 	ldrb.w	r3, [sl]
 801d534:	2b2a      	cmp	r3, #42	@ 0x2a
 801d536:	d015      	beq.n	801d564 <_vfiprintf_r+0x120>
 801d538:	9a07      	ldr	r2, [sp, #28]
 801d53a:	4654      	mov	r4, sl
 801d53c:	2000      	movs	r0, #0
 801d53e:	f04f 0c0a 	mov.w	ip, #10
 801d542:	4621      	mov	r1, r4
 801d544:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d548:	3b30      	subs	r3, #48	@ 0x30
 801d54a:	2b09      	cmp	r3, #9
 801d54c:	d94b      	bls.n	801d5e6 <_vfiprintf_r+0x1a2>
 801d54e:	b1b0      	cbz	r0, 801d57e <_vfiprintf_r+0x13a>
 801d550:	9207      	str	r2, [sp, #28]
 801d552:	e014      	b.n	801d57e <_vfiprintf_r+0x13a>
 801d554:	eba0 0308 	sub.w	r3, r0, r8
 801d558:	fa09 f303 	lsl.w	r3, r9, r3
 801d55c:	4313      	orrs	r3, r2
 801d55e:	9304      	str	r3, [sp, #16]
 801d560:	46a2      	mov	sl, r4
 801d562:	e7d2      	b.n	801d50a <_vfiprintf_r+0xc6>
 801d564:	9b03      	ldr	r3, [sp, #12]
 801d566:	1d19      	adds	r1, r3, #4
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	9103      	str	r1, [sp, #12]
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	bfbb      	ittet	lt
 801d570:	425b      	neglt	r3, r3
 801d572:	f042 0202 	orrlt.w	r2, r2, #2
 801d576:	9307      	strge	r3, [sp, #28]
 801d578:	9307      	strlt	r3, [sp, #28]
 801d57a:	bfb8      	it	lt
 801d57c:	9204      	strlt	r2, [sp, #16]
 801d57e:	7823      	ldrb	r3, [r4, #0]
 801d580:	2b2e      	cmp	r3, #46	@ 0x2e
 801d582:	d10a      	bne.n	801d59a <_vfiprintf_r+0x156>
 801d584:	7863      	ldrb	r3, [r4, #1]
 801d586:	2b2a      	cmp	r3, #42	@ 0x2a
 801d588:	d132      	bne.n	801d5f0 <_vfiprintf_r+0x1ac>
 801d58a:	9b03      	ldr	r3, [sp, #12]
 801d58c:	1d1a      	adds	r2, r3, #4
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	9203      	str	r2, [sp, #12]
 801d592:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d596:	3402      	adds	r4, #2
 801d598:	9305      	str	r3, [sp, #20]
 801d59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d670 <_vfiprintf_r+0x22c>
 801d59e:	7821      	ldrb	r1, [r4, #0]
 801d5a0:	2203      	movs	r2, #3
 801d5a2:	4650      	mov	r0, sl
 801d5a4:	f7e2 feb4 	bl	8000310 <memchr>
 801d5a8:	b138      	cbz	r0, 801d5ba <_vfiprintf_r+0x176>
 801d5aa:	9b04      	ldr	r3, [sp, #16]
 801d5ac:	eba0 000a 	sub.w	r0, r0, sl
 801d5b0:	2240      	movs	r2, #64	@ 0x40
 801d5b2:	4082      	lsls	r2, r0
 801d5b4:	4313      	orrs	r3, r2
 801d5b6:	3401      	adds	r4, #1
 801d5b8:	9304      	str	r3, [sp, #16]
 801d5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5be:	4829      	ldr	r0, [pc, #164]	@ (801d664 <_vfiprintf_r+0x220>)
 801d5c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d5c4:	2206      	movs	r2, #6
 801d5c6:	f7e2 fea3 	bl	8000310 <memchr>
 801d5ca:	2800      	cmp	r0, #0
 801d5cc:	d03f      	beq.n	801d64e <_vfiprintf_r+0x20a>
 801d5ce:	4b26      	ldr	r3, [pc, #152]	@ (801d668 <_vfiprintf_r+0x224>)
 801d5d0:	bb1b      	cbnz	r3, 801d61a <_vfiprintf_r+0x1d6>
 801d5d2:	9b03      	ldr	r3, [sp, #12]
 801d5d4:	3307      	adds	r3, #7
 801d5d6:	f023 0307 	bic.w	r3, r3, #7
 801d5da:	3308      	adds	r3, #8
 801d5dc:	9303      	str	r3, [sp, #12]
 801d5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5e0:	443b      	add	r3, r7
 801d5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5e4:	e76a      	b.n	801d4bc <_vfiprintf_r+0x78>
 801d5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d5ea:	460c      	mov	r4, r1
 801d5ec:	2001      	movs	r0, #1
 801d5ee:	e7a8      	b.n	801d542 <_vfiprintf_r+0xfe>
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	3401      	adds	r4, #1
 801d5f4:	9305      	str	r3, [sp, #20]
 801d5f6:	4619      	mov	r1, r3
 801d5f8:	f04f 0c0a 	mov.w	ip, #10
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d602:	3a30      	subs	r2, #48	@ 0x30
 801d604:	2a09      	cmp	r2, #9
 801d606:	d903      	bls.n	801d610 <_vfiprintf_r+0x1cc>
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d0c6      	beq.n	801d59a <_vfiprintf_r+0x156>
 801d60c:	9105      	str	r1, [sp, #20]
 801d60e:	e7c4      	b.n	801d59a <_vfiprintf_r+0x156>
 801d610:	fb0c 2101 	mla	r1, ip, r1, r2
 801d614:	4604      	mov	r4, r0
 801d616:	2301      	movs	r3, #1
 801d618:	e7f0      	b.n	801d5fc <_vfiprintf_r+0x1b8>
 801d61a:	ab03      	add	r3, sp, #12
 801d61c:	9300      	str	r3, [sp, #0]
 801d61e:	462a      	mov	r2, r5
 801d620:	4b12      	ldr	r3, [pc, #72]	@ (801d66c <_vfiprintf_r+0x228>)
 801d622:	a904      	add	r1, sp, #16
 801d624:	4630      	mov	r0, r6
 801d626:	f3af 8000 	nop.w
 801d62a:	4607      	mov	r7, r0
 801d62c:	1c78      	adds	r0, r7, #1
 801d62e:	d1d6      	bne.n	801d5de <_vfiprintf_r+0x19a>
 801d630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d632:	07d9      	lsls	r1, r3, #31
 801d634:	d405      	bmi.n	801d642 <_vfiprintf_r+0x1fe>
 801d636:	89ab      	ldrh	r3, [r5, #12]
 801d638:	059a      	lsls	r2, r3, #22
 801d63a:	d402      	bmi.n	801d642 <_vfiprintf_r+0x1fe>
 801d63c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d63e:	f7ff fceb 	bl	801d018 <__retarget_lock_release_recursive>
 801d642:	89ab      	ldrh	r3, [r5, #12]
 801d644:	065b      	lsls	r3, r3, #25
 801d646:	f53f af1f 	bmi.w	801d488 <_vfiprintf_r+0x44>
 801d64a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d64c:	e71e      	b.n	801d48c <_vfiprintf_r+0x48>
 801d64e:	ab03      	add	r3, sp, #12
 801d650:	9300      	str	r3, [sp, #0]
 801d652:	462a      	mov	r2, r5
 801d654:	4b05      	ldr	r3, [pc, #20]	@ (801d66c <_vfiprintf_r+0x228>)
 801d656:	a904      	add	r1, sp, #16
 801d658:	4630      	mov	r0, r6
 801d65a:	f000 f879 	bl	801d750 <_printf_i>
 801d65e:	e7e4      	b.n	801d62a <_vfiprintf_r+0x1e6>
 801d660:	0801ee5a 	.word	0x0801ee5a
 801d664:	0801ee64 	.word	0x0801ee64
 801d668:	00000000 	.word	0x00000000
 801d66c:	0801d41f 	.word	0x0801d41f
 801d670:	0801ee60 	.word	0x0801ee60

0801d674 <_printf_common>:
 801d674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d678:	4616      	mov	r6, r2
 801d67a:	4698      	mov	r8, r3
 801d67c:	688a      	ldr	r2, [r1, #8]
 801d67e:	690b      	ldr	r3, [r1, #16]
 801d680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d684:	4293      	cmp	r3, r2
 801d686:	bfb8      	it	lt
 801d688:	4613      	movlt	r3, r2
 801d68a:	6033      	str	r3, [r6, #0]
 801d68c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d690:	4607      	mov	r7, r0
 801d692:	460c      	mov	r4, r1
 801d694:	b10a      	cbz	r2, 801d69a <_printf_common+0x26>
 801d696:	3301      	adds	r3, #1
 801d698:	6033      	str	r3, [r6, #0]
 801d69a:	6823      	ldr	r3, [r4, #0]
 801d69c:	0699      	lsls	r1, r3, #26
 801d69e:	bf42      	ittt	mi
 801d6a0:	6833      	ldrmi	r3, [r6, #0]
 801d6a2:	3302      	addmi	r3, #2
 801d6a4:	6033      	strmi	r3, [r6, #0]
 801d6a6:	6825      	ldr	r5, [r4, #0]
 801d6a8:	f015 0506 	ands.w	r5, r5, #6
 801d6ac:	d106      	bne.n	801d6bc <_printf_common+0x48>
 801d6ae:	f104 0a19 	add.w	sl, r4, #25
 801d6b2:	68e3      	ldr	r3, [r4, #12]
 801d6b4:	6832      	ldr	r2, [r6, #0]
 801d6b6:	1a9b      	subs	r3, r3, r2
 801d6b8:	42ab      	cmp	r3, r5
 801d6ba:	dc26      	bgt.n	801d70a <_printf_common+0x96>
 801d6bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d6c0:	6822      	ldr	r2, [r4, #0]
 801d6c2:	3b00      	subs	r3, #0
 801d6c4:	bf18      	it	ne
 801d6c6:	2301      	movne	r3, #1
 801d6c8:	0692      	lsls	r2, r2, #26
 801d6ca:	d42b      	bmi.n	801d724 <_printf_common+0xb0>
 801d6cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d6d0:	4641      	mov	r1, r8
 801d6d2:	4638      	mov	r0, r7
 801d6d4:	47c8      	blx	r9
 801d6d6:	3001      	adds	r0, #1
 801d6d8:	d01e      	beq.n	801d718 <_printf_common+0xa4>
 801d6da:	6823      	ldr	r3, [r4, #0]
 801d6dc:	6922      	ldr	r2, [r4, #16]
 801d6de:	f003 0306 	and.w	r3, r3, #6
 801d6e2:	2b04      	cmp	r3, #4
 801d6e4:	bf02      	ittt	eq
 801d6e6:	68e5      	ldreq	r5, [r4, #12]
 801d6e8:	6833      	ldreq	r3, [r6, #0]
 801d6ea:	1aed      	subeq	r5, r5, r3
 801d6ec:	68a3      	ldr	r3, [r4, #8]
 801d6ee:	bf0c      	ite	eq
 801d6f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d6f4:	2500      	movne	r5, #0
 801d6f6:	4293      	cmp	r3, r2
 801d6f8:	bfc4      	itt	gt
 801d6fa:	1a9b      	subgt	r3, r3, r2
 801d6fc:	18ed      	addgt	r5, r5, r3
 801d6fe:	2600      	movs	r6, #0
 801d700:	341a      	adds	r4, #26
 801d702:	42b5      	cmp	r5, r6
 801d704:	d11a      	bne.n	801d73c <_printf_common+0xc8>
 801d706:	2000      	movs	r0, #0
 801d708:	e008      	b.n	801d71c <_printf_common+0xa8>
 801d70a:	2301      	movs	r3, #1
 801d70c:	4652      	mov	r2, sl
 801d70e:	4641      	mov	r1, r8
 801d710:	4638      	mov	r0, r7
 801d712:	47c8      	blx	r9
 801d714:	3001      	adds	r0, #1
 801d716:	d103      	bne.n	801d720 <_printf_common+0xac>
 801d718:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d720:	3501      	adds	r5, #1
 801d722:	e7c6      	b.n	801d6b2 <_printf_common+0x3e>
 801d724:	18e1      	adds	r1, r4, r3
 801d726:	1c5a      	adds	r2, r3, #1
 801d728:	2030      	movs	r0, #48	@ 0x30
 801d72a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d72e:	4422      	add	r2, r4
 801d730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d738:	3302      	adds	r3, #2
 801d73a:	e7c7      	b.n	801d6cc <_printf_common+0x58>
 801d73c:	2301      	movs	r3, #1
 801d73e:	4622      	mov	r2, r4
 801d740:	4641      	mov	r1, r8
 801d742:	4638      	mov	r0, r7
 801d744:	47c8      	blx	r9
 801d746:	3001      	adds	r0, #1
 801d748:	d0e6      	beq.n	801d718 <_printf_common+0xa4>
 801d74a:	3601      	adds	r6, #1
 801d74c:	e7d9      	b.n	801d702 <_printf_common+0x8e>
	...

0801d750 <_printf_i>:
 801d750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d754:	7e0f      	ldrb	r7, [r1, #24]
 801d756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d758:	2f78      	cmp	r7, #120	@ 0x78
 801d75a:	4691      	mov	r9, r2
 801d75c:	4680      	mov	r8, r0
 801d75e:	460c      	mov	r4, r1
 801d760:	469a      	mov	sl, r3
 801d762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d766:	d807      	bhi.n	801d778 <_printf_i+0x28>
 801d768:	2f62      	cmp	r7, #98	@ 0x62
 801d76a:	d80a      	bhi.n	801d782 <_printf_i+0x32>
 801d76c:	2f00      	cmp	r7, #0
 801d76e:	f000 80d2 	beq.w	801d916 <_printf_i+0x1c6>
 801d772:	2f58      	cmp	r7, #88	@ 0x58
 801d774:	f000 80b9 	beq.w	801d8ea <_printf_i+0x19a>
 801d778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d77c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d780:	e03a      	b.n	801d7f8 <_printf_i+0xa8>
 801d782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d786:	2b15      	cmp	r3, #21
 801d788:	d8f6      	bhi.n	801d778 <_printf_i+0x28>
 801d78a:	a101      	add	r1, pc, #4	@ (adr r1, 801d790 <_printf_i+0x40>)
 801d78c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d790:	0801d7e9 	.word	0x0801d7e9
 801d794:	0801d7fd 	.word	0x0801d7fd
 801d798:	0801d779 	.word	0x0801d779
 801d79c:	0801d779 	.word	0x0801d779
 801d7a0:	0801d779 	.word	0x0801d779
 801d7a4:	0801d779 	.word	0x0801d779
 801d7a8:	0801d7fd 	.word	0x0801d7fd
 801d7ac:	0801d779 	.word	0x0801d779
 801d7b0:	0801d779 	.word	0x0801d779
 801d7b4:	0801d779 	.word	0x0801d779
 801d7b8:	0801d779 	.word	0x0801d779
 801d7bc:	0801d8fd 	.word	0x0801d8fd
 801d7c0:	0801d827 	.word	0x0801d827
 801d7c4:	0801d8b7 	.word	0x0801d8b7
 801d7c8:	0801d779 	.word	0x0801d779
 801d7cc:	0801d779 	.word	0x0801d779
 801d7d0:	0801d91f 	.word	0x0801d91f
 801d7d4:	0801d779 	.word	0x0801d779
 801d7d8:	0801d827 	.word	0x0801d827
 801d7dc:	0801d779 	.word	0x0801d779
 801d7e0:	0801d779 	.word	0x0801d779
 801d7e4:	0801d8bf 	.word	0x0801d8bf
 801d7e8:	6833      	ldr	r3, [r6, #0]
 801d7ea:	1d1a      	adds	r2, r3, #4
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	6032      	str	r2, [r6, #0]
 801d7f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d7f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d7f8:	2301      	movs	r3, #1
 801d7fa:	e09d      	b.n	801d938 <_printf_i+0x1e8>
 801d7fc:	6833      	ldr	r3, [r6, #0]
 801d7fe:	6820      	ldr	r0, [r4, #0]
 801d800:	1d19      	adds	r1, r3, #4
 801d802:	6031      	str	r1, [r6, #0]
 801d804:	0606      	lsls	r6, r0, #24
 801d806:	d501      	bpl.n	801d80c <_printf_i+0xbc>
 801d808:	681d      	ldr	r5, [r3, #0]
 801d80a:	e003      	b.n	801d814 <_printf_i+0xc4>
 801d80c:	0645      	lsls	r5, r0, #25
 801d80e:	d5fb      	bpl.n	801d808 <_printf_i+0xb8>
 801d810:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d814:	2d00      	cmp	r5, #0
 801d816:	da03      	bge.n	801d820 <_printf_i+0xd0>
 801d818:	232d      	movs	r3, #45	@ 0x2d
 801d81a:	426d      	negs	r5, r5
 801d81c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d820:	4859      	ldr	r0, [pc, #356]	@ (801d988 <_printf_i+0x238>)
 801d822:	230a      	movs	r3, #10
 801d824:	e011      	b.n	801d84a <_printf_i+0xfa>
 801d826:	6821      	ldr	r1, [r4, #0]
 801d828:	6833      	ldr	r3, [r6, #0]
 801d82a:	0608      	lsls	r0, r1, #24
 801d82c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d830:	d402      	bmi.n	801d838 <_printf_i+0xe8>
 801d832:	0649      	lsls	r1, r1, #25
 801d834:	bf48      	it	mi
 801d836:	b2ad      	uxthmi	r5, r5
 801d838:	2f6f      	cmp	r7, #111	@ 0x6f
 801d83a:	4853      	ldr	r0, [pc, #332]	@ (801d988 <_printf_i+0x238>)
 801d83c:	6033      	str	r3, [r6, #0]
 801d83e:	bf14      	ite	ne
 801d840:	230a      	movne	r3, #10
 801d842:	2308      	moveq	r3, #8
 801d844:	2100      	movs	r1, #0
 801d846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d84a:	6866      	ldr	r6, [r4, #4]
 801d84c:	60a6      	str	r6, [r4, #8]
 801d84e:	2e00      	cmp	r6, #0
 801d850:	bfa2      	ittt	ge
 801d852:	6821      	ldrge	r1, [r4, #0]
 801d854:	f021 0104 	bicge.w	r1, r1, #4
 801d858:	6021      	strge	r1, [r4, #0]
 801d85a:	b90d      	cbnz	r5, 801d860 <_printf_i+0x110>
 801d85c:	2e00      	cmp	r6, #0
 801d85e:	d04b      	beq.n	801d8f8 <_printf_i+0x1a8>
 801d860:	4616      	mov	r6, r2
 801d862:	fbb5 f1f3 	udiv	r1, r5, r3
 801d866:	fb03 5711 	mls	r7, r3, r1, r5
 801d86a:	5dc7      	ldrb	r7, [r0, r7]
 801d86c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d870:	462f      	mov	r7, r5
 801d872:	42bb      	cmp	r3, r7
 801d874:	460d      	mov	r5, r1
 801d876:	d9f4      	bls.n	801d862 <_printf_i+0x112>
 801d878:	2b08      	cmp	r3, #8
 801d87a:	d10b      	bne.n	801d894 <_printf_i+0x144>
 801d87c:	6823      	ldr	r3, [r4, #0]
 801d87e:	07df      	lsls	r7, r3, #31
 801d880:	d508      	bpl.n	801d894 <_printf_i+0x144>
 801d882:	6923      	ldr	r3, [r4, #16]
 801d884:	6861      	ldr	r1, [r4, #4]
 801d886:	4299      	cmp	r1, r3
 801d888:	bfde      	ittt	le
 801d88a:	2330      	movle	r3, #48	@ 0x30
 801d88c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d890:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d894:	1b92      	subs	r2, r2, r6
 801d896:	6122      	str	r2, [r4, #16]
 801d898:	f8cd a000 	str.w	sl, [sp]
 801d89c:	464b      	mov	r3, r9
 801d89e:	aa03      	add	r2, sp, #12
 801d8a0:	4621      	mov	r1, r4
 801d8a2:	4640      	mov	r0, r8
 801d8a4:	f7ff fee6 	bl	801d674 <_printf_common>
 801d8a8:	3001      	adds	r0, #1
 801d8aa:	d14a      	bne.n	801d942 <_printf_i+0x1f2>
 801d8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d8b0:	b004      	add	sp, #16
 801d8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8b6:	6823      	ldr	r3, [r4, #0]
 801d8b8:	f043 0320 	orr.w	r3, r3, #32
 801d8bc:	6023      	str	r3, [r4, #0]
 801d8be:	4833      	ldr	r0, [pc, #204]	@ (801d98c <_printf_i+0x23c>)
 801d8c0:	2778      	movs	r7, #120	@ 0x78
 801d8c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d8c6:	6823      	ldr	r3, [r4, #0]
 801d8c8:	6831      	ldr	r1, [r6, #0]
 801d8ca:	061f      	lsls	r7, r3, #24
 801d8cc:	f851 5b04 	ldr.w	r5, [r1], #4
 801d8d0:	d402      	bmi.n	801d8d8 <_printf_i+0x188>
 801d8d2:	065f      	lsls	r7, r3, #25
 801d8d4:	bf48      	it	mi
 801d8d6:	b2ad      	uxthmi	r5, r5
 801d8d8:	6031      	str	r1, [r6, #0]
 801d8da:	07d9      	lsls	r1, r3, #31
 801d8dc:	bf44      	itt	mi
 801d8de:	f043 0320 	orrmi.w	r3, r3, #32
 801d8e2:	6023      	strmi	r3, [r4, #0]
 801d8e4:	b11d      	cbz	r5, 801d8ee <_printf_i+0x19e>
 801d8e6:	2310      	movs	r3, #16
 801d8e8:	e7ac      	b.n	801d844 <_printf_i+0xf4>
 801d8ea:	4827      	ldr	r0, [pc, #156]	@ (801d988 <_printf_i+0x238>)
 801d8ec:	e7e9      	b.n	801d8c2 <_printf_i+0x172>
 801d8ee:	6823      	ldr	r3, [r4, #0]
 801d8f0:	f023 0320 	bic.w	r3, r3, #32
 801d8f4:	6023      	str	r3, [r4, #0]
 801d8f6:	e7f6      	b.n	801d8e6 <_printf_i+0x196>
 801d8f8:	4616      	mov	r6, r2
 801d8fa:	e7bd      	b.n	801d878 <_printf_i+0x128>
 801d8fc:	6833      	ldr	r3, [r6, #0]
 801d8fe:	6825      	ldr	r5, [r4, #0]
 801d900:	6961      	ldr	r1, [r4, #20]
 801d902:	1d18      	adds	r0, r3, #4
 801d904:	6030      	str	r0, [r6, #0]
 801d906:	062e      	lsls	r6, r5, #24
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	d501      	bpl.n	801d910 <_printf_i+0x1c0>
 801d90c:	6019      	str	r1, [r3, #0]
 801d90e:	e002      	b.n	801d916 <_printf_i+0x1c6>
 801d910:	0668      	lsls	r0, r5, #25
 801d912:	d5fb      	bpl.n	801d90c <_printf_i+0x1bc>
 801d914:	8019      	strh	r1, [r3, #0]
 801d916:	2300      	movs	r3, #0
 801d918:	6123      	str	r3, [r4, #16]
 801d91a:	4616      	mov	r6, r2
 801d91c:	e7bc      	b.n	801d898 <_printf_i+0x148>
 801d91e:	6833      	ldr	r3, [r6, #0]
 801d920:	1d1a      	adds	r2, r3, #4
 801d922:	6032      	str	r2, [r6, #0]
 801d924:	681e      	ldr	r6, [r3, #0]
 801d926:	6862      	ldr	r2, [r4, #4]
 801d928:	2100      	movs	r1, #0
 801d92a:	4630      	mov	r0, r6
 801d92c:	f7e2 fcf0 	bl	8000310 <memchr>
 801d930:	b108      	cbz	r0, 801d936 <_printf_i+0x1e6>
 801d932:	1b80      	subs	r0, r0, r6
 801d934:	6060      	str	r0, [r4, #4]
 801d936:	6863      	ldr	r3, [r4, #4]
 801d938:	6123      	str	r3, [r4, #16]
 801d93a:	2300      	movs	r3, #0
 801d93c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d940:	e7aa      	b.n	801d898 <_printf_i+0x148>
 801d942:	6923      	ldr	r3, [r4, #16]
 801d944:	4632      	mov	r2, r6
 801d946:	4649      	mov	r1, r9
 801d948:	4640      	mov	r0, r8
 801d94a:	47d0      	blx	sl
 801d94c:	3001      	adds	r0, #1
 801d94e:	d0ad      	beq.n	801d8ac <_printf_i+0x15c>
 801d950:	6823      	ldr	r3, [r4, #0]
 801d952:	079b      	lsls	r3, r3, #30
 801d954:	d413      	bmi.n	801d97e <_printf_i+0x22e>
 801d956:	68e0      	ldr	r0, [r4, #12]
 801d958:	9b03      	ldr	r3, [sp, #12]
 801d95a:	4298      	cmp	r0, r3
 801d95c:	bfb8      	it	lt
 801d95e:	4618      	movlt	r0, r3
 801d960:	e7a6      	b.n	801d8b0 <_printf_i+0x160>
 801d962:	2301      	movs	r3, #1
 801d964:	4632      	mov	r2, r6
 801d966:	4649      	mov	r1, r9
 801d968:	4640      	mov	r0, r8
 801d96a:	47d0      	blx	sl
 801d96c:	3001      	adds	r0, #1
 801d96e:	d09d      	beq.n	801d8ac <_printf_i+0x15c>
 801d970:	3501      	adds	r5, #1
 801d972:	68e3      	ldr	r3, [r4, #12]
 801d974:	9903      	ldr	r1, [sp, #12]
 801d976:	1a5b      	subs	r3, r3, r1
 801d978:	42ab      	cmp	r3, r5
 801d97a:	dcf2      	bgt.n	801d962 <_printf_i+0x212>
 801d97c:	e7eb      	b.n	801d956 <_printf_i+0x206>
 801d97e:	2500      	movs	r5, #0
 801d980:	f104 0619 	add.w	r6, r4, #25
 801d984:	e7f5      	b.n	801d972 <_printf_i+0x222>
 801d986:	bf00      	nop
 801d988:	0801ee6b 	.word	0x0801ee6b
 801d98c:	0801ee7c 	.word	0x0801ee7c

0801d990 <__sflush_r>:
 801d990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d998:	0716      	lsls	r6, r2, #28
 801d99a:	4605      	mov	r5, r0
 801d99c:	460c      	mov	r4, r1
 801d99e:	d454      	bmi.n	801da4a <__sflush_r+0xba>
 801d9a0:	684b      	ldr	r3, [r1, #4]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	dc02      	bgt.n	801d9ac <__sflush_r+0x1c>
 801d9a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	dd48      	ble.n	801da3e <__sflush_r+0xae>
 801d9ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9ae:	2e00      	cmp	r6, #0
 801d9b0:	d045      	beq.n	801da3e <__sflush_r+0xae>
 801d9b2:	2300      	movs	r3, #0
 801d9b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d9b8:	682f      	ldr	r7, [r5, #0]
 801d9ba:	6a21      	ldr	r1, [r4, #32]
 801d9bc:	602b      	str	r3, [r5, #0]
 801d9be:	d030      	beq.n	801da22 <__sflush_r+0x92>
 801d9c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d9c2:	89a3      	ldrh	r3, [r4, #12]
 801d9c4:	0759      	lsls	r1, r3, #29
 801d9c6:	d505      	bpl.n	801d9d4 <__sflush_r+0x44>
 801d9c8:	6863      	ldr	r3, [r4, #4]
 801d9ca:	1ad2      	subs	r2, r2, r3
 801d9cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d9ce:	b10b      	cbz	r3, 801d9d4 <__sflush_r+0x44>
 801d9d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d9d2:	1ad2      	subs	r2, r2, r3
 801d9d4:	2300      	movs	r3, #0
 801d9d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9d8:	6a21      	ldr	r1, [r4, #32]
 801d9da:	4628      	mov	r0, r5
 801d9dc:	47b0      	blx	r6
 801d9de:	1c43      	adds	r3, r0, #1
 801d9e0:	89a3      	ldrh	r3, [r4, #12]
 801d9e2:	d106      	bne.n	801d9f2 <__sflush_r+0x62>
 801d9e4:	6829      	ldr	r1, [r5, #0]
 801d9e6:	291d      	cmp	r1, #29
 801d9e8:	d82b      	bhi.n	801da42 <__sflush_r+0xb2>
 801d9ea:	4a2a      	ldr	r2, [pc, #168]	@ (801da94 <__sflush_r+0x104>)
 801d9ec:	410a      	asrs	r2, r1
 801d9ee:	07d6      	lsls	r6, r2, #31
 801d9f0:	d427      	bmi.n	801da42 <__sflush_r+0xb2>
 801d9f2:	2200      	movs	r2, #0
 801d9f4:	6062      	str	r2, [r4, #4]
 801d9f6:	04d9      	lsls	r1, r3, #19
 801d9f8:	6922      	ldr	r2, [r4, #16]
 801d9fa:	6022      	str	r2, [r4, #0]
 801d9fc:	d504      	bpl.n	801da08 <__sflush_r+0x78>
 801d9fe:	1c42      	adds	r2, r0, #1
 801da00:	d101      	bne.n	801da06 <__sflush_r+0x76>
 801da02:	682b      	ldr	r3, [r5, #0]
 801da04:	b903      	cbnz	r3, 801da08 <__sflush_r+0x78>
 801da06:	6560      	str	r0, [r4, #84]	@ 0x54
 801da08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da0a:	602f      	str	r7, [r5, #0]
 801da0c:	b1b9      	cbz	r1, 801da3e <__sflush_r+0xae>
 801da0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da12:	4299      	cmp	r1, r3
 801da14:	d002      	beq.n	801da1c <__sflush_r+0x8c>
 801da16:	4628      	mov	r0, r5
 801da18:	f7ff fb40 	bl	801d09c <_free_r>
 801da1c:	2300      	movs	r3, #0
 801da1e:	6363      	str	r3, [r4, #52]	@ 0x34
 801da20:	e00d      	b.n	801da3e <__sflush_r+0xae>
 801da22:	2301      	movs	r3, #1
 801da24:	4628      	mov	r0, r5
 801da26:	47b0      	blx	r6
 801da28:	4602      	mov	r2, r0
 801da2a:	1c50      	adds	r0, r2, #1
 801da2c:	d1c9      	bne.n	801d9c2 <__sflush_r+0x32>
 801da2e:	682b      	ldr	r3, [r5, #0]
 801da30:	2b00      	cmp	r3, #0
 801da32:	d0c6      	beq.n	801d9c2 <__sflush_r+0x32>
 801da34:	2b1d      	cmp	r3, #29
 801da36:	d001      	beq.n	801da3c <__sflush_r+0xac>
 801da38:	2b16      	cmp	r3, #22
 801da3a:	d11e      	bne.n	801da7a <__sflush_r+0xea>
 801da3c:	602f      	str	r7, [r5, #0]
 801da3e:	2000      	movs	r0, #0
 801da40:	e022      	b.n	801da88 <__sflush_r+0xf8>
 801da42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da46:	b21b      	sxth	r3, r3
 801da48:	e01b      	b.n	801da82 <__sflush_r+0xf2>
 801da4a:	690f      	ldr	r7, [r1, #16]
 801da4c:	2f00      	cmp	r7, #0
 801da4e:	d0f6      	beq.n	801da3e <__sflush_r+0xae>
 801da50:	0793      	lsls	r3, r2, #30
 801da52:	680e      	ldr	r6, [r1, #0]
 801da54:	bf08      	it	eq
 801da56:	694b      	ldreq	r3, [r1, #20]
 801da58:	600f      	str	r7, [r1, #0]
 801da5a:	bf18      	it	ne
 801da5c:	2300      	movne	r3, #0
 801da5e:	eba6 0807 	sub.w	r8, r6, r7
 801da62:	608b      	str	r3, [r1, #8]
 801da64:	f1b8 0f00 	cmp.w	r8, #0
 801da68:	dde9      	ble.n	801da3e <__sflush_r+0xae>
 801da6a:	6a21      	ldr	r1, [r4, #32]
 801da6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801da6e:	4643      	mov	r3, r8
 801da70:	463a      	mov	r2, r7
 801da72:	4628      	mov	r0, r5
 801da74:	47b0      	blx	r6
 801da76:	2800      	cmp	r0, #0
 801da78:	dc08      	bgt.n	801da8c <__sflush_r+0xfc>
 801da7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da82:	81a3      	strh	r3, [r4, #12]
 801da84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801da88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da8c:	4407      	add	r7, r0
 801da8e:	eba8 0800 	sub.w	r8, r8, r0
 801da92:	e7e7      	b.n	801da64 <__sflush_r+0xd4>
 801da94:	dfbffffe 	.word	0xdfbffffe

0801da98 <_fflush_r>:
 801da98:	b538      	push	{r3, r4, r5, lr}
 801da9a:	690b      	ldr	r3, [r1, #16]
 801da9c:	4605      	mov	r5, r0
 801da9e:	460c      	mov	r4, r1
 801daa0:	b913      	cbnz	r3, 801daa8 <_fflush_r+0x10>
 801daa2:	2500      	movs	r5, #0
 801daa4:	4628      	mov	r0, r5
 801daa6:	bd38      	pop	{r3, r4, r5, pc}
 801daa8:	b118      	cbz	r0, 801dab2 <_fflush_r+0x1a>
 801daaa:	6a03      	ldr	r3, [r0, #32]
 801daac:	b90b      	cbnz	r3, 801dab2 <_fflush_r+0x1a>
 801daae:	f7fe ffe3 	bl	801ca78 <__sinit>
 801dab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d0f3      	beq.n	801daa2 <_fflush_r+0xa>
 801daba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dabc:	07d0      	lsls	r0, r2, #31
 801dabe:	d404      	bmi.n	801daca <_fflush_r+0x32>
 801dac0:	0599      	lsls	r1, r3, #22
 801dac2:	d402      	bmi.n	801daca <_fflush_r+0x32>
 801dac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dac6:	f7ff faa6 	bl	801d016 <__retarget_lock_acquire_recursive>
 801daca:	4628      	mov	r0, r5
 801dacc:	4621      	mov	r1, r4
 801dace:	f7ff ff5f 	bl	801d990 <__sflush_r>
 801dad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dad4:	07da      	lsls	r2, r3, #31
 801dad6:	4605      	mov	r5, r0
 801dad8:	d4e4      	bmi.n	801daa4 <_fflush_r+0xc>
 801dada:	89a3      	ldrh	r3, [r4, #12]
 801dadc:	059b      	lsls	r3, r3, #22
 801dade:	d4e1      	bmi.n	801daa4 <_fflush_r+0xc>
 801dae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dae2:	f7ff fa99 	bl	801d018 <__retarget_lock_release_recursive>
 801dae6:	e7dd      	b.n	801daa4 <_fflush_r+0xc>

0801dae8 <fiprintf>:
 801dae8:	b40e      	push	{r1, r2, r3}
 801daea:	b503      	push	{r0, r1, lr}
 801daec:	4601      	mov	r1, r0
 801daee:	ab03      	add	r3, sp, #12
 801daf0:	4805      	ldr	r0, [pc, #20]	@ (801db08 <fiprintf+0x20>)
 801daf2:	f853 2b04 	ldr.w	r2, [r3], #4
 801daf6:	6800      	ldr	r0, [r0, #0]
 801daf8:	9301      	str	r3, [sp, #4]
 801dafa:	f7ff fca3 	bl	801d444 <_vfiprintf_r>
 801dafe:	b002      	add	sp, #8
 801db00:	f85d eb04 	ldr.w	lr, [sp], #4
 801db04:	b003      	add	sp, #12
 801db06:	4770      	bx	lr
 801db08:	2400068c 	.word	0x2400068c

0801db0c <__swhatbuf_r>:
 801db0c:	b570      	push	{r4, r5, r6, lr}
 801db0e:	460c      	mov	r4, r1
 801db10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db14:	2900      	cmp	r1, #0
 801db16:	b096      	sub	sp, #88	@ 0x58
 801db18:	4615      	mov	r5, r2
 801db1a:	461e      	mov	r6, r3
 801db1c:	da0d      	bge.n	801db3a <__swhatbuf_r+0x2e>
 801db1e:	89a3      	ldrh	r3, [r4, #12]
 801db20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801db24:	f04f 0100 	mov.w	r1, #0
 801db28:	bf14      	ite	ne
 801db2a:	2340      	movne	r3, #64	@ 0x40
 801db2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db30:	2000      	movs	r0, #0
 801db32:	6031      	str	r1, [r6, #0]
 801db34:	602b      	str	r3, [r5, #0]
 801db36:	b016      	add	sp, #88	@ 0x58
 801db38:	bd70      	pop	{r4, r5, r6, pc}
 801db3a:	466a      	mov	r2, sp
 801db3c:	f000 f848 	bl	801dbd0 <_fstat_r>
 801db40:	2800      	cmp	r0, #0
 801db42:	dbec      	blt.n	801db1e <__swhatbuf_r+0x12>
 801db44:	9901      	ldr	r1, [sp, #4]
 801db46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801db4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801db4e:	4259      	negs	r1, r3
 801db50:	4159      	adcs	r1, r3
 801db52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801db56:	e7eb      	b.n	801db30 <__swhatbuf_r+0x24>

0801db58 <__smakebuf_r>:
 801db58:	898b      	ldrh	r3, [r1, #12]
 801db5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db5c:	079d      	lsls	r5, r3, #30
 801db5e:	4606      	mov	r6, r0
 801db60:	460c      	mov	r4, r1
 801db62:	d507      	bpl.n	801db74 <__smakebuf_r+0x1c>
 801db64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801db68:	6023      	str	r3, [r4, #0]
 801db6a:	6123      	str	r3, [r4, #16]
 801db6c:	2301      	movs	r3, #1
 801db6e:	6163      	str	r3, [r4, #20]
 801db70:	b003      	add	sp, #12
 801db72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db74:	ab01      	add	r3, sp, #4
 801db76:	466a      	mov	r2, sp
 801db78:	f7ff ffc8 	bl	801db0c <__swhatbuf_r>
 801db7c:	9f00      	ldr	r7, [sp, #0]
 801db7e:	4605      	mov	r5, r0
 801db80:	4639      	mov	r1, r7
 801db82:	4630      	mov	r0, r6
 801db84:	f7fe fd46 	bl	801c614 <_malloc_r>
 801db88:	b948      	cbnz	r0, 801db9e <__smakebuf_r+0x46>
 801db8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db8e:	059a      	lsls	r2, r3, #22
 801db90:	d4ee      	bmi.n	801db70 <__smakebuf_r+0x18>
 801db92:	f023 0303 	bic.w	r3, r3, #3
 801db96:	f043 0302 	orr.w	r3, r3, #2
 801db9a:	81a3      	strh	r3, [r4, #12]
 801db9c:	e7e2      	b.n	801db64 <__smakebuf_r+0xc>
 801db9e:	89a3      	ldrh	r3, [r4, #12]
 801dba0:	6020      	str	r0, [r4, #0]
 801dba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dba6:	81a3      	strh	r3, [r4, #12]
 801dba8:	9b01      	ldr	r3, [sp, #4]
 801dbaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dbae:	b15b      	cbz	r3, 801dbc8 <__smakebuf_r+0x70>
 801dbb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dbb4:	4630      	mov	r0, r6
 801dbb6:	f000 f81d 	bl	801dbf4 <_isatty_r>
 801dbba:	b128      	cbz	r0, 801dbc8 <__smakebuf_r+0x70>
 801dbbc:	89a3      	ldrh	r3, [r4, #12]
 801dbbe:	f023 0303 	bic.w	r3, r3, #3
 801dbc2:	f043 0301 	orr.w	r3, r3, #1
 801dbc6:	81a3      	strh	r3, [r4, #12]
 801dbc8:	89a3      	ldrh	r3, [r4, #12]
 801dbca:	431d      	orrs	r5, r3
 801dbcc:	81a5      	strh	r5, [r4, #12]
 801dbce:	e7cf      	b.n	801db70 <__smakebuf_r+0x18>

0801dbd0 <_fstat_r>:
 801dbd0:	b538      	push	{r3, r4, r5, lr}
 801dbd2:	4d07      	ldr	r5, [pc, #28]	@ (801dbf0 <_fstat_r+0x20>)
 801dbd4:	2300      	movs	r3, #0
 801dbd6:	4604      	mov	r4, r0
 801dbd8:	4608      	mov	r0, r1
 801dbda:	4611      	mov	r1, r2
 801dbdc:	602b      	str	r3, [r5, #0]
 801dbde:	f7e4 f9a5 	bl	8001f2c <_fstat>
 801dbe2:	1c43      	adds	r3, r0, #1
 801dbe4:	d102      	bne.n	801dbec <_fstat_r+0x1c>
 801dbe6:	682b      	ldr	r3, [r5, #0]
 801dbe8:	b103      	cbz	r3, 801dbec <_fstat_r+0x1c>
 801dbea:	6023      	str	r3, [r4, #0]
 801dbec:	bd38      	pop	{r3, r4, r5, pc}
 801dbee:	bf00      	nop
 801dbf0:	24013c70 	.word	0x24013c70

0801dbf4 <_isatty_r>:
 801dbf4:	b538      	push	{r3, r4, r5, lr}
 801dbf6:	4d06      	ldr	r5, [pc, #24]	@ (801dc10 <_isatty_r+0x1c>)
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	4604      	mov	r4, r0
 801dbfc:	4608      	mov	r0, r1
 801dbfe:	602b      	str	r3, [r5, #0]
 801dc00:	f7e4 f9a4 	bl	8001f4c <_isatty>
 801dc04:	1c43      	adds	r3, r0, #1
 801dc06:	d102      	bne.n	801dc0e <_isatty_r+0x1a>
 801dc08:	682b      	ldr	r3, [r5, #0]
 801dc0a:	b103      	cbz	r3, 801dc0e <_isatty_r+0x1a>
 801dc0c:	6023      	str	r3, [r4, #0]
 801dc0e:	bd38      	pop	{r3, r4, r5, pc}
 801dc10:	24013c70 	.word	0x24013c70

0801dc14 <abort>:
 801dc14:	b508      	push	{r3, lr}
 801dc16:	2006      	movs	r0, #6
 801dc18:	f000 f82c 	bl	801dc74 <raise>
 801dc1c:	2001      	movs	r0, #1
 801dc1e:	f7e4 f935 	bl	8001e8c <_exit>

0801dc22 <_raise_r>:
 801dc22:	291f      	cmp	r1, #31
 801dc24:	b538      	push	{r3, r4, r5, lr}
 801dc26:	4605      	mov	r5, r0
 801dc28:	460c      	mov	r4, r1
 801dc2a:	d904      	bls.n	801dc36 <_raise_r+0x14>
 801dc2c:	2316      	movs	r3, #22
 801dc2e:	6003      	str	r3, [r0, #0]
 801dc30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc34:	bd38      	pop	{r3, r4, r5, pc}
 801dc36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dc38:	b112      	cbz	r2, 801dc40 <_raise_r+0x1e>
 801dc3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc3e:	b94b      	cbnz	r3, 801dc54 <_raise_r+0x32>
 801dc40:	4628      	mov	r0, r5
 801dc42:	f000 f831 	bl	801dca8 <_getpid_r>
 801dc46:	4622      	mov	r2, r4
 801dc48:	4601      	mov	r1, r0
 801dc4a:	4628      	mov	r0, r5
 801dc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc50:	f000 b818 	b.w	801dc84 <_kill_r>
 801dc54:	2b01      	cmp	r3, #1
 801dc56:	d00a      	beq.n	801dc6e <_raise_r+0x4c>
 801dc58:	1c59      	adds	r1, r3, #1
 801dc5a:	d103      	bne.n	801dc64 <_raise_r+0x42>
 801dc5c:	2316      	movs	r3, #22
 801dc5e:	6003      	str	r3, [r0, #0]
 801dc60:	2001      	movs	r0, #1
 801dc62:	e7e7      	b.n	801dc34 <_raise_r+0x12>
 801dc64:	2100      	movs	r1, #0
 801dc66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	4798      	blx	r3
 801dc6e:	2000      	movs	r0, #0
 801dc70:	e7e0      	b.n	801dc34 <_raise_r+0x12>
	...

0801dc74 <raise>:
 801dc74:	4b02      	ldr	r3, [pc, #8]	@ (801dc80 <raise+0xc>)
 801dc76:	4601      	mov	r1, r0
 801dc78:	6818      	ldr	r0, [r3, #0]
 801dc7a:	f7ff bfd2 	b.w	801dc22 <_raise_r>
 801dc7e:	bf00      	nop
 801dc80:	2400068c 	.word	0x2400068c

0801dc84 <_kill_r>:
 801dc84:	b538      	push	{r3, r4, r5, lr}
 801dc86:	4d07      	ldr	r5, [pc, #28]	@ (801dca4 <_kill_r+0x20>)
 801dc88:	2300      	movs	r3, #0
 801dc8a:	4604      	mov	r4, r0
 801dc8c:	4608      	mov	r0, r1
 801dc8e:	4611      	mov	r1, r2
 801dc90:	602b      	str	r3, [r5, #0]
 801dc92:	f7e4 f8eb 	bl	8001e6c <_kill>
 801dc96:	1c43      	adds	r3, r0, #1
 801dc98:	d102      	bne.n	801dca0 <_kill_r+0x1c>
 801dc9a:	682b      	ldr	r3, [r5, #0]
 801dc9c:	b103      	cbz	r3, 801dca0 <_kill_r+0x1c>
 801dc9e:	6023      	str	r3, [r4, #0]
 801dca0:	bd38      	pop	{r3, r4, r5, pc}
 801dca2:	bf00      	nop
 801dca4:	24013c70 	.word	0x24013c70

0801dca8 <_getpid_r>:
 801dca8:	f7e4 b8d8 	b.w	8001e5c <_getpid>

0801dcac <_init>:
 801dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcae:	bf00      	nop
 801dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcb2:	bc08      	pop	{r3}
 801dcb4:	469e      	mov	lr, r3
 801dcb6:	4770      	bx	lr

0801dcb8 <_fini>:
 801dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcba:	bf00      	nop
 801dcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcbe:	bc08      	pop	{r3}
 801dcc0:	469e      	mov	lr, r3
 801dcc2:	4770      	bx	lr
